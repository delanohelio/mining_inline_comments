{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTYxMjcx", "number": 7969, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDowMDoyN1rOEIHUvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoxMDowNVrOELQyQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQ0MDYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDowMDoyN1rOGn4gaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDowMDoyN1rOGn4gaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MzQ0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a Amazon Music track by it's id od stops playing if a empty string was provided\n          \n          \n            \n            | amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of an Amazon Music track by specifying its id or stops playing if an empty string was provided", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444473448", "createdAt": "2020-06-23T20:00:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -119,21 +161,23 @@ It will be configured at runtime by using the save channel to store the current\n | bluetoothDeviceName   | String      | R           | echo, echoshow, echospot      | User friendly name of the connected bluetooth device\n | radioStationId        | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a TuneIn radio station by specifying its id or stops playing if an empty string was provided\n | radio                 | Switch      | R/W         | echo, echoshow, echospot, wha | Start playing of the last used TuneIn radio station (works after the radio station started after the openhab start)\n+| amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a Amazon Music track by it's id od stops playing if a empty string was provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQ0MjE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDowMDo1MVrOGn4hXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDowMDo1MVrOGn4hXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3MzY5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | amazonMusicPlayListId | String      | W           | echo, echoshow, echospot, wha | Write Only! Start playing of a Amazon Music playlist by specifying it's id od stops playing if a empty string was provided. Selection will only work in PaperUI\n          \n          \n            \n            | amazonMusicPlayListId | String      | W           | echo, echoshow, echospot, wha | Write Only! Start playing of an Amazon Music playlist by specifying its id or stops playing if an empty string was provided. Selection will only work in PaperUI", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444473692", "createdAt": "2020-06-23T20:00:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -119,21 +161,23 @@ It will be configured at runtime by using the save channel to store the current\n | bluetoothDeviceName   | String      | R           | echo, echoshow, echospot      | User friendly name of the connected bluetooth device\n | radioStationId        | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a TuneIn radio station by specifying its id or stops playing if an empty string was provided\n | radio                 | Switch      | R/W         | echo, echoshow, echospot, wha | Start playing of the last used TuneIn radio station (works after the radio station started after the openhab start)\n+| amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a Amazon Music track by it's id od stops playing if a empty string was provided\n+| amazonMusicPlayListId | String      | W           | echo, echoshow, echospot, wha | Write Only! Start playing of a Amazon Music playlist by specifying it's id od stops playing if a empty string was provided. Selection will only work in PaperUI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTQ5NzM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/AmazonEchoDiscovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDoxOToyOFrOGn5FIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMTozNjoxMFrOGn7gaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mjg1MQ==", "bodyText": "Isn't ExtendedDiscoveryService deprecated?", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444482851", "createdAt": "2020-06-23T20:19:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/AmazonEchoDiscovery.java", "diffHunk": "@@ -44,17 +54,24 @@\n  * @author Michael Geramb - Initial contribution\n  */\n @NonNullByDefault\n-public class AmazonEchoDiscovery extends AbstractDiscoveryService {\n+public class AmazonEchoDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMjYwMA==", "bodyText": "Ah, just read your comment @J-N-K, so feel free to ignore my comment.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444522600", "createdAt": "2020-06-23T21:36:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/AmazonEchoDiscovery.java", "diffHunk": "@@ -44,17 +54,24 @@\n  * @author Michael Geramb - Initial contribution\n  */\n @NonNullByDefault\n-public class AmazonEchoDiscovery extends AbstractDiscoveryService {\n+public class AmazonEchoDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4Mjg1MQ=="}, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU0MzE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDozMzo1MFrOGn5hzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMzo0Njo0NVrOGoS4KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDE5MA==", "bodyText": "What is the point of this using Function<String, HandlerBase>  values instead of Supplier<HandlerBase> values? None of the statically constructed values even use the String argument.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444490190", "createdAt": "2020-06-23T20:33:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+\n+/**\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Constants {\n+    public static final Map<String, @Nullable Function<String, HandlerBase>> HANDLER_FACTORY = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkwNTUxMw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444905513", "createdAt": "2020-06-24T13:46:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/Constants.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+\n+/**\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Constants {\n+    public static final Map<String, @Nullable Function<String, HandlerBase>> HANDLER_FACTORY = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MDE5MA=="}, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU3MjA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0MzoxNlrOGn50dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0MzoxNlrOGn50dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NDk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SmartHomeCapability capabilities[] = shd.capabilities;\n          \n          \n            \n                        SmartHomeCapability[] capabilities = shd.capabilities;", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444494966", "createdAt": "2020-06-23T20:43:16Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            removeChannelFromDevice(channelId);\n+        }\n+        updateThing(\n+                editThing().withChannel(ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                        .withType(channelTypeUID).build()).build());\n+        return true;\n+    }\n+\n+    private void removeChannelFromDevice(String channelId) {\n+        updateThing(editThing().withoutChannel(new ChannelUID(getThing().getUID(), channelId)).build());\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability capabilities[] = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability capabilities[] = shd.capabilities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU3MzI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0MzozOFrOGn51MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0MzozOFrOGn51MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NTE1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    SmartHomeCapability capabilities[] = shd.capabilities;\n          \n          \n            \n                                    SmartHomeCapability[] capabilities = shd.capabilities;", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444495153", "createdAt": "2020-06-23T20:43:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            removeChannelFromDevice(channelId);\n+        }\n+        updateThing(\n+                editThing().withChannel(ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                        .withType(channelTypeUID).build()).build());\n+        return true;\n+    }\n+\n+    private void removeChannelFromDevice(String channelId) {\n+        updateThing(editThing().withoutChannel(new ChannelUID(getThing().getUID(), channelId)).build());\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability capabilities[] = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability capabilities[] = shd.capabilities;\n+            if (capabilities == null) {\n+                return Collections.emptySet();\n+            }\n+            if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                    .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                result.add(shd);\n+            }\n+        } else {\n+            SmartHomeGroup shg = (SmartHomeGroup) baseDevice;\n+            for (SmartHomeBaseDevice device : allDevices) {\n+                if (device instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) device;\n+                    if (shd.tags != null && shd.tags.tagNameToValueSetMap != null\n+                            && shd.tags.tagNameToValueSetMap.groupIdentity != null\n+                            && shg.applianceGroupIdentifier != null && shg.applianceGroupIdentifier.value != null\n+                            && Arrays.asList(shd.tags.tagNameToValueSetMap.groupIdentity)\n+                                    .contains(shg.applianceGroupIdentifier.value)) {\n+                        SmartHomeCapability capabilities[] = shd.capabilities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU4MzE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0Njo0N1rOGn57bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyMzoxOFrOGoUeDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5Njc0OQ==", "bodyText": "This is highly inefficient, each iteration of the loop results in a fresh edit of the Thing and thus triggers a lot of events that could be avoided if you just called editThing once, removed all the unwanted channels from the builder, then called updateThing.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444496749", "createdAt": "2020-06-23T20:46:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzMTU5OA==", "bodyText": "done.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444931598", "createdAt": "2020-06-24T14:23:18Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5Njc0OQ=="}, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU4NzQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0ODowNVrOGn5-Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0ODowNVrOGn5-Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NzQ1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        SmartHomeCapability capabilities[] = shd.capabilities;\n          \n          \n            \n                        SmartHomeCapability[] capabilities = shd.capabilities;", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444497459", "createdAt": "2020-06-23T20:48:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            removeChannelFromDevice(channelId);\n+        }\n+        updateThing(\n+                editThing().withChannel(ChannelBuilder.create(new ChannelUID(getThing().getUID(), channelId), itemType)\n+                        .withType(channelTypeUID).build()).build());\n+        return true;\n+    }\n+\n+    private void removeChannelFromDevice(String channelId) {\n+        updateThing(editThing().withoutChannel(new ChannelUID(getThing().getUID(), channelId)).build());\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability capabilities[] = shd.capabilities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 320}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU5NDI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1MDoxNVrOGn6CsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyMzoyNlrOGoUeZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5ODYwOA==", "bodyText": "Same issue as I mentioned earlier.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444498608", "createdAt": "2020-06-23T20:50:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzMTY4NQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r444931685", "createdAt": "2020-06-24T14:23:26Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Function<String, HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.apply(interfaceName);\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(channelInfo.channelId, channelInfo.itemType, channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.forEach(this::removeChannelFromDevice);\n+        }\n+\n+        if (changed) {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(String channelId, String itemType, ChannelTypeUID channelTypeUID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5ODYwOA=="}, "originalCommit": {"oid": "1b5420d0c2985a42b5f8f8f5594ad63354a87216"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ3NjYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyOTowN1rOGogFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyOTowN1rOGogFgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTkyMQ==", "bodyText": "This log can be removed", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445121921", "createdAt": "2020-06-24T19:29:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ3OTA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyOTo1NVrOGogHAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMTozMTo0N1rOGoj2Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMjMwNA==", "bodyText": "Is there a reason this was overriden?", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445122304", "createdAt": "2020-06-24T19:29:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE4MzUzNA==", "bodyText": "Visibility is changed (protected -> public).", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445183534", "createdAt": "2020-06-24T21:31:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMjMwNA=="}, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ5NjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNToxM1rOGogRkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNToxM1rOGogRkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTAwOA==", "bodyText": "So if a single device has null capabilities you have to return an empty collection? I'm not sure this is correct and should instead just continue;\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        return Collections.emptySet();\n          \n          \n            \n                                        continue;", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445125008", "createdAt": "2020-06-24T19:35:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(ThingBuilder thingBuilder, String channelId, String itemType,\n+            ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            thingBuilder.withoutChannel(channel.getUID());\n+        }\n+        thingBuilder.withChannel(ChannelBuilder.create(new ChannelUID(thing.getUID(), channelId), itemType)\n+                .withType(channelTypeUID).build());\n+        return true;\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return Collections.emptySet();\n+            }\n+            if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                    .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                result.add(shd);\n+            }\n+        } else {\n+            SmartHomeGroup shg = (SmartHomeGroup) baseDevice;\n+            for (SmartHomeBaseDevice device : allDevices) {\n+                if (device instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) device;\n+                    if (shd.tags != null && shd.tags.tagNameToValueSetMap != null\n+                            && shd.tags.tagNameToValueSetMap.groupIdentity != null\n+                            && shg.applianceGroupIdentifier != null && shg.applianceGroupIdentifier.value != null\n+                            && Arrays.asList(shd.tags.tagNameToValueSetMap.groupIdentity)\n+                                    .contains(shg.applianceGroupIdentifier.value)) {\n+                        SmartHomeCapability[] capabilities = shd.capabilities;\n+                        if (capabilities == null) {\n+                            return Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 368}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ5ODQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNTo1NFrOGogS1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNTo1NFrOGogS1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTMzMw==", "bodyText": "This continue doesn't do anything, it can be removed.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445125333", "createdAt": "2020-06-24T19:35:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/SmartHomeDeviceHandler.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.handler;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.SUPPORTED_INTERFACES;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.BridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.ChannelInfo;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.HandlerBase.UpdateChannelResult;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDeviceHandler extends BaseThingHandler {\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDeviceHandler.class);\n+\n+    private @Nullable SmartHomeBaseDevice smartHomeBaseDevice;\n+    private final Gson gson;\n+    private final Map<String, @Nullable HandlerBase> handlers = new HashMap<>();\n+    private final Map<String, @Nullable JsonArray> lastStates = new HashMap<>();\n+\n+    public SmartHomeDeviceHandler(Thing thing, Gson gson) {\n+        super(thing);\n+        this.gson = gson;\n+    }\n+\n+    public synchronized void setDeviceAndUpdateThingState(AccountHandler accountHandler,\n+            @Nullable SmartHomeBaseDevice smartHomeBaseDevice) {\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice\");\n+            return;\n+        }\n+        boolean changed = this.smartHomeBaseDevice == null;\n+        this.smartHomeBaseDevice = smartHomeBaseDevice;\n+\n+        Set<String> unusedChannels = new HashSet<>();\n+        thing.getChannels().forEach(channel -> unusedChannels.add(channel.getUID().getId()));\n+\n+        Set<String> unusedHandlers = new HashSet<>(handlers.keySet());\n+\n+        Map<String, List<SmartHomeCapability>> capabilities = new HashMap<>();\n+        getCapabilities(capabilities, accountHandler, smartHomeBaseDevice);\n+\n+        ThingBuilder thingBuilder = editThing();\n+\n+        for (String interfaceName : capabilities.keySet()) {\n+            HandlerBase handler = handlers.get(interfaceName);\n+            if (handler != null) {\n+                unusedHandlers.remove(interfaceName);\n+            } else {\n+                Supplier<HandlerBase> creator = Constants.HANDLER_FACTORY.get(interfaceName);\n+                if (creator != null) {\n+                    handler = creator.get();\n+                    handlers.put(interfaceName, handler);\n+                }\n+            }\n+            if (handler != null) {\n+                Collection<ChannelInfo> required = handler.initialize(this, capabilities.get(interfaceName));\n+                for (ChannelInfo channelInfo : required) {\n+                    unusedChannels.remove(channelInfo.channelId);\n+                    if (addChannelToDevice(thingBuilder, channelInfo.channelId, channelInfo.itemType,\n+                            channelInfo.channelTypeUID)) {\n+                        changed = true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        unusedHandlers.forEach(handlers::remove);\n+        if (!unusedChannels.isEmpty()) {\n+            changed = true;\n+            unusedChannels.stream().map(id -> new ChannelUID(thing.getUID(), id)).forEach(thingBuilder::withoutChannel);\n+        }\n+\n+        if (changed) {\n+            updateThing(thingBuilder.build());\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"Thing has changed.\");\n+            accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+        }\n+    }\n+\n+    public String findId() {\n+        String id = (String) getConfig().get(DEVICE_PROPERTY_ID);\n+        if (id == null) {\n+            return \"\";\n+        }\n+        return id;\n+    }\n+\n+    @Override\n+    public void updateState(String channelId, State state) {\n+        super.updateState(new ChannelUID(thing.getUID(), channelId), state);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.info(\"initializing {}\", thing.getUID());\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler != null) {\n+            accountHandler.addSmartHomeDeviceHandler(this);\n+            setDeviceAndUpdateThingState(accountHandler, smartHomeBaseDevice);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridgehandler not found\");\n+        }\n+    }\n+\n+    private boolean addChannelToDevice(ThingBuilder thingBuilder, String channelId, String itemType,\n+            ChannelTypeUID channelTypeUID) {\n+        Channel channel = thing.getChannel(channelId);\n+        if (channel != null) {\n+            if (channelTypeUID.equals(channel.getChannelTypeUID()) && itemType.equals(channel.getAcceptedItemType())) {\n+                // channel exist with the same settings\n+                return false;\n+            }\n+            // channel exist with other settings, remove it first\n+            thingBuilder.withoutChannel(channel.getUID());\n+        }\n+        thingBuilder.withChannel(ChannelBuilder.create(new ChannelUID(thing.getUID(), channelId), itemType)\n+                .withType(channelTypeUID).build());\n+        return true;\n+    }\n+\n+    public void updateChannelStates(List<SmartHomeBaseDevice> allDevices,\n+            Map<String, JsonArray> applianceIdToCapabilityStates) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+        if (smartHomeBaseDevice == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"Can't find smarthomeBaseDevice!\");\n+            return;\n+        }\n+\n+        boolean stateFound = false;\n+        Map<String, List<JsonObject>> mapInterfaceToStates = new HashMap<>();\n+        SmartHomeDevice firstDevice = null;\n+        for (SmartHomeDevice shd : getSupportedSmartHomeDevices(smartHomeBaseDevice, allDevices)) {\n+            JsonArray states = applianceIdToCapabilityStates.get(shd.applianceId);\n+            String applianceId = shd.applianceId;\n+            if (applianceId == null) {\n+                continue;\n+            }\n+            if (states != null) {\n+                stateFound = true;\n+                if (smartHomeBaseDevice.isGroup()) {\n+                    // for groups, store the last state of all devices\n+                    lastStates.put(applianceId, states);\n+                }\n+            } else {\n+                states = lastStates.get(applianceId);\n+                if (states == null) {\n+                    continue;\n+                }\n+            }\n+            if (firstDevice == null) {\n+                firstDevice = shd;\n+            }\n+            for (JsonElement stateElement : states) {\n+                String stateJson = stateElement.getAsString();\n+                if (stateJson.startsWith(\"{\") && stateJson.endsWith(\"}\")) {\n+                    JsonObject state = gson.fromJson(stateJson, JsonObject.class);\n+                    String interfaceName = state.get(\"namespace\").getAsString();\n+                    mapInterfaceToStates.computeIfAbsent(interfaceName, k -> new ArrayList<>()).add(state);\n+                }\n+            }\n+        }\n+        for (HandlerBase handlerBase : handlers.values()) {\n+            if (handlerBase == null) {\n+                continue;\n+            }\n+            UpdateChannelResult result = new UpdateChannelResult();\n+\n+            for (String interfaceName : handlerBase.getSupportedInterface()) {\n+                List<JsonObject> stateList = mapInterfaceToStates.getOrDefault(interfaceName, Collections.emptyList());\n+                try {\n+                    handlerBase.updateChannels(interfaceName, stateList, result);\n+                } catch (Exception e) {\n+                    // We catch all exceptions, otherwise all other things are not updated!\n+                    logger.debug(\"Updating states failed\", e);\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+                }\n+            }\n+\n+            if (result.needSingleUpdate && smartHomeBaseDevice instanceof SmartHomeDevice && accountHandler != null) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeBaseDevice;\n+                accountHandler.forceDelayedSmartHomeStateUpdate(shd.findId());\n+            }\n+        }\n+\n+        if (stateFound) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.NONE, \"State not found\");\n+        }\n+    }\n+\n+    private @Nullable AccountHandler getAccountHandler() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            BridgeHandler bridgeHandler = bridge.getHandler();\n+            if (bridgeHandler instanceof AccountHandler) {\n+                return (AccountHandler) bridgeHandler;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        AccountHandler accountHandler = getAccountHandler();\n+        if (accountHandler == null) {\n+            logger.debug(\"accountHandler is null in {}\", thing.getUID());\n+            return;\n+        }\n+        Connection connection = accountHandler.findConnection();\n+        if (connection == null) {\n+            logger.debug(\"connection is null in {}\", thing.getUID());\n+            return;\n+        }\n+\n+        try {\n+            if (command instanceof RefreshType) {\n+                accountHandler.forceDelayedSmartHomeStateUpdate(findId());\n+                return;\n+            }\n+            SmartHomeBaseDevice smartHomeBaseDevice = this.smartHomeBaseDevice;\n+            if (smartHomeBaseDevice == null) {\n+                logger.debug(\"smarthomeBaseDevice is null in {}\", thing.getUID());\n+                return;\n+            }\n+            Set<SmartHomeDevice> devices = getSupportedSmartHomeDevices(smartHomeBaseDevice,\n+                    accountHandler.getLastKnownSmartHomeDevice());\n+            String channelId = channelUID.getId();\n+\n+            for (String interfaceName : handlers.keySet()) {\n+                HandlerBase handlerBase = handlers.get(interfaceName);\n+                if (handlerBase == null || !handlerBase.hasChannel(channelId)) {\n+                    continue;\n+                }\n+                for (SmartHomeDevice shd : devices) {\n+                    String entityId = shd.entityId;\n+                    if (entityId == null) {\n+                        continue;\n+                    }\n+                    SmartHomeCapability[] capabilities = shd.capabilities;\n+                    if (capabilities == null) {\n+                        logger.debug(\"capabilities is null in {}\", thing.getUID());\n+                        return;\n+                    }\n+                    accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // block updates\n+                    if (handlerBase.handleCommand(connection, shd, entityId, capabilities, channelUID.getId(),\n+                            command)) {\n+                        accountHandler.forceDelayedSmartHomeStateUpdate(findId()); // force update again to restart\n+                        // update timer\n+                        logger.debug(\"Command {} sent to {}\", command, shd.findId());\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Handle command failed\", e);\n+        }\n+    }\n+\n+    private static void getCapabilities(Map<String, List<SmartHomeCapability>> result, AccountHandler accountHandler,\n+            SmartHomeBaseDevice device) {\n+        if (device instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) device;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return;\n+            }\n+            for (SmartHomeCapability capability : capabilities) {\n+                String interfaceName = capability.interfaceName;\n+                if (interfaceName != null) {\n+                    result.computeIfAbsent(interfaceName, name -> new ArrayList<>()).add(capability);\n+                }\n+            }\n+        }\n+        if (device instanceof SmartHomeGroup) {\n+            for (SmartHomeDevice shd : getSupportedSmartHomeDevices(device,\n+                    accountHandler.getLastKnownSmartHomeDevice())) {\n+                getCapabilities(result, accountHandler, shd);\n+            }\n+        }\n+    }\n+\n+    public static Set<SmartHomeDevice> getSupportedSmartHomeDevices(@Nullable SmartHomeBaseDevice baseDevice,\n+            List<SmartHomeBaseDevice> allDevices) {\n+        Set<SmartHomeDevice> result = new HashSet<>();\n+        if (baseDevice == null) {\n+            return Collections.emptySet();\n+        }\n+        if (baseDevice instanceof SmartHomeDevice) {\n+            SmartHomeDevice shd = (SmartHomeDevice) baseDevice;\n+            SmartHomeCapability[] capabilities = shd.capabilities;\n+            if (capabilities == null) {\n+                return Collections.emptySet();\n+            }\n+            if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                    .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                result.add(shd);\n+            }\n+        } else {\n+            SmartHomeGroup shg = (SmartHomeGroup) baseDevice;\n+            for (SmartHomeBaseDevice device : allDevices) {\n+                if (device instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) device;\n+                    if (shd.tags != null && shd.tags.tagNameToValueSetMap != null\n+                            && shd.tags.tagNameToValueSetMap.groupIdentity != null\n+                            && shg.applianceGroupIdentifier != null && shg.applianceGroupIdentifier.value != null\n+                            && Arrays.asList(shd.tags.tagNameToValueSetMap.groupIdentity)\n+                                    .contains(shg.applianceGroupIdentifier.value)) {\n+                        SmartHomeCapability[] capabilities = shd.capabilities;\n+                        if (capabilities == null) {\n+                            return Collections.emptySet();\n+                        }\n+                        if (Arrays.stream(capabilities).map(capability -> capability.interfaceName)\n+                                .anyMatch(SUPPORTED_INTERFACES::contains)) {\n+                            result.add(shd);\n+                            continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 373}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzU1Njk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1MzoyOVrOGog2jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1MzoyOVrOGog2jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNDQ3OA==", "bodyText": "You can remove all the synchronization used around this field if you just make it thread-safe to begin with.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new HashSet<>();\n          \n          \n            \n                private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new CopyOnWriteArraySet<>();", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445134478", "createdAt": "2020-06-24T19:53:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -83,24 +91,32 @@\n  */\n @NonNullByDefault\n public class AccountHandler extends BaseBridgeHandler implements IWebSocketCommandHandler, IAmazonThingHandler {\n-\n     private final Logger logger = LoggerFactory.getLogger(AccountHandler.class);\n     private Storage<String> stateStorage;\n     private @Nullable Connection connection;\n     private @Nullable WebSocketConnection webSocketConnection;\n+\n     private final Set<EchoHandler> echoHandlers = new HashSet<>();\n+    private final Set<SmartHomeDeviceHandler> smartHomeDeviceHandlers = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzU2MTI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1NDo1MFrOGog5QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1NDo1MFrOGog5QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNTE2OA==", "bodyText": "Either change the name of this method or make it return a boolean instead.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445135168", "createdAt": "2020-06-24T19:54:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzU2ODk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1NzowOVrOGog-Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTo1NzowOVrOGog-Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEzNjQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"updateSmartHomeState fails with unexpected error\", e);\n          \n          \n            \n                        logger.warn(\"updateSmartHomeState fails with unexpected error\", e);", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445136414", "createdAt": "2020-06-24T19:57:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n+        }\n+        // update handlers\n+        synchronized (smartHomeDeviceHandlers) {\n+            smartHomeDeviceHandlers\n+                    .forEach(child -> child.setDeviceAndUpdateThingState(this, findSmartDeviceHomeJson(child)));\n+        }\n+\n+        if (smartHomeDevices != null) {\n+            Map<String, SmartHomeDevice> newJsonSerialDeviceMapping = new HashMap<>();\n+            for (Object smartDevice : smartHomeDevices) {\n+                if (smartDevice instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) smartDevice;\n+                    String entityId = shd.entityId;\n+                    if (entityId != null) {\n+                        newJsonSerialDeviceMapping.put(entityId, shd);\n+                    }\n+                }\n+            }\n+        }\n+        if (smartHomeDevices != null) {\n+            return smartHomeDevices;\n+        }\n+\n+        return Collections.emptyList();\n+    }\n+\n+    public void forceDelayedSmartHomeStateUpdate(@Nullable String deviceId) {\n+        if (deviceId == null) {\n+            return;\n+        }\n+        synchronized (synchronizeSmartHomeJobScheduler) {\n+            requestedDeviceUpdates.add(deviceId);\n+            ScheduledFuture<?> refreshSmartHomeAfterCommandJob = this.refreshSmartHomeAfterCommandJob;\n+            if (refreshSmartHomeAfterCommandJob != null) {\n+                refreshSmartHomeAfterCommandJob.cancel(false);\n+            }\n+            this.refreshSmartHomeAfterCommandJob = scheduler.schedule(this::updateSmartHomeStateJob, 500,\n+                    TimeUnit.MILLISECONDS);\n+        }\n+    }\n+\n+    private void updateSmartHomeStateJob() {\n+        Set<String> deviceUpdates = new HashSet<>();\n+\n+        synchronized (synchronizeSmartHomeJobScheduler) {\n+            Connection connection = this.connection;\n+            if (connection == null || !connection.getIsLoggedIn()) {\n+                this.refreshSmartHomeAfterCommandJob = scheduler.schedule(this::updateSmartHomeStateJob, 1000,\n+                        TimeUnit.MILLISECONDS);\n+                return;\n+            }\n+            requestedDeviceUpdates.drainTo(deviceUpdates);\n+            this.refreshSmartHomeAfterCommandJob = null;\n+        }\n+\n+        deviceUpdates.forEach(this::updateSmartHomeState);\n+    }\n+\n+    private synchronized void updateSmartHomeState(@Nullable String deviceFilterId) {\n+        try {\n+            logger.debug(\"updateSmartHomeState started\");\n+            Connection connection = this.connection;\n+            if (connection == null || !connection.getIsLoggedIn()) {\n+                return;\n+            }\n+            List<SmartHomeBaseDevice> allDevices = this.getLastKnownSmartHomeDevice();\n+            Set<String> applianceIds = new HashSet<>();\n+            if (deviceFilterId != null) {\n+                applianceIds.add(deviceFilterId);\n+            } else {\n+                SmartHomeDeviceStateGroupUpdateCalculator smartHomeDeviceStateGroupUpdateCalculator = this.smartHomeDeviceStateGroupUpdateCalculator;\n+                if (smartHomeDeviceStateGroupUpdateCalculator == null) {\n+                    return;\n+                }\n+                synchronized (this.smartHomeDeviceHandlers) {\n+                    if (this.smartHomeDeviceHandlers.size() == 0) {\n+                        return;\n+                    }\n+                    List<SmartHomeDevice> devicesToUpdate = new ArrayList<>();\n+                    for (SmartHomeDeviceHandler device : smartHomeDeviceHandlers) {\n+                        String id = device.findId();\n+                        SmartHomeBaseDevice baseDevice = jsonIdSmartHomeDeviceMapping.get(id);\n+                        SmartHomeDeviceHandler.getSupportedSmartHomeDevices(baseDevice, allDevices)\n+                                .forEach(devicesToUpdate::add);\n+                    }\n+                    smartHomeDeviceStateGroupUpdateCalculator.removeDevicesWithNoUpdate(devicesToUpdate);\n+                    for (SmartHomeDevice shd : devicesToUpdate) {\n+                        String applianceId = shd.applianceId;\n+                        if (applianceId != null) {\n+                            applianceIds.add(applianceId);\n+                        }\n+                    }\n+                    if (applianceIds.size() == 0) {\n+                        return;\n+                    }\n+                }\n+            }\n+            Map<String, JsonArray> applianceIdToCapabilityStates = connection\n+                    .getSmartHomeDeviceStatesJson(applianceIds);\n+\n+            synchronized (this.smartHomeDeviceHandlers) {\n+                for (SmartHomeDeviceHandler smartHomeDeviceHandler : smartHomeDeviceHandlers) {\n+                    String id = smartHomeDeviceHandler.findId();\n+                    if (requestedDeviceUpdates.contains(id)) {\n+                        logger.debug(\"Device update {} suspended\", id);\n+                        continue;\n+                    }\n+                    if (deviceFilterId == null || deviceFilterId.equals(id)) {\n+                        smartHomeDeviceHandler.updateChannelStates(allDevices, applianceIdToCapabilityStates);\n+                    }\n+                }\n+            }\n+            logger.debug(\"updateSmartHomeState finished\");\n+        } catch (HttpException | JsonSyntaxException | ConnectionException e) {\n+            logger.debug(\"updateSmartHomeState fails\", e);\n+        } catch (Exception e) { // this handler can be removed later, if we know that nothing else can fail.\n+            logger.error(\"updateSmartHomeState fails with unexpected error\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 496}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzYwMjIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDowNzoyMFrOGohTBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjoxMzoyMVrOGok6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MTc2Ng==", "bodyText": "Since this class isn't an osgi service I don't know if adding @Activate serves any purpose here.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445141766", "createdAt": "2020-06-24T20:07:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.discovery;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_SMART_HOME_THING_TYPES_UIDS;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE_GROUP;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryServiceCallback;\n+import org.eclipse.smarthome.config.discovery.ExtendedDiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.handler.AccountHandler;\n+import org.openhab.binding.amazonechocontrol.internal.handler.SmartHomeDeviceHandler;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.DriverIdentity;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDevicesDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {\n+\n+    private AccountHandler accountHandler;\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDevicesDiscovery.class);\n+\n+    private @Nullable ScheduledFuture<?> startScanStateJob;\n+    private @Nullable Long activateTimeStamp;\n+\n+    private @Nullable DiscoveryServiceCallback discoveryServiceCallback;\n+\n+    @Override\n+    public void setDiscoveryServiceCallback(DiscoveryServiceCallback discoveryServiceCallback) {\n+        this.discoveryServiceCallback = discoveryServiceCallback;\n+    }\n+\n+    public SmartHomeDevicesDiscovery(AccountHandler accountHandler) {\n+        super(SUPPORTED_SMART_HOME_THING_TYPES_UIDS, 10);\n+        this.accountHandler = accountHandler;\n+    }\n+\n+    public void activate() {\n+        activate(new Hashtable<String, @Nullable Object>());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        stopScanJob();\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp != null) {\n+            removeOlderResults(activateTimeStamp);\n+        }\n+        setSmartHomeDevices(accountHandler.updateSmartHomeDeviceList(false));\n+    }\n+\n+    protected void startAutomaticScan() {\n+        if (!this.accountHandler.getThing().getThings().isEmpty()) {\n+            stopScanJob();\n+            return;\n+        }\n+        Connection connection = this.accountHandler.findConnection();\n+        if (connection == null) {\n+            return;\n+        }\n+        Date verifyTime = connection.tryGetVerifyTime();\n+        if (verifyTime == null) {\n+            return;\n+        }\n+        if (new Date().getTime() - verifyTime.getTime() < 10000) {\n+            return;\n+        }\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        stopScanJob();\n+        startScanStateJob = scheduler.scheduleWithFixedDelay(this::startAutomaticScan, 3000, 1000,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        stopScanJob();\n+    }\n+\n+    void stopScanJob() {\n+        ScheduledFuture<?> currentStartScanStateJob = startScanStateJob;\n+        if (currentStartScanStateJob != null) {\n+            currentStartScanStateJob.cancel(false);\n+            startScanStateJob = null;\n+        }\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    @Activate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwMDk2Mg==", "bodyText": "Not sure either. It's the same in the \"old\" AmazonEchoDiscovery. Since it does no harm, I would suggest to leave  it here (since the discovery needs to be rewritten anyway).", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445200962", "createdAt": "2020-06-24T22:13:21Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.discovery;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_SMART_HOME_THING_TYPES_UIDS;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE_GROUP;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryServiceCallback;\n+import org.eclipse.smarthome.config.discovery.ExtendedDiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.handler.AccountHandler;\n+import org.openhab.binding.amazonechocontrol.internal.handler.SmartHomeDeviceHandler;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.DriverIdentity;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDevicesDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {\n+\n+    private AccountHandler accountHandler;\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDevicesDiscovery.class);\n+\n+    private @Nullable ScheduledFuture<?> startScanStateJob;\n+    private @Nullable Long activateTimeStamp;\n+\n+    private @Nullable DiscoveryServiceCallback discoveryServiceCallback;\n+\n+    @Override\n+    public void setDiscoveryServiceCallback(DiscoveryServiceCallback discoveryServiceCallback) {\n+        this.discoveryServiceCallback = discoveryServiceCallback;\n+    }\n+\n+    public SmartHomeDevicesDiscovery(AccountHandler accountHandler) {\n+        super(SUPPORTED_SMART_HOME_THING_TYPES_UIDS, 10);\n+        this.accountHandler = accountHandler;\n+    }\n+\n+    public void activate() {\n+        activate(new Hashtable<String, @Nullable Object>());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        stopScanJob();\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp != null) {\n+            removeOlderResults(activateTimeStamp);\n+        }\n+        setSmartHomeDevices(accountHandler.updateSmartHomeDeviceList(false));\n+    }\n+\n+    protected void startAutomaticScan() {\n+        if (!this.accountHandler.getThing().getThings().isEmpty()) {\n+            stopScanJob();\n+            return;\n+        }\n+        Connection connection = this.accountHandler.findConnection();\n+        if (connection == null) {\n+            return;\n+        }\n+        Date verifyTime = connection.tryGetVerifyTime();\n+        if (verifyTime == null) {\n+            return;\n+        }\n+        if (new Date().getTime() - verifyTime.getTime() < 10000) {\n+            return;\n+        }\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        stopScanJob();\n+        startScanStateJob = scheduler.scheduleWithFixedDelay(this::startAutomaticScan, 3000, 1000,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        stopScanJob();\n+    }\n+\n+    void stopScanJob() {\n+        ScheduledFuture<?> currentStartScanStateJob = startScanStateJob;\n+        if (currentStartScanStateJob != null) {\n+            currentStartScanStateJob.cancel(false);\n+            startScanStateJob = null;\n+        }\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    @Activate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MTc2Ng=="}, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzYxMjc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxMDo1NVrOGohZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxMDo1NVrOGohZ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0MzUyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean supportedDevice = false;\n          \n          \n            \n                            for (SmartHomeCapability capability : shd.capabilities) {\n          \n          \n            \n                                if (capability != null && Constants.SUPPORTED_INTERFACES.contains(capability.interfaceName)) {\n          \n          \n            \n                                    supportedDevice = true;\n          \n          \n            \n                                    break;\n          \n          \n            \n                                }\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!supportedDevice) {\n          \n          \n            \n                            if (Stream.of(shd.capabilities).noneMatch(capability -> capability != null && Constants.SUPPORTED_INTERFACES.contains(capability.interfaceName))) {", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445143524", "createdAt": "2020-06-24T20:10:55Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/discovery/SmartHomeDevicesDiscovery.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.discovery;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.DEVICE_PROPERTY_ID;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.SUPPORTED_SMART_HOME_THING_TYPES_UIDS;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE;\n+import static org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants.THING_TYPE_SMART_HOME_DEVICE_GROUP;\n+\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryServiceCallback;\n+import org.eclipse.smarthome.config.discovery.ExtendedDiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.handler.AccountHandler;\n+import org.openhab.binding.amazonechocontrol.internal.handler.SmartHomeDeviceHandler;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.DriverIdentity;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeGroups.SmartHomeGroup;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.SmartHomeBaseDevice;\n+import org.openhab.binding.amazonechocontrol.internal.smarthome.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author Lukas Knoeller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SmartHomeDevicesDiscovery extends AbstractDiscoveryService implements ExtendedDiscoveryService {\n+\n+    private AccountHandler accountHandler;\n+    private final Logger logger = LoggerFactory.getLogger(SmartHomeDevicesDiscovery.class);\n+\n+    private @Nullable ScheduledFuture<?> startScanStateJob;\n+    private @Nullable Long activateTimeStamp;\n+\n+    private @Nullable DiscoveryServiceCallback discoveryServiceCallback;\n+\n+    @Override\n+    public void setDiscoveryServiceCallback(DiscoveryServiceCallback discoveryServiceCallback) {\n+        this.discoveryServiceCallback = discoveryServiceCallback;\n+    }\n+\n+    public SmartHomeDevicesDiscovery(AccountHandler accountHandler) {\n+        super(SUPPORTED_SMART_HOME_THING_TYPES_UIDS, 10);\n+        this.accountHandler = accountHandler;\n+    }\n+\n+    public void activate() {\n+        activate(new Hashtable<String, @Nullable Object>());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        stopScanJob();\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp != null) {\n+            removeOlderResults(activateTimeStamp);\n+        }\n+        setSmartHomeDevices(accountHandler.updateSmartHomeDeviceList(false));\n+    }\n+\n+    protected void startAutomaticScan() {\n+        if (!this.accountHandler.getThing().getThings().isEmpty()) {\n+            stopScanJob();\n+            return;\n+        }\n+        Connection connection = this.accountHandler.findConnection();\n+        if (connection == null) {\n+            return;\n+        }\n+        Date verifyTime = connection.tryGetVerifyTime();\n+        if (verifyTime == null) {\n+            return;\n+        }\n+        if (new Date().getTime() - verifyTime.getTime() < 10000) {\n+            return;\n+        }\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        stopScanJob();\n+        startScanStateJob = scheduler.scheduleWithFixedDelay(this::startAutomaticScan, 3000, 1000,\n+                TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        stopScanJob();\n+    }\n+\n+    void stopScanJob() {\n+        ScheduledFuture<?> currentStartScanStateJob = startScanStateJob;\n+        if (currentStartScanStateJob != null) {\n+            currentStartScanStateJob.cancel(false);\n+            startScanStateJob = null;\n+        }\n+        super.stopScan();\n+    }\n+\n+    @Override\n+    @Activate\n+    public void activate(@Nullable Map<String, @Nullable Object> config) {\n+        super.activate(config);\n+        if (config != null) {\n+            modified(config);\n+        }\n+        Long activateTimeStamp = this.activateTimeStamp;\n+        if (activateTimeStamp == null) {\n+            this.activateTimeStamp = new Date().getTime();\n+        }\n+    };\n+\n+    synchronized void setSmartHomeDevices(List<SmartHomeBaseDevice> deviceList) {\n+        DiscoveryServiceCallback discoveryServiceCallback = this.discoveryServiceCallback;\n+\n+        if (discoveryServiceCallback == null) {\n+            return;\n+        }\n+        int shouldDiscoverSmartHomeDevice = accountHandler.shouldDiscoverSmartHomeDevices();\n+        if (shouldDiscoverSmartHomeDevice == 0) {\n+            return;\n+        }\n+        boolean shouldDiscoverOpenHabDevices = accountHandler.shouldDiscoverOpenHABSmartHomeDevices();\n+\n+        for (Object smartHomeDevice : deviceList) {\n+            ThingUID bridgeThingUID = this.accountHandler.getThing().getUID();\n+            ThingUID thingUID = null;\n+            String deviceName = null;\n+            Map<String, Object> props = new HashMap<>();\n+\n+            if (smartHomeDevice instanceof SmartHomeDevice) {\n+                SmartHomeDevice shd = (SmartHomeDevice) smartHomeDevice;\n+\n+                String entityId = shd.entityId;\n+                if (entityId == null) {\n+                    // No entity id\n+                    continue;\n+                }\n+                String id = shd.findId();\n+                if (id == null) {\n+                    // No id\n+                    continue;\n+                }\n+                boolean isSkillDevice = false;\n+                DriverIdentity driverIdentity = shd.driverIdentity;\n+                isSkillDevice = driverIdentity != null && \"SKILL\".equals(driverIdentity.namespace);\n+\n+                if (shouldDiscoverSmartHomeDevice == 1 && isSkillDevice) {\n+                    // Connected through skill\n+                    continue;\n+                }\n+                if (!shouldDiscoverOpenHabDevices && \"openHAB\".equalsIgnoreCase(shd.manufacturerName)) {\n+                    // OpenHAB device\n+                    continue;\n+                }\n+\n+                boolean supportedDevice = false;\n+                for (SmartHomeCapability capability : shd.capabilities) {\n+                    if (capability != null && Constants.SUPPORTED_INTERFACES.contains(capability.interfaceName)) {\n+                        supportedDevice = true;\n+                        break;\n+                    }\n+                }\n+                if (!supportedDevice) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzYyNTUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxNToxN1rOGohiUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxNToxN1rOGohiUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NTY4Mg==", "bodyText": "Why replace the contents when you can just replace the instance?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        jsonIdSmartHomeDeviceMapping.clear();\n          \n          \n            \n                        jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n          \n          \n            \n                        jsonIdSmartHomeDeviceMapping = newJsonIdSmartHomeDeviceMapping;", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445145682", "createdAt": "2020-06-24T20:15:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 379}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzYyNzc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoxNjowMFrOGohjsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjo0NzozMlrOGolpTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NjAzNQ==", "bodyText": "Is this code incomplete? It doesn't look like it does anything.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445146035", "createdAt": "2020-06-24T20:16:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n+        }\n+        // update handlers\n+        synchronized (smartHomeDeviceHandlers) {\n+            smartHomeDeviceHandlers\n+                    .forEach(child -> child.setDeviceAndUpdateThingState(this, findSmartDeviceHomeJson(child)));\n+        }\n+\n+        if (smartHomeDevices != null) {\n+            Map<String, SmartHomeDevice> newJsonSerialDeviceMapping = new HashMap<>();\n+            for (Object smartDevice : smartHomeDevices) {\n+                if (smartDevice instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) smartDevice;\n+                    String entityId = shd.entityId;\n+                    if (entityId != null) {\n+                        newJsonSerialDeviceMapping.put(entityId, shd);\n+                    }\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 398}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxMzAwNQ==", "bodyText": "Agreed. I'm not sure if this was intended to enable the AccountServlet to provide more information (like it already does for the echo devices). I have added a field, so the mapping is kept and this can be extended later", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445213005", "createdAt": "2020-06-24T22:47:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/handler/AccountHandler.java", "diffHunk": "@@ -800,4 +862,187 @@ private void handlePushActivity(@Nullable String payload) {\n     void refreshAfterCommand() {\n         refreshData();\n     }\n+\n+    private @Nullable SmartHomeBaseDevice findSmartDeviceHomeJson(SmartHomeDeviceHandler handler) {\n+        String id = handler.findId();\n+        if (!id.isEmpty()) {\n+            return jsonIdSmartHomeDeviceMapping.get(id);\n+        }\n+        return null;\n+    }\n+\n+    public int shouldDiscoverSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Object discoverSmartHomeConfig = config.getProperties().get(\"discoverSmartHome\");\n+        int discoverSmartHome = 0;\n+        if (discoverSmartHomeConfig instanceof Boolean) {\n+            discoverSmartHome = ((boolean) discoverSmartHomeConfig) ? 2 : 0;\n+        }\n+        if (discoverSmartHomeConfig instanceof BigDecimal) {\n+            discoverSmartHome = ((BigDecimal) discoverSmartHomeConfig).intValue();\n+        }\n+        return discoverSmartHome;\n+    }\n+\n+    public boolean shouldDiscoverOpenHABSmartHomeDevices() {\n+        Configuration config = getThing().getConfiguration();\n+        Boolean discoverOpenHabSmartHomeDevices = (Boolean) config.getProperties()\n+                .get(\"discoverOpenHabSmartHomeDevices\");\n+        if (discoverOpenHabSmartHomeDevices == null) {\n+            return false;\n+        }\n+        return discoverOpenHabSmartHomeDevices;\n+    }\n+\n+    public List<SmartHomeBaseDevice> updateSmartHomeDeviceList(boolean forceUpdate) {\n+        Connection currentConnection = connection;\n+        if (currentConnection == null) {\n+            return Collections.emptyList();\n+        }\n+\n+        if (!forceUpdate && this.smartHomeDeviceHandlers.isEmpty() && shouldDiscoverSmartHomeDevices() == 0) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<SmartHomeBaseDevice> smartHomeDevices = null;\n+        try {\n+            if (currentConnection.getIsLoggedIn()) {\n+                smartHomeDevices = currentConnection.getSmarthomeDeviceList();\n+            }\n+        } catch (IOException | URISyntaxException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getLocalizedMessage());\n+        }\n+        if (smartHomeDevices != null) {\n+            // create new id map\n+            Map<String, SmartHomeBaseDevice> newJsonIdSmartHomeDeviceMapping = new HashMap<>();\n+            for (Object smartHomeDevice : smartHomeDevices) {\n+                if (smartHomeDevice instanceof SmartHomeBaseDevice) {\n+                    SmartHomeBaseDevice smartHomeBaseDevice = (SmartHomeBaseDevice) smartHomeDevice;\n+                    String id = smartHomeBaseDevice.findId();\n+                    if (id != null) {\n+                        newJsonIdSmartHomeDeviceMapping.put(id, smartHomeBaseDevice);\n+                    }\n+                }\n+            }\n+            jsonIdSmartHomeDeviceMapping.clear();\n+            jsonIdSmartHomeDeviceMapping.putAll(newJsonIdSmartHomeDeviceMapping);\n+        }\n+        // update handlers\n+        synchronized (smartHomeDeviceHandlers) {\n+            smartHomeDeviceHandlers\n+                    .forEach(child -> child.setDeviceAndUpdateThingState(this, findSmartDeviceHomeJson(child)));\n+        }\n+\n+        if (smartHomeDevices != null) {\n+            Map<String, SmartHomeDevice> newJsonSerialDeviceMapping = new HashMap<>();\n+            for (Object smartDevice : smartHomeDevices) {\n+                if (smartDevice instanceof SmartHomeDevice) {\n+                    SmartHomeDevice shd = (SmartHomeDevice) smartDevice;\n+                    String entityId = shd.entityId;\n+                    if (entityId != null) {\n+                        newJsonSerialDeviceMapping.put(entityId, shd);\n+                    }\n+                }\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0NjAzNQ=="}, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 398}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzY0MDExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyMDowM1rOGohrvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjo1MTozMlrOGoluFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0ODA5NQ==", "bodyText": "Perhaps you should increase/decrease by more than just a single percent. A change of a single percent is probably unnoticeable to the user so I think 10% is probably a better value.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445148095", "createdAt": "2020-06-24T20:20:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.ITEM_TYPE_DIMMER;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * The {@link HandlerPercentageController} is responsible for the Alexa.PowerControllerInterface\n+ *\n+ * @author Lukas Knoeller - Initial contribution\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HandlerPercentageController extends HandlerBase {\n+    // Interface\n+    public static final String INTERFACE = \"Alexa.PercentageController\";\n+\n+    // Channel types\n+    private static final ChannelTypeUID CHANNEL_TYPE_PERCENTAGE = new ChannelTypeUID(\n+            AmazonEchoControlBindingConstants.BINDING_ID, \"percentage\");\n+\n+    // Channel definitions\n+    private static final ChannelInfo PERCENTAGE = new ChannelInfo(\"percentage\" /* propertyName */ ,\n+            \"percentage\" /* ChannelId */, CHANNEL_TYPE_PERCENTAGE /* Channel Type */ ,\n+            ITEM_TYPE_DIMMER /* Item Type */);\n+\n+    private @Nullable Integer lastPercentage;\n+\n+    @Override\n+    public String[] getSupportedInterface() {\n+        return new String[] { INTERFACE };\n+    }\n+\n+    @Override\n+    protected ChannelInfo @Nullable [] findChannelInfos(SmartHomeCapability capability, String property) {\n+        if (PERCENTAGE.propertyName.equals(property)) {\n+            return new ChannelInfo[] { PERCENTAGE };\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void updateChannels(String interfaceName, List<JsonObject> stateList, UpdateChannelResult result) {\n+        Integer percentageValue = null;\n+        for (JsonObject state : stateList) {\n+            if (PERCENTAGE.propertyName.equals(state.get(\"name\").getAsString())) {\n+                int value = state.get(\"value\").getAsInt();\n+                // For groups take the maximum\n+                if (percentageValue == null) {\n+                    percentageValue = value;\n+                } else if (value > percentageValue) {\n+                    percentageValue = value;\n+                }\n+            }\n+        }\n+        if (percentageValue != null) {\n+            lastPercentage = percentageValue;\n+        }\n+        updateState(PERCENTAGE.channelId, percentageValue == null ? UnDefType.UNDEF : new PercentType(percentageValue));\n+    }\n+\n+    @Override\n+    public boolean handleCommand(Connection connection, SmartHomeDevice shd, String entityId,\n+            SmartHomeCapability[] capabilties, String channelId, Command command) throws IOException {\n+        if (channelId.equals(PERCENTAGE.channelId)) {\n+            if (containsCapabilityProperty(capabilties, PERCENTAGE.propertyName)) {\n+                if (command.equals(IncreaseDecreaseType.INCREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage++;\n+                        if (newValue > 100) {\n+                            newValue = 100;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(IncreaseDecreaseType.DECREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage--;\n+                        if (newValue < 0) {\n+                            newValue = 0;\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxNDIzMA==", "bodyText": "Since according to the forum thread quite a bunch of users already use this enhancements (since month), I wouldprefer to keep it like this.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445214230", "createdAt": "2020-06-24T22:51:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.ITEM_TYPE_DIMMER;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * The {@link HandlerPercentageController} is responsible for the Alexa.PowerControllerInterface\n+ *\n+ * @author Lukas Knoeller - Initial contribution\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HandlerPercentageController extends HandlerBase {\n+    // Interface\n+    public static final String INTERFACE = \"Alexa.PercentageController\";\n+\n+    // Channel types\n+    private static final ChannelTypeUID CHANNEL_TYPE_PERCENTAGE = new ChannelTypeUID(\n+            AmazonEchoControlBindingConstants.BINDING_ID, \"percentage\");\n+\n+    // Channel definitions\n+    private static final ChannelInfo PERCENTAGE = new ChannelInfo(\"percentage\" /* propertyName */ ,\n+            \"percentage\" /* ChannelId */, CHANNEL_TYPE_PERCENTAGE /* Channel Type */ ,\n+            ITEM_TYPE_DIMMER /* Item Type */);\n+\n+    private @Nullable Integer lastPercentage;\n+\n+    @Override\n+    public String[] getSupportedInterface() {\n+        return new String[] { INTERFACE };\n+    }\n+\n+    @Override\n+    protected ChannelInfo @Nullable [] findChannelInfos(SmartHomeCapability capability, String property) {\n+        if (PERCENTAGE.propertyName.equals(property)) {\n+            return new ChannelInfo[] { PERCENTAGE };\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void updateChannels(String interfaceName, List<JsonObject> stateList, UpdateChannelResult result) {\n+        Integer percentageValue = null;\n+        for (JsonObject state : stateList) {\n+            if (PERCENTAGE.propertyName.equals(state.get(\"name\").getAsString())) {\n+                int value = state.get(\"value\").getAsInt();\n+                // For groups take the maximum\n+                if (percentageValue == null) {\n+                    percentageValue = value;\n+                } else if (value > percentageValue) {\n+                    percentageValue = value;\n+                }\n+            }\n+        }\n+        if (percentageValue != null) {\n+            lastPercentage = percentageValue;\n+        }\n+        updateState(PERCENTAGE.channelId, percentageValue == null ? UnDefType.UNDEF : new PercentType(percentageValue));\n+    }\n+\n+    @Override\n+    public boolean handleCommand(Connection connection, SmartHomeDevice shd, String entityId,\n+            SmartHomeCapability[] capabilties, String channelId, Command command) throws IOException {\n+        if (channelId.equals(PERCENTAGE.channelId)) {\n+            if (containsCapabilityProperty(capabilties, PERCENTAGE.propertyName)) {\n+                if (command.equals(IncreaseDecreaseType.INCREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage++;\n+                        if (newValue > 100) {\n+                            newValue = 100;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(IncreaseDecreaseType.DECREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage--;\n+                        if (newValue < 0) {\n+                            newValue = 0;\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0ODA5NQ=="}, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzY0ODcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMDoyMjozNFrOGohw8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjo1MDoxM1rOGolsig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0OTQyNQ==", "bodyText": "All of other methods suggest that setPercentage is supposed to range from 0-100, not 0-1. Is it supposed to be this instead?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n          \n          \n            \n                                        ((PercentType) command).floatValue() / 100);\n          \n          \n            \n                                connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n          \n          \n            \n                                        lastPercentage);", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445149425", "createdAt": "2020-06-24T20:22:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.ITEM_TYPE_DIMMER;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * The {@link HandlerPercentageController} is responsible for the Alexa.PowerControllerInterface\n+ *\n+ * @author Lukas Knoeller - Initial contribution\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HandlerPercentageController extends HandlerBase {\n+    // Interface\n+    public static final String INTERFACE = \"Alexa.PercentageController\";\n+\n+    // Channel types\n+    private static final ChannelTypeUID CHANNEL_TYPE_PERCENTAGE = new ChannelTypeUID(\n+            AmazonEchoControlBindingConstants.BINDING_ID, \"percentage\");\n+\n+    // Channel definitions\n+    private static final ChannelInfo PERCENTAGE = new ChannelInfo(\"percentage\" /* propertyName */ ,\n+            \"percentage\" /* ChannelId */, CHANNEL_TYPE_PERCENTAGE /* Channel Type */ ,\n+            ITEM_TYPE_DIMMER /* Item Type */);\n+\n+    private @Nullable Integer lastPercentage;\n+\n+    @Override\n+    public String[] getSupportedInterface() {\n+        return new String[] { INTERFACE };\n+    }\n+\n+    @Override\n+    protected ChannelInfo @Nullable [] findChannelInfos(SmartHomeCapability capability, String property) {\n+        if (PERCENTAGE.propertyName.equals(property)) {\n+            return new ChannelInfo[] { PERCENTAGE };\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void updateChannels(String interfaceName, List<JsonObject> stateList, UpdateChannelResult result) {\n+        Integer percentageValue = null;\n+        for (JsonObject state : stateList) {\n+            if (PERCENTAGE.propertyName.equals(state.get(\"name\").getAsString())) {\n+                int value = state.get(\"value\").getAsInt();\n+                // For groups take the maximum\n+                if (percentageValue == null) {\n+                    percentageValue = value;\n+                } else if (value > percentageValue) {\n+                    percentageValue = value;\n+                }\n+            }\n+        }\n+        if (percentageValue != null) {\n+            lastPercentage = percentageValue;\n+        }\n+        updateState(PERCENTAGE.channelId, percentageValue == null ? UnDefType.UNDEF : new PercentType(percentageValue));\n+    }\n+\n+    @Override\n+    public boolean handleCommand(Connection connection, SmartHomeDevice shd, String entityId,\n+            SmartHomeCapability[] capabilties, String channelId, Command command) throws IOException {\n+        if (channelId.equals(PERCENTAGE.channelId)) {\n+            if (containsCapabilityProperty(capabilties, PERCENTAGE.propertyName)) {\n+                if (command.equals(IncreaseDecreaseType.INCREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage++;\n+                        if (newValue > 100) {\n+                            newValue = 100;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(IncreaseDecreaseType.DECREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage--;\n+                        if (newValue < 0) {\n+                            newValue = 0;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(OnOffType.OFF)) {\n+                    lastPercentage = 0;\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, 0);\n+                    return true;\n+                } else if (command.equals(OnOffType.ON)) {\n+                    lastPercentage = 100;\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, 100);\n+                    return true;\n+                } else if (command instanceof PercentType) {\n+                    lastPercentage = ((PercentType) command).intValue();\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n+                            ((PercentType) command).floatValue() / 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIxMzgzNA==", "bodyText": "Also changed to int, as states are stored with int.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445213834", "createdAt": "2020-06-24T22:50:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/java/org/openhab/binding/amazonechocontrol/internal/smarthome/HandlerPercentageController.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.amazonechocontrol.internal.smarthome;\n+\n+import static org.openhab.binding.amazonechocontrol.internal.smarthome.Constants.ITEM_TYPE_DIMMER;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.IncreaseDecreaseType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.thing.type.ChannelTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.StateDescription;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.amazonechocontrol.internal.AmazonEchoControlBindingConstants;\n+import org.openhab.binding.amazonechocontrol.internal.Connection;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeCapabilities.SmartHomeCapability;\n+import org.openhab.binding.amazonechocontrol.internal.jsons.JsonSmartHomeDevices.SmartHomeDevice;\n+\n+import com.google.gson.JsonObject;\n+\n+/**\n+ * The {@link HandlerPercentageController} is responsible for the Alexa.PowerControllerInterface\n+ *\n+ * @author Lukas Knoeller - Initial contribution\n+ * @author Michael Geramb - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HandlerPercentageController extends HandlerBase {\n+    // Interface\n+    public static final String INTERFACE = \"Alexa.PercentageController\";\n+\n+    // Channel types\n+    private static final ChannelTypeUID CHANNEL_TYPE_PERCENTAGE = new ChannelTypeUID(\n+            AmazonEchoControlBindingConstants.BINDING_ID, \"percentage\");\n+\n+    // Channel definitions\n+    private static final ChannelInfo PERCENTAGE = new ChannelInfo(\"percentage\" /* propertyName */ ,\n+            \"percentage\" /* ChannelId */, CHANNEL_TYPE_PERCENTAGE /* Channel Type */ ,\n+            ITEM_TYPE_DIMMER /* Item Type */);\n+\n+    private @Nullable Integer lastPercentage;\n+\n+    @Override\n+    public String[] getSupportedInterface() {\n+        return new String[] { INTERFACE };\n+    }\n+\n+    @Override\n+    protected ChannelInfo @Nullable [] findChannelInfos(SmartHomeCapability capability, String property) {\n+        if (PERCENTAGE.propertyName.equals(property)) {\n+            return new ChannelInfo[] { PERCENTAGE };\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public void updateChannels(String interfaceName, List<JsonObject> stateList, UpdateChannelResult result) {\n+        Integer percentageValue = null;\n+        for (JsonObject state : stateList) {\n+            if (PERCENTAGE.propertyName.equals(state.get(\"name\").getAsString())) {\n+                int value = state.get(\"value\").getAsInt();\n+                // For groups take the maximum\n+                if (percentageValue == null) {\n+                    percentageValue = value;\n+                } else if (value > percentageValue) {\n+                    percentageValue = value;\n+                }\n+            }\n+        }\n+        if (percentageValue != null) {\n+            lastPercentage = percentageValue;\n+        }\n+        updateState(PERCENTAGE.channelId, percentageValue == null ? UnDefType.UNDEF : new PercentType(percentageValue));\n+    }\n+\n+    @Override\n+    public boolean handleCommand(Connection connection, SmartHomeDevice shd, String entityId,\n+            SmartHomeCapability[] capabilties, String channelId, Command command) throws IOException {\n+        if (channelId.equals(PERCENTAGE.channelId)) {\n+            if (containsCapabilityProperty(capabilties, PERCENTAGE.propertyName)) {\n+                if (command.equals(IncreaseDecreaseType.INCREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage++;\n+                        if (newValue > 100) {\n+                            newValue = 100;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(IncreaseDecreaseType.DECREASE)) {\n+                    Integer lastPercentage = this.lastPercentage;\n+                    if (lastPercentage != null) {\n+                        int newValue = lastPercentage--;\n+                        if (newValue < 0) {\n+                            newValue = 0;\n+                        }\n+                        this.lastPercentage = newValue;\n+                        connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, newValue);\n+                        return true;\n+                    }\n+                } else if (command.equals(OnOffType.OFF)) {\n+                    lastPercentage = 0;\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, 0);\n+                    return true;\n+                } else if (command.equals(OnOffType.ON)) {\n+                    lastPercentage = 100;\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName, 100);\n+                    return true;\n+                } else if (command instanceof PercentType) {\n+                    lastPercentage = ((PercentType) command).intValue();\n+                    connection.smartHomeCommand(entityId, \"setPercentage\", PERCENTAGE.propertyName,\n+                            ((PercentType) command).floatValue() / 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE0OTQyNQ=="}, "originalCommit": {"oid": "9596b49de93355da60e75d6284c239b5192e958f"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQ3MTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1MDozNlrOGoppHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1MDozNlrOGoppHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3ODQ5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Unfortunately, the binding can get broken if Amazon change the web site.\n          \n          \n            \n            Unfortunately, this binding can break if Amazon changes the web site.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445278495", "createdAt": "2020-06-25T02:50:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -463,6 +680,23 @@ then\n end\n ```\n \n+## Advanced Feature Technically Experienced Users\n+\n+The url <YOUR_OPENHAB>/amazonechocontrol/<YOUR_ACCOUNT>/PROXY/<API_URL> provides a proxy server with an authenticated connection to the Amazon Alexa server.\n+This can be used to call Alexa API from rules.\n+\n+E.g. to read out the history call from an installation on openhab:8080 with an account named account1:\n+\n+http://openhab:8080/amazonechocontrol/account1/PROXY/api/activities?startTime=&size=50&offset=1\n+\n+## Note\n+\n+This binding uses the same API as the Web-Browser-Based Alexa site (alexa.amazon.de).\n+In other words, it simulates a user which is using the web page.\n+Unfortunately, the binding can get broken if Amazon change the web site.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 438}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQ3NjA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1NDowOFrOGopsUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1NDowOFrOGopsUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3OTMxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Take a look in the channel description above to know, which channels are supported by your thing type.\n          \n          \n            \n            Take a look in the channel description above to know which channels are supported by your thing type.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445279313", "createdAt": "2020-06-25T02:54:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -314,13 +423,119 @@ sitemap amazonechocontrol label=\"Echo Devices\"\n }\n ```\n \n+## Smart Home Devices\n+\n+Note: the cannels of smartHomeDevices and smartHomeDeviceGroup will be created dynamically based on the capabilities reported by the amazon server. This can take a little bit of time. \n+The polling interval configured in the Account Thing to get the state is specified in minutes and has a minimum of 10. This means it takes up to 10 minutes to see the state of a channel. The reason for this low interval is, that the polling causes a big server load for the Smart Home Skills.\n+\n+#### Supported Things\n+\n+| Thing type id        | Name                                  |\n+|----------------------|---------------------------------------|\n+| smartHomeDevice      | Smart Home Device                     |\n+| smartHomeDeviceGroup | Smart Home Device group               |\n+\n+\n+#### Thing configuration of smartHomeDevice, smartHomeDeviceGroup\n+\n+| Configuration name       | Description                                                               |\n+|--------------------------|---------------------------------------------------------------------------|\n+| id                       | The id of the device or device group                                      |\n+\n+The only possibility to find out the id is by using the discover function in the PaperUI. You can use then the id, if you want define the Thing in a file.\n+\n+#### Channels\n+\n+The channels of the smarthome devices will be generated at runtime. Check in the paperUI thing configurations, which channels are created.\n+\n+| Channel Type ID          | Item Type | Access Mode | Thing Type                    | Description                                                                                                                                                                \n+|--------------------------|-----------|-------------|-------------------------------|------------------------------------------------------------------------------------------\n+| powerState               | Switch    | R/W         | smartHomeDevice, smartHomeDeviceGroup | Shows and changes the state (ON/OFF) of your device\n+| brightness               | Dimmer    | R/W         | smartHomeDevice, smartHomeDeviceGroup | Shows and changes the brightness of your lamp\n+| color                    | Color     | R           | smartHomeDevice, smartHomeDeviceGroup | Shows the color of your light\n+| colorName                | String    | R/W         | smartHomeDevice, smartHomeDeviceGroup | Shows and changes the color name of your light (groups are not able to show their color)\n+| colorTemperatureName     | String    | R/W         | smartHomeDevice, smartHomeDeviceGroup | White temperatures name of your lights (groups are not able to show their color)\n+| armState                 | String    | R/W         | smartHomeDevice, smartHomeDeviceGroup | State of your alarm guard. Options: ARMED_AWAY, ARMED_STAY, ARMED_NIGHT, DISARMED (groups are not able to show their state)\n+| burglaryAlarm            | Contact   | R           | smartHomeDevice | Burglary alarm\n+| carbonMonoxideAlarm      | Contact   | R           | smartHomeDevice | Carbon monoxide detection alarm\n+| fireAlarm                | Contact   | R           | smartHomeDevice | Fire alarm\n+| waterAlarm               | Contact   | R           | smartHomeDevice | Water alarm\n+| glassBreakDetectionState | Contact   | R           | smartHomeDevice | Glas break detection alarm\n+| smokeAlarmDetectionState | Contact   | R           | smartHomeDevice | Smoke detection alarm\n+| temperature              | Number    | R           | smartHomeDevice | Temperature\n+\n+### Example\n+\n+#### smarthome.things\n+\n+```\n+Bridge amazonechocontrol:account:account1 \"Amazon Account\" @ \"Accounts\" [discoverSmartHome=2, pollingIntervalSmartHomeAlexa=30, pollingIntervalSmartSkills=120]\n+{\n+    Thing smartHomeDevice      smartHomeDevice1 \"Smart Home Device 1\" @ \"Living Room\" [id=\"ID\"]\n+    Thing smartHomeDevice      smartHomeDevice2 \"Smart Home Device 2\" @ \"Living Room\" [id=\"ID\"]\n+    Thing smartHomeDevice      smartHomeDevice3 \"Smart Home Device 3\" @ \"Living Room\" [id=\"ID\"]\n+    Thing smartHomeDeviceGroup smartHomeDeviceGroup1 \"Living Room Group\" @   \"Living Room\" [id=\"ID\"]\n+}\n+```\n+\n+#### smarthome.items:\n+\n+Sample for the Thing echo1 only. But it will work in the same way for the other things, only replace the thing name in the channel link.\n+Take a look in the channel description above to know, which channels are supported by your thing type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQ3NjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1NDozMFrOGopsnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1NDozMFrOGopsnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3OTM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | glassBreakDetectionState | Contact   | R           | smartHomeDevice | Glas break detection alarm\n          \n          \n            \n            | glassBreakDetectionState | Contact   | R           | smartHomeDevice | Glass break detection alarm", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445279389", "createdAt": "2020-06-25T02:54:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -314,13 +423,119 @@ sitemap amazonechocontrol label=\"Echo Devices\"\n }\n ```\n \n+## Smart Home Devices\n+\n+Note: the cannels of smartHomeDevices and smartHomeDeviceGroup will be created dynamically based on the capabilities reported by the amazon server. This can take a little bit of time. \n+The polling interval configured in the Account Thing to get the state is specified in minutes and has a minimum of 10. This means it takes up to 10 minutes to see the state of a channel. The reason for this low interval is, that the polling causes a big server load for the Smart Home Skills.\n+\n+#### Supported Things\n+\n+| Thing type id        | Name                                  |\n+|----------------------|---------------------------------------|\n+| smartHomeDevice      | Smart Home Device                     |\n+| smartHomeDeviceGroup | Smart Home Device group               |\n+\n+\n+#### Thing configuration of smartHomeDevice, smartHomeDeviceGroup\n+\n+| Configuration name       | Description                                                               |\n+|--------------------------|---------------------------------------------------------------------------|\n+| id                       | The id of the device or device group                                      |\n+\n+The only possibility to find out the id is by using the discover function in the PaperUI. You can use then the id, if you want define the Thing in a file.\n+\n+#### Channels\n+\n+The channels of the smarthome devices will be generated at runtime. Check in the paperUI thing configurations, which channels are created.\n+\n+| Channel Type ID          | Item Type | Access Mode | Thing Type                    | Description                                                                                                                                                                \n+|--------------------------|-----------|-------------|-------------------------------|------------------------------------------------------------------------------------------\n+| powerState               | Switch    | R/W         | smartHomeDevice, smartHomeDeviceGroup | Shows and changes the state (ON/OFF) of your device\n+| brightness               | Dimmer    | R/W         | smartHomeDevice, smartHomeDeviceGroup | Shows and changes the brightness of your lamp\n+| color                    | Color     | R           | smartHomeDevice, smartHomeDeviceGroup | Shows the color of your light\n+| colorName                | String    | R/W         | smartHomeDevice, smartHomeDeviceGroup | Shows and changes the color name of your light (groups are not able to show their color)\n+| colorTemperatureName     | String    | R/W         | smartHomeDevice, smartHomeDeviceGroup | White temperatures name of your lights (groups are not able to show their color)\n+| armState                 | String    | R/W         | smartHomeDevice, smartHomeDeviceGroup | State of your alarm guard. Options: ARMED_AWAY, ARMED_STAY, ARMED_NIGHT, DISARMED (groups are not able to show their state)\n+| burglaryAlarm            | Contact   | R           | smartHomeDevice | Burglary alarm\n+| carbonMonoxideAlarm      | Contact   | R           | smartHomeDevice | Carbon monoxide detection alarm\n+| fireAlarm                | Contact   | R           | smartHomeDevice | Fire alarm\n+| waterAlarm               | Contact   | R           | smartHomeDevice | Water alarm\n+| glassBreakDetectionState | Contact   | R           | smartHomeDevice | Glas break detection alarm", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQ4MDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1Njo0OVrOGopuvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1Njo0OVrOGopuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI3OTkzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"pollingIntervalSmartHomeAlexa\" type=\"decimal\" min=\"10\">\n          \n          \n            \n            \t\t\t<parameter name=\"pollingIntervalSmartHomeAlexa\" type=\"decimal\" min=\"10\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445279932", "createdAt": "2020-06-25T02:56:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -1,471 +1,531 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\n-\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n-\t<bridge-type id=\"account\">\n-\t\t<label>Amazon Account</label>\n-\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\n-\t\t</channels>\n-\t</bridge-type>\n-\t<thing-type id=\"echo\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo</label>\n-\t\t<description>Amazon Echo device (Amazon Echo, Amazon Echo Dot, Amazon Echo Plus...)</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echospot\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Spot</label>\n-\t\t<description>Amazon Echo Spot device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echoshow\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Show</label>\n-\t\t<description>Amazon Echo Show device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"wha\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Whole House Audio Control</label>\n-\t\t<description>Amazon Multiroom Music</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\n-\t<thing-type id=\"flashbriefingprofile\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Flash Briefing Profile</label>\n-\t\t<description>Store and load a flash briefing configuration</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"save\" typeId=\"save\"/>\n-\t\t\t<channel id=\"active\" typeId=\"active\"/>\n-\t\t\t<channel id=\"playOnDevice\" typeId=\"playOnDevice\"/>\n-\t\t</channels>\n-\t</thing-type>\n-\t<channel-type id=\"save\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Save</label>\n-\t\t<description>Save the current flash briefing configuration (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"active\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Active</label>\n-\t\t<description>Activate this flash briefing configuration</description>\n-\t</channel-type>\n-\t<channel-type id=\"playOnDevice\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Play On Device</label>\n-\t\t<description>Plays the briefing on the device (serial number or name, write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothDeviceName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Device</label>\n-\t\t<description>Connected bluetooth device</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radioStationId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>TuneIn Radio Station Id</label>\n-\t\t<description>Id of the radio station</description>\n-\t</channel-type>\n-\t<channel-type id=\"remind\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Remind</label>\n-\t\t<description>Speak the reminder and send a notification to the Alexa app</description>\n-\t</channel-type>\n-\t<channel-type id=\"startRoutine\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start a Routine</label>\n-\t\t<description>The command which must be spoken to active the routing without the preceding \"Alexa,\" (Write Only)\n-\t\t</description>\n-\t</channel-type>\n-\t<channel-type id=\"playAlarmSound\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Alarm Sound</label>\n-\t\t<description>Plays an alarm sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicTrackId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Track Id</label>\n-\t\t<description>Id of the amazon music track</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusic\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Amazon Music</label>\n-\t\t<description>Amazon Music turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Play List Id</label>\n-\t\t<description>Amazon Music play list id (Write only, no current state)</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListIdLastUsed\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Last Selected Playlist Id</label>\n-\t\t<description>Id of the playlist which was started with openHAB</description>\n-\t</channel-type>\n-\t<channel-type id=\"providerDisplayName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Provider Name</label>\n-\t\t<description>Name of music provider</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothMAC\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>MAC-Address of the bluetooth connected device</description>\n-\t</channel-type>\n-\t<channel-type id=\"imageUrl\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Image Url</label>\n-\t\t<description>Url of the album image or radio station logo</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"title\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Title</label>\n-\t\t<description>Title</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle1\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 1</label>\n-\t\t<description>Subtitle 1</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle2\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 2</label>\n-\t\t<description>Subtitle 2</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radio\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>TuneIn Radio</label>\n-\t\t<description>Radio turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetooth\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>Connect to last used device</description>\n-\t</channel-type>\n-\t<channel-type id=\"loop\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Loop</label>\n-\t\t<description>Loop</description>\n-\t</channel-type>\n-\t<channel-type id=\"shuffle\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Shuffle</label>\n-\t\t<description>Shuffle play</description>\n-\t</channel-type>\n-\t<channel-type id=\"player\">\n-\t\t<item-type>Player</item-type>\n-\t\t<label>Player</label>\n-\t\t<description>Music Player</description>\n-\t</channel-type>\n-\t<channel-type id=\"volume\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Volume</label>\n-\t\t<description>Volume of the sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerTreble\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Treble</label>\n-\t\t<description>Equalizer Treble</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerMidrange\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Midrange</label>\n-\t\t<description>Equalizer Midrange</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerBass\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Bass</label>\n-\t\t<description>Equalizer Bass</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"musicProviderId\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Provider</label>\n-\t\t<description>Music provider</description>\n-\t</channel-type>\n-\t<channel-type id=\"playMusicVoiceCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Voice Command</label>\n-\t\t<description>Voice command as text. E.g. 'Yesterday from the Beatles' (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"sendMessage\" advanced=\"false\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Send Message</label>\n-\t\t<description>Sends a message to the Echo devices (Write only).</description>\n-\t</channel-type>\n-\t<channel-type id=\"announcement\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Announcement</label>\n-\t\t<description>Display the announcement message on the display (Write only). See in the tutorial section of the binding\n-\t\t\tdescription to learn how it's possible to set the title and turn off the sound.</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeech\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Speak</label>\n-\t\t<description>Speak the text (Write only). It is possible to use plain text or SSML: &lt;speak&gt;I want to tell you a\n-\t\t\tsecret.&lt;amazon:effect name=&quot;whispered&quot;&gt;I am not a real human.&lt;/amazon:effect&gt;.Can you believe\n-\t\t\tit?&lt;/speak&gt;</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeechVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Speak Volume</label>\n-\t\t<description>Volume of the Speak channel. If 0, the current volume will be used.</description>\n-\t</channel-type>\n-\t<channel-type id=\"lastVoiceCommand\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Last Voice Command</label>\n-\t\t<description>Last voice command spoken to the device. Writing to the channel starts voice output.</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgress\" advanced=\"false\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Media Progress</label>\n-\t\t<description>Media progress in percent</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgressTime\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Play Time</label>\n-\t\t<description>Media play time</description>\n-\t\t<state readOnly=\"false\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaLength\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Length</label>\n-\t\t<description>Media length</description>\n-\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"startCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start</label>\n-\t\t<description>Start information (Write only)</description>\n-\t\t<state pattern=\"String\" readOnly=\"false\">\n-\t\t\t<options>\n-\t\t\t\t<option value=\"Weather\">Weather</option>\n-\t\t\t\t<option value=\"Traffic\">Traffic</option>\n-\t\t\t\t<option value=\"GoodMorning\">Good morning</option>\n-\t\t\t\t<option value=\"SingASong\">Song</option>\n-\t\t\t\t<option value=\"TellStory\">Story</option>\n-\t\t\t\t<option value=\"FlashBriefing\">Flash briefing</option>\n-\t\t\t</options>\n-\t\t</state>\n-\t</channel-type>\n-\t<channel-type id=\"notificationVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Notification Volume</label>\n-\t\t<description>Notification Volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"ascendingAlarm\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Ascending Alarm</label>\n-\t\t<description>Ascending alarm up to the configured volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextReminder\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Reminder</label>\n-\t\t<description>Next Reminder</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Alarm</label>\n-\t\t<description>Next alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextMusicAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Music Alarm</label>\n-\t\t<description>Next music alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextTimer\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Timer</label>\n-\t\t<description>Next timer</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-</thing:thing-descriptions>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\t<bridge-type id=\"account\">\r\n+\t\t<label>Amazon Account</label>\r\n+\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\r\n+\t\t</channels>\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"discoverSmartHome\" type=\"integer\">\r\n+\t\t\t\t<default>0</default>\r\n+\t\t\t\t<description>Defines if openHAB should discover devices connected to the Amazon Echo.</description>\r\n+\t\t\t\t<options>\r\n+\t\t\t\t\t<option value=\"0\">No Discover</option>\r\n+\t\t\t\t\t<option value=\"1\">Direct connected</option>\r\n+\t\t\t\t\t<option value=\"2\">Direct and over Alexa skill</option>\r\n+\t\t\t\t</options>\r\n+\t\t\t</parameter>\r\n+\t\t\t<parameter name=\"pollingIntervalSmartHomeAlexa\" type=\"decimal\" min=\"10\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 492}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQ4MzM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1OTowMFrOGopwpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1OTowMFrOGopwpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4MDQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"pollingIntervalSmartSkills\" type=\"decimal\" min=\"60\">\n          \n          \n            \n            \t\t\t<parameter name=\"pollingIntervalSmartSkills\" type=\"decimal\" min=\"60\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445280420", "createdAt": "2020-06-25T02:59:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -1,471 +1,531 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\n-\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n-\t<bridge-type id=\"account\">\n-\t\t<label>Amazon Account</label>\n-\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\n-\t\t</channels>\n-\t</bridge-type>\n-\t<thing-type id=\"echo\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo</label>\n-\t\t<description>Amazon Echo device (Amazon Echo, Amazon Echo Dot, Amazon Echo Plus...)</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echospot\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Spot</label>\n-\t\t<description>Amazon Echo Spot device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echoshow\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Show</label>\n-\t\t<description>Amazon Echo Show device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"wha\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Whole House Audio Control</label>\n-\t\t<description>Amazon Multiroom Music</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\n-\t<thing-type id=\"flashbriefingprofile\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Flash Briefing Profile</label>\n-\t\t<description>Store and load a flash briefing configuration</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"save\" typeId=\"save\"/>\n-\t\t\t<channel id=\"active\" typeId=\"active\"/>\n-\t\t\t<channel id=\"playOnDevice\" typeId=\"playOnDevice\"/>\n-\t\t</channels>\n-\t</thing-type>\n-\t<channel-type id=\"save\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Save</label>\n-\t\t<description>Save the current flash briefing configuration (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"active\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Active</label>\n-\t\t<description>Activate this flash briefing configuration</description>\n-\t</channel-type>\n-\t<channel-type id=\"playOnDevice\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Play On Device</label>\n-\t\t<description>Plays the briefing on the device (serial number or name, write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothDeviceName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Device</label>\n-\t\t<description>Connected bluetooth device</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radioStationId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>TuneIn Radio Station Id</label>\n-\t\t<description>Id of the radio station</description>\n-\t</channel-type>\n-\t<channel-type id=\"remind\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Remind</label>\n-\t\t<description>Speak the reminder and send a notification to the Alexa app</description>\n-\t</channel-type>\n-\t<channel-type id=\"startRoutine\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start a Routine</label>\n-\t\t<description>The command which must be spoken to active the routing without the preceding \"Alexa,\" (Write Only)\n-\t\t</description>\n-\t</channel-type>\n-\t<channel-type id=\"playAlarmSound\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Alarm Sound</label>\n-\t\t<description>Plays an alarm sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicTrackId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Track Id</label>\n-\t\t<description>Id of the amazon music track</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusic\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Amazon Music</label>\n-\t\t<description>Amazon Music turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Play List Id</label>\n-\t\t<description>Amazon Music play list id (Write only, no current state)</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListIdLastUsed\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Last Selected Playlist Id</label>\n-\t\t<description>Id of the playlist which was started with openHAB</description>\n-\t</channel-type>\n-\t<channel-type id=\"providerDisplayName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Provider Name</label>\n-\t\t<description>Name of music provider</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothMAC\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>MAC-Address of the bluetooth connected device</description>\n-\t</channel-type>\n-\t<channel-type id=\"imageUrl\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Image Url</label>\n-\t\t<description>Url of the album image or radio station logo</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"title\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Title</label>\n-\t\t<description>Title</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle1\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 1</label>\n-\t\t<description>Subtitle 1</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle2\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 2</label>\n-\t\t<description>Subtitle 2</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radio\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>TuneIn Radio</label>\n-\t\t<description>Radio turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetooth\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>Connect to last used device</description>\n-\t</channel-type>\n-\t<channel-type id=\"loop\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Loop</label>\n-\t\t<description>Loop</description>\n-\t</channel-type>\n-\t<channel-type id=\"shuffle\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Shuffle</label>\n-\t\t<description>Shuffle play</description>\n-\t</channel-type>\n-\t<channel-type id=\"player\">\n-\t\t<item-type>Player</item-type>\n-\t\t<label>Player</label>\n-\t\t<description>Music Player</description>\n-\t</channel-type>\n-\t<channel-type id=\"volume\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Volume</label>\n-\t\t<description>Volume of the sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerTreble\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Treble</label>\n-\t\t<description>Equalizer Treble</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerMidrange\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Midrange</label>\n-\t\t<description>Equalizer Midrange</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerBass\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Bass</label>\n-\t\t<description>Equalizer Bass</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"musicProviderId\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Provider</label>\n-\t\t<description>Music provider</description>\n-\t</channel-type>\n-\t<channel-type id=\"playMusicVoiceCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Voice Command</label>\n-\t\t<description>Voice command as text. E.g. 'Yesterday from the Beatles' (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"sendMessage\" advanced=\"false\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Send Message</label>\n-\t\t<description>Sends a message to the Echo devices (Write only).</description>\n-\t</channel-type>\n-\t<channel-type id=\"announcement\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Announcement</label>\n-\t\t<description>Display the announcement message on the display (Write only). See in the tutorial section of the binding\n-\t\t\tdescription to learn how it's possible to set the title and turn off the sound.</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeech\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Speak</label>\n-\t\t<description>Speak the text (Write only). It is possible to use plain text or SSML: &lt;speak&gt;I want to tell you a\n-\t\t\tsecret.&lt;amazon:effect name=&quot;whispered&quot;&gt;I am not a real human.&lt;/amazon:effect&gt;.Can you believe\n-\t\t\tit?&lt;/speak&gt;</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeechVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Speak Volume</label>\n-\t\t<description>Volume of the Speak channel. If 0, the current volume will be used.</description>\n-\t</channel-type>\n-\t<channel-type id=\"lastVoiceCommand\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Last Voice Command</label>\n-\t\t<description>Last voice command spoken to the device. Writing to the channel starts voice output.</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgress\" advanced=\"false\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Media Progress</label>\n-\t\t<description>Media progress in percent</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgressTime\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Play Time</label>\n-\t\t<description>Media play time</description>\n-\t\t<state readOnly=\"false\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaLength\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Length</label>\n-\t\t<description>Media length</description>\n-\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"startCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start</label>\n-\t\t<description>Start information (Write only)</description>\n-\t\t<state pattern=\"String\" readOnly=\"false\">\n-\t\t\t<options>\n-\t\t\t\t<option value=\"Weather\">Weather</option>\n-\t\t\t\t<option value=\"Traffic\">Traffic</option>\n-\t\t\t\t<option value=\"GoodMorning\">Good morning</option>\n-\t\t\t\t<option value=\"SingASong\">Song</option>\n-\t\t\t\t<option value=\"TellStory\">Story</option>\n-\t\t\t\t<option value=\"FlashBriefing\">Flash briefing</option>\n-\t\t\t</options>\n-\t\t</state>\n-\t</channel-type>\n-\t<channel-type id=\"notificationVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Notification Volume</label>\n-\t\t<description>Notification Volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"ascendingAlarm\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Ascending Alarm</label>\n-\t\t<description>Ascending alarm up to the configured volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextReminder\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Reminder</label>\n-\t\t<description>Next Reminder</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Alarm</label>\n-\t\t<description>Next alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextMusicAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Music Alarm</label>\n-\t\t<description>Next music alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextTimer\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Timer</label>\n-\t\t<description>Next timer</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-</thing:thing-descriptions>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\t<bridge-type id=\"account\">\r\n+\t\t<label>Amazon Account</label>\r\n+\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\r\n+\t\t</channels>\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"discoverSmartHome\" type=\"integer\">\r\n+\t\t\t\t<default>0</default>\r\n+\t\t\t\t<description>Defines if openHAB should discover devices connected to the Amazon Echo.</description>\r\n+\t\t\t\t<options>\r\n+\t\t\t\t\t<option value=\"0\">No Discover</option>\r\n+\t\t\t\t\t<option value=\"1\">Direct connected</option>\r\n+\t\t\t\t\t<option value=\"2\">Direct and over Alexa skill</option>\r\n+\t\t\t\t</options>\r\n+\t\t\t</parameter>\r\n+\t\t\t<parameter name=\"pollingIntervalSmartHomeAlexa\" type=\"decimal\" min=\"10\">\r\n+\t\t\t\t<default>30</default>\r\n+\t\t\t\t<description>\r\n+\t\t\t\t\tDefines the time in seconds for openHAB to pull the\r\n+\t\t\t\t\tstate of the Alexa connected devices. The minimum is\r\n+\t\t\t\t\t10 seconds.\r\n+\t\t\t\t</description>\r\n+\t\t\t</parameter>\r\n+\t\t\t<parameter name=\"pollingIntervalSmartSkills\" type=\"decimal\" min=\"60\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 500}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDQ4NDA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMjo1OTozMFrOGopxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjo1MjoyMFrOGotlMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4MDUzNA==", "bodyText": "shouldn't these parameters have labels?", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445280534", "createdAt": "2020-06-25T02:59:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -1,471 +1,531 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\n-\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n-\t<bridge-type id=\"account\">\n-\t\t<label>Amazon Account</label>\n-\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\n-\t\t</channels>\n-\t</bridge-type>\n-\t<thing-type id=\"echo\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo</label>\n-\t\t<description>Amazon Echo device (Amazon Echo, Amazon Echo Dot, Amazon Echo Plus...)</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echospot\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Spot</label>\n-\t\t<description>Amazon Echo Spot device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echoshow\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Show</label>\n-\t\t<description>Amazon Echo Show device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"wha\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Whole House Audio Control</label>\n-\t\t<description>Amazon Multiroom Music</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\n-\t<thing-type id=\"flashbriefingprofile\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Flash Briefing Profile</label>\n-\t\t<description>Store and load a flash briefing configuration</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"save\" typeId=\"save\"/>\n-\t\t\t<channel id=\"active\" typeId=\"active\"/>\n-\t\t\t<channel id=\"playOnDevice\" typeId=\"playOnDevice\"/>\n-\t\t</channels>\n-\t</thing-type>\n-\t<channel-type id=\"save\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Save</label>\n-\t\t<description>Save the current flash briefing configuration (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"active\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Active</label>\n-\t\t<description>Activate this flash briefing configuration</description>\n-\t</channel-type>\n-\t<channel-type id=\"playOnDevice\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Play On Device</label>\n-\t\t<description>Plays the briefing on the device (serial number or name, write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothDeviceName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Device</label>\n-\t\t<description>Connected bluetooth device</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radioStationId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>TuneIn Radio Station Id</label>\n-\t\t<description>Id of the radio station</description>\n-\t</channel-type>\n-\t<channel-type id=\"remind\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Remind</label>\n-\t\t<description>Speak the reminder and send a notification to the Alexa app</description>\n-\t</channel-type>\n-\t<channel-type id=\"startRoutine\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start a Routine</label>\n-\t\t<description>The command which must be spoken to active the routing without the preceding \"Alexa,\" (Write Only)\n-\t\t</description>\n-\t</channel-type>\n-\t<channel-type id=\"playAlarmSound\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Alarm Sound</label>\n-\t\t<description>Plays an alarm sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicTrackId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Track Id</label>\n-\t\t<description>Id of the amazon music track</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusic\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Amazon Music</label>\n-\t\t<description>Amazon Music turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Play List Id</label>\n-\t\t<description>Amazon Music play list id (Write only, no current state)</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListIdLastUsed\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Last Selected Playlist Id</label>\n-\t\t<description>Id of the playlist which was started with openHAB</description>\n-\t</channel-type>\n-\t<channel-type id=\"providerDisplayName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Provider Name</label>\n-\t\t<description>Name of music provider</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothMAC\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>MAC-Address of the bluetooth connected device</description>\n-\t</channel-type>\n-\t<channel-type id=\"imageUrl\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Image Url</label>\n-\t\t<description>Url of the album image or radio station logo</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"title\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Title</label>\n-\t\t<description>Title</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle1\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 1</label>\n-\t\t<description>Subtitle 1</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle2\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 2</label>\n-\t\t<description>Subtitle 2</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radio\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>TuneIn Radio</label>\n-\t\t<description>Radio turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetooth\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>Connect to last used device</description>\n-\t</channel-type>\n-\t<channel-type id=\"loop\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Loop</label>\n-\t\t<description>Loop</description>\n-\t</channel-type>\n-\t<channel-type id=\"shuffle\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Shuffle</label>\n-\t\t<description>Shuffle play</description>\n-\t</channel-type>\n-\t<channel-type id=\"player\">\n-\t\t<item-type>Player</item-type>\n-\t\t<label>Player</label>\n-\t\t<description>Music Player</description>\n-\t</channel-type>\n-\t<channel-type id=\"volume\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Volume</label>\n-\t\t<description>Volume of the sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerTreble\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Treble</label>\n-\t\t<description>Equalizer Treble</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerMidrange\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Midrange</label>\n-\t\t<description>Equalizer Midrange</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerBass\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Bass</label>\n-\t\t<description>Equalizer Bass</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"musicProviderId\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Provider</label>\n-\t\t<description>Music provider</description>\n-\t</channel-type>\n-\t<channel-type id=\"playMusicVoiceCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Voice Command</label>\n-\t\t<description>Voice command as text. E.g. 'Yesterday from the Beatles' (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"sendMessage\" advanced=\"false\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Send Message</label>\n-\t\t<description>Sends a message to the Echo devices (Write only).</description>\n-\t</channel-type>\n-\t<channel-type id=\"announcement\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Announcement</label>\n-\t\t<description>Display the announcement message on the display (Write only). See in the tutorial section of the binding\n-\t\t\tdescription to learn how it's possible to set the title and turn off the sound.</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeech\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Speak</label>\n-\t\t<description>Speak the text (Write only). It is possible to use plain text or SSML: &lt;speak&gt;I want to tell you a\n-\t\t\tsecret.&lt;amazon:effect name=&quot;whispered&quot;&gt;I am not a real human.&lt;/amazon:effect&gt;.Can you believe\n-\t\t\tit?&lt;/speak&gt;</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeechVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Speak Volume</label>\n-\t\t<description>Volume of the Speak channel. If 0, the current volume will be used.</description>\n-\t</channel-type>\n-\t<channel-type id=\"lastVoiceCommand\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Last Voice Command</label>\n-\t\t<description>Last voice command spoken to the device. Writing to the channel starts voice output.</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgress\" advanced=\"false\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Media Progress</label>\n-\t\t<description>Media progress in percent</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgressTime\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Play Time</label>\n-\t\t<description>Media play time</description>\n-\t\t<state readOnly=\"false\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaLength\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Length</label>\n-\t\t<description>Media length</description>\n-\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"startCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start</label>\n-\t\t<description>Start information (Write only)</description>\n-\t\t<state pattern=\"String\" readOnly=\"false\">\n-\t\t\t<options>\n-\t\t\t\t<option value=\"Weather\">Weather</option>\n-\t\t\t\t<option value=\"Traffic\">Traffic</option>\n-\t\t\t\t<option value=\"GoodMorning\">Good morning</option>\n-\t\t\t\t<option value=\"SingASong\">Song</option>\n-\t\t\t\t<option value=\"TellStory\">Story</option>\n-\t\t\t\t<option value=\"FlashBriefing\">Flash briefing</option>\n-\t\t\t</options>\n-\t\t</state>\n-\t</channel-type>\n-\t<channel-type id=\"notificationVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Notification Volume</label>\n-\t\t<description>Notification Volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"ascendingAlarm\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Ascending Alarm</label>\n-\t\t<description>Ascending alarm up to the configured volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextReminder\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Reminder</label>\n-\t\t<description>Next Reminder</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Alarm</label>\n-\t\t<description>Next alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextMusicAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Music Alarm</label>\n-\t\t<description>Next music alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextTimer\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Timer</label>\n-\t\t<description>Next timer</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-</thing:thing-descriptions>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\t<bridge-type id=\"account\">\r\n+\t\t<label>Amazon Account</label>\r\n+\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\r\n+\t\t</channels>\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"discoverSmartHome\" type=\"integer\">\r\n+\t\t\t\t<default>0</default>\r\n+\t\t\t\t<description>Defines if openHAB should discover devices connected to the Amazon Echo.</description>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 485}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0MzAyNw==", "bodyText": "Yes.  And I guess it would be better to make this an enum (fits better to the method you commented on yesterday). I'll check that.", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r445343027", "createdAt": "2020-06-25T06:52:20Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.amazonechocontrol/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -1,471 +1,531 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n-\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\n-\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n-\t<bridge-type id=\"account\">\n-\t\t<label>Amazon Account</label>\n-\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\n-\t\t</channels>\n-\t</bridge-type>\n-\t<thing-type id=\"echo\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo</label>\n-\t\t<description>Amazon Echo device (Amazon Echo, Amazon Echo Dot, Amazon Echo Plus...)</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echospot\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Spot</label>\n-\t\t<description>Amazon Echo Spot device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"echoshow\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Show</label>\n-\t\t<description>Amazon Echo Show device</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"volume\" typeId=\"volume\"/>\n-\t\t\t<channel id=\"equalizerTreble\" typeId=\"equalizerTreble\"/>\n-\t\t\t<channel id=\"equalizerMidrange\" typeId=\"equalizerMidrange\"/>\n-\t\t\t<channel id=\"equalizerBass\" typeId=\"equalizerBass\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"musicProviderId\" typeId=\"musicProviderId\"/>\n-\t\t\t<channel id=\"playMusicVoiceCommand\" typeId=\"playMusicVoiceCommand\"/>\n-\t\t\t<channel id=\"startCommand\" typeId=\"startCommand\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t\t<channel id=\"announcement\" typeId=\"announcement\"/>\n-\t\t\t<channel id=\"textToSpeech\" typeId=\"textToSpeech\"/>\n-\t\t\t<channel id=\"textToSpeechVolume\" typeId=\"textToSpeechVolume\"/>\n-\t\t\t<channel id=\"remind\" typeId=\"remind\"/>\n-\t\t\t<channel id=\"nextReminder\" typeId=\"nextReminder\"/>\n-\t\t\t<channel id=\"playAlarmSound\" typeId=\"playAlarmSound\"/>\n-\t\t\t<channel id=\"nextAlarm\" typeId=\"nextAlarm\"/>\n-\t\t\t<channel id=\"nextMusicAlarm\" typeId=\"nextMusicAlarm\"/>\n-\t\t\t<channel id=\"nextTimer\" typeId=\"nextTimer\"/>\n-\t\t\t<channel id=\"startRoutine\" typeId=\"startRoutine\"/>\n-\t\t\t<channel id=\"bluetoothMAC\" typeId=\"bluetoothMAC\"/>\n-\t\t\t<channel id=\"bluetooth\" typeId=\"bluetooth\"/>\n-\t\t\t<channel id=\"bluetoothDeviceName\" typeId=\"bluetoothDeviceName\"/>\n-\t\t\t<channel id=\"lastVoiceCommand\" typeId=\"lastVoiceCommand\"/>\n-\t\t\t<channel id=\"notificationVolume\" typeId=\"notificationVolume\"/>\n-\t\t\t<channel id=\"ascendingAlarm\" typeId=\"ascendingAlarm\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\t<thing-type id=\"wha\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Amazon Echo Whole House Audio Control</label>\n-\t\t<description>Amazon Multiroom Music</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"player\" typeId=\"player\"/>\n-\t\t\t<channel id=\"mediaProgressTime\" typeId=\"mediaProgressTime\"/>\n-\t\t\t<channel id=\"mediaProgress\" typeId=\"mediaProgress\"/>\n-\t\t\t<channel id=\"mediaLength\" typeId=\"mediaLength\"/>\n-\t\t\t<channel id=\"shuffle\" typeId=\"shuffle\"/>\n-\t\t\t<channel id=\"imageUrl\" typeId=\"imageUrl\"/>\n-\t\t\t<channel id=\"title\" typeId=\"title\"/>\n-\t\t\t<channel id=\"subtitle1\" typeId=\"subtitle1\"/>\n-\t\t\t<channel id=\"subtitle2\" typeId=\"subtitle2\"/>\n-\t\t\t<channel id=\"providerDisplayName\" typeId=\"providerDisplayName\"/>\n-\t\t\t<channel id=\"radioStationId\" typeId=\"radioStationId\"/>\n-\t\t\t<channel id=\"radio\" typeId=\"radio\"/>\n-\t\t\t<channel id=\"amazonMusicTrackId\" typeId=\"amazonMusicTrackId\"/>\n-\t\t\t<channel id=\"amazonMusicPlayListId\" typeId=\"amazonMusicPlayListId\"/>\n-\t\t\t<channel id=\"amazonMusic\" typeId=\"amazonMusic\"/>\n-\t\t</channels>\n-\t\t<representation-property>serialNumber</representation-property>\n-\t\t<config-description>\n-\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n-\t\t\t\t<label>Serial Number</label>\n-\t\t\t\t<description>The serial number of the device from the Alexa app</description>\n-\t\t\t</parameter>\n-\t\t</config-description>\n-\t</thing-type>\n-\n-\t<thing-type id=\"flashbriefingprofile\">\n-\t\t<supported-bridge-type-refs>\n-\t\t\t<bridge-type-ref id=\"account\"/>\n-\t\t</supported-bridge-type-refs>\n-\t\t<label>Flash Briefing Profile</label>\n-\t\t<description>Store and load a flash briefing configuration</description>\n-\t\t<channels>\n-\t\t\t<channel id=\"save\" typeId=\"save\"/>\n-\t\t\t<channel id=\"active\" typeId=\"active\"/>\n-\t\t\t<channel id=\"playOnDevice\" typeId=\"playOnDevice\"/>\n-\t\t</channels>\n-\t</thing-type>\n-\t<channel-type id=\"save\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Save</label>\n-\t\t<description>Save the current flash briefing configuration (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"active\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Active</label>\n-\t\t<description>Activate this flash briefing configuration</description>\n-\t</channel-type>\n-\t<channel-type id=\"playOnDevice\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Play On Device</label>\n-\t\t<description>Plays the briefing on the device (serial number or name, write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothDeviceName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Device</label>\n-\t\t<description>Connected bluetooth device</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radioStationId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>TuneIn Radio Station Id</label>\n-\t\t<description>Id of the radio station</description>\n-\t</channel-type>\n-\t<channel-type id=\"remind\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Remind</label>\n-\t\t<description>Speak the reminder and send a notification to the Alexa app</description>\n-\t</channel-type>\n-\t<channel-type id=\"startRoutine\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start a Routine</label>\n-\t\t<description>The command which must be spoken to active the routing without the preceding \"Alexa,\" (Write Only)\n-\t\t</description>\n-\t</channel-type>\n-\t<channel-type id=\"playAlarmSound\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Alarm Sound</label>\n-\t\t<description>Plays an alarm sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicTrackId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Track Id</label>\n-\t\t<description>Id of the amazon music track</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusic\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Amazon Music</label>\n-\t\t<description>Amazon Music turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListId\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Play List Id</label>\n-\t\t<description>Amazon Music play list id (Write only, no current state)</description>\n-\t</channel-type>\n-\t<channel-type id=\"amazonMusicPlayListIdLastUsed\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Amazon Music Last Selected Playlist Id</label>\n-\t\t<description>Id of the playlist which was started with openHAB</description>\n-\t</channel-type>\n-\t<channel-type id=\"providerDisplayName\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Provider Name</label>\n-\t\t<description>Name of music provider</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"bluetoothMAC\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>MAC-Address of the bluetooth connected device</description>\n-\t</channel-type>\n-\t<channel-type id=\"imageUrl\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Image Url</label>\n-\t\t<description>Url of the album image or radio station logo</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"title\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Title</label>\n-\t\t<description>Title</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle1\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 1</label>\n-\t\t<description>Subtitle 1</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"subtitle2\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Subtitle 2</label>\n-\t\t<description>Subtitle 2</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"radio\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>TuneIn Radio</label>\n-\t\t<description>Radio turned on</description>\n-\t</channel-type>\n-\t<channel-type id=\"bluetooth\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Bluetooth Connection</label>\n-\t\t<description>Connect to last used device</description>\n-\t</channel-type>\n-\t<channel-type id=\"loop\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Loop</label>\n-\t\t<description>Loop</description>\n-\t</channel-type>\n-\t<channel-type id=\"shuffle\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Shuffle</label>\n-\t\t<description>Shuffle play</description>\n-\t</channel-type>\n-\t<channel-type id=\"player\">\n-\t\t<item-type>Player</item-type>\n-\t\t<label>Player</label>\n-\t\t<description>Music Player</description>\n-\t</channel-type>\n-\t<channel-type id=\"volume\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Volume</label>\n-\t\t<description>Volume of the sound</description>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerTreble\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Treble</label>\n-\t\t<description>Equalizer Treble</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerMidrange\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Midrange</label>\n-\t\t<description>Equalizer Midrange</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"equalizerBass\">\n-\t\t<item-type>Number</item-type>\n-\t\t<label>Bass</label>\n-\t\t<description>Equalizer Bass</description>\n-\t\t<state min=\"-6\" max=\"6\" step=\"1\"></state>\n-\t</channel-type>\n-\t<channel-type id=\"musicProviderId\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Provider</label>\n-\t\t<description>Music provider</description>\n-\t</channel-type>\n-\t<channel-type id=\"playMusicVoiceCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Music Voice Command</label>\n-\t\t<description>Voice command as text. E.g. 'Yesterday from the Beatles' (Write only)</description>\n-\t</channel-type>\n-\t<channel-type id=\"sendMessage\" advanced=\"false\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Send Message</label>\n-\t\t<description>Sends a message to the Echo devices (Write only).</description>\n-\t</channel-type>\n-\t<channel-type id=\"announcement\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Announcement</label>\n-\t\t<description>Display the announcement message on the display (Write only). See in the tutorial section of the binding\n-\t\t\tdescription to learn how it's possible to set the title and turn off the sound.</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeech\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Speak</label>\n-\t\t<description>Speak the text (Write only). It is possible to use plain text or SSML: &lt;speak&gt;I want to tell you a\n-\t\t\tsecret.&lt;amazon:effect name=&quot;whispered&quot;&gt;I am not a real human.&lt;/amazon:effect&gt;.Can you believe\n-\t\t\tit?&lt;/speak&gt;</description>\n-\t</channel-type>\n-\t<channel-type id=\"textToSpeechVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Speak Volume</label>\n-\t\t<description>Volume of the Speak channel. If 0, the current volume will be used.</description>\n-\t</channel-type>\n-\t<channel-type id=\"lastVoiceCommand\" advanced=\"true\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Last Voice Command</label>\n-\t\t<description>Last voice command spoken to the device. Writing to the channel starts voice output.</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgress\" advanced=\"false\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Media Progress</label>\n-\t\t<description>Media progress in percent</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaProgressTime\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Play Time</label>\n-\t\t<description>Media play time</description>\n-\t\t<state readOnly=\"false\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"mediaLength\" advanced=\"true\">\n-\t\t<item-type>Number:Time</item-type>\n-\t\t<label>Media Length</label>\n-\t\t<description>Media length</description>\n-\t\t<state readOnly=\"true\" pattern=\"%d %unit%\"/>\n-\t</channel-type>\n-\t<channel-type id=\"startCommand\">\n-\t\t<item-type>String</item-type>\n-\t\t<label>Start</label>\n-\t\t<description>Start information (Write only)</description>\n-\t\t<state pattern=\"String\" readOnly=\"false\">\n-\t\t\t<options>\n-\t\t\t\t<option value=\"Weather\">Weather</option>\n-\t\t\t\t<option value=\"Traffic\">Traffic</option>\n-\t\t\t\t<option value=\"GoodMorning\">Good morning</option>\n-\t\t\t\t<option value=\"SingASong\">Song</option>\n-\t\t\t\t<option value=\"TellStory\">Story</option>\n-\t\t\t\t<option value=\"FlashBriefing\">Flash briefing</option>\n-\t\t\t</options>\n-\t\t</state>\n-\t</channel-type>\n-\t<channel-type id=\"notificationVolume\" advanced=\"true\">\n-\t\t<item-type>Dimmer</item-type>\n-\t\t<label>Notification Volume</label>\n-\t\t<description>Notification Volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"ascendingAlarm\" advanced=\"true\">\n-\t\t<item-type>Switch</item-type>\n-\t\t<label>Ascending Alarm</label>\n-\t\t<description>Ascending alarm up to the configured volume</description>\n-\t\t<state readOnly=\"false\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextReminder\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Reminder</label>\n-\t\t<description>Next Reminder</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Alarm</label>\n-\t\t<description>Next alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextMusicAlarm\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Music Alarm</label>\n-\t\t<description>Next music alarm</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-\t<channel-type id=\"nextTimer\" advanced=\"true\">\n-\t\t<item-type>DateTime</item-type>\n-\t\t<label>Next Timer</label>\n-\t\t<description>Next timer</description>\n-\t\t<state readOnly=\"true\"/>\n-\t</channel-type>\n-</thing:thing-descriptions>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<thing:thing-descriptions xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\r\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" bindingId=\"amazonechocontrol\"\r\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\r\n+\t<bridge-type id=\"account\">\r\n+\t\t<label>Amazon Account</label>\r\n+\t\t<description>Amazon Account where the amazon echo devices are registered.</description>\r\n+\t\t<channels>\r\n+\t\t\t<channel id=\"sendMessage\" typeId=\"sendMessage\"/>\r\n+\t\t</channels>\r\n+\t\t<config-description>\r\n+\t\t\t<parameter name=\"discoverSmartHome\" type=\"integer\">\r\n+\t\t\t\t<default>0</default>\r\n+\t\t\t\t<description>Defines if openHAB should discover devices connected to the Amazon Echo.</description>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI4MDUzNA=="}, "originalCommit": {"oid": "6ded87597331cfd222f3ea203480a4c2f31ae440"}, "originalPosition": 485}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjQ0NzQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowOTo1NVrOGsxj9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowOTo1NVrOGsxj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMjU1MA==", "bodyText": "Duplicate channel row", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r449602550", "createdAt": "2020-07-03T14:09:55Z", "author": {"login": "digitaldan"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -119,21 +162,23 @@ It will be configured at runtime by using the save channel to store the current\n | bluetoothDeviceName   | String      | R           | echo, echoshow, echospot      | User friendly name of the connected bluetooth device\n | radioStationId        | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a TuneIn radio station by specifying its id or stops playing if an empty string was provided\n | radio                 | Switch      | R/W         | echo, echoshow, echospot, wha | Start playing of the last used TuneIn radio station (works after the radio station started after the openhab start)\n+| amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of an Amazon Music track by specifying its id or stops playing if an empty string was provided\n+| amazonMusicPlayListId | String      | W           | echo, echoshow, echospot, wha | Write Only! Start playing of an Amazon Music playlist by specifying its id or stops playing if an empty string was provided. Selection will only work in PaperUI\n | amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of an Amazon Music track by its id or stops playing if an empty string was provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea431286f0ab2d1801526d861d518296e10121"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjQ0ODAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoxMDowNVrOGsxkSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoxMDowNVrOGsxkSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMjYzNA==", "bodyText": "Duplicate channel row", "url": "https://github.com/openhab/openhab-addons/pull/7969#discussion_r449602634", "createdAt": "2020-07-03T14:10:05Z", "author": {"login": "digitaldan"}, "path": "bundles/org.openhab.binding.amazonechocontrol/README.md", "diffHunk": "@@ -119,21 +162,23 @@ It will be configured at runtime by using the save channel to store the current\n | bluetoothDeviceName   | String      | R           | echo, echoshow, echospot      | User friendly name of the connected bluetooth device\n | radioStationId        | String      | R/W         | echo, echoshow, echospot, wha | Start playing of a TuneIn radio station by specifying its id or stops playing if an empty string was provided\n | radio                 | Switch      | R/W         | echo, echoshow, echospot, wha | Start playing of the last used TuneIn radio station (works after the radio station started after the openhab start)\n+| amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of an Amazon Music track by specifying its id or stops playing if an empty string was provided\n+| amazonMusicPlayListId | String      | W           | echo, echoshow, echospot, wha | Write Only! Start playing of an Amazon Music playlist by specifying its id or stops playing if an empty string was provided. Selection will only work in PaperUI\n | amazonMusicTrackId    | String      | R/W         | echo, echoshow, echospot, wha | Start playing of an Amazon Music track by its id or stops playing if an empty string was provided\n | amazonMusicPlayListId | String      | W           | echo, echoshow, echospot, wha | Write Only! Start playing of an Amazon Music playlist by specifying its id or stops playing if an empty string was provided. Selection will only work in PaperUI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fea431286f0ab2d1801526d861d518296e10121"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4836, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}