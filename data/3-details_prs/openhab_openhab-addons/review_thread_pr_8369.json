{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1OTMzOTI4", "number": 8369, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjo1MDo1MlrOEeFepw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjo1MToxOFrOEeFezg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTgyNTAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.persistence.rrd4j/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjo1MDo1MlrOHJkJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjo1MDo1MlrOHJkJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5MTQ3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The persistence service reads data \"samples\" from the OpenHAB core at regular intervals, and these are then put into the storage boxes.\n          \n          \n            \n            The persistence service reads data \"samples\" from the openHAB core at regular intervals, and these are then put into the storage boxes.", "url": "https://github.com/openhab/openhab-addons/pull/8369#discussion_r479791475", "createdAt": "2020-08-30T16:50:52Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.persistence.rrd4j/README.md", "diffHunk": "@@ -1,143 +1,212 @@\n # rrd4j Persistence\n \n-The [rrd4j](https://github.com/rrd4j/rrd4j) Persistence service is based on a round-robin database.\n+The [rrd4j](https://github.com/rrd4j/rrd4j) persistence service is based on a round-robin database.\n \n-In contrast to a \"normal\" database such as db4o, a round-robin database does not grow in size - it has a fixed allocated size, which is used.\n-This is accomplished by saving a fixed amount of datapoints and by doing data compression, which means that the older the data is, the less values are available.\n-The data is kept in several \"archives\", each holding the data for its set timeframe in the set granularity.\n-The start point for all archives is the actually saved datapoint.\n-So while you might have a value every minute for the last 8 hours, you might only have one every day for the last year.\n+In contrast to a \"normal\" database such as db4o, a round-robin database does not grow in size - it has a fixed allocated size.\n+This is accomplished by saving a fixed amount of datapoints and by doing data compression, which means that the older the data is, the less values are available. \n+The data is kept in several \"archives\", each holding the data for its set timeframe at a defined level of granularity.\n+The starting point for all archives is the actually saved data sample (Item value).\n+So while you might store a sample value every minute for the last 8 hours, you might store the average per day for the last year.\n \n-This service cannot be directly queried, because of the data compression. You could not provide precise answers for all questions. \n+This service cannot be directly queried, because of its data compression, which means that it cannot provide precise answers to all queries.\n \n NOTE: rrd4j is for storing numerical data only.\n-Attempting to use rrd4j to store complex datatypes (e.g. for restore-on-startup) will not work.\n+It cannot store complex data types.\n \n-<!-- MarkdownTOC -->\n+## Persistence Process\n \n-- [Configuration](#configuration)\n-    - [Datasource types](#datasource-types)\n-    - [Heartbeat, MIN, MAX](#heartbeat-min-max)\n-    - [Step\\(s\\)](#steps)\n-    - [Example](#example)\n-- [Troubleshooting](#troubleshooting)\n+Round-robin databases (RRDs) have fixed length so called \"archives\" for storing values.\n+Think of an archive as a \"drawer\" with a fixed number of \"storage boxes\" in it.\n \n-<!-- /MarkdownTOC -->\n+The persistence service reads data \"samples\" from the OpenHAB core at regular intervals, and these are then put into the storage boxes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c54a1b7c201742231f898f10033d78b25c4854eb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5OTgyNTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.persistence.rrd4j/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjo1MToxOFrOHJkJng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMFQxNjo1MToxOFrOHJkJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc5MTUxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The time interval (seconds) between reading consecutive samples from the OpenHAB core.\n          \n          \n            \n            The time interval (seconds) between reading consecutive samples from the openHAB core.", "url": "https://github.com/openhab/openhab-addons/pull/8369#discussion_r479791518", "createdAt": "2020-08-30T16:51:18Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.persistence.rrd4j/README.md", "diffHunk": "@@ -1,143 +1,212 @@\n # rrd4j Persistence\n \n-The [rrd4j](https://github.com/rrd4j/rrd4j) Persistence service is based on a round-robin database.\n+The [rrd4j](https://github.com/rrd4j/rrd4j) persistence service is based on a round-robin database.\n \n-In contrast to a \"normal\" database such as db4o, a round-robin database does not grow in size - it has a fixed allocated size, which is used.\n-This is accomplished by saving a fixed amount of datapoints and by doing data compression, which means that the older the data is, the less values are available.\n-The data is kept in several \"archives\", each holding the data for its set timeframe in the set granularity.\n-The start point for all archives is the actually saved datapoint.\n-So while you might have a value every minute for the last 8 hours, you might only have one every day for the last year.\n+In contrast to a \"normal\" database such as db4o, a round-robin database does not grow in size - it has a fixed allocated size.\n+This is accomplished by saving a fixed amount of datapoints and by doing data compression, which means that the older the data is, the less values are available. \n+The data is kept in several \"archives\", each holding the data for its set timeframe at a defined level of granularity.\n+The starting point for all archives is the actually saved data sample (Item value).\n+So while you might store a sample value every minute for the last 8 hours, you might store the average per day for the last year.\n \n-This service cannot be directly queried, because of the data compression. You could not provide precise answers for all questions. \n+This service cannot be directly queried, because of its data compression, which means that it cannot provide precise answers to all queries.\n \n NOTE: rrd4j is for storing numerical data only.\n-Attempting to use rrd4j to store complex datatypes (e.g. for restore-on-startup) will not work.\n+It cannot store complex data types.\n \n-<!-- MarkdownTOC -->\n+## Persistence Process\n \n-- [Configuration](#configuration)\n-    - [Datasource types](#datasource-types)\n-    - [Heartbeat, MIN, MAX](#heartbeat-min-max)\n-    - [Step\\(s\\)](#steps)\n-    - [Example](#example)\n-- [Troubleshooting](#troubleshooting)\n+Round-robin databases (RRDs) have fixed length so called \"archives\" for storing values.\n+Think of an archive as a \"drawer\" with a fixed number of \"storage boxes\" in it.\n \n-<!-- /MarkdownTOC -->\n+The persistence service reads data \"samples\" from the OpenHAB core at regular intervals, and these are then put into the storage boxes.\n+Either a) the samples are stored singly directly into a box, or b) multiple samples are consolidated (using a consolidation function) into a box.\n+\n+The service starts by storing samples in the leftmost box in the drawer.\n+Once the leftmost box is full, the service starts filling the next box to the right; and so on.\n+Once the rightmost box in the drawer is full, the leftmost box is emptied, the content of all boxes is moved one box to the left, and new content is added to the rightmost box.\n+\n+An example is shown below.\n+Whereby the values indicated in the example may vary as chosen by the user..\n+\n+- Samples are taken at intervals of `60` seconds\n+- They are consolidated by the `AVERAGE` function, over `10` samples, into boxes i.e. a box covers `10 X 60` seconds\n+- The full archive contains `250` boxes i.e. the archive/drawer covers `60 X 10 X 250` seconds\n \n ## Configuration\n \n-This service can be configured in the file `services/rrd4j.cfg`.\n+Two things must be done in order for an Item to get persisted:\n+\n+1. it must have a persistence strategy defined in the `rrd4j.persist` file.\n+2. it must have a `datasource` defined as follows..\n+\n+## Datasources\n+\n+The database comprises at least one datasource.\n+The rrd4j service automatically creates one internal _**default**_ datasource for you.\n+Other datasources **may** be configured in addition, in the `services/rrd4j.cfg` file.\n+\n+By default, if `services/rrd4j.cfg` does not exist, or if an Item is not explicitly listed in a `<dsName>.items` property value in it, then the respective Item will be persisted according to the [default datasource settings](#default-datasource).\n \n-| Property            | Default | Required | Description                                                  |\n-| ------------------- | ------- | :------: | ------------------------------------------------------------ |\n-| `<dsname>`.def      |         |          | `<dstype>,<heartbeat>,[<min>\\|U],[<max>\\|U],<step>`. For example, `COUNTER,900,0,U,300` |\n-| `<dsname>`.archives |         |          | `<consolidationfunction>,<xff>,<steps>,<rows>`. For example, `AVERAGE,0.5,1,365:AVERAGE,0.5,7,300` |\n-| `<dsname>`.items    |         |          | `<list of items for this dsname>`. For example, `Item1,Item2` |\n+By constrast if an Item **is** explicitly listed in a `<dsName>.items` property value, then it will be persisted according to those respective datasource settings.\n \n-where:\n+Each datasource is defined by three property values (`def`, `archives`, `items`).\n+Whereby each `archives` property can comprise settings for one or more archives.\n \n-- Sections in `[square brackets]` are optional.\n-- `<dsname>` is a name you choose for the datasource.\n-- See [Datasource types](#datasource-types) for an explanation of `<dstype>`.\n-- See [Heartbeat, MIN, MAX](#heartbeat-min-max) for an explanation of `<heartbeat>`, `<min>`, `<max>` and `U`.\n-- See [Step\\(s\\)](#steps) for an explanation of `<step>`, `<consolidationfunction>`, `<xff>`, `<steps>`, and `<rows>`.\n-- `<list of items for this dsname>` is explained in\n+The various datasource property values are explained in the table below.\n \n-Round-robin databases (RRDs) have fixed-length so-called \"archives\" for storing values. \n-One RRD can have (in general) several datasources and each datasource can have several archives. \n-openHAB only supports one datasource per RRD (i.e. per stored item), which is named DATASOURCE_STATE.\n-Multiple configurations (with differing .items settings) can be used (see example below).\n+| Property            | Description |\n+|---------------------|-------------|\n+| `<dsName>`.def      | Definition of the range of sample values to be taken, and when. The format is `<dsType>,<heartBeat>,<minValue>,<maxValue>,<sampleInterval>` |\n+| `<dsName>`.archives | List of archives to be created. Each archive defines which subset of data samples shall be archived, and for how long. Consists of one or more archive entries separated by a \":\" character. The format for one archive entry is `<consolidationFunction>,<xff>,<samplesPerBox>,<boxCount>` |\n+| `<dsName>`.items    | List of Items whose values shall be sampled and stored in the archive. The format is `Item1,Item2` _**Note: the same Item is not allowed to be listed in more than one datasource!**_ |\n \n-### Datasource types\n+For example..\n+\n+```\n+ctr24h.def=COUNTER,900,0,U,60\n+ctr24h.archives=AVERAGE,0.5,1,480:AVERAGE,0.5,10,144\n+ctr24h.items=Item1,Item2\n+```\n \n-Depending on the data to be stored, several types for datasources exist:\n+The description of the various datasource property elements is as follows:\n+\n+### `<dsName>` (Datasource Name)\n+\n+The name of the datasource.\n+It must be an alphanumeric string.\n+\n+### `<dsType>` (Datasource Type)\n+\n+Defines the type of data to be stored.\n+It must be one of the following string values:\n \n - **COUNTER** represents a ever-incrementing value (historically this was used for packet counters or traffic counters on network interfaces, a typical home-automation application would be your electricity meter). If you store the values of this counter in a simple database and make a chart of that, you'll most likely see a nearly flat line, because the increments per time are small compared to the absolute value (e.g. your electricity meter reads 60567 kWh, and you add 0.5 kWh per hour, than your chart over the whole day will show 60567 at the start and 60579 at the end of your chart. That is nearly invisible. RRD4J helps you out and will display the difference from one stored value to the other (depending on the selected size). Please note that the persistence extensions will return difference instead of the actual values if you use this type; this especially leads to wrong values if you try to restoreOnStartup!\n - **GAUGE** represents the reading of e.g. a temperature sensor. You'll see only small deviation over the day and your values will be within a small range, clearly visible within a chart.\n - **ABSOLUTE** is like a counter, but RRD4J assumes that the counter is reset when the value is read. So these are basically the delta values between the reads.\n - **DERIVE** is like a counter, but it can also decrease and therefore have a negative delta.\n \n-### Heartbeat, MIN, MAX\n+### `<heartBeat>` (Heart Beat)\n+\n+The heartbeat parameter helps the database to detect missing values.\n+i.e. if no new value is stored after \"heartBeat\" seconds, the value is considered missing when charting.\n+\n+It must be a positive integer value.\n+\n+### `<minValue> / <maxValue>` (Minimum resp. Maximum Value)\n+\n+These parameters define the range of acceptable sample values for that datasource.\n+They must be either:\n+\n+- A numeric value, or\n+- The letter \"U\" (unlimited)\n+\n+### `<sampleInterval>` (Sample Interval)\n+\n+The time interval (seconds) between reading consecutive samples from the OpenHAB core.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c54a1b7c201742231f898f10033d78b25c4854eb"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4410, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}