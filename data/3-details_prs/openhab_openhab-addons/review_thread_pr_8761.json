{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0Mjc4NjMy", "number": 8761, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjo0ODo1OVrOEuNjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzowOTo0MFrOEunYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODkyMDM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openuv/src/main/java/org/openhab/binding/openuv/internal/handler/OpenUVBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjo0ODo1OVrOHieHXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQyMjo0ODo1OVrOHieHXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwNzAzNw==", "bodyText": "You should keep track of this scheduled future so that you can cancel it if the handler gets disposed.", "url": "https://github.com/openhab/openhab-addons/pull/8761#discussion_r505907037", "createdAt": "2020-10-15T22:48:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openuv/src/main/java/org/openhab/binding/openuv/internal/handler/OpenUVBridgeHandler.java", "diffHunk": "@@ -106,62 +94,50 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     private void initiateConnexion() {\n         // Check if the provided api key is valid for use with the OpenUV service\n-        getUVData(\"0\", \"0\", null);\n-    }\n-\n-    public Map<ThingUID, @Nullable ServiceRegistration<?>> getDiscoveryServiceRegs() {\n-        return discoveryServiceRegs;\n-    }\n-\n-    public void setDiscoveryServiceRegs(Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs) {\n-        this.discoveryServiceRegs = discoveryServiceRegs;\n+        getUVData(\"0\", \"0\", \"0\");\n     }\n \n-    @Override\n-    public void handleRemoval() {\n-        // removes the old registration service associated to the bridge, if existing\n-        ServiceRegistration<?> dis = getDiscoveryServiceRegs().get(getThing().getUID());\n-        if (dis != null) {\n-            dis.unregister();\n-        }\n-        super.handleRemoval();\n-    }\n-\n-    public @Nullable OpenUVResult getUVData(String latitude, String longitude, @Nullable String altitude) {\n-        StringBuilder urlBuilder = new StringBuilder(BASE_URL).append(\"?lat=\").append(latitude).append(\"&lng=\")\n-                .append(longitude);\n-\n-        if (altitude != null) {\n-            urlBuilder.append(\"&alt=\").append(altitude);\n-        }\n-        String errorMessage = null;\n+    public @Nullable OpenUVResult getUVData(String latitude, String longitude, String altitude) {\n         try {\n-            String jsonData = HttpUtil.executeUrl(\"GET\", urlBuilder.toString(), header, null, null, REQUEST_TIMEOUT);\n+            String jsonData = HttpUtil.executeUrl(\"GET\", String.format(QUERY_URL, latitude, longitude, altitude),\n+                    header, null, null, REQUEST_TIMEOUT_MS);\n             OpenUVResponse uvResponse = gson.fromJson(jsonData, OpenUVResponse.class);\n             if (uvResponse.getError() == null) {\n                 updateStatus(ThingStatus.ONLINE);\n                 return uvResponse.getResult();\n             } else {\n-                errorMessage = uvResponse.getError();\n+                throw new OpenUVException(uvResponse.getError());\n             }\n         } catch (IOException e) {\n-            errorMessage = e.getMessage();\n+            logger.error(\"Error occured during API query : {}\", e.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } catch (OpenUVException e) {\n+            if (e.isQuotaError()) {\n+                LocalDate today = LocalDate.now();\n+                LocalDate tomorrow = today.plusDays(1);\n+                LocalDateTime tomorrowMidnight = tomorrow.atStartOfDay().plusMinutes(2);\n+\n+                String message = \"Quota Exceeded, going OFFLINE for today, will retry at : \"\n+                        + tomorrowMidnight.toString();\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, message);\n+\n+                scheduler.schedule(this::initiateConnexion,\n+                        Duration.between(LocalDateTime.now(), tomorrowMidnight).toMinutes(), TimeUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e141cba6f498ce8447d6809ccbccaaece99e38a"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzE1MTg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.openuv/src/main/java/org/openhab/binding/openuv/internal/handler/OpenUVBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzowOTo0MFrOHjI-DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzowOTo0MFrOHjI-DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwOTE2NA==", "bodyText": "You are already setting the thing offline with the error message so you don't need to log it as well.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"Error occured during API query : {}\", e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/8761#discussion_r506609164", "createdAt": "2020-10-16T17:09:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.openuv/src/main/java/org/openhab/binding/openuv/internal/handler/OpenUVBridgeHandler.java", "diffHunk": "@@ -106,62 +105,50 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n \n     private void initiateConnexion() {\n         // Check if the provided api key is valid for use with the OpenUV service\n-        getUVData(\"0\", \"0\", null);\n+        getUVData(\"0\", \"0\", \"0\");\n     }\n \n-    public Map<ThingUID, @Nullable ServiceRegistration<?>> getDiscoveryServiceRegs() {\n-        return discoveryServiceRegs;\n-    }\n-\n-    public void setDiscoveryServiceRegs(Map<ThingUID, @Nullable ServiceRegistration<?>> discoveryServiceRegs) {\n-        this.discoveryServiceRegs = discoveryServiceRegs;\n-    }\n-\n-    @Override\n-    public void handleRemoval() {\n-        // removes the old registration service associated to the bridge, if existing\n-        ServiceRegistration<?> dis = getDiscoveryServiceRegs().get(getThing().getUID());\n-        if (dis != null) {\n-            dis.unregister();\n-        }\n-        super.handleRemoval();\n-    }\n-\n-    public @Nullable OpenUVResult getUVData(String latitude, String longitude, @Nullable String altitude) {\n-        StringBuilder urlBuilder = new StringBuilder(BASE_URL).append(\"?lat=\").append(latitude).append(\"&lng=\")\n-                .append(longitude);\n-\n-        if (altitude != null) {\n-            urlBuilder.append(\"&alt=\").append(altitude);\n-        }\n-        String errorMessage = null;\n+    public @Nullable OpenUVResult getUVData(String latitude, String longitude, String altitude) {\n         try {\n-            String jsonData = HttpUtil.executeUrl(\"GET\", urlBuilder.toString(), header, null, null, REQUEST_TIMEOUT);\n+            String jsonData = HttpUtil.executeUrl(\"GET\", String.format(QUERY_URL, latitude, longitude, altitude),\n+                    header, null, null, REQUEST_TIMEOUT_MS);\n             OpenUVResponse uvResponse = gson.fromJson(jsonData, OpenUVResponse.class);\n             if (uvResponse.getError() == null) {\n                 updateStatus(ThingStatus.ONLINE);\n                 return uvResponse.getResult();\n             } else {\n-                errorMessage = uvResponse.getError();\n+                throw new OpenUVException(uvResponse.getError());\n             }\n         } catch (IOException e) {\n-            errorMessage = e.getMessage();\n+            logger.error(\"Error occured during API query : {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7745ee576a92fd7c0043f7e5132b157a4ee9576"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4052, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}