{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNDY4MTE5", "number": 7529, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTowMzozOFrOD4r4qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTowMzozOFrOD4r4qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzY1ODY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/handler/AbstractAvrHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxOTowMzozOFrOGPlcVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwOTozMjo1NlrOGPqXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NTI4Nw==", "bodyText": "How does the channel get refreshed though? I don't see you using the result of the query to update the state of the channel.", "url": "https://github.com/openhab/openhab-addons/pull/7529#discussion_r418995287", "createdAt": "2020-05-02T19:03:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/handler/AbstractAvrHandler.java", "diffHunk": "@@ -166,16 +167,37 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             boolean unknownCommand = false;\n \n             if (channelUID.getId().contains(PioneerAvrBindingConstants.POWER_CHANNEL)) {\n-                commandSent = connection.sendPowerCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendPowerQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendPowerCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.VOLUME_DIMMER_CHANNEL)\n                     || channelUID.getId().contains(PioneerAvrBindingConstants.VOLUME_DB_CHANNEL)) {\n-                commandSent = connection.sendVolumeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendVolumeQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendVolumeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.SET_INPUT_SOURCE_CHANNEL)) {\n-                commandSent = connection.sendInputSourceCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendInputSourceQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendInputSourceCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.LISTENING_MODE_CHANNEL)) {\n-                commandSent = connection.sendListeningModeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendListeningModeQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendListeningModeCommand(command,\n+                            getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.MUTE_CHANNEL)) {\n-                commandSent = connection.sendMuteCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendMuteQuery(getZoneFromChannelUID(channelUID.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1962a1dd13787d0712957d73b5f26f7a7cb2dac"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA3NTk2MQ==", "bodyText": "The protocol allows for both device-initiated (e.g. when pressing a remote control button) as well as client-initiated (e.g. from OpenHAB) status updates.\nThe update message will look the same regardless of how it was triggered and in both cases the update will be handled by StreamAvrConnection.IpControlInputStreamReader.run() and forwared to AbstractAvrHandler.statusUpdateReceived() where the actual channel update will happen.", "url": "https://github.com/openhab/openhab-addons/pull/7529#discussion_r419075961", "createdAt": "2020-05-03T09:32:56Z", "author": {"login": "nils"}, "path": "bundles/org.openhab.binding.pioneeravr/src/main/java/org/openhab/binding/pioneeravr/internal/handler/AbstractAvrHandler.java", "diffHunk": "@@ -166,16 +167,37 @@ public void handleCommand(ChannelUID channelUID, Command command) {\n             boolean unknownCommand = false;\n \n             if (channelUID.getId().contains(PioneerAvrBindingConstants.POWER_CHANNEL)) {\n-                commandSent = connection.sendPowerCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendPowerQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendPowerCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.VOLUME_DIMMER_CHANNEL)\n                     || channelUID.getId().contains(PioneerAvrBindingConstants.VOLUME_DB_CHANNEL)) {\n-                commandSent = connection.sendVolumeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendVolumeQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendVolumeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.SET_INPUT_SOURCE_CHANNEL)) {\n-                commandSent = connection.sendInputSourceCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendInputSourceQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendInputSourceCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.LISTENING_MODE_CHANNEL)) {\n-                commandSent = connection.sendListeningModeCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendListeningModeQuery(getZoneFromChannelUID(channelUID.getId()));\n+                } else {\n+                    commandSent = connection.sendListeningModeCommand(command,\n+                            getZoneFromChannelUID(channelUID.getId()));\n+                }\n             } else if (channelUID.getId().contains(PioneerAvrBindingConstants.MUTE_CHANNEL)) {\n-                commandSent = connection.sendMuteCommand(command, getZoneFromChannelUID(channelUID.getId()));\n+                if (command == RefreshType.REFRESH) {\n+                    commandSent = connection.sendMuteQuery(getZoneFromChannelUID(channelUID.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk5NTI4Nw=="}, "originalCommit": {"oid": "c1962a1dd13787d0712957d73b5f26f7a7cb2dac"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 153, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}