{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTQ1Mjkx", "number": 7902, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyNTozNFrOEFHoBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MjozOVrOEFKBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODAzMjY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyNTozNFrOGjKPGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyNTozNFrOGjKPGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMTA0OA==", "bodyText": "Is it absolutely necessary to catch Exception here?", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439521048", "createdAt": "2020-06-12T16:25:34Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -68,57 +69,67 @@ protected String getRpcCallbackUrl() {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Client XmlRpcRequest (port {}):\\n{}\", port, request);\n         }\n-        return sendMessage(port, request, 0);\n+        Exception reason = null;\n+        for (int rpcRetryCounter = 1; rpcRetryCounter <= MAX_RPC_RETRY; rpcRetryCounter++) {\n+            try {\n+                byte[] response = send(port, request);\n+                Object[] data = new XmlRpcResponse(new ByteArrayInputStream(response), config.getEncoding())\n+                        .getResponseData();\n+                return new RpcResponseParser(request).parse(data);\n+            } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n+                throw ex;\n+            } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4a5e406588376b20d89d468481ed40c9c699b7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODA0Mzg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoyOTowOVrOGjKWJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzo0OTo0OVrOGjMuww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMjg1NA==", "bodyText": "Please do not throw Exception, either define your own like HomematicException extends Exception or use something like IllegalStateException (or what fits best) and catch only that one. The problem with catchin Exception is that it hides programming errors like NPE.", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439522854", "createdAt": "2020-06-12T16:29:09Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -68,57 +69,67 @@ protected String getRpcCallbackUrl() {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Client XmlRpcRequest (port {}):\\n{}\", port, request);\n         }\n-        return sendMessage(port, request, 0);\n+        Exception reason = null;\n+        for (int rpcRetryCounter = 1; rpcRetryCounter <= MAX_RPC_RETRY; rpcRetryCounter++) {\n+            try {\n+                byte[] response = send(port, request);\n+                Object[] data = new XmlRpcResponse(new ByteArrayInputStream(response), config.getEncoding())\n+                        .getResponseData();\n+                return new RpcResponseParser(request).parse(data);\n+            } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n+                throw ex;\n+            } catch (Exception ex) {\n+                reason = ex;\n+                if (\"init\".equals(request.getMethodName())) { // no retries for \"init\" request\n+                    break;\n+                }\n+                logger.debug(\"XmlRpcMessage failure, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n+            }\n+        }\n+        throw new IOException(reason.getMessage(), reason); // can't be null here because logic in for loop\n     }\n \n-    /**\n-     * Sends the message, retries if there was an error.\n-     */\n-    private synchronized Object[] sendMessage(int port, RpcRequest<String> request, int rpcRetryCounter)\n-            throws IOException {\n+    private byte[] send(int port, RpcRequest<String> request) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4a5e406588376b20d89d468481ed40c9c699b7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU2MTkyMw==", "bodyText": "I agree with you regarding the catching and throwing of \"Exception\", but I tried to stay close to the original implementation and Jetty throws a lot of different exceptions. Will try to get rid of the Exception.", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439561923", "createdAt": "2020-06-12T17:49:49Z", "author": {"login": "MHerbst"}, "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -68,57 +69,67 @@ protected String getRpcCallbackUrl() {\n         if (logger.isTraceEnabled()) {\n             logger.trace(\"Client XmlRpcRequest (port {}):\\n{}\", port, request);\n         }\n-        return sendMessage(port, request, 0);\n+        Exception reason = null;\n+        for (int rpcRetryCounter = 1; rpcRetryCounter <= MAX_RPC_RETRY; rpcRetryCounter++) {\n+            try {\n+                byte[] response = send(port, request);\n+                Object[] data = new XmlRpcResponse(new ByteArrayInputStream(response), config.getEncoding())\n+                        .getResponseData();\n+                return new RpcResponseParser(request).parse(data);\n+            } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n+                throw ex;\n+            } catch (Exception ex) {\n+                reason = ex;\n+                if (\"init\".equals(request.getMethodName())) { // no retries for \"init\" request\n+                    break;\n+                }\n+                logger.debug(\"XmlRpcMessage failure, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n+            }\n+        }\n+        throw new IOException(reason.getMessage(), reason); // can't be null here because logic in for loop\n     }\n \n-    /**\n-     * Sends the message, retries if there was an error.\n-     */\n-    private synchronized Object[] sendMessage(int port, RpcRequest<String> request, int rpcRetryCounter)\n-            throws IOException {\n+    private byte[] send(int port, RpcRequest<String> request) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyMjg1NA=="}, "originalCommit": {"oid": "9a4a5e406588376b20d89d468481ed40c9c699b7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczODQyNTM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo0MjozOVrOGjOLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxODo1MDowNFrOGjOYyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTcyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                resp.abort(new Exception());\n          \n          \n            \n                                resp.abort(new IOException());", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439585723", "createdAt": "2020-06-12T18:42:39Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -78,57 +84,64 @@ protected String getRpcCallbackUrl() {\n                 return new RpcResponseParser(request).parse(data);\n             } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n                 throw ex;\n-            } catch (Exception ex) {\n+            } catch (SAXException | ParserConfigurationException ex) {\n+                throw new IOException(ex);\n+            } catch (IOException ex) {\n                 reason = ex;\n                 if (\"init\".equals(request.getMethodName())) { // no retries for \"init\" request\n                     break;\n                 }\n-                logger.debug(\"XmlRpcMessage failure, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n+                logger.debug(\"XmlRpcMessage failed, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n             }\n         }\n-        throw new IOException(reason.getMessage(), reason); // can't be null here because logic in for loop\n+        throw reason;\n     }\n \n-    private byte[] send(int port, RpcRequest<String> request) throws Exception {\n+    private byte[] send(int port, RpcRequest<String> request) throws IOException {\n         byte[] ret = new byte[0];\n-        BytesContentProvider content = new BytesContentProvider(request.createMessage().getBytes(config.getEncoding()));\n-        String url = String.format(\"http://%s:%s\", config.getGatewayAddress(), port);\n-        if (port == config.getGroupPort()) {\n-            url += \"/groups\";\n-        }\n-        Request req = httpClient.POST(url).content(content).timeout(config.getTimeout(), TimeUnit.SECONDS)\n-                .header(HttpHeader.CONTENT_TYPE, \"text/xml;charset=\" + config.getEncoding());\n         try {\n-            ret = req.send().getContent();\n-        } catch (IllegalArgumentException e) { // Returned buffer too large\n-            logger.info(\"Blocking XmlRpcRequest failed: {}, trying non-blocking request\", e.getMessage());\n-            InputStreamResponseListener respListener = new InputStreamResponseListener();\n-            req.send(respListener);\n-            Response resp = respListener.get(config.getTimeout(), TimeUnit.SECONDS);\n-            ByteArrayOutputStream respData = new ByteArrayOutputStream(RESP_BUFFER_SIZE);\n+            BytesContentProvider content = new BytesContentProvider(\n+                    request.createMessage().getBytes(config.getEncoding()));\n+            String url = String.format(\"http://%s:%s\", config.getGatewayAddress(), port);\n+            if (port == config.getGroupPort()) {\n+                url += \"/groups\";\n+            }\n+            Request req = httpClient.POST(url).content(content).timeout(config.getTimeout(), TimeUnit.SECONDS)\n+                    .header(HttpHeader.CONTENT_TYPE, \"text/xml;charset=\" + config.getEncoding());\n+            try {\n+                ret = req.send().getContent();\n+            } catch (IllegalArgumentException e) { // Returned buffer too large\n+                logger.info(\"Blocking XmlRpcRequest failed: {}, trying non-blocking request\", e.getMessage());\n+                InputStreamResponseListener respListener = new InputStreamResponseListener();\n+                req.send(respListener);\n+                Response resp = respListener.get(config.getTimeout(), TimeUnit.SECONDS);\n+                ByteArrayOutputStream respData = new ByteArrayOutputStream(RESP_BUFFER_SIZE);\n \n-            int httpStatus = resp.getStatus();\n-            if (httpStatus == HttpStatus.OK_200) {\n-                byte[] recvBuffer = new byte[RESP_BUFFER_SIZE];\n-                try (InputStream input = respListener.getInputStream()) {\n-                    while (true) {\n-                        int read = input.read(recvBuffer);\n-                        if (read == -1) {\n-                            break;\n+                int httpStatus = resp.getStatus();\n+                if (httpStatus == HttpStatus.OK_200) {\n+                    byte[] recvBuffer = new byte[RESP_BUFFER_SIZE];\n+                    try (InputStream input = respListener.getInputStream()) {\n+                        while (true) {\n+                            int read = input.read(recvBuffer);\n+                            if (read == -1) {\n+                                break;\n+                            }\n+                            respData.write(recvBuffer, 0, read);\n                         }\n-                        respData.write(recvBuffer, 0, read);\n+                        ret = respData.toByteArray();\n                     }\n-                    ret = respData.toByteArray();\n+                } else {\n+                    logger.warn(\"Non-blocking XmlRpcRequest failed, status code: {} / request: {}\", httpStatus,\n+                            request);\n+                    resp.abort(new Exception());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713cf01e6c5fe20a689f858b5b2d4e6ecd015d24"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4OTA2NQ==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7902#discussion_r439589065", "createdAt": "2020-06-12T18:50:04Z", "author": {"login": "MHerbst"}, "path": "bundles/org.openhab.binding.homematic/src/main/java/org/openhab/binding/homematic/internal/communicator/client/XmlRpcClient.java", "diffHunk": "@@ -78,57 +84,64 @@ protected String getRpcCallbackUrl() {\n                 return new RpcResponseParser(request).parse(data);\n             } catch (UnknownRpcFailureException | UnknownParameterSetException ex) {\n                 throw ex;\n-            } catch (Exception ex) {\n+            } catch (SAXException | ParserConfigurationException ex) {\n+                throw new IOException(ex);\n+            } catch (IOException ex) {\n                 reason = ex;\n                 if (\"init\".equals(request.getMethodName())) { // no retries for \"init\" request\n                     break;\n                 }\n-                logger.debug(\"XmlRpcMessage failure, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n+                logger.debug(\"XmlRpcMessage failed, sending message again {}/{}\", rpcRetryCounter, MAX_RPC_RETRY);\n             }\n         }\n-        throw new IOException(reason.getMessage(), reason); // can't be null here because logic in for loop\n+        throw reason;\n     }\n \n-    private byte[] send(int port, RpcRequest<String> request) throws Exception {\n+    private byte[] send(int port, RpcRequest<String> request) throws IOException {\n         byte[] ret = new byte[0];\n-        BytesContentProvider content = new BytesContentProvider(request.createMessage().getBytes(config.getEncoding()));\n-        String url = String.format(\"http://%s:%s\", config.getGatewayAddress(), port);\n-        if (port == config.getGroupPort()) {\n-            url += \"/groups\";\n-        }\n-        Request req = httpClient.POST(url).content(content).timeout(config.getTimeout(), TimeUnit.SECONDS)\n-                .header(HttpHeader.CONTENT_TYPE, \"text/xml;charset=\" + config.getEncoding());\n         try {\n-            ret = req.send().getContent();\n-        } catch (IllegalArgumentException e) { // Returned buffer too large\n-            logger.info(\"Blocking XmlRpcRequest failed: {}, trying non-blocking request\", e.getMessage());\n-            InputStreamResponseListener respListener = new InputStreamResponseListener();\n-            req.send(respListener);\n-            Response resp = respListener.get(config.getTimeout(), TimeUnit.SECONDS);\n-            ByteArrayOutputStream respData = new ByteArrayOutputStream(RESP_BUFFER_SIZE);\n+            BytesContentProvider content = new BytesContentProvider(\n+                    request.createMessage().getBytes(config.getEncoding()));\n+            String url = String.format(\"http://%s:%s\", config.getGatewayAddress(), port);\n+            if (port == config.getGroupPort()) {\n+                url += \"/groups\";\n+            }\n+            Request req = httpClient.POST(url).content(content).timeout(config.getTimeout(), TimeUnit.SECONDS)\n+                    .header(HttpHeader.CONTENT_TYPE, \"text/xml;charset=\" + config.getEncoding());\n+            try {\n+                ret = req.send().getContent();\n+            } catch (IllegalArgumentException e) { // Returned buffer too large\n+                logger.info(\"Blocking XmlRpcRequest failed: {}, trying non-blocking request\", e.getMessage());\n+                InputStreamResponseListener respListener = new InputStreamResponseListener();\n+                req.send(respListener);\n+                Response resp = respListener.get(config.getTimeout(), TimeUnit.SECONDS);\n+                ByteArrayOutputStream respData = new ByteArrayOutputStream(RESP_BUFFER_SIZE);\n \n-            int httpStatus = resp.getStatus();\n-            if (httpStatus == HttpStatus.OK_200) {\n-                byte[] recvBuffer = new byte[RESP_BUFFER_SIZE];\n-                try (InputStream input = respListener.getInputStream()) {\n-                    while (true) {\n-                        int read = input.read(recvBuffer);\n-                        if (read == -1) {\n-                            break;\n+                int httpStatus = resp.getStatus();\n+                if (httpStatus == HttpStatus.OK_200) {\n+                    byte[] recvBuffer = new byte[RESP_BUFFER_SIZE];\n+                    try (InputStream input = respListener.getInputStream()) {\n+                        while (true) {\n+                            int read = input.read(recvBuffer);\n+                            if (read == -1) {\n+                                break;\n+                            }\n+                            respData.write(recvBuffer, 0, read);\n                         }\n-                        respData.write(recvBuffer, 0, read);\n+                        ret = respData.toByteArray();\n                     }\n-                    ret = respData.toByteArray();\n+                } else {\n+                    logger.warn(\"Non-blocking XmlRpcRequest failed, status code: {} / request: {}\", httpStatus,\n+                            request);\n+                    resp.abort(new Exception());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NTcyMw=="}, "originalCommit": {"oid": "713cf01e6c5fe20a689f858b5b2d4e6ecd015d24"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4776, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}