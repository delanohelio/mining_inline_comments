{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzM2NTQ0", "number": 7782, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMDoyNDo0NVrOD_fVfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMDoyNDo0NVrOD_fVfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTAwMjg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMDoyNDo0NVrOGaLd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowMDo0MFrOGalSYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEwNDA1MA==", "bodyText": "This needs to be formatted", "url": "https://github.com/openhab/openhab-addons/pull/7782#discussion_r430104050", "createdAt": "2020-05-26T00:24:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -174,6 +174,34 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n         return defaultValue;\n     }\n \n+    /**\n+     * return configuration attached to the root accessory, e.g. groupItem.\n+     * Note: result will be casted to the type of the default value.\n+     * The type for number is BigDecimal.\n+     * @param key configuration key\n+     * @param defaultValue default value\n+     * @param <T> expected type\n+     * @return configuration value\n+     */\n+    protected <T> T getAccessoryConfiguration(@NonNull String key, @NonNull T defaultValue) {\n+        return getItemConfiguration(accessory, key, defaultValue);\n+    }\n+\n+    /**\n+     * return configuration of the characteristic item, e.g. currentTemperature.\n+     * Note: result will be casted to the type of the default value.\n+     * The type for number is BigDecimal.\n+     * @param characteristicType characteristic type\n+     * @param key configuration key\n+     * @param defaultValue default value\n+     * @param <T> expected type\n+     * @return configuration value\n+     */\n+    protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType, @NonNull String key, @NonNull T defaultValue) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n+        return characteristic.isPresent()?getItemConfiguration(characteristic.get(), key,defaultValue):defaultValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6502023836f2a37b2aab36a77c3b072f882d28f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNzA3NA==", "bodyText": "not sure why i missed to run spotless.\nfixed. now it should be well formatted.", "url": "https://github.com/openhab/openhab-addons/pull/7782#discussion_r430527074", "createdAt": "2020-05-26T16:00:40Z", "author": {"login": "yfre"}, "path": "bundles/org.openhab.io.homekit/src/main/java/org/openhab/io/homekit/internal/accessories/AbstractHomekitAccessoryImpl.java", "diffHunk": "@@ -174,6 +174,34 @@ protected void unsubscribe(HomekitCharacteristicType characteristicType) {\n         return defaultValue;\n     }\n \n+    /**\n+     * return configuration attached to the root accessory, e.g. groupItem.\n+     * Note: result will be casted to the type of the default value.\n+     * The type for number is BigDecimal.\n+     * @param key configuration key\n+     * @param defaultValue default value\n+     * @param <T> expected type\n+     * @return configuration value\n+     */\n+    protected <T> T getAccessoryConfiguration(@NonNull String key, @NonNull T defaultValue) {\n+        return getItemConfiguration(accessory, key, defaultValue);\n+    }\n+\n+    /**\n+     * return configuration of the characteristic item, e.g. currentTemperature.\n+     * Note: result will be casted to the type of the default value.\n+     * The type for number is BigDecimal.\n+     * @param characteristicType characteristic type\n+     * @param key configuration key\n+     * @param defaultValue default value\n+     * @param <T> expected type\n+     * @return configuration value\n+     */\n+    protected <T> T getAccessoryConfiguration(@NonNull HomekitCharacteristicType characteristicType, @NonNull String key, @NonNull T defaultValue) {\n+        final Optional<HomekitTaggedItem> characteristic = getCharacteristic(characteristicType);\n+        return characteristic.isPresent()?getItemConfiguration(characteristic.get(), key,defaultValue):defaultValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEwNDA1MA=="}, "originalCommit": {"oid": "b6502023836f2a37b2aab36a77c3b072f882d28f"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4922, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}