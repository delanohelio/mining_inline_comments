{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDE5Mjk2", "number": 8562, "title": "[warmup] Initial contribution", "bodyText": "This binding integrates the Warmup 4iE Thermostat https://www.warmup.co.uk/thermostats/smart/4ie-underfloor-heating, via the API at https://my.warmup.com/.\nI logged an issue for this at #7996. This PR was initially logged against 2.5.x in this PR #7998. All the comments in the PR have been addressed in this new PR for version 3.0.\nPer the readme, it currently supports a Bridge to the API, holding the API credentials, and Rooms, which report current temperature and setpoint, and allow setting of an override of the setpoint for a specified duration.\nI have tested this successfully on my own installation.", "createdAt": "2020-09-23T20:21:52Z", "url": "https://github.com/openhab/openhab-addons/pull/8562", "merged": true, "mergeCommit": {"oid": "db05079e6fd9d93c2757b480e65cd431e9d88de8"}, "closed": true, "closedAt": "2021-05-13T13:37:05Z", "author": {"login": "jamesmelville"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPQwhpgFqTUwMTYyOTYzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeWXxQCAFqTY1ODkwODkyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNjI5NjMw", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-501629630", "createdAt": "2020-10-04T14:39:50Z", "commit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNDozOTo1MFrOHcIBYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxNToxNDozN1rOHcIPHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzYwMQ==", "bodyText": "Please remove this file, as it will be generated by maven.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499253601", "createdAt": "2020-10-04T14:39:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/.classpath", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzY1Mw==", "bodyText": "Please remove this file, as it will be generated by maven.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499253653", "createdAt": "2020-10-04T14:40:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/.project", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1Mzc2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Credentials to my.warmup.com which allow the rest of the system to function\n          \n          \n            \n            Credentials to my.warmup.com which allow the rest of the system to function.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499253767", "createdAt": "2020-10-04T14:41:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/README.md", "diffHunk": "@@ -0,0 +1,107 @@\n+# Warmup Binding\n+\n+This binding integrates the Warmup 4iE Thermostat https://www.warmup.co.uk/thermostats/smart/4ie-underfloor-heating, via the API at https://my.warmup.com/.\n+\n+Any Warmup 4iE device(s) must be registered at https://my.warmup.com/ prior to usage.\n+\n+This API is not known to be documented publicly. \n+The binding api implementation has been derived from the implementations at https://github.com/alyc100/SmartThingsPublic/blob/master/devicetypes/alyc100/warmup-4ie.src/warmup-4ie.groovy and https://github.com/alex-0103/warmup4IE/blob/master/warmup4ie/warmup4ie.py, and enhanced by inspecting the GraphQL endpoint.\n+\n+## Supported Things\n+\n+### Bridge\n+\n+Credentials to my.warmup.com which allow the rest of the system to function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1MzkwMw==", "bodyText": "It's uncommon to include the unit in the parameter name.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | refreshIntervalSec | Integer | Interval in seconds between automatic refreshes | true     | 300     |\n          \n          \n            \n            | refreshInterval | Integer | Interval in seconds between automatic refreshes | true     | 300     |", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499253903", "createdAt": "2020-10-04T14:42:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/README.md", "diffHunk": "@@ -0,0 +1,107 @@\n+# Warmup Binding\n+\n+This binding integrates the Warmup 4iE Thermostat https://www.warmup.co.uk/thermostats/smart/4ie-underfloor-heating, via the API at https://my.warmup.com/.\n+\n+Any Warmup 4iE device(s) must be registered at https://my.warmup.com/ prior to usage.\n+\n+This API is not known to be documented publicly. \n+The binding api implementation has been derived from the implementations at https://github.com/alyc100/SmartThingsPublic/blob/master/devicetypes/alyc100/warmup-4ie.src/warmup-4ie.groovy and https://github.com/alex-0103/warmup4IE/blob/master/warmup4ie/warmup4ie.py, and enhanced by inspecting the GraphQL endpoint.\n+\n+## Supported Things\n+\n+### Bridge\n+\n+Credentials to my.warmup.com which allow the rest of the system to function\n+\n+### Room\n+\n+A room containing an individual Warmup 4iE device which is a WiFi connected device which controls a heating circuit. \n+The device is optimised for controlling underfloor heating (electric or hydronic), although it can also control central heating circuits.\n+The device reports the temperature from one of two thermostats, either a floor temperature probe or the air temperature at the device.\n+The separate temperatures do not appear to be reported through the API. It appears to be possible to configure two devices in a primary / secondary configuration, but it is not clear how this might be represented by the API and hasn't been implemented.\n+\n+## Discovery\n+\n+Once credentials are successfully added to the bridge, any rooms (devices) detected will be added as things to the inbox.\n+\n+## Thing Configuration\n+\n+### My Warmup Account\n+\n+| name               | type    | description                                     | required | default |\n+|--------------------|---------|-------------------------------------------------|----------|---------|\n+| username           | String  | Username for my.warmup.com                      | true     |         |\n+| password           | String  | Password for my.warmup.com                      | true     |         |\n+| refreshIntervalSec | Integer | Interval in seconds between automatic refreshes | true     | 300     |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDAxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | name                | type    | description                                             | required | default |\n          \n          \n            \n            | config parameter | type    | description                                             | required | default |", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499254017", "createdAt": "2020-10-04T14:43:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/README.md", "diffHunk": "@@ -0,0 +1,107 @@\n+# Warmup Binding\n+\n+This binding integrates the Warmup 4iE Thermostat https://www.warmup.co.uk/thermostats/smart/4ie-underfloor-heating, via the API at https://my.warmup.com/.\n+\n+Any Warmup 4iE device(s) must be registered at https://my.warmup.com/ prior to usage.\n+\n+This API is not known to be documented publicly. \n+The binding api implementation has been derived from the implementations at https://github.com/alyc100/SmartThingsPublic/blob/master/devicetypes/alyc100/warmup-4ie.src/warmup-4ie.groovy and https://github.com/alex-0103/warmup4IE/blob/master/warmup4ie/warmup4ie.py, and enhanced by inspecting the GraphQL endpoint.\n+\n+## Supported Things\n+\n+### Bridge\n+\n+Credentials to my.warmup.com which allow the rest of the system to function\n+\n+### Room\n+\n+A room containing an individual Warmup 4iE device which is a WiFi connected device which controls a heating circuit. \n+The device is optimised for controlling underfloor heating (electric or hydronic), although it can also control central heating circuits.\n+The device reports the temperature from one of two thermostats, either a floor temperature probe or the air temperature at the device.\n+The separate temperatures do not appear to be reported through the API. It appears to be possible to configure two devices in a primary / secondary configuration, but it is not clear how this might be represented by the API and hasn't been implemented.\n+\n+## Discovery\n+\n+Once credentials are successfully added to the bridge, any rooms (devices) detected will be added as things to the inbox.\n+\n+## Thing Configuration\n+\n+### My Warmup Account\n+\n+| name               | type    | description                                     | required | default |\n+|--------------------|---------|-------------------------------------------------|----------|---------|\n+| username           | String  | Username for my.warmup.com                      | true     |         |\n+| password           | String  | Password for my.warmup.com                      | true     |         |\n+| refreshIntervalSec | Integer | Interval in seconds between automatic refreshes | true     | 300     |\n+\n+### Room\n+\n+Rooms are configured automatically with a Serial Number on discovery, or can be added manually using the \"Device Number\" from the device, excluding the last 3 characters. The only supported temperature change is an override, through a default duration configured on the thing. This defaults to 60 minutes.\n+\n+| name                | type    | description                                             | required | default |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | overrideDurationMin | Integer | Duration of override when target temperature is changed | true     | 60      |\n          \n          \n            \n            | overrideDuration | Integer | Duration of override when target temperature is changed in minutes | true     | 60      |", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499254043", "createdAt": "2020-10-04T14:44:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/README.md", "diffHunk": "@@ -0,0 +1,107 @@\n+# Warmup Binding\n+\n+This binding integrates the Warmup 4iE Thermostat https://www.warmup.co.uk/thermostats/smart/4ie-underfloor-heating, via the API at https://my.warmup.com/.\n+\n+Any Warmup 4iE device(s) must be registered at https://my.warmup.com/ prior to usage.\n+\n+This API is not known to be documented publicly. \n+The binding api implementation has been derived from the implementations at https://github.com/alyc100/SmartThingsPublic/blob/master/devicetypes/alyc100/warmup-4ie.src/warmup-4ie.groovy and https://github.com/alex-0103/warmup4IE/blob/master/warmup4ie/warmup4ie.py, and enhanced by inspecting the GraphQL endpoint.\n+\n+## Supported Things\n+\n+### Bridge\n+\n+Credentials to my.warmup.com which allow the rest of the system to function\n+\n+### Room\n+\n+A room containing an individual Warmup 4iE device which is a WiFi connected device which controls a heating circuit. \n+The device is optimised for controlling underfloor heating (electric or hydronic), although it can also control central heating circuits.\n+The device reports the temperature from one of two thermostats, either a floor temperature probe or the air temperature at the device.\n+The separate temperatures do not appear to be reported through the API. It appears to be possible to configure two devices in a primary / secondary configuration, but it is not clear how this might be represented by the API and hasn't been implemented.\n+\n+## Discovery\n+\n+Once credentials are successfully added to the bridge, any rooms (devices) detected will be added as things to the inbox.\n+\n+## Thing Configuration\n+\n+### My Warmup Account\n+\n+| name               | type    | description                                     | required | default |\n+|--------------------|---------|-------------------------------------------------|----------|---------|\n+| username           | String  | Username for my.warmup.com                      | true     |         |\n+| password           | String  | Password for my.warmup.com                      | true     |         |\n+| refreshIntervalSec | Integer | Interval in seconds between automatic refreshes | true     | 300     |\n+\n+### Room\n+\n+Rooms are configured automatically with a Serial Number on discovery, or can be added manually using the \"Device Number\" from the device, excluding the last 3 characters. The only supported temperature change is an override, through a default duration configured on the thing. This defaults to 60 minutes.\n+\n+| name                | type    | description                                             | required | default |\n+|---------------------|---------|---------------------------------------------------------|----------|---------|\n+| serialNumber        | String  | Device Serial Number, excluding last 3 characters       | true     |         |\n+| overrideDurationMin | Integer | Duration of override when target temperature is changed | true     | 60      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDM2OQ==", "bodyText": "Primitive types should be used where possible. Same for below.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Boolean validateSession() throws MyWarmupApiException {\n          \n          \n            \n                private boolean validateSession() throws MyWarmupApiException {", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499254369", "createdAt": "2020-10-04T14:47:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.warmup.internal.WarmupBindingConstants;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupConfigurationDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthRequestDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyWarmupApi} class contains code specific to calling the My Warmup API.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupApi {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyWarmupApi.class);\n+    private final HttpClient httpClient;\n+\n+    private MyWarmupConfigurationDTO configuration;\n+    private @Nullable String authToken;\n+    private int failCount = 0;\n+\n+    /**\n+     * Construct the API client\n+     *\n+     * @param httpClient HttpClient to make HTTP Calls\n+     * @param configuration Thing configuration which contains API credentials\n+     */\n+    public MyWarmupApi(final HttpClient httpClient, MyWarmupConfigurationDTO configuration) {\n+        this.httpClient = httpClient;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Update the configuration, trigger a refresh of the access token\n+     *\n+     * @param configuration contains username and password\n+     */\n+    public void setConfiguration(MyWarmupConfigurationDTO configuration) {\n+        authToken = null;\n+        this.configuration = configuration;\n+    }\n+\n+    private Boolean validateSession() throws MyWarmupApiException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NDYwMg==", "bodyText": "It's good practice to log the exception where it is cought to avoid redundant logging. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499254602", "createdAt": "2020-10-04T14:49:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/api/MyWarmupApi.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.api;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.openhab.binding.warmup.internal.WarmupBindingConstants;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupConfigurationDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthRequestDTO;\n+import org.openhab.binding.warmup.internal.model.auth.AuthResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyWarmupApi} class contains code specific to calling the My Warmup API.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupApi {\n+\n+    private static final Gson GSON = new Gson();\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyWarmupApi.class);\n+    private final HttpClient httpClient;\n+\n+    private MyWarmupConfigurationDTO configuration;\n+    private @Nullable String authToken;\n+    private int failCount = 0;\n+\n+    /**\n+     * Construct the API client\n+     *\n+     * @param httpClient HttpClient to make HTTP Calls\n+     * @param configuration Thing configuration which contains API credentials\n+     */\n+    public MyWarmupApi(final HttpClient httpClient, MyWarmupConfigurationDTO configuration) {\n+        this.httpClient = httpClient;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * Update the configuration, trigger a refresh of the access token\n+     *\n+     * @param configuration contains username and password\n+     */\n+    public void setConfiguration(MyWarmupConfigurationDTO configuration) {\n+        authToken = null;\n+        this.configuration = configuration;\n+    }\n+\n+    private Boolean validateSession() throws MyWarmupApiException {\n+        if (authToken == null) {\n+            return authenticate();\n+        }\n+        return true;\n+    }\n+\n+    private Boolean authenticate() throws MyWarmupApiException {\n+        try {\n+            String body = GSON.toJson(new AuthRequestDTO(configuration.username, configuration.password,\n+                    WarmupBindingConstants.AUTH_METHOD, WarmupBindingConstants.AUTH_APP_ID));\n+\n+            ContentResponse response = callWarmup(WarmupBindingConstants.APP_ENDPOINT, body, false);\n+\n+            AuthResponseDTO ar = GSON.fromJson(response.getContentAsString(), AuthResponseDTO.class);\n+\n+            if (ar.getStatus().getResult().equals(\"success\")) {\n+                authToken = ar.getResponse().getToken();\n+                failCount = 0;\n+                return true;\n+            } else {\n+                logger.debug(\"Authentication failure {}\", response.getContentAsString());\n+                throw new MyWarmupApiException(\"Authentication Failed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTM4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            roomProperties.put(\"serialNumber\", deviceSN);\n          \n          \n            \n                            roomProperties.put(Thing.PROPERTY_SERIAL_NUMBER, deviceSN);", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499255380", "createdAt": "2020-10-04T14:57:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        final MyWarmupAccountHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            removeOlderResults(getTimestampOfLastScan());\n+            handler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate discovery list with things\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain != null) {\n+            HashSet<ThingUID> discoveredThings = new HashSet<ThingUID>();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    discoverRoom(location, room, discoveredThings);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void discoverRoom(LocationDTO location, RoomDTO room, HashSet<ThingUID> discoveredThings) {\n+        if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()) {\n+            final String deviceSN = room.getThermostat4ies().get(0).getDeviceSN();\n+            ThingUID localBridgeUID = this.bridgeUID;\n+            if (localBridgeUID != null && deviceSN != null) {\n+                final Map<String, Object> roomProperties = new HashMap<>();\n+                roomProperties.put(\"serialNumber\", deviceSN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    .withRepresentationProperty(\"serialNumber\").build());\n          \n          \n            \n                                    .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER,).build());", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499255402", "createdAt": "2020-10-04T14:57:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        final MyWarmupAccountHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            removeOlderResults(getTimestampOfLastScan());\n+            handler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate discovery list with things\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain != null) {\n+            HashSet<ThingUID> discoveredThings = new HashSet<ThingUID>();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    discoverRoom(location, room, discoveredThings);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void discoverRoom(LocationDTO location, RoomDTO room, HashSet<ThingUID> discoveredThings) {\n+        if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()) {\n+            final String deviceSN = room.getThermostat4ies().get(0).getDeviceSN();\n+            ThingUID localBridgeUID = this.bridgeUID;\n+            if (localBridgeUID != null && deviceSN != null) {\n+                final Map<String, Object> roomProperties = new HashMap<>();\n+                roomProperties.put(\"serialNumber\", deviceSN);\n+                roomProperties.put(\"Serial Number\", deviceSN);\n+\n+                roomProperties.put(\"Id\", room.getId());\n+                roomProperties.put(\"Name\", room.getName());\n+                roomProperties.put(\"Location Id\", location.getId());\n+                roomProperties.put(\"Location\", location.getName());\n+\n+                ThingUID roomThingUID = new ThingUID(THING_TYPE_ROOM, localBridgeUID, deviceSN);\n+                thingDiscovered(DiscoveryResultBuilder.create(roomThingUID).withBridge(localBridgeUID)\n+                        .withProperties(roomProperties).withLabel(location.getName() + \" - \" + room.getName())\n+                        .withRepresentationProperty(\"serialNumber\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NTQ2NA==", "bodyText": "Is there a reason for adding the serial number twice with different property names?", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499255464", "createdAt": "2020-10-04T14:58:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        final MyWarmupAccountHandler handler = bridgeHandler;\n+        if (handler != null) {\n+            removeOlderResults(getTimestampOfLastScan());\n+            handler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate discovery list with things\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain != null) {\n+            HashSet<ThingUID> discoveredThings = new HashSet<ThingUID>();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    discoverRoom(location, room, discoveredThings);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void discoverRoom(LocationDTO location, RoomDTO room, HashSet<ThingUID> discoveredThings) {\n+        if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()) {\n+            final String deviceSN = room.getThermostat4ies().get(0).getDeviceSN();\n+            ThingUID localBridgeUID = this.bridgeUID;\n+            if (localBridgeUID != null && deviceSN != null) {\n+                final Map<String, Object> roomProperties = new HashMap<>();\n+                roomProperties.put(\"serialNumber\", deviceSN);\n+                roomProperties.put(\"Serial Number\", deviceSN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjI2MA==", "bodyText": "The configuration shouldn't be a DTO without NonNullByDefault annotation, as the fields can be null if the user uses textual configuration and forgets to specify a parameter.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256260", "createdAt": "2020-10-04T15:05:22Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupConfigurationDTO.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+/**\n+ * The {@link MyWarmupConfigurationDTO} class contains fields mapping thing configuration parameters for the MyWarmup.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+public class MyWarmupConfigurationDTO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjMwMQ==", "bodyText": "See above.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256301", "createdAt": "2020-10-04T15:05:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomConfigurationDTO.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+/**\n+ * The {@link RoomConfigurationDTO} class contains fields mapping thing configuration parameters for the Warmup Room.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+public class RoomConfigurationDTO {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjQ3Nw==", "bodyText": "As you use these properties in the discovery and below too, you could make the names constants.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256477", "createdAt": "2020-10-04T15:07:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        super.refreshFromServer();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(\"Id\", room.getId());\n+                            updateProperty(\"Serial Number\", serialNumber);\n+                            updateProperty(\"Name\", room.getName());\n+                            updateProperty(\"Location Id\", location.getId());\n+                            updateProperty(\"Location\", location.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NjkzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t<description>This is the binding for a Warmup 4iE Thermostat normally used for controlling underfloor heating.</description>\n          \n          \n            \n            \t<description>This is the binding for a Warmup 4iE Thermostat primarily used for controlling underfloor heating.</description>", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499256937", "createdAt": "2020-10-04T15:12:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"warmup\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Warmup Binding</name>\n+\t<description>This is the binding for a Warmup 4iE Thermostat normally used for controlling underfloor heating.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI1NzExOA==", "bodyText": "The label should be concise. You could mention the unit in the description.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r499257118", "createdAt": "2020-10-04T15:14:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"warmup\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<bridge-type id=\"my-warmup\">\n+\t\t<label>My Warmup Account</label>\n+\t\t<description>Connection to the https://my.warmup.com site</description>\n+\t\t<category>WebService</category>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"username\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>email</context>\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>Username for my.warmup.com</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<context>password</context>\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Password for my.warmup.com</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshIntervalSec\" type=\"integer\" unit=\"s\" required=\"true\" min=\"10\">\n+\t\t\t\t<label>Refresh Interval (Seconds)</label>\n+\t\t\t\t<description>Interval in seconds between automatic refreshes</description>\n+\t\t\t\t<default>300</default>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"room\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"my-warmup\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Room</label>\n+\t\t<description>Warmup 4iE Device controlling a room</description>\n+\t\t<category>RadiatorControl</category>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"currentTemperature\" typeId=\"currentTemperature\"/>\n+\t\t\t<channel id=\"targetTemperature\" typeId=\"targetTemperature\"/>\n+\t\t\t<channel id=\"overrideRemaining\" typeId=\"overrideRemaining\"/>\n+\t\t\t<channel id=\"runMode\" typeId=\"runMode\"/>\n+\t\t\t<channel id=\"frostProtectionMode\" typeId=\"frostProtectionMode\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>serialNumber</representation-property>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"serialNumber\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Serial Number</label>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"overrideDurationMin\" type=\"integer\" unit=\"m\" required=\"true\">\n+\t\t\t\t<label>Override Duration (Minutes)</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7163bf7c829d89466ced72169007cc567168c81f", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/7163bf7c829d89466ced72169007cc567168c81f", "committedDate": "2020-09-23T20:19:46Z", "message": "Mark Thermostat device as offline if not recently polled\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}, "afterCommit": {"oid": "d82e29fd9167300142d0007787bf02242b4d90b0", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/d82e29fd9167300142d0007787bf02242b4d90b0", "committedDate": "2020-12-01T20:01:28Z", "message": "Updates from review comments\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njk5MDYx", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-544699061", "createdAt": "2020-12-04T07:00:25Z", "commit": {"oid": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzowMDoyNVrOH_Daqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoxNDo1OFrOH_DxSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg3ODMxNA==", "bodyText": "Can you mention the Thing Type IDs here?", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535878314", "createdAt": "2020-12-04T07:00:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/README.md", "diffHunk": "@@ -0,0 +1,107 @@\n+# Warmup Binding\n+\n+This binding integrates the Warmup 4iE Thermostat https://www.warmup.co.uk/thermostats/smart/4ie-underfloor-heating, via the API at https://my.warmup.com/.\n+\n+Any Warmup 4iE device(s) must be registered at https://my.warmup.com/ prior to usage.\n+\n+This API is not known to be documented publicly. \n+The binding api implementation has been derived from the implementations at https://github.com/alyc100/SmartThingsPublic/blob/master/devicetypes/alyc100/warmup-4ie.src/warmup-4ie.groovy and https://github.com/alex-0103/warmup4IE/blob/master/warmup4ie/warmup4ie.py, and enhanced by inspecting the GraphQL endpoint.\n+\n+## Supported Things\n+\n+### Bridge\n+\n+Credentials to my.warmup.com which allow the rest of the system to function.\n+\n+### Room\n+\n+A room containing an individual Warmup 4iE device which is a WiFi connected device which controls a heating circuit. \n+The device is optimised for controlling underfloor heating (electric or hydronic), although it can also control central heating circuits.\n+The device reports the temperature from one of two thermostats, either a floor temperature probe or the air temperature at the device.\n+The separate temperatures do not appear to be reported through the API. It appears to be possible to configure two devices in a primary / secondary configuration, but it is not clear how this might be represented by the API and hasn't been implemented.\n+\n+## Discovery\n+\n+Once credentials are successfully added to the bridge, any rooms (devices) detected will be added as things to the inbox.\n+\n+## Thing Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MTE5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n          \n          \n            \n                        .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_ROOM)));\n          \n          \n            \n                public static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections\n          \n          \n            \n                        .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_ROOM)));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_BRIDGE, THING_TYPE_ROOM);\n          \n          \n            \n                public static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(THING_TYPE_ROOM);", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535881198", "createdAt": "2020-12-04T07:07:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link WarmupBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupBindingConstants {\n+\n+    private static final String BINDING_ID = \"warmup\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"my-warmup\");\n+    public static final ThingTypeUID THING_TYPE_ROOM = new ThingTypeUID(BINDING_ID, \"room\");\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_BRIDGE, THING_TYPE_ROOM)));\n+    public static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections\n+            .unmodifiableSet(new HashSet<>(Arrays.asList(THING_TYPE_ROOM)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4MjExNA==", "bodyText": "Can these be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535882114", "createdAt": "2020-12-04T07:10:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/discovery/WarmupDiscoveryService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.discovery;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.handler.MyWarmupAccountHandler;\n+import org.openhab.binding.warmup.internal.handler.WarmupRefreshListener;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+\n+/**\n+ * The {@link WarmupDiscoveryService} is used to discover devices that are connected to a My Warmup account.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService, WarmupRefreshListener {\n+\n+    private @Nullable MyWarmupAccountHandler bridgeHandler;\n+    private @Nullable ThingUID bridgeUID;\n+\n+    public WarmupDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, 5, false);\n+    }\n+\n+    @Override\n+    public void activate() {\n+        super.activate(null);\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        super.deactivate();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4NDEwNw==", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails. Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r535884107", "createdAt": "2020-12-04T07:14:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(PROPERTY_ROOM_ID, room.getId());\n+                            updateProperty(PROPERTY_ROOM_NAME, room.getName());\n+                            updateProperty(PROPERTY_LOCATION_ID, location.getId());\n+                            updateProperty(PROPERTY_LOCATION_NAME, location.getName());\n+\n+                            updateState(CHANNEL_CURRENT_TEMPERATURE, parseTemperature(room.getCurrentTemperature()));\n+                            updateState(CHANNEL_TARGET_TEMPERATURE, parseTemperature(room.getTargetTemperature()));\n+                            updateState(CHANNEL_OVERRIDE_DURATION, parseDuration(room.getOverrideDuration()));\n+                            updateState(CHANNEL_RUN_MODE, parseString(room.getRunMode()));\n+                            updateState(CHANNEL_FROST_PROTECTION_MODE,\n+                                    OnOffType.from(room.getRunMode().equals(FROST_PROTECTION_MODE)));\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not found\");\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not configured\");\n+        }\n+    }\n+\n+    private void setOverride(final QuantityType<?> command) {\n+        String roomId = getThing().getProperties().get(PROPERTY_ROOM_ID);\n+        String locationId = getThing().getProperties().get(PROPERTY_LOCATION_ID);\n+\n+        QuantityType<?> temp = command.toUnit(SIUnits.CELSIUS);\n+\n+        if (temp != null) {\n+            final int value = temp.multiply(new BigDecimal(10)).intValue();\n+\n+            try {\n+                final MyWarmupAccountHandler localBridgeHandler = bridgeHandler;\n+                if (localBridgeHandler != null && config != null) {\n+                    final int overrideDuration = config.getOverrideDuration();\n+                    if (overrideDuration > 0 && locationId != null && roomId != null) {\n+                        localBridgeHandler.getApi().setOverride(locationId, roomId, value, overrideDuration);\n+                        refreshFromServer();\n+                    }\n+                }\n+            } catch (MyWarmupApiException e) {\n+                logger.debug(\"Set Override failed: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfe710e9a2b26a45ef4a4e767238175c8b6c2ad"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTMzNzA5", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-550933709", "createdAt": "2020-12-13T15:53:53Z", "commit": {"oid": "0af633139cb97ab21091cd2d0819eebb839c0bb0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNTo1Mzo1M1rOIE2G7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNjoxMjowNFrOIE2TiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk1MTcyNg==", "bodyText": "The author tag is deprecated and should therefore be removed. See openhab/openhab-core#1844.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r541951726", "createdAt": "2020-12-13T15:53:53Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"warmup\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Warmup Binding</name>\n+\t<description>This is the binding for a Warmup 4iE Thermostat primarily used for controlling underfloor heating.</description>\n+\t<author>James Melville</author>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af633139cb97ab21091cd2d0819eebb839c0bb0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk1NDk1Mw==", "bodyText": "It seems a bit unreasonable to log the stack trace when the network fails. You could also include the exception's message in the ThingStatusDetailMessage.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r541954953", "createdAt": "2020-12-13T16:12:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApi;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.discovery.WarmupDiscoveryService;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupAccountHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyWarmupAccountHandler.class);\n+    private final MyWarmupApi api;\n+\n+    private @Nullable QueryResponseDTO queryResponse = null;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable WarmupDiscoveryService discoveryService;\n+\n+    public MyWarmupAccountHandler(Bridge thing, final HttpClient httpClient) {\n+        super(thing);\n+        api = new MyWarmupApi(httpClient, getConfigAs(MyWarmupConfigurationDTO.class));\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyWarmupConfigurationDTO config = getConfigAs(MyWarmupConfigurationDTO.class);\n+        if (config.username.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Username not configured\");\n+        } else if (config.password.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not configured\");\n+        } else if (config.refreshInterval >= 10) {\n+            api.setConfiguration(config);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshFromServer, 0, config.refreshInterval,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Refresh interval misconfigured (minimum 10s)\");\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(WarmupDiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefresh();\n+    }\n+\n+    public void cancelRefresh() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    public synchronized void refreshFromServer() {\n+        try {\n+            queryResponse = api.getStatus();\n+        } catch (MyWarmupApiException e) {\n+            queryResponse = null;\n+            logger.debug(\"{}\", e.getMessage(), e);\n+        } finally {\n+            if (queryResponse != null) {\n+                updateStatus(ThingStatus.ONLINE);\n+            } else {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Unable to contact MyWarmup\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af633139cb97ab21091cd2d0819eebb839c0bb0"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTEwODc0", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-555510874", "createdAt": "2020-12-18T14:06:35Z", "commit": {"oid": "2ce09701cdaad70edc394f99b6820a448152dcd4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowNjozNVrOIIkJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDowNjozNVrOIIkJaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1MTc1Mw==", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r545851753", "createdAt": "2020-12-18T14:06:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java", "diffHunk": "@@ -95,15 +95,12 @@ public void cancelRefresh() {\n     public synchronized void refreshFromServer() {\n         try {\n             queryResponse = api.getStatus();\n+            updateStatus(ThingStatus.ONLINE);\n         } catch (MyWarmupApiException e) {\n             queryResponse = null;\n-            logger.debug(\"{}\", e.getMessage(), e);\n+            logger.debug(\"{}\", e.getMessage());\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce09701cdaad70edc394f99b6820a448152dcd4"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1ODI2NzU5", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-555826759", "createdAt": "2020-12-18T21:33:28Z", "commit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3ODA3Nzcx", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-567807771", "createdAt": "2021-01-14T02:27:29Z", "commit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjoyNzozMFrOITM0Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwMjozMjozNlrOITM5zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwMzgxOQ==", "bodyText": "Why is this in a finally clause? Please remove the finally clause if possible.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557003819", "createdAt": "2021-01-14T02:27:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/MyWarmupAccountHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApi;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.discovery.WarmupDiscoveryService;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandlerService;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyWarmupAccountHandler extends BaseBridgeHandler {\n+\n+    private final MyWarmupApi api;\n+\n+    private @Nullable QueryResponseDTO queryResponse = null;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @Nullable WarmupDiscoveryService discoveryService;\n+\n+    public MyWarmupAccountHandler(Bridge thing, final HttpClient httpClient) {\n+        super(thing);\n+        api = new MyWarmupApi(httpClient, getConfigAs(MyWarmupConfigurationDTO.class));\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyWarmupConfigurationDTO config = getConfigAs(MyWarmupConfigurationDTO.class);\n+        if (config.username.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Username not configured\");\n+        } else if (config.password.length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Password not configured\");\n+        } else if (config.refreshInterval >= 10) {\n+            api.setConfiguration(config);\n+            refreshJob = scheduler.scheduleWithFixedDelay(this::refreshFromServer, 0, config.refreshInterval,\n+                    TimeUnit.SECONDS);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Refresh interval misconfigured (minimum 10s)\");\n+        }\n+    }\n+\n+    @Override\n+    public Collection<Class<? extends ThingHandlerService>> getServices() {\n+        return Collections.singleton(WarmupDiscoveryService.class);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        cancelRefresh();\n+    }\n+\n+    public void cancelRefresh() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;\n+        }\n+    }\n+\n+    public synchronized void refreshFromServer() {\n+        try {\n+            queryResponse = api.getStatus();\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyWarmupApiException e) {\n+            queryResponse = null;\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\n+        } finally {\n+            refreshFromCache();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNDY0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final int value = temp.multiply(new BigDecimal(10)).intValue();\n          \n          \n            \n                        final int value = temp.multiply(BigDecimal.TEN).intValue();", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557004645", "createdAt": "2021-01-14T02:30:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(PROPERTY_ROOM_ID, room.getId());\n+                            updateProperty(PROPERTY_ROOM_NAME, room.getName());\n+                            updateProperty(PROPERTY_LOCATION_ID, location.getId());\n+                            updateProperty(PROPERTY_LOCATION_NAME, location.getName());\n+\n+                            updateState(CHANNEL_CURRENT_TEMPERATURE, parseTemperature(room.getCurrentTemperature()));\n+                            updateState(CHANNEL_TARGET_TEMPERATURE, parseTemperature(room.getTargetTemperature()));\n+                            updateState(CHANNEL_OVERRIDE_DURATION, parseDuration(room.getOverrideDuration()));\n+                            updateState(CHANNEL_RUN_MODE, parseString(room.getRunMode()));\n+                            updateState(CHANNEL_FROST_PROTECTION_MODE,\n+                                    OnOffType.from(room.getRunMode().equals(FROST_PROTECTION_MODE)));\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not found\");\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not configured\");\n+        }\n+    }\n+\n+    private void setOverride(final QuantityType<?> command) {\n+        String roomId = getThing().getProperties().get(PROPERTY_ROOM_ID);\n+        String locationId = getThing().getProperties().get(PROPERTY_LOCATION_ID);\n+\n+        QuantityType<?> temp = command.toUnit(SIUnits.CELSIUS);\n+\n+        if (temp != null) {\n+            final int value = temp.multiply(new BigDecimal(10)).intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNDk4Mw==", "bodyText": "Thing properties should not have spaces in them. Please make the properties name camelcase if possible.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557004983", "createdAt": "2021-01-14T02:31:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/RoomHandler.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import static org.openhab.binding.warmup.internal.WarmupBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.warmup.internal.api.MyWarmupApiException;\n+import org.openhab.binding.warmup.internal.model.query.LocationDTO;\n+import org.openhab.binding.warmup.internal.model.query.QueryResponseDTO;\n+import org.openhab.binding.warmup.internal.model.query.RoomDTO;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class RoomHandler extends WarmupThingHandler implements WarmupRefreshListener {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RoomHandler.class);\n+    private @Nullable RoomConfigurationDTO config;\n+\n+    public RoomHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        config = getConfigAs(RoomConfigurationDTO.class);\n+        if (config.getSerialNumber().length() == 0) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial Number not configured\");\n+        } else {\n+            super.refreshFromServer();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+        if (CHANNEL_TARGET_TEMPERATURE.equals(channelUID.getId()) && command instanceof QuantityType<?>) {\n+            setOverride((QuantityType<?>) command);\n+        }\n+        if (CHANNEL_FROST_PROTECTION_MODE.equals(channelUID.getId()) && command instanceof OnOffType) {\n+            toggleFrostProtectionMode((OnOffType) command);\n+        }\n+    }\n+\n+    /**\n+     * Process device list and populate room properties, status and state\n+     *\n+     * @param domain Data model representing all devices\n+     */\n+    @Override\n+    public void refresh(@Nullable QueryResponseDTO domain) {\n+        if (domain == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"No data from bridge\");\n+        } else if (config != null) {\n+            final String serialNumber = config.getSerialNumber();\n+            for (LocationDTO location : domain.getData().getUser().getLocations()) {\n+                for (RoomDTO room : location.getRooms()) {\n+                    if (room.getThermostat4ies() != null && !room.getThermostat4ies().isEmpty()\n+                            && room.getThermostat4ies().get(0).getDeviceSN().equals(serialNumber)) {\n+                        if (room.getThermostat4ies().get(0).getLastPoll() > 10) {\n+                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                    \"Thermostat has not polled for 10 minutes\");\n+                        } else {\n+                            updateStatus(ThingStatus.ONLINE);\n+\n+                            updateProperty(PROPERTY_ROOM_ID, room.getId());\n+                            updateProperty(PROPERTY_ROOM_NAME, room.getName());\n+                            updateProperty(PROPERTY_LOCATION_ID, location.getId());\n+                            updateProperty(PROPERTY_LOCATION_NAME, location.getName());\n+\n+                            updateState(CHANNEL_CURRENT_TEMPERATURE, parseTemperature(room.getCurrentTemperature()));\n+                            updateState(CHANNEL_TARGET_TEMPERATURE, parseTemperature(room.getTargetTemperature()));\n+                            updateState(CHANNEL_OVERRIDE_DURATION, parseDuration(room.getOverrideDuration()));\n+                            updateState(CHANNEL_RUN_MODE, parseString(room.getRunMode()));\n+                            updateState(CHANNEL_FROST_PROTECTION_MODE,\n+                                    OnOffType.from(room.getRunMode().equals(FROST_PROTECTION_MODE)));\n+                        }\n+                        return;\n+                    }\n+                }\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not found\");\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Room not configured\");\n+        }\n+    }\n+\n+    private void setOverride(final QuantityType<?> command) {\n+        String roomId = getThing().getProperties().get(PROPERTY_ROOM_ID);\n+        String locationId = getThing().getProperties().get(PROPERTY_LOCATION_ID);\n+\n+        QuantityType<?> temp = command.toUnit(SIUnits.CELSIUS);\n+\n+        if (temp != null) {\n+            final int value = temp.multiply(new BigDecimal(10)).intValue();\n+\n+            try {\n+                final MyWarmupAccountHandler localBridgeHandler = bridgeHandler;\n+                if (localBridgeHandler != null && config != null) {\n+                    final int overrideDuration = config.getOverrideDuration();\n+                    if (overrideDuration > 0 && locationId != null && roomId != null) {\n+                        localBridgeHandler.getApi().setOverride(locationId, roomId, value, overrideDuration);\n+                        refreshFromServer();\n+                    }\n+                }\n+            } catch (MyWarmupApiException e) {\n+                logger.debug(\"Set Override failed: {}\", e.getMessage());\n+            }\n+        }\n+    }\n+\n+    private void toggleFrostProtectionMode(OnOffType command) {\n+        String roomId = getThing().getProperties().get(\"Id\");\n+        String locationId = getThing().getProperties().get(\"Location Id\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzAwNTI2Mw==", "bodyText": "The bridge handler instance may change over the lifecycle of the thing handler. I suggest retrieving the bridge handler instance on demand instead of trying to cache it.", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r557005263", "createdAt": "2021-01-14T02:32:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/handler/WarmupThingHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.warmup.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.openhab.core.types.UnDefType;\n+\n+/**\n+ * The {@link WarmupThingHandler} is a super class for Things related to the Bridge consolidating logic.\n+ *\n+ * @author James Melville - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WarmupThingHandler extends BaseThingHandler {\n+\n+    protected @Nullable MyWarmupAccountHandler bridgeHandler;\n+\n+    public WarmupThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        Bridge bridge = getBridge();\n+        if (bridge != null) {\n+            bridgeHandler = (MyWarmupAccountHandler) bridge.getHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzNzU5MjUy", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-583759252", "createdAt": "2021-02-04T19:52:23Z", "commit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxOTo1MjoyM1rOIgEriA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMDowOTo1M1rOIgFT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUwMjAyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>3.0.0-SNAPSHOT</version>\n          \n          \n            \n                <version>3.1.0-SNAPSHOT</version>", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r570502024", "createdAt": "2021-02-04T19:52:23Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.warmup/pom.xml", "diffHunk": "@@ -0,0 +1,17 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDUxMjM1Ng==", "bodyText": "The copyright year needs to be updated. You can use mvn license:format -pl :org.openhab.binding.warmup in the root. You need to rebase you binding to the current main to update (git pull --rebase) the configuration containing the new year before running this and than git push --force-with-lease update your remote branch,", "url": "https://github.com/openhab/openhab-addons/pull/8562#discussion_r570512356", "createdAt": "2021-02-04T20:09:53Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.warmup/src/main/java/org/openhab/binding/warmup/internal/WarmupBindingConstants.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87161847448925cb3b7a08d692400e1436afaaad", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/87161847448925cb3b7a08d692400e1436afaaad", "committedDate": "2021-05-10T20:17:39Z", "message": "[warmup] Initial Contribution for OpenHAB 3.0\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f45d0284b65f0c6a6e57af21c7b5139367535f4", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f45d0284b65f0c6a6e57af21c7b5139367535f4", "committedDate": "2021-05-10T20:18:15Z", "message": "Reformat readme\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc47d2c7d31dd1cfea5a0d88aaacf9b0176e98d", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/adc47d2c7d31dd1cfea5a0d88aaacf9b0176e98d", "committedDate": "2021-05-10T20:18:16Z", "message": "Refactor Discovery Service\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7be901ba98260cea680541c1fb6a289ad4f1f411", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/7be901ba98260cea680541c1fb6a289ad4f1f411", "committedDate": "2021-05-10T20:18:17Z", "message": "Initialise with unknown status\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecee861c4b964bfe58626c090540b43d9c4e481c", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/ecee861c4b964bfe58626c090540b43d9c4e481c", "committedDate": "2021-05-10T20:18:18Z", "message": "Remove supression of null warnings\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c89fadf84fa3ef8f9009b8b1e0e9b0b2b02eeab", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/7c89fadf84fa3ef8f9009b8b1e0e9b0b2b02eeab", "committedDate": "2021-05-10T20:18:19Z", "message": "Mark Thermostat device as offline if not recently polled\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3072aae217bc1ae459edef7c0a43012a370b677f", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/3072aae217bc1ae459edef7c0a43012a370b677f", "committedDate": "2021-05-10T20:18:20Z", "message": "Don't cancel refresh on failure.\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f90d2794408dad2dd1dfe236bf944a22b4950f", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/38f90d2794408dad2dd1dfe236bf944a22b4950f", "committedDate": "2021-05-10T20:19:21Z", "message": "Review updates\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2376bb016dbce8a64927649bfc71fdeb2accfb91", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/2376bb016dbce8a64927649bfc71fdeb2accfb91", "committedDate": "2021-05-10T20:19:46Z", "message": "Updates from review comments\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26af9b2b0c6f9c52db13127a2cba6cb932059cda", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/26af9b2b0c6f9c52db13127a2cba6cb932059cda", "committedDate": "2021-05-10T20:19:47Z", "message": "Remove extraneous property\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f234b43e7932b23e5ede8a980d1cd5c97f897724", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/f234b43e7932b23e5ede8a980d1cd5c97f897724", "committedDate": "2021-05-10T20:20:09Z", "message": "Remove unwanted file, update readme, tweak set initialisation\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3db26c9340b4f1fa2ff364f546a7ed64b5596d0", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/c3db26c9340b4f1fa2ff364f546a7ed64b5596d0", "committedDate": "2021-05-10T20:20:18Z", "message": "Remove stack trace logging\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d4b6a6f2fb19f3502bfcee3dcf4eb920b8ec25", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/e7d4b6a6f2fb19f3502bfcee3dcf4eb920b8ec25", "committedDate": "2021-05-10T20:20:19Z", "message": "Remove extraneous code\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3facf4ae080045cd111459e0b4e379ca697a2a", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/3c3facf4ae080045cd111459e0b4e379ca697a2a", "committedDate": "2021-05-10T20:20:20Z", "message": "missing crlf in readme\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47140372786943029a22b62d8261a486a656e2d4", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/47140372786943029a22b62d8261a486a656e2d4", "committedDate": "2021-05-10T20:20:21Z", "message": "Remove Binding Author, Rename Units class\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "371c4d2c3339faf7db8ab01d94c3c14ade1e7e27", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/371c4d2c3339faf7db8ab01d94c3c14ade1e7e27", "committedDate": "2021-05-10T20:20:22Z", "message": "Rejig error handling\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f656e64be1ad15c2be549f37776b40add4c8448", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/4f656e64be1ad15c2be549f37776b40add4c8448", "committedDate": "2021-05-10T20:20:23Z", "message": "Remove pointless logging\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adeb940a03f3280d8273075f4c7c1ea30a4e6f5b", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/adeb940a03f3280d8273075f4c7c1ea30a4e6f5b", "committedDate": "2021-05-10T20:51:50Z", "message": "Update POM & License headers\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb8f9f8724c3d742e4f1bb27e90435c885f43021", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/eb8f9f8724c3d742e4f1bb27e90435c885f43021", "committedDate": "2021-05-10T21:03:50Z", "message": "Review Comment tweaks\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "committedDate": "2021-05-10T21:29:23Z", "message": "Access bridge handler on demand\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17742513acf9dc0866a7f5bb33980fdbe47d6242", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/17742513acf9dc0866a7f5bb33980fdbe47d6242", "committedDate": "2020-12-18T21:30:43Z", "message": "Remove pointless logging\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}, "afterCommit": {"oid": "0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "author": {"user": {"login": "jamesmelville", "name": "James Melville"}}, "url": "https://github.com/openhab/openhab-addons/commit/0e544f094d9016ec6bd682d75427f9a2a1a6ac81", "committedDate": "2021-05-10T21:29:23Z", "message": "Access bridge handler on demand\n\nSigned-off-by: James Melville <jamesmelville@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU4OTA4OTI2", "url": "https://github.com/openhab/openhab-addons/pull/8562#pullrequestreview-658908926", "createdAt": "2021-05-13T13:36:20Z", "commit": {"oid": "0e544f094d9016ec6bd682d75427f9a2a1a6ac81"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4655, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}