{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzg4MTk4", "number": 7068, "reviewThreads": {"totalCount": 85, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMTo1MFrODlKw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0Mjo0OFrODmfL1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAwMjQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMTo1MFrOFx6DcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMTo1MFrOFx6DcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTY5Nw==", "bodyText": "Please use a new line for each sentence. This is automatically put on one line when the documentation is compiled.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387875697", "createdAt": "2020-03-04T19:11:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/). It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAwNTU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMjo1NlrOFx6Fhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMjo1NlrOFx6Fhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NjIzMQ==", "bodyText": "Please add a column for \"required yes/no\"", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387876231", "createdAt": "2020-03-04T19:12:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/). It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery. You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              |\n+|-----------|------------------------------------------------------------------------- |\n+| ip        | the ip-address of your go-eCharger |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAwOTAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMzo1OVrOFx6Hsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMzo1OVrOFx6Hsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Njc4Ng==", "bodyText": "Please make use of UoM (i.e. Number:Current), also applies to the other channels", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387876786", "createdAt": "2020-03-04T19:13:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,96 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/). It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery. You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              |\n+|-----------|------------------------------------------------------------------------- |\n+| ip        | the ip-address of your go-eCharger |\n+| refreshInterval  | Interval to read data (in seconds) |\n+\n+## Channels\n+\n+Currently available channels are \n+| Channel ID | Item Type    | Description              |\n+|------------|--------------|------------------------- |\n+| maxAmpere | Number | Max ampere allowed to use for charging |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAxNTM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNTo1OFrOFx6L8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNTo1OFrOFx6L8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Nzg3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerBindingConstants {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerBindingConstants {\n          \n      \n    \n    \n  \n\nplease also annotate the other classes", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387877872", "createdAt": "2020-03-04T19:15:58Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link GoEChargerBindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerBindingConstants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAxNzgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNjo0MFrOFx6Nkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNjo0MFrOFx6Nkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODI5MQ==", "bodyText": "No need to add that here. Add it in the configuration class.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878291", "createdAt": "2020-03-04T19:16:40Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerBindingConstants.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link GoEChargerBindingConstants} class defines common constants, which\n+ * are used across the whole binding.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerBindingConstants {\n+\n+    private static final String BINDING_ID = \"goecharger\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_GOE = new ThingTypeUID(BINDING_ID, \"goe\");\n+\n+    // List of all Channel ids\n+    public static final String MAX_AMPERE       = \"maxAmpere\";\n+    public static final String ACCESS_STATE       = \"accessState\";\n+    public static final String PWM_SIGNAL       = \"pwmSignal\";\n+    public static final String ERROR            = \"error\";\n+    public static final String VOLTAGE_L1       = \"voltageL1\";\n+    public static final String VOLTAGE_L2       = \"voltageL2\";\n+    public static final String VOLTAGE_L3       = \"voltageL3\";\n+    public static final String CURRENT_L1       = \"currentL1\";\n+    public static final String CURRENT_L2       = \"currentL2\";\n+    public static final String CURRENT_L3       = \"currentL3\";\n+    public static final String POWER_L1         = \"powerL1\";\n+    public static final String POWER_L2         = \"powerL2\";\n+    public static final String POWER_L3         = \"powerL3\";\n+    public static final String ALLOW_CHARGING   = \"allowCharging\";\n+    public static final String CABLE_ENCODING   = \"cableEncoding\";\n+    public static final String PHASES           = \"phases\";\n+    public static final String TEMPERATURE      = \"temperature\";\n+    public static final String SESSION_CHARGE_CONSUMPTION = \"sessionChargeConsumption\";\n+    public static final String SESSION_CHARGE_CONSUMPTION_LIMIT = \"sessionChargeConsumptionLimit\";\n+    public static final String TOTAL_CONSUMPTION = \"totalConsumption\";\n+    public static final String FIRMWARE         = \"firmware\";\n+\n+    // default values\n+    public static final int DEFAULT_REFRESH_INTERVAL = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAxODQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNjo1M1rOFx6OAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNjo1M1rOFx6OAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Integer refreshInterval;\n          \n          \n            \n                public Integer refreshInterval = 5;", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878400", "createdAt": "2020-03-04T19:16:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {\n+\n+    public String ip;\n+    public Integer refreshInterval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAyMDE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNzoyN1rOFx6PPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNzoyN1rOFx6PPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878716", "createdAt": "2020-03-04T19:17:27Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.binding.goecharger.internal.handler.GoEChargerHandler;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link GoEChargerHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.goecharger\", service = ThingHandlerFactory.class)\n+public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAyMTQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNzo0NlrOFx6P_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxNzo0NlrOFx6P_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3ODkxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class GoEChargerConfiguration {\n          \n          \n            \n            @NonNullByDefault\n          \n          \n            \n            public class GoEChargerConfiguration {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387878910", "createdAt": "2020-03-04T19:17:46Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzAyMjk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxODoxNFrOFx6Q_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxODoxNFrOFx6Q_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3OTE2Nw==", "bodyText": "Either provide a default or add @Nullable.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387879167", "createdAt": "2020-03-04T19:18:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerConfiguration {\n+\n+    public String ip;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA0MzEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyNDoyMlrOFx6eGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyNDoyMlrOFx6eGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4MjUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Object getValue(String channelId) {\n          \n          \n            \n                public State getValue(String channelId) {\n          \n      \n    \n    \n  \n\nThat makes it easier to use UoM", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387882520", "createdAt": "2020-03-04T19:24:22Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA1MzA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyNzoxNVrOFx6kUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyNzoxNVrOFx6kUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return goeResponse.getMaxChargeAmps();\n          \n          \n            \n                                return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmarthomeUnits.AMPERE);\n          \n      \n    \n    \n  \n\nI only added some examples. For additional information check https://www.openhab.org/docs/concepts/units-of-measurement.html", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387884112", "createdAt": "2020-03-04T19:27:15Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA2MDkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyOTozMVrOFx6pUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyOTozMVrOFx6pUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                return goeResponse.getTemperature();\n          \n          \n            \n                                return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387885393", "createdAt": "2020-03-04T19:29:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA3Nzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNDoxN1rOFx6z6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNDoxN1rOFx6z6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODEwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object value = getValue(channelId);\n          \n          \n            \n                    State value = getValue(channelId);\n          \n      \n    \n    \n  \n\nand remove the conversion below", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888104", "createdAt": "2020-03-04T19:34:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA3OTgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNDo1NFrOFx61KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNDo1NFrOFx61KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODQyNA==", "bodyText": "Not needed", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888424", "createdAt": "2020-03-04T19:34:54Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA4MjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNTozN1rOFx62qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNTozN1rOFx62qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODgxMQ==", "bodyText": "The framework makes sure that this is non-null if you set the paramater to required", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387888811", "createdAt": "2020-03-04T19:35:37Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzEyNjk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0ODo1NVrOFx7TYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0ODo1NVrOFx7TYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjE2MA==", "bodyText": "Please use our shared HttpClient \"jetty\". You get it in the HandlerFactory as injected service (see e.g. the darksky binding) and for usage \n  \n    \n      openhab-addons/bundles/org.openhab.binding.darksky/src/main/java/org/openhab/binding/darksky/internal/connection/DarkSkyConnection.java\n    \n    \n         Line 179\n      in\n      a99e209\n    \n    \n    \n    \n\n        \n          \n           ContentResponse contentResponse = httpClient.newRequest(url).method(GET).timeout(10, TimeUnit.SECONDS)", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387896160", "createdAt": "2020-03-04T19:48:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzEzMTQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MDoxOVrOFx7WXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MDoxOVrOFx7WXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NjkyNw==", "bodyText": "Please make this Runnable a method (e.g. private void refresh() {...}) and reference that below", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387896927", "createdAt": "2020-03-04T19:50:19Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 371}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzEzNDY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MToxNFrOFx7YYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MToxNFrOFx7YYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (Channel channel : getThing().getChannels()) {\n          \n          \n            \n                                    updateChannel(channel.getUID().getId());\n          \n          \n            \n                                }\n          \n          \n            \n                                getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897441", "createdAt": "2020-03-04T19:51:14Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 380}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzEzNjYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MTozOFrOFx7Zdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTo1MDozOFrOFx-6pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzcxOA==", "bodyText": "Please do not catch Exception. What exceptions do you expect here?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897718", "createdAt": "2020-03-04T19:51:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk1NTM2Ng==", "bodyText": "guess this was a leftover from copying it somewhere else", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387955366", "createdAt": "2020-03-04T21:50:38Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NzcxOA=="}, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzEzNzQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MTo0OVrOFx7Z8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MTo0OVrOFx7Z8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5Nzg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n          \n          \n            \n                                logger.warn(\"Exception occurred during execution: {}\", e.getMessage(), e);", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387897840", "createdAt": "2020-03-04T19:51:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 382}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzEzOTc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MjozMFrOFx7bbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1MjozMFrOFx7bbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODIyMQ==", "bodyText": "not needed if you set the default in the configuration class", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387898221", "createdAt": "2020-03-04T19:52:30Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 387}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE0MDkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1Mjo1MFrOFx7cHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1Mjo1MFrOFx7cHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5ODM5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n          \n          \n            \n                        refreshJob = scheduler.scheduleWithFixedDelay(this::refresh, 0, delay, TimeUnit.SECONDS);\n          \n      \n    \n    \n  \n\nafter you move the runnable to a method", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387898397", "createdAt": "2020-03-04T19:52:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE1ODIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1ODowN1rOFx7nGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1ODowN1rOFx7nGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTIwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> refreshJob = this.refreshJob;\n          \n          \n            \n                    if (refreshJob != null && !refreshJob.isCancelled()) {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901209", "createdAt": "2020-03-04T19:58:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the Go-E Charger handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 397}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE1ODg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1ODoxN1rOFx7nfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1ODoxN1rOFx7nfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        refreshJob = null;\n          \n          \n            \n                        this.refreshJob = null;", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901310", "createdAt": "2020-03-04T19:58:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,402 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.DEFAULT_REFRESH_INTERVAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+import java.net.HttpURLConnection;\n+import java.net.SocketTimeoutException;\n+import java.net.URL;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private GoEStatusResponse goeResponse;\n+\n+    private ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    public GoEChargerHandler(Thing thing) {\n+        super(thing);\n+        gson = new Gson();\n+    }\n+\n+    public Object getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return goeResponse.getMaxChargeAmps();\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return goeResponse.getPwmSignal();\n+                case ERROR:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            return \"NONE\";\n+                        case 1:\n+                            return \"RCCB\";\n+                        case 3:\n+                            return \"PHASE\";\n+                        case 8:\n+                            return \"NO_GROUND\";\n+                        default:\n+                            return \"INTERNAL\";\n+                    }\n+                case ACCESS_STATE:\n+                    // TODO use enum with getValue() instead?\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            return \"OPEN\";\n+                        case 1:\n+                            return \"RFID\";\n+                        case 2:\n+                            return \"AWATTAR\";\n+                        case 3:\n+                            return \"TIMER\";\n+                        default:\n+                            return \"UNKNOWN\";\n+                    }\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1;\n+                case CABLE_ENCODING:\n+                    return goeResponse.getCableEncoding();\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return count;\n+                case TEMPERATURE:\n+                    return goeResponse.getTemperature();\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return (Double) (goeResponse.getSessionChargeConsumption() / 360000d);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return (Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d);\n+                case TOTAL_CONSUMPTION:\n+                    return (Double) (goeResponse.getTotalChargeConsumption() / 10d);\n+                case FIRMWARE:\n+                    return goeResponse.getFirmware();\n+                case VOLTAGE_L1:\n+                    return goeResponse.getEnergy()[0];\n+                case VOLTAGE_L2:\n+                    return goeResponse.getEnergy()[1];\n+                case VOLTAGE_L3:\n+                    return goeResponse.getEnergy()[2];\n+                case CURRENT_L1:\n+                    return (Double) (goeResponse.getEnergy()[4] / 10d);\n+                case CURRENT_L2:\n+                    return (Double) (goeResponse.getEnergy()[5] / 10d);\n+                case CURRENT_L3:\n+                    return (Double) (goeResponse.getEnergy()[6] / 10d);\n+                case POWER_L1:\n+                    return (Double) (goeResponse.getEnergy()[7] / 10d);\n+                case POWER_L2:\n+                    return (Double) (goeResponse.getEnergy()[8] / 10d);\n+                case POWER_L3:\n+                    return (Double) (goeResponse.getEnergy()[9] / 10d);\n+                default:\n+                    return null;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        Object value = getValue(channelId);\n+        State state = null;\n+        if (value == null) {\n+            state = UnDefType.NULL;\n+        } else if (value instanceof Boolean) {\n+            state = (Boolean) value ? OnOffType.ON : OnOffType.OFF;\n+        } else if (value instanceof Double) {\n+            state = new DecimalType((Double) value);\n+        } else if (value instanceof Integer) {\n+            state = new DecimalType((Integer) value);\n+        } else if (value instanceof String) {\n+            state = new StringType((String) value);\n+        } else {\n+            logger.warn(\"Update channel {}: Unsupported value type {}\", channelId, value.getClass().getSimpleName());\n+        }\n+        // logger.debug(\"Update channel {} with state {} ({})\", channelId, (state ==\n+        // null) ? \"null\" : state.toString(),\n+        // value.getClass().getSimpleName());\n+\n+        // Update the channel\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = command.toString();\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = (int) (Double.parseDouble(command.toString()) * 10) + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command.toString() == \"ON\" ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        String errorMsg = null;\n+\n+        if (StringUtils.trimToNull(config.ip) == null) {\n+            errorMsg = \"Parameter 'ip' is mandatory and must be configured\";\n+        }\n+\n+        if (errorMsg != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, errorMsg);\n+        } else {\n+            // updateStatus(ThingStatus.ONLINE); // TODO should it already be online here???\n+            startAutomaticRefresh();\n+        }\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"POST\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            logger.debug(\"Response: {}\", response.toString());\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (errorMsg != null) {\n+            // TODO might as well be wrong API\n+            // really needed? get every 5s also sets this to offline if not available\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        // Run the HTTP request and get the JSON response\n+        HttpURLConnection connection = null;\n+        try {\n+            URL url = new URL(urlStr);\n+            connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"GET\");\n+            connection.setConnectTimeout(5000);\n+\n+            String response = IOUtils.toString(connection.getInputStream());\n+            // logger.debug(\"Response: {}\", response.toString());\n+            // Map the JSON response to an object\n+            result = gson.fromJson(response, GoEStatusResponse.class);\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = e.getMessage();\n+        } catch (SocketTimeoutException e) {\n+            // timeout <- offline\n+            errorMsg = e.getMessage();\n+        } catch (IOException e) {\n+            errorMsg = e.getMessage();\n+        } finally {\n+            if (connection != null) {\n+                try {\n+                    IOUtils.closeQuietly(connection.getInputStream());\n+                } catch (Exception e) {\n+                }\n+            }\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        } else {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+        }\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void startAutomaticRefresh() {\n+        if (refreshJob == null || refreshJob.isCancelled()) {\n+            Runnable runnable = () -> {\n+                try {\n+                    // Request new GoE data\n+                    retryCounter = 0;\n+                    goeResponse = getGoEData();\n+\n+                    // Update all channels from the updated GoE data\n+                    for (Channel channel : getThing().getChannels()) {\n+                        updateChannel(channel.getUID().getId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Exception occurred during execution: {}\", e.getMessage(), e);\n+                }\n+            };\n+\n+            GoEChargerConfiguration config = getConfigAs(GoEChargerConfiguration.class);\n+            int delay = (config.refreshInterval != null) ? config.refreshInterval.intValue() : DEFAULT_REFRESH_INTERVAL;\n+            logger.debug(\"Running refresh job with delay {} s\", delay);\n+            refreshJob = scheduler.scheduleWithFixedDelay(runnable, 0, delay, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing the Go-E Charger handler.\");\n+\n+        if (refreshJob != null && !refreshJob.isCancelled()) {\n+            refreshJob.cancel(true);\n+            refreshJob = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE2MTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1ODo1MVrOFx7ovw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1ODo1MVrOFx7ovw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Current</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901631", "createdAt": "2020-03-04T19:58:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE2MjE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1OTowNlrOFx7pag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1OTowNlrOFx7pag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMTgwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Max Ampere</label>\n          \n          \n            \n            \t\t<label>Maximum Current</label>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387901802", "createdAt": "2020-03-04T19:59:06Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE2NDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo1OTo0OVrOFx7q4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo1MjoyOFrOFx9M3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjE3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n          \n          \n            \n            \t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n          \n      \n    \n    \n  \n\nThis is not read-only? So the user can set that channel?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387902179", "createdAt": "2020-03-04T19:59:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyNzI2Mg==", "bodyText": "Yes, you can set it.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387927262", "createdAt": "2020-03-04T20:52:28Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjE3OQ=="}, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE2NjU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDowMDoyM1rOFx7sOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDowMDoyM1rOFx7sOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Temperature</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387902520", "createdAt": "2020-03-04T20:00:23Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged in this session</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Total Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged since installation</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzE2ODIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDowMDo1NFrOFx7tOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo1NDowNFrOFx9QOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<state pattern=\"%d \u00b0C\" readOnly=\"true\"></state>\n          \n          \n            \n            \t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n          \n      \n    \n    \n  \n\nis this only provided as integer?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387902776", "createdAt": "2020-03-04T20:00:54Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged in this session</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Total Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged since installation</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature of the Go-eCharger</description>\n+\t\t<state pattern=\"%d \u00b0C\" readOnly=\"true\"></state>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkyODEyMw==", "bodyText": "Yes", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r387928123", "createdAt": "2020-03-04T20:54:04Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Max Ampere</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d V\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f kW\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Current Session Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged in this session</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Total Charge Amount</label>\n+\t\t<description>Amount of kWh that have been charged since installation</description>\n+\t\t<state pattern=\"%.1f kWh\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d A\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature of the Go-eCharger</description>\n+\t\t<state pattern=\"%d \u00b0C\" readOnly=\"true\"></state>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkwMjc3Ng=="}, "originalCommit": {"oid": "35f5255052b21ad4743da85577740e3288ff2f57"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQyMDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNToyMVrOFzAtfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNToyMVrOFzAtfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzMzM0Mw==", "bodyText": "You can remove the whole section if discovery is not supported", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389033343", "createdAt": "2020-03-06T17:15:21Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/).\n+It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQyNTUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNjo0OVrOFzAwqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNjo0OVrOFzAwqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDE1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String ip;\n          \n          \n            \n                public @Nullable String ip;\n          \n      \n    \n    \n  \n\nwe use the inline style", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389034154", "createdAt": "2020-03-06T17:16:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerConfiguration.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link GoEChargerConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerConfiguration {\n+\n+    @Nullable\n+    public String ip;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQyNzk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNzo0MlrOFzAyRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoxNzo0MlrOFzAyRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzNDU2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n          \n          \n            \n                        final @Reference LocaleProvider localeProvider, final @Reference LocationProvider locationProvider,\n          \n          \n            \n                        final @Reference TranslationProvider i18nProvider) {\n          \n          \n            \n                public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\n          \n      \n    \n    \n  \n\nsince you don't need the other providers, you don't need to wait for them to be available", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389034567", "createdAt": "2020-03-06T17:17:42Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/GoEChargerHandlerFactory.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.i18n.LocaleProvider;\n+import org.eclipse.smarthome.core.i18n.LocationProvider;\n+import org.eclipse.smarthome.core.i18n.TranslationProvider;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.goecharger.internal.handler.GoEChargerHandler;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link GoEChargerHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.goecharger\", service = ThingHandlerFactory.class)\n+public class GoEChargerHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_GOE);\n+    private HttpClient httpClient;\n+\n+    @Activate\n+    public GoEChargerHandlerFactory(final @Reference HttpClientFactory httpClientFactory,\n+            final @Reference LocaleProvider localeProvider, final @Reference LocationProvider locationProvider,\n+            final @Reference TranslationProvider i18nProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ1Njg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyNjozMFrOFzBD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjo1Mzo0OFrOFzM9HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTA3OQ==", "bodyText": "I have a questions here. This is only used for de-serialization of the response, right? GSON does not use setters and if it's a DTO anyway, we allow using public fields and you could omit the getters, too.\nIf you name it GoEStatusResponseDTO, teher will be no warning regarding the null-annotation. WDYT`?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389039079", "createdAt": "2020-03-06T17:26:30Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzk0OA==", "bodyText": "I'm not so familiar with gson, i thought it needs setter/getters to work. but it works fine if i remove them", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389233948", "createdAt": "2020-03-07T06:53:48Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTA3OQ=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ2MjQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyODowNFrOFzBHMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjo1NDo0MFrOFzM9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTkyMw==", "bodyText": "I guess this is never used. At least I didn't find a hint in your code and GSON is not using that. That aside, if you want to keep it, please check the array size before you access fields, this is a food candidate for IndexOutOfBoundsException otherwise.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389039923", "createdAt": "2020-03-06T17:28:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {\n+\n+  \n+  @SerializedName(\"version\")\n+  private String version;\n+\n+  \n+  @SerializedName(\"car\")\n+  private Integer pwmSignal;\n+\n+  \n+  @SerializedName(\"ast\")\n+  private Integer accessState;\n+\n+  \n+  @SerializedName(\"amp\")\n+  private Integer maxChargeAmps;\n+\n+  \n+  @SerializedName(\"nrg\")\n+  private Integer[] energy;\n+\n+  \n+  @SerializedName(\"err\")\n+  private Integer errorCode;\n+\n+  \n+  @SerializedName(\"alw\")\n+  private Integer allowCharging;\n+\n+  \n+  @SerializedName(\"cbl\")\n+  private Integer cableEncoding;\n+\n+  \n+  @SerializedName(\"pha\")\n+  private Integer phases;\n+\n+  \n+  @SerializedName(\"tmp\")\n+  private Integer temperature;\n+\n+  \n+  @SerializedName(\"dws\")\n+  private Long sessionChargeConsumption;\n+\n+  \n+  @SerializedName(\"dwo\")\n+  private Integer sessionChargeConsumptionLimit;\n+\n+  \n+  @SerializedName(\"eto\")\n+  private Long totalChargeConsumption;\n+\n+  \n+  @SerializedName(\"fwv\")\n+  private String firmware;\n+\n+  public  String getVersion() {\n+    return version;\n+  }\n+\n+  public void setVersion( String version) {\n+    this.version = version;\n+  }\n+\n+  public  Integer getPwmSignal() {\n+    return pwmSignal;\n+  }\n+\n+  public void setPwmSignal( Integer pwmSignal) {\n+    this.pwmSignal = pwmSignal;\n+  }\n+\n+  public  Integer getMaxChargeAmps() {\n+    return maxChargeAmps;\n+  }\n+\n+  public void setMaxChargeAmps( Integer maxChargeAmps) {\n+    this.maxChargeAmps = maxChargeAmps;\n+  }\n+\n+  public  Integer getErrorCode() {\n+    return errorCode;\n+  }\n+\n+  public void setErrorCode( Integer errorCode) {\n+    this.errorCode = errorCode;\n+  }\n+\n+  public  Integer getAllowCharging() {\n+    return allowCharging;\n+  }\n+\n+  public void setAllowCharging( Integer allowCharging) {\n+    this.allowCharging = allowCharging;\n+  }\n+\n+  public  Integer getCableEncoding() {\n+    return cableEncoding;\n+  }\n+\n+  public void setCableEncoding( Integer cableEncoding) {\n+    this.cableEncoding = cableEncoding;\n+  }\n+\n+  public  Integer getPhases() {\n+    return phases;\n+  }\n+\n+  public void setPhases( Integer phases) {\n+    this.phases = phases;\n+  }\n+\n+  public  Integer getTemperature() {\n+    return temperature;\n+  }\n+\n+  public void setTemperature( Integer temperature) {\n+    this.temperature = temperature;\n+  }\n+\n+  public  Long getSessionChargeConsumption() {\n+    return sessionChargeConsumption;\n+  }\n+\n+  public void setSessionChargeConsumption( Long sessionChargeConsumption) {\n+    this.sessionChargeConsumption = sessionChargeConsumption;\n+  }\n+\n+  public  Integer getSessionChargeConsumptionLimit() {\n+    return sessionChargeConsumptionLimit;\n+  }\n+\n+  public void setSessionChargeConsumptionLimit( Integer sessionChargeConsumptionLimit) {\n+    this.sessionChargeConsumptionLimit = sessionChargeConsumptionLimit;\n+  }\n+\n+  public  Long getTotalChargeConsumption() {\n+    return totalChargeConsumption;\n+  }\n+\n+  public void setTotalChargeConsumption( Long totalChargeConsumption) {\n+    this.totalChargeConsumption = totalChargeConsumption;\n+  }\n+\n+  public  String getFirmware() {\n+    return firmware;\n+  }\n+\n+  public void setFirmware( String firmware) {\n+    this.firmware = firmware;\n+  }\n+\n+  public  Integer[] getEnergy() {\n+    return energy;\n+  }\n+\n+  public void setEnergy( Integer[] energy) {\n+    this.energy = energy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzMzk4Mg==", "bodyText": "It is used for voltage, current and power. however its either null and there is no connection or it is always there", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389233982", "createdAt": "2020-03-07T06:54:40Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponse.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponse {\n+\n+  \n+  @SerializedName(\"version\")\n+  private String version;\n+\n+  \n+  @SerializedName(\"car\")\n+  private Integer pwmSignal;\n+\n+  \n+  @SerializedName(\"ast\")\n+  private Integer accessState;\n+\n+  \n+  @SerializedName(\"amp\")\n+  private Integer maxChargeAmps;\n+\n+  \n+  @SerializedName(\"nrg\")\n+  private Integer[] energy;\n+\n+  \n+  @SerializedName(\"err\")\n+  private Integer errorCode;\n+\n+  \n+  @SerializedName(\"alw\")\n+  private Integer allowCharging;\n+\n+  \n+  @SerializedName(\"cbl\")\n+  private Integer cableEncoding;\n+\n+  \n+  @SerializedName(\"pha\")\n+  private Integer phases;\n+\n+  \n+  @SerializedName(\"tmp\")\n+  private Integer temperature;\n+\n+  \n+  @SerializedName(\"dws\")\n+  private Long sessionChargeConsumption;\n+\n+  \n+  @SerializedName(\"dwo\")\n+  private Integer sessionChargeConsumptionLimit;\n+\n+  \n+  @SerializedName(\"eto\")\n+  private Long totalChargeConsumption;\n+\n+  \n+  @SerializedName(\"fwv\")\n+  private String firmware;\n+\n+  public  String getVersion() {\n+    return version;\n+  }\n+\n+  public void setVersion( String version) {\n+    this.version = version;\n+  }\n+\n+  public  Integer getPwmSignal() {\n+    return pwmSignal;\n+  }\n+\n+  public void setPwmSignal( Integer pwmSignal) {\n+    this.pwmSignal = pwmSignal;\n+  }\n+\n+  public  Integer getMaxChargeAmps() {\n+    return maxChargeAmps;\n+  }\n+\n+  public void setMaxChargeAmps( Integer maxChargeAmps) {\n+    this.maxChargeAmps = maxChargeAmps;\n+  }\n+\n+  public  Integer getErrorCode() {\n+    return errorCode;\n+  }\n+\n+  public void setErrorCode( Integer errorCode) {\n+    this.errorCode = errorCode;\n+  }\n+\n+  public  Integer getAllowCharging() {\n+    return allowCharging;\n+  }\n+\n+  public void setAllowCharging( Integer allowCharging) {\n+    this.allowCharging = allowCharging;\n+  }\n+\n+  public  Integer getCableEncoding() {\n+    return cableEncoding;\n+  }\n+\n+  public void setCableEncoding( Integer cableEncoding) {\n+    this.cableEncoding = cableEncoding;\n+  }\n+\n+  public  Integer getPhases() {\n+    return phases;\n+  }\n+\n+  public void setPhases( Integer phases) {\n+    this.phases = phases;\n+  }\n+\n+  public  Integer getTemperature() {\n+    return temperature;\n+  }\n+\n+  public void setTemperature( Integer temperature) {\n+    this.temperature = temperature;\n+  }\n+\n+  public  Long getSessionChargeConsumption() {\n+    return sessionChargeConsumption;\n+  }\n+\n+  public void setSessionChargeConsumption( Long sessionChargeConsumption) {\n+    this.sessionChargeConsumption = sessionChargeConsumption;\n+  }\n+\n+  public  Integer getSessionChargeConsumptionLimit() {\n+    return sessionChargeConsumptionLimit;\n+  }\n+\n+  public void setSessionChargeConsumptionLimit( Integer sessionChargeConsumptionLimit) {\n+    this.sessionChargeConsumptionLimit = sessionChargeConsumptionLimit;\n+  }\n+\n+  public  Long getTotalChargeConsumption() {\n+    return totalChargeConsumption;\n+  }\n+\n+  public void setTotalChargeConsumption( Long totalChargeConsumption) {\n+    this.totalChargeConsumption = totalChargeConsumption;\n+  }\n+\n+  public  String getFirmware() {\n+    return firmware;\n+  }\n+\n+  public void setFirmware( String firmware) {\n+    this.firmware = firmware;\n+  }\n+\n+  public  Integer[] getEnergy() {\n+    return energy;\n+  }\n+\n+  public void setEnergy( Integer[] energy) {\n+    this.energy = energy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAzOTkyMw=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ2MzcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyODoyNFrOFzBH9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyODoyNFrOFzBH9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MDExOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private HttpClient httpClient;\n          \n          \n            \n                private final HttpClient httpClient;", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389040118", "createdAt": "2020-03-06T17:28:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ2NDk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyODo1MFrOFzBI0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzoyODo1MFrOFzBI0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MDMzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Gson gson;\n          \n          \n            \n                private final Gson gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389040338", "createdAt": "2020-03-06T17:28:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ3Mjk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzozMTozMlrOFzBN-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjo1ODozMFrOFzM92g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MTY1Nw==", "bodyText": "Why do you split here? If you don't use channel groups there should be no # in the channel id\nI would also suggest to add a check if the array returned by getEnergy() (the array if you go the way with the public fields) has the correct size (see above for reason).", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389041657", "createdAt": "2020-03-06T17:31:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDEzOA==", "bodyText": "This is a leftover from copying stuff from other bindings, guess i will spend some time and clean up fronius binding after this, where i took most of the code from.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234138", "createdAt": "2020-03-07T06:58:30Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MTY1Nw=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDQ3OTMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzozMzozOFrOFzBSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNjo1OTowM1rOFzM98g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjcxNw==", "bodyText": "You can skip the return here, two lines later you return UndefType.NULL anyway. Why did you decide to use NULL instead of UNDEF?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389042717", "createdAt": "2020-03-06T17:33:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDE2Mg==", "bodyText": "In the openhablog i always saw values getting NULL if device is not available, so i thought NULL is the right choice here. Will change to UNDEF if that is the normal way.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234162", "createdAt": "2020-03-07T06:59:03Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0MjcxNw=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDUxNjEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0Mzo1M1rOFzBn6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzowMTozNlrOFzM-Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0ODI5OA==", "bodyText": "isLinked is very expensive, getValue is cheap, so I would suggest to remove that check for performance reasons.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389048298", "createdAt": "2020-03-06T17:43:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDI1MQ==", "bodyText": "Also leftover from copying code ;) Guess it really is necessary to clean up some other bindings as well.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234251", "createdAt": "2020-03-07T07:01:36Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA0ODI5OA=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDUyODcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0Nzo0N1rOFzBvrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0Nzo0N1rOFzBvrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389050284", "createdAt": "2020-03-06T17:47:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDUzMDEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo0ODoxN1rOFzBwoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1Njo0M1rOFzNHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDUyOQ==", "bodyText": "You don't need to break on default", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389050529", "createdAt": "2020-03-06T17:48:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjU5Ng==", "bodyText": "the default case is needed,only the break is not needed.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236596", "createdAt": "2020-03-07T07:56:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1MDUyOQ=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU1ODI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo1Nzo1NlrOFzCCWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNzo1Nzo1NlrOFzCCWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NTA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                        errorMsg = e.getMessage();\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (InterruptedException | TimeoutException | ExecutionException e) {\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, e.getMessage());\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nTwo remarks: no need to log a warning, thing status updates are already logged and do not catch Exception if you can be more specific.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389055066", "createdAt": "2020-03-06T17:57:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU2Njg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowMToxMFrOFzCIEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowMToxMFrOFzCIEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NjUzMQ==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389056531", "createdAt": "2020-03-06T18:01:10Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU2OTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowMTo1NlrOFzCJkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowMTo1NlrOFzCJkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NjkxMg==", "bodyText": "can be removed", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389056912", "createdAt": "2020-03-06T18:01:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU3MDk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowMjozNlrOFzCKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowMjozNlrOFzCKtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA1NzIwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n          \n          \n            \n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n          \n          \n            \n                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"no response received on command\");", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389057206", "createdAt": "2020-03-06T18:02:36Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 285}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDU5MDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODowOToyNVrOFzCXBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzoxNjowMFrOFzNATA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDM1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));\n          \n          \n            \n                    getThing().getChannels().map(channel -> channel.getUID().getId()).forEach(id -> updateState(id, getValue(id)));\n          \n      \n    \n    \n  \n\nYou can the remove the updateState method. If you check null on goeReponse (and return if empty) above and add it as parameter to getValue (making it private State getValue(String id, GoEStatusResponse goeResponse), you can also remove the field, making the whole thing a bit more thread-safe.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389060356", "createdAt": "2020-03-06T18:09:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }\n+        logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        goeResponse = getGoEData();\n+\n+        // Update all channels from the updated GoE data\n+        getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDc2NA==", "bodyText": "goeResponse is also used for RefreshCommand, can i ignore the refresh command? then this could work.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234764", "createdAt": "2020-03-07T07:16:00Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }\n+        logger.warn(\"Error in Go-E charger response: {}\", errorMsg);\n+\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        goeResponse = getGoEData();\n+\n+        // Update all channels from the updated GoE data\n+        getThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MDM1Ng=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDcwMTY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODo0Njo1NFrOFzDcow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzoyNDo0OFrOFzNBnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3ODE3OQ==", "bodyText": "You can use https://www.tablesgenerator.com/markdown_tables to adjust column width.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389078179", "createdAt": "2020-03-06T18:46:54Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/).\n+It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery.\n+You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              | Required |\n+|-----------|------------------------------------------------------------------------- |----------|\n+| ip        | the ip-address of your go-eCharger | yes |\n+| refreshInterval  | Interval to read data, default 5 (in seconds) | no |\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTEwMQ==", "bodyText": "http://markdowntable.com/\nThis one is also quite handy to format tables that already exist", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389235101", "createdAt": "2020-03-07T07:24:48Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# Go-eCharger Binding\n+\n+This Binding controls and reads data from the [Go-eCharger](https://go-e.co/).\n+It is a mobile wallbox for charging EVs and has an open REST API for reading data and configuration.\n+\n+## Supported Things\n+\n+This binding supports go-eCharger HOME+ with 7.4kW or 22kW.\n+\n+## Discovery\n+\n+There is no auto discovery.\n+You need to get the IP from the Go-eCharger and put it into the configuration.\n+\n+## Thing Configuration\n+\n+The thing has two configuration parameters:\n+\n+| Parameter | Description                                                              | Required |\n+|-----------|------------------------------------------------------------------------- |----------|\n+| ip        | the ip-address of your go-eCharger | yes |\n+| refreshInterval  | Interval to read data, default 5 (in seconds) | no |\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA3ODE3OQ=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDc0MTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTowMToyOFrOFzD3mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1NjowN1rOFzNHUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg==", "bodyText": "I might be wrong, but I think the purpose of this command is to retrieve current value for given channel directly from the device, so I would call refresh() here.\n@J-N-K  WDYT?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389085082", "createdAt": "2020-03-06T19:01:28Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNDkzNw==", "bodyText": "good catch, this also works well together with the review remark a few comments above to change\ngetThing().getChannels().forEach(channel -> updateChannel(channel.getUID().getId()));\n\nto\ngetThing().getChannels().map(channel -> channel.getUID().getId()).forEach(id -> updateState(id, getValue(id)));\n\nHow often is this refresh command triggered? in the end i already refresh like every 5 seconds by default, if there is an additional refresh inbetween i dont think that gives you more/better data. Can i also ignore this?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389234937", "createdAt": "2020-03-07T07:19:56Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjU2Mg==", "bodyText": "REFRESH is only triggered once when the channel is linked. Bindings should support REFRESH but in this case I think we can ignore it. There is no additional benefit of refreshing and you can't refresh a single channel anyway. This would require quite some logic to get it right, so better remove it.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236562", "createdAt": "2020-03-07T07:56:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA4NTA4Mg=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDc5MTIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToxOTowN1rOFzEX3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToxOTowN1rOFzEX3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5MzM0Mw==", "bodyText": "I don't think you need this. Just pass response data from GetGoEData to other methods as a parameter.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389093343", "createdAt": "2020-03-06T19:19:07Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDk3NjIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxMjowN1rOFzGECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxMjowN1rOFzGECQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTAzMw==", "bodyText": "Please state the units.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389121033", "createdAt": "2020-03-06T20:12:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger</description>\n+\t\t\t</parameter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDk4MTQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxNDowOFrOFzGHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDoxNDowOFrOFzGHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEyMTg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n          \n          \n            \n                            value = command == OnOffType.ON ? \"1\" : \"0\";", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389121859", "createdAt": "2020-03-06T20:14:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTU3ODcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMTo0NDowMFrOFzL0OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzoyOTowN1rOFzNCVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTI4OQ==", "bodyText": "Why would you need to retry immediately? Your refreshJob does retries just by virtue that it is periodic.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389215289", "createdAt": "2020-03-07T01:44:00Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNTI4NQ==", "bodyText": "The idea is to not set null values immediately but try again in case there was just a short connection issue. So only after the next retry values are set to null/undef. Took this over from fronius binding. I guess the values are a bit more stable like this in shaky wifi connections.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389235285", "createdAt": "2020-03-07T07:29:07Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,356 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private Gson gson;\n+    private @Nullable GoEStatusResponse goeResponse;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId) {\n+        String[] fields = StringUtils.split(channelId, \"#\");\n+\n+        if (goeResponse != null) {\n+            switch (fields[0]) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.getMaxChargeAmps(), SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.getPwmSignal());\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.getErrorCode()) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.getAccessState()) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.getAllowCharging() == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.getCableEncoding(), SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.getEnergy()[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.getEnergy()[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.getTemperature(), SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumption() / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.getSessionChargeConsumptionLimit() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.getTotalChargeConsumption() / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.getFirmware());\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.getEnergy()[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.getEnergy()[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.getEnergy()[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.getEnergy()[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+                default:\n+                    return UnDefType.NULL;\n+            }\n+        }\n+        return UnDefType.NULL;\n+    }\n+\n+    /**\n+     * Update the channel from the last data\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+\n+        State state = getValue(channelId);\n+        updateState(channelId, state);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = (OnOffType)command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+            default:\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String errorMsg = null;\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+\n+        logger.warn(\"Error in Go-eCharger request: {}\", errorMsg);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponse getGoEData() {\n+        GoEStatusResponse result = null;\n+        String errorMsg = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponse.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (Exception e) {\n+            errorMsg = e.getMessage();\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        retryCounter++;\n+        if (retryCounter == 1) {\n+            logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+            return getGoEData();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIxNTI4OQ=="}, "originalCommit": {"oid": "dd5bd3fe56ad91b5fa57d77ecbe75f22bb0f5d27"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTczNzUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponseDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1MjoxM1rOFzNGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1MjoxM1rOFzNGkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjM3MA==", "bodyText": "remove at least one empty line", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236370", "createdAt": "2020-03-07T07:52:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/api/GoEStatusResponseDTO.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+\n+/**\n+ * The {@link GoEStatusResponse} class represents a json response from the\n+ * charger.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+public class GoEStatusResponseDTO {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTczNzcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1Mjo1N1rOFzNGqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1Mjo1N1rOFzNGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjM5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Gson gson;\n          \n          \n            \n                private final Gson gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236395", "createdAt": "2020-03-07T07:52:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTczNzg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1MzoxMVrOFzNGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1MzoxMVrOFzNGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    gson = new Gson();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236413", "createdAt": "2020-03-07T07:53:11Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTczODI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1Mzo1MVrOFzNG6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo0Nzo0M1rOFzNRrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ1Nw==", "bodyText": "Cannot be null here", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236457", "createdAt": "2020-03-07T07:53:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTIxMg==", "bodyText": "How to set Null/Undef for each channel then? Does openhab do that automatically when the device goes offline? Or is it best practice to keep the last known values?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239212", "createdAt": "2020-03-07T08:47:43Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjQ1Nw=="}, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc0MDU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwNzo1OTo1MVrOFzNH_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1MzowMlrOFzNSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjczMg==", "bodyText": "check for null here, this has two benefits: the null-check is only done once (not everytime getValue is called) and second the null-annotation is correct (non-null for the parameter of getValue)", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389236732", "createdAt": "2020-03-07T07:59:51Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTQ4OQ==", "bodyText": "I think in a switch you can ommit default, if there is no reason to have a default.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239489", "createdAt": "2020-03-07T08:53:02Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzNjczMg=="}, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 308}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc2NDcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1Njo1MFrOFzNTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTozMDo1MFrOFzNamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            private List<String> allChannels = new ArrayList<>();", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239715", "createdAt": "2020-03-07T08:56:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTQ5OA==", "bodyText": "I would use Collections.emptyList() here.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241498", "createdAt": "2020-03-07T09:30:50Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTcxNQ=="}, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc2NTQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1ODozN1rOFzNT_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwODo1ODozN1rOFzNT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIzOTgwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId()).collect(Collectors.toList());", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389239807", "createdAt": "2020-03-07T08:58:37Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc2NzA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTowMzowNFrOFzNUyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOToxMzozNFrOFzNXAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDAwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            if (goeResponse == null) {\n          \n          \n            \n                allChannels.forEach(channel -> updateState(channel, UndefType.UNDEF));\n          \n          \n            \n            } else {\n          \n          \n            \n               allChannels.forEach(channel -> updateState(channel, getValue(channel, goeResponse)));\n          \n          \n            \n            }", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389240009", "createdAt": "2020-03-07T09:03:04Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDU3OQ==", "bodyText": "Seems to work, will do it like this than. Thanks for your input.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389240579", "createdAt": "2020-03-07T09:13:34Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;\n+        }\n+\n+        return null;\n+    }\n+\n+    private void refresh() {\n+        // Request new GoE data\n+        retryCounter = 0;\n+        GoEStatusResponseDTO goeResponse = getGoEData();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MDAwOQ=="}, "originalCommit": {"oid": "18638888322ded97c886da6c7fbfd21591f938fe"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc4MDgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTozNTozN1rOFzNblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjo0MTo0OFrOFzOEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA==", "bodyText": "Can you be sure the command here will be always of QuantityType type? I would split this switch into two if checks: if (command instanceof QuantityType) and if (command instanceof OnOffType).", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241748", "createdAt": "2020-03-07T09:35:37Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjYzNQ==", "bodyText": "max amps is always quantity type, yes. How could it be something differentif i check for the ID beforehand?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242635", "createdAt": "2020-03-07T09:52:06Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Mjc3NA==", "bodyText": "The channel is of QuantityType, but I am talking about passed command. I believe you can send whatever command you want using rules. Also, when there is new command introduced, something similar to REFRESH command, you will get cast exception here.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242774", "createdAt": "2020-03-07T09:54:44Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MzIxMA==", "bodyText": "Ok i get it. But then it gets quite complicated, command can be either string, or number or whatever. If you send StringType \"6\" or  DecimalType 6 it could both work. Guess i have to write a wrapper method that checks for the command and returns something.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389243210", "createdAt": "2020-03-07T10:01:46Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0Mzc4MA==", "bodyText": "No. Commands are strongly typed in openHAB. Checking for instanceof QuantityType is enough. Commands send from rules are correctly casted before.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389243780", "createdAt": "2020-03-07T10:11:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NDE4Mg==", "bodyText": "Ok so i do not have to do anything here? Will quickly check with a custom rule...", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389244182", "createdAt": "2020-03-07T10:19:39Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTA0NQ==", "bodyText": "java.lang.ClassCastException: org.eclipse.smarthome.core.library.types.DecimalType cannot be cast to org.eclipse.smarthome.core.library.types.QuantityType\n\nSo i guess i have the wrong type here anyway.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389245045", "createdAt": "2020-03-07T10:35:09Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTM0Ng==", "bodyText": "However if i send a string in the rule instead of an int value it still says decimaltype in the exception, so i guess no need to check for different types.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389245346", "createdAt": "2020-03-07T10:40:42Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0NTcwMA==", "bodyText": "Changed type to decimaltype and tested a rule with string and number and both worked.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389245700", "createdAt": "2020-03-07T10:47:38Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MjI0OQ==", "bodyText": "This is what I do: check type before casting, because the value comes fron the outside and there is no guarantee it will be of proper type. It happened to my binding (satel) when REFRESH command had been introduced - the binding was crashing on this command because there wasn't type checking in one handler.\nBut if you feel that this is not needed here, just leave as it is.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389252249", "createdAt": "2020-03-07T12:41:48Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc0OA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc4MDkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTozNTo1MFrOFzNboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTozNTo1MFrOFzNboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTc2MA==", "bodyText": "I would remove that if and check the type for each channel. See my comment below.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241760", "createdAt": "2020-03-07T09:35:50Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc4MjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTozOToyN1rOFzNcYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo1Njo1NVrOFzNgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk1NA==", "bodyText": "I really don't like this. Just return null value in case an error and handle retry in refresh method. Also I wouldn't do a retry in case of InterruptedException. And remove retryCounter completely.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241954", "createdAt": "2020-03-07T09:39:27Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjkwMQ==", "bodyText": "I guess you are right, its not up to the binding to fix bad wifi", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242901", "createdAt": "2020-03-07T09:56:55Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk1NA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 292}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc4Mjc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0MDo0MFrOFzNciA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0MDo0MFrOFzNciA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MTk5Mg==", "bodyText": "Imo better would be to move it to refresh method.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389241992", "createdAt": "2020-03-07T09:40:40Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");\n+            result = null;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 299}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTc4MjgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0MDo1MVrOFzNckQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwOTo0MDo1MVrOFzNckQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI0MjAwMQ==", "bodyText": "Imo better would be to move it to refresh method.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389242001", "createdAt": "2020-03-07T09:40:51Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                value = ((QuantityType<?>)command).intValue()*10  + \"\";\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                value = command == OnOffType.ON ? \"1\" : \"0\";\n+                break;\n+        }\n+        if (key != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} because it is read only\", channelUID.getId());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            retryCounter++;\n+            if (retryCounter == 1) {\n+                logger.warn(\"Error in getting data from Go-E charger, retrying once\");\n+                return getGoEData();\n+            }\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"No response received\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMTg3MzU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMzowMjoyNFrOFzOIqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxNzo1ODo0M1rOFzRAmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Override\n          \n          \n            \n                @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                    if (command instanceof RefreshType) {\n          \n          \n            \n                        refresh();\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    String key = null;\n          \n          \n            \n                    String value = null;\n          \n          \n            \n                    switch (channelUID.getId()) {\n          \n          \n            \n                        case MAX_AMPERE:\n          \n          \n            \n                            key = \"amp\";\n          \n          \n            \n                            value = ((QuantityType<?>)command).intValue() + \"\";\n          \n          \n            \n                            break;\n          \n          \n            \n                @Override\n          \n          \n            \n                public void handleCommand(ChannelUID channelUID, Command command) {\n          \n          \n            \n                    String key = null;\n          \n          \n            \n                    String value = null;\n          \n          \n            \n                    switch (channelUID.getId()) {\n          \n          \n            \n                        case MAX_AMPERE:\n          \n          \n            \n                            key = \"amp\";\n          \n          \n            \n                            if (command instanceof DecimalType) {\n          \n          \n            \n                                value = String.valueOf(((DecimalType) command).intValue());\n          \n          \n            \n                            } else if (command instanceof QuantityType<?>) {\n          \n          \n            \n                                value = String.valueOf((QuantityType<ElectricalCurrent>) command).toUnit(SmarthomeUnits.AMPERE).intValue());\n          \n          \n            \n                            }\n          \n          \n            \n                            break;\n          \n      \n    \n    \n  \n\nSomething like this would be the correct way to do it. This also makes sure that QuantityType commands have the correct unit. Imagine someone sends a command  10000 mA (makes no sense, but you never now). You would probably send something like 10 for 10 amps instead of 10000 (which would happen if you take the intValue before conversion.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389253290", "createdAt": "2020-03-07T13:02:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NDI3OQ==", "bodyText": "Fine for me, I can do that later. Guess this makes it more stable.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389254279", "createdAt": "2020-03-07T13:19:19Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1NDMzMQ==", "bodyText": "Thanks. I really like working with you.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389254331", "createdAt": "2020-03-07T13:20:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI2NjM2NA==", "bodyText": "I just found how to define UoM in rules here:\nhttps://www.openhab.org/docs/configuration/rules-dsl.html#number-item\nSo i wrote this code in a rule to test it:\nvar current = 5|A\nvar mA = current.toUnit(\"mA\")\nGoEChargerBindingThingMaxAmpere.sendCommand(mA)\n\nThis causes an error, however GoEChargerBindingThingMaxAmpere.sendCommand(mA.intValue) works, GoEChargerBindingThingMaxAmpere.sendCommand(\"5000\") also works and both are converted to DecimalType.\nSo to me it looks like it is not possible to send a QuantityType as command. Or am i doing anything wrong here?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389266364", "createdAt": "2020-03-07T16:34:14Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI3NTMwMw==", "bodyText": "var current = 5|A\nvar mA = current.toUnit(\"mA\")\nGoEChargerBindingThingMaxAmpere.sendCommand(mA.toString)\n\nEdit: at least works. I must admit I didn't check if the command is quantiytype then.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389275303", "createdAt": "2020-03-07T17:03:41Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMDM3Nw==", "bodyText": "Yeah that one works. It's of type QuantityType. Will upload the changes in a sec.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389300377", "createdAt": "2020-03-07T17:58:43Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,333 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private final Gson gson;\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private int retryCounter = 0;\n+\n+    private HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        gson = new Gson();\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        if (goeResponse != null) {\n+            switch (channelId) {\n+                case MAX_AMPERE:\n+                    return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+                case PWM_SIGNAL:\n+                    // TODO more readable string value?\n+                    return new DecimalType(goeResponse.pwmSignal);\n+                case ERROR:\n+                    String error = null;\n+                    switch (goeResponse.errorCode) {\n+                        case 0:\n+                            error = \"NONE\";\n+                            break;\n+                        case 1:\n+                            error = \"RCCB\";\n+                            break;\n+                        case 3:\n+                            error = \"PHASE\";\n+                            break;\n+                        case 8:\n+                            error = \"NO_GROUND\";\n+                            break;\n+                        default:\n+                            error = \"INTERNAL\";\n+                            break;\n+                    }\n+                    return new StringType(error);\n+                case ACCESS_STATE:\n+                    String accessState = null;\n+                    switch (goeResponse.accessState) {\n+                        case 0:\n+                            accessState = \"OPEN\";\n+                            break;\n+                        case 1:\n+                            accessState = \"RFID\";\n+                            break;\n+                        case 2:\n+                            accessState = \"AWATTAR\";\n+                            break;\n+                        case 3:\n+                            accessState = \"TIMER\";\n+                            break;\n+                        default:\n+                            accessState = \"UNKNOWN\";\n+                            break;\n+                    }\n+                    return new StringType(accessState);\n+                case ALLOW_CHARGING:\n+                    return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+                case CABLE_ENCODING:\n+                    return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+                case PHASES:\n+                    int count = 0;\n+                    if (goeResponse.energy[4] > 0) { // amps P1\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[5] > 0) { // amps P2\n+                        count++;\n+                    }\n+                    if (goeResponse.energy[6] > 0) { // amps P3\n+                        count++;\n+                    }\n+                    return new DecimalType(count);\n+                case TEMPERATURE:\n+                    return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+                case SESSION_CHARGE_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                    return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case TOTAL_CONSUMPTION:\n+                    return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                            SmartHomeUnits.KILOWATT_HOUR);\n+                case FIRMWARE:\n+                    return new StringType(goeResponse.firmware);\n+                case VOLTAGE_L1:\n+                    return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L2:\n+                    return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+                case VOLTAGE_L3:\n+                    return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+                case CURRENT_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+                case CURRENT_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+                case POWER_L1:\n+                    return new QuantityType<>((Double) (goeResponse.energy[7] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L2:\n+                    return new QuantityType<>((Double) (goeResponse.energy[8] / 10d),\n+                            SmartHomeUnits.WATT);\n+                case POWER_L3:\n+                    return new QuantityType<>((Double) (goeResponse.energy[9] / 10d),\n+                            SmartHomeUnits.WATT);\n+            }\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            refresh();\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                value = ((QuantityType<?>)command).intValue() + \"\";\n+                break;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MzI5MA=="}, "originalCommit": {"oid": "911db7af5bde18d6a297da971ee775d94c29d01e"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4MjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxMzoyNFrOFzREHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODo0MjozNVrOFzRLTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTI3OA==", "bodyText": "I think you can remove this comment. If you did not receive an error, you can assume that it worked.  And the next refresh will show the updated state.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // TODO check if value really changed", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301278", "createdAt": "2020-03-07T18:13:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMzExOA==", "bodyText": "Guess you are right here...", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389303118", "createdAt": "2020-03-07T18:42:35Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTI3OA=="}, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4Mjg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxMzo1NFrOFzRESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxMzo1NFrOFzRESw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTMyMw==", "bodyText": "Can be removed since you now check the instance\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressWarnings(\"unchecked\")", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301323", "createdAt": "2020-03-07T18:13:54Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4MzAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxNDoyMFrOFzREXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxNDoyMFrOFzREXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTM0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n          \n          \n            \n                private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n          \n      \n    \n    \n  \n\nno need to have this public", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389301343", "createdAt": "2020-03-07T18:14:20Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    public State getValue(String channelId, GoEStatusResponseDTO goeResponse) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ce222935670593bd7546637b4034bb1fcf38f4d"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYwMjk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1MjoxOVrOFzUO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1MjoxOVrOFzUO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzE5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Go-eCharger Binding Thing</label>\n          \n          \n            \n            \t\t<label>Go-eCharger</label>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353199", "createdAt": "2020-03-08T09:52:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYwNjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1ODo0NlrOFzUQ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQwOTo1ODo0NlrOFzUQ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1MzY4Mg==", "bodyText": "It's better to avoid using units where possible in naming or descriptions (also applies to the other channels/descriptions), e.g.:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n          \n          \n            \n            \t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353682", "createdAt": "2020-03-08T09:58:46Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYwNzkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowMToxM1rOFzURkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowMToxM1rOFzURkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1Mzg3Mw==", "bodyText": "Please also add:\n<context>network-address</context>\nSee: https://www.eclipse.org/smarthome/documentation/development/bindings/xml-reference.html#supported-contexts", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353873", "createdAt": "2020-03-08T10:01:13Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYwODk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowMjo1NVrOFzUSCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowMjo1NVrOFzUSCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1Mzk5Mg==", "bodyText": "You can add a unit for UIs here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n          \n          \n            \n            \t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n          \n      \n    \n    \n  \n\nand also add a unitLabel e.g.:\n<unitLabel>s</unitLabel>\nSee: https://www.eclipse.org/smarthome/documentation/development/bindings/xml-reference.html#xml-structure-for-configuration-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389353992", "createdAt": "2020-03-08T10:02:55Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYxMTMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowNzoxNFrOFzUTNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowNzoxNFrOFzUTNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDI5NA==", "bodyText": "The description allows for explaining what this abbreviation stands for so people uncommon to it don't have to look it up:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<description>Signal status for PWM signal</description>\n          \n          \n            \n            \t\t<description>Pulse-width modulation signal status</description>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354294", "createdAt": "2020-03-08T10:07:14Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"amp\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Signal status for PWM signal</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYxMjI5OnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowOToxNFrOFzUTrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDowOToxNFrOFzUTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDQxNQ==", "bodyText": "Please also add the artifact to the BOM in bom/openhab-addons/pom.xml", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354415", "createdAt": "2020-03-08T10:09:14Z", "author": {"login": "wborn"}, "path": "bundles/pom.xml", "diffHunk": "@@ -87,6 +87,7 @@\n     <module>org.openhab.binding.fsinternetradio</module>\n     <module>org.openhab.binding.ftpupload</module>\n     <module>org.openhab.binding.gardena</module>\n+    <module>org.openhab.binding.goecharger</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYxNjIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoxNToyNVrOFzUVhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoxNToyNVrOFzUVhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>IP Adress</label>\n          \n          \n            \n            \t\t\t\t<label>IP Address</label>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354885", "createdAt": "2020-03-08T10:15:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYxNjM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoxNTozNlrOFzUVkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoxNTozNlrOFzUVkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NDg5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<description>The IP adress of the Go-eCharger</description>\n          \n          \n            \n            \t\t\t\t<description>The IP address of the Go-eCharger</description>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389354897", "createdAt": "2020-03-08T10:15:36Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,167 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger Binding Thing</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxAmpere\" typeId=\"amp\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeConsumptionLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargeConsumption\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalConsumption\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableEncoding\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Adress</label>\n+\t\t\t\t<description>The IP adress of the Go-eCharger</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYxNzM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoxNzoyNVrOFzUWDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzoxMToyNFrOFzVI_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTAyMw==", "bodyText": "Is this TODO still relevant?", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355023", "createdAt": "2020-03-08T10:17:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2ODA2Mg==", "bodyText": "Yes, i guess i will output strings instead. The values represent these states:\n1: READY_NO_CAR\n2: CHARGING\n3: WAITING_FOR_CAR\n4: CHARGING_DONE_CAR_CONNECTED", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389368062", "createdAt": "2020-03-08T13:11:24Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTAyMw=="}, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYxOTE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoyMDo1NFrOFzUW8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzoxMjo0M1rOFzVJVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTI1MA==", "bodyText": "You can use the type parameter straight away instead of first assigning it to urlStr or rename it from type to urlStr.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n          \n          \n            \n                    return type.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355250", "createdAt": "2020-03-08T10:20:54Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2ODE1MA==", "bodyText": "Good catch, i think i did something else before and in the end forgot to remove it when i did not need it anymore.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389368150", "createdAt": "2020-03-08T13:12:43Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTI1MA=="}, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYyMDE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoyMzowMlrOFzUXfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDoyMzowMlrOFzUXfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NTM5MQ==", "bodyText": "Please remove commented code or uncomment it and make it conditional logger.isDebugEnabled()", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389355391", "createdAt": "2020-03-08T10:23:02Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();\n+            // TODO check if value really changed\n+            logger.debug(\"Response: {}\", result);\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"No response received on command\");\n+            return;\n+        }\n+\n+        if (result != null) {\n+            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            return;\n+        }\n+    }\n+\n+    /**\n+     * Request new data from Go-E charger\n+     *\n+     * @return the Go-E charger object mapping the JSON response or null in case of\n+     *         error\n+     */\n+    @Nullable\n+    private GoEStatusResponseDTO getGoEData() {\n+        GoEStatusResponseDTO result = null;\n+\n+        String urlStr = getUrl(GoEChargerBindingConstants.API_URL);\n+        logger.debug(\"GET URL = {}\", urlStr);\n+\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.GET)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = gson.fromJson(contentResponse.getContentAsString(), GoEStatusResponseDTO.class);\n+            // logger.debug(\"Response: {}\", contentResponse.getContentAsString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjYyODU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMDo0MDoyOFrOFzUb8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzoxNTowOVrOFzVKBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NjUzMQ==", "bodyText": "The TODO is still there. Looks like result is only used for logging and getContentAsString could be relatively expensive. The code would be more compact when you move everything into the try block, e.g.:\n        try {\n            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n                    .timeout(5, TimeUnit.SECONDS).send();\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Response: {}\", contentResponse.getContentAsString());\n            }\n            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n                    \"No response received on command\");\n        }", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389356531", "createdAt": "2020-03-08T10:40:28Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2ODMyNQ==", "bodyText": "Guess the result is not needed at the moment, might be better to just check the response code.", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389368325", "createdAt": "2020-03-08T13:15:09Z", "author": {"login": "SamuelBrucksch"}, "path": "bundles/org.openhab.binding.goecharger/src/main/java/org/openhab/binding/goecharger/internal/handler/GoEChargerHandler.java", "diffHunk": "@@ -0,0 +1,344 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.goecharger.internal.handler;\n+\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ACCESS_STATE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ALLOW_CHARGING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CABLE_ENCODING;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.CURRENT_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.ERROR;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.FIRMWARE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.MAX_AMPERE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PHASES;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.POWER_L3;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.PWM_SIGNAL;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.SESSION_CHARGE_CONSUMPTION_LIMIT;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TEMPERATURE;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.TOTAL_CONSUMPTION;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L1;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L2;\n+import static org.openhab.binding.goecharger.internal.GoEChargerBindingConstants.VOLTAGE_L3;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.Collectors;\n+\n+import javax.measure.quantity.ElectricCurrent;\n+import javax.measure.quantity.Energy;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.goecharger.internal.GoEChargerBindingConstants;\n+import org.openhab.binding.goecharger.internal.GoEChargerConfiguration;\n+import org.openhab.binding.goecharger.internal.api.GoEStatusResponseDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link GoEChargerHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Samuel Brucksch - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GoEChargerHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GoEChargerHandler.class);\n+\n+    private @Nullable GoEChargerConfiguration config;\n+\n+    private List<String> allChannels = new ArrayList<>();\n+\n+    private final Gson gson = new Gson();\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+\n+    private final HttpClient httpClient;\n+\n+    public GoEChargerHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private State getValue(String channelId, GoEStatusResponseDTO goeResponse) {\n+        switch (channelId) {\n+            case MAX_AMPERE:\n+                return new QuantityType<>(goeResponse.maxChargeAmps, SmartHomeUnits.AMPERE);\n+            case PWM_SIGNAL:\n+                // TODO more readable string value?\n+                return new DecimalType(goeResponse.pwmSignal);\n+            case ERROR:\n+                String error = null;\n+                switch (goeResponse.errorCode) {\n+                    case 0:\n+                        error = \"NONE\";\n+                        break;\n+                    case 1:\n+                        error = \"RCCB\";\n+                        break;\n+                    case 3:\n+                        error = \"PHASE\";\n+                        break;\n+                    case 8:\n+                        error = \"NO_GROUND\";\n+                        break;\n+                    default:\n+                        error = \"INTERNAL\";\n+                        break;\n+                }\n+                return new StringType(error);\n+            case ACCESS_STATE:\n+                String accessState = null;\n+                switch (goeResponse.accessState) {\n+                    case 0:\n+                        accessState = \"OPEN\";\n+                        break;\n+                    case 1:\n+                        accessState = \"RFID\";\n+                        break;\n+                    case 2:\n+                        accessState = \"AWATTAR\";\n+                        break;\n+                    case 3:\n+                        accessState = \"TIMER\";\n+                        break;\n+                    default:\n+                        accessState = \"UNKNOWN\";\n+                        break;\n+                }\n+                return new StringType(accessState);\n+            case ALLOW_CHARGING:\n+                return goeResponse.allowCharging == 1 ? OnOffType.ON : OnOffType.OFF;\n+            case CABLE_ENCODING:\n+                return new QuantityType<>(goeResponse.cableEncoding, SmartHomeUnits.AMPERE);\n+            case PHASES:\n+                int count = 0;\n+                if (goeResponse.energy[4] > 0) { // current P1\n+                    count++;\n+                }\n+                if (goeResponse.energy[5] > 0) { // current P2\n+                    count++;\n+                }\n+                if (goeResponse.energy[6] > 0) { // current P3\n+                    count++;\n+                }\n+                return new DecimalType(count);\n+            case TEMPERATURE:\n+                return new QuantityType<>(goeResponse.temperature, SIUnits.CELSIUS);\n+            case SESSION_CHARGE_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumption / 360000d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                return new QuantityType<>((Double) (goeResponse.sessionChargeConsumptionLimit / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case TOTAL_CONSUMPTION:\n+                return new QuantityType<>((Double) (goeResponse.totalChargeConsumption / 10d),\n+                        SmartHomeUnits.KILOWATT_HOUR);\n+            case FIRMWARE:\n+                return new StringType(goeResponse.firmware);\n+            case VOLTAGE_L1:\n+                return new QuantityType<>(goeResponse.energy[0], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L2:\n+                return new QuantityType<>(goeResponse.energy[1], SmartHomeUnits.VOLT);\n+            case VOLTAGE_L3:\n+                return new QuantityType<>(goeResponse.energy[2], SmartHomeUnits.VOLT);\n+            case CURRENT_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[4] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[5] / 10d), SmartHomeUnits.AMPERE);\n+            case CURRENT_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[6] / 10d), SmartHomeUnits.AMPERE);\n+            case POWER_L1:\n+                return new QuantityType<>((Double) (goeResponse.energy[7] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L2:\n+                return new QuantityType<>((Double) (goeResponse.energy[8] / 10d), SmartHomeUnits.WATT);\n+            case POWER_L3:\n+                return new QuantityType<>((Double) (goeResponse.energy[9] / 10d), SmartHomeUnits.WATT);\n+        }\n+        return UnDefType.UNDEF;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // we can not update single channels and refresh is triggered automatically\n+            // anyways\n+            return;\n+        }\n+\n+        String key = null;\n+        String value = null;\n+        switch (channelUID.getId()) {\n+            case MAX_AMPERE:\n+                key = \"amp\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue());\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<ElectricCurrent>) command).toUnit(SmartHomeUnits.AMPERE).intValue());\n+                }\n+                break;\n+            case SESSION_CHARGE_CONSUMPTION_LIMIT:\n+                key = \"dwo\";\n+                if (command instanceof DecimalType) {\n+                    value = String.valueOf(((DecimalType) command).intValue() * 10);\n+                } else if (command instanceof QuantityType<?>) {\n+                    value = String.valueOf(\n+                            ((QuantityType<Energy>) command).toUnit(SmartHomeUnits.KILOWATT_HOUR).intValue() * 10);\n+                }\n+                break;\n+            case ALLOW_CHARGING:\n+                key = \"alw\";\n+                if (command instanceof OnOffType) {\n+                    value = command == OnOffType.ON ? \"1\" : \"0\";\n+                }\n+                break;\n+            default:\n+        }\n+        if (key != null && value != null) {\n+            sendData(key, value);\n+        } else {\n+            logger.warn(\"Could not update channel {} with key {} and value {}\", channelUID.getId(), key, value);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(GoEChargerConfiguration.class);\n+        allChannels = getThing().getChannels().stream().map(channel -> channel.getUID().getId())\n+                .collect(Collectors.toList());\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        startAutomaticRefresh();\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    private String getUrl(String type) {\n+        String urlStr = type;\n+        return urlStr.replace(\"%IP%\", StringUtils.trimToEmpty(config.ip));\n+    }\n+\n+    private void sendData(String key, String value) {\n+        String urlStr = getUrl(GoEChargerBindingConstants.MQTT_URL).replace(\"%KEY%\", key).replace(\"%VALUE%\", value);\n+        logger.debug(\"POST URL = {}\", urlStr);\n+\n+        String result = null;\n+        try {\n+            ContentResponse contentResponse = httpClient.newRequest(urlStr).method(HttpMethod.POST)\n+                    .timeout(5, TimeUnit.SECONDS).send();\n+\n+            result = contentResponse.getContentAsString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1NjUzMQ=="}, "originalCommit": {"oid": "16a9bfdb35e750d3fa2f9f64e20d13d587476bf8"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgyMTU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozNzowNlrOFz7rjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozNzowNlrOFz7rjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTUwMA==", "bodyText": "Since all String states are known, you can add state options for these. That makes them translatable and it allows them to show up nicer in UIs:\n\t\t<state readOnly=\"true\">\n\t\t\t<options>\n\t\t\t\t<option value=\"OPEN\">Open</option>\n\t\t\t\t<option value=\"RFID\">RFID</option>\n\t\t\t\t<option value=\"TIMER\">Timer</option>\n\t\t\t\t<option value=\"AWATTAR\">aWATTar</option>\n\t\t\t\t<option value=\"UNKNOWN\">Unknown</option>\n\t\t\t</options>\n\t\t</state>\nSee also: https://www.openhab.org/docs/developer/bindings/thing-xml.html#state-description", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r389999500", "createdAt": "2020-03-09T22:37:06Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgyOTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0MDo1MVrOFz7wWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0MDo1MVrOFz7wWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDczMA==", "bodyText": "Same here:\n\t\t<state readOnly=\"true\">\n\t\t\t<options>\n\t\t\t\t<option value=\"READY_NO_CAR\">Ready (no car)</option>\n\t\t\t\t<option value=\"CHARGING\">Charging</option>\n\t\t\t\t<option value=\"WAITING_FOR_CAR\">Waiting for car</option>\n\t\t\t\t<option value=\"CHARGING_DONE_CAR_CONNECTED\">Charging done (car connected)</option>\n\t\t\t</options>\n\t\t</state>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r390000730", "createdAt": "2020-03-09T22:40:51Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Pulse-width modulation signal status</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgzMDcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0MToxOVrOFz7w6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0MToxOVrOFz7w6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDg3Mg==", "bodyText": "<state readOnly=\"true\">\n\t\t\t<options>\n\t\t\t\t<option value=\"NONE\">None</option>\n\t\t\t\t<option value=\"RCCB\">RCCB</option>\n\t\t\t\t<option value=\"NO_GROUND\">No ground</option>\n\t\t\t\t<option value=\"INTERNAL\">Internal</option>\n\t\t\t</options>\n\t\t</state>", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r390000872", "createdAt": "2020-03-09T22:41:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Pulse-width modulation signal status</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgzNDEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0Mjo0OFrOFz7y6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0Mjo0OFrOFz7y6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMTM4NQ==", "bodyText": "Seems to be read only so you can add:\n<state readOnly=\"true\" />", "url": "https://github.com/openhab/openhab-addons/pull/7068#discussion_r390001385", "createdAt": "2020-03-09T22:42:48Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.goecharger/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,169 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"goecharger\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"goe\">\n+\t\t<label>Go-eCharger</label>\n+\t\t<description>Go-eCharger thing that represents the wallbox configuration and readings</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"maxCurrent\" typeId=\"current\" />\n+\t\t\t<channel id=\"pwmSignal\" typeId=\"pwm\" />\n+\t\t\t<channel id=\"error\" typeId=\"err\" />\n+\t\t\t<channel id=\"voltageL1\" typeId=\"vl1\" />\n+\t\t\t<channel id=\"voltageL2\" typeId=\"vl2\" />\n+\t\t\t<channel id=\"voltageL3\" typeId=\"vl3\" />\n+\t\t\t<channel id=\"currentL1\" typeId=\"cl1\" />\n+\t\t\t<channel id=\"currentL2\" typeId=\"cl2\" />\n+\t\t\t<channel id=\"currentL3\" typeId=\"cl3\" />\n+\t\t\t<channel id=\"powerL1\" typeId=\"pl1\" />\n+\t\t\t<channel id=\"powerL2\" typeId=\"pl2\" />\n+\t\t\t<channel id=\"powerL3\" typeId=\"pl3\" />\n+\t\t\t<channel id=\"phases\" typeId=\"pha\" />\n+\t\t\t<channel id=\"sessionChargeEnergyLimit\" typeId=\"scl\" />\n+\t\t\t<channel id=\"sessionChargedEnergy\" typeId=\"scs\" />\n+\t\t\t<channel id=\"totalChargedEnergy\" typeId=\"eto\" />\n+\t\t\t<channel id=\"allowCharging\" typeId=\"alw\" />\n+\t\t\t<channel id=\"cableCurrent\" typeId=\"cbl\" />\n+\t\t\t<channel id=\"temperature\" typeId=\"tmp\" />\n+\t\t\t<channel id=\"firmware\" typeId=\"fmw\" />\n+\t\t\t<channel id=\"accessState\" typeId=\"ast\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP Address</label>\n+\t\t\t\t<description>The IP address of the Go-eCharger</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" required=\"false\" unit=\"s\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<description>Refresh interval for acquiring data from Go-eCharger in seconds</description>\n+\t\t\t\t<unitLabel>s</unitLabel>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"ast\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Access State</label>\n+\t\t<description>Current access state of the go-eCharge</description>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Maximum Current</label>\n+\t\t<description>Max ampere per phase allowed to use for charging</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pwm\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>PWM signal status</label>\n+\t\t<description>Pulse-width modulation signal status</description>\n+\t</channel-type>\n+\t<channel-type id=\"err\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Error Code</label>\n+\t\t<description>Error code of Go-eCharger</description>\n+\t</channel-type>\n+\t<channel-type id=\"vl1\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage L1</label>\n+\t\t<description>Voltage on L1</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl2\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage L2</label>\n+\t\t<description>Voltage on L2</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"vl3\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage L3</label>\n+\t\t<description>Voltage on L3</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl1\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current L1</label>\n+\t\t<description>Current on L1</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl2\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current L2</label>\n+\t\t<description>Current on L2</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"cl3\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current L3</label>\n+\t\t<description>Current on L3</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl1\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power L1</label>\n+\t\t<description>Power on L1</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl2\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power L2</label>\n+\t\t<description>Power on L2</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pl3\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power L3</label>\n+\t\t<description>Power on L3</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"pha\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Phases</label>\n+\t\t<description>Amount of phases currently used for charging</description>\n+\t</channel-type>\n+\t<channel-type id=\"scl\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Current Session Charge Energy Limit</label>\n+\t\t<description>Wallbox stops charging after defined value, deactivate with value 0</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"false\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"scs\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Current Session Charged Energy</label>\n+\t\t<description>Amount of energy that has been charged in this session</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"eto\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Total Charged Energy</label>\n+\t\t<description>Amount of energy that has been charged since installation</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"alw\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Allow Charging</label>\n+\t\t<description>If true charging is allowed</description>\n+\t</channel-type>\n+\t<channel-type id=\"cbl\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Cable Encoding</label>\n+\t\t<description>Specifies the max amps that can be charged with that cable</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"tmp\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature of the Go-eCharger</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"fmw\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Firmware</label>\n+\t\t<description>Firmware Version</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2480f64648dc7fa847b0ea9f916ffd65705b1a41"}, "originalPosition": 167}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1000, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}