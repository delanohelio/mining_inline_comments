{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MjUzNjMw", "number": 9099, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1Mjo0OVrOE8JA4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0Mzo0NVrOE8OOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDk3Njk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1Mjo0OVrOH4GAmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozNDowNFrOH4HiwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDc2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return response != null ? new ArrayList<>(Arrays.asList(response)) : new ArrayList<>();\n          \n          \n            \n                    return response != null ? Arrays.asList(response)  : List.of();\n          \n      \n    \n    \n  \n\nor is it necessary to alter the array afterwards?\n(Also applies below).", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528580762", "createdAt": "2020-11-23T09:52:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -234,71 +231,27 @@ private void setTooManyRequests() {\n     }\n \n     private @Nullable String registerEvents() {\n-        String url;\n+        SomfyTahomaRegisterEventsResponse response = invokeCallToURL(TAHOMA_EVENTS_URL + \"register\", \"\",\n+                HttpMethod.POST, SomfyTahomaRegisterEventsResponse.class);\n+        return response != null ? response.getId() : null;\n+    }\n \n+    private String urlEncode(String text) {\n         try {\n-            url = TAHOMA_EVENTS_URL + \"register\";\n-\n-            String line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaRegisterEventsResponse response = gson.fromJson(line, SomfyTahomaRegisterEventsResponse.class);\n-            return response.getId();\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received invalid data\", e);\n-            return null;\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.info(\"Cannot register events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.info(\"Cannot register events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n+            return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            return text;\n         }\n-        return null;\n-    }\n-\n-    private String urlEncode(String text) throws UnsupportedEncodingException {\n-        return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n     }\n \n     private void enableLogin() {\n         tooManyRequests = false;\n     }\n \n     private List<SomfyTahomaEvent> getEvents() {\n-        String url;\n-        String line = \"\";\n-\n-        try {\n-            url = TAHOMA_API_URL + \"events/\" + eventsId + \"/fetch\";\n-\n-            line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaEvent[] array = gson.fromJson(line, SomfyTahomaEvent[].class);\n-            return new ArrayList<>(Arrays.asList(array));\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", line, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-            } else {\n-                logger.debug(\"Cannot get Tahoma events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot get Tahoma events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return new ArrayList<>();\n+        SomfyTahomaEvent[] response = invokeCallToURL(TAHOMA_API_URL + \"events/\" + eventsId + \"/fetch\", \"\",\n+                HttpMethod.POST, SomfyTahomaEvent[].class);\n+        return response != null ? new ArrayList<>(Arrays.asList(response)) : new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNTg4OA==", "bodyText": "Fixed.", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528605888", "createdAt": "2020-11-23T10:34:04Z", "author": {"login": "octa22"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -234,71 +231,27 @@ private void setTooManyRequests() {\n     }\n \n     private @Nullable String registerEvents() {\n-        String url;\n+        SomfyTahomaRegisterEventsResponse response = invokeCallToURL(TAHOMA_EVENTS_URL + \"register\", \"\",\n+                HttpMethod.POST, SomfyTahomaRegisterEventsResponse.class);\n+        return response != null ? response.getId() : null;\n+    }\n \n+    private String urlEncode(String text) {\n         try {\n-            url = TAHOMA_EVENTS_URL + \"register\";\n-\n-            String line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaRegisterEventsResponse response = gson.fromJson(line, SomfyTahomaRegisterEventsResponse.class);\n-            return response.getId();\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received invalid data\", e);\n-            return null;\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.info(\"Cannot register events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.info(\"Cannot register events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n+            return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            return text;\n         }\n-        return null;\n-    }\n-\n-    private String urlEncode(String text) throws UnsupportedEncodingException {\n-        return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n     }\n \n     private void enableLogin() {\n         tooManyRequests = false;\n     }\n \n     private List<SomfyTahomaEvent> getEvents() {\n-        String url;\n-        String line = \"\";\n-\n-        try {\n-            url = TAHOMA_API_URL + \"events/\" + eventsId + \"/fetch\";\n-\n-            line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaEvent[] array = gson.fromJson(line, SomfyTahomaEvent[].class);\n-            return new ArrayList<>(Arrays.asList(array));\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", line, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-            } else {\n-                logger.debug(\"Cannot get Tahoma events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot get Tahoma events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return new ArrayList<>();\n+        SomfyTahomaEvent[] response = invokeCallToURL(TAHOMA_API_URL + \"events/\" + eventsId + \"/fetch\", \"\",\n+                HttpMethod.POST, SomfyTahomaEvent[].class);\n+        return response != null ? new ArrayList<>(Arrays.asList(response)) : new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MDc2Mg=="}, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDk3OTQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1MzoyOFrOH4GCGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo1NjoxMFrOH4ITuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MTE0NQ==", "bodyText": "This is a change from the behaviour before. Is that intended? Before the thing changed to OFFLINE in case of an encoding error.", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528581145", "createdAt": "2020-11-23T09:53:28Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -234,71 +231,27 @@ private void setTooManyRequests() {\n     }\n \n     private @Nullable String registerEvents() {\n-        String url;\n+        SomfyTahomaRegisterEventsResponse response = invokeCallToURL(TAHOMA_EVENTS_URL + \"register\", \"\",\n+                HttpMethod.POST, SomfyTahomaRegisterEventsResponse.class);\n+        return response != null ? response.getId() : null;\n+    }\n \n+    private String urlEncode(String text) {\n         try {\n-            url = TAHOMA_EVENTS_URL + \"register\";\n-\n-            String line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaRegisterEventsResponse response = gson.fromJson(line, SomfyTahomaRegisterEventsResponse.class);\n-            return response.getId();\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received invalid data\", e);\n-            return null;\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.info(\"Cannot register events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.info(\"Cannot register events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n+            return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            return text;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxODQyNA==", "bodyText": "yes, this is intended. From my point of view there is no need to put thing OFFLINE, rather return unencoded string", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528618424", "createdAt": "2020-11-23T10:56:10Z", "author": {"login": "octa22"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -234,71 +231,27 @@ private void setTooManyRequests() {\n     }\n \n     private @Nullable String registerEvents() {\n-        String url;\n+        SomfyTahomaRegisterEventsResponse response = invokeCallToURL(TAHOMA_EVENTS_URL + \"register\", \"\",\n+                HttpMethod.POST, SomfyTahomaRegisterEventsResponse.class);\n+        return response != null ? response.getId() : null;\n+    }\n \n+    private String urlEncode(String text) {\n         try {\n-            url = TAHOMA_EVENTS_URL + \"register\";\n-\n-            String line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaRegisterEventsResponse response = gson.fromJson(line, SomfyTahomaRegisterEventsResponse.class);\n-            return response.getId();\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received invalid data\", e);\n-            return null;\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.info(\"Cannot register events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.info(\"Cannot register events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n+            return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            return text;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4MTE0NQ=="}, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTAwNjA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTo1OTo0NVrOH4GSMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozODoxMlrOH4HsMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTI2NQ==", "bodyText": "StringUtils should not be used in new code. In this case you can just use state.getName().isEmpty() since getName() is non-null.", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528585265", "createdAt": "2020-11-23T09:59:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -913,28 +676,48 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     public synchronized void refresh(String url, String stateName) {\n+        SomfyTahomaState state = invokeCallToURL(DEVICES_URL + urlEncode(url) + \"/states/\" + stateName, \"\",\n+                HttpMethod.GET, SomfyTahomaState.class);\n+        if (state != null && StringUtils.isNotEmpty(state.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 422}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwODMwNQ==", "bodyText": "ok, fixed", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528608305", "createdAt": "2020-11-23T10:38:12Z", "author": {"login": "octa22"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -913,28 +676,48 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     public synchronized void refresh(String url, String stateName) {\n+        SomfyTahomaState state = invokeCallToURL(DEVICES_URL + urlEncode(url) + \"/states/\" + stateName, \"\",\n+                HttpMethod.GET, SomfyTahomaState.class);\n+        if (state != null && StringUtils.isNotEmpty(state.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTI2NQ=="}, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 422}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTAwODA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDowMDoxMFrOH4GTZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozODozMVrOH4Hs1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateDevice(url, Arrays.asList(state));\n          \n          \n            \n                        updateDevice(url, List.of(state));", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528585575", "createdAt": "2020-11-23T10:00:10Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -913,28 +676,48 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     public synchronized void refresh(String url, String stateName) {\n+        SomfyTahomaState state = invokeCallToURL(DEVICES_URL + urlEncode(url) + \"/states/\" + stateName, \"\",\n+                HttpMethod.GET, SomfyTahomaState.class);\n+        if (state != null && StringUtils.isNotEmpty(state.getName())) {\n+            updateDevice(url, Arrays.asList(state));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 423}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwODQ2OQ==", "bodyText": "Fixed", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528608469", "createdAt": "2020-11-23T10:38:31Z", "author": {"login": "octa22"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -913,28 +676,48 @@ public void handleConfigurationUpdate(Map<String, Object> configurationParameter\n     }\n \n     public synchronized void refresh(String url, String stateName) {\n+        SomfyTahomaState state = invokeCallToURL(DEVICES_URL + urlEncode(url) + \"/states/\" + stateName, \"\",\n+                HttpMethod.GET, SomfyTahomaState.class);\n+        if (state != null && StringUtils.isNotEmpty(state.getName())) {\n+            updateDevice(url, Arrays.asList(state));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NTU3NQ=="}, "originalCommit": {"oid": "55f0e4d6b54e2a74847c024e089d959a672d9570"}, "originalPosition": 423}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTgxOTAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0MDo1OVrOH4N54A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0MDo1OVrOH4N54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMDExMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return response != null ? Arrays.asList(response) : Collections.emptyList();\n          \n          \n            \n                    return response != null ? List.of(response) : List.of();", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528710112", "createdAt": "2020-11-23T13:40:59Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -356,103 +309,19 @@ private void stopPolling() {\n     }\n \n     public List<SomfyTahomaActionGroup> listActionGroups() {\n-        String groups = getGroups();\n-        if (StringUtils.equals(groups, UNAUTHORIZED)) {\n-            groups = getGroups();\n-        }\n-\n-        if (groups == null || groups.equals(UNAUTHORIZED)) {\n-            return Collections.emptyList();\n-        }\n-\n-        try {\n-            SomfyTahomaActionGroup[] list = gson.fromJson(groups, SomfyTahomaActionGroup[].class);\n-            return Arrays.asList(list);\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", groups, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        }\n-        return new ArrayList<>();\n-    }\n-\n-    private @Nullable String getGroups() {\n-        String url;\n-\n-        try {\n-            url = TAHOMA_API_URL + \"actionGroups\";\n-            return sendGetToTahomaWithCookie(url);\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.debug(\"Cannot send getActionGroups command!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot send getActionGroups command!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return null;\n+        SomfyTahomaActionGroup[] list = invokeCallToURL(TAHOMA_API_URL + \"actionGroups\", \"\", HttpMethod.GET,\n+                SomfyTahomaActionGroup[].class);\n+        return list != null ? Arrays.asList(list) : new ArrayList<>();\n     }\n \n     public @Nullable SomfyTahomaSetup getSetup() {\n-        String url;\n-        String line = \"\";\n-\n-        try {\n-            url = TAHOMA_API_URL + \"setup\";\n-            line = sendGetToTahomaWithCookie(url);\n-            return gson.fromJson(line, SomfyTahomaSetup.class);\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", line, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-            } else {\n-                logger.debug(\"Cannot send getSetup command!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot send getSetup command!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return null;\n+        return invokeCallToURL(TAHOMA_API_URL + \"setup\", \"\", HttpMethod.GET, SomfyTahomaSetup.class);\n     }\n \n     public List<SomfyTahomaDevice> getDevices() {\n-        String url;\n-        String line = \"\";\n-\n-        try {\n-            url = SETUP_URL + \"devices\";\n-            line = sendGetToTahomaWithCookie(url);\n-            return Arrays.asList(gson.fromJson(line, SomfyTahomaDevice[].class));\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", line, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-            } else {\n-                logger.debug(\"Cannot send get devices command!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot send get devices command!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return Collections.emptyList();\n+        SomfyTahomaDevice[] response = invokeCallToURL(SETUP_URL + \"devices\", \"\", HttpMethod.GET,\n+                SomfyTahomaDevice[].class);\n+        return response != null ? Arrays.asList(response) : Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d34f3ffdfe2d53846047abd751a7e46fd2c86f"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTgyMTk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0MTo0NFrOH4N7zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0MTo0NFrOH4N7zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMDYwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return response != null ? new ArrayList<>(List.of(response)) : List.of();\n          \n          \n            \n                    return response != null ? List.of(response) : List.of();", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528710604", "createdAt": "2020-11-23T13:41:44Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -234,71 +231,27 @@ private void setTooManyRequests() {\n     }\n \n     private @Nullable String registerEvents() {\n-        String url;\n+        SomfyTahomaRegisterEventsResponse response = invokeCallToURL(TAHOMA_EVENTS_URL + \"register\", \"\",\n+                HttpMethod.POST, SomfyTahomaRegisterEventsResponse.class);\n+        return response != null ? response.getId() : null;\n+    }\n \n+    private String urlEncode(String text) {\n         try {\n-            url = TAHOMA_EVENTS_URL + \"register\";\n-\n-            String line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaRegisterEventsResponse response = gson.fromJson(line, SomfyTahomaRegisterEventsResponse.class);\n-            return response.getId();\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received invalid data\", e);\n-            return null;\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.info(\"Cannot register events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.info(\"Cannot register events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n+            return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n+        } catch (UnsupportedEncodingException e) {\n+            return text;\n         }\n-        return null;\n-    }\n-\n-    private String urlEncode(String text) throws UnsupportedEncodingException {\n-        return URLEncoder.encode(text, StandardCharsets.UTF_8.toString());\n     }\n \n     private void enableLogin() {\n         tooManyRequests = false;\n     }\n \n     private List<SomfyTahomaEvent> getEvents() {\n-        String url;\n-        String line = \"\";\n-\n-        try {\n-            url = TAHOMA_API_URL + \"events/\" + eventsId + \"/fetch\";\n-\n-            line = sendPostToTahomaWithCookie(url, \"\");\n-            SomfyTahomaEvent[] array = gson.fromJson(line, SomfyTahomaEvent[].class);\n-            return new ArrayList<>(Arrays.asList(array));\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", line, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-            } else {\n-                logger.debug(\"Cannot get Tahoma events!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot get Tahoma events!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return new ArrayList<>();\n+        SomfyTahomaEvent[] response = invokeCallToURL(TAHOMA_API_URL + \"events/\" + eventsId + \"/fetch\", \"\",\n+                HttpMethod.POST, SomfyTahomaEvent[].class);\n+        return response != null ? new ArrayList<>(List.of(response)) : List.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d34f3ffdfe2d53846047abd751a7e46fd2c86f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTgyMzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0MjoxMFrOH4N85g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0MjoxMFrOH4N85g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMDg4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return list != null ? Arrays.asList(list) : new ArrayList<>();\n          \n          \n            \n                    return list != null ? List.of(list) : List.of();", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528710886", "createdAt": "2020-11-23T13:42:10Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -356,103 +309,19 @@ private void stopPolling() {\n     }\n \n     public List<SomfyTahomaActionGroup> listActionGroups() {\n-        String groups = getGroups();\n-        if (StringUtils.equals(groups, UNAUTHORIZED)) {\n-            groups = getGroups();\n-        }\n-\n-        if (groups == null || groups.equals(UNAUTHORIZED)) {\n-            return Collections.emptyList();\n-        }\n-\n-        try {\n-            SomfyTahomaActionGroup[] list = gson.fromJson(groups, SomfyTahomaActionGroup[].class);\n-            return Arrays.asList(list);\n-        } catch (JsonSyntaxException e) {\n-            logger.debug(\"Received data: {} is not JSON\", groups, e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Received invalid data\");\n-        }\n-        return new ArrayList<>();\n-    }\n-\n-    private @Nullable String getGroups() {\n-        String url;\n-\n-        try {\n-            url = TAHOMA_API_URL + \"actionGroups\";\n-            return sendGetToTahomaWithCookie(url);\n-        } catch (ExecutionException e) {\n-            if (isAuthenticationChallenge(e)) {\n-                reLogin();\n-                return UNAUTHORIZED;\n-            } else {\n-                logger.debug(\"Cannot send getActionGroups command!\", e);\n-                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            }\n-        } catch (InterruptedException | TimeoutException e) {\n-            logger.debug(\"Cannot send getActionGroups command!\", e);\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\n-            if (e instanceof InterruptedException) {\n-                Thread.currentThread().interrupt();\n-            }\n-        }\n-        return null;\n+        SomfyTahomaActionGroup[] list = invokeCallToURL(TAHOMA_API_URL + \"actionGroups\", \"\", HttpMethod.GET,\n+                SomfyTahomaActionGroup[].class);\n+        return list != null ? Arrays.asList(list) : new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d34f3ffdfe2d53846047abd751a7e46fd2c86f"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTgzMDMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0Mzo0NVrOH4OAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzo0Mzo0NVrOH4OAyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMTg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!StringUtils.isEmpty(response.getExecId())) {\n          \n          \n            \n                        if (!response.getExecId().isEmpty()) {", "url": "https://github.com/openhab/openhab-addons/pull/9099#discussion_r528711882", "createdAt": "2020-11-23T13:43:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.somfytahoma/src/main/java/org/openhab/binding/somfytahoma/internal/handler/SomfyTahomaBridgeHandler.java", "diffHunk": "@@ -693,54 +562,29 @@ public void sendCommand(String io, String command, String params) {\n         }\n \n         Boolean result = sendCommandInternal(io, command, params);\n-        if (result != null && !result) {\n+        if (!result) {\n             sendCommandInternal(io, command, params);\n         }\n     }\n \n-    private @Nullable Boolean sendCommandInternal(String io, String command, String params) {\n-        String url;\n-        String line = \"\";\n-\n-        try {\n-            url = EXEC_URL + \"apply\";\n-\n-            String value = params.equals(\"[]\") ? command : params.replace(\"\\\"\", \"\");\n-            String urlParameters = \"{\\\"label\\\":\\\"\" + getThingLabelByURL(io) + \" - \" + value\n-                    + \" - OH2\\\",\\\"actions\\\":[{\\\"deviceURL\\\":\\\"\" + io + \"\\\",\\\"commands\\\":[{\\\"name\\\":\\\"\" + command\n-                    + \"\\\",\\\"parameters\\\":\" + params + \"}]}]}\";\n-\n-            line = sendPostToTahomaWithCookie(url, urlParameters);\n-\n-            SomfyTahomaApplyResponse data = gson.fromJson(line, SomfyTahomaApplyResponse.class);\n-\n-            if (!StringUtils.isEmpty(data.getExecId())) {\n-                logger.debug(\"Exec id: {}\", data.getExecId());\n-                registerExecution(io, data.getExecId());\n+    private Boolean sendCommandInternal(String io, String command, String params) {\n+        String value = params.equals(\"[]\") ? command : params.replace(\"\\\"\", \"\");\n+        String urlParameters = \"{\\\"label\\\":\\\"\" + getThingLabelByURL(io) + \" - \" + value\n+                + \" - OH2\\\",\\\"actions\\\":[{\\\"deviceURL\\\":\\\"\" + io + \"\\\",\\\"commands\\\":[{\\\"name\\\":\\\"\" + command\n+                + \"\\\",\\\"parameters\\\":\" + params + \"}]}]}\";\n+        SomfyTahomaApplyResponse response = invokeCallToURL(EXEC_URL + \"apply\", urlParameters, HttpMethod.POST,\n+                SomfyTahomaApplyResponse.class);\n+        if (response != null) {\n+            if (!StringUtils.isEmpty(response.getExecId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d34f3ffdfe2d53846047abd751a7e46fd2c86f"}, "originalPosition": 241}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3965, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}