{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MDQxOTk1", "number": 8220, "title": "[avmfritz] added call monitor support", "bodyText": "Implements #8167\nSigned-off-by: Kai Kreuzer kai@openhab.org", "createdAt": "2020-07-28T20:38:46Z", "url": "https://github.com/openhab/openhab-addons/pull/8220", "merged": true, "mergeCommit": {"oid": "5fc5428756b9fe6f34d32468742f306e281580e8"}, "closed": true, "closedAt": "2020-08-09T07:53:56Z", "author": {"login": "kaikreuzer"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5clQWAH2gAyNDU4MDQxOTk1OjdiMjRmOGUyM2RkNGI3OTVmY2RhODA4MGYwZjE4ZjhjZDNiZTIwMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc82wSIgFqTQ2Mzc5NTQzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b24f8e23dd4b795fcda8080f0f18f8cd3be2029", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/7b24f8e23dd4b795fcda8080f0f18f8cd3be2029", "committedDate": "2020-07-28T20:37:48Z", "message": "added call monitor support\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/cb5804546ae9809dc3f8d2c9228b4fcd47b53c43", "committedDate": "2020-07-28T21:35:21Z", "message": "addressed SAT findings\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjI1NjY2", "url": "https://github.com/openhab/openhab-addons/pull/8220#pullrequestreview-457225666", "createdAt": "2020-07-29T06:23:21Z", "commit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjoyMzoyMVrOG4qNeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjozNjo0MFrOG4qicA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2NTAxOA==", "bodyText": "I would change the order to \"RING\".equals(callType) to avoid NPEs later on", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r462065018", "createdAt": "2020-07-29T06:23:21Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/callmonitor/CallEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.callmonitor;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Call Events received from a fritzbox.\n+ *\n+ * 12.07.20 09:11:30;RING;0;0171123456;888888;SIP2;\n+ * 12.07.20 09:13:40;DISCONNECT;0;0;\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class CallEvent {\n+\n+    private final String rawEvent;\n+    private final String timestamp;\n+    private final String callType;\n+    private final String id;\n+    private final String externalNo;\n+    private final @Nullable String internalNo;\n+    private final @Nullable String connectionType;\n+    private final @Nullable String line;\n+\n+    public CallEvent(String rawEvent) {\n+        this.rawEvent = rawEvent;\n+\n+        String[] fields = rawEvent.split(\";\");\n+        if (fields.length < 4) {\n+            throw new IllegalArgumentException(\"Cannot parse call event: \" + rawEvent);\n+        }\n+\n+        timestamp = fields[0];\n+        callType = fields[1];\n+        id = fields[2];\n+\n+        if (callType.equals(\"RING\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2NzU4NA==", "bodyText": "I think 5 seconds is really long reaction time for binding, Maybe this should be a configuration Parameter", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r462067584", "createdAt": "2020-07-29T06:29:33Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/callmonitor/CallMonitor.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.callmonitor;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.Socket;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.avmfritz.internal.AVMFritzBindingConstants;\n+import org.openhab.binding.avmfritz.internal.handler.BoxHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class handles all communication with the call monitor port of the fritzbox.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class CallMonitor {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(CallMonitor.class);\n+\n+    // port number to connect to fritzbox\n+    private final int MONITOR_PORT = 1012;\n+\n+    private @Nullable CallMonitorThread monitorThread;\n+    private ScheduledFuture<?> reconnectJob;\n+\n+    private String ip;\n+    private BoxHandler handler;\n+\n+    public CallMonitor(String ip, BoxHandler handler, ScheduledExecutorService scheduler) {\n+        this.ip = ip;\n+        this.handler = handler;\n+        reconnectJob = scheduler.scheduleWithFixedDelay(() -> {\n+            stopThread();\n+\n+            // Wait before reconnect\n+            try {\n+                Thread.sleep(5000L);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            // create a new thread for listening to the FritzBox\n+            logger.debug(\"Reconnecting to Fritzbox call monitor port.\");\n+            monitorThread = new CallMonitorThread();\n+            monitorThread.start();\n+        }, 0, 2, TimeUnit.HOURS);\n+    }\n+\n+    /**\n+     * Cancel the reconnect job.\n+     */\n+    public void dispose() {\n+        reconnectJob.cancel(true);\n+    }\n+\n+    public class CallMonitorThread extends Thread {\n+\n+        // Socket to connect\n+        private @Nullable Socket socket;\n+\n+        // Thread control flag\n+        private boolean interrupted = false;\n+\n+        // time to wait before reconnecting\n+        private long reconnectTime = 60000L;\n+\n+        public CallMonitorThread() {\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (!interrupted) {\n+                BufferedReader reader = null;\n+                try {\n+                    logger.debug(\"Callmonitor thread [{}] attempting connection to FritzBox on {}:{}.\",\n+                            Thread.currentThread().getId(), ip, MONITOR_PORT);\n+                    socket = new Socket(ip, MONITOR_PORT);\n+                    reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    // reset the retry interval\n+                    reconnectTime = 60000L;\n+                } catch (Exception e) {\n+                    logger.warn(\"Error attempting to connect to FritzBox. Retrying in {} seconds\",\n+                            reconnectTime / 1000L, e);\n+                    try {\n+                        Thread.sleep(reconnectTime);\n+                    } catch (InterruptedException ex) {\n+                        interrupted = true;\n+                    }\n+                    // wait another more minute the next time\n+                    reconnectTime += 60000L;\n+                }\n+                if (reader != null) {\n+                    logger.info(\"Connected to FritzBox call monitor at {}:{}.\", ip, MONITOR_PORT);\n+                    while (!interrupted) {\n+                        try {\n+                            String line = reader.readLine();\n+                            if (line != null) {\n+                                logger.debug(\"Received raw call string from fbox: {}\", line);\n+                                CallEvent ce = new CallEvent(line);\n+                                handleCallEvent(ce);\n+                            }\n+                        } catch (IOException e) {\n+                            if (interrupted) {\n+                                logger.debug(\"Lost connection to Fritzbox because of an interrupt.\");\n+                            } else {\n+                                logger.warn(\"Lost connection to FritzBox: {}\", e.getMessage());\n+                            }\n+                            break;\n+                        } finally {\n+                            try {\n+                                sleep(5000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTQ4Ng==", "bodyText": "If I remind correctly call monitor is not activated by default on the fritz box. So maybe this should be although configurable whether call monitor should be initiated. We could reuse the config parameter above.", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r462069486", "createdAt": "2020-07-29T06:34:25Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/BoxHandler.java", "diffHunk": "@@ -35,4 +42,24 @@ public BoxHandler(Bridge bridge, HttpClient httpClient,\n             AVMFritzDynamicCommandDescriptionProvider commandDescriptionProvider) {\n         super(bridge, httpClient, commandDescriptionProvider);\n     }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        String ip = getConfigAs(AVMFritzBoxConfiguration.class).ipAddress;\n+        callMonitor = new CallMonitor(ip, this, scheduler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MDM4NA==", "bodyText": "See my comment above about activation of call monitor. So this channels should be added dynamicly if call monitor is active", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r462070384", "createdAt": "2020-07-29T06:36:40Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/resources/ESH-INF/thing/bridge-types.xml", "diffHunk": "@@ -7,9 +7,12 @@\n \t<!-- Supported FRITZ!Box and FRITZ!Powerline -->\n \t<bridge-type id=\"fritzbox\">\n \t\t<label>FRITZ!Box</label>\n-\t\t<description>This bridge represents a FRITZ!Box.</description>\n+\t\t<description>A FRITZ!Box router.</description>\n \n \t\t<channels>\n+\t\t\t<channel id=\"incoming_call\" typeId=\"incoming_call\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "355184b1a91e340a557f8eccf2d201208ba1151a", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/355184b1a91e340a557f8eccf2d201208ba1151a", "committedDate": "2020-08-02T21:26:04Z", "message": "added missing bits and pieces\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a1e861a6011212408363175255117d54ed0fe79", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/7a1e861a6011212408363175255117d54ed0fe79", "committedDate": "2020-08-02T21:31:32Z", "message": "fixed SAT error\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/1a95b277838c38642d23ed84cb1135825055efb7", "committedDate": "2020-08-02T21:44:00Z", "message": "applied thread naming convention\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTMzNzE2", "url": "https://github.com/openhab/openhab-addons/pull/8220#pullrequestreview-461933716", "createdAt": "2020-08-05T18:49:47Z", "commit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo0OTo0N1rOG8WSnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOTowNzowMVrOG8W3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzMjk1OQ==", "bodyText": "Don't we have to UNDEF the other channels all the time? Otherwise their state will remain on old value until the next call / event.", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r465932959", "createdAt": "2020-08-05T18:49:47Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/callmonitor/CallMonitor.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.callmonitor;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.Socket;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.StringListType;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.avmfritz.internal.AVMFritzBindingConstants;\n+import org.openhab.binding.avmfritz.internal.handler.BoxHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class handles all communication with the call monitor port of the fritzbox.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class CallMonitor {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(CallMonitor.class);\n+\n+    // port number to connect to fritzbox\n+    private final int MONITOR_PORT = 1012;\n+\n+    private @Nullable CallMonitorThread monitorThread;\n+    private ScheduledFuture<?> reconnectJob;\n+\n+    private String ip;\n+    private BoxHandler handler;\n+\n+    public CallMonitor(String ip, BoxHandler handler, ScheduledExecutorService scheduler) {\n+        this.ip = ip;\n+        this.handler = handler;\n+        reconnectJob = scheduler.scheduleWithFixedDelay(() -> {\n+            stopThread();\n+\n+            // Wait before reconnect\n+            try {\n+                Thread.sleep(5000L);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            // create a new thread for listening to the FritzBox\n+            CallMonitorThread thread = new CallMonitorThread();\n+            thread.setName(\"OH-binding-\" + handler.getThing().getUID().getAsString());\n+            thread.start();\n+            this.monitorThread = thread;\n+        }, 0, 2, TimeUnit.HOURS);\n+    }\n+\n+    /**\n+     * Cancel the reconnect job.\n+     */\n+    public void dispose() {\n+        reconnectJob.cancel(true);\n+    }\n+\n+    public class CallMonitorThread extends Thread {\n+\n+        // Socket to connect\n+        private @Nullable Socket socket;\n+\n+        // Thread control flag\n+        private boolean interrupted = false;\n+\n+        // time to wait before reconnecting\n+        private long reconnectTime = 60000L;\n+\n+        public CallMonitorThread() {\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (!interrupted) {\n+                BufferedReader reader = null;\n+                try {\n+                    logger.debug(\"Callmonitor thread [{}] attempting connection to FritzBox on {}:{}.\",\n+                            Thread.currentThread().getId(), ip, MONITOR_PORT);\n+                    socket = new Socket(ip, MONITOR_PORT);\n+                    reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+                    // reset the retry interval\n+                    reconnectTime = 60000L;\n+                } catch (Exception e) {\n+                    handler.setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                            \"Cannot connect to Fritz!Box call monitor - make sure to enable it!\");\n+                    logger.debug(\"Error attempting to connect to FritzBox. Retrying in {} seconds\",\n+                            reconnectTime / 1000L, e);\n+                    try {\n+                        Thread.sleep(reconnectTime);\n+                    } catch (InterruptedException ex) {\n+                        interrupted = true;\n+                    }\n+                    // wait another more minute the next time\n+                    reconnectTime += 60000L;\n+                }\n+                if (reader != null) {\n+                    logger.debug(\"Connected to FritzBox call monitor at {}:{}.\", ip, MONITOR_PORT);\n+                    handler.setStatusInfo(ThingStatus.ONLINE, ThingStatusDetail.NONE, null);\n+                    while (!interrupted) {\n+                        try {\n+                            String line = reader.readLine();\n+                            if (line != null) {\n+                                logger.debug(\"Received raw call string from fbox: {}\", line);\n+                                CallEvent ce = new CallEvent(line);\n+                                handleCallEvent(ce);\n+                            }\n+                        } catch (IOException e) {\n+                            if (interrupted) {\n+                                logger.debug(\"Lost connection to Fritzbox because of an interrupt.\");\n+                            } else {\n+                                handler.setStatusInfo(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                                        \"Lost connection to Fritz!Box: \" + e.getMessage());\n+                            }\n+                            break;\n+                        } finally {\n+                            try {\n+                                sleep(1000L);\n+                            } catch (InterruptedException e) {\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        /**\n+         * Close socket and stop running thread.\n+         */\n+        @Override\n+        public void interrupt() {\n+            interrupted = true;\n+            if (socket != null) {\n+                try {\n+                    socket.close();\n+                    logger.debug(\"Socket to FritzBox closed.\");\n+                } catch (IOException e) {\n+                    logger.warn(\"Failed to close connection to FritzBox.\", e);\n+                }\n+            } else {\n+                logger.debug(\"Socket to FritzBox not open, therefore not closing it.\");\n+            }\n+        }\n+\n+        /**\n+         * Handle call event and update item as required.\n+         *\n+         * @param ce call event to process\n+         */\n+        private void handleCallEvent(CallEvent ce) {\n+            if (ce.getCallType().equals(\"DISCONNECT\")) {\n+                // reset states of call monitor channels\n+                handler.updateState(AVMFritzBindingConstants.CHANNEL_CALL_INCOMING, UnDefType.NULL);\n+                handler.updateState(AVMFritzBindingConstants.CHANNEL_CALL_OUTGOING, UnDefType.NULL);\n+                handler.updateState(AVMFritzBindingConstants.CHANNEL_CALL_ACTIVE, UnDefType.NULL);\n+                handler.updateState(AVMFritzBindingConstants.CHANNEL_CALL_STATE,\n+                        AVMFritzBindingConstants.CALL_STATE_IDLE);\n+            } else if (ce.getCallType().equals(\"RING\")) { // first event when call is incoming\n+                StringListType state = new StringListType(ce.getInternalNo(), ce.getExternalNo());\n+                handler.updateState(AVMFritzBindingConstants.CHANNEL_CALL_INCOMING, state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzMzkwMw==", "bodyText": "This should have org.eclipse.smarthome.core.thing namespace.", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r465933903", "createdAt": "2020-08-05T18:51:32Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java", "diffHunk": "@@ -59,6 +59,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import io.netty.channel.Channel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MDIyMQ==", "bodyText": "Should we dispose the CallMonitor if all call monitor channels are unlinked?", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r465940221", "createdAt": "2020-08-05T19:02:53Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java", "diffHunk": "@@ -140,13 +141,26 @@ public void initialize() {\n         }\n \n         if (configValid) {\n-            this.connection = new FritzAhaWebInterface(config, this, httpClient);\n+            updateStatus(ThingStatus.UNKNOWN);\n+            initConnections();\n+        }\n+    }\n \n+    protected synchronized void initConnections() {\n+        AVMFritzBoxConfiguration config = getConfigAs(AVMFritzBoxConfiguration.class);\n+        if (this.connection == null) {\n+            this.connection = new FritzAhaWebInterface(config, this, httpClient);\n             stopPolling();\n             startPolling();\n         }\n     }\n \n+    @Override\n+    public void channelLinked(ChannelUID channelUID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MTM3NA==", "bodyText": "You can reuse the callChannelsLinked() method here. Maybe store its result in local variable and access it later.", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r465941374", "createdAt": "2020-08-05T19:05:07Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/BoxHandler.java", "diffHunk": "@@ -35,4 +58,45 @@ public BoxHandler(Bridge bridge, HttpClient httpClient,\n             AVMFritzDynamicCommandDescriptionProvider commandDescriptionProvider) {\n         super(bridge, httpClient, commandDescriptionProvider);\n     }\n+\n+    @Override\n+    protected void initConnections() {\n+        AVMFritzBoxConfiguration config = getConfigAs(AVMFritzBoxConfiguration.class);\n+        if (this.callMonitor == null && (isLinked(AVMFritzBindingConstants.CHANNEL_CALL_ACTIVE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MjMyOA==", "bodyText": "I do not understand this? Why do you need to override it and just call the super method?", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r465942328", "createdAt": "2020-08-05T19:07:01Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/BoxHandler.java", "diffHunk": "@@ -35,4 +58,45 @@ public BoxHandler(Bridge bridge, HttpClient httpClient,\n             AVMFritzDynamicCommandDescriptionProvider commandDescriptionProvider) {\n         super(bridge, httpClient, commandDescriptionProvider);\n     }\n+\n+    @Override\n+    protected void initConnections() {\n+        AVMFritzBoxConfiguration config = getConfigAs(AVMFritzBoxConfiguration.class);\n+        if (this.callMonitor == null && (isLinked(AVMFritzBindingConstants.CHANNEL_CALL_ACTIVE)\n+                || isLinked(AVMFritzBindingConstants.CHANNEL_CALL_INCOMING)\n+                || isLinked(AVMFritzBindingConstants.CHANNEL_CALL_OUTGOING)\n+                || isLinked(AVMFritzBindingConstants.CHANNEL_CALL_STATE))) {\n+            this.callMonitor = new CallMonitor(config.ipAddress, this, scheduler);\n+        }\n+        if (this.connection == null) {\n+            if (config.password != null) {\n+                this.connection = new FritzAhaWebInterface(config, this, httpClient);\n+                stopPolling();\n+                startPolling();\n+            } else {\n+                if (!callChannelsLinked()) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                            \"The 'password' parameter must be configured to use the AHA features.\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean callChannelsLinked() {\n+        return getThing().getChannels().stream()\n+                .filter(c -> isLinked(c.getUID()) && CALL_CHANNELS.contains(c.getUID().getId())).count() > 0;\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (callMonitor != null) {\n+            callMonitor.dispose();\n+        }\n+        super.dispose();\n+    }\n+\n+    @Override\n+    public void updateState(String channelID, State state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a95b277838c38642d23ed84cb1135825055efb7"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e775103afd10247088338906d661432a199b8834", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/e775103afd10247088338906d661432a199b8834", "committedDate": "2020-08-05T21:31:01Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzcwNjkz", "url": "https://github.com/openhab/openhab-addons/pull/8220#pullrequestreview-462770693", "createdAt": "2020-08-06T18:23:59Z", "commit": {"oid": "e775103afd10247088338906d661432a199b8834"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNDowMFrOG8_N6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyNToxNFrOG8_QzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMzQ5Nw==", "bodyText": "This method stops the whole polling job for updating all devices. We should not do that.", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r466603497", "createdAt": "2020-08-06T18:24:00Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/AVMFritzBaseBridgeHandler.java", "diffHunk": "@@ -140,13 +139,38 @@ public void initialize() {\n         }\n \n         if (configValid) {\n-            this.connection = new FritzAhaWebInterface(config, this, httpClient);\n+            updateStatus(ThingStatus.UNKNOWN);\n+            manageConnections();\n+        }\n+    }\n \n+    protected synchronized void manageConnections() {\n+        AVMFritzBoxConfiguration config = getConfigAs(AVMFritzBoxConfiguration.class);\n+        if (this.connection == null) {\n+            this.connection = new FritzAhaWebInterface(config, this, httpClient);\n             stopPolling();\n             startPolling();\n+        } else {\n+            if (!getThing().getChannels().stream().filter(c -> isLinked(c.getUID())).findAny().isPresent()) {\n+                // no channels are linked anymore\n+                stopPolling();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e775103afd10247088338906d661432a199b8834"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNDIzNg==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r466604236", "createdAt": "2020-08-06T18:25:14Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/handler/BoxHandler.java", "diffHunk": "@@ -79,6 +80,12 @@ protected void initConnections() {\n                             \"The 'password' parameter must be configured to use the AHA features.\");\n                 }\n             }\n+        } else {\n+            if (!getThing().getChannels().stream().filter(c -> isLinked(c.getUID())).findAny().isPresent()) {\n+                // no channels are linked anymore\n+                stopPolling();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e775103afd10247088338906d661432a199b8834"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c847834491afd912aacf7f3f744af1a7d125ff0", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/8c847834491afd912aacf7f3f744af1a7d125ff0", "committedDate": "2020-08-06T20:16:20Z", "message": "addressed further review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTI5MDEy", "url": "https://github.com/openhab/openhab-addons/pull/8220#pullrequestreview-463129012", "createdAt": "2020-08-07T08:27:32Z", "commit": {"oid": "8c847834491afd912aacf7f3f744af1a7d125ff0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNzozMlrOG9RNtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoyMFrOG9RmZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5ODM1Ng==", "bodyText": "I'm not sure, whether for users help we should although document how to deactivate again?", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r466898356", "createdAt": "2020-08-07T08:27:32Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/README.md", "diffHunk": "@@ -1,14 +1,16 @@\n # AVM FRITZ! Binding\n \n-The binding integrates the AHA ( [AVM Home Automation](https://avm.de/ratgeber/smart-home/) ) system.  \n+The binding integrates AVM FRITZ!Boxes with a special focus on the AHA ( [AVM Home Automation](https://avm.de/ratgeber/smart-home/) ) features.  \n \n ## Supported Things\n \n ### FRITZ!Box\n \n-The well known FRITZ!Boxes are supported as bridge for accessing other AHA devices.\n-It is planned to support some channels directly at the bridge like call monitoring and others - but these things are under current development by now.\n-The Box has to run at least on firmware FRITZ!OS 6.00 and has to support the \"Smart Home\" service.\n+FRITZ!Boxes (thing type `fritzbox`) are supported as bridges and they offer channels for call monitoring.\n+To activate the call monitor interface on a FRITZ!Box, you need to dial once `#96*5*` on a connected telephone.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c847834491afd912aacf7f3f744af1a7d125ff0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwMzkyNQ==", "bodyText": "True for the moment, until someone will change something in the future ;-) and doesn't look on the lines below line 48. For example format changes on the raw line by AVM or something similiar. From aspects of change-proof code I would prefer if you turn around those statements. But this is still my personal suggestion!", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r466903925", "createdAt": "2020-08-07T08:38:49Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/callmonitor/CallEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.callmonitor;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Call Events received from a fritzbox.\n+ *\n+ * 12.07.20 09:11:30;RING;0;0171123456;888888;SIP2;\n+ * 12.07.20 09:13:40;DISCONNECT;0;0;\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class CallEvent {\n+\n+    private final String rawEvent;\n+    private final String timestamp;\n+    private final String callType;\n+    private final String id;\n+    private final String externalNo;\n+    private final @Nullable String internalNo;\n+    private final @Nullable String connectionType;\n+    private final @Nullable String line;\n+\n+    public CallEvent(String rawEvent) {\n+        this.rawEvent = rawEvent;\n+\n+        String[] fields = rawEvent.split(\";\");\n+        if (fields.length < 4) {\n+            throw new IllegalArgumentException(\"Cannot parse call event: \" + rawEvent);\n+        }\n+\n+        timestamp = fields[0];\n+        callType = fields[1];\n+        id = fields[2];\n+\n+        if (callType.equals(\"RING\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2NTAxOA=="}, "originalCommit": {"oid": "cb5804546ae9809dc3f8d2c9228b4fcd47b53c43"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDY3Ng==", "bodyText": "Codestyle check: Please add a new line", "url": "https://github.com/openhab/openhab-addons/pull/8220#discussion_r466904676", "createdAt": "2020-08-07T08:40:20Z", "author": {"login": "DerOetzi"}, "path": "bundles/org.openhab.binding.avmfritz/src/main/java/org/openhab/binding/avmfritz/internal/callmonitor/CallEvent.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.avmfritz.internal.callmonitor;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * Call Events received from a fritzbox.\n+ *\n+ * 12.07.20 09:11:30;RING;0;0171123456;888888;SIP2;\n+ * 12.07.20 09:13:40;DISCONNECT;0;0;\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class CallEvent {\n+\n+    private final String rawEvent;\n+    private final String timestamp;\n+    private final String callType;\n+    private final String id;\n+    private @Nullable String externalNo;\n+    private @Nullable String internalNo;\n+    private @Nullable String connectionType;\n+    private @Nullable String line;\n+\n+    public CallEvent(String rawEvent) {\n+        this.rawEvent = rawEvent;\n+\n+        String[] fields = rawEvent.split(\";\");\n+        if (fields.length < 4) {\n+            throw new IllegalArgumentException(\"Cannot parse call event: \" + rawEvent);\n+        }\n+\n+        timestamp = fields[0];\n+        callType = fields[1];\n+        id = fields[2];\n+\n+        if (callType.equals(\"RING\")) {\n+            externalNo = fields[3];\n+            internalNo = fields[4];\n+            connectionType = fields[5];\n+        } else if (callType.equals(\"CONNECT\")) {\n+            line = fields[3];\n+            if (fields.length > 4) {\n+                externalNo = fields[4];\n+            } else {\n+                externalNo = \"Unknown\";\n+            }\n+        } else if (callType.equals(\"CALL\")) {\n+            line = fields[3];\n+            internalNo = fields[4];\n+            externalNo = fields[5];\n+            connectionType = fields[6];\n+        } else if (callType.equals(\"DISCONNECT\")) {\n+            // no fields to set\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid call type: \" + callType);\n+        }\n+    }\n+\n+    public @Nullable String getLine() {\n+        return line;\n+    }\n+\n+    public String getTimestamp() {\n+        return timestamp;\n+    }\n+\n+    public String getCallType() {\n+        return callType;\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public @Nullable String getExternalNo() {\n+        return externalNo;\n+    }\n+\n+    public @Nullable String getInternalNo() {\n+        return internalNo;\n+    }\n+\n+    public @Nullable String getConnectionType() {\n+        return connectionType;\n+    }\n+\n+    public String getRaw() {\n+        return rawEvent;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CallEvent [timestamp=\" + timestamp + \", callType=\" + callType + \", id=\" + id + \", externalNo=\"\n+                + externalNo + \", internalNo=\" + internalNo + \", connectionType=\" + connectionType + \", line=\" + line\n+                + \"]\";\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c847834491afd912aacf7f3f744af1a7d125ff0"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDQzMjc3", "url": "https://github.com/openhab/openhab-addons/pull/8220#pullrequestreview-463443277", "createdAt": "2020-08-07T16:24:43Z", "commit": {"oid": "8c847834491afd912aacf7f3f744af1a7d125ff0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74e23615b5bbcf79ccbe0a71a6a5b6b393a51349", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/74e23615b5bbcf79ccbe0a71a6a5b6b393a51349", "committedDate": "2020-08-08T10:02:16Z", "message": "applied spotless formatter\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b746abf90085a31de11f7b7667460da1a89b8d1e", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/b746abf90085a31de11f7b7667460da1a89b8d1e", "committedDate": "2020-08-08T10:11:18Z", "message": "added note about deactivation of call monitor\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dfb1bb20495a603eb720cd30620d972b77a35d6", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/3dfb1bb20495a603eb720cd30620d972b77a35d6", "committedDate": "2020-08-08T10:16:59Z", "message": "improved status detail message\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNzk1NDMy", "url": "https://github.com/openhab/openhab-addons/pull/8220#pullrequestreview-463795432", "createdAt": "2020-08-08T10:49:09Z", "commit": {"oid": "3dfb1bb20495a603eb720cd30620d972b77a35d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4897, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}