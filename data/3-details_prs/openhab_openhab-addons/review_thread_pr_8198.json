{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NzEyMjcy", "number": 8198, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODozOToxN1rOEYyEQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODo0NToxNVrOEbPTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIxNTY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODozOToxN1rOHBQtnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxOToyNjoyOVrOHBUpVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NDQ0Nw==", "bodyText": "Putting each sentence in a separate line makes reading diffs easier.\nIs it really \"mqqt\"?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The binding controls the devices independent from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.\n          \n          \n            \n            The binding controls the devices independently from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471084447", "createdAt": "2020-08-16T08:39:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -1,6 +1,13 @@\n+\n # Shelly Binding\n \n-This Binding integrated Shelly devices.\n+This Binding integrates [Alterco Shelly devices](https://shelly.cloud).\n+\n+Alterco provides a rich set of smart home devices. All of them are WiFi enabled (2,4GHz, IPv4 only) and provide a documented API. The binding is officially acknowledged by Alterco and openHAB is listed as a reference. Alterco directly supports this project.\n+\n+The binding controls the devices independent from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzM1MQ==", "bodyText": "\"Putting each sentence in a separate line makes reading diffs easier.\"\nok, will do\n\n\n\"Is it really \"mqqt\"?\nyes\nThe devices support mqqt, but the binding is interfacing directly using REST API and CoAP/CoIoT\n\nfixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133351", "createdAt": "2020-08-16T16:45:05Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -1,6 +1,13 @@\n+\n # Shelly Binding\n \n-This Binding integrated Shelly devices.\n+This Binding integrates [Alterco Shelly devices](https://shelly.cloud).\n+\n+Alterco provides a rich set of smart home devices. All of them are WiFi enabled (2,4GHz, IPv4 only) and provide a documented API. The binding is officially acknowledged by Alterco and openHAB is listed as a reference. Alterco directly supports this project.\n+\n+The binding controls the devices independent from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NDQ0Nw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0ODg4Nw==", "bodyText": "And it's not MQTT?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471148887", "createdAt": "2020-08-16T19:26:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -1,6 +1,13 @@\n+\n # Shelly Binding\n \n-This Binding integrated Shelly devices.\n+This Binding integrates [Alterco Shelly devices](https://shelly.cloud).\n+\n+Alterco provides a rich set of smart home devices. All of them are WiFi enabled (2,4GHz, IPv4 only) and provide a documented API. The binding is officially acknowledged by Alterco and openHAB is listed as a reference. Alterco directly supports this project.\n+\n+The binding controls the devices independent from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NDQ0Nw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIxNjU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo0MDoyM1rOHBQuEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo0NTo0NVrOHBTtCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NDU2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The binding focus on reporting the device status and device control. Initial setup and device configuration has to be performed using the Shelly Apps. The binding gets in sync with the next status refresh.\n          \n          \n            \n            The binding focuses on reporting the device status and device control. Initial setup and device configuration has to be performed using the Shelly Apps. The binding gets in sync with the next status refresh.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471084563", "createdAt": "2020-08-16T08:40:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -1,6 +1,13 @@\n+\n # Shelly Binding\n \n-This Binding integrated Shelly devices.\n+This Binding integrates [Alterco Shelly devices](https://shelly.cloud).\n+\n+Alterco provides a rich set of smart home devices. All of them are WiFi enabled (2,4GHz, IPv4 only) and provide a documented API. The binding is officially acknowledged by Alterco and openHAB is listed as a reference. Alterco directly supports this project.\n+\n+The binding controls the devices independent from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.\n+\n+The binding focus on reporting the device status and device control. Initial setup and device configuration has to be performed using the Shelly Apps. The binding gets in sync with the next status refresh.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzQ0OQ==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133449", "createdAt": "2020-08-16T16:45:45Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -1,6 +1,13 @@\n+\n # Shelly Binding\n \n-This Binding integrated Shelly devices.\n+This Binding integrates [Alterco Shelly devices](https://shelly.cloud).\n+\n+Alterco provides a rich set of smart home devices. All of them are WiFi enabled (2,4GHz, IPv4 only) and provide a documented API. The binding is officially acknowledged by Alterco and openHAB is listed as a reference. Alterco directly supports this project.\n+\n+The binding controls the devices independent from the Alterco Shelly Cloud (in fact it can be disabled). The binding co-exists with Shelly App for Smartphones, Shelly Web App, Shelly Cloud, mqqt and other 3rd party Apps.\n+\n+The binding focus on reporting the device status and device control. Initial setup and device configuration has to be performed using the Shelly Apps. The binding gets in sync with the next status refresh.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NDU2Mw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIyMDg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo0NjoxMlrOHBQwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo0NzoxNFrOHBTtlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NTA5OQ==", "bodyText": "Can you remove the reference to PaperUI, as it will be removed in OH3?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471085099", "createdAt": "2020-08-16T08:46:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -25,88 +34,139 @@ This Binding integrated Shelly devices.\n | shellyht           | Shelly Sensor (temp+humidity)                          | SHHT-1    |\n | shellyflood        | Shelly Flood Sensor                                    | SHWT-1    |\n | shellysmoke        | Shelly Smoke Sensor                                    |           |\n-| shellydw           |\u00a0Shelly Door/Window                                     | SHDW-1    |\n+| shellygas          | Shelly Gas Sensor                                      | SHGS-1    |\n+| shellydw           | Shelly Door/Window                                     | SHDW-1    |\n+| shellydw2          | Shelly Door/Window 2                                   | SHDW-2    |\n+| shellybutton1      | Shelly Button 1                                        | SHBTN-1   |\n | shellysense        | Shelly Motion and IR Controller                        | SHSEN-1   |\n | shellydevice       | A password protected Shelly device or an unknown type  |           |\n \n-## Firmware\n-\n-To utilize all features the binding requires firmware version 1.5.7 or newer, version 1.6 is strongly recommended.\n-This should be available for all devices.\n-Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices).\n+## Binding Configuration\n \n-The binding displays a WARNING in the log if the firmware is older.\n-It also informs you when an update is available.\n-Use the device' web ui or the Shelly App to perform the update.\n+The binding has the following configuration options:\n \n-## Other resources\n+| Parameter      |Description                                                       |Mandatory|Default                                         |\n+|----------------|------------------------------------------------------------------|---------|------------------------------------------------|\n+| defaultUserId  |Default user id for HTTP authentication when not set in the Thing |    no   |admin                                           |\n+| defaultPassword|Default password for HTTP authentication when not set in the Thing|    no   |admin                                           |\n+| autoCoIoT      |Auto-enable CoIoT events when firmware 1.6+ is enabled.           |    no   |true                                            |\n \n-Check the following resources for additional information\n+The binding defaults to CoIoT events when firmware 1.6 or newer is detected. CoIoT provides near-realtime updates on device status changes. This mode also overrules event settings in the thing configuration. \n \n+Disabling this feature allows granular control, which event types will be used. This is also required when the Shelly devices are not located on the same IP subnet (e.g. using a VPN). In this case autoCoIoT should be disabled, CoIoT events will not work, because the underlying CoAP protocol is based on Multicast IP, which usually doesn't passes a VPN or routed network.\n \n ## Discovery\n \n-The binding uses mDNS to discover the Shelly devices.\n+In general devices need to be powered to be discovered by the binding.\n+The binding uses mDNS to discover the Shelly devices. \n They periodically announce their presence, which is used by the binding to find them on the local network.\n \n Sometimes you need to run the manual discovery multiple times until you see all your devices.\n \n+## Firmware\n+\n+The binding requires firmware version 1.7.0 or newer to enable all features.\n+Some of the features are enabled dynamically or are not available depending on device type and firmware release.\n+The Web UI of the Shelly device displays the current firmware version under Settings:Firmware and shows an update option when a newer version is available.\n+\n+|Version|Notes                                                                                             |\n+|-------|--------------------------------------------------------------------------------------------------|\n+|1.5.7  |Minimum supported version. Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices). The binding displays a WARNING in the log if the firmware is older.|\n+|1.6.x  |First stable CoIoT implementation. AutoCoIoT is enabled when firmware version >= 1.6 is detected. |\n+|1.7.x  |Add additional status update values, fixes various issues                                         |\n+|1.8.0  |Brings CoIoT version 2, which fixes a lot issues and gaps of version 1.                           |\n+\n+The current firmware version is reported in the Thing Properties. A dedicated channel (device#updateAvailable) indicates the availability of a newer firmware. Use the device's Web UI or the Shelly App to perform the update.\n+\n+Once you have updated the device **you should delete and re-discover** the openHAB Thing. Battery powered devices need to wake up by pressing the button. This makes sure that the Thing is correctly initialized and all supported channels are created. openHAB will kill the item linkage. At a minimum you should restart the binding on the openHAB console if you don't want to re-discover the things.\n+\n+### Password Protected Devices\n+\n+The Shelly devices can be configured to require authorization through a user id and password.\n+In this case you need to set these values in the Thing configuration after approving the Inbox entry.\n+\n+If you have multiple devices protected by the same credentials it's recommended to set the default user id and password in the binding configuration (PaperUI:Configuration:Binding:Shelly) BEFORE running the discovery.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzU5MQ==", "bodyText": "I did, users may not know where to find these options", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133591", "createdAt": "2020-08-16T16:47:14Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -25,88 +34,139 @@ This Binding integrated Shelly devices.\n | shellyht           | Shelly Sensor (temp+humidity)                          | SHHT-1    |\n | shellyflood        | Shelly Flood Sensor                                    | SHWT-1    |\n | shellysmoke        | Shelly Smoke Sensor                                    |           |\n-| shellydw           |\u00a0Shelly Door/Window                                     | SHDW-1    |\n+| shellygas          | Shelly Gas Sensor                                      | SHGS-1    |\n+| shellydw           | Shelly Door/Window                                     | SHDW-1    |\n+| shellydw2          | Shelly Door/Window 2                                   | SHDW-2    |\n+| shellybutton1      | Shelly Button 1                                        | SHBTN-1   |\n | shellysense        | Shelly Motion and IR Controller                        | SHSEN-1   |\n | shellydevice       | A password protected Shelly device or an unknown type  |           |\n \n-## Firmware\n-\n-To utilize all features the binding requires firmware version 1.5.7 or newer, version 1.6 is strongly recommended.\n-This should be available for all devices.\n-Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices).\n+## Binding Configuration\n \n-The binding displays a WARNING in the log if the firmware is older.\n-It also informs you when an update is available.\n-Use the device' web ui or the Shelly App to perform the update.\n+The binding has the following configuration options:\n \n-## Other resources\n+| Parameter      |Description                                                       |Mandatory|Default                                         |\n+|----------------|------------------------------------------------------------------|---------|------------------------------------------------|\n+| defaultUserId  |Default user id for HTTP authentication when not set in the Thing |    no   |admin                                           |\n+| defaultPassword|Default password for HTTP authentication when not set in the Thing|    no   |admin                                           |\n+| autoCoIoT      |Auto-enable CoIoT events when firmware 1.6+ is enabled.           |    no   |true                                            |\n \n-Check the following resources for additional information\n+The binding defaults to CoIoT events when firmware 1.6 or newer is detected. CoIoT provides near-realtime updates on device status changes. This mode also overrules event settings in the thing configuration. \n \n+Disabling this feature allows granular control, which event types will be used. This is also required when the Shelly devices are not located on the same IP subnet (e.g. using a VPN). In this case autoCoIoT should be disabled, CoIoT events will not work, because the underlying CoAP protocol is based on Multicast IP, which usually doesn't passes a VPN or routed network.\n \n ## Discovery\n \n-The binding uses mDNS to discover the Shelly devices.\n+In general devices need to be powered to be discovered by the binding.\n+The binding uses mDNS to discover the Shelly devices. \n They periodically announce their presence, which is used by the binding to find them on the local network.\n \n Sometimes you need to run the manual discovery multiple times until you see all your devices.\n \n+## Firmware\n+\n+The binding requires firmware version 1.7.0 or newer to enable all features.\n+Some of the features are enabled dynamically or are not available depending on device type and firmware release.\n+The Web UI of the Shelly device displays the current firmware version under Settings:Firmware and shows an update option when a newer version is available.\n+\n+|Version|Notes                                                                                             |\n+|-------|--------------------------------------------------------------------------------------------------|\n+|1.5.7  |Minimum supported version. Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices). The binding displays a WARNING in the log if the firmware is older.|\n+|1.6.x  |First stable CoIoT implementation. AutoCoIoT is enabled when firmware version >= 1.6 is detected. |\n+|1.7.x  |Add additional status update values, fixes various issues                                         |\n+|1.8.0  |Brings CoIoT version 2, which fixes a lot issues and gaps of version 1.                           |\n+\n+The current firmware version is reported in the Thing Properties. A dedicated channel (device#updateAvailable) indicates the availability of a newer firmware. Use the device's Web UI or the Shelly App to perform the update.\n+\n+Once you have updated the device **you should delete and re-discover** the openHAB Thing. Battery powered devices need to wake up by pressing the button. This makes sure that the Thing is correctly initialized and all supported channels are created. openHAB will kill the item linkage. At a minimum you should restart the binding on the openHAB console if you don't want to re-discover the things.\n+\n+### Password Protected Devices\n+\n+The Shelly devices can be configured to require authorization through a user id and password.\n+In this case you need to set these values in the Thing configuration after approving the Inbox entry.\n+\n+If you have multiple devices protected by the same credentials it's recommended to set the default user id and password in the binding configuration (PaperUI:Configuration:Binding:Shelly) BEFORE running the discovery.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NTA5OQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIyMjExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo0Nzo1MlrOHBQwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo0NzozMVrOHBTtqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NTI0Ng==", "bodyText": "PaperUI", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471085246", "createdAt": "2020-08-16T08:47:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -25,88 +34,139 @@ This Binding integrated Shelly devices.\n | shellyht           | Shelly Sensor (temp+humidity)                          | SHHT-1    |\n | shellyflood        | Shelly Flood Sensor                                    | SHWT-1    |\n | shellysmoke        | Shelly Smoke Sensor                                    |           |\n-| shellydw           |\u00a0Shelly Door/Window                                     | SHDW-1    |\n+| shellygas          | Shelly Gas Sensor                                      | SHGS-1    |\n+| shellydw           | Shelly Door/Window                                     | SHDW-1    |\n+| shellydw2          | Shelly Door/Window 2                                   | SHDW-2    |\n+| shellybutton1      | Shelly Button 1                                        | SHBTN-1   |\n | shellysense        | Shelly Motion and IR Controller                        | SHSEN-1   |\n | shellydevice       | A password protected Shelly device or an unknown type  |           |\n \n-## Firmware\n-\n-To utilize all features the binding requires firmware version 1.5.7 or newer, version 1.6 is strongly recommended.\n-This should be available for all devices.\n-Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices).\n+## Binding Configuration\n \n-The binding displays a WARNING in the log if the firmware is older.\n-It also informs you when an update is available.\n-Use the device' web ui or the Shelly App to perform the update.\n+The binding has the following configuration options:\n \n-## Other resources\n+| Parameter      |Description                                                       |Mandatory|Default                                         |\n+|----------------|------------------------------------------------------------------|---------|------------------------------------------------|\n+| defaultUserId  |Default user id for HTTP authentication when not set in the Thing |    no   |admin                                           |\n+| defaultPassword|Default password for HTTP authentication when not set in the Thing|    no   |admin                                           |\n+| autoCoIoT      |Auto-enable CoIoT events when firmware 1.6+ is enabled.           |    no   |true                                            |\n \n-Check the following resources for additional information\n+The binding defaults to CoIoT events when firmware 1.6 or newer is detected. CoIoT provides near-realtime updates on device status changes. This mode also overrules event settings in the thing configuration. \n \n+Disabling this feature allows granular control, which event types will be used. This is also required when the Shelly devices are not located on the same IP subnet (e.g. using a VPN). In this case autoCoIoT should be disabled, CoIoT events will not work, because the underlying CoAP protocol is based on Multicast IP, which usually doesn't passes a VPN or routed network.\n \n ## Discovery\n \n-The binding uses mDNS to discover the Shelly devices.\n+In general devices need to be powered to be discovered by the binding.\n+The binding uses mDNS to discover the Shelly devices. \n They periodically announce their presence, which is used by the binding to find them on the local network.\n \n Sometimes you need to run the manual discovery multiple times until you see all your devices.\n \n+## Firmware\n+\n+The binding requires firmware version 1.7.0 or newer to enable all features.\n+Some of the features are enabled dynamically or are not available depending on device type and firmware release.\n+The Web UI of the Shelly device displays the current firmware version under Settings:Firmware and shows an update option when a newer version is available.\n+\n+|Version|Notes                                                                                             |\n+|-------|--------------------------------------------------------------------------------------------------|\n+|1.5.7  |Minimum supported version. Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices). The binding displays a WARNING in the log if the firmware is older.|\n+|1.6.x  |First stable CoIoT implementation. AutoCoIoT is enabled when firmware version >= 1.6 is detected. |\n+|1.7.x  |Add additional status update values, fixes various issues                                         |\n+|1.8.0  |Brings CoIoT version 2, which fixes a lot issues and gaps of version 1.                           |\n+\n+The current firmware version is reported in the Thing Properties. A dedicated channel (device#updateAvailable) indicates the availability of a newer firmware. Use the device's Web UI or the Shelly App to perform the update.\n+\n+Once you have updated the device **you should delete and re-discover** the openHAB Thing. Battery powered devices need to wake up by pressing the button. This makes sure that the Thing is correctly initialized and all supported channels are created. openHAB will kill the item linkage. At a minimum you should restart the binding on the openHAB console if you don't want to re-discover the things.\n+\n+### Password Protected Devices\n+\n+The Shelly devices can be configured to require authorization through a user id and password.\n+In this case you need to set these values in the Thing configuration after approving the Inbox entry.\n+\n+If you have multiple devices protected by the same credentials it's recommended to set the default user id and password in the binding configuration (PaperUI:Configuration:Binding:Shelly) BEFORE running the discovery.\n+In this case the binding could directly access the device to retrieve the required information using those credentials.\n+Otherwise a thing of type shellyprotected is created in the Inbox and you could set the credentials while adding the thing. In this case the credentials are persisted as part of the thing configuration. \n+\n+### Important for battery powered devices\n+\n+Make sure to wake up battery powered devices, so that they show up on the network.\n+The device has a push button inside. Open the case, press that button and the LED starts flashing.\n+Wait a moment and then start the discovery. The device should show up in the Inbox and can be added.\n+Sometimes you need to run the discovery multiple times.\n+\n ### Dynamic creation of channels\n \n The Shelly series of devices has many combinations of relays, meters (different versions), sensors etc. For this the binding creates various channels dynamically based on the status information provided by the device at initialization time. \n If a channel is missing make sure the thing was discovered correctly and is ONLINE. If a channel is missing delete the thing and re-discover it.\n \n-### Important for battery power devices\n+### Thing Status\n \n-Make sure to wake up battery powered devices (press the button inside the device), so that they show up on the network.\n-The device has a push button inside, open the case, press that button and the LED starts blinking.\n-The device should show up in the Inbox and can be added.\n+The binding sets the following thing status depending on the device status:\n \n-`\n-Important: If device is in sleep mode and can't be reached by the binding, the Thing will change into UNKNOWN state.\n+| Status       |Description                                                       |\n+|--------------|------------------------------------------------------------------|\n+| INITIALIZING | This is the default status while initializing the thing. Once the initialization is triggered the thing switches to Status UNKNOWN. |\n+| UNKNOWN      | Indicates that the status is currently unknown, which must not show a problem. Usually the thing stays in this status when the device is in sleep mode. Once the device is reachable and was initialized the thing switches to status ONLINE.|\n+| ONLINE       | ONLINE indicates that the device can be accessed and is responding properly. Battery powered devices also stay ONLINE when in sleep mode. The binding has an integrated watchdog timer supervising the device, see below. The thing switches to status OFFLINE when some type of communication error occurs. | \n+| OFFLINE      | Communication with the device failed. Check the thing status in PaperUI and openHAB's log for an indication of the error. Try restarting OH or deleting and re-discovering the thing. You could also post to the community thread if the problem stays. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzYxMA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133610", "createdAt": "2020-08-16T16:47:31Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -25,88 +34,139 @@ This Binding integrated Shelly devices.\n | shellyht           | Shelly Sensor (temp+humidity)                          | SHHT-1    |\n | shellyflood        | Shelly Flood Sensor                                    | SHWT-1    |\n | shellysmoke        | Shelly Smoke Sensor                                    |           |\n-| shellydw           |\u00a0Shelly Door/Window                                     | SHDW-1    |\n+| shellygas          | Shelly Gas Sensor                                      | SHGS-1    |\n+| shellydw           | Shelly Door/Window                                     | SHDW-1    |\n+| shellydw2          | Shelly Door/Window 2                                   | SHDW-2    |\n+| shellybutton1      | Shelly Button 1                                        | SHBTN-1   |\n | shellysense        | Shelly Motion and IR Controller                        | SHSEN-1   |\n | shellydevice       | A password protected Shelly device or an unknown type  |           |\n \n-## Firmware\n-\n-To utilize all features the binding requires firmware version 1.5.7 or newer, version 1.6 is strongly recommended.\n-This should be available for all devices.\n-Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices).\n+## Binding Configuration\n \n-The binding displays a WARNING in the log if the firmware is older.\n-It also informs you when an update is available.\n-Use the device' web ui or the Shelly App to perform the update.\n+The binding has the following configuration options:\n \n-## Other resources\n+| Parameter      |Description                                                       |Mandatory|Default                                         |\n+|----------------|------------------------------------------------------------------|---------|------------------------------------------------|\n+| defaultUserId  |Default user id for HTTP authentication when not set in the Thing |    no   |admin                                           |\n+| defaultPassword|Default password for HTTP authentication when not set in the Thing|    no   |admin                                           |\n+| autoCoIoT      |Auto-enable CoIoT events when firmware 1.6+ is enabled.           |    no   |true                                            |\n \n-Check the following resources for additional information\n+The binding defaults to CoIoT events when firmware 1.6 or newer is detected. CoIoT provides near-realtime updates on device status changes. This mode also overrules event settings in the thing configuration. \n \n+Disabling this feature allows granular control, which event types will be used. This is also required when the Shelly devices are not located on the same IP subnet (e.g. using a VPN). In this case autoCoIoT should be disabled, CoIoT events will not work, because the underlying CoAP protocol is based on Multicast IP, which usually doesn't passes a VPN or routed network.\n \n ## Discovery\n \n-The binding uses mDNS to discover the Shelly devices.\n+In general devices need to be powered to be discovered by the binding.\n+The binding uses mDNS to discover the Shelly devices. \n They periodically announce their presence, which is used by the binding to find them on the local network.\n \n Sometimes you need to run the manual discovery multiple times until you see all your devices.\n \n+## Firmware\n+\n+The binding requires firmware version 1.7.0 or newer to enable all features.\n+Some of the features are enabled dynamically or are not available depending on device type and firmware release.\n+The Web UI of the Shelly device displays the current firmware version under Settings:Firmware and shows an update option when a newer version is available.\n+\n+|Version|Notes                                                                                             |\n+|-------|--------------------------------------------------------------------------------------------------|\n+|1.5.7  |Minimum supported version. Older versions work in general, but have impacts to functionality (e.g. no events for battery powered devices). The binding displays a WARNING in the log if the firmware is older.|\n+|1.6.x  |First stable CoIoT implementation. AutoCoIoT is enabled when firmware version >= 1.6 is detected. |\n+|1.7.x  |Add additional status update values, fixes various issues                                         |\n+|1.8.0  |Brings CoIoT version 2, which fixes a lot issues and gaps of version 1.                           |\n+\n+The current firmware version is reported in the Thing Properties. A dedicated channel (device#updateAvailable) indicates the availability of a newer firmware. Use the device's Web UI or the Shelly App to perform the update.\n+\n+Once you have updated the device **you should delete and re-discover** the openHAB Thing. Battery powered devices need to wake up by pressing the button. This makes sure that the Thing is correctly initialized and all supported channels are created. openHAB will kill the item linkage. At a minimum you should restart the binding on the openHAB console if you don't want to re-discover the things.\n+\n+### Password Protected Devices\n+\n+The Shelly devices can be configured to require authorization through a user id and password.\n+In this case you need to set these values in the Thing configuration after approving the Inbox entry.\n+\n+If you have multiple devices protected by the same credentials it's recommended to set the default user id and password in the binding configuration (PaperUI:Configuration:Binding:Shelly) BEFORE running the discovery.\n+In this case the binding could directly access the device to retrieve the required information using those credentials.\n+Otherwise a thing of type shellyprotected is created in the Inbox and you could set the credentials while adding the thing. In this case the credentials are persisted as part of the thing configuration. \n+\n+### Important for battery powered devices\n+\n+Make sure to wake up battery powered devices, so that they show up on the network.\n+The device has a push button inside. Open the case, press that button and the LED starts flashing.\n+Wait a moment and then start the discovery. The device should show up in the Inbox and can be added.\n+Sometimes you need to run the discovery multiple times.\n+\n ### Dynamic creation of channels\n \n The Shelly series of devices has many combinations of relays, meters (different versions), sensors etc. For this the binding creates various channels dynamically based on the status information provided by the device at initialization time. \n If a channel is missing make sure the thing was discovered correctly and is ONLINE. If a channel is missing delete the thing and re-discover it.\n \n-### Important for battery power devices\n+### Thing Status\n \n-Make sure to wake up battery powered devices (press the button inside the device), so that they show up on the network.\n-The device has a push button inside, open the case, press that button and the LED starts blinking.\n-The device should show up in the Inbox and can be added.\n+The binding sets the following thing status depending on the device status:\n \n-`\n-Important: If device is in sleep mode and can't be reached by the binding, the Thing will change into UNKNOWN state.\n+| Status       |Description                                                       |\n+|--------------|------------------------------------------------------------------|\n+| INITIALIZING | This is the default status while initializing the thing. Once the initialization is triggered the thing switches to Status UNKNOWN. |\n+| UNKNOWN      | Indicates that the status is currently unknown, which must not show a problem. Usually the thing stays in this status when the device is in sleep mode. Once the device is reachable and was initialized the thing switches to status ONLINE.|\n+| ONLINE       | ONLINE indicates that the device can be accessed and is responding properly. Battery powered devices also stay ONLINE when in sleep mode. The binding has an integrated watchdog timer supervising the device, see below. The thing switches to status OFFLINE when some type of communication error occurs. | \n+| OFFLINE      | Communication with the device failed. Check the thing status in PaperUI and openHAB's log for an indication of the error. Try restarting OH or deleting and re-discovering the thing. You could also post to the community thread if the problem stays. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NTI0Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIyNTk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo1Mjo1NlrOHBQyqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo0ODo1MFrOHBTuJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NTczNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Availability of  channels is depending on the device type.\n          \n          \n            \n            Availability of channels is depending on the device type.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471085737", "createdAt": "2020-08-16T08:52:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -135,33 +193,92 @@ In this case autoCoIoT should be disabled, CoIoT events will not work, because t\n \n Every device has a channel group `device` with the following channels:\n \n-|Group     |Channel            |Type    |read-only|Desciption                                                                       |\n+|Group     |Channel            |Type    |read-only|Description                                                                      |\n |----------|-------------------|--------|---------|---------------------------------------------------------------------------------|\n |device    |uptime             |Number  |yes      |Number of seconds since the device was powered up                                |\n |          |wifiSignal         |Number  |yes      |WiFi signal strength (4=excellent, 3=good, 2=not string, 1=unreliable, 0=none)   |\n |          |innerTemp          |Number  |yes      |Internal device temperature (when provided by the device)                        |\n-|          |wakeupReason       |String  |yes      |Sensors only: Last wake-up reason (POWERON/PERIODIC/BUTTON/BATTERY/ALARM)        |\n-|          |alarm              |Trigger |yes      |Most recent alarm for health check                                               |\n+|          |selfTest           |String  |yes      |Result from device self-test (pending/not_completed/running/completed/unknown)   |\n+|          |alarm              |Trigger |yes      |Self-Test result not_completed/completed/running/pending                         |\n |          |accumulatedWatts   |Number  |yes      |Accumulated power in W of the device (including all meters)                      |\n |          |accumulatedTotal   |Number  |yes      |Accumulated total power in kw/h of the device (including all meters)             |\n |          |accumulatedReturned|Number  |yes      |Accumulated returned power in kw/h of the device (including all meters)          |\n-|          |updateAvailable    |Switch  |yes      |ON: A firmwareupdate is available (use Shelly App to perform update)             |\n-\n+|          |heartBeat          |DateTime|yes      |Timestamp of the last successful device communication                            |\n+|          |updateAvailable    |Switch  |yes      |ON: A firmware update is available (use Shelly App to perform update)            |\n+|          |statusLed          |Switch  |r/w      |ON: Status LED is disabled, OFF: LED enabled                                     |\n+|          |powerLed           |Switch  |r/w      |ON: Power LED is disabled, OFF: LED enabled                                      |\n+\n+Availability of  channels is depending on the device type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzczNA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133734", "createdAt": "2020-08-16T16:48:50Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -135,33 +193,92 @@ In this case autoCoIoT should be disabled, CoIoT events will not work, because t\n \n Every device has a channel group `device` with the following channels:\n \n-|Group     |Channel            |Type    |read-only|Desciption                                                                       |\n+|Group     |Channel            |Type    |read-only|Description                                                                      |\n |----------|-------------------|--------|---------|---------------------------------------------------------------------------------|\n |device    |uptime             |Number  |yes      |Number of seconds since the device was powered up                                |\n |          |wifiSignal         |Number  |yes      |WiFi signal strength (4=excellent, 3=good, 2=not string, 1=unreliable, 0=none)   |\n |          |innerTemp          |Number  |yes      |Internal device temperature (when provided by the device)                        |\n-|          |wakeupReason       |String  |yes      |Sensors only: Last wake-up reason (POWERON/PERIODIC/BUTTON/BATTERY/ALARM)        |\n-|          |alarm              |Trigger |yes      |Most recent alarm for health check                                               |\n+|          |selfTest           |String  |yes      |Result from device self-test (pending/not_completed/running/completed/unknown)   |\n+|          |alarm              |Trigger |yes      |Self-Test result not_completed/completed/running/pending                         |\n |          |accumulatedWatts   |Number  |yes      |Accumulated power in W of the device (including all meters)                      |\n |          |accumulatedTotal   |Number  |yes      |Accumulated total power in kw/h of the device (including all meters)             |\n |          |accumulatedReturned|Number  |yes      |Accumulated returned power in kw/h of the device (including all meters)          |\n-|          |updateAvailable    |Switch  |yes      |ON: A firmwareupdate is available (use Shelly App to perform update)             |\n-\n+|          |heartBeat          |DateTime|yes      |Timestamp of the last successful device communication                            |\n+|          |updateAvailable    |Switch  |yes      |ON: A firmware update is available (use Shelly App to perform update)            |\n+|          |statusLed          |Switch  |r/w      |ON: Status LED is disabled, OFF: LED enabled                                     |\n+|          |powerLed           |Switch  |r/w      |ON: Power LED is disabled, OFF: LED enabled                                      |\n+\n+Availability of  channels is depending on the device type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NTczNw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIyODAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo1NTo1OVrOHBQzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo1MjoyMlrOHBTvmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjAxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |TEMP_UNDER  |Below \"temperature under\" treshold                                                                               |\n          \n          \n            \n            |TEMP_UNDER  |Below \"temperature under\" threshold                                                                               |", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471086014", "createdAt": "2020-08-16T08:55:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -172,14 +289,14 @@ When an alarm condition is detected the channel alarm gets triggered and provide\n |------------|-----------------------------------------------------------------------------------------------------------------|\n |POWERON     |Device was powered on.                                                                                           |\n |PERIODIC    |Periodic wakeup.                                                                                                 |\n-|BUTTON      |Button was pressed, e.g. to wakeup the device.                                                                   |\n+|BUTTON      |Button was pressed, e.g. to wake up the device.                                                                  |\n |SENSOR      |Wake-up due to updated sensor data.                                                                              |\n |ALARM       |Alarm condition was detected, check status, could be OPENED for the DW, flood alarm, smoke alarm                 |\n |BATTERY     |Device reported an update to the battery status.                                                                 |\n+|TEMP_UNDER  |Below \"temperature under\" treshold                                                                               |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNDEwNA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471134104", "createdAt": "2020-08-16T16:52:22Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -172,14 +289,14 @@ When an alarm condition is detected the channel alarm gets triggered and provide\n |------------|-----------------------------------------------------------------------------------------------------------------|\n |POWERON     |Device was powered on.                                                                                           |\n |PERIODIC    |Periodic wakeup.                                                                                                 |\n-|BUTTON      |Button was pressed, e.g. to wakeup the device.                                                                   |\n+|BUTTON      |Button was pressed, e.g. to wake up the device.                                                                  |\n |SENSOR      |Wake-up due to updated sensor data.                                                                              |\n |ALARM       |Alarm condition was detected, check status, could be OPENED for the DW, flood alarm, smoke alarm                 |\n |BATTERY     |Device reported an update to the battery status.                                                                 |\n+|TEMP_UNDER  |Below \"temperature under\" treshold                                                                               |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjAxNA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIyODMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo1NjoxNFrOHBQz5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo1MzozMlrOHBTwBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            |TEMP_OVER   |Above \"temperature over\" treshold                                                                                |\n          \n          \n            \n            |TEMP_OVER   |Above \"temperature over\" threshold                                                                                |", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471086052", "createdAt": "2020-08-16T08:56:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -172,14 +289,14 @@ When an alarm condition is detected the channel alarm gets triggered and provide\n |------------|-----------------------------------------------------------------------------------------------------------------|\n |POWERON     |Device was powered on.                                                                                           |\n |PERIODIC    |Periodic wakeup.                                                                                                 |\n-|BUTTON      |Button was pressed, e.g. to wakeup the device.                                                                   |\n+|BUTTON      |Button was pressed, e.g. to wake up the device.                                                                  |\n |SENSOR      |Wake-up due to updated sensor data.                                                                              |\n |ALARM       |Alarm condition was detected, check status, could be OPENED for the DW, flood alarm, smoke alarm                 |\n |BATTERY     |Device reported an update to the battery status.                                                                 |\n+|TEMP_UNDER  |Below \"temperature under\" treshold                                                                               |\n+|TEMP_OVER   |Above \"temperature over\" treshold                                                                                |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 330}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNDIxMg==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471134212", "createdAt": "2020-08-16T16:53:32Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -172,14 +289,14 @@ When an alarm condition is detected the channel alarm gets triggered and provide\n |------------|-----------------------------------------------------------------------------------------------------------------|\n |POWERON     |Device was powered on.                                                                                           |\n |PERIODIC    |Periodic wakeup.                                                                                                 |\n-|BUTTON      |Button was pressed, e.g. to wakeup the device.                                                                   |\n+|BUTTON      |Button was pressed, e.g. to wake up the device.                                                                  |\n |SENSOR      |Wake-up due to updated sensor data.                                                                              |\n |ALARM       |Alarm condition was detected, check status, could be OPENED for the DW, flood alarm, smoke alarm                 |\n |BATTERY     |Device reported an update to the battery status.                                                                 |\n+|TEMP_UNDER  |Below \"temperature under\" treshold                                                                               |\n+|TEMP_OVER   |Above \"temperature over\" treshold                                                                                |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjA1Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 330}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIyOTE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwODo1NzoxN1rOHBQ0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo1NTowM1rOHBTwyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjE2NQ==", "bodyText": "Is this backward compatible?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471086165", "createdAt": "2020-08-16T08:57:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -301,15 +425,15 @@ end\n |roller    |control      |Rollershutter|r/w  |can be open (0%), stop, or close (100%); could also handle ON (open) and OFF (close)  |\n |          |input        |Switch   |yes      |ON: Input/Button is powered, see General Notes on Channels                            |\n |          |rollerpos    |Number   |r/w      |Roller position: 100%=open...0%=closed; gets updated when the roller stops, see Notes |\n-|          |lastDirection|String   |yes      |Last direction: open or close                                                         |\n+|          |state        |String   |yes      |Roller state: open/close/stop                                                         |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNDQwOA==", "bodyText": "No, it's not renaming the channel, it was just the wrong one\nlastDirection was the last roller direction - nobody needs that, so removed\nstate is new channel/feature", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471134408", "createdAt": "2020-08-16T16:55:03Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -301,15 +425,15 @@ end\n |roller    |control      |Rollershutter|r/w  |can be open (0%), stop, or close (100%); could also handle ON (open) and OFF (close)  |\n |          |input        |Switch   |yes      |ON: Input/Button is powered, see General Notes on Channels                            |\n |          |rollerpos    |Number   |r/w      |Roller position: 100%=open...0%=closed; gets updated when the roller stops, see Notes |\n-|          |lastDirection|String   |yes      |Last direction: open or close                                                         |\n+|          |state        |String   |yes      |Roller state: open/close/stop                                                         |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjE2NQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIzMjIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTowMTowN1rOHBQ14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxOTozMDoxOFrOHBUqqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjU2Mw==", "bodyText": "What do you mean with \"for a round minute\"?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471086563", "createdAt": "2020-08-16T09:01:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -384,10 +506,41 @@ The Shelly 4Pro provides 4 relays and 4 power meters.\n |          |lastPower2   |Number   |yes      |Energy consumption in Watts for a round minute, 2 minutes ago                    |\n |          |lastPower3   |Number   |yes      |Energy consumption in Watts for a round minute, 3 minutes ago                    |\n |          |totalKWH     |Number   |yes      |Total energy consumption in Watts since the device powered up (resets on restart)|\n-|          |timestamp    |String   |yes      |Timestamp of the last measurement                                                |\n+|          |lastUpdate   |String   |yes      |Timestamp of the last measurement                                                |\n+\n+### Shelly Dimmer2 (thing-type: shellydimmer2)\n+\n+|Group     |Channel      |Type     |read-only|Description                                                                      |\n+|----------|-------------|---------|---------|---------------------------------------------------------------------------------|\n+|relay     |brightness   |Dimmer   |r/w      |Currently selected brightness.                                                   |\n+|          |input1       |Switch   |yes      |State of Input 1 (S1)                                                            |\n+|          |input2       |Switch   |yes      |State of Input 2 (S2)                                                            |\n+|          |autoOn       |Number   |r/w      |Sets a  timer to turn the device ON after every OFF command; in seconds          |\n+|          |autoOff      |Number   |r/w      |Sets a  timer to turn the device OFF after every ON command; in seconds          |\n+|          |button       |Trigger  |yes      |Event trigger with payload SHORT_PRESSED or LONG_PRESSED (FW 1.5.6+)             |\n+|status    |loaderror    |Switch   |yes      |Last error, \"no\" if none                                                         |\n+|          |overload     |Switch   |yes      |Overload condition detected, switch dimmer off or reduce load!                   |\n+|          |overtemperature |Switch|yes      |Internal device temperature over maximum. Switch off, check physical installation|\n+|meter     |currentWatts |Number   |yes      |Current power consumption in Watts                                               |\n+|          |lastPower1   |Number   |yes      |Energy consumption in Watts for a round minute, 1 minute  ago                    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 498}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTAyNA==", "bodyText": "changed to \"Accumulated energy consumption in Watts for the full last minute \"\nlastPower2 and lastPower3 have been removed, because nobody used it (needs to be documented)", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135024", "createdAt": "2020-08-16T17:01:06Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -384,10 +506,41 @@ The Shelly 4Pro provides 4 relays and 4 power meters.\n |          |lastPower2   |Number   |yes      |Energy consumption in Watts for a round minute, 2 minutes ago                    |\n |          |lastPower3   |Number   |yes      |Energy consumption in Watts for a round minute, 3 minutes ago                    |\n |          |totalKWH     |Number   |yes      |Total energy consumption in Watts since the device powered up (resets on restart)|\n-|          |timestamp    |String   |yes      |Timestamp of the last measurement                                                |\n+|          |lastUpdate   |String   |yes      |Timestamp of the last measurement                                                |\n+\n+### Shelly Dimmer2 (thing-type: shellydimmer2)\n+\n+|Group     |Channel      |Type     |read-only|Description                                                                      |\n+|----------|-------------|---------|---------|---------------------------------------------------------------------------------|\n+|relay     |brightness   |Dimmer   |r/w      |Currently selected brightness.                                                   |\n+|          |input1       |Switch   |yes      |State of Input 1 (S1)                                                            |\n+|          |input2       |Switch   |yes      |State of Input 2 (S2)                                                            |\n+|          |autoOn       |Number   |r/w      |Sets a  timer to turn the device ON after every OFF command; in seconds          |\n+|          |autoOff      |Number   |r/w      |Sets a  timer to turn the device OFF after every ON command; in seconds          |\n+|          |button       |Trigger  |yes      |Event trigger with payload SHORT_PRESSED or LONG_PRESSED (FW 1.5.6+)             |\n+|status    |loaderror    |Switch   |yes      |Last error, \"no\" if none                                                         |\n+|          |overload     |Switch   |yes      |Overload condition detected, switch dimmer off or reduce load!                   |\n+|          |overtemperature |Switch|yes      |Internal device temperature over maximum. Switch off, check physical installation|\n+|meter     |currentWatts |Number   |yes      |Current power consumption in Watts                                               |\n+|          |lastPower1   |Number   |yes      |Energy consumption in Watts for a round minute, 1 minute  ago                    |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjU2Mw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 498}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTIyNg==", "bodyText": "Energy is Wh. You might mean \"Average power consumption\".", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149226", "createdAt": "2020-08-16T19:30:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -384,10 +506,41 @@ The Shelly 4Pro provides 4 relays and 4 power meters.\n |          |lastPower2   |Number   |yes      |Energy consumption in Watts for a round minute, 2 minutes ago                    |\n |          |lastPower3   |Number   |yes      |Energy consumption in Watts for a round minute, 3 minutes ago                    |\n |          |totalKWH     |Number   |yes      |Total energy consumption in Watts since the device powered up (resets on restart)|\n-|          |timestamp    |String   |yes      |Timestamp of the last measurement                                                |\n+|          |lastUpdate   |String   |yes      |Timestamp of the last measurement                                                |\n+\n+### Shelly Dimmer2 (thing-type: shellydimmer2)\n+\n+|Group     |Channel      |Type     |read-only|Description                                                                      |\n+|----------|-------------|---------|---------|---------------------------------------------------------------------------------|\n+|relay     |brightness   |Dimmer   |r/w      |Currently selected brightness.                                                   |\n+|          |input1       |Switch   |yes      |State of Input 1 (S1)                                                            |\n+|          |input2       |Switch   |yes      |State of Input 2 (S2)                                                            |\n+|          |autoOn       |Number   |r/w      |Sets a  timer to turn the device ON after every OFF command; in seconds          |\n+|          |autoOff      |Number   |r/w      |Sets a  timer to turn the device OFF after every ON command; in seconds          |\n+|          |button       |Trigger  |yes      |Event trigger with payload SHORT_PRESSED or LONG_PRESSED (FW 1.5.6+)             |\n+|status    |loaderror    |Switch   |yes      |Last error, \"no\" if none                                                         |\n+|          |overload     |Switch   |yes      |Overload condition detected, switch dimmer off or reduce load!                   |\n+|          |overtemperature |Switch|yes      |Internal device temperature over maximum. Switch off, check physical installation|\n+|meter     |currentWatts |Number   |yes      |Current power consumption in Watts                                               |\n+|          |lastPower1   |Number   |yes      |Energy consumption in Watts for a round minute, 1 minute  ago                    |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NjU2Mw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 498}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIzODY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTowOTo1OFrOHBQ5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo1ODo0NFrOHBTyJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzM4Ng==", "bodyText": "Why are some lastUpdates String and some DateTime?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087386", "createdAt": "2020-08-16T09:09:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -559,13 +722,21 @@ You should calibrate the sensor using the Shelly App to get information on the t\n |----------|-------------|---------|---------|-----------------------------------------------------------------------|\n |sensors   |temperature  |Number   |yes      |Temperature, unit is reported by tempUnit                              |\n |          |smoke        |Number   |yes      |ON: Smoke detected                                                     |\n-|          |wakeupReason |String   |yes      |Last reason for a device wake-up (battery, button, periodic, poweron, sensor or alarm) |\n |          |lastUpdate   |DateTime |yes      |Timestamp of the last update (any sensor value changed)                |\n |          |lastError    |String   |yes      |Last device error.                                                     |\n |battery   |batteryLevel |Number   |yes      |Battery Level in %                                                     |\n |          |voltage      |Number   |yes      |Voltage of the battery                                                 |\n |          |lowBattery   |Switch   |yes      |Low battery alert (< 20%)                                              |\n \n+### Shelly Smoke(thing type: shellygas)\n+\n+|Group     |Channel      |Type     |read-only|Description                                                            |\n+|----------|-------------|---------|---------|-----------------------------------------------------------------------|\n+|sensors   |ppm          |Number   |yes      |Gas concentration (ppm)                                                |\n+|          |sensorState  |String   |yes      |Sensor state: unknown/warmup/normal/fault                              |\n+|          |alarmState   |String   |yes      |Alarm state: unknown/none/mild/heavy/test                              |\n+|          |lastUpdate   |DateTime |yes      |Timestamp of the last update (any sensor value changed)                |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 620}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNDc1OQ==", "bodyText": "doc incorrect, all lastUpdate had been changed to DateTime with the one of the last releases\nfixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471134759", "createdAt": "2020-08-16T16:58:44Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/README.md", "diffHunk": "@@ -559,13 +722,21 @@ You should calibrate the sensor using the Shelly App to get information on the t\n |----------|-------------|---------|---------|-----------------------------------------------------------------------|\n |sensors   |temperature  |Number   |yes      |Temperature, unit is reported by tempUnit                              |\n |          |smoke        |Number   |yes      |ON: Smoke detected                                                     |\n-|          |wakeupReason |String   |yes      |Last reason for a device wake-up (battery, button, periodic, poweron, sensor or alarm) |\n |          |lastUpdate   |DateTime |yes      |Timestamp of the last update (any sensor value changed)                |\n |          |lastError    |String   |yes      |Last device error.                                                     |\n |battery   |batteryLevel |Number   |yes      |Battery Level in %                                                     |\n |          |voltage      |Number   |yes      |Voltage of the battery                                                 |\n |          |lowBattery   |Switch   |yes      |Low battery alert (< 20%)                                              |\n \n+### Shelly Smoke(thing type: shellygas)\n+\n+|Group     |Channel      |Type     |read-only|Description                                                            |\n+|----------|-------------|---------|---------|-----------------------------------------------------------------------|\n+|sensors   |ppm          |Number   |yes      |Gas concentration (ppm)                                                |\n+|          |sensorState  |String   |yes      |Sensor state: unknown/warmup/normal/fault                              |\n+|          |alarmState   |String   |yes      |Alarm state: unknown/none/mild/heavy/test                              |\n+|          |lastUpdate   |DateTime |yes      |Timestamp of the last update (any sensor value changed)                |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzM4Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 620}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDIzOTk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToxMTozMlrOHBQ5sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzowMjo0M1rOHBTzzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzUzOQ==", "bodyText": "Is the annotation necessary?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087539", "createdAt": "2020-08-16T09:11:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -407,7 +433,14 @@\n     }\n \n     public static class ShellyInputState {\n+        @SerializedName(\"input\")\n         public Integer input;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTE4Mg==", "bodyText": "he he, cpmeister wanted them to make it unified for all elements\nremoved", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135182", "createdAt": "2020-08-16T17:02:43Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -407,7 +433,14 @@\n     }\n \n     public static class ShellyInputState {\n+        @SerializedName(\"input\")\n         public Integer input;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzUzOQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI0MDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToxMTo1NFrOHBQ51A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODoyMTozNFrOHFG1jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087572", "createdAt": "2020-08-16T09:11:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -469,6 +502,11 @@\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n+        // @SerializedName(\"ext_temperature\")\n+        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n+        // @SerializedName(\"ext_humidity\")\n+        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTQyOA==", "bodyText": "in general yes, those are existing, but code doesn't use them at the moment. It makes it easier in case of, because making the comparisons and adding new ones is always a pita\nif you request I could remove them, there are a lot more for the same reason", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135428", "createdAt": "2020-08-16T17:05:16Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -469,6 +502,11 @@\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n+        // @SerializedName(\"ext_temperature\")\n+        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n+        // @SerializedName(\"ext_humidity\")\n+        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTQ1Mw==", "bodyText": "I think it's better then, if you remove the comments and make it normal code. It can be refactored, is scanned by the static code analysis and so on.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149453", "createdAt": "2020-08-16T19:32:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -469,6 +502,11 @@\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n+        // @SerializedName(\"ext_temperature\")\n+        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n+        // @SerializedName(\"ext_humidity\")\n+        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDA2MA==", "bodyText": "yes, but I don't want to include this untested. This could cause an exception when JSON/Gson definitions doesn't match", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100060", "createdAt": "2020-08-22T15:12:05Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -469,6 +502,11 @@\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n+        // @SerializedName(\"ext_temperature\")\n+        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n+        // @SerializedName(\"ext_humidity\")\n+        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExNjk0Mw==", "bodyText": "If you aren't confident, this works at all, I would remove it entirely. Only a suggestion.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475116943", "createdAt": "2020-08-22T18:21:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -469,6 +502,11 @@\n         @SerializedName(\"sleep_mode\")\n         public ShellySensorSleepMode sleepMode; // FW 1.6\n \n+        // @SerializedName(\"ext_temperature\")\n+        // public ShellyStatusSensor.ShellyExtTemperature extTemperature; // Shelly 1/1PM: sensor values\n+        // @SerializedName(\"ext_humidity\")\n+        // public ShellyStatusSensor.ShellyExtHumidity extHumidity; // Shelly 1/1PM: sensor values\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzU3Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI0MTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToxMzoxMlrOHBQ6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxMjoxNVrOHFFzsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzY4MA==", "bodyText": "Can these be removed or the comments be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087680", "createdAt": "2020-08-16T09:13:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -590,6 +641,32 @@\n         public String json;\n     }\n \n+    public static class ShellySettingsInput {\n+        @SerializedName(\"btn_type\")\n+        public String btnType;\n+\n+        // included attributes not yet processed\n+        // public String name;\n+        // @SerializedName(\"btn_reverse\")\n+        // public Integer btnReverse;\n+        // @SerializedName(\"btn_on_url\")\n+        // public String btnOnUrl;\n+        // @SerializedName(\"btn_off_url\")\n+        // public String btnOffUrl;\n+        // @SerializedName(\"shortpush_url\")\n+        // public String shortpushUrl;\n+        // @SerializedName(\"longpush_url\")\n+        // public String longpushUrl;\n+        // @SerializedName(\"double_shortpush_url\")\n+        // public String doubleShortpushUrl;\n+        // @SerializedName(\"triple_shortpush_url\")\n+        // public String tripleShortpushUrl;\n+        // @SerializedName(\"shortpush_longpush_url\")\n+        // public String shortpushLongpushUrl;\n+        // @SerializedName(\"longpush_shortpush_url\")\n+        // public String longpushShortpushUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDA4Mg==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100082", "createdAt": "2020-08-22T15:12:15Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyApiJsonDTO.java", "diffHunk": "@@ -590,6 +641,32 @@\n         public String json;\n     }\n \n+    public static class ShellySettingsInput {\n+        @SerializedName(\"btn_type\")\n+        public String btnType;\n+\n+        // included attributes not yet processed\n+        // public String name;\n+        // @SerializedName(\"btn_reverse\")\n+        // public Integer btnReverse;\n+        // @SerializedName(\"btn_on_url\")\n+        // public String btnOnUrl;\n+        // @SerializedName(\"btn_off_url\")\n+        // public String btnOffUrl;\n+        // @SerializedName(\"shortpush_url\")\n+        // public String shortpushUrl;\n+        // @SerializedName(\"longpush_url\")\n+        // public String longpushUrl;\n+        // @SerializedName(\"double_shortpush_url\")\n+        // public String doubleShortpushUrl;\n+        // @SerializedName(\"triple_shortpush_url\")\n+        // public String tripleShortpushUrl;\n+        // @SerializedName(\"shortpush_longpush_url\")\n+        // public String shortpushLongpushUrl;\n+        // @SerializedName(\"longpush_shortpush_url\")\n+        // public String longpushShortpushUrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzY4MA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI0MTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToxNDowOVrOHBQ6kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzowNTo1OFrOHBT1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4Nzc2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;;\n          \n          \n            \n                public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087763", "createdAt": "2020-08-16T09:14:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "diffHunk": "@@ -78,12 +87,15 @@\n     public boolean isSensor = false; // true for HT & Smoke\n     public boolean hasBattery = false; // true if battery device\n     public boolean isSense = false; // true if thing is a Shelly Sense\n-    public boolean isDW = false; // true of Door Window sensor\n+    public boolean isHT = false; // true for H&T\n+    public boolean isDW = false; // true for Door Window sensor\n+    public boolean isButton = false; // true for a Shelly Button 1\n+    public boolean isIX3 = false; // true for a Shelly IX\n \n     public int minTemp = 0; // Bulb/Duo: Min Light Temp\n     public int maxTemp = 0; // Bulb/Duo: Max Light Temp\n \n-    public int updatePeriod = -1;\n+    public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTQ5MA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135490", "createdAt": "2020-08-16T17:05:58Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "diffHunk": "@@ -78,12 +87,15 @@\n     public boolean isSensor = false; // true for HT & Smoke\n     public boolean hasBattery = false; // true if battery device\n     public boolean isSense = false; // true if thing is a Shelly Sense\n-    public boolean isDW = false; // true of Door Window sensor\n+    public boolean isHT = false; // true for H&T\n+    public boolean isDW = false; // true for Door Window sensor\n+    public boolean isButton = false; // true for a Shelly Button 1\n+    public boolean isIX3 = false; // true for a Shelly IX\n \n     public int minTemp = 0; // Bulb/Duo: Min Light Temp\n     public int maxTemp = 0; // Bulb/Duo: Max Light Temp\n \n-    public int updatePeriod = -1;\n+    public int updatePeriod = 2 * UPDATE_SETTINGS_INTERVAL_SECONDS + 10;;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4Nzc2Mw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI0MjIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToxNDo1NFrOHBQ6wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzowNjoyNVrOHBT1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzgwOA==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471087808", "createdAt": "2020-08-16T09:14:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "diffHunk": "@@ -133,9 +146,18 @@ public ShellyDeviceProfile initialize(String thingType, String json) throws Shel\n             // RGBW2 doesn't report, but has one\n             numMeters = inColor ? 1 : getInteger(settings.device.numOutputs);\n         }\n-        isDimmer = deviceType.equalsIgnoreCase(SHELLYDT_DIMMER);\n         isRoller = mode.equalsIgnoreCase(SHELLY_MODE_ROLLER);\n \n+        /*\n+         * if (settings.extTemperature != null) {\n+         * numTempSensors = settings.extTemperature.sensor3 != null ? 3\n+         * : settings.extTemperature.sensor2 != null ? 2 : settings.extTemperature.sensor1 != null ? 1 : 0;\n+         * }\n+         * if (settings.extTemperature != null) {\n+         * numHumSensors = settings.extHumidity.sensor1 != null ? 1 : 0;\n+         * }\n+         */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTUyNg==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135526", "createdAt": "2020-08-16T17:06:25Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/api/ShellyDeviceProfile.java", "diffHunk": "@@ -133,9 +146,18 @@ public ShellyDeviceProfile initialize(String thingType, String json) throws Shel\n             // RGBW2 doesn't report, but has one\n             numMeters = inColor ? 1 : getInteger(settings.device.numOutputs);\n         }\n-        isDimmer = deviceType.equalsIgnoreCase(SHELLYDT_DIMMER);\n         isRoller = mode.equalsIgnoreCase(SHELLY_MODE_ROLLER);\n \n+        /*\n+         * if (settings.extTemperature != null) {\n+         * numTempSensors = settings.extTemperature.sensor3 != null ? 3\n+         * : settings.extTemperature.sensor2 != null ? 2 : settings.extTemperature.sensor1 != null ? 1 : 0;\n+         * }\n+         * if (settings.extTemperature != null) {\n+         * numHumSensors = settings.extHumidity.sensor1 != null ? 1 : 0;\n+         * }\n+         */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4NzgwOA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI1Mjc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToyODowOFrOHBQ_5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMTozMDoxNlrOHBVY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw==", "bodyText": "Are you sure the string has always at least five characters?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089127", "createdAt": "2020-08-16T09:28:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n+                } else { // CoAP v1\n+                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTY1NQ==", "bodyText": "puh, could we put that into the next PR, those nice little chages have always potential for side effects", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135655", "createdAt": "2020-08-16T17:07:48Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n+                } else { // CoAP v1\n+                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTYwMw==", "bodyText": "Well, if it has more than five characters, the side effect would be a crash. Why not adding an if, checking the length?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149603", "createdAt": "2020-08-16T19:34:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n+                } else { // CoAP v1\n+                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MTA2MQ==", "bodyText": "will be moved to next PR", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471161061", "createdAt": "2020-08-16T21:30:16Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));\n+                } else { // CoAP v1\n+                    if (desc.substring(0, 5).equalsIgnoreCase(SHELLY_CLASS_RELAY)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTEyNw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI1MzI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOToyODo0OFrOHBRALA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMTozMDozMFrOHBVY_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTE5Ng==", "bodyText": "Since we want to get rid of Apache Commons, can you replace this with native Java code? See #7722.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089196", "createdAt": "2020-08-16T09:28:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 309}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MTA4Ng==", "bodyText": "will be moved to next PR", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471161086", "createdAt": "2020-08-16T21:30:30Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTProtocol.java", "diffHunk": "@@ -0,0 +1,354 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.OpenClosedType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.api.ShellyDeviceProfile;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ShellyCoIoTProtocol} implements common functions for the CoIoT implementations\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTProtocol {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTProtocol.class);\n+    protected final String thingName;\n+    protected final ShellyBaseHandler thingHandler;\n+    protected final ShellyDeviceProfile profile;\n+    protected final Map<String, CoIotDescrBlk> blkMap;\n+    protected final Map<String, CoIotDescrSen> sensorMap;\n+\n+    // Due to the fact that the device reports only the current/last status, but no real events, we need to distinguish\n+    // between a real update or just a repeated status on periodic updates\n+    protected int lastCfgCount = -1;\n+    protected int[] lastEventCount = { -1, -1, -1, -1, -1, -1, -1, -1 }; // 4Pro has 4 relays, so 8 should be fine\n+    protected String[] inputEvent = { \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\" };\n+\n+    public ShellyCoIoTProtocol(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        this.thingName = thingName;\n+        this.thingHandler = thingHandler;\n+        this.blkMap = blkMap;\n+        this.sensorMap = sensorMap;\n+        this.profile = thingHandler.getProfile();\n+    }\n+\n+    protected boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+        // Process status information and convert into channel updates\n+        // Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        // String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+        // : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        int rIndex = getIdFromBlk(sen);\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"b\": // BatteryLevel +\n+                updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"h\" /* Humidity */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n+                        toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n+                break;\n+            case \"m\" /* Motion */:\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                break;\n+            case \"l\": // Luminosity +\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n+                        toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n+                break;\n+            case \"s\": // CatchAll\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"state\": // Relay status +\n+                    case \"output\":\n+                        updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n+                        break;\n+                    case \"input\":\n+                        handleInput(sen, s, rGroup, updates);\n+                        break;\n+                    case \"brightness\":\n+                        // already handled by state/output\n+                        break;\n+                    case \"overtemp\": // ++\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"luminositylevel\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ILLUM, getStringType(s.valueStr));\n+                        break;\n+                    case \"charger\": // Sense\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    // RGBW2/Bulb\n+                    case \"red\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"green\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"blue\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"white\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n+                                ShellyColorUtils.toPercent((int) s.value));\n+                        break;\n+                    case \"gain\":\n+                        updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n+                                ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n+                        break;\n+                    case \"sensorerror\": // +\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    protected boolean updateChannel(Map<String, State> updates, String group, String channel, State value) {\n+        updates.put(mkChannelId(group, channel), value);\n+        return true;\n+    }\n+\n+    protected void handleInput(CoIotDescrSen sen, CoIotSensor s, String rGroup, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String iGroup = profile.getInputGroup(idx);\n+        String iChannel = profile.getInputChannel(idx);\n+        updateChannel(updates, iGroup, iChannel, s.value == 0 ? OnOffType.OFF : OnOffType.ON);\n+    }\n+\n+    protected void handleInputEvent(CoIotDescrSen sen, String type, Integer count, Map<String, State> updates) {\n+        int idx = getSensorNumber(sen.desc, sen.id) - 1;\n+        String group = profile.getInputGroup(idx);\n+        logger.debug(\"{}: handleInputEvent, sen={}/{}, type={}, count={}, idx={},group={}\", thingName, sen.type,\n+                sen.desc, type, count, idx, group);\n+        if (count == -1) {\n+            // event type\n+            logger.debug(\"{}: CoAP Update on inputEvent={}\", thingName, type);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTTYPE, new StringType(type));\n+            inputEvent[idx] = type;\n+        } else {\n+            // event count\n+            logger.debug(\"{}: CoAP Update on inputEventCount={}\", thingName, count);\n+            updateChannel(updates, group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(count));\n+            if (profile.inButtonMode(idx) && ((profile.hasBattery && (count == 1)) || (count != lastEventCount[idx]))) {\n+                lastEventCount[idx] = count;\n+                thingHandler.triggerButton(group, inputEvent[idx]);\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * Handles the combined updated of the brightness channel:\n+     * brightness$Switch is the OnOffType (power state)\n+     * brightness&Value is the brightness value\n+     *\n+     * @param profile Device profile, required to select the channel group and name\n+     * @param updates List of updates. updatePower will add brightness$Switch and brightness&Value if changed\n+     * @param id Sensor id from the update\n+     * @param sen Sensor description from the update\n+     * @param s New sensor value\n+     * @param allUpdatesList of updates. This is required, because we need to update both values at the same time\n+     */\n+    protected void updatePower(ShellyDeviceProfile profile, Map<String, State> updates, int id, CoIotDescrSen sen,\n+            CoIotSensor s, List<CoIotSensor> allUpdates) {\n+        String group = \"\";\n+        String channel = CHANNEL_BRIGHTNESS;\n+        String checkL = \"\"; // RGBW-white uses 4 different Power, Brightness, VSwitch values\n+        if (profile.isLight || profile.isDimmer) {\n+            if (profile.isBulb || profile.inColor) {\n+                group = CHANNEL_GROUP_LIGHT_CONTROL;\n+                channel = CHANNEL_LIGHT_POWER;\n+            } else if (profile.isDuo) {\n+                group = CHANNEL_GROUP_WHITE_CONTROL;\n+            } else if (profile.isDimmer) {\n+                group = CHANNEL_GROUP_RELAY_CONTROL;\n+            } else if (profile.isRGBW2) {\n+                group = CHANNEL_GROUP_LIGHT_CHANNEL + id;\n+                checkL = String.valueOf(id - 1); // id is 1-based, L is 0-based\n+                logger.trace(\"{}: updatePower() for L={}\", thingName, checkL);\n+            }\n+\n+            // We need to update brigthtess and on/off state at the same time to avoid \"flipping brightness slider\" in\n+            // the UI\n+            Double brightness = -1.0;\n+            Double power = -1.0;\n+            for (CoIotSensor update : allUpdates) {\n+                CoIotDescrSen d = fixDescription(sensorMap.get(update.id), blkMap);\n+                if (!checkL.isEmpty() && !d.links.equals(checkL)) {\n+                    // continue until we find the correct one\n+                    continue;\n+                }\n+                if (d.desc.equalsIgnoreCase(\"brightness\")) {\n+                    brightness = new Double(update.value);\n+                } else if (d.desc.equalsIgnoreCase(\"output\") || d.desc.equalsIgnoreCase(\"state\")) {\n+                    power = new Double(update.value);\n+                }\n+            }\n+            if (power != -1) {\n+                updateChannel(updates, group, channel + \"$Switch\", power == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+            if (brightness != -1) {\n+                updateChannel(updates, group, channel + \"$Value\",\n+                        toQuantityType(power == 1 ? brightness : 0, DIGITS_NONE, SmartHomeUnits.PERCENT));\n+            }\n+        } else if (profile.hasRelays) {\n+            group = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL : CHANNEL_GROUP_RELAY_CONTROL + id;\n+            updateChannel(updates, group, CHANNEL_OUTPUT, s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+        } else if (profile.isSensor) {\n+            // Sensor state\n+            if (profile.isDW) { // Door Window has item type Contact\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value != 0 ? OpenClosedType.OPEN : OpenClosedType.CLOSED);\n+            } else {\n+                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_CONTACT,\n+                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Find index of Input id, which is required to map to channel name\n+     *\n+     * @parm sensorDesc D field from sensor update\n+     * @param sensorId The id from the sensor update\n+     * @return Index of found entry (+1 will be the suffix for the channel name) or null if sensorId is not found\n+     */\n+    protected int getSensorNumber(String sensorDesc, String sensorId) {\n+        int idx = 0;\n+        for (Map.Entry<String, CoIotDescrSen> se : sensorMap.entrySet()) {\n+            CoIotDescrSen sen = se.getValue();\n+            if (sen.desc.equalsIgnoreCase(sensorDesc)) {\n+                idx++; // iterate from input1..2..n\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId) && blkMap.containsKey(sen.links)) {\n+                int id = getIdFromBlk(sen);\n+                if (id != -1) {\n+                    return id;\n+                }\n+            }\n+            if (sen.id.equalsIgnoreCase(sensorId)) {\n+                return idx;\n+            }\n+        }\n+        logger.debug(\"{}: sensorId {} not found in sensorMap!\", thingName, sensorId);\n+        return -1;\n+    }\n+\n+    protected int getIdFromBlk(CoIotDescrSen sen) {\n+        int idx = -1;\n+        if (blkMap.containsKey(sen.links)) {\n+            CoIotDescrBlk blk = blkMap.get(sen.links);\n+            String desc = blk.desc.toLowerCase();\n+            if (desc.startsWith(SHELLY_CLASS_RELAY) || desc.startsWith(SHELLY_CLASS_ROLLER)) {\n+                if (desc.contains(\"_\")) { // CoAP v2\n+                    idx = Integer.parseInt(StringUtils.substringAfter(desc, \"_\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTE5Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI1NTUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTozMToxOVrOHBRBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzowODoxN1rOHBT1vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                case \"temperature c\": // Device Tem\u00fc in C ++\n          \n          \n            \n                                case \"temperature c\": // Device Temp in C ++", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089461", "createdAt": "2020-08-16T09:31:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n+\n+    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        super(thingName, thingHandler, blkMap, sensorMap);\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n+    }\n+\n+    /**\n+     * Process CoIoT status update message. If a status update is received, but the device description has not been\n+     * received yet a GET is send to query device description.\n+     *\n+     * @param devId device id included in the status packet\n+     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n+     * @param serial Serial for this request. If this the the same as last serial\n+     *            the update was already sent and processed so this one gets\n+     *            ignored.\n+     */\n+    @Override\n+    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+\n+        // first check the base implementation\n+        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+            // process by the base class\n+            return true;\n+        }\n+\n+        // Process status information and convert into channel updates\n+        Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"t\": // Temperature +\n+                Double value = getDouble(s.value);\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"temperature\": // Sensor Temp\n+                        if (getString(getProfile().settings.temperatureUnits)\n+                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n+                                    .doubleValue();\n+                        }\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        break;\n+                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                        break;\n+                    case \"temperature c\": // Device Tem\u00fc in C ++", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTY3OA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135678", "createdAt": "2020-08-16T17:08:17Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n+\n+    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        super(thingName, thingHandler, blkMap, sensorMap);\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n+    }\n+\n+    /**\n+     * Process CoIoT status update message. If a status update is received, but the device description has not been\n+     * received yet a GET is send to query device description.\n+     *\n+     * @param devId device id included in the status packet\n+     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n+     * @param serial Serial for this request. If this the the same as last serial\n+     *            the update was already sent and processed so this one gets\n+     *            ignored.\n+     */\n+    @Override\n+    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+\n+        // first check the base implementation\n+        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+            // process by the base class\n+            return true;\n+        }\n+\n+        // Process status information and convert into channel updates\n+        Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"t\": // Temperature +\n+                Double value = getDouble(s.value);\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"temperature\": // Sensor Temp\n+                        if (getString(getProfile().settings.temperatureUnits)\n+                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n+                                    .doubleValue();\n+                        }\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        break;\n+                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                        break;\n+                    case \"temperature c\": // Device Tem\u00fc in C ++", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTQ2MQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI1NjczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTozMjo1OVrOHBRBxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMTozMDozN1rOHBVZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTYwNA==", "bodyText": "Apache commons", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089604", "createdAt": "2020-08-16T09:32:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n+\n+    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        super(thingName, thingHandler, blkMap, sensorMap);\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n+    }\n+\n+    /**\n+     * Process CoIoT status update message. If a status update is received, but the device description has not been\n+     * received yet a GET is send to query device description.\n+     *\n+     * @param devId device id included in the status packet\n+     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n+     * @param serial Serial for this request. If this the the same as last serial\n+     *            the update was already sent and processed so this one gets\n+     *            ignored.\n+     */\n+    @Override\n+    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+\n+        // first check the base implementation\n+        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+            // process by the base class\n+            return true;\n+        }\n+\n+        // Process status information and convert into channel updates\n+        Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"t\": // Temperature +\n+                Double value = getDouble(s.value);\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"temperature\": // Sensor Temp\n+                        if (getString(getProfile().settings.temperatureUnits)\n+                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n+                                    .doubleValue();\n+                        }\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        break;\n+                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                        break;\n+                    case \"temperature c\": // Device Tem\u00fc in C ++\n+                        // Device temperature\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n+                                toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n+                        break;\n+                    case \"external temperature f\": // Shelly 1/1PM external temp sensors\n+                        // ignore F, we use C only\n+                        break;\n+                    case \"external temperature c\": // Shelly 1/1PM external temp sensors\n+                    case \"external_temperature\":\n+                        int idx = getExtTempId(sen.id);\n+                        if (idx > 0) {\n+                            updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n+                                    toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        } else {\n+                            logger.debug(\"{}: Unable to get extSensorId {} from {}/{}\", thingName, sen.id, sen.type,\n+                                    sen.desc);\n+                        }\n+                        break;\n+                    default:\n+                        logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n+                }\n+                break;\n+            case \"p\": // Power/Watt\n+                // 3EM uses 1-based meter IDs, other 0-based\n+                String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER\n+                        : CHANNEL_GROUP_METER + (profile.isEMeter ? sen.links : rIndex);\n+                updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n+                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n+                break;\n+            case \"s\" /* CatchAll */:\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"overtemp\":\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"energy counter 0 [w-min]\":\n+                        updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n+                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                        break;\n+                    case \"energy counter 1 [w-min]\":\n+                    case \"energy counter 2 [w-min]\":\n+                        // we don't use them\n+                        break;\n+                    case \"energy counter total [w-h]\": // 3EM reports W/h\n+                    case \"energy counter total [w-min]\":\n+                        Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n+                        updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n+                                toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n+                        break;\n+                    case \"voltage\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n+                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n+                        break;\n+                    case \"current\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n+                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n+                        break;\n+                    case \"pf\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"input event\": // Shelly Button 1\n+                        handleInputEvent(sen, getString(s.valueStr), -1, updates);\n+                        break;\n+                    case \"input event counter\": // Shelly Button 1/ix3\n+                        handleInputEvent(sen, \"\", getInteger((int) s.value), updates);\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"tilt\": // DW with FW1.6.5+ //+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n+                                toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"temp\": // Shelly Bulb\n+                    case \"colortemperature\": // Shelly Duo\n+                        updateChannel(updates,\n+                                profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n+                                CHANNEL_COLOR_TEMP,\n+                                ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n+                        break;\n+                    case \"sensor state\": // Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_SSTATE, getStringType(s.valueStr));\n+                        break;\n+                    case \"alarm state\": // Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE,\n+                                getStringType(s.valueStr));\n+                        break;\n+                    case \"self-test state\":// Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST,\n+                                getStringType(s.valueStr));\n+                        break;\n+                    case \"concentration\":// Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n+                        break;\n+                    case \"sensorerror\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     *\n+     * Depending on the device type and firmware release there are significant bugs or incosistencies in the CoIoT\n+     * Device Description returned by the discovery request. Shelly is even not following it's own speicifcation. All of\n+     * that has been reported to Shelly and acknowledged. Firmware 1.6 brought significant improvements. However, the\n+     * old mapping stays in to support older firmware releases.\n+     *\n+     * @param sen Sensor description received from device\n+     * @return fixed Sensor description (sen)\n+     */\n+    @Override\n+    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n+        // Shelly1: reports null descr+type \"Switch\" -> map to S\n+        // Shelly1PM: reports null descr+type \"Overtemp\" -> map to O\n+        // Shelly1PM: reports null descr+type \"W\" -> add description\n+        // Shelly1PM: reports temp senmsors without desc -> add description\n+        // Shelly Dimmer: sensors are reported without descriptions -> map to S\n+        // SHelly Sense: multiple issues: Description should not be lower case, invalid type for Motion and Battery\n+        // Shelly Sense: Battery is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n+        // Shelly Sense: Motion is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n+        // Shelly Bulb: Colors are coded with Type=\"Red\" etc. rather than Type=\"S\" and color as Descr\n+        // Shelly RGBW2 is reporting Brightness, Power, VSwitch for each channel, but all with L=0\n+        if (sen.desc == null) {\n+            sen.desc = \"\";\n+        }\n+        String desc = sen.desc.toLowerCase();\n+\n+        // RGBW2 reports Power_0, Power_1, Power_2, Power_3; same for VSwitch and Brightness, all of them linkted to L:0\n+        // we break it up to Power with L:0, Power with L:1...\n+        if (desc.contains(\"_\") && (desc.contains(\"power\") || desc.contains(\"vswitch\") || desc.contains(\"brightness\"))) {\n+            String newDesc = StringUtils.substringBefore(sen.desc, \"_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE2MTEwMA==", "bodyText": "will be moved to next PR", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471161100", "createdAt": "2020-08-16T21:30:37Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion1.java", "diffHunk": "@@ -0,0 +1,364 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.shelly.internal.coap;\n+\n+import static org.openhab.binding.shelly.internal.ShellyBindingConstants.*;\n+import static org.openhab.binding.shelly.internal.api.ShellyApiJsonDTO.*;\n+import static org.openhab.binding.shelly.internal.util.ShellyUtils.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.unit.ImperialUnits;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrBlk;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotDescrSen;\n+import org.openhab.binding.shelly.internal.coap.ShellyCoapJSonDTO.CoIotSensor;\n+import org.openhab.binding.shelly.internal.handler.ShellyBaseHandler;\n+import org.openhab.binding.shelly.internal.handler.ShellyColorUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import tec.uom.se.unit.Units;\n+\n+/**\n+ * The {@link ShellyCoIoTVersion1} implements the parsing for CoIoT version 1\n+ *\n+ * @author Markus Michels - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShellyCoIoTVersion1 extends ShellyCoIoTProtocol implements ShellyCoIoTInterface {\n+    private final Logger logger = LoggerFactory.getLogger(ShellyCoIoTVersion1.class);\n+\n+    public ShellyCoIoTVersion1(String thingName, ShellyBaseHandler thingHandler, Map<String, CoIotDescrBlk> blkMap,\n+            Map<String, CoIotDescrSen> sensorMap) {\n+        super(thingName, thingHandler, blkMap, sensorMap);\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return ShellyCoapJSonDTO.COIOT_VERSION_1;\n+    }\n+\n+    /**\n+     * Process CoIoT status update message. If a status update is received, but the device description has not been\n+     * received yet a GET is send to query device description.\n+     *\n+     * @param devId device id included in the status packet\n+     * @param payload CoAP payload (Json format), example: {\"G\":[[0,112,0]]}\n+     * @param serial Serial for this request. If this the the same as last serial\n+     *            the update was already sent and processed so this one gets\n+     *            ignored.\n+     */\n+    @Override\n+    public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen sen, CoIotSensor s,\n+            Map<String, State> updates) {\n+\n+        // first check the base implementation\n+        if (super.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+            // process by the base class\n+            return true;\n+        }\n+\n+        // Process status information and convert into channel updates\n+        Integer rIndex = Integer.parseInt(sen.links) + 1;\n+        String rGroup = getProfile().numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n+                : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n+        switch (sen.type.toLowerCase()) {\n+            case \"t\": // Temperature +\n+                Double value = getDouble(s.value);\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"temperature\": // Sensor Temp\n+                        if (getString(getProfile().settings.temperatureUnits)\n+                                .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n+                            value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS).convert(getDouble(s.value))\n+                                    .doubleValue();\n+                        }\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n+                                toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        break;\n+                    case \"temperature f\": // Device Temp -> ignore (we use C only)\n+                        break;\n+                    case \"temperature c\": // Device Tem\u00fc in C ++\n+                        // Device temperature\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n+                                toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n+                        break;\n+                    case \"external temperature f\": // Shelly 1/1PM external temp sensors\n+                        // ignore F, we use C only\n+                        break;\n+                    case \"external temperature c\": // Shelly 1/1PM external temp sensors\n+                    case \"external_temperature\":\n+                        int idx = getExtTempId(sen.id);\n+                        if (idx > 0) {\n+                            updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n+                                    toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n+                        } else {\n+                            logger.debug(\"{}: Unable to get extSensorId {} from {}/{}\", thingName, sen.id, sen.type,\n+                                    sen.desc);\n+                        }\n+                        break;\n+                    default:\n+                        logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n+                }\n+                break;\n+            case \"p\": // Power/Watt\n+                // 3EM uses 1-based meter IDs, other 0-based\n+                String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER\n+                        : CHANNEL_GROUP_METER + (profile.isEMeter ? sen.links : rIndex);\n+                updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n+                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n+                break;\n+            case \"s\" /* CatchAll */:\n+                switch (sen.desc.toLowerCase()) {\n+                    case \"overtemp\":\n+                        if (s.value == 1) {\n+                            thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n+                        }\n+                        break;\n+                    case \"energy counter 0 [w-min]\":\n+                        updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n+                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+                        break;\n+                    case \"energy counter 1 [w-min]\":\n+                    case \"energy counter 2 [w-min]\":\n+                        // we don't use them\n+                        break;\n+                    case \"energy counter total [w-h]\": // 3EM reports W/h\n+                    case \"energy counter total [w-min]\":\n+                        Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n+                        updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n+                                toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n+                        break;\n+                    case \"voltage\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n+                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n+                        break;\n+                    case \"current\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n+                                toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n+                        break;\n+                    case \"pf\":\n+                        updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n+                        break;\n+                    case \"position\":\n+                        // work around: Roller reports 101% instead max 100\n+                        double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n+                                toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n+                        updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n+                                toQuantityType(pos, SmartHomeUnits.PERCENT));\n+                        break;\n+                    case \"input event\": // Shelly Button 1\n+                        handleInputEvent(sen, getString(s.valueStr), -1, updates);\n+                        break;\n+                    case \"input event counter\": // Shelly Button 1/ix3\n+                        handleInputEvent(sen, \"\", getInteger((int) s.value), updates);\n+                        break;\n+                    case \"flood\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"tilt\": // DW with FW1.6.5+ //+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n+                                toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n+                        break;\n+                    case \"vibration\": // DW with FW1.6.5+\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n+                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n+                        break;\n+                    case \"temp\": // Shelly Bulb\n+                    case \"colortemperature\": // Shelly Duo\n+                        updateChannel(updates,\n+                                profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n+                                CHANNEL_COLOR_TEMP,\n+                                ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n+                        break;\n+                    case \"sensor state\": // Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_SSTATE, getStringType(s.valueStr));\n+                        break;\n+                    case \"alarm state\": // Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ALARM_STATE,\n+                                getStringType(s.valueStr));\n+                        break;\n+                    case \"self-test state\":// Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_SELFTTEST,\n+                                getStringType(s.valueStr));\n+                        break;\n+                    case \"concentration\":// Shelly Gas\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_PPM, getDecimal(s.value));\n+                        break;\n+                    case \"sensorerror\":\n+                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_ERROR, getStringType(s.valueStr));\n+                        break;\n+                    default:\n+                        // Unknown\n+                        return false;\n+                }\n+                break;\n+\n+            default:\n+                // Unknown type\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     *\n+     * Depending on the device type and firmware release there are significant bugs or incosistencies in the CoIoT\n+     * Device Description returned by the discovery request. Shelly is even not following it's own speicifcation. All of\n+     * that has been reported to Shelly and acknowledged. Firmware 1.6 brought significant improvements. However, the\n+     * old mapping stays in to support older firmware releases.\n+     *\n+     * @param sen Sensor description received from device\n+     * @return fixed Sensor description (sen)\n+     */\n+    @Override\n+    public CoIotDescrSen fixDescription(CoIotDescrSen sen, Map<String, CoIotDescrBlk> blkMap) {\n+        // Shelly1: reports null descr+type \"Switch\" -> map to S\n+        // Shelly1PM: reports null descr+type \"Overtemp\" -> map to O\n+        // Shelly1PM: reports null descr+type \"W\" -> add description\n+        // Shelly1PM: reports temp senmsors without desc -> add description\n+        // Shelly Dimmer: sensors are reported without descriptions -> map to S\n+        // SHelly Sense: multiple issues: Description should not be lower case, invalid type for Motion and Battery\n+        // Shelly Sense: Battery is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n+        // Shelly Sense: Motion is reported with Desc \"battery\", but type \"H\" instead of \"B\"\n+        // Shelly Bulb: Colors are coded with Type=\"Red\" etc. rather than Type=\"S\" and color as Descr\n+        // Shelly RGBW2 is reporting Brightness, Power, VSwitch for each channel, but all with L=0\n+        if (sen.desc == null) {\n+            sen.desc = \"\";\n+        }\n+        String desc = sen.desc.toLowerCase();\n+\n+        // RGBW2 reports Power_0, Power_1, Power_2, Power_3; same for VSwitch and Brightness, all of them linkted to L:0\n+        // we break it up to Power with L:0, Power with L:1...\n+        if (desc.contains(\"_\") && (desc.contains(\"power\") || desc.contains(\"vswitch\") || desc.contains(\"brightness\"))) {\n+            String newDesc = StringUtils.substringBefore(sen.desc, \"_\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTYwNA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI1ODg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTozNTo0NFrOHBRCuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxOTozNTo1NFrOHBUsog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTg0OA==", "bodyText": "Can you specify the concrete type you want to catch here?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089848", "createdAt": "2020-08-16T09:35:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -229,7 +235,7 @@ public void processResponse(@Nullable Response response) {\n                 reqStatus = sendRequest(reqStatus, config.deviceIp, COLOIT_URI_DEVSTATUS, Type.NON);\n                 discovering = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNTg1Mw==", "bodyText": "change reverted to IllegalArgumentException | NullPointerException e", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471135853", "createdAt": "2020-08-16T17:10:09Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -229,7 +235,7 @@ public void processResponse(@Nullable Response response) {\n                 reqStatus = sendRequest(reqStatus, config.deviceIp, COLOIT_URI_DEVSTATUS, Type.NON);\n                 discovering = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTg0OA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTczMA==", "bodyText": "I'd like it very much if you'd refactor this to not catch a NPE, in a follow-up PR.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149730", "createdAt": "2020-08-16T19:35:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -229,7 +235,7 @@ public void processResponse(@Nullable Response response) {\n                 reqStatus = sendRequest(reqStatus, config.deviceIp, COLOIT_URI_DEVSTATUS, Type.NON);\n                 discovering = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTg0OA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI1OTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTozNzowNlrOHBRDPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxMzo1MlrOHFF0Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTk4MQ==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471089981", "createdAt": "2020-08-16T09:37:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDIwMw==", "bodyText": "changed to NullPointerException | IllegalArgumentException", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100203", "createdAt": "2020-08-22T15:13:52Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA4OTk4MQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2MDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTozODozNVrOHBRDpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxNDo1OVrOHFF0pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng==", "bodyText": "It's bad practice to use exceptions for the normal program flow. Better check if an element exists beforehand.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090086", "createdAt": "2020-08-16T09:38:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n-\n-        // Save to thing properties\n-        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n      * Add a new sensor to the sensor table\n      *\n      * @param sen CoIotDescrSen of the sensor\n      */\n-    private synchronized void addSensor(CoIotDescrSen sen) {\n+    private synchronized boolean addSensor(CoIotDescrSen sen) {\n         logger.debug(\"{}:    id {}: {}, Type={}, Range={}, Links={}\", thingName, sen.id, sen.desc, sen.type, sen.range,\n                 sen.links);\n+        // CoIoT version 2 changes from 3 digit IDs to 4 digit IDs\n+        // We need to make sure that the persisted device description matches,\n+        // otherwise the stored one is discarded and a new discovery is triggered\n+        // This happens on firmware up/downgrades (version 1.8 brings CoIoT v2 with 4 digit IDs)\n+        int vers = coiot.getVersion();\n+        if (((vers == COIOT_VERSION_1) && (sen.id.length() > 3))\n+                || ((vers >= COIOT_VERSION_2) && (sen.id.length() < 4))) {\n+            return false;\n+        }\n+\n         try {\n-            CoIotDescrSen fixed = fixDescription(sen);\n+            CoIotDescrSen fixed = coiot.fixDescription(sen, blkMap);\n             if (!sensorMap.containsKey(fixed.id)) {\n                 sensorMap.put(sen.id, fixed);\n             } else {\n                 sensorMap.replace(sen.id, fixed);\n             }\n-        } catch (NullPointerException e) { // depending on firmware release the CoAP device description is buggy\n+        } catch (RuntimeException e) { // depending on firmware release the CoAP device description is buggy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjAwNQ==", "bodyText": "I already do my best, but depending on the firmware release there are various formatting issues, inconsisdent naming, syntax errors etc. (e.g. see fixDescription() for CoAP 1). The intention: If parse of one sensor field fails for such a reason try at least to process the other ones", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136005", "createdAt": "2020-08-16T17:11:40Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n-\n-        // Save to thing properties\n-        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n      * Add a new sensor to the sensor table\n      *\n      * @param sen CoIotDescrSen of the sensor\n      */\n-    private synchronized void addSensor(CoIotDescrSen sen) {\n+    private synchronized boolean addSensor(CoIotDescrSen sen) {\n         logger.debug(\"{}:    id {}: {}, Type={}, Range={}, Links={}\", thingName, sen.id, sen.desc, sen.type, sen.range,\n                 sen.links);\n+        // CoIoT version 2 changes from 3 digit IDs to 4 digit IDs\n+        // We need to make sure that the persisted device description matches,\n+        // otherwise the stored one is discarded and a new discovery is triggered\n+        // This happens on firmware up/downgrades (version 1.8 brings CoIoT v2 with 4 digit IDs)\n+        int vers = coiot.getVersion();\n+        if (((vers == COIOT_VERSION_1) && (sen.id.length() > 3))\n+                || ((vers >= COIOT_VERSION_2) && (sen.id.length() < 4))) {\n+            return false;\n+        }\n+\n         try {\n-            CoIotDescrSen fixed = fixDescription(sen);\n+            CoIotDescrSen fixed = coiot.fixDescription(sen, blkMap);\n             if (!sensorMap.containsKey(fixed.id)) {\n                 sensorMap.put(sen.id, fixed);\n             } else {\n                 sensorMap.replace(sen.id, fixed);\n             }\n-        } catch (NullPointerException e) { // depending on firmware release the CoAP device description is buggy\n+        } catch (RuntimeException e) { // depending on firmware release the CoAP device description is buggy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0OTkwOQ==", "bodyText": "This might be a bit of boiler plate code, checking for null, but in any case it'd be more elegant than catching a NPE.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471149909", "createdAt": "2020-08-16T19:38:16Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n-\n-        // Save to thing properties\n-        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n      * Add a new sensor to the sensor table\n      *\n      * @param sen CoIotDescrSen of the sensor\n      */\n-    private synchronized void addSensor(CoIotDescrSen sen) {\n+    private synchronized boolean addSensor(CoIotDescrSen sen) {\n         logger.debug(\"{}:    id {}: {}, Type={}, Range={}, Links={}\", thingName, sen.id, sen.desc, sen.type, sen.range,\n                 sen.links);\n+        // CoIoT version 2 changes from 3 digit IDs to 4 digit IDs\n+        // We need to make sure that the persisted device description matches,\n+        // otherwise the stored one is discarded and a new discovery is triggered\n+        // This happens on firmware up/downgrades (version 1.8 brings CoIoT v2 with 4 digit IDs)\n+        int vers = coiot.getVersion();\n+        if (((vers == COIOT_VERSION_1) && (sen.id.length() > 3))\n+                || ((vers >= COIOT_VERSION_2) && (sen.id.length() < 4))) {\n+            return false;\n+        }\n+\n         try {\n-            CoIotDescrSen fixed = fixDescription(sen);\n+            CoIotDescrSen fixed = coiot.fixDescription(sen, blkMap);\n             if (!sensorMap.containsKey(fixed.id)) {\n                 sensorMap.put(sen.id, fixed);\n             } else {\n                 sensorMap.replace(sen.id, fixed);\n             }\n-        } catch (NullPointerException e) { // depending on firmware release the CoAP device description is buggy\n+        } catch (RuntimeException e) { // depending on firmware release the CoAP device description is buggy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDMyNw==", "bodyText": "again I do my best to provent NPEs, but there are a lot of bug in old firmware releases and I want try to process as much sensor data as possible, NullPointerException | IllegalArgumentException", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100327", "createdAt": "2020-08-22T15:14:59Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -248,59 +254,88 @@ private void handleDeviceDescription(String devId, String payload) {\n         // Device description: payload = StringUtils.substringBefore(payload, \"}]}]}\") + \"}]}]}\";\n         logger.debug(\"{}: CoIoT Device Description for {}: {}\", thingName, devId, payload);\n \n-        // Decode Json\n-        CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n-\n-        int i;\n-        for (i = 0; i < descr.blk.size(); i++) {\n-            CoIotDescrBlk blk = descr.blk.get(i);\n-            logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n-            if (!blockMap.containsKey(blk.id)) {\n-                blockMap.put(blk.id, blk);\n-            } else {\n-                blockMap.replace(blk.id, blk);\n+        try {\n+            boolean valid = true;\n+\n+            // Decode Json\n+            CoIotDevDescription descr = gson.fromJson(payload, CoIotDevDescription.class);\n+            for (int i = 0; i < descr.blk.size(); i++) {\n+                CoIotDescrBlk blk = descr.blk.get(i);\n+                logger.debug(\"{}:    id={}: {}\", thingName, blk.id, blk.desc);\n+                if (!blkMap.containsKey(blk.id)) {\n+                    blkMap.put(blk.id, blk);\n+                } else {\n+                    blkMap.replace(blk.id, blk);\n+                }\n+                if ((blk.type != null) && !blk.type.isEmpty()) {\n+                    // in fact it is a sen entry - that's vioaling the Spec\n+                    logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id,\n+                            blk.desc);\n+                    CoIotDescrSen sen = new CoIotDescrSen();\n+                    sen.id = blk.id;\n+                    sen.desc = blk.desc;\n+                    sen.type = blk.type;\n+                    sen.range = blk.range;\n+                    sen.links = blk.links;\n+                    valid &= addSensor(sen);\n+                }\n             }\n-            if ((blk.type != null) && !blk.type.isEmpty()) {\n-                // in fact it is a sen entry - that's vioaling the Spec\n-                logger.trace(\"{}:    fix: auto-create sensor definition for id {}/{}!\", thingName, blk.id, blk.desc);\n-                CoIotDescrSen sen = new CoIotDescrSen();\n-                sen.id = blk.id;\n-                sen.desc = blk.desc;\n-                sen.type = blk.type;\n-                sen.range = blk.range;\n-                sen.links = blk.links;\n-                addSensor(sen);\n+\n+            // Save to thing properties\n+            thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n+\n+            logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n+            if (descr.sen != null) {\n+                for (int i = 0; i < descr.sen.size(); i++) {\n+                    valid &= addSensor(descr.sen.get(i));\n+                }\n             }\n-        }\n-        logger.debug(\"{}: Adding {} sensor definitions\", thingName, descr.sen.size());\n-        if (descr.sen != null) {\n-            for (i = 0; i < descr.sen.size(); i++) {\n-                addSensor(descr.sen.get(i));\n+\n+            if (!valid) {\n+                logger.debug(\n+                        \"{}: Incompatible device description detected for CoIoT version {} (id length mismatch), discarding!\",\n+                        thingName, coiot.getVersion());\n+                thingHandler.updateProperties(PROPERTY_COAP_DESCR, \"\");\n+                discover();\n+                return;\n             }\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload);\n+        } catch (RuntimeException e) {// incl JsonSyntaxException\n+            logger.warn(\"{}: Unable to parse CoAP Device Description! JSON={}\", thingName, payload, e);\n         }\n-\n-        // Save to thing properties\n-        thingHandler.updateProperties(PROPERTY_COAP_DESCR, payload);\n     }\n \n     /**\n      * Add a new sensor to the sensor table\n      *\n      * @param sen CoIotDescrSen of the sensor\n      */\n-    private synchronized void addSensor(CoIotDescrSen sen) {\n+    private synchronized boolean addSensor(CoIotDescrSen sen) {\n         logger.debug(\"{}:    id {}: {}, Type={}, Range={}, Links={}\", thingName, sen.id, sen.desc, sen.type, sen.range,\n                 sen.links);\n+        // CoIoT version 2 changes from 3 digit IDs to 4 digit IDs\n+        // We need to make sure that the persisted device description matches,\n+        // otherwise the stored one is discarded and a new discovery is triggered\n+        // This happens on firmware up/downgrades (version 1.8 brings CoIoT v2 with 4 digit IDs)\n+        int vers = coiot.getVersion();\n+        if (((vers == COIOT_VERSION_1) && (sen.id.length() > 3))\n+                || ((vers >= COIOT_VERSION_2) && (sen.id.length() < 4))) {\n+            return false;\n+        }\n+\n         try {\n-            CoIotDescrSen fixed = fixDescription(sen);\n+            CoIotDescrSen fixed = coiot.fixDescription(sen, blkMap);\n             if (!sensorMap.containsKey(fixed.id)) {\n                 sensorMap.put(sen.id, fixed);\n             } else {\n                 sensorMap.replace(sen.id, fixed);\n             }\n-        } catch (NullPointerException e) { // depending on firmware release the CoAP device description is buggy\n+        } catch (RuntimeException e) { // depending on firmware release the CoAP device description is buggy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDA4Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2MDk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTozODo1NlrOHBRDvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxNTowNVrOHFF0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDExMQ==", "bodyText": "See above and below.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090111", "createdAt": "2020-08-16T09:38:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -353,195 +386,25 @@ private void handleStatusUpdate(String devId, String payload, int serial) {\n                 }\n                 CoIotDescrSen sen = sensorMap.get(s.id);\n                 // find matching sensor definition from device description, use the Link ID as index\n-                sen = fixDescription(sen);\n-                if (!blockMap.containsKey(sen.links)) {\n+                sen = coiot.fixDescription(sen, blkMap);\n+                if (!blkMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Invalid CoAP description: sen.links({}\", thingName, getString(sen.links));\n                     continue;\n                 }\n \n-                if (!blockMap.containsKey(sen.links)) {\n+                if (!blkMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Unable to find BLK for link {} from sen.id={}\", thingName, sen.links, sen.id);\n                     continue;\n                 }\n-                CoIotDescrBlk element = blockMap.get(sen.links);\n+                CoIotDescrBlk element = blkMap.get(sen.links);\n                 logger.trace(\"{}:  Sensor value[{}]: id={}, Value={} ({}, Type={}, Range={}, Link={}: {})\", thingName,\n                         i, s.id, s.value, sen.desc, sen.type, sen.range, sen.links, element.desc);\n \n-                // Process status information and convert into channel updates\n-                Integer rIndex = Integer.parseInt(sen.links) + 1;\n-                String rGroup = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                        : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-\n-                switch (sen.type.toLowerCase()) {\n-                    case \"b\" /* BatteryLevel */:\n-                        updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n-                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"t\" /* Temperature */:\n-                        Double value = getDouble(s.value);\n-                        switch (sen.desc.toLowerCase()) {\n-                            case \"temperature\": // Sensor Temp\n-                                if (getString(profile.settings.temperatureUnits)\n-                                        .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n-                                    value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS)\n-                                            .convert(getDouble(s.value)).doubleValue();\n-                                }\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n-                                        toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                                break;\n-                            case \"temperature f\": // Device Temp -> ignore (we use C only)\n-                                break;\n-                            case \"temperature c\": // Device Tem\u00fc in C\n-                                // Device temperature\n-                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n-                                        toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n-                                break;\n-                            case \"external temperature f\": // Shelly 1/1PM external temp sensors\n-                                // ignore F, we use C only\n-                                break;\n-                            case \"external temperature c\": // Shelly 1/1PM external temp sensors\n-                            case \"external_temperature\":\n-                                int idx = getExtTempId(sen.id);\n-                                if (idx > 0) {\n-                                    updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n-                                            toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                                } else {\n-                                    logger.debug(\"{}: Unable to get extSensorId {} from {}/{}, payload={}\", thingName,\n-                                            sen.id, sen.type, sen.desc, payload);\n-                                }\n-                                break;\n-                            default:\n-                                logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n-                        }\n-                        break;\n-                    case \"h\" /* Humidity */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n-                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"m\" /* Motion */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"l\" /* Luminosity */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n-                                toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n-                        break;\n-                    case \"p\" /* Power/Watt */:\n-                        String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER : CHANNEL_GROUP_METER + rIndex;\n-                        updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n-                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                        updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n-                        break;\n-                    case \"s\" /* CatchAll */:\n-                        String senValue = sen.desc.toLowerCase();\n-                        switch (senValue) {\n-                            case \"state\":\n-                            case \"output\":\n-                                updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n-                                break;\n-                            case \"brightness\":\n-                                // already handled by state/output\n-                                break;\n-                            case \"overtemp\":\n-                                if (s.value == 1) {\n-                                    thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                                }\n-                                break;\n-                            case \"energy counter 0 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter 1 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN2,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter 2 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN3,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter total [w-h]\": // EM3 reports W/h\n-                            case \"energy counter total [w-min]\":\n-                                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n-                                updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n-                                        toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                                break;\n-                            case \"voltage\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n-                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n-                                break;\n-                            case \"current\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n-                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n-                                break;\n-                            case \"pf\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n-                                break;\n-                            case \"position\":\n-                                // work around: Roller reports 101% instead max 100\n-                                double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                        toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                        toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                                break;\n-                            case \"input\":\n-                                handleInput(sen, s, rGroup, updates);\n-                                break;\n-                            case \"flood\":\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            case \"tilt\": // DW with FW1.6.5+\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n-                                        toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n-                                break;\n-                            case \"vibration\": // DW with FW1.6.5+\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            case \"charger\": // Sense\n-                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            // RGBW2/Bulb\n-                            case \"red\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"green\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"blue\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"white\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"gain\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n-                                        ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n-                                break;\n-                            case \"temp\": // Shelly Bulb\n-                            case \"colortemperature\": // Shelly Duo\n-                                updateChannel(updates,\n-                                        profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n-                                        CHANNEL_COLOR_TEMP,\n-                                        ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n-                                break;\n-                            default:\n-                                logger.debug(\n-                                        \"{}: Update for unknown sensor with id {}, type {}/{} received, value={}, payload={}\",\n-                                        thingName, sen.id, sen.type, sen.desc, s.value, payload);\n-                        }\n-                        break;\n-                    default:\n-                        logger.debug(\"{}: Sensor data for id {}, type {}/{} not processed, value={}; payload={}\",\n-                                thingName, sen.id, sen.type, sen.desc, s.value, payload);\n+                if (!coiot.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+                    logger.debug(\"{}: CoIoT data for id {}, type {}/{} not processed, value={}; payload={}\", thingName,\n+                            sen.id, sen.type, sen.desc, s.value, payload);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException | ArrayIndexOutOfBoundsException e) {\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 552}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDMzMg==", "bodyText": "NullPointerException | IllegalArgumentException", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100332", "createdAt": "2020-08-22T15:15:05Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoapHandler.java", "diffHunk": "@@ -353,195 +386,25 @@ private void handleStatusUpdate(String devId, String payload, int serial) {\n                 }\n                 CoIotDescrSen sen = sensorMap.get(s.id);\n                 // find matching sensor definition from device description, use the Link ID as index\n-                sen = fixDescription(sen);\n-                if (!blockMap.containsKey(sen.links)) {\n+                sen = coiot.fixDescription(sen, blkMap);\n+                if (!blkMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Invalid CoAP description: sen.links({}\", thingName, getString(sen.links));\n                     continue;\n                 }\n \n-                if (!blockMap.containsKey(sen.links)) {\n+                if (!blkMap.containsKey(sen.links)) {\n                     logger.debug(\"{}: Unable to find BLK for link {} from sen.id={}\", thingName, sen.links, sen.id);\n                     continue;\n                 }\n-                CoIotDescrBlk element = blockMap.get(sen.links);\n+                CoIotDescrBlk element = blkMap.get(sen.links);\n                 logger.trace(\"{}:  Sensor value[{}]: id={}, Value={} ({}, Type={}, Range={}, Link={}: {})\", thingName,\n                         i, s.id, s.value, sen.desc, sen.type, sen.range, sen.links, element.desc);\n \n-                // Process status information and convert into channel updates\n-                Integer rIndex = Integer.parseInt(sen.links) + 1;\n-                String rGroup = profile.numRelays <= 1 ? CHANNEL_GROUP_RELAY_CONTROL\n-                        : CHANNEL_GROUP_RELAY_CONTROL + rIndex;\n-\n-                switch (sen.type.toLowerCase()) {\n-                    case \"b\" /* BatteryLevel */:\n-                        updateChannel(updates, CHANNEL_GROUP_BATTERY, CHANNEL_SENSOR_BAT_LEVEL,\n-                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"t\" /* Temperature */:\n-                        Double value = getDouble(s.value);\n-                        switch (sen.desc.toLowerCase()) {\n-                            case \"temperature\": // Sensor Temp\n-                                if (getString(profile.settings.temperatureUnits)\n-                                        .equalsIgnoreCase(SHELLY_TEMP_FAHRENHEIT)) {\n-                                    value = ImperialUnits.FAHRENHEIT.getConverterTo(Units.CELSIUS)\n-                                            .convert(getDouble(s.value)).doubleValue();\n-                                }\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP,\n-                                        toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                                break;\n-                            case \"temperature f\": // Device Temp -> ignore (we use C only)\n-                                break;\n-                            case \"temperature c\": // Device Tem\u00fc in C\n-                                // Device temperature\n-                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_ITEMP,\n-                                        toQuantityType(value, DIGITS_NONE, SIUnits.CELSIUS));\n-                                break;\n-                            case \"external temperature f\": // Shelly 1/1PM external temp sensors\n-                                // ignore F, we use C only\n-                                break;\n-                            case \"external temperature c\": // Shelly 1/1PM external temp sensors\n-                            case \"external_temperature\":\n-                                int idx = getExtTempId(sen.id);\n-                                if (idx > 0) {\n-                                    updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TEMP + idx,\n-                                            toQuantityType(value, DIGITS_TEMP, SIUnits.CELSIUS));\n-                                } else {\n-                                    logger.debug(\"{}: Unable to get extSensorId {} from {}/{}, payload={}\", thingName,\n-                                            sen.id, sen.type, sen.desc, payload);\n-                                }\n-                                break;\n-                            default:\n-                                logger.debug(\"{}: Unknown temperatur type: {}\", thingName, sen.desc);\n-                        }\n-                        break;\n-                    case \"h\" /* Humidity */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_HUM,\n-                                toQuantityType(s.value, DIGITS_PERCENT, SmartHomeUnits.PERCENT));\n-                        break;\n-                    case \"m\" /* Motion */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_MOTION,\n-                                s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                        break;\n-                    case \"l\" /* Luminosity */:\n-                        updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_LUX,\n-                                toQuantityType(s.value, DIGITS_LUX, SmartHomeUnits.LUX));\n-                        break;\n-                    case \"p\" /* Power/Watt */:\n-                        String mGroup = profile.numMeters == 1 ? CHANNEL_GROUP_METER : CHANNEL_GROUP_METER + rIndex;\n-                        updateChannel(updates, mGroup, CHANNEL_METER_CURRENTWATTS,\n-                                toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                        updateChannel(updates, mGroup, CHANNEL_LAST_UPDATE, getTimestamp());\n-                        break;\n-                    case \"s\" /* CatchAll */:\n-                        String senValue = sen.desc.toLowerCase();\n-                        switch (senValue) {\n-                            case \"state\":\n-                            case \"output\":\n-                                updatePower(profile, updates, rIndex, sen, s, sensorUpdates);\n-                                break;\n-                            case \"brightness\":\n-                                // already handled by state/output\n-                                break;\n-                            case \"overtemp\":\n-                                if (s.value == 1) {\n-                                    thingHandler.postEvent(ALARM_TYPE_OVERTEMP, true);\n-                                }\n-                                break;\n-                            case \"energy counter 0 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN1,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter 1 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN2,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter 2 [w-min]\":\n-                                updateChannel(updates, rGroup, CHANNEL_METER_LASTMIN3,\n-                                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n-                                break;\n-                            case \"energy counter total [w-h]\": // EM3 reports W/h\n-                            case \"energy counter total [w-min]\":\n-                                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n-                                updateChannel(updates, rGroup, CHANNEL_METER_TOTALKWH,\n-                                        toQuantityType(total, DIGITS_KWH, SmartHomeUnits.KILOWATT_HOUR));\n-                                break;\n-                            case \"voltage\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_VOLTAGE,\n-                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.VOLT));\n-                                break;\n-                            case \"current\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_CURRENT,\n-                                        toQuantityType(getDouble(s.value), DIGITS_VOLT, SmartHomeUnits.AMPERE));\n-                                break;\n-                            case \"pf\":\n-                                updateChannel(updates, rGroup, CHANNEL_EMETER_PFACTOR, getDecimal(s.value));\n-                                break;\n-                            case \"position\":\n-                                // work around: Roller reports 101% instead max 100\n-                                double pos = Math.max(SHELLY_MIN_ROLLER_POS, Math.min(s.value, SHELLY_MAX_ROLLER_POS));\n-                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_CONTROL,\n-                                        toQuantityType(SHELLY_MAX_ROLLER_POS - pos, SmartHomeUnits.PERCENT));\n-                                updateChannel(updates, CHANNEL_GROUP_ROL_CONTROL, CHANNEL_ROL_CONTROL_POS,\n-                                        toQuantityType(pos, SmartHomeUnits.PERCENT));\n-                                break;\n-                            case \"input\":\n-                                handleInput(sen, s, rGroup, updates);\n-                                break;\n-                            case \"flood\":\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_FLOOD,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            case \"tilt\": // DW with FW1.6.5+\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_TILT,\n-                                        toQuantityType(s.value, DIGITS_NONE, SmartHomeUnits.DEGREE_ANGLE));\n-                                break;\n-                            case \"vibration\": // DW with FW1.6.5+\n-                                updateChannel(updates, CHANNEL_GROUP_SENSOR, CHANNEL_SENSOR_VIBRATION,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            case \"charger\": // Sense\n-                                updateChannel(updates, CHANNEL_GROUP_DEV_STATUS, CHANNEL_DEVST_CHARGER,\n-                                        s.value == 1 ? OnOffType.ON : OnOffType.OFF);\n-                                break;\n-                            // RGBW2/Bulb\n-                            case \"red\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_RED,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"green\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GREEN,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"blue\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_BLUE,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"white\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_WHITE,\n-                                        ShellyColorUtils.toPercent((int) s.value));\n-                                break;\n-                            case \"gain\":\n-                                updateChannel(updates, CHANNEL_GROUP_COLOR_CONTROL, CHANNEL_COLOR_GAIN,\n-                                        ShellyColorUtils.toPercent((int) s.value, SHELLY_MIN_GAIN, SHELLY_MAX_GAIN));\n-                                break;\n-                            case \"temp\": // Shelly Bulb\n-                            case \"colortemperature\": // Shelly Duo\n-                                updateChannel(updates,\n-                                        profile.inColor ? CHANNEL_GROUP_COLOR_CONTROL : CHANNEL_GROUP_WHITE_CONTROL,\n-                                        CHANNEL_COLOR_TEMP,\n-                                        ShellyColorUtils.toPercent((int) s.value, profile.minTemp, profile.maxTemp));\n-                                break;\n-                            default:\n-                                logger.debug(\n-                                        \"{}: Update for unknown sensor with id {}, type {}/{} received, value={}, payload={}\",\n-                                        thingName, sen.id, sen.type, sen.desc, s.value, payload);\n-                        }\n-                        break;\n-                    default:\n-                        logger.debug(\"{}: Sensor data for id {}, type {}/{} not processed, value={}; payload={}\",\n-                                thingName, sen.id, sen.type, sen.desc, s.value, payload);\n+                if (!coiot.handleStatusUpdate(sensorUpdates, sen, s, updates)) {\n+                    logger.debug(\"{}: CoIoT data for id {}, type {}/{} not processed, value={}; payload={}\", thingName,\n+                            sen.id, sen.type, sen.desc, s.value, payload);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException | ArrayIndexOutOfBoundsException e) {\n+            } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDExMQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 552}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2NDI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo0MzoxNVrOHBRFUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzoxMjowNVrOHBT3KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDUxNA==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090514", "createdAt": "2020-08-16T09:43:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -846,16 +867,76 @@ public boolean updateInputs(String groupName, ShellySettingsStatus status, int i\n         return updated;\n     }\n \n+    public boolean updateInputs(ShellySettingsStatus status) {\n+        boolean updated = false;\n+        String groupName = \"\";\n+\n+        if (status.input != null) {\n+            // RGBW2: a single int rather than an array\n+            return updateChannel(groupName, CHANNEL_INPUT,\n+                    getInteger(status.input) == 0 ? OnOffType.OFF : OnOffType.ON);\n+        }\n+        if (status.inputs != null) {\n+            int idx = 0;\n+            for (ShellyInputState input : status.inputs) {\n+                String group = profile.getControlGroup(idx);\n+                updated |= updateChannel(group, CHANNEL_INPUT, getOnOff(input.input));\n+                if (input.event != null) {\n+                    logger.debug(\"{}: REST update on inputEvent={}, count={}\", thingName, getStringType(input.event),\n+                            getDecimal(input.eventCount));\n+                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTTYPE, getStringType(input.event));\n+                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(input.eventCount));\n+                }\n+                idx++;\n+            }\n+        }\n+        return updated;\n+    }\n+\n+    public void triggerButton(String group, String value) {\n+        String trigger = mapButtonEvent(value);\n+        if (trigger.isEmpty()) {\n+            return;\n+        }\n+\n+        logger.debug(\"{}: Update button state with {}/{}\", thingName, value, trigger);\n+        triggerChannel(group, CHANNEL_BUTTON_TRIGGER, trigger);\n+        updateChannel(group, CHANNEL_LAST_UPDATE, getTimestamp());\n+        if (!profile.hasBattery) {\n+            // refresh status of the input channel\n+            requestUpdates(1, false);\n+        }\n+\n+        /*\n+         * if (profile.isButton)/ {\n+         * // Button1 doesn't send a RELEASED, to make it consistent the binding simulates a RELEASED\n+         * ScheduledFuture<?> job = this.asyncButtonRelease;\n+         * if ((job != null) && !job.isCancelled()) {\n+         * job.cancel(true);\n+         * }\n+         * asyncButtonRelease = scheduler.schedule(() -> {\n+         * logger.debug(\"{}: Simulating Button RELEASED\", thingName);\n+         * triggerChannel(group, CHANNEL_BUTTON_TRIGGER, CommonTriggerEvents.RELEASED);\n+         * }, 1000, TimeUnit.MILLISECONDS);\n+         * }\n+         * }\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 473}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjA0MA==", "bodyText": "yep", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136040", "createdAt": "2020-08-16T17:12:05Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -846,16 +867,76 @@ public boolean updateInputs(String groupName, ShellySettingsStatus status, int i\n         return updated;\n     }\n \n+    public boolean updateInputs(ShellySettingsStatus status) {\n+        boolean updated = false;\n+        String groupName = \"\";\n+\n+        if (status.input != null) {\n+            // RGBW2: a single int rather than an array\n+            return updateChannel(groupName, CHANNEL_INPUT,\n+                    getInteger(status.input) == 0 ? OnOffType.OFF : OnOffType.ON);\n+        }\n+        if (status.inputs != null) {\n+            int idx = 0;\n+            for (ShellyInputState input : status.inputs) {\n+                String group = profile.getControlGroup(idx);\n+                updated |= updateChannel(group, CHANNEL_INPUT, getOnOff(input.input));\n+                if (input.event != null) {\n+                    logger.debug(\"{}: REST update on inputEvent={}, count={}\", thingName, getStringType(input.event),\n+                            getDecimal(input.eventCount));\n+                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTTYPE, getStringType(input.event));\n+                    updated |= updateChannel(group, CHANNEL_STATUS_EVENTCOUNT, getDecimal(input.eventCount));\n+                }\n+                idx++;\n+            }\n+        }\n+        return updated;\n+    }\n+\n+    public void triggerButton(String group, String value) {\n+        String trigger = mapButtonEvent(value);\n+        if (trigger.isEmpty()) {\n+            return;\n+        }\n+\n+        logger.debug(\"{}: Update button state with {}/{}\", thingName, value, trigger);\n+        triggerChannel(group, CHANNEL_BUTTON_TRIGGER, trigger);\n+        updateChannel(group, CHANNEL_LAST_UPDATE, getTimestamp());\n+        if (!profile.hasBattery) {\n+            // refresh status of the input channel\n+            requestUpdates(1, false);\n+        }\n+\n+        /*\n+         * if (profile.isButton)/ {\n+         * // Button1 doesn't send a RELEASED, to make it consistent the binding simulates a RELEASED\n+         * ScheduledFuture<?> job = this.asyncButtonRelease;\n+         * if ((job != null) && !job.isCancelled()) {\n+         * job.cancel(true);\n+         * }\n+         * asyncButtonRelease = scheduler.schedule(() -> {\n+         * logger.debug(\"{}: Simulating Button RELEASED\", thingName);\n+         * triggerChannel(group, CHANNEL_BUTTON_TRIGGER, CommonTriggerEvents.RELEASED);\n+         * }, 1000, TimeUnit.MILLISECONDS);\n+         * }\n+         * }\n+         */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDUxNA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 473}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2NDU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo0Mzo0NFrOHBRFgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NzowN1rOHBUIZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDU2MA==", "bodyText": "No harm in canceling a task that is already cancelled.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090560", "createdAt": "2020-08-16T09:43:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -1049,12 +1129,18 @@ public void triggerChannel(String group, String channel, String payload) {\n \n     public void stop() {\n         logger.debug(\"{}: Shutting down\", thingName);\n-        ScheduledFuture<?> statusJob = this.statusJob;\n-        if (statusJob != null) {\n-            statusJob.cancel(true);\n+        ScheduledFuture<?> job = this.statusJob;\n+        if (job != null) {\n+            job.cancel(true);\n             statusJob = null;\n             logger.debug(\"{}: Shelly statusJob stopped\", thingName);\n         }\n+        job = asyncButtonRelease;\n+        if ((job != null) && !job.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 517}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDQ1NA==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140454", "createdAt": "2020-08-16T17:57:07Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -1049,12 +1129,18 @@ public void triggerChannel(String group, String channel, String payload) {\n \n     public void stop() {\n         logger.debug(\"{}: Shutting down\", thingName);\n-        ScheduledFuture<?> statusJob = this.statusJob;\n-        if (statusJob != null) {\n-            statusJob.cancel(true);\n+        ScheduledFuture<?> job = this.statusJob;\n+        if (job != null) {\n+            job.cancel(true);\n             statusJob = null;\n             logger.debug(\"{}: Shelly statusJob stopped\", thingName);\n         }\n+        job = asyncButtonRelease;\n+        if ((job != null) && !job.isCancelled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDU2MA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 517}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2Njc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo0NjowN1rOHBRGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzoxMzoxM1rOHBT3jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDgxMQ==", "bodyText": "Can you remove this? You could create an issue instead.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090811", "createdAt": "2020-08-16T09:46:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "diffHunk": "@@ -181,6 +207,8 @@ public static ShellyChannel getDefinition(String channelName) throws IllegalArgu\n     public static Map<String, Channel> createRelayChannels(final Thing thing, final ShellyStatusRelay relays) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n \n+        // TODO: Add the relay channels and remove them from the xml definition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjE0MQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136141", "createdAt": "2020-08-16T17:13:13Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "diffHunk": "@@ -181,6 +207,8 @@ public static ShellyChannel getDefinition(String channelName) throws IllegalArgu\n     public static Map<String, Channel> createRelayChannels(final Thing thing, final ShellyStatusRelay relays) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n \n+        // TODO: Add the relay channels and remove them from the xml definition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDgxMQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2NzAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo0NjoyOFrOHBRGmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzoxMzoyM1rOHBT3lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDg0Mg==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471090842", "createdAt": "2020-08-16T09:46:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "diffHunk": "@@ -190,14 +218,14 @@ public static ShellyChannel getDefinition(String channelName) throws IllegalArgu\n         if (relays.extHumidity != null) {\n             addChannel(thing, add, relays.extHumidity.sensor1 != null, CHGR_SENSOR, CHANNEL_ESENDOR_HUMIDITY);\n         }\n+\n         return add;\n     }\n \n     public static Map<String, Channel> createRollerChannels(Thing thing, final ShellyControlRoller roller) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n-\n-        // No dynamic channels so far, maybe added in the future\n-\n+        addChannel(thing, add, roller.state != null, CHGR_ROLLER, CHANNEL_ROL_CONTROL_STATE);\n+        // TODO: Add the other channels and remove them from the xml definition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjE0OQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136149", "createdAt": "2020-08-16T17:13:23Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyChannelDefinitionsDTO.java", "diffHunk": "@@ -190,14 +218,14 @@ public static ShellyChannel getDefinition(String channelName) throws IllegalArgu\n         if (relays.extHumidity != null) {\n             addChannel(thing, add, relays.extHumidity.sensor1 != null, CHGR_SENSOR, CHANNEL_ESENDOR_HUMIDITY);\n         }\n+\n         return add;\n     }\n \n     public static Map<String, Channel> createRollerChannels(Thing thing, final ShellyControlRoller roller) {\n         Map<String, Channel> add = new LinkedHashMap<>();\n-\n-        // No dynamic channels so far, maybe added in the future\n-\n+        addChannel(thing, add, roller.state != null, CHGR_ROLLER, CHANNEL_ROL_CONTROL_STATE);\n+        // TODO: Add the other channels and remove them from the xml definition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MDg0Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI2ODQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo0ODo0NlrOHBRHbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzoxNDowNFrOHBT30g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTA1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            message.init.noipaddress = Es konnte keine lokale IP-Adresse ermittelt werden. Bitte sicherstellen, dass IPv4 gebunden ist und das richtige Interface in der openHAB Netzwerk-Konfiguration ausgew\ufffdhlt ist.\n          \n          \n            \n            message.init.noipaddress = Es konnte keine lokale IP-Adresse ermittelt werden. Bitte sicherstellen, dass IPv4 aktiviert ist und das richtige Interface in der openHAB Netzwerk-Konfiguration ausgew\ufffdhlt ist.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091052", "createdAt": "2020-08-16T09:48:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -21,6 +22,7 @@ message.versioncheck.beta = Es wurde eine Betaversion erkannt: {0}/{1} ({2}), bi\n message.versioncheck.tooold = ACHTUNG: Eine alter Firmware wurde erkannt: {0}/{1} ({2}), minimal erforderlich {3}.\n message.versioncheck.update = INFO: Eine neue Firmwareversion ist verf\ufffdgbar, aktuell: {0}, neu: {1}\n message.versioncheck.autocoiot = INFO: Die Firmware unterst\ufffdtzt die Anforderung, Auto-CoIoT wurde aktiviert.\n+message.init.noipaddress = Es konnte keine lokale IP-Adresse ermittelt werden. Bitte sicherstellen, dass IPv4 gebunden ist und das richtige Interface in der openHAB Netzwerk-Konfiguration ausgew\ufffdhlt ist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjIxMA==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136210", "createdAt": "2020-08-16T17:14:04Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -21,6 +22,7 @@ message.versioncheck.beta = Es wurde eine Betaversion erkannt: {0}/{1} ({2}), bi\n message.versioncheck.tooold = ACHTUNG: Eine alter Firmware wurde erkannt: {0}/{1} ({2}), minimal erforderlich {3}.\n message.versioncheck.update = INFO: Eine neue Firmwareversion ist verf\ufffdgbar, aktuell: {0}, neu: {1}\n message.versioncheck.autocoiot = INFO: Die Firmware unterst\ufffdtzt die Anforderung, Auto-CoIoT wurde aktiviert.\n+message.init.noipaddress = Es konnte keine lokale IP-Adresse ermittelt werden. Bitte sicherstellen, dass IPv4 gebunden ist und das richtige Interface in der openHAB Netzwerk-Konfiguration ausgew\ufffdhlt ist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTA1Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MDEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1MDoxN1rOHBRIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzoxNDoyNlrOHBT3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTI0Mg==", "bodyText": "Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            thing-type.shelly.shellybutton1.group.battery.label = Batterie-Status\n          \n          \n            \n            thing-type.shelly.shellybutton1.group.battery.label = Batteriestatus", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091242", "createdAt": "2020-08-16T09:50:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -232,16 +238,34 @@ thing-type.shelly.shellyplugs.group.relay.label = Relais\n thing-type.shelly.shellyplugs.group.relay.description = Relais Ein-/Ausg\ufffdnge und Status\n thing-type.shelly.shellyplugs.group.meter.label = Verbrauch\n thing-type.shelly.shellyplugs.group.meter.description = Verbrauchswerte und andere Informationen\n-thing-type.shelly.shellyplugs.group.led.label = LEDs\n-thing-type.shelly.shellyplugs.group.led.description = Einstellungen zur Deaktivierung der LEDS\n thing-type.shelly.shellyplugs.group.device.label = Ger\ufffdtestatus\n thing-type.shelly.shellyplugs.group.device.description = Informationen zum Ger\ufffdtestatus\n thing-type.shelly.shellydimmer.group.relay.label = Relais\n thing-type.shelly.shellydimmer.group.relay.description = Relais Ein-/Ausg\ufffdnge und Status\n thing-type.shelly.shellydimmer.group.meter.label = Verbrauch\n-thing-type.shelly.shellypdimmer.group.meter.description = Verbrauchswerte und andere Informationen\n+thing-type.shelly.shellydimmer.group.meter.description = Verbrauchswerte und andere Informationen\n thing-type.shelly.shellydimmer.group.device.label = Ger\ufffdtestatus\n thing-type.shelly.shellydimmer.group.device.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellydimmer2.group.relay.label = Relay\n+thing-type.shelly.shellydimmer2.group.relay.description = Relais Ein-/Ausg\ufffdnge und Status\n+thing-type.shelly.shellydimmer2.group.meter.label = Verbrauch\n+thing-type.shelly.shellydimmer2.group.meter.description = Verbrauchswerte und andere Informationen\n+thing-type.shelly.shellydimmer2.group.device.label = Ger\ufffdtestatus\n+thing-type.shelly.shellydimmer2.group.device.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellyix3.group.status1.label = Eingang #1\n+thing-type.shelly.shellyix3.group.status1.description = Status Informationen zum Eingang 1\n+thing-type.shelly.shellyix3.group.status2.label = Eingang #2\n+thing-type.shelly.shellyix3.group.status2.description = Status Informationen zum Eingang 2\n+thing-type.shelly.shellyix3.group.status3.label = Eingang #3\n+thing-type.shelly.shellyix3.group.status3.description = Status Informationen zum Eingang 3\n+thing-type.shelly.shellyix3.group.device.label = Ger\ufffdtestatus\n+thing-type.shelly.shellyix3.group.device.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellybutton1.group.status.label = Taster-Status\n+thing-type.shelly.shellybutton1.group.status.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellybutton1.group.battery.label = Batterie-Status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzNjI1NQ==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471136255", "createdAt": "2020-08-16T17:14:26Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -232,16 +238,34 @@ thing-type.shelly.shellyplugs.group.relay.label = Relais\n thing-type.shelly.shellyplugs.group.relay.description = Relais Ein-/Ausg\ufffdnge und Status\n thing-type.shelly.shellyplugs.group.meter.label = Verbrauch\n thing-type.shelly.shellyplugs.group.meter.description = Verbrauchswerte und andere Informationen\n-thing-type.shelly.shellyplugs.group.led.label = LEDs\n-thing-type.shelly.shellyplugs.group.led.description = Einstellungen zur Deaktivierung der LEDS\n thing-type.shelly.shellyplugs.group.device.label = Ger\ufffdtestatus\n thing-type.shelly.shellyplugs.group.device.description = Informationen zum Ger\ufffdtestatus\n thing-type.shelly.shellydimmer.group.relay.label = Relais\n thing-type.shelly.shellydimmer.group.relay.description = Relais Ein-/Ausg\ufffdnge und Status\n thing-type.shelly.shellydimmer.group.meter.label = Verbrauch\n-thing-type.shelly.shellypdimmer.group.meter.description = Verbrauchswerte und andere Informationen\n+thing-type.shelly.shellydimmer.group.meter.description = Verbrauchswerte und andere Informationen\n thing-type.shelly.shellydimmer.group.device.label = Ger\ufffdtestatus\n thing-type.shelly.shellydimmer.group.device.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellydimmer2.group.relay.label = Relay\n+thing-type.shelly.shellydimmer2.group.relay.description = Relais Ein-/Ausg\ufffdnge und Status\n+thing-type.shelly.shellydimmer2.group.meter.label = Verbrauch\n+thing-type.shelly.shellydimmer2.group.meter.description = Verbrauchswerte und andere Informationen\n+thing-type.shelly.shellydimmer2.group.device.label = Ger\ufffdtestatus\n+thing-type.shelly.shellydimmer2.group.device.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellyix3.group.status1.label = Eingang #1\n+thing-type.shelly.shellyix3.group.status1.description = Status Informationen zum Eingang 1\n+thing-type.shelly.shellyix3.group.status2.label = Eingang #2\n+thing-type.shelly.shellyix3.group.status2.description = Status Informationen zum Eingang 2\n+thing-type.shelly.shellyix3.group.status3.label = Eingang #3\n+thing-type.shelly.shellyix3.group.status3.description = Status Informationen zum Eingang 3\n+thing-type.shelly.shellyix3.group.device.label = Ger\ufffdtestatus\n+thing-type.shelly.shellyix3.group.device.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellybutton1.group.status.label = Taster-Status\n+thing-type.shelly.shellybutton1.group.status.description = Informationen zum Ger\ufffdtestatus\n+thing-type.shelly.shellybutton1.group.battery.label = Batterie-Status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTI0Mg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MDg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1MToyNFrOHBRIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1MzoyNVrOHBUG6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTMzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.rollerState.description = Zustand des Rolladen (open/closed/stopped).\n          \n          \n            \n            channel-type.shelly.rollerState.description = Zustand des Rollladen (open/closed/stopped).", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091335", "createdAt": "2020-08-16T09:51:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -311,7 +363,12 @@ channel-type.shelly.rollerShutter.label = Steuerung (0=offen, 100=geschlossen)\n channel-type.shelly.rollerShutter.description = Steuerung f\ufffdr den Rollladen: UP, DOWN, STOP, Position (0=offen, 100=geschlossen)\n channel-type.shelly.rollerPosition.label = Position (100=offen, 0=zu)\n channel-type.shelly.rollerPosition.description = Invertierte Position des Rollladen: 100=offen, 0=zu\n-channel-type.shelly.rollerStop.label = Stopp-Grund\n+channel-type.shelly.rollerState.label = Status\n+channel-type.shelly.rollerState.description = Zustand des Rolladen (open/closed/stopped).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDA3NQ==", "bodyText": "Neue Deutsche Rechtschreibung mit 3xlll - das tut schon in den Augen weh :-)", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140075", "createdAt": "2020-08-16T17:53:25Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -311,7 +363,12 @@ channel-type.shelly.rollerShutter.label = Steuerung (0=offen, 100=geschlossen)\n channel-type.shelly.rollerShutter.description = Steuerung f\ufffdr den Rollladen: UP, DOWN, STOP, Position (0=offen, 100=geschlossen)\n channel-type.shelly.rollerPosition.label = Position (100=offen, 0=zu)\n channel-type.shelly.rollerPosition.description = Invertierte Position des Rollladen: 100=offen, 0=zu\n-channel-type.shelly.rollerStop.label = Stopp-Grund\n+channel-type.shelly.rollerState.label = Status\n+channel-type.shelly.rollerState.description = Zustand des Rolladen (open/closed/stopped).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTMzNQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MTE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1MTo0OFrOHBRItA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1Nzo1OFrOHBUItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.rollerStop.description = Letzter Grund f\ufffdr das stoppen des Rollladens (normal=normaler Stopp, safety_switch=Sicherheits-Stopp, obstacle=Rollladen verhakt (Widerstand erkannt)\n          \n          \n            \n            channel-type.shelly.rollerStop.description = Letzter Grund f\ufffdr das Stoppen des Rollladens (normal=normaler Stopp, safety_switch=Sicherheits-Stopp, obstacle=Rollladen verhakt (Widerstand erkannt)", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091380", "createdAt": "2020-08-16T09:51:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -311,7 +363,12 @@ channel-type.shelly.rollerShutter.label = Steuerung (0=offen, 100=geschlossen)\n channel-type.shelly.rollerShutter.description = Steuerung f\ufffdr den Rollladen: UP, DOWN, STOP, Position (0=offen, 100=geschlossen)\n channel-type.shelly.rollerPosition.label = Position (100=offen, 0=zu)\n channel-type.shelly.rollerPosition.description = Invertierte Position des Rollladen: 100=offen, 0=zu\n-channel-type.shelly.rollerStop.label = Stopp-Grund\n+channel-type.shelly.rollerState.label = Status\n+channel-type.shelly.rollerState.description = Zustand des Rolladen (open/closed/stopped).\n+channel-type.shelly.rollerState.state.option.open = ge\ufffdffnet\n+channel-type.shelly.rollerState.state.option.close = geschlossen\n+channel-type.shelly.rollerState.state.option.stop = gestoppt\n+channel-type.shelly.rollerStop.label = Stoppgrund\n channel-type.shelly.rollerStop.description = Letzter Grund f\ufffdr das stoppen des Rollladens (normal=normaler Stopp, safety_switch=Sicherheits-Stopp, obstacle=Rollladen verhakt (Widerstand erkannt)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDUzNQ==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140535", "createdAt": "2020-08-16T17:57:58Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -311,7 +363,12 @@ channel-type.shelly.rollerShutter.label = Steuerung (0=offen, 100=geschlossen)\n channel-type.shelly.rollerShutter.description = Steuerung f\ufffdr den Rollladen: UP, DOWN, STOP, Position (0=offen, 100=geschlossen)\n channel-type.shelly.rollerPosition.label = Position (100=offen, 0=zu)\n channel-type.shelly.rollerPosition.description = Invertierte Position des Rollladen: 100=offen, 0=zu\n-channel-type.shelly.rollerStop.label = Stopp-Grund\n+channel-type.shelly.rollerState.label = Status\n+channel-type.shelly.rollerState.description = Zustand des Rolladen (open/closed/stopped).\n+channel-type.shelly.rollerState.state.option.open = ge\ufffdffnet\n+channel-type.shelly.rollerState.state.option.close = geschlossen\n+channel-type.shelly.rollerState.state.option.stop = gestoppt\n+channel-type.shelly.rollerStop.label = Stoppgrund\n channel-type.shelly.rollerStop.description = Letzter Grund f\ufffdr das stoppen des Rollladens (normal=normaler Stopp, safety_switch=Sicherheits-Stopp, obstacle=Rollladen verhakt (Widerstand erkannt)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTM4MA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MTU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1MjoyN1rOHBRI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1Mzo1NFrOHBUHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n          \n          \n            \n            channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erfordert Kalibrierung in der App)", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091433", "createdAt": "2020-08-16T09:52:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDEwNw==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140107", "createdAt": "2020-08-16T17:53:54Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTQzMw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MTc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1Mjo0MFrOHBRJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NDoxMVrOHBUHIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.sensorVibration.label = Virbration\n          \n          \n            \n            channel-type.shelly.sensorVibration.label = Vibration", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091456", "createdAt": "2020-08-16T09:52:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n+channel-type.shelly.sensorVibration.label = Virbration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDEzMQ==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140131", "createdAt": "2020-08-16T17:54:11Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n+channel-type.shelly.sensorVibration.label = Virbration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTQ1Ng=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MjA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1Mjo1NlrOHBRJIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NDozM1rOHBUHSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTQ5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.sensorValve.description = Gibt den Status des Ventials an, sofern eines angeschlossen ist.\n          \n          \n            \n            channel-type.shelly.sensorValve.description = Gibt den Status des Ventils an, sofern eines angeschlossen ist.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091490", "createdAt": "2020-08-16T09:52:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n+channel-type.shelly.sensorVibration.label = Virbration\n+channel-type.shelly.sensorVibration.description = ON: Sensor hat eine Vibration erkannt\n+channel-type.shelly.sensorValve.label = Ventil\n+channel-type.shelly.sensorValve.description = Gibt den Status des Ventials an, sofern eines angeschlossen ist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDE2OA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140168", "createdAt": "2020-08-16T17:54:33Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n+channel-type.shelly.sensorVibration.label = Virbration\n+channel-type.shelly.sensorVibration.description = ON: Sensor hat eine Vibration erkannt\n+channel-type.shelly.sensorValve.label = Ventil\n+channel-type.shelly.sensorValve.description = Gibt den Status des Ventials an, sofern eines angeschlossen ist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTQ5MA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MjE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1MzoyMFrOHBRJMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NTowOFrOHBUHnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTUwNA==", "bodyText": "Same for below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.sensorContact.state.option.OPEN= ge\ufffdffnet\n          \n          \n            \n            channel-type.shelly.sensorContact.state.option.OPEN = ge\ufffdffnet", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091504", "createdAt": "2020-08-16T09:53:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n+channel-type.shelly.sensorVibration.label = Virbration\n+channel-type.shelly.sensorVibration.description = ON: Sensor hat eine Vibration erkannt\n+channel-type.shelly.sensorValve.label = Ventil\n+channel-type.shelly.sensorValve.description = Gibt den Status des Ventials an, sofern eines angeschlossen ist.\n+channel-type.shelly.sensorValve.state.option.closed = geschlossen\n+channel-type.shelly.sensorValve.state.option.opened = ge\ufffdffnet\n+channel-type.shelly.sensorValve.state.option.not_connected = nicht angeschlossen\n+channel-type.shelly.sensorValve.state.option.failure = St\ufffdrung\n+channel-type.shelly.sensorValve.state.option.closing = schlie\ufffdt\n+channel-type.shelly.sensorValve.state.option.opening = \ufffdffnet\n+channel-type.shelly.sensorValve.state.option.checking = Test l\ufffduft\n+channel-type.shelly.sensorValve.state.option.UNKNOWN = unbekannt\n channel-type.shelly.sensorCharger.label = Ladeger\ufffdt\n channel-type.shelly.sensorCharger.description = ON: Ein Ladeger\ufffdt ist angeschlossen\n+channel-type.shelly.sensorContact.label = Kontakt\n+channel-type.shelly.sensorContact.description = Status des Sensors (OPEN=offen, CLOSED=geschlossen)\n+channel-type.shelly.sensorContact.state.option.OPEN= ge\ufffdffnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDI1Mg==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140252", "createdAt": "2020-08-16T17:55:08Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -409,40 +468,81 @@ channel-type.shelly.sensorFlood.label = Wasseralarm\n channel-type.shelly.sensorFlood.description = Alarm: Es wurde Wasser erkannt\n channel-type.shelly.sensorSmoke.label = Rauchalarm\n channel-type.shelly.sensorSmoke.description = Alarm: Es wurde Rauch erkannt\n-channel-type.shelly.sensorLux.label = Beleuchtungsst\ufffdrke\n-channel-type.shelly.sensorLux.description = Beleuchtungsst\ufffdrke in Lux\n+channel-type.shelly.sensorLux.label = Helligkeit\n+channel-type.shelly.sensorLux.description = Helligkeit in Lux\n+channel-type.shelly.sensorIllumination.label = Tageslicht\n+channel-type.shelly.sensorIllumination.description = Erkanntes Tageslicht (bright=taghell, twilight=D\ufffdmmerung, dark=Abend/Nacht)\n+channel-type.shelly.sensorIllumination.state.option.dark = Dunkel\n+channel-type.shelly.sensorIllumination.state.option.twilight = D\ufffdmmerung\n+channel-type.shelly.sensorIllumination.state.option.bright = Hell\n+channel-type.shelly.sensorIllumination.state.option.unknown = Unbekannt\n+channel-type.shelly.sensorIllumination.description = Angabe zum erkannten Tageslichtwert \n+channel-type.shelly.sensorPPM.label = Gas-Konzentration\n+channel-type.shelly.sensorPPM.description = Gemessene Konzentration in PPM\n+channel-type.shelly.sensorTilt.label = \ufffdffnungswinkel\n+channel-type.shelly.sensorTilt.description = \ufffdffnungswinkel in Grad (erforder Kalibrierung in der App)\n+channel-type.shelly.sensorVibration.label = Virbration\n+channel-type.shelly.sensorVibration.description = ON: Sensor hat eine Vibration erkannt\n+channel-type.shelly.sensorValve.label = Ventil\n+channel-type.shelly.sensorValve.description = Gibt den Status des Ventials an, sofern eines angeschlossen ist.\n+channel-type.shelly.sensorValve.state.option.closed = geschlossen\n+channel-type.shelly.sensorValve.state.option.opened = ge\ufffdffnet\n+channel-type.shelly.sensorValve.state.option.not_connected = nicht angeschlossen\n+channel-type.shelly.sensorValve.state.option.failure = St\ufffdrung\n+channel-type.shelly.sensorValve.state.option.closing = schlie\ufffdt\n+channel-type.shelly.sensorValve.state.option.opening = \ufffdffnet\n+channel-type.shelly.sensorValve.state.option.checking = Test l\ufffduft\n+channel-type.shelly.sensorValve.state.option.UNKNOWN = unbekannt\n channel-type.shelly.sensorCharger.label = Ladeger\ufffdt\n channel-type.shelly.sensorCharger.description = ON: Ein Ladeger\ufffdt ist angeschlossen\n+channel-type.shelly.sensorContact.label = Kontakt\n+channel-type.shelly.sensorContact.description = Status des Sensors (OPEN=offen, CLOSED=geschlossen)\n+channel-type.shelly.sensorContact.state.option.OPEN= ge\ufffdffnet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTUwNA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3MzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1NDo1N1rOHBRJyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NToyOFrOHBUHwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTY1OQ==", "bodyText": "Is there something missing?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            channel-type.shelly.selfTest.description = Status des Selbsttest (not_completed\n          \n          \n            \n            channel-type.shelly.selfTest.description = Status des Selbsttests (not_completed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091659", "createdAt": "2020-08-16T09:54:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -452,5 +552,18 @@ channel-type.shelly.alarmTrigger.option.OVERLOAD = \n channel-type.shelly.alarmTrigger.option.OVERPOWER = Maximale Last \ufffdberschritten\n channel-type.shelly.alarmTrigger.option.LOAD_ERROR = Lastfehler\n channel-type.shelly.alarmTrigger.option.LOW_BATTERY = Batterieladung schwach\n-\n+channel-type.shelly.alarmState.label = Alarmstatus\n+channel-type.shelly.alarmState.description = Typ des Alarms (unknown/none/mild/heavy/test)   \n+channel-type.shelly.alarmState.state.option.unknown = Unbekannt\n+channel-type.shelly.alarmState.state.option.none = Kein Alarm\n+channel-type.shelly.alarmState.state.option.mild = Leichte Konzentration\n+channel-type.shelly.alarmState.state.option.heavy = Hohe Konzentration\n+channel-type.shelly.alarmState.state.option.test = Testknopf gedr\ufffdckt\n+channel-type.shelly.selfTest.label = Selbsttest\n+channel-type.shelly.selfTest.description = Status des Selbsttest (not_completed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDI5MA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140290", "createdAt": "2020-08-16T17:55:28Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -452,5 +552,18 @@ channel-type.shelly.alarmTrigger.option.OVERLOAD = \n channel-type.shelly.alarmTrigger.option.OVERPOWER = Maximale Last \ufffdberschritten\n channel-type.shelly.alarmTrigger.option.LOAD_ERROR = Lastfehler\n channel-type.shelly.alarmTrigger.option.LOW_BATTERY = Batterieladung schwach\n-\n+channel-type.shelly.alarmState.label = Alarmstatus\n+channel-type.shelly.alarmState.description = Typ des Alarms (unknown/none/mild/heavy/test)   \n+channel-type.shelly.alarmState.state.option.unknown = Unbekannt\n+channel-type.shelly.alarmState.state.option.none = Kein Alarm\n+channel-type.shelly.alarmState.state.option.mild = Leichte Konzentration\n+channel-type.shelly.alarmState.state.option.heavy = Hohe Konzentration\n+channel-type.shelly.alarmState.state.option.test = Testknopf gedr\ufffdckt\n+channel-type.shelly.selfTest.label = Selbsttest\n+channel-type.shelly.selfTest.description = Status des Selbsttest (not_completed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTY1OQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3NDEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1NTozN1rOHBRKIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo0OTowN1rOHBTuRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTc0NA==", "bodyText": "Consider making this file UTF-8, as it is ISO-8859-1.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091744", "createdAt": "2020-08-16T09:55:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -452,5 +552,18 @@ channel-type.shelly.alarmTrigger.option.OVERLOAD = \n channel-type.shelly.alarmTrigger.option.OVERPOWER = Maximale Last \ufffdberschritten\n channel-type.shelly.alarmTrigger.option.LOAD_ERROR = Lastfehler\n channel-type.shelly.alarmTrigger.option.LOW_BATTERY = Batterieladung schwach\n-\n+channel-type.shelly.alarmState.label = Alarmstatus\n+channel-type.shelly.alarmState.description = Typ des Alarms (unknown/none/mild/heavy/test)   \n+channel-type.shelly.alarmState.state.option.unknown = Unbekannt\n+channel-type.shelly.alarmState.state.option.none = Kein Alarm\n+channel-type.shelly.alarmState.state.option.mild = Leichte Konzentration\n+channel-type.shelly.alarmState.state.option.heavy = Hohe Konzentration\n+channel-type.shelly.alarmState.state.option.test = Testknopf gedr\ufffdckt\n+channel-type.shelly.selfTest.label = Selbsttest\n+channel-type.shelly.selfTest.description = Status des Selbsttest (not_completed\n+channel-type.shelly.selfTest.state.option.pending = ausstehend\n+channel-type.shelly.selfTest.state.option.not_completed = Nicht abgeschlossen\n+channel-type.shelly.selfTest.state.option.running = Test l\ufffduft\n+channel-type.shelly.selfTest.state.option.completed = abgeschlossen\n+channel-type.shelly.selfTest.state.option.unknown = unbekannt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzc2Nw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133767", "createdAt": "2020-08-16T16:49:07Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/i18n/shelly_de.properties", "diffHunk": "@@ -452,5 +552,18 @@ channel-type.shelly.alarmTrigger.option.OVERLOAD = \n channel-type.shelly.alarmTrigger.option.OVERPOWER = Maximale Last \ufffdberschritten\n channel-type.shelly.alarmTrigger.option.LOAD_ERROR = Lastfehler\n channel-type.shelly.alarmTrigger.option.LOW_BATTERY = Batterieladung schwach\n-\n+channel-type.shelly.alarmState.label = Alarmstatus\n+channel-type.shelly.alarmState.description = Typ des Alarms (unknown/none/mild/heavy/test)   \n+channel-type.shelly.alarmState.state.option.unknown = Unbekannt\n+channel-type.shelly.alarmState.state.option.none = Kein Alarm\n+channel-type.shelly.alarmState.state.option.mild = Leichte Konzentration\n+channel-type.shelly.alarmState.state.option.heavy = Hohe Konzentration\n+channel-type.shelly.alarmState.state.option.test = Testknopf gedr\ufffdckt\n+channel-type.shelly.selfTest.label = Selbsttest\n+channel-type.shelly.selfTest.description = Status des Selbsttest (not_completed\n+channel-type.shelly.selfTest.state.option.pending = ausstehend\n+channel-type.shelly.selfTest.state.option.not_completed = Nicht abgeschlossen\n+channel-type.shelly.selfTest.state.option.running = Test l\ufffduft\n+channel-type.shelly.selfTest.state.option.completed = abgeschlossen\n+channel-type.shelly.selfTest.state.option.unknown = unbekannt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTc0NA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 277}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3NDY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/device.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1NjoyOFrOHBRKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo1MDowMFrOHBTukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTgzMg==", "bodyText": "No need to repeat the options in the description.", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091832", "createdAt": "2020-08-16T09:56:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/device.xml", "diffHunk": "@@ -36,7 +35,23 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n-\t<channel-type id=\"charger\">\n+\t<channel-type id=\"sensorWakeup\" advanced=\"true\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Wakeup Reason</label>\n+\t\t<description>Last reason, which woke up the device: battery, button, periodic, poweron, sensor, alarm</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzg0Mw==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133843", "createdAt": "2020-08-16T16:50:00Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/device.xml", "diffHunk": "@@ -36,7 +35,23 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n-\t<channel-type id=\"charger\">\n+\t<channel-type id=\"sensorWakeup\" advanced=\"true\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Wakeup Reason</label>\n+\t\t<description>Last reason, which woke up the device: battery, button, periodic, poweron, sensor, alarm</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTgzMg=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3NTE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/device.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwOTo1Njo1MlrOHBRKsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNjo1MTozMFrOHBTvKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Last Heat Beat</label>\n          \n          \n            \n            \t\t<label>Last Heart Beat</label>", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471091890", "createdAt": "2020-08-16T09:56:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/device.xml", "diffHunk": "@@ -57,6 +72,14 @@\n \t\t<state readOnly=\"true\" pattern=\"%d %unit%\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"heartBeat\" advanced=\"true\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Last Heat Beat</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEzMzk5Mg==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471133992", "createdAt": "2020-08-16T16:51:30Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/device.xml", "diffHunk": "@@ -57,6 +72,14 @@\n \t\t<state readOnly=\"true\" pattern=\"%d %unit%\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"heartBeat\" advanced=\"true\">\n+\t\t<item-type>DateTime</item-type>\n+\t\t<label>Last Heat Beat</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MTg5MA=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3ODY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/sensor.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMDowMToxMFrOHBRMRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NjowN1rOHBUIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MjI5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<item-type>Number:Density</item-type>", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471092293", "createdAt": "2020-08-16T10:01:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/sensor.xml", "diffHunk": "@@ -214,12 +298,36 @@\n \t\t</state>\n \t</channel-type>\n \t<channel-type id=\"sensorTilt\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Number:Angle</item-type>\n \t\t<label>Tilt</label>\n \t\t<description>Tilt in degrees (requires calibration)</description>\n \t\t<state readOnly=\"true\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"sensorPPM\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDM1Ng==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140356", "createdAt": "2020-08-16T17:56:07Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/sensor.xml", "diffHunk": "@@ -214,12 +298,36 @@\n \t\t</state>\n \t</channel-type>\n \t<channel-type id=\"sensorTilt\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Number:Angle</item-type>\n \t\t<label>Tilt</label>\n \t\t<description>Tilt in degrees (requires calibration)</description>\n \t\t<state readOnly=\"true\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"sensorPPM\">\n+\t\t<item-type>Number</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MjI5Mw=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDI3ODg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/sensor.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMDowMTo0MFrOHBRMYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNzo1NjoyOFrOHBUIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MjMyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Vavle</label>\n          \n          \n            \n            \t\t<label>Valve</label>", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471092321", "createdAt": "2020-08-16T10:01:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/sensor.xml", "diffHunk": "@@ -214,12 +298,36 @@\n \t\t</state>\n \t</channel-type>\n \t<channel-type id=\"sensorTilt\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Number:Angle</item-type>\n \t\t<label>Tilt</label>\n \t\t<description>Tilt in degrees (requires calibration)</description>\n \t\t<state readOnly=\"true\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"sensorPPM\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Concentration</label>\n+\t\t<description>Gas concentration in ppm</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"sensorValve\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Vavle</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MDM4OA==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r471140388", "createdAt": "2020-08-16T17:56:28Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/resources/ESH-INF/thing/sensor.xml", "diffHunk": "@@ -214,12 +298,36 @@\n \t\t</state>\n \t</channel-type>\n \t<channel-type id=\"sensorTilt\">\n-\t\t<item-type>Switch</item-type>\n+\t\t<item-type>Number:Angle</item-type>\n \t\t<label>Tilt</label>\n \t\t<description>Tilt in degrees (requires calibration)</description>\n \t\t<state readOnly=\"true\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"sensorPPM\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Concentration</label>\n+\t\t<description>Gas concentration in ppm</description>\n+\t\t<state readOnly=\"true\" pattern=\"%d %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"sensorValve\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Vavle</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5MjMyMQ=="}, "originalCommit": {"oid": "c77b90901f304e8b5485257748dd96707b97256c"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM3MTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyMToyMFrOHEJUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxNTo1NFrOHFF07A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwOTA5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;\n          \n          \n            \n                            double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r474109097", "createdAt": "2020-08-20T16:21:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java", "diffHunk": "@@ -199,8 +202,39 @@ public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen\n             case \"4403\": // relay_3: E, energy, Wmin, U32\n             case \"4104\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n             case \"4204\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n-                updateChannel(updates, mGroup, CHANNEL_METER_LASTMIN1,\n-                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+            case \"4106\": // emeter_0: E, energy, Wh, U32\n+            case \"4206\": // emeter_1: E, energy, Wh, U32\n+            case \"4306\": // emeter_2: E, energy, Wh, U32\n+                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97cce6c7d9cc74261eeca548b9e2401a0573196b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDM5Ng==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100396", "createdAt": "2020-08-22T15:15:54Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/coap/ShellyCoIoTVersion2.java", "diffHunk": "@@ -199,8 +202,39 @@ public boolean handleStatusUpdate(List<CoIotSensor> sensorUpdates, CoIotDescrSen\n             case \"4403\": // relay_3: E, energy, Wmin, U32\n             case \"4104\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n             case \"4204\": // roller_0: E, rollerEnergy, Wmin, U32, -1\n-                updateChannel(updates, mGroup, CHANNEL_METER_LASTMIN1,\n-                        toQuantityType(s.value, DIGITS_WATT, SmartHomeUnits.WATT));\n+            case \"4106\": // emeter_0: E, energy, Wh, U32\n+            case \"4206\": // emeter_1: E, energy, Wh, U32\n+            case \"4306\": // emeter_2: E, energy, Wh, U32\n+                Double total = profile.isEMeter ? s.value / 1000 : s.value / 60 / 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwOTA5Nw=="}, "originalCommit": {"oid": "97cce6c7d9cc74261eeca548b9e2401a0573196b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM4OTQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyNTozNlrOHEJfTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxNjoyMFrOHFF0_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMTgyMQ==", "bodyText": "What's the purpose of this code? Is there any case when the Thing is disabled and we come here?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r474111821", "createdAt": "2020-08-20T16:25:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -354,10 +352,13 @@ protected void refreshStatus() {\n             if (refreshSettings || (scheduledUpdates > 0) || (skipUpdate % skipCount == 0)) {\n                 if (!profile.isInitialized() || ((thingStatus == ThingStatus.OFFLINE))\n                         || (thingStatus == ThingStatus.UNKNOWN)) {\n+                    if (getThing().getStatusInfo().getStatusDetail() == ThingStatusDetail.DISABLED) {\n+                        logger.debug(\"{}: Thing is disabled, skip initialization\", thingName);\n+                        return;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97cce6c7d9cc74261eeca548b9e2401a0573196b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDQxNQ==", "bodyText": "removed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100415", "createdAt": "2020-08-22T15:16:20Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -354,10 +352,13 @@ protected void refreshStatus() {\n             if (refreshSettings || (scheduledUpdates > 0) || (skipUpdate % skipCount == 0)) {\n                 if (!profile.isInitialized() || ((thingStatus == ThingStatus.OFFLINE))\n                         || (thingStatus == ThingStatus.UNKNOWN)) {\n+                    if (getThing().getStatusInfo().getStatusDetail() == ThingStatusDetail.DISABLED) {\n+                        logger.debug(\"{}: Thing is disabled, skip initialization\", thingName);\n+                        return;\n+                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMTgyMQ=="}, "originalCommit": {"oid": "97cce6c7d9cc74261eeca548b9e2401a0573196b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM5MTIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyNjowM1rOHEJgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNToxNjo0MlrOHFF1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMjEwNg==", "bodyText": "Can you fix the formatting?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r474112106", "createdAt": "2020-08-20T16:26:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -389,7 +390,9 @@ protected void refreshStatus() {\n                     fillDeviceStatus(status, updated);\n                 }\n             }\n-        } catch (ShellyApiException e) {\n+        } catch (\n+\n+        ShellyApiException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97cce6c7d9cc74261eeca548b9e2401a0573196b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTEwMDQ2Ng==", "bodyText": "fixed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475100466", "createdAt": "2020-08-22T15:16:42Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -389,7 +390,9 @@ protected void refreshStatus() {\n                     fillDeviceStatus(status, updated);\n                 }\n             }\n-        } catch (ShellyApiException e) {\n+        } catch (\n+\n+        ShellyApiException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMjEwNg=="}, "originalCommit": {"oid": "97cce6c7d9cc74261eeca548b9e2401a0573196b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTk3Mjk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODozOTo1MFrOHFG76A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMTozNjo1MlrOHFISNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODU2OA==", "bodyText": "Can you revert this, too?", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118568", "createdAt": "2020-08-22T18:39:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -412,7 +415,7 @@ protected void refreshStatus() {\n             if (!status.isEmpty()) {\n                 setThingOffline(ThingStatusDetail.COMMUNICATION_ERROR, status);\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDY2Mg==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140662", "createdAt": "2020-08-22T21:36:52Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -412,7 +415,7 @@ protected void refreshStatus() {\n             if (!status.isEmpty()) {\n                 setThingOffline(ThingStatusDetail.COMMUNICATION_ERROR, status);\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) {\n+        } catch (RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODU2OA=="}, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTk3NTAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODo0MzoxNlrOHFG86g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMTozNjoyNVrOHFISEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgyNg==", "bodyText": "Here", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118826", "createdAt": "2020-08-22T18:43:16Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "diffHunk": "@@ -149,42 +150,46 @@ public DiscoveryResult createResult(final ServiceInfo service) {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n+                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n-                        mode.isEmpty() ? \"<standard>\" : mode);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n+                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n+            } catch (RuntimeException e) { // maybe some format description was buggy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDYyNw==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140627", "createdAt": "2020-08-22T21:36:25Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "diffHunk": "@@ -149,42 +150,46 @@ public DiscoveryResult createResult(final ServiceInfo service) {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n+                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n-                        mode.isEmpty() ? \"<standard>\" : mode);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n+                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n+            } catch (RuntimeException e) { // maybe some format description was buggy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgyNg=="}, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTk3NTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODo0MzoyNFrOHFG88g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMTozNjo0NVrOHFISKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgzNA==", "bodyText": "Here", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118834", "createdAt": "2020-08-22T18:43:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "diffHunk": "@@ -149,42 +150,46 @@ public DiscoveryResult createResult(final ServiceInfo service) {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n+                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n-                        mode.isEmpty() ? \"<standard>\" : mode);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n+                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n+            } catch (RuntimeException e) { // maybe some format description was buggy\n                 logger.debug(\"{}: Discovery failed!\", name, e);\n             }\n \n             if (thingUID != null) {\n                 addProperty(properties, CONFIG_DEVICEIP, address);\n                 addProperty(properties, PROPERTY_MODEL_ID, model);\n                 addProperty(properties, PROPERTY_SERVICE_NAME, name);\n+                addProperty(properties, PROPERTY_DEV_NAME, deviceName);\n                 addProperty(properties, PROPERTY_DEV_TYPE, thingType);\n                 addProperty(properties, PROPERTY_DEV_MODE, mode);\n \n-                logger.debug(\"{}: Adding Shelly thing, UID={}\", name, thingUID.getAsString());\n-                return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n-                        .withLabel(name + \" - \" + address).withRepresentationProperty(name).build();\n+                logger.debug(\"{}: Adding Shelly {}, UID={}\", name, deviceName, thingUID.getAsString());\n+                String thingLabel = deviceName.isEmpty() ? name + \" - \" + address\n+                        : deviceName + \"(\" + name + \"@\" + address + \")\";\n+                return DiscoveryResultBuilder.create(thingUID).withProperties(properties).withLabel(thingLabel)\n+                        .withRepresentationProperty(name).build();\n             }\n-        } catch (IOException | IllegalArgumentException | NullPointerException e) {\n+        } catch (IOException | RuntimeException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDY0OQ==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140649", "createdAt": "2020-08-22T21:36:45Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/discovery/ShellyDiscoveryParticipant.java", "diffHunk": "@@ -149,42 +150,46 @@ public DiscoveryResult createResult(final ServiceInfo service) {\n \n                 profile = api.getDeviceProfile(thingType);\n                 logger.debug(\"{}: Shelly settings : {}\", name, profile.settingsJson);\n+                deviceName = getString(profile.settings.name);\n                 model = getString(profile.settings.device.type);\n                 mode = profile.mode;\n \n                 properties = ShellyBaseHandler.fillDeviceProperties(profile);\n-                logger.trace(\"{}: thingType={}, deviceType={}, mode={}\", name, thingType, profile.deviceType,\n-                        mode.isEmpty() ? \"<standard>\" : mode);\n+                logger.trace(\"{}: thingType={}, deviceType={}, mode={}, symbolic name={}\", name, thingType,\n+                        profile.deviceType, mode.isEmpty() ? \"<standard>\" : mode, deviceName);\n \n                 // get thing type from device name\n-                thingUID = ShellyThingCreator.getThingUID(name, mode, false);\n+                thingUID = ShellyThingCreator.getThingUID(name, model, mode, false);\n             } catch (ShellyApiException e) {\n                 ShellyApiResult result = e.getApiResult();\n                 if (result.isHttpAccessUnauthorized()) {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.protected\", address));\n \n                     // create shellyunknown thing - will be changed during thing initialization with valid credentials\n-                    thingUID = ShellyThingCreator.getThingUID(name, mode, true);\n+                    thingUID = ShellyThingCreator.getThingUID(name, model, mode, true);\n                 } else {\n                     logger.info(\"{}: {}\", name, messages.get(\"discovery.failed\", address, e.toString()));\n                     logger.debug(\"{}: Discovery failed\", name, e);\n                 }\n-            } catch (IllegalArgumentException | NullPointerException e) { // maybe some format description was buggy\n+            } catch (RuntimeException e) { // maybe some format description was buggy\n                 logger.debug(\"{}: Discovery failed!\", name, e);\n             }\n \n             if (thingUID != null) {\n                 addProperty(properties, CONFIG_DEVICEIP, address);\n                 addProperty(properties, PROPERTY_MODEL_ID, model);\n                 addProperty(properties, PROPERTY_SERVICE_NAME, name);\n+                addProperty(properties, PROPERTY_DEV_NAME, deviceName);\n                 addProperty(properties, PROPERTY_DEV_TYPE, thingType);\n                 addProperty(properties, PROPERTY_DEV_MODE, mode);\n \n-                logger.debug(\"{}: Adding Shelly thing, UID={}\", name, thingUID.getAsString());\n-                return DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n-                        .withLabel(name + \" - \" + address).withRepresentationProperty(name).build();\n+                logger.debug(\"{}: Adding Shelly {}, UID={}\", name, deviceName, thingUID.getAsString());\n+                String thingLabel = deviceName.isEmpty() ? name + \" - \" + address\n+                        : deviceName + \"(\" + name + \"@\" + address + \")\";\n+                return DiscoveryResultBuilder.create(thingUID).withProperties(properties).withLabel(thingLabel)\n+                        .withRepresentationProperty(name).build();\n             }\n-        } catch (IOException | IllegalArgumentException | NullPointerException e) {\n+        } catch (IOException | RuntimeException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODgzNA=="}, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTk3NTM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODo0NDowNlrOHFG9FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMTozNjozMlrOHFISGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODg2OA==", "bodyText": "Here", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475118868", "createdAt": "2020-08-22T18:44:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -721,7 +742,7 @@ private void checkVersion(ShellyDeviceProfile prf, ShellySettingsStatus status)\n                 }\n                 autoCoIoT = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) { // could be inconsistant format of beta version\n+        } catch (RuntimeException e) { // could be inconsistant format of beta version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDYzNA==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140634", "createdAt": "2020-08-22T21:36:32Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyBaseHandler.java", "diffHunk": "@@ -721,7 +742,7 @@ private void checkVersion(ShellyDeviceProfile prf, ShellySettingsStatus status)\n                 }\n                 autoCoIoT = true;\n             }\n-        } catch (IllegalArgumentException | NullPointerException e) { // could be inconsistant format of beta version\n+        } catch (RuntimeException e) { // could be inconsistant format of beta version", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExODg2OA=="}, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 401}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTk3NjY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxODo0NToxNVrOHFG9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQyMTozNjozOVrOHFISJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTAxMw==", "bodyText": "And here", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475119013", "createdAt": "2020-08-22T18:45:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java", "diffHunk": "@@ -149,7 +149,7 @@ public HSBType toHSB() {\n             for (int i = 0; i < rgbw.length; i++) {\n                 values[i] = Integer.parseInt(rgbw[i]);\n             }\n-        } catch (NullPointerException e) { // might be a format problem\n+        } catch (RuntimeException e) { // might be a format problem", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0MDY0Nw==", "bodyText": "changed", "url": "https://github.com/openhab/openhab-addons/pull/8198#discussion_r475140647", "createdAt": "2020-08-22T21:36:39Z", "author": {"login": "markus7017"}, "path": "bundles/org.openhab.binding.shelly/src/main/java/org/openhab/binding/shelly/internal/handler/ShellyColorUtils.java", "diffHunk": "@@ -149,7 +149,7 @@ public HSBType toHSB() {\n             for (int i = 0; i < rgbw.length; i++) {\n                 values[i] = Integer.parseInt(rgbw[i]);\n             }\n-        } catch (NullPointerException e) { // might be a format problem\n+        } catch (RuntimeException e) { // might be a format problem", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExOTAxMw=="}, "originalCommit": {"oid": "fd92e89a9e5ffa5ee78ba8a8de5e8ff39b954bf1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4515, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}