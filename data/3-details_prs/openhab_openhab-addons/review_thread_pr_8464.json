{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1OTM3NDMy", "number": 8464, "reviewThreads": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowNjozNVrOEj6snA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxNzo1OVrOElLm2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDk3MzA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowNjozNVrOHSjBgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxMTo0NlrOHUddgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxMDI0Mw==", "bodyText": "Can you put individual sentences on a new line.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This will usually be either the loopback address `127.0.0.1`, and port number. Or the specific IP of the machine `10.0.0.110` , and port number.\n          \n          \n            \n            This will usually be either the loopback address `127.0.0.1`, and port number.\n          \n          \n            \n            Or the specific IP of the machine `10.0.0.110` , and port number.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489210243", "createdAt": "2020-09-16T07:06:35Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/README.md", "diffHunk": "@@ -30,23 +31,50 @@ The thing type is the second string behind the first colon and in this example i\n \n ## Discovery\n \n-The Velbus bridge cannot be discovered automatically. It has to be added manually by defining the serial port of the Velbus Configuration module.\n+The Velbus bridge cannot be discovered automatically. It has to be added manually by defining the serial port of the Velbus Configuration module for the Velbus Serial Bridge or by defining the IP Address and port for the Velbus Network Bridge.\n \n Once the bridge has been added as a thing, a manual scan can be launched to discover all other supported Velbus devices on the bus. These devices will be available in the inbox. The discovery scan will also retrieve the channel names of the Velbus devices.\n \n ## Thing Configuration\n \n The Velbus bridge needs to be added first in the things file or through Paper UI.\n-It is necessary to specify the serial port device used for communication.\n+\n+For the Velbus Serial Bridge it is necessary to specify the serial port device used for communication.\n On Linux systems, this will usually be either `/dev/ttyS0`, `/dev/ttyUSB0` or `/dev/ttyACM0` (or a higher  number than `0` if multiple devices are present).\n On Windows it will be `COM1`, `COM2`, etc.\n \n-In the things file, this looks e.g. like\n+In the things file, this might look e.g. like\n \n ```\n Bridge velbus:bridge:1 [ port=\"COM1\" ]\n ```\n \n+For the Velbus Network Bridge it is necessary to specify the IP Address or hostname and the port of the Velbus network server.\n+This will usually be either the loopback address `127.0.0.1`, and port number. Or the specific IP of the machine `10.0.0.110` , and port number.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNjI1Ng==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491216256", "createdAt": "2020-09-18T22:11:46Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/README.md", "diffHunk": "@@ -30,23 +31,50 @@ The thing type is the second string behind the first colon and in this example i\n \n ## Discovery\n \n-The Velbus bridge cannot be discovered automatically. It has to be added manually by defining the serial port of the Velbus Configuration module.\n+The Velbus bridge cannot be discovered automatically. It has to be added manually by defining the serial port of the Velbus Configuration module for the Velbus Serial Bridge or by defining the IP Address and port for the Velbus Network Bridge.\n \n Once the bridge has been added as a thing, a manual scan can be launched to discover all other supported Velbus devices on the bus. These devices will be available in the inbox. The discovery scan will also retrieve the channel names of the Velbus devices.\n \n ## Thing Configuration\n \n The Velbus bridge needs to be added first in the things file or through Paper UI.\n-It is necessary to specify the serial port device used for communication.\n+\n+For the Velbus Serial Bridge it is necessary to specify the serial port device used for communication.\n On Linux systems, this will usually be either `/dev/ttyS0`, `/dev/ttyUSB0` or `/dev/ttyACM0` (or a higher  number than `0` if multiple devices are present).\n On Windows it will be `COM1`, `COM2`, etc.\n \n-In the things file, this looks e.g. like\n+In the things file, this might look e.g. like\n \n ```\n Bridge velbus:bridge:1 [ port=\"COM1\" ]\n ```\n \n+For the Velbus Network Bridge it is necessary to specify the IP Address or hostname and the port of the Velbus network server.\n+This will usually be either the loopback address `127.0.0.1`, and port number. Or the specific IP of the machine `10.0.0.110` , and port number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxMDI0Mw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTAxNDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/VelbusHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoxOToyMVrOHSjaqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxMzo0MlrOHUdffg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNjY4Mg==", "bodyText": "Since your changing this anyway. Can you rewrite this to be implemented as a ThingHandlerService, You can read about this in this preview documentation page: https://deploy-preview-1262--openhab-docs-preview.netlify.app/docs/developer/bindings/#discovery-that-is-bound-to-a-thing", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489216682", "createdAt": "2020-09-16T07:19:21Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/VelbusHandlerFactory.java", "diffHunk": "@@ -109,13 +134,11 @@ private synchronized void registerDiscoveryService(VelbusBridgeHandler bridgeHan\n \n     private synchronized void unregisterDiscoveryService(VelbusBridgeHandler bridgeHandler) {\n         ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.remove(bridgeHandler.getThing().getUID());\n-        if (serviceReg != null) {\n-            VelbusThingDiscoveryService service = (VelbusThingDiscoveryService) bundleContext\n-                    .getService(serviceReg.getReference());\n-            serviceReg.unregister();\n-            if (service != null) {\n-                service.deactivate();\n-            }\n+        VelbusThingDiscoveryService service = (VelbusThingDiscoveryService) bundleContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNjc2Ng==", "bodyText": "Modified to be implemented as a ThingHandlerService in commit 780323c.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491216766", "createdAt": "2020-09-18T22:13:42Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/VelbusHandlerFactory.java", "diffHunk": "@@ -109,13 +134,11 @@ private synchronized void registerDiscoveryService(VelbusBridgeHandler bridgeHan\n \n     private synchronized void unregisterDiscoveryService(VelbusBridgeHandler bridgeHandler) {\n         ServiceRegistration<?> serviceReg = this.discoveryServiceRegs.remove(bridgeHandler.getThing().getUID());\n-        if (serviceReg != null) {\n-            VelbusThingDiscoveryService service = (VelbusThingDiscoveryService) bundleContext\n-                    .getService(serviceReg.getReference());\n-            serviceReg.unregister();\n-            if (service != null) {\n-                service.deactivate();\n-            }\n+        VelbusThingDiscoveryService service = (VelbusThingDiscoveryService) bundleContext", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxNjY4Mg=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTExMTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/VelbusModuleAddress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo0NTo0MlrOHSkVgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNDoyN1rOHUdgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMTc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.parseInt(id.substring(id.indexOf(\"#\") + 1).substring(2));\n          \n          \n            \n                    return Integer.parseInt(channelUID.getIdWithoutGroup()).substring(2));", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489231744", "createdAt": "2020-09-16T07:45:42Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/VelbusModuleAddress.java", "diffHunk": "@@ -73,7 +75,8 @@ public VelbusChannelIdentifier getChannelIdentifier(ChannelUID channelUID) {\n     }\n \n     public int getChannelNumber(ChannelUID channelUID) {\n-        return Integer.parseInt(channelUID.getId().substring(2));\n+        String id = channelUID.getId();\n+        return Integer.parseInt(id.substring(id.indexOf(\"#\") + 1).substring(2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNjk2OA==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491216968", "createdAt": "2020-09-18T22:14:27Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/VelbusModuleAddress.java", "diffHunk": "@@ -73,7 +75,8 @@ public VelbusChannelIdentifier getChannelIdentifier(ChannelUID channelUID) {\n     }\n \n     public int getChannelNumber(ChannelUID channelUID) {\n-        return Integer.parseInt(channelUID.getId().substring(2));\n+        String id = channelUID.getId();\n+        return Integer.parseInt(id.substring(id.indexOf(\"#\") + 1).substring(2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMTc0NA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTEzNTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1MTo1MVrOHSkj1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNTowN1rOHUdg_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNTQxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    timeUpdateJob = scheduler.scheduleWithFixedDelay(() -> {\n          \n          \n            \n                    timeUpdateJob = scheduler.scheduleWithFixedDelay(this::updateDateTime, .....", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489235414", "createdAt": "2020-09-16T07:51:51Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -12,101 +12,134 @@\n  */\n package org.openhab.binding.velbus.internal.handler;\n \n-import static org.openhab.binding.velbus.internal.VelbusBindingConstants.PORT;\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.TooManyListenersException;\n+import java.util.TimeZone;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.thing.Bridge;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n import org.eclipse.smarthome.core.types.Command;\n-import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n-import org.eclipse.smarthome.io.transport.serial.SerialPort;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n-import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n import org.openhab.binding.velbus.internal.VelbusPacketInputStream;\n import org.openhab.binding.velbus.internal.VelbusPacketListener;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDatePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDaylightSavingsStatusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetRealtimeClockPacket;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * {@link VelbusBridgeHandler} is the handler for a Velbus Serial-interface and connects it to\n+ * {@link VelbusBridgeHandler} is an abstract handler for a Velbus interface and connects it to\n  * the framework.\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n-public class VelbusBridgeHandler extends BaseBridgeHandler implements SerialPortEventListener {\n+@NonNullByDefault\n+public abstract class VelbusBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n \n-    private Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n-\n-    private static final int BAUD = 9600;\n-    private SerialPort serialPort;\n-    private final SerialPortManager serialPortManager;\n-    private OutputStream outputStream;\n-    private VelbusPacketInputStream inputStream;\n     private long lastPacketTimeMillis;\n \n-    private VelbusPacketListener defaultPacketListener;\n-    private final Map<Byte, VelbusPacketListener> packetListeners = new HashMap<>();\n+    protected @Nullable VelbusPacketListener defaultPacketListener;\n+    protected Map<Byte, VelbusPacketListener> packetListeners = new HashMap<Byte, VelbusPacketListener>();\n \n-    public VelbusBridgeHandler(Bridge velbusBridge, SerialPortManager serialPortManager) {\n-        super(velbusBridge);\n-        this.serialPortManager = serialPortManager;\n-    }\n+    private @Nullable ScheduledFuture<?> timeUpdateJob;\n+    private @Nullable ScheduledFuture<?> reconnectionHandler;\n \n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        // There is nothing to handle in the bridge handler\n+    private @NonNullByDefault({}) OutputStream outputStream;\n+    private @NonNullByDefault({}) VelbusPacketInputStream inputStream;\n+\n+    private boolean listenerStopped;\n+\n+    public VelbusBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing velbus bridge handler.\");\n \n-        String port = (String) getConfig().get(PORT);\n-        if (port == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial port name not configured\");\n-            return;\n-        }\n+        connect();\n+        initializeTimeUpdate();\n+    }\n \n-        SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(port);\n-        if (serialPortIdentifier == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial port not found: \" + port);\n-            return;\n+    private void initializeTimeUpdate() {\n+        Object timeUpdateIntervalObject = getConfig().get(TIME_UPDATE_INTERVAL);\n+        if (timeUpdateIntervalObject != null) {\n+            int timeUpdateInterval = ((BigDecimal) timeUpdateIntervalObject).intValue();\n+\n+            if (timeUpdateInterval > 0) {\n+                startTimeUpdates(timeUpdateInterval);\n+            }\n         }\n+    }\n \n-        try {\n-            serialPort = serialPortIdentifier.open(VelbusBridgeHandler.class.getCanonicalName(), 2000);\n-            serialPort.setSerialPortParams(BAUD, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+    private void startTimeUpdates(int timeUpdatesInterval) {\n+        timeUpdateJob = scheduler.scheduleWithFixedDelay(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzE1MQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491217151", "createdAt": "2020-09-18T22:15:07Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -12,101 +12,134 @@\n  */\n package org.openhab.binding.velbus.internal.handler;\n \n-import static org.openhab.binding.velbus.internal.VelbusBindingConstants.PORT;\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.TooManyListenersException;\n+import java.util.TimeZone;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.thing.Bridge;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n import org.eclipse.smarthome.core.types.Command;\n-import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n-import org.eclipse.smarthome.io.transport.serial.SerialPort;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n-import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n import org.openhab.binding.velbus.internal.VelbusPacketInputStream;\n import org.openhab.binding.velbus.internal.VelbusPacketListener;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDatePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDaylightSavingsStatusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetRealtimeClockPacket;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * {@link VelbusBridgeHandler} is the handler for a Velbus Serial-interface and connects it to\n+ * {@link VelbusBridgeHandler} is an abstract handler for a Velbus interface and connects it to\n  * the framework.\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n-public class VelbusBridgeHandler extends BaseBridgeHandler implements SerialPortEventListener {\n+@NonNullByDefault\n+public abstract class VelbusBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n \n-    private Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n-\n-    private static final int BAUD = 9600;\n-    private SerialPort serialPort;\n-    private final SerialPortManager serialPortManager;\n-    private OutputStream outputStream;\n-    private VelbusPacketInputStream inputStream;\n     private long lastPacketTimeMillis;\n \n-    private VelbusPacketListener defaultPacketListener;\n-    private final Map<Byte, VelbusPacketListener> packetListeners = new HashMap<>();\n+    protected @Nullable VelbusPacketListener defaultPacketListener;\n+    protected Map<Byte, VelbusPacketListener> packetListeners = new HashMap<Byte, VelbusPacketListener>();\n \n-    public VelbusBridgeHandler(Bridge velbusBridge, SerialPortManager serialPortManager) {\n-        super(velbusBridge);\n-        this.serialPortManager = serialPortManager;\n-    }\n+    private @Nullable ScheduledFuture<?> timeUpdateJob;\n+    private @Nullable ScheduledFuture<?> reconnectionHandler;\n \n-    @Override\n-    public void handleCommand(ChannelUID channelUID, Command command) {\n-        // There is nothing to handle in the bridge handler\n+    private @NonNullByDefault({}) OutputStream outputStream;\n+    private @NonNullByDefault({}) VelbusPacketInputStream inputStream;\n+\n+    private boolean listenerStopped;\n+\n+    public VelbusBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n     }\n \n     @Override\n     public void initialize() {\n         logger.debug(\"Initializing velbus bridge handler.\");\n \n-        String port = (String) getConfig().get(PORT);\n-        if (port == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial port name not configured\");\n-            return;\n-        }\n+        connect();\n+        initializeTimeUpdate();\n+    }\n \n-        SerialPortIdentifier serialPortIdentifier = serialPortManager.getIdentifier(port);\n-        if (serialPortIdentifier == null) {\n-            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Serial port not found: \" + port);\n-            return;\n+    private void initializeTimeUpdate() {\n+        Object timeUpdateIntervalObject = getConfig().get(TIME_UPDATE_INTERVAL);\n+        if (timeUpdateIntervalObject != null) {\n+            int timeUpdateInterval = ((BigDecimal) timeUpdateIntervalObject).intValue();\n+\n+            if (timeUpdateInterval > 0) {\n+                startTimeUpdates(timeUpdateInterval);\n+            }\n         }\n+    }\n \n-        try {\n-            serialPort = serialPortIdentifier.open(VelbusBridgeHandler.class.getCanonicalName(), 2000);\n-            serialPort.setSerialPortParams(BAUD, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);\n+    private void startTimeUpdates(int timeUpdatesInterval) {\n+        timeUpdateJob = scheduler.scheduleWithFixedDelay(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNTQxNA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE0MzAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1Mzo1NlrOHSkovQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNTo1NlrOHUdh5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNjY2OQ==", "bodyText": "This is not such a big problem that it should be reported as an error log. Errors logs are used to indicate major failures of the system in openHAB.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"Error while closing output stream\", e);\n          \n          \n            \n                        logger.debug(\"Error while closing output stream\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489236669", "createdAt": "2020-09-16T07:53:56Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzM4MQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491217381", "createdAt": "2020-09-18T22:15:56Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNjY2OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 281}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE0MzgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1NDoxMFrOHSkpQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyMDoxMlrOHUdmSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNjgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.error(\"Error while closing input stream\", e);\n          \n          \n            \n                        logger.debug(\"Error while closing input stream\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489236803", "createdAt": "2020-09-16T07:54:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxODUwNw==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491218507", "createdAt": "2020-09-18T22:20:12Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNjgwMw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE0NjU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzo1NDo1MFrOHSkq9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyMDozOVrOHUdm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNzIzOQ==", "bodyText": "Use lambda notation:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {\n          \n          \n            \n                                reconnectionHandler = scheduler.scheduleWithFixedDelay(() -> {\n          \n          \n            \n                                     try {\n          \n          \n            \n                                      ....", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489237239", "createdAt": "2020-09-16T07:54:50Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);\n+            if (reconnectionIntervalObject != null) {\n+                long reconnectionInterval = ((BigDecimal) reconnectionIntervalObject).longValue();\n+\n+                if (reconnectionInterval > 0) {\n+                    reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 316}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxODY1NA==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491218654", "createdAt": "2020-09-18T22:20:39Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);\n+            if (reconnectionIntervalObject != null) {\n+                long reconnectionInterval = ((BigDecimal) reconnectionIntervalObject).longValue();\n+\n+                if (reconnectionInterval > 0) {\n+                    reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzNzIzOQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 316}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE3NDYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowMTo1M1rOHSk8Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyNjoyNFrOHUdsow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTY0Mg==", "bodyText": "Can you catch a specific exception? Also if this happens you might want to set the thing to offline to indicate it's not connecting", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489241642", "createdAt": "2020-09-16T08:01:53Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);\n+            if (reconnectionIntervalObject != null) {\n+                long reconnectionInterval = ((BigDecimal) reconnectionIntervalObject).longValue();\n+\n+                if (reconnectionInterval > 0) {\n+                    reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            try {\n+                                connect();\n+                                if (reconnectionHandler != null) {\n+                                    reconnectionHandler.cancel(false);\n+                                }\n+                            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDEzMQ==", "bodyText": "Modified in commit 780323c: replaced the exception catching by a boolean check on \"connect()\". In case of problems during the connection, the \"connect()\" operation is setting the thing to offline through \"onConnectionLost()\".", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220131", "createdAt": "2020-09-18T22:26:24Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);\n+            if (reconnectionIntervalObject != null) {\n+                long reconnectionInterval = ((BigDecimal) reconnectionIntervalObject).longValue();\n+\n+                if (reconnectionInterval > 0) {\n+                    reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            try {\n+                                connect();\n+                                if (reconnectionHandler != null) {\n+                                    reconnectionHandler.cancel(false);\n+                                }\n+                            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTY0Mg=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE3NjU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowMjozMVrOHSk9Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyNzowNFrOHUdtTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTk1NA==", "bodyText": "You should probably set the status of the thing and then this should be an log to debug:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            logger.error(\"Reconnection failed\", e);\n          \n          \n            \n                                            logger.debug(\"Reconnection failed\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489241954", "createdAt": "2020-09-16T08:02:31Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);\n+            if (reconnectionIntervalObject != null) {\n+                long reconnectionInterval = ((BigDecimal) reconnectionIntervalObject).longValue();\n+\n+                if (reconnectionInterval > 0) {\n+                    reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            try {\n+                                connect();\n+                                if (reconnectionHandler != null) {\n+                                    reconnectionHandler.cancel(false);\n+                                }\n+                            } catch (Exception e) {\n+                                logger.error(\"Reconnection failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDMwMw==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220303", "createdAt": "2020-09-18T22:27:04Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);\n+            if (reconnectionIntervalObject != null) {\n+                long reconnectionInterval = ((BigDecimal) reconnectionIntervalObject).longValue();\n+\n+                if (reconnectionInterval > 0) {\n+                    reconnectionHandler = scheduler.scheduleWithFixedDelay(new Runnable() {\n+\n+                        @Override\n+                        public void run() {\n+                            try {\n+                                connect();\n+                                if (reconnectionHandler != null) {\n+                                    reconnectionHandler.cancel(false);\n+                                }\n+                            } catch (Exception e) {\n+                                logger.error(\"Reconnection failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MTk1NA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE4MTY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusMemoHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowNDowNFrOHSlAtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyNzo0OVrOHUduBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MjgwNQ==", "bodyText": "You should use the construtor which add the group id as a separate paramter.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489242805", "createdAt": "2020-09-16T08:04:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusMemoHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.velbus.internal.packets.VelbusMemoTextPacket;\n+\n+/**\n+ * The {@link VelbusMemoHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusMemoHandler extends VelbusThermostatHandler {\n+    public static final int MEMO_TEXT_MAX_LENGTH = 63;\n+\n+    private final ChannelUID memoChannel = new ChannelUID(thing.getUID(), \"oledDisplay#MEMO\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDQ4Nw==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220487", "createdAt": "2020-09-18T22:27:49Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusMemoHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.velbus.internal.packets.VelbusMemoTextPacket;\n+\n+/**\n+ * The {@link VelbusMemoHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusMemoHandler extends VelbusThermostatHandler {\n+    public static final int MEMO_TEXT_MAX_LENGTH = 63;\n+\n+    private final ChannelUID memoChannel = new ChannelUID(thing.getUID(), \"oledDisplay#MEMO\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MjgwNQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE4NzM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusMemoHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowNTozMVrOHSlEHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyODoyNFrOHUdumw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MzY3OQ==", "bodyText": "Same here. Use other constructor.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489243679", "createdAt": "2020-09-16T08:05:31Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusMemoHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.velbus.internal.packets.VelbusMemoTextPacket;\n+\n+/**\n+ * The {@link VelbusMemoHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusMemoHandler extends VelbusThermostatHandler {\n+    public static final int MEMO_TEXT_MAX_LENGTH = 63;\n+\n+    private final ChannelUID memoChannel = new ChannelUID(thing.getUID(), \"oledDisplay#MEMO\");\n+\n+    public VelbusMemoHandler(Thing thing) {\n+        super(thing, 4, new ChannelUID(thing.getUID(), \"input#CH33\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDYzNQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220635", "createdAt": "2020-09-18T22:28:24Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusMemoHandler.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.velbus.internal.packets.VelbusMemoTextPacket;\n+\n+/**\n+ * The {@link VelbusMemoHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusMemoHandler extends VelbusThermostatHandler {\n+    public static final int MEMO_TEXT_MAX_LENGTH = 63;\n+\n+    private final ChannelUID memoChannel = new ChannelUID(thing.getUID(), \"oledDisplay#MEMO\");\n+\n+    public VelbusMemoHandler(Thing thing) {\n+        super(thing, 4, new ChannelUID(thing.getUID(), \"input#CH33\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MzY3OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE5MDc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowNjoyOFrOHSlGRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyODo1OVrOHUdvEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NDIzMQ==", "bodyText": "Remove this variable and use this::readPackets", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489244231", "createdAt": "2020-09-16T08:06:28Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDc1NQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220755", "createdAt": "2020-09-18T22:28:59Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NDIzMQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTE5NTA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowNzozNFrOHSlI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyOToxM1rOHUdvWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NDkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Error while closing socket\", e);\n          \n          \n            \n                            logger.debug(\"Error while closing socket\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489244917", "createdAt": "2020-09-16T08:07:34Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {\n+        readPackets();\n+    };\n+\n+    @Override\n+    protected void connect() {\n+        String address = (String) getConfig().get(ADDRESS);\n+        BigDecimal port = (BigDecimal) getConfig().get(PORT);\n+\n+        if (address != null && port != null) {\n+            int portInt = port.intValue();\n+            try {\n+                Socket socket = new Socket(address, portInt);\n+                this.socket = socket;\n+\n+                initializeStreams(socket.getOutputStream(), socket.getInputStream());\n+\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Bridge online on network address {}:{}\", address, portInt);\n+            } catch (IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"Failed to connect to network address {}:{}\", address, port);\n+            }\n+\n+            // Start Velbus packet listener. This listener will act on all packets coming from\n+            // IP-interface.\n+            (new Thread(networkEvents)).start();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Network address or port not configured\");\n+            logger.debug(\"Network address or port not configured\");\n+        }\n+    }\n+\n+    @Override\n+    protected void disconnect() {\n+        if (socket != null) {\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                logger.error(\"Error while closing socket\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDgyNQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220825", "createdAt": "2020-09-18T22:29:13Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {\n+        readPackets();\n+    };\n+\n+    @Override\n+    protected void connect() {\n+        String address = (String) getConfig().get(ADDRESS);\n+        BigDecimal port = (BigDecimal) getConfig().get(PORT);\n+\n+        if (address != null && port != null) {\n+            int portInt = port.intValue();\n+            try {\n+                Socket socket = new Socket(address, portInt);\n+                this.socket = socket;\n+\n+                initializeStreams(socket.getOutputStream(), socket.getInputStream());\n+\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Bridge online on network address {}:{}\", address, portInt);\n+            } catch (IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"Failed to connect to network address {}:{}\", address, port);\n+            }\n+\n+            // Start Velbus packet listener. This listener will act on all packets coming from\n+            // IP-interface.\n+            (new Thread(networkEvents)).start();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Network address or port not configured\");\n+            logger.debug(\"Network address or port not configured\");\n+        }\n+    }\n+\n+    @Override\n+    protected void disconnect() {\n+        if (socket != null) {\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                logger.error(\"Error while closing socket\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0NDkxNw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTMxODc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozODowOVrOHSmUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyOTo0MFrOHUdvww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NDI2Ng==", "bodyText": "It would be better to create classes with the configuration options as fields and use getConfigAs in initialize method and store the configuration in a field object. That way you don't need to get the config everytime and don't need to convert the objects to usefull types.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489264266", "createdAt": "2020-09-16T08:38:09Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMDkzMQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491220931", "createdAt": "2020-09-18T22:29:40Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -124,61 +157,125 @@ public synchronized void sendPacket(byte[] packet) {\n             return;\n         }\n \n-        try {\n-            outputStream.write(packet);\n-            outputStream.flush();\n-        } catch (IOException e) {\n-            logger.error(\"Serial port write error\", e);\n-        }\n+        writePacket(packet);\n \n         lastPacketTimeMillis = System.currentTimeMillis();\n     }\n \n-    public void setDefaultPacketListener(VelbusPacketListener velbusPacketListener) {\n-        defaultPacketListener = velbusPacketListener;\n+    private void readPacket(byte[] packet) {\n+        byte address = packet[2];\n+\n+        if (packetListeners.containsKey(address)) {\n+            VelbusPacketListener packetListener = packetListeners.get(address);\n+            packetListener.onPacketReceived(packet);\n+        } else if (defaultPacketListener != null) {\n+            defaultPacketListener.onPacketReceived(packet);\n+        }\n     }\n \n-    public void registerPacketListener(byte address, VelbusPacketListener packetListener) {\n-        if (packetListener == null) {\n-            throw new IllegalArgumentException(\"It's not allowed to pass a null RelayStatusListener.\");\n+    protected void readPackets() {\n+        if (inputStream == null) {\n+            onConnectionLost();\n+            return;\n         }\n \n-        packetListeners.put(Byte.valueOf(address), packetListener);\n+        byte[] packet;\n+\n+        listenerStopped = false;\n+\n+        try {\n+            while (!listenerStopped & ((packet = inputStream.readPacket()).length > 0)) {\n+                readPacket(packet);\n+            }\n+        } catch (IOException e) {\n+            if (!listenerStopped) {\n+                onConnectionLost();\n+            }\n+        }\n     }\n \n-    public void unregisterRelayStatusListener(byte address, VelbusPacketListener packetListener) {\n-        packetListeners.remove(Byte.valueOf(address));\n+    private void writePacket(byte[] packet) {\n+        if (outputStream == null) {\n+            onConnectionLost();\n+            return;\n+        }\n+\n+        try {\n+            outputStream.write(packet);\n+            outputStream.flush();\n+        } catch (IOException e) {\n+            onConnectionLost();\n+        }\n     }\n \n-    @Override\n-    public void dispose() {\n-        if (serialPort != null) {\n-            serialPort.removeEventListener();\n-            serialPort.close();\n-            serialPort = null;\n+    protected void onConnectionLost() {\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                \"A network communication error occurred.\");\n+        disconnect();\n+        startReconnectionHandler();\n+    }\n+\n+    protected abstract void connect();\n+\n+    protected void disconnect() {\n+        listenerStopped = true;\n+\n+        try {\n+            if (outputStream != null) {\n+                outputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing output stream\", e);\n+        }\n+\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while closing input stream\", e);\n         }\n     }\n \n-    @Override\n-    public void serialEvent(SerialPortEvent event) {\n-        logger.debug(\"Serial port event triggered\");\n-\n-        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n-            try {\n-                byte[] packet;\n-                while ((packet = inputStream.readPacket()) != null) {\n-                    byte address = packet[2];\n-\n-                    VelbusPacketListener packetListener = packetListeners.get(address);\n-                    if (packetListener != null) {\n-                        packetListener.onPacketReceived(packet);\n-                    } else if (defaultPacketListener != null) {\n-                        defaultPacketListener.onPacketReceived(packet);\n-                    }\n+    public void startReconnectionHandler() {\n+        if (reconnectionHandler == null || reconnectionHandler.isCancelled()) {\n+            Object reconnectionIntervalObject = getConfig().get(RECONNECTION_INTERVAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NDI2Ng=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTMyMzE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODozODo1N1rOHSmXRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoyOTo1NFrOHUdwCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NDk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.error(\"Error while closing socket\", e);\n          \n          \n            \n                            logger.debug(\"Error while closing socket\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489264967", "createdAt": "2020-09-16T08:38:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {\n+        readPackets();\n+    };\n+\n+    @Override\n+    protected void connect() {\n+        String address = (String) getConfig().get(ADDRESS);\n+        BigDecimal port = (BigDecimal) getConfig().get(PORT);\n+\n+        if (address != null && port != null) {\n+            int portInt = port.intValue();\n+            try {\n+                Socket socket = new Socket(address, portInt);\n+                this.socket = socket;\n+\n+                initializeStreams(socket.getOutputStream(), socket.getInputStream());\n+\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Bridge online on network address {}:{}\", address, portInt);\n+            } catch (IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"Failed to connect to network address {}:{}\", address, port);\n+            }\n+\n+            // Start Velbus packet listener. This listener will act on all packets coming from\n+            // IP-interface.\n+            (new Thread(networkEvents)).start();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Network address or port not configured\");\n+            logger.debug(\"Network address or port not configured\");\n+        }\n+    }\n+\n+    @Override\n+    protected void disconnect() {\n+        if (socket != null) {\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                logger.error(\"Error while closing socket\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMTAwMQ==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491221001", "createdAt": "2020-09-18T22:29:54Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {\n+        readPackets();\n+    };\n+\n+    @Override\n+    protected void connect() {\n+        String address = (String) getConfig().get(ADDRESS);\n+        BigDecimal port = (BigDecimal) getConfig().get(PORT);\n+\n+        if (address != null && port != null) {\n+            int portInt = port.intValue();\n+            try {\n+                Socket socket = new Socket(address, portInt);\n+                this.socket = socket;\n+\n+                initializeStreams(socket.getOutputStream(), socket.getInputStream());\n+\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Bridge online on network address {}:{}\", address, portInt);\n+            } catch (IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"Failed to connect to network address {}:{}\", address, port);\n+            }\n+\n+            // Start Velbus packet listener. This listener will act on all packets coming from\n+            // IP-interface.\n+            (new Thread(networkEvents)).start();\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                    \"Network address or port not configured\");\n+            logger.debug(\"Network address or port not configured\");\n+        }\n+    }\n+\n+    @Override\n+    protected void disconnect() {\n+        if (socket != null) {\n+            try {\n+                socket.close();\n+            } catch (IOException e) {\n+                logger.error(\"Error while closing socket\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NDk2Nw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTMzMzQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0MTozMlrOHSmdwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjozMzozNlrOHUdzig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NjYyNQ==", "bodyText": "I'm assuming you stop this thread indirectly by closing the stream and setting reconnect to false?\nYou should set the thread name to something like \"OH-binding-\" + thingUID and setDeamon to true.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489266625", "createdAt": "2020-09-16T08:41:32Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {\n+        readPackets();\n+    };\n+\n+    @Override\n+    protected void connect() {\n+        String address = (String) getConfig().get(ADDRESS);\n+        BigDecimal port = (BigDecimal) getConfig().get(PORT);\n+\n+        if (address != null && port != null) {\n+            int portInt = port.intValue();\n+            try {\n+                Socket socket = new Socket(address, portInt);\n+                this.socket = socket;\n+\n+                initializeStreams(socket.getOutputStream(), socket.getInputStream());\n+\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Bridge online on network address {}:{}\", address, portInt);\n+            } catch (IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"Failed to connect to network address {}:{}\", address, port);\n+            }\n+\n+            // Start Velbus packet listener. This listener will act on all packets coming from\n+            // IP-interface.\n+            (new Thread(networkEvents)).start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMTg5OA==", "bodyText": "Modified in commit 780323c.\nThe thread is indeed stopped by closing the stream.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491221898", "createdAt": "2020-09-18T22:33:36Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusNetworkBridgeHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.net.Socket;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusNetworkBridgeHandler} is the handler for a Velbus network interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeHandler extends VelbusBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusNetworkBridgeHandler.class);\n+\n+    private @Nullable Socket socket;\n+\n+    public VelbusNetworkBridgeHandler(Bridge velbusBridge) {\n+        super(velbusBridge);\n+    }\n+\n+    /**\n+     * Runnable that handles inbound communication from Velbus network interface.\n+     * <p>\n+     * The thread listens to the TCP socket opened at initialization of the {@link VelbusNetworkBridgeHandler} class\n+     * and interprets all inbound velbus packets.\n+     */\n+    private Runnable networkEvents = () -> {\n+        readPackets();\n+    };\n+\n+    @Override\n+    protected void connect() {\n+        String address = (String) getConfig().get(ADDRESS);\n+        BigDecimal port = (BigDecimal) getConfig().get(PORT);\n+\n+        if (address != null && port != null) {\n+            int portInt = port.intValue();\n+            try {\n+                Socket socket = new Socket(address, portInt);\n+                this.socket = socket;\n+\n+                initializeStreams(socket.getOutputStream(), socket.getInputStream());\n+\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Bridge online on network address {}:{}\", address, portInt);\n+            } catch (IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"Failed to connect to network address {}:{}\", address, port);\n+            }\n+\n+            // Start Velbus packet listener. This listener will act on all packets coming from\n+            // IP-interface.\n+            (new Thread(networkEvents)).start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NjYyNQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM0MDI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSerialBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0MzowNVrOHSmh4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjozNzo0OFrOHUd3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NzY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } else\n          \n          \n            \n                    } else {", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489267683", "createdAt": "2020-09-16T08:43:05Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSerialBridgeHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.PORT;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusSerialBridgeHandler} is the handler for a Velbus Serial-interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSerialBridgeHandler extends VelbusBridgeHandler implements SerialPortEventListener {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusSerialBridgeHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+\n+    private @Nullable SerialPort serialPort;\n+\n+    public VelbusSerialBridgeHandler(Bridge velbusBridge, SerialPortManager serialPortManager) {\n+        super(velbusBridge);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent event) {\n+        logger.debug(\"Serial port event triggered\");\n+\n+        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n+            readPackets();\n+        }\n+    }\n+\n+    @Override\n+    protected void connect() {\n+        String port = (String) getConfig().get(PORT);\n+        if (port != null) {\n+            // parse ports and if the port is found, initialize the reader\n+            SerialPortIdentifier portId = serialPortManager.getIdentifier(port);\n+            if (portId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR, \"Port is not known!\");\n+                return;\n+            }\n+\n+            // initialize serial port\n+            try {\n+                SerialPort serialPort = portId.open(getThing().getUID().toString(), 2000);\n+                this.serialPort = serialPort;\n+\n+                OutputStream outputStream = serialPort.getOutputStream();\n+                InputStream inputStream = serialPort.getInputStream();\n+\n+                if (outputStream != null && inputStream != null) {\n+                    initializeStreams(outputStream, inputStream);\n+\n+                    serialPort.addEventListener(this);\n+                    serialPort.notifyOnDataAvailable(true);\n+\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Bridge online on serial port {}\", port);\n+                }\n+            } catch (final IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"I/O error on serial port {}\", port);\n+            } catch (PortInUseException e) {\n+                onConnectionLost();\n+                logger.debug(\"Port {} is in use\", port);\n+            } catch (TooManyListenersException e) {\n+                onConnectionLost();\n+                logger.debug(\"Cannot attach listener to port {}\", port);\n+            }\n+        } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMjkyMQ==", "bodyText": "Removed the \"else\" part in commit 780323c, as a result of using classes with the configuration options, loaded by getConfigAs.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491222921", "createdAt": "2020-09-18T22:37:48Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSerialBridgeHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.PORT;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.TooManyListenersException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n+import org.eclipse.smarthome.io.transport.serial.SerialPort;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n+import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * {@link VelbusSerialBridgeHandler} is the handler for a Velbus Serial-interface and connects it to\n+ * the framework.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSerialBridgeHandler extends VelbusBridgeHandler implements SerialPortEventListener {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusSerialBridgeHandler.class);\n+\n+    private SerialPortManager serialPortManager;\n+\n+    private @Nullable SerialPort serialPort;\n+\n+    public VelbusSerialBridgeHandler(Bridge velbusBridge, SerialPortManager serialPortManager) {\n+        super(velbusBridge);\n+        this.serialPortManager = serialPortManager;\n+    }\n+\n+    @Override\n+    public void serialEvent(SerialPortEvent event) {\n+        logger.debug(\"Serial port event triggered\");\n+\n+        if (event.getEventType() == SerialPortEvent.DATA_AVAILABLE) {\n+            readPackets();\n+        }\n+    }\n+\n+    @Override\n+    protected void connect() {\n+        String port = (String) getConfig().get(PORT);\n+        if (port != null) {\n+            // parse ports and if the port is found, initialize the reader\n+            SerialPortIdentifier portId = serialPortManager.getIdentifier(port);\n+            if (portId == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR, \"Port is not known!\");\n+                return;\n+            }\n+\n+            // initialize serial port\n+            try {\n+                SerialPort serialPort = portId.open(getThing().getUID().toString(), 2000);\n+                this.serialPort = serialPort;\n+\n+                OutputStream outputStream = serialPort.getOutputStream();\n+                InputStream inputStream = serialPort.getInputStream();\n+\n+                if (outputStream != null && inputStream != null) {\n+                    initializeStreams(outputStream, inputStream);\n+\n+                    serialPort.addEventListener(this);\n+                    serialPort.notifyOnDataAvailable(true);\n+\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Bridge online on serial port {}\", port);\n+                }\n+            } catch (final IOException ex) {\n+                onConnectionLost();\n+                logger.debug(\"I/O error on serial port {}\", port);\n+            } catch (PortInUseException e) {\n+                onConnectionLost();\n+                logger.debug(\"Port {} is in use\", port);\n+            } catch (TooManyListenersException e) {\n+                onConnectionLost();\n+                logger.debug(\"Cannot attach listener to port {}\", port);\n+            }\n+        } else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2NzY4Mw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM0NDUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThermostatHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0NDoxM1rOHSmkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0MDozNlrOHUd6WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2ODM2OQ==", "bodyText": "Use the constructor with separate group paramter", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489268369", "createdAt": "2020-09-16T08:44:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThermostatHandler.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.CommonTriggerEvents;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorSettingsRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetTemperaturePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusThermostatModePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusThermostatOperatingModePacket;\n+\n+/**\n+ * The {@link VelbusThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusThermostatHandler extends VelbusTemperatureSensorHandler {\n+    private static final double THERMOSTAT_TEMPERATURE_SETPOINT_RESOLUTION = 0.5;\n+\n+    private static final StringType OPERATING_MODE_HEATING = new StringType(\"HEATING\");\n+    private static final StringType OPERATING_MODE_COOLING = new StringType(\"COOLING\");\n+\n+    private static final byte OPERATING_MODE_MASK = (byte) 0x80;\n+    private static final byte COOLING_MODE_MASK = (byte) 0x80;\n+\n+    private static final StringType MODE_COMFORT = new StringType(\"COMFORT\");\n+    private static final StringType MODE_DAY = new StringType(\"DAY\");\n+    private static final StringType MODE_NIGHT = new StringType(\"NIGHT\");\n+    private static final StringType MODE_SAFE = new StringType(\"SAFE\");\n+\n+    private static final byte MODE_MASK = (byte) 0x70;\n+    private static final byte COMFORT_MODE_MASK = (byte) 0x40;\n+    private static final byte DAY_MODE_MASK = (byte) 0x20;\n+    private static final byte NIGHT_MODE_MASK = (byte) 0x10;\n+\n+    private final ChannelUID currentTemperatureSetpointChannel = new ChannelUID(thing.getUID(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2OTU5Mw==", "bodyText": "These can be static final?", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489269593", "createdAt": "2020-09-16T08:46:03Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThermostatHandler.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.CommonTriggerEvents;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorSettingsRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetTemperaturePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusThermostatModePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusThermostatOperatingModePacket;\n+\n+/**\n+ * The {@link VelbusThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusThermostatHandler extends VelbusTemperatureSensorHandler {\n+    private static final double THERMOSTAT_TEMPERATURE_SETPOINT_RESOLUTION = 0.5;\n+\n+    private static final StringType OPERATING_MODE_HEATING = new StringType(\"HEATING\");\n+    private static final StringType OPERATING_MODE_COOLING = new StringType(\"COOLING\");\n+\n+    private static final byte OPERATING_MODE_MASK = (byte) 0x80;\n+    private static final byte COOLING_MODE_MASK = (byte) 0x80;\n+\n+    private static final StringType MODE_COMFORT = new StringType(\"COMFORT\");\n+    private static final StringType MODE_DAY = new StringType(\"DAY\");\n+    private static final StringType MODE_NIGHT = new StringType(\"NIGHT\");\n+    private static final StringType MODE_SAFE = new StringType(\"SAFE\");\n+\n+    private static final byte MODE_MASK = (byte) 0x70;\n+    private static final byte COMFORT_MODE_MASK = (byte) 0x40;\n+    private static final byte DAY_MODE_MASK = (byte) 0x20;\n+    private static final byte NIGHT_MODE_MASK = (byte) 0x10;\n+\n+    private final ChannelUID currentTemperatureSetpointChannel = new ChannelUID(thing.getUID(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2ODM2OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyMzY0MA==", "bodyText": "It doens't look like it can, as the non-static field \"thing\" is used in the ChannelUID constructor to get the thing's UID.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491223640", "createdAt": "2020-09-18T22:40:36Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThermostatHandler.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.SIUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.CommonTriggerEvents;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorSettingsRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetTemperaturePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusThermostatModePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusThermostatOperatingModePacket;\n+\n+/**\n+ * The {@link VelbusThermostatHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class VelbusThermostatHandler extends VelbusTemperatureSensorHandler {\n+    private static final double THERMOSTAT_TEMPERATURE_SETPOINT_RESOLUTION = 0.5;\n+\n+    private static final StringType OPERATING_MODE_HEATING = new StringType(\"HEATING\");\n+    private static final StringType OPERATING_MODE_COOLING = new StringType(\"COOLING\");\n+\n+    private static final byte OPERATING_MODE_MASK = (byte) 0x80;\n+    private static final byte COOLING_MODE_MASK = (byte) 0x80;\n+\n+    private static final StringType MODE_COMFORT = new StringType(\"COMFORT\");\n+    private static final StringType MODE_DAY = new StringType(\"DAY\");\n+    private static final StringType MODE_NIGHT = new StringType(\"NIGHT\");\n+    private static final StringType MODE_SAFE = new StringType(\"SAFE\");\n+\n+    private static final byte MODE_MASK = (byte) 0x70;\n+    private static final byte COMFORT_MODE_MASK = (byte) 0x40;\n+    private static final byte DAY_MODE_MASK = (byte) 0x20;\n+    private static final byte NIGHT_MODE_MASK = (byte) 0x10;\n+\n+    private final ChannelUID currentTemperatureSetpointChannel = new ChannelUID(thing.getUID(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI2ODM2OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM2ODYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo0OTo0OVrOHSmzWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0MjozNlrOHUd8JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3MjE1NA==", "bodyText": "Just get the value without group id in the line above and you can remove this if statement check", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489272154", "createdAt": "2020-09-16T08:49:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThingHandler.java", "diffHunk": "@@ -137,49 +153,79 @@ private void initializeChannelNames() {\n         for (int i = 0; i < channels.size(); i++) {\n             Channel channel = channels.get(i);\n             String channelUID = channel.getUID().getId();\n+\n+            if (channelUID.contains(\"#\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNDEwMA==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491224100", "createdAt": "2020-09-18T22:42:36Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusThingHandler.java", "diffHunk": "@@ -137,49 +153,79 @@ private void initializeChannelNames() {\n         for (int i = 0; i < channels.size(); i++) {\n             Channel channel = channels.get(i);\n             String channelUID = channel.getUID().getId();\n+\n+            if (channelUID.contains(\"#\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3MjE1NA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM3ODQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMBGPHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1MjowNlrOHSm5jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0Mjo1OVrOHUd8hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Mzc0MA==", "bodyText": "Use constructor with groupid parameter", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489273740", "createdAt": "2020-09-16T08:52:06Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMBGPHandler.java", "diffHunk": "@@ -28,11 +29,13 @@\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n-public class VelbusVMBGPHandler extends VelbusTemperatureSensorHandler {\n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMBGP1,\n-            THING_TYPE_VMBGP2, THING_TYPE_VMBGP4, THING_TYPE_VMBGP4, THING_TYPE_VMBGP4PIR));\n+@NonNullByDefault\n+public class VelbusVMBGPHandler extends VelbusThermostatHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Arrays.asList(THING_TYPE_VMBGP1, THING_TYPE_VMBGP1_2, THING_TYPE_VMBGP2, THING_TYPE_VMBGP2_2,\n+                    THING_TYPE_VMBGP4, THING_TYPE_VMBGP4_2, THING_TYPE_VMBGP4PIR, THING_TYPE_VMBGP4PIR_2));\n \n     public VelbusVMBGPHandler(Thing thing) {\n-        super(thing, 4, new ChannelUID(thing.getUID(), \"CH9\"));\n+        super(thing, 4, new ChannelUID(thing.getUID(), \"input#CH9\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNDE5Ng==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491224196", "createdAt": "2020-09-18T22:42:59Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMBGPHandler.java", "diffHunk": "@@ -28,11 +29,13 @@\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n-public class VelbusVMBGPHandler extends VelbusTemperatureSensorHandler {\n-    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMBGP1,\n-            THING_TYPE_VMBGP2, THING_TYPE_VMBGP4, THING_TYPE_VMBGP4, THING_TYPE_VMBGP4PIR));\n+@NonNullByDefault\n+public class VelbusVMBGPHandler extends VelbusThermostatHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n+            Arrays.asList(THING_TYPE_VMBGP1, THING_TYPE_VMBGP1_2, THING_TYPE_VMBGP2, THING_TYPE_VMBGP2_2,\n+                    THING_TYPE_VMBGP4, THING_TYPE_VMBGP4_2, THING_TYPE_VMBGP4PIR, THING_TYPE_VMBGP4PIR_2));\n \n     public VelbusVMBGPHandler(Thing thing) {\n-        super(thing, 4, new ChannelUID(thing.getUID(), \"CH9\"));\n+        super(thing, 4, new ChannelUID(thing.getUID(), \"input#CH9\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Mzc0MA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM5NDQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NjowMVrOHSnDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NDozNVrOHUd9-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjI4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Time Update interval</label>\n          \n          \n            \n            \t\t\t<label>Time Update Interval</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489276288", "createdAt": "2020-09-16T08:56:01Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNDU3MA==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491224570", "createdAt": "2020-09-18T22:44:35Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjI4OA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM5NTEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NjoxMVrOHSnD1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NDo0NlrOHUd-MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjM3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Reconnection interval</label>\n          \n          \n            \n            \t\t\t<label>Reconnection Interval</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489276374", "createdAt": "2020-09-16T08:56:11Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNDYyNQ==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491224625", "createdAt": "2020-09-18T22:44:46Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjM3NA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM5NjkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1NjozOVrOHSnE9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NTowM1rOHUd-jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjY2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Time Update interval</label>\n          \n          \n            \n            \t\t\t<label>Time Update Interval</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489276661", "createdAt": "2020-09-16T08:56:39Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNDcxNg==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491224716", "createdAt": "2020-09-18T22:45:03Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NjY2MQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTM5ODI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1Njo1NVrOHSnFvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NTo0OFrOHUd_TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Njg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"timeUpdateInterval\" type=\"integer\" unit=\"min\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489276862", "createdAt": "2020-09-16T08:56:55Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNDkwOA==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491224908", "createdAt": "2020-09-18T22:45:48Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Njg2Mg=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwMjk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1ODowNFrOHSnIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NjoyN1rOHUd_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"reconnectionInterval\" type=\"integer\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489277590", "createdAt": "2020-09-16T08:58:04Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTA3MA==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225070", "createdAt": "2020-09-18T22:46:27Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3NzU5MA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNDE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1ODoyMlrOHSnJTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0Njo1N1rOHUeAWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Nzc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"timeUpdateInterval\" type=\"integer\" unit=\"min\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489277775", "createdAt": "2020-09-16T08:58:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTE3OA==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225178", "createdAt": "2020-09-18T22:46:57Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Nzc3NQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1ODozM1rOHSnJwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NzoxOFrOHUeAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Nzg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Reconnection interval</label>\n          \n          \n            \n            \t\t\t<label>Reconnection Interval</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489277889", "createdAt": "2020-09-16T08:58:33Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTI0OQ==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225249", "createdAt": "2020-09-18T22:47:18Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Nzg4OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1ODo0OVrOHSnKaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0NzozN1rOHUeA2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODA1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"reconnectionInterval\" type=\"integer\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489278059", "createdAt": "2020-09-16T08:58:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTMwNg==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225306", "createdAt": "2020-09-18T22:47:37Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODA1OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNjUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTowMlrOHSnK0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0Nzo1N1rOHUeBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODE2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>Refresh interval</label>\n          \n          \n            \n            \t\t\t<label>Refresh Interval</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489278161", "createdAt": "2020-09-16T08:59:02Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:velbus:temperatureSensorDevice\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\">\n+\t\t\t<label>Refresh interval</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTQwMw==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225403", "createdAt": "2020-09-18T22:47:57Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:velbus:temperatureSensorDevice\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\">\n+\t\t\t<label>Refresh interval</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODE2MQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwNzMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OToxM1rOHSnLUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo0ODoxNFrOHUeBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODI4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"refresh\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"refresh\" type=\"integer\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489278289", "createdAt": "2020-09-16T08:59:13Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:velbus:temperatureSensorDevice\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTQ2Ng==", "bodyText": "Modified in commit  780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225466", "createdAt": "2020-09-18T22:48:14Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -12,6 +12,62 @@\n \t\t\t<description>Select serial port (COM1, /dev/ttyS0, ...)</description>\n \t\t\t<required>true</required>\n \t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"bridge-type:velbus:networkbridge\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<context>network-address</context>\n+\t\t\t<label>IP Address or Hostname</label>\n+\t\t\t<description>IP Address or hostname of Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"port\" type=\"integer\" required=\"false\">\n+\t\t\t<label>Port</label>\n+\t\t\t<description>Network port to communicate with Velbus server</description>\n+\t\t\t<required>true</required>\n+\t\t</parameter>\n+\t\t<parameter name=\"timeUpdateInterval\" type=\"integer\">\n+\t\t\t<label>Time Update interval</label>\n+\t\t\t<description>The interval (in minutes) at which the realtime clock, date and daylight savings status of the modules\n+\t\t\t\twill be updated, default 360. If set to 0 or left empty, no refresh will be scheduled.</description>\n+\t\t\t<default>360</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"reconnectionInterval\" type=\"integer\">\n+\t\t\t<label>Reconnection interval</label>\n+\t\t\t<description>The interval (in seconds) at which reconnections should be reattempted in case of a communication\n+\t\t\t\tproblem, default 15. If set to 0 or left empty, no reconnections will be attempted.</description>\n+\t\t\t<default>15</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:velbus:temperatureSensorDevice\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"refresh\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODI4OQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQwODY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTozM1rOHSnMFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMDo0M1rOHUeVuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODQ4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"dimspeed\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"dimspeed\" type=\"integer\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489278485", "createdAt": "2020-09-16T08:59:33Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -27,6 +83,25 @@\n \t\t</parameter>\n \t</config-description>\n \n+\t<config-description uri=\"thing-type:velbus:1channelDeviceWithDimspeed\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH1\" type=\"text\">\n+\t\t\t<label>CH1 name</label>\n+\t\t\t<description>The name of CH1.</description>\n+\t\t\t<default>CH1</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"dimspeed\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMDY1MQ==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491230651", "createdAt": "2020-09-18T23:10:43Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -27,6 +83,25 @@\n \t\t</parameter>\n \t</config-description>\n \n+\t<config-description uri=\"thing-type:velbus:1channelDeviceWithDimspeed\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH1\" type=\"text\">\n+\t\t\t<label>CH1 name</label>\n+\t\t\t<description>The name of CH1.</description>\n+\t\t\t<default>CH1</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"dimspeed\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODQ4NQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQxMDM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODo1OTo1N1rOHSnNHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMDo1N1rOHUeV5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODc0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<parameter name=\"dimspeed\" type=\"integer\">\n          \n          \n            \n            \t\t<parameter name=\"dimspeed\" type=\"integer\" unit=\"s\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489278748", "createdAt": "2020-09-16T08:59:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -77,6 +152,43 @@\n \t\t</parameter>\n \t</config-description>\n \n+\t<config-description uri=\"thing-type:velbus:4channelDeviceWithDimspeed\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH1\" type=\"text\">\n+\t\t\t<label>CH1 name</label>\n+\t\t\t<description>The name of CH1.</description>\n+\t\t\t<default>CH1</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH2\" type=\"text\">\n+\t\t\t<label>CH2 name</label>\n+\t\t\t<description>The name of CH2.</description>\n+\t\t\t<default>CH2</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH3\" type=\"text\">\n+\t\t\t<label>CH3 name</label>\n+\t\t\t<description>The name of CH3.</description>\n+\t\t\t<default>CH3</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH4\" type=\"text\">\n+\t\t\t<label>CH4 name</label>\n+\t\t\t<description>The name of CH4.</description>\n+\t\t\t<default>CH4</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"dimspeed\" type=\"integer\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMDY5Mw==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491230693", "createdAt": "2020-09-18T23:10:57Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -77,6 +152,43 @@\n \t\t</parameter>\n \t</config-description>\n \n+\t<config-description uri=\"thing-type:velbus:4channelDeviceWithDimspeed\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH1\" type=\"text\">\n+\t\t\t<label>CH1 name</label>\n+\t\t\t<description>The name of CH1.</description>\n+\t\t\t<default>CH1</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH2\" type=\"text\">\n+\t\t\t<label>CH2 name</label>\n+\t\t\t<description>The name of CH2.</description>\n+\t\t\t<default>CH2</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH3\" type=\"text\">\n+\t\t\t<label>CH3 name</label>\n+\t\t\t<description>The name of CH3.</description>\n+\t\t\t<default>CH3</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH4\" type=\"text\">\n+\t\t\t<label>CH4 name</label>\n+\t\t\t<description>The name of CH4.</description>\n+\t\t\t<default>CH4</default>\n+\t\t\t<advanced>true</advanced>\n+\t\t</parameter>\n+\t\t<parameter name=\"dimspeed\" type=\"integer\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3ODc0OA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQxMjYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMDozMlrOHSnOlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjo1MDowMVrOHUeDLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>CH1 name</label>\n          \n          \n            \n            \t\t\t<label>CH1 Name</label>\n          \n      \n    \n    \n  \n\nand same for the other 4 channels.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489279126", "createdAt": "2020-09-16T09:00:32Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -77,6 +152,43 @@\n \t\t</parameter>\n \t</config-description>\n \n+\t<config-description uri=\"thing-type:velbus:4channelDeviceWithDimspeed\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH1\" type=\"text\">\n+\t\t\t<label>CH1 name</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyNTkwMg==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491225902", "createdAt": "2020-09-18T22:50:01Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -77,6 +152,43 @@\n \t\t</parameter>\n \t</config-description>\n \n+\t<config-description uri=\"thing-type:velbus:4channelDeviceWithDimspeed\">\n+\t\t<parameter name=\"address\" type=\"text\" required=\"true\">\n+\t\t\t<label>Address</label>\n+\t\t\t<description>The velbus address of the device</description>\n+\t\t</parameter>\n+\t\t<parameter name=\"CH1\" type=\"text\">\n+\t\t\t<label>CH1 name</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3OTEyNg=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQyNjAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMzo1NVrOHSnW7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoyMDoyM1rOHUedWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTI2MA==", "bodyText": "Can you combine the minute and hour channel in one quantity type channel Number:Time?", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489281260", "createdAt": "2020-09-16T09:03:55Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -642,6 +880,84 @@\n \t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"hour\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Hour</label>\n+\t\t<state readOnly=\"false\" min=\"0\" max=\"23\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"minute\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1006}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMjYwMw==", "bodyText": "These channels are used to set an \"alarm clock\", but the modules only support setting the hour and the minutes. Setting of the date and seconds components is not supported. If the minute and hour channels are combined in a Number:Time channel, won't it be strange that the end-user could provide a date and a seconds component, that would be ignored by the Velbus modules?", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491232603", "createdAt": "2020-09-18T23:20:23Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -642,6 +880,84 @@\n \t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"hour\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Hour</label>\n+\t\t<state readOnly=\"false\" min=\"0\" max=\"23\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"minute\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MTI2MA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1006}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQzMjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowNTozMVrOHSna3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMToxMVrOHUeWHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MjI2OA==", "bodyText": "Is this a dimmer or a percentage value? If it's the latter it should be a channel Number:Dimensionless", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489282268", "createdAt": "2020-09-16T09:05:31Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -642,6 +880,84 @@\n \t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"hour\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Hour</label>\n+\t\t<state readOnly=\"false\" min=\"0\" max=\"23\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"minute\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Minute</label>\n+\t\t<state readOnly=\"false\" min=\"0\" max=\"59\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"counter\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Counter</label>\n+\t\t<state readOnly=\"false\" min=\"0\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"temperatureSetpoint\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature Setpoint</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"false\" min=\"-55\" max=\"63.5\" step=\"0.5\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"voltage\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage</label>\n+\t\t<description>Currently measured voltage</description>\n+\t\t<category>Voltage</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current</label>\n+\t\t<description>Currently measured current</description>\n+\t\t<category>Current</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"percentage\">\n+\t\t<item-type>Dimmer</item-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1042}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMDc1MA==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491230750", "createdAt": "2020-09-18T23:11:11Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -642,6 +880,84 @@\n \t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n \t\t</state>\n \t</channel-type>\n+\t<channel-type id=\"hour\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Hour</label>\n+\t\t<state readOnly=\"false\" min=\"0\" max=\"23\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"minute\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Minute</label>\n+\t\t<state readOnly=\"false\" min=\"0\" max=\"59\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"counter\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Counter</label>\n+\t\t<state readOnly=\"false\" min=\"0\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"temperatureSetpoint\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature Setpoint</label>\n+\t\t<category>Temperature</category>\n+\t\t<state readOnly=\"false\" min=\"-55\" max=\"63.5\" step=\"0.5\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"voltage\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage</label>\n+\t\t<description>Currently measured voltage</description>\n+\t\t<category>Voltage</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"current\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current</label>\n+\t\t<description>Currently measured current</description>\n+\t\t<category>Current</category>\n+\t\t<state readOnly=\"true\" pattern=\"%.1f %unit%\">\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"percentage\">\n+\t\t<item-type>Dimmer</item-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MjI2OA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1042}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQzNTExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowNjoxNFrOHSncjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMTozNVrOHUeWYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MjcwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Input Module with Temperature sensor</label>\n          \n          \n            \n            \t\t<label>Input with Temperature Sensor</label>\n          \n      \n    \n    \n  \n\nThe others don't have module in the label either.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489282701", "createdAt": "2020-09-16T09:06:14Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1096}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMDgxNw==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491230817", "createdAt": "2020-09-18T23:11:35Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MjcwMQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1096}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQ0MjY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowODoxMFrOHSnhSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMTo0NlrOHUeWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzkxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Input Module with Temperature sensor</label>\n          \n          \n            \n            \t\t<label>Input with Temperature Sensor</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489283912", "createdAt": "2020-09-16T09:08:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMDg2OQ==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491230869", "createdAt": "2020-09-18T23:11:46Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MzkxMg=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQ0MzY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowODoyN1rOHSnh5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMjo1M1rOHUeXiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NDA3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Input Module with Temperature sensor</label>\n          \n          \n            \n            \t\t<label>Input with Temperature/Light Sensor</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489284070", "createdAt": "2020-09-16T09:08:27Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureAndLightSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMTExMw==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491231113", "createdAt": "2020-09-18T23:12:53Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureAndLightSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NDA3MA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQ0NjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowOToxMFrOHSnjnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxMzoxMlrOHUeXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NDUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Input Module with Temperature sensor</label>\n          \n          \n            \n            \t\t<label>Input with Temperature Sensor</label>", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489284511", "createdAt": "2020-09-16T09:09:10Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureAndLightSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels, a temperature sensor and a light sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"LIGHT\" typeId=\"illuminance\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"33channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMTE1Nw==", "bodyText": "Modified in commit 5ca761c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491231157", "createdAt": "2020-09-18T23:13:12Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureAndLightSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels, a temperature sensor and a light sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"LIGHT\" typeId=\"illuminance\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"33channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NDUxMQ=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQ1OTcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToxMjoyMlrOHSnrnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNjozMVrOHUdicg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NjU1Nw==", "bodyText": "Since all new or updated channels can you make them camel case. There is no required naming convention for channels, but we strongly suggest to use camel case or a variant, but no uppercase channels.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<channel id=\"CURRENTTEMPERATURESETPOINT\" typeId=\"temperatureSetpoint\">\n          \n          \n            \n            \t\t\t<channel id=\"currentTemperatureSetpoint\" typeId=\"temperatureSetpoint\">", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489286557", "createdAt": "2020-09-16T09:12:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureAndLightSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels, a temperature sensor and a light sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"LIGHT\" typeId=\"illuminance\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"33channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 32 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH13\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH17\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH18\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH19\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH20\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH21\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH22\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH23\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH24\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH25\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH26\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH27\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH28\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH29\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH30\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH31\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH32\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH33\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"1channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 1 feedback channel.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"2channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 2 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 4 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 6 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"32channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 32 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH13\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH17\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH18\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH19\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH20\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH21\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH22\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH23\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH24\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH25\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH26\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH27\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH28\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH29\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH30\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH31\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH32\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"oledDisplay\">\n+\t\t<label>O-LED Display</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"MEMO\" typeId=\"text\">\n+\t\t\t\t<label>Memo</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"SCREENSAVER\" typeId=\"switch\">\n+\t\t\t\t<label>Screensaver</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"thermostat\">\n+\t\t<label>Thermostat</label>\n+\t\t<description>This is a thermostat that supports heating/cooling and comfort/day/night/safe modes.</description>\n+\t\t<category>Temperatures</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"CURRENTTEMPERATURESETPOINT\" typeId=\"temperatureSetpoint\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1372}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzUyMg==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491217522", "createdAt": "2020-09-18T22:16:31Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -653,4 +969,401 @@\n \t\t\t</options>\n \t\t</event>\n \t</channel-type>\n+\t<channel-type id=\"thermostat-trigger-channel\">\n+\t\t<kind>trigger</kind>\n+\t\t<label>Thermostat Trigger Channel</label>\n+\t\t<event>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"PRESSED\">pressed</option>\n+\t\t\t\t<option value=\"RELEASED\">released</option>\n+\t\t\t</options>\n+\t\t</event>\n+\t</channel-type>\n+\t<channel-group-type id=\"1channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogInputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH9RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH10RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH11RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"text\"/>\n+\t\t\t<channel id=\"CH12RAW\" typeId=\"voltage\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"text\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelAnalogOutputModule\">\n+\t\t<label>Analog Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic analog module with 4 output channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH13\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"percentage\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"percentage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelCounterModule\">\n+\t\t<label>Counters</label>\n+\t\t<description>This is a generic module with 4 counter channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"COUNTER1\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER1_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER2_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER3_CURRENT\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4\" typeId=\"counter\"/>\n+\t\t\t<channel id=\"COUNTER4_CURRENT\" typeId=\"counter\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 6 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"7channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>This is a generic module with 7 input channels.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelInputModule\">\n+\t\t<label>Input</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 input channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"9channelInputModuleWithTemperatureAndLightSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 8 input channels, a temperature sensor and a light sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"LIGHT\" typeId=\"illuminance\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"33channelInputModuleWithTemperatureSensor\">\n+\t\t<label>Input Module with Temperature sensor</label>\n+\t\t<description>This is a generic module with 32 input channels and a temperature sensor.</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH13\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH17\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH18\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH19\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH20\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH21\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH22\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH23\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH24\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH25\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH26\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH27\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH28\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH29\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH30\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH31\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH32\" typeId=\"trigger-channel\"/>\n+\t\t\t<channel id=\"CH33\" typeId=\"temperature\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"1channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 1 feedback channel.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"2channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 2 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"4channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 4 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"6channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 6 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"8channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 8 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"32channelFeedbackModule\">\n+\t\t<label>Feedback</label>\n+\t\t<description>\n+\t\t\tThis is a generic module with 32 feedback channels.\n+\t\t</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"CH1\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH2\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH3\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH4\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH5\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH6\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH7\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH8\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH9\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH10\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH11\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH12\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH13\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH14\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH15\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH16\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH17\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH18\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH19\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH20\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH21\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH22\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH23\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH24\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH25\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH26\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH27\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH28\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH29\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH30\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH31\" typeId=\"ledFeedback\"/>\n+\t\t\t<channel id=\"CH32\" typeId=\"ledFeedback\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"oledDisplay\">\n+\t\t<label>O-LED Display</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"MEMO\" typeId=\"text\">\n+\t\t\t\t<label>Memo</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"SCREENSAVER\" typeId=\"switch\">\n+\t\t\t\t<label>Screensaver</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\t<channel-group-type id=\"thermostat\">\n+\t\t<label>Thermostat</label>\n+\t\t<description>This is a thermostat that supports heating/cooling and comfort/day/night/safe modes.</description>\n+\t\t<category>Temperatures</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"CURRENTTEMPERATURESETPOINT\" typeId=\"temperatureSetpoint\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NjU1Nw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 1372}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTUxNzU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorWithAlarmClockHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToyNTo1MVrOHSoOUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNzoyNFrOHUdjbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NTQ0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean enabled = (command == OnOffType.ON) ? true : false;\n          \n          \n            \n                            boolean enabled = command == OnOffType.ON;", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489295442", "createdAt": "2020-09-16T09:25:51Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorWithAlarmClockHandler.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarm;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarmConfiguration;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetLocalClockAlarmPacket;\n+\n+/**\n+ * The {@link VelbusSensorWithAlarmClockHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSensorWithAlarmClockHandler extends VelbusSensorHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB2PBN,\n+            THING_TYPE_VMB6PBN, THING_TYPE_VMB8PBU, THING_TYPE_VMBPIRC, THING_TYPE_VMBPIRM, THING_TYPE_VMBRFR8S));\n+    private static final HashMap<ThingTypeUID, Integer> ALARM_CONFIGURATION_MEMORY_ADDRESSES = new HashMap<ThingTypeUID, Integer>();\n+\n+    static {\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB2PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB4AN, 0x0046);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB6PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB7IN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB8PBU, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL1, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL2, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL4, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBELO, 0x0593);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRC, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRM, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRO, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBMETEO, 0x0083);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPO, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD_2, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBRFR8S, 0x0093);\n+    }\n+\n+    private static final byte ALARM_CONFIGURATION_MEMORY_SIZE = 0x09;\n+    private static final byte ALARM_1_ENABLED_MASK = 0x01;\n+    private static final byte ALARM_1_TYPE_MASK = 0x02;\n+    private static final byte ALARM_2_ENABLED_MASK = 0x04;\n+    private static final byte ALARM_2_TYPE_MASK = 0x08;\n+\n+    private static final StringType ALARM_TYPE_LOCAL = new StringType(\"LOCAL\");\n+    private static final StringType ALARM_TYPE_GLOBAL = new StringType(\"GLOBAL\");\n+\n+    private final ChannelUID clockAlarm1Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1ENABLED\");\n+    private final ChannelUID clockAlarm1Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1TYPE\");\n+    private final ChannelUID clockAlarm1WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm1WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm1BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm1BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEMINUTE\");\n+    private final ChannelUID clockAlarm2Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2ENABLED\");\n+    private final ChannelUID clockAlarm2Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2TYPE\");\n+    private final ChannelUID clockAlarm2WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm2WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm2BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm2BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEMINUTE\");\n+\n+    private int clockAlarmConfigurationMemoryAddress;\n+    private VelbusClockAlarmConfiguration alarmClockConfiguration = new VelbusClockAlarmConfiguration();\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing) {\n+        this(thing, 0);\n+    }\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing, int numberOfSubAddresses) {\n+        super(thing, numberOfSubAddresses);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        if (ALARM_CONFIGURATION_MEMORY_ADDRESSES.containsKey(thing.getThingTypeUID())) {\n+            this.clockAlarmConfigurationMemoryAddress = ALARM_CONFIGURATION_MEMORY_ADDRESSES\n+                    .get(thing.getThingTypeUID());\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        if (isAlarmClockChannel(channelUID) && command instanceof RefreshType) {\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 0);\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 4);\n+            sendReadMemoryPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 8);\n+        } else if (isAlarmClockChannel(channelUID)) {\n+            byte alarmNumber = determineAlarmNumber(channelUID);\n+            VelbusClockAlarm alarmClock = alarmClockConfiguration.getAlarmClock(alarmNumber);\n+\n+            if ((channelUID.equals(clockAlarm1Enabled) || channelUID.equals(clockAlarm2Enabled))\n+                    && command instanceof OnOffType) {\n+                boolean enabled = (command == OnOffType.ON) ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzc3Mw==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491217773", "createdAt": "2020-09-18T22:17:24Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorWithAlarmClockHandler.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarm;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarmConfiguration;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetLocalClockAlarmPacket;\n+\n+/**\n+ * The {@link VelbusSensorWithAlarmClockHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSensorWithAlarmClockHandler extends VelbusSensorHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB2PBN,\n+            THING_TYPE_VMB6PBN, THING_TYPE_VMB8PBU, THING_TYPE_VMBPIRC, THING_TYPE_VMBPIRM, THING_TYPE_VMBRFR8S));\n+    private static final HashMap<ThingTypeUID, Integer> ALARM_CONFIGURATION_MEMORY_ADDRESSES = new HashMap<ThingTypeUID, Integer>();\n+\n+    static {\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB2PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB4AN, 0x0046);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB6PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB7IN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB8PBU, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL1, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL2, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL4, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBELO, 0x0593);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRC, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRM, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRO, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBMETEO, 0x0083);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPO, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD_2, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBRFR8S, 0x0093);\n+    }\n+\n+    private static final byte ALARM_CONFIGURATION_MEMORY_SIZE = 0x09;\n+    private static final byte ALARM_1_ENABLED_MASK = 0x01;\n+    private static final byte ALARM_1_TYPE_MASK = 0x02;\n+    private static final byte ALARM_2_ENABLED_MASK = 0x04;\n+    private static final byte ALARM_2_TYPE_MASK = 0x08;\n+\n+    private static final StringType ALARM_TYPE_LOCAL = new StringType(\"LOCAL\");\n+    private static final StringType ALARM_TYPE_GLOBAL = new StringType(\"GLOBAL\");\n+\n+    private final ChannelUID clockAlarm1Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1ENABLED\");\n+    private final ChannelUID clockAlarm1Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1TYPE\");\n+    private final ChannelUID clockAlarm1WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm1WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm1BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm1BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEMINUTE\");\n+    private final ChannelUID clockAlarm2Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2ENABLED\");\n+    private final ChannelUID clockAlarm2Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2TYPE\");\n+    private final ChannelUID clockAlarm2WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm2WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm2BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm2BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEMINUTE\");\n+\n+    private int clockAlarmConfigurationMemoryAddress;\n+    private VelbusClockAlarmConfiguration alarmClockConfiguration = new VelbusClockAlarmConfiguration();\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing) {\n+        this(thing, 0);\n+    }\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing, int numberOfSubAddresses) {\n+        super(thing, numberOfSubAddresses);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        if (ALARM_CONFIGURATION_MEMORY_ADDRESSES.containsKey(thing.getThingTypeUID())) {\n+            this.clockAlarmConfigurationMemoryAddress = ALARM_CONFIGURATION_MEMORY_ADDRESSES\n+                    .get(thing.getThingTypeUID());\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        if (isAlarmClockChannel(channelUID) && command instanceof RefreshType) {\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 0);\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 4);\n+            sendReadMemoryPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 8);\n+        } else if (isAlarmClockChannel(channelUID)) {\n+            byte alarmNumber = determineAlarmNumber(channelUID);\n+            VelbusClockAlarm alarmClock = alarmClockConfiguration.getAlarmClock(alarmNumber);\n+\n+            if ((channelUID.equals(clockAlarm1Enabled) || channelUID.equals(clockAlarm2Enabled))\n+                    && command instanceof OnOffType) {\n+                boolean enabled = (command == OnOffType.ON) ? true : false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NTQ0Mg=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTUxODg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorWithAlarmClockHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToyNjowOFrOHSoPFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxODowM1rOHUdkLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NTYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isLocal = (((StringType) command).equals(ALARM_TYPE_LOCAL)) ? true : false;\n          \n          \n            \n                            boolean isLocal = ((StringType) command).equals(ALARM_TYPE_LOCAL);", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489295637", "createdAt": "2020-09-16T09:26:08Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorWithAlarmClockHandler.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarm;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarmConfiguration;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetLocalClockAlarmPacket;\n+\n+/**\n+ * The {@link VelbusSensorWithAlarmClockHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSensorWithAlarmClockHandler extends VelbusSensorHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB2PBN,\n+            THING_TYPE_VMB6PBN, THING_TYPE_VMB8PBU, THING_TYPE_VMBPIRC, THING_TYPE_VMBPIRM, THING_TYPE_VMBRFR8S));\n+    private static final HashMap<ThingTypeUID, Integer> ALARM_CONFIGURATION_MEMORY_ADDRESSES = new HashMap<ThingTypeUID, Integer>();\n+\n+    static {\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB2PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB4AN, 0x0046);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB6PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB7IN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB8PBU, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL1, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL2, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL4, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBELO, 0x0593);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRC, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRM, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRO, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBMETEO, 0x0083);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPO, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD_2, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBRFR8S, 0x0093);\n+    }\n+\n+    private static final byte ALARM_CONFIGURATION_MEMORY_SIZE = 0x09;\n+    private static final byte ALARM_1_ENABLED_MASK = 0x01;\n+    private static final byte ALARM_1_TYPE_MASK = 0x02;\n+    private static final byte ALARM_2_ENABLED_MASK = 0x04;\n+    private static final byte ALARM_2_TYPE_MASK = 0x08;\n+\n+    private static final StringType ALARM_TYPE_LOCAL = new StringType(\"LOCAL\");\n+    private static final StringType ALARM_TYPE_GLOBAL = new StringType(\"GLOBAL\");\n+\n+    private final ChannelUID clockAlarm1Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1ENABLED\");\n+    private final ChannelUID clockAlarm1Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1TYPE\");\n+    private final ChannelUID clockAlarm1WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm1WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm1BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm1BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEMINUTE\");\n+    private final ChannelUID clockAlarm2Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2ENABLED\");\n+    private final ChannelUID clockAlarm2Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2TYPE\");\n+    private final ChannelUID clockAlarm2WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm2WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm2BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm2BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEMINUTE\");\n+\n+    private int clockAlarmConfigurationMemoryAddress;\n+    private VelbusClockAlarmConfiguration alarmClockConfiguration = new VelbusClockAlarmConfiguration();\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing) {\n+        this(thing, 0);\n+    }\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing, int numberOfSubAddresses) {\n+        super(thing, numberOfSubAddresses);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        if (ALARM_CONFIGURATION_MEMORY_ADDRESSES.containsKey(thing.getThingTypeUID())) {\n+            this.clockAlarmConfigurationMemoryAddress = ALARM_CONFIGURATION_MEMORY_ADDRESSES\n+                    .get(thing.getThingTypeUID());\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        if (isAlarmClockChannel(channelUID) && command instanceof RefreshType) {\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 0);\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 4);\n+            sendReadMemoryPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 8);\n+        } else if (isAlarmClockChannel(channelUID)) {\n+            byte alarmNumber = determineAlarmNumber(channelUID);\n+            VelbusClockAlarm alarmClock = alarmClockConfiguration.getAlarmClock(alarmNumber);\n+\n+            if ((channelUID.equals(clockAlarm1Enabled) || channelUID.equals(clockAlarm2Enabled))\n+                    && command instanceof OnOffType) {\n+                boolean enabled = (command == OnOffType.ON) ? true : false;\n+                alarmClock.setEnabled(enabled);\n+            } else if ((channelUID.equals(clockAlarm1Type) || channelUID.equals(clockAlarm2Type))\n+                    && command instanceof StringType) {\n+                boolean isLocal = (((StringType) command).equals(ALARM_TYPE_LOCAL)) ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzk2Nw==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491217967", "createdAt": "2020-09-18T22:18:03Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorWithAlarmClockHandler.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarm;\n+import org.openhab.binding.velbus.internal.VelbusClockAlarmConfiguration;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetLocalClockAlarmPacket;\n+\n+/**\n+ * The {@link VelbusSensorWithAlarmClockHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSensorWithAlarmClockHandler extends VelbusSensorHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB2PBN,\n+            THING_TYPE_VMB6PBN, THING_TYPE_VMB8PBU, THING_TYPE_VMBPIRC, THING_TYPE_VMBPIRM, THING_TYPE_VMBRFR8S));\n+    private static final HashMap<ThingTypeUID, Integer> ALARM_CONFIGURATION_MEMORY_ADDRESSES = new HashMap<ThingTypeUID, Integer>();\n+\n+    static {\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB2PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB4AN, 0x0046);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB6PBN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB7IN, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMB8PBU, 0x0093);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL1, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL2, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBEL4, 0x0357);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBELO, 0x0593);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRC, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRM, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBPIRO, 0x0031);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBMETEO, 0x0083);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP1_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP2_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGP4PIR_2, 0x00A4);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPO, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBGPOD_2, 0x0284);\n+        ALARM_CONFIGURATION_MEMORY_ADDRESSES.put(THING_TYPE_VMBRFR8S, 0x0093);\n+    }\n+\n+    private static final byte ALARM_CONFIGURATION_MEMORY_SIZE = 0x09;\n+    private static final byte ALARM_1_ENABLED_MASK = 0x01;\n+    private static final byte ALARM_1_TYPE_MASK = 0x02;\n+    private static final byte ALARM_2_ENABLED_MASK = 0x04;\n+    private static final byte ALARM_2_TYPE_MASK = 0x08;\n+\n+    private static final StringType ALARM_TYPE_LOCAL = new StringType(\"LOCAL\");\n+    private static final StringType ALARM_TYPE_GLOBAL = new StringType(\"GLOBAL\");\n+\n+    private final ChannelUID clockAlarm1Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1ENABLED\");\n+    private final ChannelUID clockAlarm1Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1TYPE\");\n+    private final ChannelUID clockAlarm1WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM1WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm1WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm1BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm1BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM1BEDTIMEMINUTE\");\n+    private final ChannelUID clockAlarm2Enabled = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2ENABLED\");\n+    private final ChannelUID clockAlarm2Type = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2TYPE\");\n+    private final ChannelUID clockAlarm2WakeupHour = new ChannelUID(thing.getUID(), \"clockAlarm#CLOCKALARM2WAKEUPHOUR\");\n+    private final ChannelUID clockAlarm2WakeupMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2WAKEUPMINUTE\");\n+    private final ChannelUID clockAlarm2BedtimeHour = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEHOUR\");\n+    private final ChannelUID clockAlarm2BedtimeMinute = new ChannelUID(thing.getUID(),\n+            \"clockAlarm#CLOCKALARM2BEDTIMEMINUTE\");\n+\n+    private int clockAlarmConfigurationMemoryAddress;\n+    private VelbusClockAlarmConfiguration alarmClockConfiguration = new VelbusClockAlarmConfiguration();\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing) {\n+        this(thing, 0);\n+    }\n+\n+    public VelbusSensorWithAlarmClockHandler(Thing thing, int numberOfSubAddresses) {\n+        super(thing, numberOfSubAddresses);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+\n+        if (ALARM_CONFIGURATION_MEMORY_ADDRESSES.containsKey(thing.getThingTypeUID())) {\n+            this.clockAlarmConfigurationMemoryAddress = ALARM_CONFIGURATION_MEMORY_ADDRESSES\n+                    .get(thing.getThingTypeUID());\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        if (isAlarmClockChannel(channelUID) && command instanceof RefreshType) {\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 0);\n+            sendReadMemoryBlockPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 4);\n+            sendReadMemoryPacket(velbusBridgeHandler, this.clockAlarmConfigurationMemoryAddress + 8);\n+        } else if (isAlarmClockChannel(channelUID)) {\n+            byte alarmNumber = determineAlarmNumber(channelUID);\n+            VelbusClockAlarm alarmClock = alarmClockConfiguration.getAlarmClock(alarmNumber);\n+\n+            if ((channelUID.equals(clockAlarm1Enabled) || channelUID.equals(clockAlarm2Enabled))\n+                    && command instanceof OnOffType) {\n+                boolean enabled = (command == OnOffType.ON) ? true : false;\n+                alarmClock.setEnabled(enabled);\n+            } else if ((channelUID.equals(clockAlarm1Type) || channelUID.equals(clockAlarm2Type))\n+                    && command instanceof StringType) {\n+                boolean isLocal = (((StringType) command).equals(ALARM_TYPE_LOCAL)) ? true : false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NTYzNw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTUyNTk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToyNzo1N1rOHSoTuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxOTowNVrOHUdlCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NjgyNw==", "bodyText": "Just check the group id.", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489296827", "createdAt": "2020-09-16T09:27:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorHandler.java", "diffHunk": "@@ -32,21 +37,62 @@\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n+@NonNullByDefault\n public class VelbusSensorHandler extends VelbusThingHandler {\n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n-            Arrays.asList(THING_TYPE_VMB2PBN, THING_TYPE_VMB6IN, THING_TYPE_VMB6PBN, THING_TYPE_VMB7IN,\n-                    THING_TYPE_VMB8IR, THING_TYPE_VMB8PB, THING_TYPE_VMB8PBU, THING_TYPE_VMBPIRC, THING_TYPE_VMBPIRM));\n+            Arrays.asList(THING_TYPE_VMB6IN, THING_TYPE_VMB8IR, THING_TYPE_VMB8PB));\n+\n+    private static final StringType SET_LED = new StringType(\"SET_LED\");\n+    private static final StringType SLOW_BLINK_LED = new StringType(\"SLOW_BLINK_LED\");\n+    private static final StringType FAST_BLINK_LED = new StringType(\"FAST_BLINK_LED\");\n+    private static final StringType VERY_FAST_BLINK_LED = new StringType(\"VERY_FAST_BLINK_LED\");\n+    private static final StringType CLEAR_LED = new StringType(\"CLEAR_LED\");\n \n     public VelbusSensorHandler(Thing thing) {\n         this(thing, 0);\n     }\n \n     public VelbusSensorHandler(Thing thing, int numberOfSubAddresses) {\n-        super(thing, numberOfSubAddresses, null);\n+        super(thing, numberOfSubAddresses);\n     }\n \n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        if (isFeedbackChannel(channelUID) && command instanceof StringType) {\n+            byte commandByte;\n+\n+            StringType stringTypeCommand = (StringType) command;\n+            if (stringTypeCommand.equals(SET_LED)) {\n+                commandByte = COMMAND_SET_LED;\n+            } else if (stringTypeCommand.equals(SLOW_BLINK_LED)) {\n+                commandByte = COMMAND_SLOW_BLINK_LED;\n+            } else if (stringTypeCommand.equals(FAST_BLINK_LED)) {\n+                commandByte = COMMAND_FAST_BLINK_LED;\n+            } else if (stringTypeCommand.equals(VERY_FAST_BLINK_LED)) {\n+                commandByte = COMMAND_VERY_FAST_BLINK_LED;\n+            } else if (stringTypeCommand.equals(CLEAR_LED)) {\n+                commandByte = COMMAND_CLEAR_LED;\n+            } else {\n+                throw new UnsupportedOperationException(\n+                        \"The command '\" + command + \"' is not supported on channel '\" + channelUID + \"'.\");\n+            }\n+\n+            VelbusFeedbackLEDPacket packet = new VelbusFeedbackLEDPacket(\n+                    getModuleAddress().getChannelIdentifier(channelUID), commandByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    private boolean isFeedbackChannel(ChannelUID channelUID) {\n+        return channelUID.getId().startsWith(\"feedback#\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxODE4Ng==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491218186", "createdAt": "2020-09-18T22:19:05Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusSensorHandler.java", "diffHunk": "@@ -32,21 +37,62 @@\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n+@NonNullByDefault\n public class VelbusSensorHandler extends VelbusThingHandler {\n     public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(\n-            Arrays.asList(THING_TYPE_VMB2PBN, THING_TYPE_VMB6IN, THING_TYPE_VMB6PBN, THING_TYPE_VMB7IN,\n-                    THING_TYPE_VMB8IR, THING_TYPE_VMB8PB, THING_TYPE_VMB8PBU, THING_TYPE_VMBPIRC, THING_TYPE_VMBPIRM));\n+            Arrays.asList(THING_TYPE_VMB6IN, THING_TYPE_VMB8IR, THING_TYPE_VMB8PB));\n+\n+    private static final StringType SET_LED = new StringType(\"SET_LED\");\n+    private static final StringType SLOW_BLINK_LED = new StringType(\"SLOW_BLINK_LED\");\n+    private static final StringType FAST_BLINK_LED = new StringType(\"FAST_BLINK_LED\");\n+    private static final StringType VERY_FAST_BLINK_LED = new StringType(\"VERY_FAST_BLINK_LED\");\n+    private static final StringType CLEAR_LED = new StringType(\"CLEAR_LED\");\n \n     public VelbusSensorHandler(Thing thing) {\n         this(thing, 0);\n     }\n \n     public VelbusSensorHandler(Thing thing, int numberOfSubAddresses) {\n-        super(thing, numberOfSubAddresses, null);\n+        super(thing, numberOfSubAddresses);\n     }\n \n     @Override\n     public void handleCommand(ChannelUID channelUID, Command command) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        if (isFeedbackChannel(channelUID) && command instanceof StringType) {\n+            byte commandByte;\n+\n+            StringType stringTypeCommand = (StringType) command;\n+            if (stringTypeCommand.equals(SET_LED)) {\n+                commandByte = COMMAND_SET_LED;\n+            } else if (stringTypeCommand.equals(SLOW_BLINK_LED)) {\n+                commandByte = COMMAND_SLOW_BLINK_LED;\n+            } else if (stringTypeCommand.equals(FAST_BLINK_LED)) {\n+                commandByte = COMMAND_FAST_BLINK_LED;\n+            } else if (stringTypeCommand.equals(VERY_FAST_BLINK_LED)) {\n+                commandByte = COMMAND_VERY_FAST_BLINK_LED;\n+            } else if (stringTypeCommand.equals(CLEAR_LED)) {\n+                commandByte = COMMAND_CLEAR_LED;\n+            } else {\n+                throw new UnsupportedOperationException(\n+                        \"The command '\" + command + \"' is not supported on channel '\" + channelUID + \"'.\");\n+            }\n+\n+            VelbusFeedbackLEDPacket packet = new VelbusFeedbackLEDPacket(\n+                    getModuleAddress().getChannelIdentifier(channelUID), commandByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    private boolean isFeedbackChannel(ChannelUID channelUID) {\n+        return channelUID.getId().startsWith(\"feedback#\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NjgyNw=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTUzNTM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTozMDoxNVrOHSoZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxOTo0MFrOHUdltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5ODMxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected Map<Byte, VelbusPacketListener> packetListeners = new HashMap<Byte, VelbusPacketListener>();\n          \n          \n            \n                protected Map<Byte, VelbusPacketListener> packetListeners = new HashMap<>();", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r489298318", "createdAt": "2020-09-16T09:30:15Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -12,101 +12,134 @@\n  */\n package org.openhab.binding.velbus.internal.handler;\n \n-import static org.openhab.binding.velbus.internal.VelbusBindingConstants.PORT;\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.TooManyListenersException;\n+import java.util.TimeZone;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.thing.Bridge;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n import org.eclipse.smarthome.core.types.Command;\n-import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n-import org.eclipse.smarthome.io.transport.serial.SerialPort;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n-import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n import org.openhab.binding.velbus.internal.VelbusPacketInputStream;\n import org.openhab.binding.velbus.internal.VelbusPacketListener;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDatePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDaylightSavingsStatusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetRealtimeClockPacket;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * {@link VelbusBridgeHandler} is the handler for a Velbus Serial-interface and connects it to\n+ * {@link VelbusBridgeHandler} is an abstract handler for a Velbus interface and connects it to\n  * the framework.\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n-public class VelbusBridgeHandler extends BaseBridgeHandler implements SerialPortEventListener {\n+@NonNullByDefault\n+public abstract class VelbusBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n \n-    private Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n-\n-    private static final int BAUD = 9600;\n-    private SerialPort serialPort;\n-    private final SerialPortManager serialPortManager;\n-    private OutputStream outputStream;\n-    private VelbusPacketInputStream inputStream;\n     private long lastPacketTimeMillis;\n \n-    private VelbusPacketListener defaultPacketListener;\n-    private final Map<Byte, VelbusPacketListener> packetListeners = new HashMap<>();\n+    protected @Nullable VelbusPacketListener defaultPacketListener;\n+    protected Map<Byte, VelbusPacketListener> packetListeners = new HashMap<Byte, VelbusPacketListener>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxODM1OA==", "bodyText": "Modified in commit 780323c", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491218358", "createdAt": "2020-09-18T22:19:40Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusBridgeHandler.java", "diffHunk": "@@ -12,101 +12,134 @@\n  */\n package org.openhab.binding.velbus.internal.handler;\n \n-import static org.openhab.binding.velbus.internal.VelbusBindingConstants.PORT;\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n+import java.math.BigDecimal;\n+import java.time.Instant;\n+import java.time.ZonedDateTime;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.TooManyListenersException;\n+import java.util.TimeZone;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.concurrent.TimeUnit;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n import org.eclipse.smarthome.core.thing.Bridge;\n import org.eclipse.smarthome.core.thing.ChannelUID;\n import org.eclipse.smarthome.core.thing.ThingStatus;\n import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n import org.eclipse.smarthome.core.types.Command;\n-import org.eclipse.smarthome.io.transport.serial.PortInUseException;\n-import org.eclipse.smarthome.io.transport.serial.SerialPort;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEvent;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortEventListener;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortIdentifier;\n-import org.eclipse.smarthome.io.transport.serial.SerialPortManager;\n-import org.eclipse.smarthome.io.transport.serial.UnsupportedCommOperationException;\n import org.openhab.binding.velbus.internal.VelbusPacketInputStream;\n import org.openhab.binding.velbus.internal.VelbusPacketListener;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDatePacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetDaylightSavingsStatusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSetRealtimeClockPacket;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- * {@link VelbusBridgeHandler} is the handler for a Velbus Serial-interface and connects it to\n+ * {@link VelbusBridgeHandler} is an abstract handler for a Velbus interface and connects it to\n  * the framework.\n  *\n  * @author Cedric Boon - Initial contribution\n  */\n-public class VelbusBridgeHandler extends BaseBridgeHandler implements SerialPortEventListener {\n+@NonNullByDefault\n+public abstract class VelbusBridgeHandler extends BaseBridgeHandler {\n+    private final Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n \n-    private Logger logger = LoggerFactory.getLogger(VelbusBridgeHandler.class);\n-\n-    private static final int BAUD = 9600;\n-    private SerialPort serialPort;\n-    private final SerialPortManager serialPortManager;\n-    private OutputStream outputStream;\n-    private VelbusPacketInputStream inputStream;\n     private long lastPacketTimeMillis;\n \n-    private VelbusPacketListener defaultPacketListener;\n-    private final Map<Byte, VelbusPacketListener> packetListeners = new HashMap<>();\n+    protected @Nullable VelbusPacketListener defaultPacketListener;\n+    protected Map<Byte, VelbusPacketListener> packetListeners = new HashMap<Byte, VelbusPacketListener>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5ODMxOA=="}, "originalCommit": {"oid": "798f00cf377672939117416ae770b50130ec6a75"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwMDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusBridgeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowMjo0MFrOHUhhgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxNjoxOFrOHUkK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MjgxOQ==", "bodyText": "Better to use primitives:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) Integer timeUpdateInterval;\n          \n          \n            \n                public @NonNullByDefault({}) Integer reconnectionInterval;\n          \n          \n            \n                public int timeUpdateInterval;\n          \n          \n            \n                public int reconnectionInterval;", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491282819", "createdAt": "2020-09-19T06:02:40Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusBridgeConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusBridgeConfig} class represents the configuration of a Velbus Bridge.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusBridgeConfig {\n+    public @NonNullByDefault({}) Integer timeUpdateInterval;\n+    public @NonNullByDefault({}) Integer reconnectionInterval;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNjE5NA==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491326194", "createdAt": "2020-09-19T08:16:18Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusBridgeConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusBridgeConfig} class represents the configuration of a Velbus Bridge.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusBridgeConfig {\n+    public @NonNullByDefault({}) Integer timeUpdateInterval;\n+    public @NonNullByDefault({}) Integer reconnectionInterval;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MjgxOQ=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNDE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusNetworkBridgeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNDo0MFrOHUhjzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxNjozOFrOHUkLSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzQwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) String address;\n          \n          \n            \n                public @NonNullByDefault({}) Integer port;\n          \n          \n            \n                public String address = \"\";\n          \n          \n            \n                public int port;", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491283404", "createdAt": "2020-09-19T06:04:40Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusNetworkBridgeConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusNetworkBridgeConfig} class represents the configuration of a Velbus Network Bridge.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeConfig {\n+    public @NonNullByDefault({}) String address;\n+    public @NonNullByDefault({}) Integer port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNjI4Mg==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491326282", "createdAt": "2020-09-19T08:16:38Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusNetworkBridgeConfig.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusNetworkBridgeConfig} class represents the configuration of a Velbus Network Bridge.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusNetworkBridgeConfig {\n+    public @NonNullByDefault({}) String address;\n+    public @NonNullByDefault({}) Integer port;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzQwNA=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNDY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusDimmerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNDo1OVrOHUhkDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxNjo1OFrOHUkL0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzQ2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) Integer dimspeed;\n          \n          \n            \n            }\n          \n          \n            \n                public int dimspeed;\n          \n          \n            \n            }", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491283468", "createdAt": "2020-09-19T06:04:59Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusDimmerConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusDimmerConfig} class represents the configuration of a Velbus dimmer.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusDimmerConfig {\n+    public @NonNullByDefault({}) Integer dimspeed;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNjQxOQ==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491326419", "createdAt": "2020-09-19T08:16:58Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusDimmerConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusDimmerConfig} class represents the configuration of a Velbus dimmer.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusDimmerConfig {\n+    public @NonNullByDefault({}) Integer dimspeed;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzQ2OA=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusSensorConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNToyMlrOHUhkhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxNzozNVrOHUkMpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) Integer refresh;\n          \n          \n            \n                public int refresh;", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491283589", "createdAt": "2020-09-19T06:05:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusSensorConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusSensorConfig} class represents the configuration of a Velbus Temperature Sensor.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSensorConfig {\n+    public @NonNullByDefault({}) Integer refresh;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNjYyOQ==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491326629", "createdAt": "2020-09-19T08:17:35Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusSensorConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusSensorConfig} class represents the configuration of a Velbus Temperature Sensor.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSensorConfig {\n+    public @NonNullByDefault({}) Integer refresh;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4MzU4OQ=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNjYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusSerialBridgeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNTo1N1rOHUhlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxODo0OFrOHUkOZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzc3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) String port;\n          \n          \n            \n                public String port = \"\";", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491283777", "createdAt": "2020-09-19T06:05:57Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusSerialBridgeConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusSerialBridgeConfig} class represents the configuration of a Velbus Serial Bridge.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSerialBridgeConfig {\n+    public @NonNullByDefault({}) String port;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNzA3Nw==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491327077", "createdAt": "2020-09-19T08:18:48Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusSerialBridgeConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusSerialBridgeConfig} class represents the configuration of a Velbus Serial Bridge.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusSerialBridgeConfig {\n+    public @NonNullByDefault({}) String port;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzc3Nw=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNzE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusThingConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNjoxNVrOHUhlkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxOTowOVrOHUkO2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzg1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) String address;\n          \n          \n            \n                public String address = \"\";", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491283859", "createdAt": "2020-09-19T06:06:15Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusThingConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusThingConfig} class represents the configuration of a Velbus thing.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusThingConfig {\n+    public @NonNullByDefault({}) String address;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNzE5Mg==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491327192", "createdAt": "2020-09-19T08:19:09Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusThingConfig.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusThingConfig} class represents the configuration of a Velbus thing.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusThingConfig {\n+    public @NonNullByDefault({}) String address;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4Mzg1OQ=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIwNzk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusVMB7INConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjowNjo0NlrOHUhmKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxOToyNlrOHUkPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDAwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public @NonNullByDefault({}) Double counter1PulseMultiplier;\n          \n          \n            \n                public @NonNullByDefault({}) Double counter2PulseMultiplier;\n          \n          \n            \n                public @NonNullByDefault({}) Double counter3PulseMultiplier;\n          \n          \n            \n                public @NonNullByDefault({}) Double counter4PulseMultiplier;\n          \n          \n            \n                public double counter1PulseMultiplier;\n          \n          \n            \n                public double counter2PulseMultiplier;\n          \n          \n            \n                public double counter3PulseMultiplier;\n          \n          \n            \n                public double counter4PulseMultiplier;", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491284009", "createdAt": "2020-09-19T06:06:46Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusVMB7INConfig.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusVMB7INConfig} class represents the configuration of a Velbus VMB7IN module.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB7INConfig extends VelbusSensorConfig {\n+    public @NonNullByDefault({}) Double counter1PulseMultiplier;\n+    public @NonNullByDefault({}) Double counter2PulseMultiplier;\n+    public @NonNullByDefault({}) Double counter3PulseMultiplier;\n+    public @NonNullByDefault({}) Double counter4PulseMultiplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNzMwMQ==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491327301", "createdAt": "2020-09-19T08:19:26Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/config/VelbusVMB7INConfig.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.config;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link VelbusVMB7INConfig} class represents the configuration of a Velbus VMB7IN module.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB7INConfig extends VelbusSensorConfig {\n+    public @NonNullByDefault({}) Double counter1PulseMultiplier;\n+    public @NonNullByDefault({}) Double counter2PulseMultiplier;\n+    public @NonNullByDefault({}) Double counter3PulseMultiplier;\n+    public @NonNullByDefault({}) Double counter4PulseMultiplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NDAwOQ=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIyNzA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxNjo0OVrOHUhyqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoxOTo1NlrOHUkQAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzIwOQ==", "bodyText": "String comparison should not be using ==:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return channelUID.getGroupId() == ANALOG_OUTPUT_GROUP;\n          \n          \n            \n                    return ANALOG_OUTPUT_GROUP.equals(channelUID.getGroupId());", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491287209", "createdAt": "2020-09-19T06:16:49Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;\n+    }\n+\n+    protected byte convertAlarmChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected boolean isTextAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n+                && !channelUID.getIdWithoutGroup().endsWith(RAW_CHANNEL_SUFFIX);\n+    }\n+\n+    protected boolean isRawAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n+                && channelUID.getIdWithoutGroup().endsWith(RAW_CHANNEL_SUFFIX);\n+    }\n+\n+    protected byte convertRawAnalogInputChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup().replaceAll(RAW_CHANNEL_SUFFIX, \"\"));\n+    }\n+\n+    protected byte convertTextAnalogInputChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected String convertAnalogInputChannelByteToRawChannelUID(byte channelByte) {\n+        return convertAnalogInputChannelByteToChannelUID(channelByte) + RAW_CHANNEL_SUFFIX;\n+    }\n+\n+    protected String convertAnalogInputChannelByteToChannelUID(byte channelByte) {\n+        return ANALOG_INPUT_GROUP + \"#\" + channelByte;\n+    }\n+\n+    protected boolean isAnalogOutputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_OUTPUT_GROUP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNzQ5MA==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491327490", "createdAt": "2020-09-19T08:19:56Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;\n+    }\n+\n+    protected byte convertAlarmChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected boolean isTextAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n+                && !channelUID.getIdWithoutGroup().endsWith(RAW_CHANNEL_SUFFIX);\n+    }\n+\n+    protected boolean isRawAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n+                && channelUID.getIdWithoutGroup().endsWith(RAW_CHANNEL_SUFFIX);\n+    }\n+\n+    protected byte convertRawAnalogInputChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup().replaceAll(RAW_CHANNEL_SUFFIX, \"\"));\n+    }\n+\n+    protected byte convertTextAnalogInputChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected String convertAnalogInputChannelByteToRawChannelUID(byte channelByte) {\n+        return convertAnalogInputChannelByteToChannelUID(channelByte) + RAW_CHANNEL_SUFFIX;\n+    }\n+\n+    protected String convertAnalogInputChannelByteToChannelUID(byte channelByte) {\n+        return ANALOG_INPUT_GROUP + \"#\" + channelByte;\n+    }\n+\n+    protected boolean isAnalogOutputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_OUTPUT_GROUP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzIwOQ=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIyODM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxNzoyMFrOHUhzYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoyMDoxNFrOHUkQdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return channelUID.getGroupId() == ALARM_GROUP;\n          \n          \n            \n                    return ALARM_GROUP.equals(channelUID.getGroupId());", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491287394", "createdAt": "2020-09-19T06:17:20Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNzYwNQ==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491327605", "createdAt": "2020-09-19T08:20:14Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzM5NA=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIyOTEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxNzo0M1rOHUhz-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoyMDo1M1rOHUkRpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n          \n          \n            \n                    return ANALOG_INPUT_GROUP.equals(channelUID.getGroupId())", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491287544", "createdAt": "2020-09-19T06:17:43Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;\n+    }\n+\n+    protected byte convertAlarmChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected boolean isTextAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyNzkxMA==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491327910", "createdAt": "2020-09-19T08:20:53Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;\n+    }\n+\n+    protected byte convertAlarmChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected boolean isTextAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzU0NA=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NDIyOTM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwNjoxNzo1OVrOHUh0Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwODoyMToxNFrOHUkSSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n          \n          \n            \n                    return ANALOG_INPUT_GROUP.equals(channelUID.getGroupId())", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491287603", "createdAt": "2020-09-19T06:17:59Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;\n+    }\n+\n+    protected byte convertAlarmChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected boolean isTextAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n+                && !channelUID.getIdWithoutGroup().endsWith(RAW_CHANNEL_SUFFIX);\n+    }\n+\n+    protected boolean isRawAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTMyODA3Mw==", "bodyText": "Modified in commit d57ba9d", "url": "https://github.com/openhab/openhab-addons/pull/8464#discussion_r491328073", "createdAt": "2020-09-19T08:21:14Z", "author": {"login": "cedricboon"}, "path": "bundles/org.openhab.binding.velbus/src/main/java/org/openhab/binding/velbus/internal/handler/VelbusVMB4ANHandler.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.velbus.internal.handler;\n+\n+import static org.openhab.binding.velbus.internal.VelbusBindingConstants.*;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.library.types.StringType;\n+import org.eclipse.smarthome.core.library.unit.MetricPrefix;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.velbus.internal.VelbusChannelIdentifier;\n+import org.openhab.binding.velbus.internal.config.VelbusSensorConfig;\n+import org.openhab.binding.velbus.internal.packets.VelbusDimmerPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusSensorReadoutRequestPacket;\n+import org.openhab.binding.velbus.internal.packets.VelbusStatusRequestPacket;\n+\n+/**\n+ * The {@link VelbusVMB4ANHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Cedric Boon - Initial contribution\n+ */\n+@NonNullByDefault\n+public class VelbusVMB4ANHandler extends VelbusSensorWithAlarmClockHandler {\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<>(Arrays.asList(THING_TYPE_VMB4AN));\n+\n+    private static final String ALARM_GROUP = \"alarm\";\n+    private static final String ANALOG_INPUT_GROUP = \"analogInput\";\n+    private static final String ANALOG_OUTPUT_GROUP = \"analogOutput\";\n+    private static final String RAW_CHANNEL_SUFFIX = \"Raw\";\n+\n+    private static final byte VOLTAGE_SENSOR_TYPE = 0x00;\n+    private static final byte CURRENT_SENSOR_TYPE = 0x01;\n+    private static final byte RESISTANCE_SENSOR_TYPE = 0x02;\n+    private static final byte PERIOD_MEASUREMENT_SENSOR_TYPE = 0x03;\n+\n+    private String[] channelText = new String[] { \"\", \"\", \"\", \"\" };\n+\n+    private @Nullable ScheduledFuture<?> refreshJob;\n+    private @NonNullByDefault({}) VelbusSensorConfig sensorConfig;\n+\n+    public VelbusVMB4ANHandler(Thing thing) {\n+        super(thing, 0);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        this.sensorConfig = getConfigAs(VelbusSensorConfig.class);\n+\n+        super.initialize();\n+\n+        initializeAutomaticRefresh();\n+    }\n+\n+    private void initializeAutomaticRefresh() {\n+        int refreshInterval = sensorConfig.refresh;\n+\n+        if (refreshInterval > 0) {\n+            startAutomaticRefresh(refreshInterval);\n+        }\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        final ScheduledFuture<?> refreshJob = this.refreshJob;\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+    }\n+\n+    private void startAutomaticRefresh(int refreshInterval) {\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        refreshJob = scheduler.scheduleWithFixedDelay(() -> {\n+            sendSensorReadoutRequest(velbusBridgeHandler, ALL_CHANNELS);\n+        }, 0, refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        VelbusBridgeHandler velbusBridgeHandler = getVelbusBridgeHandler();\n+        if (velbusBridgeHandler == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+            return;\n+        }\n+\n+        byte channelByte = convertChannelUIDToChannelByte(channelUID);\n+\n+        if (command instanceof RefreshType) {\n+            VelbusStatusRequestPacket packet = new VelbusStatusRequestPacket(channelByte);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        } else if (command instanceof PercentType && isAnalogOutputChannel(channelUID)) {\n+            VelbusDimmerPacket packet = new VelbusDimmerPacket(\n+                    new VelbusChannelIdentifier(this.getModuleAddress().getAddress(), channelByte), COMMAND_SET_VALUE,\n+                    ((PercentType) command).byteValue(), 0x00, false);\n+\n+            byte[] packetBytes = packet.getBytes();\n+            velbusBridgeHandler.sendPacket(packetBytes);\n+        }\n+    }\n+\n+    protected void sendSensorReadoutRequest(VelbusBridgeHandler velbusBridgeHandler, byte channel) {\n+        VelbusSensorReadoutRequestPacket packet = new VelbusSensorReadoutRequestPacket(getModuleAddress().getAddress(),\n+                channel);\n+\n+        byte[] packetBytes = packet.getBytes();\n+        velbusBridgeHandler.sendPacket(packetBytes);\n+    }\n+\n+    @Override\n+    public void onPacketReceived(byte[] packet) {\n+        super.onPacketReceived(packet);\n+\n+        logger.trace(\"onPacketReceived() was called\");\n+\n+        if (packet[0] == VelbusPacket.STX && packet.length >= 5) {\n+            byte command = packet[4];\n+\n+            if (command == COMMAND_SENSOR_RAW_DATA && packet.length >= 10) {\n+                byte channel = packet[5];\n+                byte operatingMode = packet[6];\n+                byte upperByteSensorValue = packet[7];\n+                byte highByteSensorValue = packet[8];\n+                byte lowByteSensorValue = packet[9];\n+\n+                double sensorValue = (((upperByteSensorValue & 0xff) << 16) + ((highByteSensorValue & 0xff) << 8)\n+                        + (lowByteSensorValue & 0xff));\n+                String channelUID = convertAnalogInputChannelByteToRawChannelUID(channel);\n+\n+                switch (operatingMode) {\n+                    case VOLTAGE_SENSOR_TYPE:\n+                        double voltageResolution = 0.25;\n+                        double voltageSensorValueState = sensorValue * voltageResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(voltageSensorValueState, MetricPrefix.MILLI(SmartHomeUnits.VOLT)));\n+                        break;\n+                    case CURRENT_SENSOR_TYPE:\n+                        double currentResolution = 5;\n+                        double currentSensorValueState = sensorValue * currentResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(currentSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.AMPERE)));\n+                        break;\n+                    case RESISTANCE_SENSOR_TYPE:\n+                        double resistanceResolution = 0.25;\n+                        double resistanceSensorValueState = sensorValue * resistanceResolution;\n+                        updateState(channelUID, new QuantityType<>(resistanceSensorValueState, SmartHomeUnits.OHM));\n+                        break;\n+                    case PERIOD_MEASUREMENT_SENSOR_TYPE:\n+                        double periodResolution = 0.5;\n+                        double periodSensorValueState = sensorValue * periodResolution;\n+                        updateState(channelUID,\n+                                new QuantityType<>(periodSensorValueState, MetricPrefix.MICRO(SmartHomeUnits.SECOND)));\n+                        break;\n+                }\n+            } else if (command == COMMAND_TEXT) {\n+                byte channel = packet[5];\n+                byte textStartPosition = packet[6];\n+\n+                StringBuilder contents = new StringBuilder();\n+                for (int i = 7; i < packet.length - 2; i++) {\n+                    byte currentChar = packet[i];\n+                    if (currentChar == (byte) -0x50) {\n+                        contents.append(\"\u00b0\");\n+                    } else if (currentChar != (byte) 0x00) {\n+                        contents.append((char) currentChar);\n+                    }\n+                }\n+\n+                channelText[channel - 9] = channelText[channel - 9].substring(0, textStartPosition)\n+                        + contents.toString()\n+                        + (channelText[channel - 9].length() > textStartPosition + 5 ? channelText[channel - 9]\n+                                .substring(textStartPosition + 5, channelText[channel - 9].length()) : \"\");\n+\n+                String channelUID = convertAnalogInputChannelByteToChannelUID(channel);\n+                updateState(channelUID, new StringType(channelText[channel - 9]));\n+            }\n+        }\n+    }\n+\n+    protected byte convertChannelUIDToChannelByte(ChannelUID channelUID) {\n+        if (isAlarmChannel(channelUID)) {\n+            return convertAlarmChannelUIDToChannelByte(channelUID);\n+        } else if (isTextAnalogInputChannel(channelUID)) {\n+            return convertTextAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isRawAnalogInputChannel(channelUID)) {\n+            return convertRawAnalogInputChannelUIDToChannelByte(channelUID);\n+        } else if (isAnalogOutputChannel(channelUID)) {\n+            return convertAnalogOutputChannelUIDToChannelByte(channelUID);\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"The channel '\" + channelUID + \"' is not supported on a VMB4AN module.\");\n+        }\n+    }\n+\n+    protected boolean isAlarmChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ALARM_GROUP;\n+    }\n+\n+    protected byte convertAlarmChannelUIDToChannelByte(ChannelUID channelUID) {\n+        return Byte.parseByte(channelUID.getIdWithoutGroup());\n+    }\n+\n+    protected boolean isTextAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP\n+                && !channelUID.getIdWithoutGroup().endsWith(RAW_CHANNEL_SUFFIX);\n+    }\n+\n+    protected boolean isRawAnalogInputChannel(ChannelUID channelUID) {\n+        return channelUID.getGroupId() == ANALOG_INPUT_GROUP", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI4NzYwMw=="}, "originalCommit": {"oid": "5ca761c60a9a5733c6a3f565cf008082143b5464"}, "originalPosition": 244}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4500, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}