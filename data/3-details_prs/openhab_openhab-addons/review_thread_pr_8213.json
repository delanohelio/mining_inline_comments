{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MTY4MTQx", "number": 8213, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo1OTowMVrOESbUZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNToyOToxNFrOEScK4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzU3NDE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/callback/AbstractCommandCallback.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDo1OTowMVrOG3mbyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0Mzo1OFrOG3s7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1NDU2OQ==", "bodyText": "Is the cast to Type necessary?", "url": "https://github.com/openhab/openhab-addons/pull/8213#discussion_r460954569", "createdAt": "2020-07-27T14:59:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/callback/AbstractCommandCallback.java", "diffHunk": "@@ -172,13 +190,22 @@ public CommunicationStatus getCommunicationStatus() {\n      */\n     protected abstract String getURL();\n \n-    @Override\n-    public final StatusUpdateListener getListener() {\n-        return listener;\n-    }\n-\n     @Override\n     public final void setListener(StatusUpdateListener listener) {\n         this.listener = listener;\n     }\n+\n+    /**\n+     * just a wrapper as fromJson could return null. This will avoid warnings as eclipse otherwise assumes unnecessary\n+     * null checks which are not unnecessary\n+     *\n+     * @param <T>\n+     * @param json\n+     * @param classOfT\n+     * @return\n+     * @throws JsonSyntaxException\n+     */\n+    protected <T> @Nullable T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {\n+        return gson.fromJson(json, (Type) classOfT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce281b713e14070668f5c98bd1f2a84df943e43"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MDkzMA==", "bodyText": "you are right, this does not make any sense. It is a c&p mistake.", "url": "https://github.com/openhab/openhab-addons/pull/8213#discussion_r461060930", "createdAt": "2020-07-27T17:43:58Z", "author": {"login": "alexf2015"}, "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/callback/AbstractCommandCallback.java", "diffHunk": "@@ -172,13 +190,22 @@ public CommunicationStatus getCommunicationStatus() {\n      */\n     protected abstract String getURL();\n \n-    @Override\n-    public final StatusUpdateListener getListener() {\n-        return listener;\n-    }\n-\n     @Override\n     public final void setListener(StatusUpdateListener listener) {\n         this.listener = listener;\n     }\n+\n+    /**\n+     * just a wrapper as fromJson could return null. This will avoid warnings as eclipse otherwise assumes unnecessary\n+     * null checks which are not unnecessary\n+     *\n+     * @param <T>\n+     * @param json\n+     * @param classOfT\n+     * @return\n+     * @throws JsonSyntaxException\n+     */\n+    protected <T> @Nullable T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {\n+        return gson.fromJson(json, (Type) classOfT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1NDU2OQ=="}, "originalCommit": {"oid": "dce281b713e14070668f5c98bd1f2a84df943e43"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzY3NjE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/model/AggregateDataResponsePublicApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNToyMToxMVrOG3nZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0NTozN1rOG3s-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3MDQ1Mg==", "bodyText": "Null annotations on inner classes are not necessary. There is a bug in checkstyle, generating a false positive warning, which can safely be ignored. Same for the others.", "url": "https://github.com/openhab/openhab-addons/pull/8213#discussion_r460970452", "createdAt": "2020-07-27T15:21:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/model/AggregateDataResponsePublicApi.java", "diffHunk": "@@ -12,346 +12,45 @@\n  */\n package org.openhab.binding.solaredge.internal.model;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n-import javax.measure.Unit;\n-import javax.measure.quantity.Energy;\n-\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * this class is used to map the aggregate data response of the public API\n  *\n  * @author Alexander Friese - initial contribution\n  */\n-public class AggregateDataResponsePublicApi implements DataResponse {\n-\n-    private final Logger logger = LoggerFactory.getLogger(AggregateDataResponsePublicApi.class);\n-\n-    private static final String METER_TYPE_PRODUCTION = \"Production\";\n-    private static final String METER_TYPE_CONSUMPTION = \"Consumption\";\n-    private static final String METER_TYPE_SELFCONSUMPTION = \"SelfConsumption\";\n-    private static final String METER_TYPE_IMPORT = \"Purchased\";\n-    private static final String METER_TYPE_EXPORT = \"FeedIn\";\n+@NonNullByDefault\n+public class AggregateDataResponsePublicApi {\n \n+    @NonNullByDefault", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce281b713e14070668f5c98bd1f2a84df943e43"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MTg2NQ==", "bodyText": "I recognized that there are some differences between warnings shown by Eclipse and those shown by the mvn build process.\nBut I thought that Eclipse was wrong. I will remove these.", "url": "https://github.com/openhab/openhab-addons/pull/8213#discussion_r461061865", "createdAt": "2020-07-27T17:45:37Z", "author": {"login": "alexf2015"}, "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/model/AggregateDataResponsePublicApi.java", "diffHunk": "@@ -12,346 +12,45 @@\n  */\n package org.openhab.binding.solaredge.internal.model;\n \n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n \n-import javax.measure.Unit;\n-import javax.measure.quantity.Energy;\n-\n-import org.eclipse.smarthome.core.library.types.DecimalType;\n-import org.eclipse.smarthome.core.library.types.QuantityType;\n-import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n-import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n \n /**\n  * this class is used to map the aggregate data response of the public API\n  *\n  * @author Alexander Friese - initial contribution\n  */\n-public class AggregateDataResponsePublicApi implements DataResponse {\n-\n-    private final Logger logger = LoggerFactory.getLogger(AggregateDataResponsePublicApi.class);\n-\n-    private static final String METER_TYPE_PRODUCTION = \"Production\";\n-    private static final String METER_TYPE_CONSUMPTION = \"Consumption\";\n-    private static final String METER_TYPE_SELFCONSUMPTION = \"SelfConsumption\";\n-    private static final String METER_TYPE_IMPORT = \"Purchased\";\n-    private static final String METER_TYPE_EXPORT = \"FeedIn\";\n+@NonNullByDefault\n+public class AggregateDataResponsePublicApi {\n \n+    @NonNullByDefault", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3MDQ1Mg=="}, "originalCommit": {"oid": "dce281b713e14070668f5c98bd1f2a84df943e43"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzcxMzYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/model/LiveDataResponseTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNToyOToxNFrOG3nwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0ODoyNVrOG3tE0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3NjMyMQ==", "bodyText": "These massive compiler warnings are not nice. You could store it to a local variable, which would be one extra line each.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (overview.currentPower != null) {\n          \n          \n            \n                            putPowerType(result, channelProvider.getChannel(CHANNEL_GROUP_LIVE, CHANNEL_ID_PRODUCTION),\n          \n          \n            \n                                    overview.currentPower.power, UNIT_W);\n          \n          \n            \n                        Power localCurrentPower = overview.currentPower;\n          \n          \n            \n                        if (localCurrentPower != null) {\n          \n          \n            \n                            putPowerType(result, channelProvider.getChannel(CHANNEL_GROUP_LIVE, CHANNEL_ID_PRODUCTION),\n          \n          \n            \n                                    localCurrentPower.power, UNIT_W);", "url": "https://github.com/openhab/openhab-addons/pull/8213#discussion_r460976321", "createdAt": "2020-07-27T15:29:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/model/LiveDataResponseTransformer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.solaredge.internal.model;\n+\n+import static org.openhab.binding.solaredge.internal.SolarEdgeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.solaredge.internal.handler.ChannelProvider;\n+import org.openhab.binding.solaredge.internal.model.LiveDataResponse.Connection;\n+import org.openhab.binding.solaredge.internal.model.LiveDataResponse.SiteCurrentPowerFlow;\n+import org.openhab.binding.solaredge.internal.model.LiveDataResponseMeterless.Overview;\n+\n+/**\n+ * transforms the http response into the openhab datamodel (instances of State)\n+ *\n+ * @author Alexander Friese - initial contribution\n+ */\n+@NonNullByDefault\n+public class LiveDataResponseTransformer extends AbstractDataResponseTransformer {\n+    private static final Double ZERO_POWER = 0.0;\n+\n+    private final ChannelProvider channelProvider;\n+\n+    public LiveDataResponseTransformer(ChannelProvider channelProvider) {\n+        this.channelProvider = channelProvider;\n+    }\n+\n+    public Map<Channel, State> transform(LiveDataResponseMeterless response) {\n+        Map<Channel, State> result = new HashMap<>(20);\n+        Overview overview = response.getOverview();\n+\n+        if (overview != null) {\n+            if (overview.currentPower != null) {\n+                putPowerType(result, channelProvider.getChannel(CHANNEL_GROUP_LIVE, CHANNEL_ID_PRODUCTION),\n+                        overview.currentPower.power, UNIT_W);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dce281b713e14070668f5c98bd1f2a84df943e43"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MzM3OA==", "bodyText": "Hmm it seems that I have overlooked this. In the other transformer class I solved it exactly like you suggested.", "url": "https://github.com/openhab/openhab-addons/pull/8213#discussion_r461063378", "createdAt": "2020-07-27T17:48:25Z", "author": {"login": "alexf2015"}, "path": "bundles/org.openhab.binding.solaredge/src/main/java/org/openhab/binding/solaredge/internal/model/LiveDataResponseTransformer.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.solaredge.internal.model;\n+\n+import static org.openhab.binding.solaredge.internal.SolarEdgeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.types.State;\n+import org.openhab.binding.solaredge.internal.handler.ChannelProvider;\n+import org.openhab.binding.solaredge.internal.model.LiveDataResponse.Connection;\n+import org.openhab.binding.solaredge.internal.model.LiveDataResponse.SiteCurrentPowerFlow;\n+import org.openhab.binding.solaredge.internal.model.LiveDataResponseMeterless.Overview;\n+\n+/**\n+ * transforms the http response into the openhab datamodel (instances of State)\n+ *\n+ * @author Alexander Friese - initial contribution\n+ */\n+@NonNullByDefault\n+public class LiveDataResponseTransformer extends AbstractDataResponseTransformer {\n+    private static final Double ZERO_POWER = 0.0;\n+\n+    private final ChannelProvider channelProvider;\n+\n+    public LiveDataResponseTransformer(ChannelProvider channelProvider) {\n+        this.channelProvider = channelProvider;\n+    }\n+\n+    public Map<Channel, State> transform(LiveDataResponseMeterless response) {\n+        Map<Channel, State> result = new HashMap<>(20);\n+        Overview overview = response.getOverview();\n+\n+        if (overview != null) {\n+            if (overview.currentPower != null) {\n+                putPowerType(result, channelProvider.getChannel(CHANNEL_GROUP_LIVE, CHANNEL_ID_PRODUCTION),\n+                        overview.currentPower.power, UNIT_W);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3NjMyMQ=="}, "originalCommit": {"oid": "dce281b713e14070668f5c98bd1f2a84df943e43"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4528, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}