{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTgzMjMz", "number": 8949, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToxMjozMVrOE0-47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0MDoyMVrOE1Y62A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzOTkxNzkwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToxMjozMVrOHtAohQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMToxNjo0OVrOHtAwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1ODM0MQ==", "bodyText": "@wborn, do you think that having +inheritNullAnnot in -err AND -warn is correct? I would assume that it should be added only in one place.", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r516958341", "createdAt": "2020-11-03T21:12:31Z", "author": {"login": "J-N-K"}, "path": "pom.xml", "diffHunk": "@@ -289,8 +289,8 @@ Import-Package: \\\\\n               <classpath>${project.build.directory}/dependency</classpath>\n             </compilerArguments>\n             <compilerArgs>\n-              <arg>-err:+nullAnnot(org.eclipse.jdt.annotation.Nullable|org.eclipse.jdt.annotation.NonNull|org.eclipse.jdt.annotation.NonNullByDefault),+inheritNullAnnot,-nullUncheckedConversion</arg>\n-              <arg>-warn:+null,+inheritNullAnnot,+nullAnnotConflict,-nullUncheckedConversion,+nullAnnotRedundant,+nullDereference</arg>\n+              <arg>-err:+nullAnnot(org.eclipse.jdt.annotation.Nullable|org.eclipse.jdt.annotation.NonNull|org.eclipse.jdt.annotation.NonNullByDefault),+inheritNullAnnot,+nullAnnotConflict,-nullUncheckedConversion</arg>\n+              <arg>-warn:+null,+inheritNullAnnot,-nullUncheckedConversion,+nullAnnotRedundant,+nullDereference</arg>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "920197757099f440f1f3569e5cf28821f4502203"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk2MDM4MQ==", "bodyText": "I also found it strange the errors arguments are also part of the warnings. But I didn't look into if there is also some kind of option where the compiler continues on errors but still logs these problems on warnings where such configuration might make sense. If this mode doesn't exist or not work this way I think they can be removed from the warnings. :-)", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r516960381", "createdAt": "2020-11-03T21:16:49Z", "author": {"login": "wborn"}, "path": "pom.xml", "diffHunk": "@@ -289,8 +289,8 @@ Import-Package: \\\\\n               <classpath>${project.build.directory}/dependency</classpath>\n             </compilerArguments>\n             <compilerArgs>\n-              <arg>-err:+nullAnnot(org.eclipse.jdt.annotation.Nullable|org.eclipse.jdt.annotation.NonNull|org.eclipse.jdt.annotation.NonNullByDefault),+inheritNullAnnot,-nullUncheckedConversion</arg>\n-              <arg>-warn:+null,+inheritNullAnnot,+nullAnnotConflict,-nullUncheckedConversion,+nullAnnotRedundant,+nullDereference</arg>\n+              <arg>-err:+nullAnnot(org.eclipse.jdt.annotation.Nullable|org.eclipse.jdt.annotation.NonNull|org.eclipse.jdt.annotation.NonNullByDefault),+inheritNullAnnot,+nullAnnotConflict,-nullUncheckedConversion</arg>\n+              <arg>-warn:+null,+inheritNullAnnot,-nullUncheckedConversion,+nullAnnotRedundant,+nullDereference</arg>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk1ODM0MQ=="}, "originalCommit": {"oid": "920197757099f440f1f3569e5cf28821f4502203"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDE0Nzk3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/discovery/DSMRMeterDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDoyOTo0MlrOHtoliw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo1MTo0NVrOHtpQtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxMjkzOQ==", "bodyText": "What was wrong with this code that required this change?", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517612939", "createdAt": "2020-11-04T20:29:42Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/discovery/DSMRMeterDiscoveryService.java", "diffHunk": "@@ -148,8 +144,9 @@ private void validateConfiguredMeters(List<Thing> things, Set<DSMRMeterType> con\n                 .filter(DSMRMeterHandler.class::isInstance)\n                 .map(DSMRMeterHandler.class::cast)\n                 .map(h -> h == null ? null : h.getMeterDescriptor())\n-                .map(d -> d == null ? null : d.getMeterType())\n-                .filter(Objects::nonNull)\n+                .map(d -> Optional.ofNullable(d == null ? null : d.getMeterType()))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyMzk5MQ==", "bodyText": "The null-checker is not able to detect that a Stream<@Nullable T> is converted to a Stream<@NonNull T> if .filter(Objects::nonNull) is applied.", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517623991", "createdAt": "2020-11-04T20:51:45Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.dsmr/src/main/java/org/openhab/binding/dsmr/internal/discovery/DSMRMeterDiscoveryService.java", "diffHunk": "@@ -148,8 +144,9 @@ private void validateConfiguredMeters(List<Thing> things, Set<DSMRMeterType> con\n                 .filter(DSMRMeterHandler.class::isInstance)\n                 .map(DSMRMeterHandler.class::cast)\n                 .map(h -> h == null ? null : h.getMeterDescriptor())\n-                .map(d -> d == null ? null : d.getMeterType())\n-                .filter(Objects::nonNull)\n+                .map(d -> Optional.ofNullable(d == null ? null : d.getMeterType()))\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxMjkzOQ=="}, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDE2MjIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDozMzo0NlrOHtot-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyMToxMVrOHv5XYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxNTA5Nw==", "bodyText": "I'd prefer to have the null checker disabled on testing classes than be required to add unnecessary checks like this in the test code.\n@wborn Can we just disable the null checker for test classes?", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517615097", "createdAt": "2020-11-04T20:33:46Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "diffHunk": "@@ -53,6 +54,7 @@ public void testSensorDataToState() throws IOException, FoobotApiException {\n         final FoobotJsonData sensorData = connector.getSensorData(\"1234\");\n \n         assertNotNull(sensorData, \"No sensor data read\");\n+        Objects.requireNonNull(sensorData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYyNjM1NQ==", "bodyText": "For me test code is not any different as any other code. It should be clean, spotless and NPE free.", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517626355", "createdAt": "2020-11-04T20:56:13Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "diffHunk": "@@ -53,6 +54,7 @@ public void testSensorDataToState() throws IOException, FoobotApiException {\n         final FoobotJsonData sensorData = connector.getSensorData(\"1234\");\n \n         assertNotNull(sensorData, \"No sensor data read\");\n+        Objects.requireNonNull(sensorData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxNTA5Nw=="}, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYzMDU2MA==", "bodyText": "I wonder if we annotate Mockito.assertNonNull the same as Objects.requireNonNull if that would work as well", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517630560", "createdAt": "2020-11-04T21:04:47Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "diffHunk": "@@ -53,6 +54,7 @@ public void testSensorDataToState() throws IOException, FoobotApiException {\n         final FoobotJsonData sensorData = connector.getSensorData(\"1234\");\n \n         assertNotNull(sensorData, \"No sensor data read\");\n+        Objects.requireNonNull(sensorData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxNTA5Nw=="}, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzY2MDg0MA==", "bodyText": "I'd prefer to make the barriers to entry for testing as low as possible. The more requirements you add to test code the less test code people will write. Test code should not be held to the same standard as the regular code base other than readability and maintainability. I could care less about how robust testing code is.\nAlso the point of using a null checker is to prevent untested runtime errors. Any test code that runs successfully can be assumed to be NPE free (unless it is really poorly written).\nJust my 2 cents.", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517660840", "createdAt": "2020-11-04T22:10:51Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "diffHunk": "@@ -53,6 +54,7 @@ public void testSensorDataToState() throws IOException, FoobotApiException {\n         final FoobotJsonData sensorData = connector.getSensorData(\"1234\");\n \n         assertNotNull(sensorData, \"No sensor data read\");\n+        Objects.requireNonNull(sensorData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxNTA5Nw=="}, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzkyNjcyNQ==", "bodyText": "Also the point of using a null checker is to prevent untested runtime errors. Any test code that runs successfully can be assumed to be NPE free (unless it is really poorly written).\n\nBased on timing due to server loads test code can also return null e.g. getService in itests. So tests can also behave differently at runtime. The null analysis triggers you to think about and investigate these possible null scenarios which makes tests more robust. As a result builds will less likely fail and contributors/maintainers have to spent less time debugging them and retriggering failing builds making them more happy. :-)", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517926725", "createdAt": "2020-11-05T09:59:08Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "diffHunk": "@@ -53,6 +54,7 @@ public void testSensorDataToState() throws IOException, FoobotApiException {\n         final FoobotJsonData sensorData = connector.getSensorData(\"1234\");\n \n         assertNotNull(sensorData, \"No sensor data read\");\n+        Objects.requireNonNull(sensorData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxNTA5Nw=="}, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NDk5Mw==", "bodyText": "Fair enough.", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r519984993", "createdAt": "2020-11-09T17:21:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.foobot/src/test/java/org/openhab/binding/foobot/internal/handler/FoobotDeviceHandlerTest.java", "diffHunk": "@@ -53,6 +54,7 @@ public void testSensorDataToState() throws IOException, FoobotApiException {\n         final FoobotJsonData sensorData = connector.getSensorData(\"1234\");\n \n         assertNotNull(sensorData, \"No sensor data read\");\n+        Objects.requireNonNull(sensorData);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxNTA5Nw=="}, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDE4MjY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/CommandHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0MDoyMVrOHto6jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQyMDo0MDoyMVrOHto6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzYxODMxOA==", "bodyText": "I'd try to avoid inline variable assignment if possible.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String dimmerMax;\n          \n          \n            \n                    if (conf.getFeature().contains(\"dimmer\") && (dimmerMax = params.get(\"dimmermax\")) != null) {\n          \n          \n            \n                    String dimmerMax = params.get(\"dimmermax\");\n          \n          \n            \n                    if (conf.getFeature().contains(\"dimmer\") && dimmerMax != null) {", "url": "https://github.com/openhab/openhab-addons/pull/8949#discussion_r517618318", "createdAt": "2020-11-04T20:40:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/device/CommandHandler.java", "diffHunk": "@@ -114,9 +114,9 @@ protected String nm() {\n \n     protected int getMaxLightLevel(InsteonChannelConfiguration conf, int defaultLevel) {\n         Map<String, @Nullable String> params = conf.getParameters();\n-        if (conf.getFeature().contains(\"dimmer\") && params.containsKey(\"dimmermax\")) {\n+        String dimmerMax;\n+        if (conf.getFeature().contains(\"dimmer\") && (dimmerMax = params.get(\"dimmermax\")) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a02fe901828e0deb824feca2b1cb12490ee26d46"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4031, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}