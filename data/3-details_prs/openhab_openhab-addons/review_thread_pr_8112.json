{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTQ3OTIy", "number": 8112, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoyMDo0N1rOEOjwIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoyMzo1M1rOEOj0lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzAxMjgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoyMDo0OFrOGxxdmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNzoyN1rOGxzAlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0MzgwMA==", "bodyText": "Please apply the formatting standards set for the project. This is something to setup in your IDE. Additionally you may have a command to reformat a source file but I don't know it.\nAs an example, there is a space between the if and its condition.", "url": "https://github.com/openhab/openhab-addons/pull/8112#discussion_r454843800", "createdAt": "2020-07-15T07:20:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryService.java", "diffHunk": "@@ -195,4 +202,46 @@ private ThingUID findThingUID(String thingType, String thingId) throws IllegalAr\n \n         throw new IllegalArgumentException(\"Unsupported device type discovered : \" + thingType);\n     }\n+\n+    private String createWeatherStationName(NAMain station, boolean isFavorite) {\n+        StringBuilder nameBuilder = new StringBuilder();\n+        nameBuilder.append(localizeType(station.getType()));\n+        if(station.getStationName() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44aa0cb96d9c06df82ea502d7d9de37d396fa09"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTE0Mw==", "bodyText": "ok, I have now executed the Maven goal spotless:apply. There were a few other files which had formatting errors. Now spotless:check is also running successfully. :-)", "url": "https://github.com/openhab/openhab-addons/pull/8112#discussion_r454869143", "createdAt": "2020-07-15T08:07:27Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryService.java", "diffHunk": "@@ -195,4 +202,46 @@ private ThingUID findThingUID(String thingType, String thingId) throws IllegalAr\n \n         throw new IllegalArgumentException(\"Unsupported device type discovered : \" + thingType);\n     }\n+\n+    private String createWeatherStationName(NAMain station, boolean isFavorite) {\n+        StringBuilder nameBuilder = new StringBuilder();\n+        nameBuilder.append(localizeType(station.getType()));\n+        if(station.getStationName() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0MzgwMA=="}, "originalCommit": {"oid": "f44aa0cb96d9c06df82ea502d7d9de37d396fa09"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzAxOTUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoyMjozNlrOGxxhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowOToyM1rOGxzEvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NDc4Nw==", "bodyText": "I think the core framework already provides a method for that. I have to search.", "url": "https://github.com/openhab/openhab-addons/pull/8112#discussion_r454844787", "createdAt": "2020-07-15T07:22:36Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryService.java", "diffHunk": "@@ -195,4 +202,46 @@ private ThingUID findThingUID(String thingType, String thingId) throws IllegalAr\n \n         throw new IllegalArgumentException(\"Unsupported device type discovered : \" + thingType);\n     }\n+\n+    private String createWeatherStationName(NAMain station, boolean isFavorite) {\n+        StringBuilder nameBuilder = new StringBuilder();\n+        nameBuilder.append(localizeType(station.getType()));\n+        if(station.getStationName() != null) {\n+            nameBuilder.append(' ');\n+            nameBuilder.append(station.getStationName());\n+        }\n+        if(isFavorite) {\n+            nameBuilder.append(\" (favorite)\");\n+        }\n+        return nameBuilder.toString();\n+    }\n+\n+    private String createWeatherModuleName(NAMain station, NAStationModule module, boolean isFavorite) {\n+        StringBuilder nameBuilder = new StringBuilder();\n+        if(module.getModuleName() != null) {\n+            nameBuilder.append(module.getModuleName());\n+        } else {\n+            nameBuilder.append(localizeType(module.getType()));\n+        }\n+        if(station.getStationName() != null) {\n+            nameBuilder.append(' ');\n+            nameBuilder.append(station.getStationName());\n+        }\n+        if(isFavorite) {\n+            nameBuilder.append(\" (favorite)\");\n+        }\n+        return nameBuilder.toString();\n+    }\n+\n+    private String localizeType(String typeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44aa0cb96d9c06df82ea502d7d9de37d396fa09"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3MDIwNg==", "bodyText": "It is described here and I found usages/examples within other bindings: https://www.openhab.org/docs/developer/utils/i18n.html\nBut I'm also wondering why it is so complicated to translate a String... It would be neat if the core framework would provide a shorter / easier to use solution.", "url": "https://github.com/openhab/openhab-addons/pull/8112#discussion_r454870206", "createdAt": "2020-07-15T08:09:23Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryService.java", "diffHunk": "@@ -195,4 +202,46 @@ private ThingUID findThingUID(String thingType, String thingId) throws IllegalAr\n \n         throw new IllegalArgumentException(\"Unsupported device type discovered : \" + thingType);\n     }\n+\n+    private String createWeatherStationName(NAMain station, boolean isFavorite) {\n+        StringBuilder nameBuilder = new StringBuilder();\n+        nameBuilder.append(localizeType(station.getType()));\n+        if(station.getStationName() != null) {\n+            nameBuilder.append(' ');\n+            nameBuilder.append(station.getStationName());\n+        }\n+        if(isFavorite) {\n+            nameBuilder.append(\" (favorite)\");\n+        }\n+        return nameBuilder.toString();\n+    }\n+\n+    private String createWeatherModuleName(NAMain station, NAStationModule module, boolean isFavorite) {\n+        StringBuilder nameBuilder = new StringBuilder();\n+        if(module.getModuleName() != null) {\n+            nameBuilder.append(module.getModuleName());\n+        } else {\n+            nameBuilder.append(localizeType(module.getType()));\n+        }\n+        if(station.getStationName() != null) {\n+            nameBuilder.append(' ');\n+            nameBuilder.append(station.getStationName());\n+        }\n+        if(isFavorite) {\n+            nameBuilder.append(\" (favorite)\");\n+        }\n+        return nameBuilder.toString();\n+    }\n+\n+    private String localizeType(String typeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NDc4Nw=="}, "originalCommit": {"oid": "f44aa0cb96d9c06df82ea502d7d9de37d396fa09"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzAyNDIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/test/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNzoyMzo1M1rOGxxkSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODowNzozOFrOGxzBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NTUxNA==", "bodyText": "Both are...\nSpace before \"Expected\"", "url": "https://github.com/openhab/openhab-addons/pull/8112#discussion_r454845514", "createdAt": "2020-07-15T07:23:53Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/test/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryServiceTest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.discovery;\n+\n+import io.swagger.client.model.NAMain;\n+import io.swagger.client.model.NAStationDataBody;\n+import io.swagger.client.model.NAStationModule;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.core.i18n.LocaleProvider;\n+import org.eclipse.smarthome.core.i18n.TranslationProvider;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openhab.binding.netatmo.internal.handler.NetatmoBridgeHandler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * @author Sven Strohschein - Initial contribution\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class NetatmoModuleDiscoveryServiceTest {\n+\n+    private NetatmoModuleDiscoveryServiceAccessible service;\n+    private NetatmoBridgeHandler bridgeHandlerSpy;\n+\n+    @Before\n+    public void before() {\n+        Bridge bridgeMock = mock(Bridge.class);\n+        when(bridgeMock.getUID()).thenReturn(new ThingUID(\"netatmo\", \"bridge\"));\n+\n+        bridgeHandlerSpy = spy(new NetatmoBridgeHandler(bridgeMock, null));\n+\n+        LocaleProvider localeProviderMock = mock(LocaleProvider.class);\n+        TranslationProvider translationProvider = mock(TranslationProvider.class);\n+\n+        service = new NetatmoModuleDiscoveryServiceAccessible(bridgeHandlerSpy, localeProviderMock, translationProvider);\n+    }\n+\n+    @Test\n+    public void testStartScanNothingActivated() {\n+        service.startScan();\n+\n+        assertEquals(0, service.getDiscoveredThings().size());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStationNoStationsBody() {\n+        activateDiscoveryWeatherStation();\n+\n+        service.startScan();\n+\n+        assertEquals(0, service.getDiscoveredThings().size());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStationNoStations() {\n+        activateDiscoveryWeatherStation();\n+\n+        when(bridgeHandlerSpy.getStationsDataBody(null)).thenReturn(Optional.of(new NAStationDataBody()));\n+        service.startScan();\n+\n+        assertEquals(0, service.getDiscoveredThings().size());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStationNoStationName() {\n+        recordStationBody(createStation());\n+\n+        service.startScan();\n+\n+        List<DiscoveryResult> discoveredThings = service.getDiscoveredThings();\n+        assertEquals(1, discoveredThings.size());\n+        //Expected is only the type name, because a station name isn't available\n+        assertEquals(\"NAMain\", discoveredThings.get(0).getLabel());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStation() {\n+        NAMain station = createStation();\n+        station.setStationName(\"Neu Wulmstorf\");\n+\n+        recordStationBody(station);\n+\n+        service.startScan();\n+\n+        List<DiscoveryResult> discoveredThings = service.getDiscoveredThings();\n+        assertEquals(1, discoveredThings.size());\n+        //Expected is the type name + station name, because both is available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44aa0cb96d9c06df82ea502d7d9de37d396fa09"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg2OTI0OQ==", "bodyText": "ok, I have now executed the Maven goal spotless:apply. There were a few other files which had formatting errors. Now spotless:check is also running successfully. :-)", "url": "https://github.com/openhab/openhab-addons/pull/8112#discussion_r454869249", "createdAt": "2020-07-15T08:07:38Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/test/java/org/openhab/binding/netatmo/internal/discovery/NetatmoModuleDiscoveryServiceTest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.netatmo.internal.discovery;\n+\n+import io.swagger.client.model.NAMain;\n+import io.swagger.client.model.NAStationDataBody;\n+import io.swagger.client.model.NAStationModule;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.core.i18n.LocaleProvider;\n+import org.eclipse.smarthome.core.i18n.TranslationProvider;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openhab.binding.netatmo.internal.handler.NetatmoBridgeHandler;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+/**\n+ * @author Sven Strohschein - Initial contribution\n+ */\n+@RunWith(MockitoJUnitRunner.class)\n+public class NetatmoModuleDiscoveryServiceTest {\n+\n+    private NetatmoModuleDiscoveryServiceAccessible service;\n+    private NetatmoBridgeHandler bridgeHandlerSpy;\n+\n+    @Before\n+    public void before() {\n+        Bridge bridgeMock = mock(Bridge.class);\n+        when(bridgeMock.getUID()).thenReturn(new ThingUID(\"netatmo\", \"bridge\"));\n+\n+        bridgeHandlerSpy = spy(new NetatmoBridgeHandler(bridgeMock, null));\n+\n+        LocaleProvider localeProviderMock = mock(LocaleProvider.class);\n+        TranslationProvider translationProvider = mock(TranslationProvider.class);\n+\n+        service = new NetatmoModuleDiscoveryServiceAccessible(bridgeHandlerSpy, localeProviderMock, translationProvider);\n+    }\n+\n+    @Test\n+    public void testStartScanNothingActivated() {\n+        service.startScan();\n+\n+        assertEquals(0, service.getDiscoveredThings().size());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStationNoStationsBody() {\n+        activateDiscoveryWeatherStation();\n+\n+        service.startScan();\n+\n+        assertEquals(0, service.getDiscoveredThings().size());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStationNoStations() {\n+        activateDiscoveryWeatherStation();\n+\n+        when(bridgeHandlerSpy.getStationsDataBody(null)).thenReturn(Optional.of(new NAStationDataBody()));\n+        service.startScan();\n+\n+        assertEquals(0, service.getDiscoveredThings().size());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStationNoStationName() {\n+        recordStationBody(createStation());\n+\n+        service.startScan();\n+\n+        List<DiscoveryResult> discoveredThings = service.getDiscoveredThings();\n+        assertEquals(1, discoveredThings.size());\n+        //Expected is only the type name, because a station name isn't available\n+        assertEquals(\"NAMain\", discoveredThings.get(0).getLabel());\n+    }\n+\n+    @Test\n+    public void testStartScanDiscoverWeatherStation() {\n+        NAMain station = createStation();\n+        station.setStationName(\"Neu Wulmstorf\");\n+\n+        recordStationBody(station);\n+\n+        service.startScan();\n+\n+        List<DiscoveryResult> discoveredThings = service.getDiscoveredThings();\n+        assertEquals(1, discoveredThings.size());\n+        //Expected is the type name + station name, because both is available", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg0NTUxNA=="}, "originalCommit": {"oid": "f44aa0cb96d9c06df82ea502d7d9de37d396fa09"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4718, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}