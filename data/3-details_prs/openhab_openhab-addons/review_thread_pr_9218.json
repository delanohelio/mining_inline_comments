{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyMjcyMzMz", "number": 9218, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozMTowNlrOFCh1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyODo1OFrOFS6BUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTk1NzYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozMTowNlrOIBvqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowMjowOVrOIC8Jaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMDMyMA==", "bodyText": "Default is 35 what does that refer to?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538700320", "createdAt": "2020-12-08T18:31:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5MDEzNw==", "bodyText": "This looks to be a typo in the readme, as it should be 36 for the default for what Google sends as the HUE when asked for white. Will resolve this after I confirm and fix the typo.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538990137", "createdAt": "2020-12-09T04:06:18Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMDMyMA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1MzUxNQ==", "bodyText": "FIXED: was meant to be 35 so fixed typo.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r539953515", "createdAt": "2020-12-10T08:02:09Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMDMyMA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTk3ODUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozNDozNFrOIBv39Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNzoxODowNlrOII9Jfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ==", "bodyText": "Why don't you send the command directly when the user pressed the UI button?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538703861", "createdAt": "2020-12-08T18:34:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5MjYzNQ==", "bodyText": "It does do that as well. The idea was select the command and it gets sent instantly when selected, then if you want to repeat the command the button sends it as many times as you wish. The result is less controls on a sitemap that allow access to all the commands, which most people will never use the commands.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538992635", "createdAt": "2020-12-09T04:14:01Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk2NzA5Mw==", "bodyText": "Understood. The problem I see here is that you are implementing an UI feature in the data model, which isn't really a good approach. Depending on the UI, the commands are rendered as individual buttons. I think you refer to a drop down field?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541967093", "createdAt": "2020-12-13T17:22:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzAzNjg3OQ==", "bodyText": "I use a sitemap with a selection item for testing, but I actually never use these myself. Having looked at the commands, the only ones which can not be done any other way is mode_speed_up and mode_speed_down.\nSo I guess the choices are:\n\nThrow away the two channels and remove the code.\nLeave as is.\n\nIf the code is thrown away it can then be added by anyone in the future to move to using trigger? channels which is probably the way forward having not used them before.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r543036879", "createdAt": "2020-12-15T04:27:14Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE1MDkzMQ==", "bodyText": "Did you try Switch?\nSwitch item=Dusk_LED label=\"Sonne\" is rendered like this in Basic UI:\n\nWould that be practical for your use case?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r543150931", "createdAt": "2020-12-15T08:43:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE1NzExOQ==", "bodyText": "Yes that would be practical as it is a 1 way protocol, just like a dumb IR remote. The switch should be a momentary action and not a latching ON and OFF state. What is the best way to implement that so it appears in the new UI by default? NOTE I changed the channels to Switch types, however I am thinking you may be suggesting another way?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r544157119", "createdAt": "2020-12-16T09:48:42Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE2MDkzOQ==", "bodyText": "To achieve the button view as in above screenshot, you need to make the Channel of type String and define state options in the XML file. Each state option will be rendered to a button. In the .sitemap file, the type must be Switch: Switch item=Dusk_LED label=\"Sonne\"", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r544160939", "createdAt": "2020-12-16T09:54:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2MTkxMA==", "bodyText": "I made the change and it works as a drop down list in the new V3 UI, I tried to get the switches as per your post by using the UI to change the item to a Switch and all it gave was a ON and OFF ability. Anyway it works, I'm happy with it as I don't use the feature. Thanks for your help with this area and also doing the review.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r544961910", "createdAt": "2020-12-17T10:03:01Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI2MTM3NA==", "bodyText": "Ok, I'm not aware that there is any difference in Basic UI concerning the rendering of buttons between 2.5 and 3.x...", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r546261374", "createdAt": "2020-12-19T17:18:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwMzg2MQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTk4NzM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozNTo1NlrOIBv90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozNTo1NlrOIBv90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwNTM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is caused by the time it takes to transmit the desired setting to the globe * by how many times the hub repeats transmitting the setting.\n          \n          \n            \n            This is caused by the time it takes to transmit the desired setting to the globe multiplied by how many times the hub repeats transmitting the setting.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538705362", "createdAt": "2020-12-08T18:35:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |\n+| sendCommand | Switch | Sends the selected command. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe * by how many times the hub repeats transmitting the setting.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MTk5Mzc0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozNjo1OFrOIBwB0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowNDowOFrOIC8NYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwNjM4NQ==", "bodyText": "This is all rendered in one paragraph. You could make it a list.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538706385", "createdAt": "2020-12-08T18:36:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |\n+| sendCommand | Switch | Sends the selected command. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe * by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n+\n+Settings for the radio tab found in the esp control panel using your browser, mine are:\n+\n+Packet repeats = 12 (if you only turn 1 globe on or off it uses this value)\n+Packet repeat throttle threshold= 200\n+Packet repeat throttle sensitivity = 0\n+Packet repeat minimum = 8 (When turning multiple globes on and off it will use this value as it throttles the repeats back to reduce latency/delay between each globe)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1NDUyOQ==", "bodyText": "DONE.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r539954529", "createdAt": "2020-12-10T08:04:08Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |\n+| sendCommand | Switch | Sends the selected command. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe * by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n+\n+Settings for the radio tab found in the esp control panel using your browser, mine are:\n+\n+Packet repeats = 12 (if you only turn 1 globe on or off it uses this value)\n+Packet repeat throttle threshold= 200\n+Packet repeat throttle sensitivity = 0\n+Packet repeat minimum = 8 (When turning multiple globes on and off it will use this value as it throttles the repeats back to reduce latency/delay between each globe)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwNjM4NQ=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAwMjk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozODoyN1rOIBwHww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoyNTozOVrOIEXmHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwNzkwNw==", "bodyText": "Can you add the \"Full Example\" section like in other bindings?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538707907", "createdAt": "2020-12-08T18:38:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |\n+| sendCommand | Switch | Sends the selected command. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe * by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n+\n+Settings for the radio tab found in the esp control panel using your browser, mine are:\n+\n+Packet repeats = 12 (if you only turn 1 globe on or off it uses this value)\n+Packet repeat throttle threshold= 200\n+Packet repeat throttle sensitivity = 0\n+Packet repeat minimum = 8 (When turning multiple globes on and off it will use this value as it throttles the repeats back to reduce latency/delay between each globe)\n+\n+## Important for Textual Configuration\n+\n+The binding requires things to have a specific format for the unique ID, the auto discovery does this for you.\n+\n+```\n+espmilighthub:ThingType:broker:ThingUID\n+```\n+\n+You need to add the Device ID and Group ID together to create the things unique ID.\n+The DeviceID is different for each remotes.\n+The GroupID can be 0 (all channels on the remote), or 1 to 8 for each of the individual channels on the remote).\n+If you do not understand this please use auto discovery to do it for you. \n+\n+The formula is\n+DeviceID + GroupID = ThingUID\n+\n+For example:\n+\n+| Device ID | Group ID |ThingUID  | \n+|-----------|----------|----------|\n+| 0xC210    | 1        | 0xC2101  | \n+| 0xB4CA    | 4        | 0xB4CA4  | \n+| 0xB4CA    | 8        | 0xB4CA8  |\n+| 0xB4CA    | 0        | 0xB4CA0  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTgwNA==", "bodyText": "DONE.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541451804", "createdAt": "2020-12-12T00:25:39Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,156 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and connecting them with 7 wires, they can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups so you can have individual control over an entire house of Milight globes without multiple bridges.\n++ If using the Milight remotes to control the globes with this binding can update the openHAB controls the moment a key is pressed on the remote.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this linux command to watch all MQTT topics from milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes. The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next make sure you have moved a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page to create a MQTT message.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `defaultCommand` | When the send command button is pressed, if no selection is made from the command channel then use this. | Y | night_mode |\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 36 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | `Night Mode` is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode locks out some controls of a physical remote so this is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| level | Dimmer | Level changes the brightness of the globe. |\n+| colourTemperature | Dimmer | Change from cool to warm white with this control. |\n+| colour | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| discoMode | String | Switch to a Disco mode directly from a drop down list. |\n+| bulbMode | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| command | String | Choose the command from this list to send to the globe, then press the `sendCommand` button to send it as many times as you wish. |\n+| sendCommand | Switch | Sends the selected command. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe * by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n+\n+Settings for the radio tab found in the esp control panel using your browser, mine are:\n+\n+Packet repeats = 12 (if you only turn 1 globe on or off it uses this value)\n+Packet repeat throttle threshold= 200\n+Packet repeat throttle sensitivity = 0\n+Packet repeat minimum = 8 (When turning multiple globes on and off it will use this value as it throttles the repeats back to reduce latency/delay between each globe)\n+\n+## Important for Textual Configuration\n+\n+The binding requires things to have a specific format for the unique ID, the auto discovery does this for you.\n+\n+```\n+espmilighthub:ThingType:broker:ThingUID\n+```\n+\n+You need to add the Device ID and Group ID together to create the things unique ID.\n+The DeviceID is different for each remotes.\n+The GroupID can be 0 (all channels on the remote), or 1 to 8 for each of the individual channels on the remote).\n+If you do not understand this please use auto discovery to do it for you. \n+\n+The formula is\n+DeviceID + GroupID = ThingUID\n+\n+For example:\n+\n+| Device ID | Group ID |ThingUID  | \n+|-----------|----------|----------|\n+| 0xC210    | 1        | 0xC2101  | \n+| 0xB4CA    | 4        | 0xB4CA4  | \n+| 0xB4CA    | 8        | 0xB4CA8  |\n+| 0xB4CA    | 0        | 0xB4CA0  |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwNzkwNw=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAwODAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODozOToyMFrOIBwLKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowODoxNVrOIC8WYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwODc3Ng==", "bodyText": "\"Convention\"? Please add an empty line before and after the name tag, like in the other bindings' pom.xml.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538708776", "createdAt": "2020-12-08T18:39:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/pom.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>org.openhab.binding.mqtt.espmilighthub</artifactId>\n+  <name>openHAB Add-ons :: Bundles :: MQTT EspMilightHub Convention</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1NjgzNA==", "bodyText": "DONE: Removed word \"Convention\" and added newlines.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r539956834", "createdAt": "2020-12-10T08:08:15Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/pom.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>org.openhab.binding.mqtt.espmilighthub</artifactId>\n+  <name>openHAB Add-ons :: Bundles :: MQTT EspMilightHub Convention</name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwODc3Ng=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAxMzA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0MDoxOFrOIBwOTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0MDoxOFrOIBwOTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<ThingTypeUID>(Arrays.asList(\n          \n          \n            \n                        THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB));\n          \n          \n            \n                public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(\n          \n          \n            \n                        THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB);", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538709581", "createdAt": "2020-12-08T18:40:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link EspMilightHubBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubBindingConstants {\n+    public static final String BINDING_ID = \"mqtt\";\n+    public static final String STATES_BASE_TOPIC = \"milight/states/\";\n+    public static final String COMMANDS_BASE_TOPIC = \"milight/commands/\";\n+\n+    // List of all Thing Type UIDs\n+    public static final ThingTypeUID THING_TYPE_RGB_CCT = new ThingTypeUID(BINDING_ID, \"rgb_cct\");\n+    public static final ThingTypeUID THING_TYPE_CCT = new ThingTypeUID(BINDING_ID, \"cct\");\n+    public static final ThingTypeUID THING_TYPE_RGBW = new ThingTypeUID(BINDING_ID, \"rgbw\");\n+    public static final ThingTypeUID THING_TYPE_RGB = new ThingTypeUID(BINDING_ID, \"rgb\");\n+    public static final ThingTypeUID THING_TYPE_FUT089 = new ThingTypeUID(BINDING_ID, \"fut089\");\n+    public static final ThingTypeUID THING_TYPE_FUT091 = new ThingTypeUID(BINDING_ID, \"fut091\");\n+\n+    public static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = new HashSet<ThingTypeUID>(Arrays.asList(\n+            THING_TYPE_RGBW, THING_TYPE_RGB_CCT, THING_TYPE_FUT089, THING_TYPE_FUT091, THING_TYPE_CCT, THING_TYPE_RGB));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAxNTI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0MDo0MlrOIBwP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0ODo0MlrOIEYDlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTk3MA==", "bodyText": "Can these be removed?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538709970", "createdAt": "2020-12-08T18:40:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.SUPPORTED_THING_TYPES;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.handler.EspMilightHubHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class EspMilightHubHandlerFactory extends BaseThingHandlerFactory {\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public EspMilightHubHandlerFactory(final @Reference ThingRegistry thingRegistry) {\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Activate\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Deactivate\n+    @Override\n+    protected void deactivate(ComponentContext componentContext) {\n+        super.deactivate(componentContext);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTM0OQ==", "bodyText": "Yes and DONE. These were in one of the MQTT Homie? bindings that I used as an example to work from.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541459349", "createdAt": "2020-12-12T00:48:42Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.SUPPORTED_THING_TYPES;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.handler.EspMilightHubHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@Component(service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class EspMilightHubHandlerFactory extends BaseThingHandlerFactory {\n+    private final ThingRegistry thingRegistry;\n+\n+    @Activate\n+    public EspMilightHubHandlerFactory(final @Reference ThingRegistry thingRegistry) {\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Activate\n+    @Override\n+    protected void activate(ComponentContext componentContext) {\n+        super.activate(componentContext);\n+    }\n+\n+    @Deactivate\n+    @Override\n+    protected void deactivate(ComponentContext componentContext) {\n+        super.deactivate(componentContext);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcwOTk3MA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAyNDg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0MjowNVrOIBwWCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxNzoyMzoxN1rOIE3DNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTU2MA==", "bodyText": "Any reason why you don't use GSON for parsing the JSON?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538711560", "createdAt": "2020-12-08T18:42:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link Helper} Removes the need for any external JSON libs\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Helper {\n+    /**\n+     * resolveJSON will return a value from any key/path that you give and the string can be terminated by any ,}\"\n+     * characters.\n+     *\n+     */\n+    public static String resolveJSON(String messageJSON, String jsonPath, int resultMaxLength) {\n+        String result = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MjQwNw==", "bodyText": "No good reason, other than I don't know that lib and this code has been used for years so it is well tested so would prefer to leave it alone until it breaks and then replace it with GSON is the way I would go.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541452407", "createdAt": "2020-12-12T00:27:48Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link Helper} Removes the need for any external JSON libs\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Helper {\n+    /**\n+     * resolveJSON will return a value from any key/path that you give and the string can be terminated by any ,}\"\n+     * characters.\n+     *\n+     */\n+    public static String resolveJSON(String messageJSON, String jsonPath, int resultMaxLength) {\n+        String result = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTU2MA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk2NzE1Nw==", "bodyText": "Ok.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541967157", "createdAt": "2020-12-13T17:23:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/Helper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link Helper} Removes the need for any external JSON libs\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class Helper {\n+    /**\n+     * resolveJSON will return a value from any key/path that you give and the string can be terminated by any ,}\"\n+     * characters.\n+     *\n+     */\n+    public static String resolveJSON(String messageJSON, String jsonPath, int resultMaxLength) {\n+        String result = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTU2MA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAzNDEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0NDoxM1rOIBwbxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0NDoxM1rOIBwbxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMzAzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(\"OFF\"));\n          \n          \n            \n                            changeChannel(CHANNEL_LEVEL, OnOffType.OFF);", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538713030", "createdAt": "2020-12-08T18:44:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String lastCommand = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(\"OFF\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjA3MTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1MTo0NlrOIBww7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1MTo0NlrOIBww7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxODQ0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<label>1 Triggers Night Mode</label>\n          \n          \n            \n            \t\t\t\t<label>1% Triggers Night Mode</label>", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538718444", "createdAt": "2020-12-08T18:51:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjA4ODM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1NToxNlrOIBw66w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMjowMjoxMVrOIEZA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyMTAwMw==", "bodyText": "You can re-use the configuration description by moving it outside of this thing-type and specify an uri atrtribute: <config-description uri=\"thing-type:[bindingname]:myConfig\">\nYou can add <config-description-ref uri=\"thing-type:[bindingname]:myConfig\" /> to the thing-type tags to use it.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538721003", "createdAt": "2020-12-08T18:55:16Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut089\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT089</label>\n+\t\t<description>Use this when your remote is the newer 8 group type called FUT089 and your globes are rgb_cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ3NTA2NA==", "bodyText": "DONE, used the Hue binding to learn from.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541475064", "createdAt": "2020-12-12T02:02:11Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut089\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT089</label>\n+\t\t<description>Use this when your remote is the newer 8 group type called FUT089 and your globes are rgb_cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyMTAwMw=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjEwODU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1Nzo1NlrOIBxHkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMjo0NTozOVrOIEZeCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyNDI0MA==", "bodyText": "This category doesn't exist. See https://www.openhab.org/docs/concepts/categories.html Please check all.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538724240", "createdAt": "2020-12-08T18:57:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut089\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT089</label>\n+\t\t<description>Use this when your remote is the newer 8 group type called FUT089 and your globes are rgb_cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut091\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT091</label>\n+\t\t<description>Use this when your remote is the newer fut091 and your globes are cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight CCT</label>\n+\t\t<description>Led globe with both cool and warm white controls</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgbw\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBW</label>\n+\t\t<description>RGB Globe with a fixed white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteThreshold\" type=\"integer\" required=\"true\" min=\"-1\" max=\"99\">\n+\t\t\t\t<label>White Threshold</label>\n+\t\t\t\t<description>RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that\n+\t\t\t\t\tif the saturation drops below, it will trigger the white mode. -1 will disable this feature.\n+\t\t\t\t</description>\n+\t\t\t\t<default>12</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGB</label>\n+\t\t<description>RGB Globe with no white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"level\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Level</label>\n+\t\t<description>Level changes the brightness of the globe.</description>\n+\t\t<category>DimmableLight</category>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk5Mzk0OA==", "bodyText": "Will do.\nI'll also create a separate PR then as I saw and used this from the merged Milight binding, see here...\nhttps://github.com/openhab/openhab-addons/blob/main/bundles/org.openhab.binding.milight/src/main/resources/OH-INF/thing/channels.xml", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538993948", "createdAt": "2020-12-09T04:18:16Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut089\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT089</label>\n+\t\t<description>Use this when your remote is the newer 8 group type called FUT089 and your globes are rgb_cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut091\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT091</label>\n+\t\t<description>Use this when your remote is the newer fut091 and your globes are cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight CCT</label>\n+\t\t<description>Led globe with both cool and warm white controls</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgbw\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBW</label>\n+\t\t<description>RGB Globe with a fixed white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteThreshold\" type=\"integer\" required=\"true\" min=\"-1\" max=\"99\">\n+\t\t\t\t<label>White Threshold</label>\n+\t\t\t\t<description>RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that\n+\t\t\t\t\tif the saturation drops below, it will trigger the white mode. -1 will disable this feature.\n+\t\t\t\t</description>\n+\t\t\t\t<default>12</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGB</label>\n+\t\t<description>RGB Globe with no white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"level\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Level</label>\n+\t\t<description>Level changes the brightness of the globe.</description>\n+\t\t<category>DimmableLight</category>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyNDI0MA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ4MjUwNw==", "bodyText": "DONE: also raised two new PR as it was also in Hue binding.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r541482507", "createdAt": "2020-12-12T02:45:39Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut089\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT089</label>\n+\t\t<description>Use this when your remote is the newer 8 group type called FUT089 and your globes are rgb_cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut091\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT091</label>\n+\t\t<description>Use this when your remote is the newer fut091 and your globes are cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight CCT</label>\n+\t\t<description>Led globe with both cool and warm white controls</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgbw\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBW</label>\n+\t\t<description>RGB Globe with a fixed white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteThreshold\" type=\"integer\" required=\"true\" min=\"-1\" max=\"99\">\n+\t\t\t\t<label>White Threshold</label>\n+\t\t\t\t<description>RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that\n+\t\t\t\t\tif the saturation drops below, it will trigger the white mode. -1 will disable this feature.\n+\t\t\t\t</description>\n+\t\t\t\t<default>12</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGB</label>\n+\t\t<description>RGB Globe with no white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"level\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Level</label>\n+\t\t<description>Level changes the brightness of the globe.</description>\n+\t\t<category>DimmableLight</category>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyNDI0MA=="}, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjExNjU5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1ODo1OVrOIBxMgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo1ODo1OVrOIBxMgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyNTUwNA==", "bodyText": "This can be human readable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<option value=\"next_mode\">next_mode</option>\n          \n          \n            \n            \t\t\t\t<option value=\"next_mode\">Next Mode</option>", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r538725504", "createdAt": "2020-12-08T18:58:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,425 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mqtt\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"rgb_cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBCCT</label>\n+\t\t<description>Led globe with full Colour, and both cool and warm whites.</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut089\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT089</label>\n+\t\t<description>Use this when your remote is the newer 8 group type called FUT089 and your globes are rgb_cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Favourite White</label>\n+\t\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\t\tcolour.\n+\t\t\t\t</description>\n+\t\t\t\t<default>200</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"fut091\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight FUT091</label>\n+\t\t<description>Use this when your remote is the newer fut091 and your globes are cct</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"cct\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight CCT</label>\n+\t\t<description>Led globe with both cool and warm white controls</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colourTemperature\" typeId=\"colourTemperature\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t\t</description>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgbw\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGBW</label>\n+\t\t<description>RGB Globe with a fixed white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t\t<label>White Hue</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 0 for Alexa, or 36 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>35</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t\t<label>White Saturation</label>\n+\t\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t\t</description>\n+\t\t\t\t<default>32</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"whiteThreshold\" type=\"integer\" required=\"true\" min=\"-1\" max=\"99\">\n+\t\t\t\t<label>White Threshold</label>\n+\t\t\t\t<description>RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that\n+\t\t\t\t\tif the saturation drops below, it will trigger the white mode. -1 will disable this feature.\n+\t\t\t\t</description>\n+\t\t\t\t<default>12</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"rgb\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"broker\"/>\n+\t\t\t<bridge-type-ref id=\"systemBroker\"/>\n+\t\t</supported-bridge-type-refs>\n+\t\t<label>Milight RGB</label>\n+\t\t<description>RGB Globe with no white</description>\n+\t\t<category>Lightbulb</category>\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t\t<channel id=\"colour\" typeId=\"colour\"/>\n+\t\t\t<channel id=\"discoMode\" typeId=\"discoMode\"/>\n+\t\t\t<channel id=\"bulbMode\" typeId=\"bulbMode\"/>\n+\t\t\t<channel id=\"command\" typeId=\"command\"/>\n+\t\t\t<channel id=\"sendCommand\" typeId=\"sendCommand\"/>\n+\t\t</channels>\n+\t\t<config-description>\n+\n+\t\t\t<parameter name=\"defaultCommand\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Default Command</label>\n+\t\t\t\t<description>When the send command button is pressed, if no selection is made from the command channel then use this\n+\t\t\t\t\tcommand by default. TIP: use \"set_white\" for RGBW globes to set back to white light quickly.\n+\t\t\t\t</description>\n+\t\t\t\t<default>night_mode</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t\t</description>\n+\t\t\t\t<default>false</default>\n+\t\t\t</parameter>\n+\n+\t\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t\t<label>Default to the lowest level of light when the power fails.</label>\n+\t\t\t\t<description>If lights loose power from the power switch OR a power outage, they will default to the lowest\n+\t\t\t\t\tbrightness.\n+\t\t\t\t</description>\n+\t\t\t\t<default>true</default>\n+\t\t\t</parameter>\n+\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"level\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Level</label>\n+\t\t<description>Level changes the brightness of the globe.</description>\n+\t\t<category>DimmableLight</category>\n+\t\t<tags>\n+\t\t\t<tag>Lighting</tag>\n+\t\t</tags>\n+\t</channel-type>\n+\n+\t<channel-type id=\"colourTemperature\">\n+\t\t<item-type>Dimmer</item-type>\n+\t\t<label>Colour Temperature</label>\n+\t\t<description>Change from cool to warm white with this control.</description>\n+\t\t<category>DimmableCT</category>\n+\t</channel-type>\n+\n+\t<channel-type id=\"colour\">\n+\t\t<item-type>Color</item-type>\n+\t\t<label>Colour</label>\n+\t\t<description>Allows you to change the colour, brightness and saturation of the globe.</description>\n+\t\t<category>ColorLight</category>\n+\t\t<tags>\n+\t\t\t<tag>Lighting</tag>\n+\t\t</tags>\n+\t</channel-type>\n+\n+\t<channel-type id=\"command\" advanced=\"true\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Bulb Command</label>\n+\t\t<description>Choose the command to send to the globe then press the button to send it multiple times. Note: Not all\n+\t\t\tglobes support all commands.</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"next_mode\">next_mode</option>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d3d3e1acb0ae5b993d67f2f1417d7ffe835163a"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUwNTM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo0ODowNlrOILdCgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzozNDoyNVrOIMGOmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTAyNw==", "bodyText": "To make the binding compile, you need to rebase your branch and set the version to the upcoming openHAB version: 3.1.0-SNAPSHOT.\nHere are the commands for rebasing your branch:\nIf not already done, add the upstream openHAB addon repo as a remote to your local repo and fetch it:\ngit remote add upstream https://github.com/openhab/openhab-addons.git\ngit fetch upstream\n\nThen, you can rebase your PR's branch onto main:\ngit rebase upstream/main\n\nFinally force-push the rebased branch to this PR's branch:\ngit push origin [your branch name of this PR] --force-with-lease", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881027", "createdAt": "2020-12-25T14:48:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/pom.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1NTg2NQ==", "bodyText": "DONE, thanks for the detailed how to.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r549555865", "createdAt": "2020-12-29T03:34:25Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/pom.xml", "diffHunk": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTAyNw=="}, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUwODM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1MjoxMFrOILdD8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1MjoxMFrOILdD8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>1 Triggers Night Mode</label>\n          \n          \n            \n            \t\t\t<label>1% Triggers Night Mode</label>", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881393", "createdAt": "2020-12-25T14:52:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUwODQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1MjoyN1rOILdD_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzo1MjowN1rOIMGYfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTQwNg==", "bodyText": "Can you fix the line breaks?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881406", "createdAt": "2020-12-25T14:52:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1ODM5OQ==", "bodyText": "DONE", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r549558399", "createdAt": "2020-12-29T03:52:07Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTQwNg=="}, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUwODc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1Mjo1NFrOILdEHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1Mjo1NFrOILdEHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>1 Triggers Night Mode</label>\n          \n          \n            \n            \t\t\t<label>1% Triggers Night Mode</label>", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881439", "createdAt": "2020-12-25T14:52:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUwOTU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1Mzo0OFrOILdEgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1Mzo0OFrOILdEgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTUzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<label>1 Triggers Night Mode</label>\n          \n          \n            \n            \t\t\t<label>1% Triggers Night Mode</label>", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881537", "createdAt": "2020-12-25T14:53:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\tcolour.\n+\t\t\t</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUwOTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1Mzo1OVrOILdEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzo1MTo1NlrOIMGYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTU3Nw==", "bodyText": "Can you fix the line break?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881577", "createdAt": "2020-12-25T14:53:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\tcolour.\n+\t\t\t</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1ODM3MA==", "bodyText": "DONE", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r549558370", "createdAt": "2020-12-29T03:51:56Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\tcolour.\n+\t\t\t</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTU3Nw=="}, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUxMDAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNDo1NDoxMlrOILdEtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwMzo1MTo0N1rOIMGYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTU5MQ==", "bodyText": "Can you fix the line break?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r548881591", "createdAt": "2020-12-25T14:54:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\tcolour.\n+\t\t\t</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteThreshold\" type=\"integer\" required=\"true\" min=\"-1\" max=\"99\">\n+\t\t\t<label>White Threshold</label>\n+\t\t\t<description>RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that\n+\t\t\t\tif\n+\t\t\t\tthe saturation drops below, it will trigger the white mode. -1 will disable this feature.\n+\t\t\t</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU1ODM1OQ==", "bodyText": "DONE", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r549558359", "createdAt": "2020-12-29T03:51:47Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When one of the shortcuts triggers white mode, use this for the colour white instead of the default\n+\t\t\t\tcolour.\n+\t\t\t</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 0 for Alexa, or 35 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set\n+\t\t\t\tto -1 to disable, 100 for Alexa or 32 for Google Home.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1 Triggers Night Mode</label>\n+\t\t\t<description>Night Mode is a much lower level of light and this allows it to be auto selected when your fader/slider\n+\t\t\t\tmoves to 1%. NOTE: Night mode locks out some controls of a physical remote.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power from the power switch being cycled OR a power outage, the lights will default to\n+\t\t\t\tthe lowest\n+\t\t\t\tbrightness to prevent waking people.\n+\t\t\t</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteThreshold\" type=\"integer\" required=\"true\" min=\"-1\" max=\"99\">\n+\t\t\t<label>White Threshold</label>\n+\t\t\t<description>RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that\n+\t\t\t\tif\n+\t\t\t\tthe saturation drops below, it will trigger the white mode. -1 will disable this feature.\n+\t\t\t</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTU5MQ=="}, "originalCommit": {"oid": "beba5b5740c1b1cd9e31a7eb09a359bcc98a2f3b"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgyNDM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxMToxNFrOIV3QcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOToxOToxM1rOIXNw9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjMzNg==", "bodyText": "I think the use of ++index makes this harder to understand. It doesn't appear that incrementing the index even matters here, so please just rewrite this without using ++.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559796336", "createdAt": "2021-01-18T21:11:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.discovery;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mqtt.discovery.AbstractMQTTDiscovery;\n+import org.openhab.binding.mqtt.discovery.MQTTTopicDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubDiscoveryService} is responsible for finding globes\n+ * and setting them up for the handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.mqttespmilighthub\")\n+@NonNullByDefault\n+public class EspMilightHubDiscoveryService extends AbstractMQTTDiscovery {\n+    protected final MQTTTopicDiscoveryService discoveryService;\n+\n+    @Activate\n+    public EspMilightHubDiscoveryService(@Reference MQTTTopicDiscoveryService discoveryService) {\n+        super(SUPPORTED_THING_TYPES, 3, true, STATES_BASE_TOPIC + \"#\");\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    @Override\n+    protected MQTTTopicDiscoveryService getDiscoveryService() {\n+        return discoveryService;\n+    }\n+\n+    @Override\n+    public void receivedMessage(ThingUID connectionBridge, MqttBrokerConnection connection, String topic,\n+            byte[] payload) {\n+        resetTimeout();\n+        if (topic.startsWith(STATES_BASE_TOPIC)) {\n+            String cutTopic = topic.replace(STATES_BASE_TOPIC, \"\");\n+            int index = cutTopic.indexOf(\"/\");\n+            if (index != -1) // -1 means \"not found\"\n+            {\n+                String remoteCode = (cutTopic.substring(0, index)); // Store the remote code for use later\n+                cutTopic = topic.replace(STATES_BASE_TOPIC + remoteCode + \"/\", \"\");\n+                index = cutTopic.indexOf(\"/\");\n+                if (index != -1) {\n+                    String globeType = (cutTopic.substring(0, index));\n+                    String remoteGroupID = (cutTopic.substring(++index, ++index));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg2NDY4OQ==", "bodyText": "It is needed. I could re-write it as this which does the same thing and may be easier to understand.\nString remoteGroupID = (cutTopic.substring(index+1, index+2));\nindex++ This means use the variable and then increment it AFTER the value is used.\n++index This means increment the variable BEFORE it is used.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560864689", "createdAt": "2021-01-20T10:48:32Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.discovery;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mqtt.discovery.AbstractMQTTDiscovery;\n+import org.openhab.binding.mqtt.discovery.MQTTTopicDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubDiscoveryService} is responsible for finding globes\n+ * and setting them up for the handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.mqttespmilighthub\")\n+@NonNullByDefault\n+public class EspMilightHubDiscoveryService extends AbstractMQTTDiscovery {\n+    protected final MQTTTopicDiscoveryService discoveryService;\n+\n+    @Activate\n+    public EspMilightHubDiscoveryService(@Reference MQTTTopicDiscoveryService discoveryService) {\n+        super(SUPPORTED_THING_TYPES, 3, true, STATES_BASE_TOPIC + \"#\");\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    @Override\n+    protected MQTTTopicDiscoveryService getDiscoveryService() {\n+        return discoveryService;\n+    }\n+\n+    @Override\n+    public void receivedMessage(ThingUID connectionBridge, MqttBrokerConnection connection, String topic,\n+            byte[] payload) {\n+        resetTimeout();\n+        if (topic.startsWith(STATES_BASE_TOPIC)) {\n+            String cutTopic = topic.replace(STATES_BASE_TOPIC, \"\");\n+            int index = cutTopic.indexOf(\"/\");\n+            if (index != -1) // -1 means \"not found\"\n+            {\n+                String remoteCode = (cutTopic.substring(0, index)); // Store the remote code for use later\n+                cutTopic = topic.replace(STATES_BASE_TOPIC + remoteCode + \"/\", \"\");\n+                index = cutTopic.indexOf(\"/\");\n+                if (index != -1) {\n+                    String globeType = (cutTopic.substring(0, index));\n+                    String remoteGroupID = (cutTopic.substring(++index, ++index));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjMzNg=="}, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIxMzY4NQ==", "bodyText": "I'm aware of the difference between index++ and ++index. The issue I have is that you are using ++index for each parameter. Knowing the evaluation order ( not only the ++index but of each of the parameters relative to each other ) is more knowledge than I think is necessary for an eventual code maintainer to be required to have.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                String remoteGroupID = (cutTopic.substring(++index, ++index));\n          \n          \n            \n                                String remoteGroupID = (cutTopic.substring(index+1, index+2));\n          \n      \n    \n    \n  \n\nKeep it simple please.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r561213685", "createdAt": "2021-01-20T19:19:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/discovery/EspMilightHubDiscoveryService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.discovery;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.mqtt.discovery.AbstractMQTTDiscovery;\n+import org.openhab.binding.mqtt.discovery.MQTTTopicDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link EspMilightHubDiscoveryService} is responsible for finding globes\n+ * and setting them up for the handlers.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.mqttespmilighthub\")\n+@NonNullByDefault\n+public class EspMilightHubDiscoveryService extends AbstractMQTTDiscovery {\n+    protected final MQTTTopicDiscoveryService discoveryService;\n+\n+    @Activate\n+    public EspMilightHubDiscoveryService(@Reference MQTTTopicDiscoveryService discoveryService) {\n+        super(SUPPORTED_THING_TYPES, 3, true, STATES_BASE_TOPIC + \"#\");\n+        this.discoveryService = discoveryService;\n+    }\n+\n+    @Override\n+    protected MQTTTopicDiscoveryService getDiscoveryService() {\n+        return discoveryService;\n+    }\n+\n+    @Override\n+    public void receivedMessage(ThingUID connectionBridge, MqttBrokerConnection connection, String topic,\n+            byte[] payload) {\n+        resetTimeout();\n+        if (topic.startsWith(STATES_BASE_TOPIC)) {\n+            String cutTopic = topic.replace(STATES_BASE_TOPIC, \"\");\n+            int index = cutTopic.indexOf(\"/\");\n+            if (index != -1) // -1 means \"not found\"\n+            {\n+                String remoteCode = (cutTopic.substring(0, index)); // Store the remote code for use later\n+                cutTopic = topic.replace(STATES_BASE_TOPIC + remoteCode + \"/\", \"\");\n+                index = cutTopic.indexOf(\"/\");\n+                if (index != -1) {\n+                    String globeType = (cutTopic.substring(0, index));\n+                    String remoteGroupID = (cutTopic.substring(++index, ++index));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjMzNg=="}, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgyNDk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxMTozNVrOIV3Qxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxMTozNVrOIV3Qxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                savedLevel = savedLevel.add(new BigDecimal(10));\n          \n          \n            \n                                savedLevel = savedLevel.add(BigDecimal.TEN);", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559796423", "createdAt": "2021-01-18T21:11:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgyNTQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxMTo1M1rOIV3RHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxMTo1M1rOIV3RHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NjUxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                savedLevel = savedLevel.subtract(new BigDecimal(10));\n          \n          \n            \n                                savedLevel = savedLevel.subtract(BigDecimal.TEN);", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559796511", "createdAt": "2021-01-18T21:11:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgyODc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxMzo0M1rOIV3TDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMDo1NzozNVrOIW40mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NzAwNQ==", "bodyText": "Please make new BigDecimal(100) a constant so you can reuse it.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559797005", "createdAt": "2021-01-18T21:13:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg3MDU1NQ==", "bodyText": "DONE.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560870555", "createdAt": "2021-01-20T10:57:35Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NzAwNQ=="}, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgzMzQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxNTo1MFrOIV3Vqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxNTo1MFrOIV3Vqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5NzY3NA==", "bodyText": "== shouldn't be used in this case since PercentType isn't a primitive, multiton, or enum.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (hsb.getBrightness() == PercentType.ZERO) {\n          \n          \n            \n                        } else if (PercentType.ZERO.equals(hsb.getBrightness())) {", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559797674", "createdAt": "2021-01-18T21:15:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgzNTg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxNzowNVrOIV3XIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMTowOToxNFrOIW5P8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODA0OA==", "bodyText": "Please cache (PercentType) command to a local variable so you don't have to cast it several times.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559798048", "createdAt": "2021-01-18T21:17:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            if (((PercentType) command).intValue() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg3NzU1Mw==", "bodyText": "DONE.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560877553", "createdAt": "2021-01-20T11:09:14Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            if (((PercentType) command).intValue() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODA0OA=="}, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUyNDgzOTkyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOFQyMToxODo0M1rOIV3ZUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMToxNTo0MlrOIW5ejQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODYxMQ==", "bodyText": "Would this be counted as a configuration error? If so you should set the thing offline.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r559798611", "createdAt": "2021-01-18T21:18:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            if (((PercentType) command).intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (((PercentType) command).intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = ((PercentType) command).toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                logger.warn(\"dimmedCT must be greater than the favourite white value.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDg4MTI5Mw==", "bodyText": "Agree, changed it.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r560881293", "createdAt": "2021-01-20T11:15:42Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = new BigDecimal(100);\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(new BigDecimal(100)).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(new BigDecimal(10));\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(new BigDecimal(10));\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (hsb.getBrightness() == PercentType.ZERO) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            if (((PercentType) command).intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (((PercentType) command).intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = ((PercentType) command).toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                logger.warn(\"dimmedCT must be greater than the favourite white value.\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTc5ODYxMQ=="}, "originalCommit": {"oid": "d5f0a51c0fd5c103893a8a6b881d951a6a064599"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MTAwNDgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwMjowNzowOVrOIYRkAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODoxODo1MVrOIYZwxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNDQ4MQ==", "bodyText": "Why are you updating the same channel twice?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562324481", "createdAt": "2021-01-22T02:07:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46409b7ea775ea364819798a29662e234434172e"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ1ODgyMg==", "bodyText": "Fixed, no reason to do it twice.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562458822", "createdAt": "2021-01-22T08:18:51Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNDQ4MQ=="}, "originalCommit": {"oid": "46409b7ea775ea364819798a29662e234434172e"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MTAxMDc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwMjowODoxM1rOIYRnIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwMjowODoxM1rOIYRnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNTI4MQ==", "bodyText": "Please use the correct ThingStatusDetail, also please return immediately when there is a config error.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n          \n          \n            \n                                    \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n          \n          \n            \n                        }\n          \n          \n            \n                            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n          \n          \n            \n                                    \"The dimmedCT config value must be greater than the favourite White value.\");\n          \n          \n            \n                            return;\n          \n          \n            \n                        }", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562325281", "createdAt": "2021-01-22T02:08:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                        \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46409b7ea775ea364819798a29662e234434172e"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MTAyMDMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwMjoxMDoxMVrOIYRsbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwODoxMjoxMFrOIYZkFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNjYzOA==", "bodyText": "Please move this variable to before line 290 so that you can use it there too.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562326638", "createdAt": "2021-01-22T02:10:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                        \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n+            }\n+        }\n+        if (getBridge() == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    \"Globe must have a valid bridge selected before it can come online.\");\n+        } else {\n+            globeType = thing.getThingTypeUID().getId();// eg rgb_cct\n+            String globeLocation = this.getThing().getUID().getId();// eg 0x014\n+            remotesGroupID = globeLocation.substring(globeLocation.length() - 1, globeLocation.length());// eg 4\n+            String remotesIDCode = globeLocation.substring(0, globeLocation.length() - 1);// eg 0x01\n+            fullCommandTopic = COMMANDS_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            fullStatesTopic = STATES_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            // Need to remove the lowercase x from 0x12AB in case it contains all numbers\n+            String caseCheck = globeLocation.substring(2, globeLocation.length() - 1);\n+            if (!caseCheck.equals(caseCheck.toUpperCase())) {\n+                logger.warn(\n+                        \"The milight globe {}{} is using lowercase for the remote code when the hub needs UPPERCASE\",\n+                        remotesIDCode, remotesGroupID);\n+            }\n+            Bridge localBridge = getBridge();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46409b7ea775ea364819798a29662e234434172e"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQ1NTU3NQ==", "bodyText": "DONE, thanks for spotting.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r562455575", "createdAt": "2021-01-22T08:12:10Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, new PercentType(0));\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                        \"The dimmedCT config value must be greater than the favouriteWhite value.\");\n+            }\n+        }\n+        if (getBridge() == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    \"Globe must have a valid bridge selected before it can come online.\");\n+        } else {\n+            globeType = thing.getThingTypeUID().getId();// eg rgb_cct\n+            String globeLocation = this.getThing().getUID().getId();// eg 0x014\n+            remotesGroupID = globeLocation.substring(globeLocation.length() - 1, globeLocation.length());// eg 4\n+            String remotesIDCode = globeLocation.substring(0, globeLocation.length() - 1);// eg 0x01\n+            fullCommandTopic = COMMANDS_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            fullStatesTopic = STATES_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            // Need to remove the lowercase x from 0x12AB in case it contains all numbers\n+            String caseCheck = globeLocation.substring(2, globeLocation.length() - 1);\n+            if (!caseCheck.equals(caseCheck.toUpperCase())) {\n+                logger.warn(\n+                        \"The milight globe {}{} is using lowercase for the remote code when the hub needs UPPERCASE\",\n+                        remotesIDCode, remotesGroupID);\n+            }\n+            Bridge localBridge = getBridge();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjMyNjYzOA=="}, "originalCommit": {"oid": "46409b7ea775ea364819798a29662e234434172e"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0NjY1NzcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yM1QxNzo1NjowN1rOIZFzFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMToyMzowNFrOIaBJTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE4MDMxMA==", "bodyText": "Isn't this constant defined in the constants file of the mqtt binding? Please use that constant instead.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r563180310", "createdAt": "2021-01-23T17:56:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link EspMilightHubBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubBindingConstants {\n+    public static final String BINDING_ID = \"mqtt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE1MjY1NQ==", "bodyText": "DONE. required making it public in the mqtt binding.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564152655", "createdAt": "2021-01-26T01:23:04Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/EspMilightHubBindingConstants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link EspMilightHubBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubBindingConstants {\n+    public static final String BINDING_ID = \"mqtt\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzE4MDMxMA=="}, "originalCommit": {"oid": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0Nzk3NDQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxOTozODo0NVrOIZPf7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMDo1Nzo1NVrOIaAi7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMzOTI0Ng==", "bodyText": "This is too long for a label, try to keep it to 25 characters or less.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r563339246", "createdAt": "2021-01-24T19:38:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power, the lights will turn on to the minimum brightness.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When a shortcut triggers white mode, use this for the colour white.</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power, the lights will turn on to the minimum brightness.</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDE0MjgyOQ==", "bodyText": "DONE", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564142829", "createdAt": "2021-01-26T00:57:55Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,111 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0 https://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:mqtt:rgb\">\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power, the lights will turn on to the minimum brightness.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:cct\">\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbandcct\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"favouriteWhite\" type=\"integer\" required=\"true\" min=\"153\" max=\"370\">\n+\t\t\t<label>Favourite White</label>\n+\t\t\t<description>When a shortcut triggers white mode, use this for the colour white.</description>\n+\t\t\t<default>200</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"dimmedCT\" type=\"integer\" required=\"false\" min=\"153\" max=\"370\">\n+\t\t\t<label>Dimmed Colour Temp</label>\n+\t\t\t<description>Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable.\n+\t\t\t</description>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>\n+\t\t\t<description>If lights loose power, the lights will turn on to the minimum brightness.</description>\n+\t\t\t<default>true</default>\n+\t\t</parameter>\n+\t</config-description>\n+\n+\t<config-description uri=\"thing-type:mqtt:rgbw\">\n+\t\t<parameter name=\"whiteHue\" type=\"integer\" required=\"true\" min=\"-1\" max=\"360\">\n+\t\t\t<label>White Hue</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>35</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"whiteSat\" type=\"integer\" required=\"true\" min=\"-1\" max=\"100\">\n+\t\t\t<label>White Saturation</label>\n+\t\t\t<description>When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS.\n+\t\t\t</description>\n+\t\t\t<default>32</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"oneTriggersNightMode\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>1% Triggers Night Mode</label>\n+\t\t\t<description>1% on a slider will trigger the Night Mode.</description>\n+\t\t\t<default>false</default>\n+\t\t</parameter>\n+\n+\t\t<parameter name=\"powerFailsToMinimum\" type=\"boolean\" required=\"true\">\n+\t\t\t<label>When globes are off, default to the lowest level of light if the power fails.</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMzOTI0Ng=="}, "originalCommit": {"oid": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0Nzk3NzQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNFQxOTo0MjoxMVrOIZPhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwMDo0NToxNFrOIaATQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMzOTYzNQ==", "bodyText": "Why are you hardcoding the broker thing name here? Isn't the broker accessible through the bridge thing?", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r563339635", "createdAt": "2021-01-24T19:42:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"The dimmedCT config value must be greater than the favourite White value.\");\n+                return;\n+            }\n+        }\n+        Bridge localBridge = getBridge();\n+        if (localBridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    \"Globe must have a valid bridge selected before it can come online.\");\n+            return;\n+        } else {\n+            globeType = thing.getThingTypeUID().getId();// eg rgb_cct\n+            String globeLocation = this.getThing().getUID().getId();// eg 0x014\n+            remotesGroupID = globeLocation.substring(globeLocation.length() - 1, globeLocation.length());// eg 4\n+            String remotesIDCode = globeLocation.substring(0, globeLocation.length() - 1);// eg 0x01\n+            fullCommandTopic = COMMANDS_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            fullStatesTopic = STATES_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            // Need to remove the lowercase x from 0x12AB in case it contains all numbers\n+            String caseCheck = globeLocation.substring(2, globeLocation.length() - 1);\n+            if (!caseCheck.equals(caseCheck.toUpperCase())) {\n+                logger.warn(\n+                        \"The milight globe {}{} is using lowercase for the remote code when the hub needs UPPERCASE\",\n+                        remotesIDCode, remotesGroupID);\n+            }\n+            channelPrefix = BINDING_ID + \":\" + globeType + \":\" + localBridge.getUID().getId() + \":\" + remotesIDCode\n+                    + remotesGroupID + \":\";\n+            connectMQTT();\n+        }\n+    }\n+\n+    private void sendMQTT(String payload) {\n+        MqttBrokerConnection localConnection = connection;\n+        if (localConnection != null) {\n+            localConnection.publish(fullCommandTopic, payload.getBytes(), 1, false);\n+        }\n+    }\n+\n+    @Override\n+    public void processMessage(String topic, byte[] payload) {\n+        String state = new String(payload, StandardCharsets.UTF_8);\n+        logger.trace(\"Recieved the following new Milight state:{}:{}\", topic, state);\n+        processIncomingState(state);\n+    }\n+\n+    @Override\n+    public void connectionStateChanged(MqttConnectionState state, @Nullable Throwable error) {\n+        logger.debug(\"MQTT brokers state changed to:{}\", state);\n+        switch (state) {\n+            case CONNECTED:\n+                updateStatus(ThingStatus.ONLINE);\n+                break;\n+            case CONNECTING:\n+            case DISCONNECTED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Bridge (broker) is not connected to your MQTT broker.\");\n+        }\n+    }\n+\n+    public void connectMQTT() {\n+        Bridge localBridge = this.getBridge();\n+        if (localBridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED,\n+                    \"Bridge is missing or offline, you need to setup a working MQTT broker first.\");\n+            return;\n+        }\n+        ThingUID thingUID = new ThingUID(new ThingTypeUID(\"mqtt\", \"broker\"), localBridge.getUID().getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEzODgxOQ==", "bodyText": "FIXED.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564138819", "createdAt": "2021-01-26T00:45:14Z", "author": {"login": "Skinah"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/src/main/java/org/openhab/binding/mqtt/espmilighthub/internal/handler/EspMilightHubHandler.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+\n+package org.openhab.binding.mqtt.espmilighthub.internal.handler;\n+\n+import static org.openhab.binding.mqtt.espmilighthub.internal.EspMilightHubBindingConstants.*;\n+\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.mqtt.espmilighthub.internal.ConfigOptions;\n+import org.openhab.binding.mqtt.espmilighthub.internal.Helper;\n+import org.openhab.binding.mqtt.handler.AbstractBrokerHandler;\n+import org.openhab.core.io.transport.mqtt.MqttBrokerConnection;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionObserver;\n+import org.openhab.core.io.transport.mqtt.MqttConnectionState;\n+import org.openhab.core.io.transport.mqtt.MqttMessageSubscriber;\n+import org.openhab.core.library.types.HSBType;\n+import org.openhab.core.library.types.IncreaseDecreaseType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingRegistry;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EspMilightHubHandler} is responsible for handling commands of the globes, which are then\n+ * sent to one of the bridges to be sent out by MQTT.\n+ *\n+ * @author Matthew Skinner - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EspMilightHubHandler extends BaseThingHandler implements MqttConnectionObserver, MqttMessageSubscriber {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private @Nullable MqttBrokerConnection connection;\n+    private ThingRegistry thingRegistry;\n+    private String globeType = \"\";\n+    private String bulbMode = \"\";\n+    private String remotesGroupID = \"\";\n+    private String channelPrefix = \"\";\n+    private String fullCommandTopic = \"\";\n+    private String fullStatesTopic = \"\";\n+    private BigDecimal maxColourTemp = BigDecimal.ZERO;\n+    private BigDecimal minColourTemp = BigDecimal.ZERO;\n+    private BigDecimal savedLevel = BIG_DECIMAL_100;\n+    private ConfigOptions config = new ConfigOptions();\n+\n+    public EspMilightHubHandler(Thing thing, ThingRegistry thingRegistry) {\n+        super(thing);\n+        this.thingRegistry = thingRegistry;\n+    }\n+\n+    void changeChannel(String channel, State state) {\n+        updateState(new ChannelUID(channelPrefix + channel), state);\n+        // Remote code of 0 means that all channels need to follow this change.\n+        if (remotesGroupID.equals(\"0\")) {\n+            switch (globeType) {\n+                // These two are 8 channel remotes\n+                case \"fut091\":\n+                case \"fut089\":\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"5:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"6:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"7:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"8:\" + channel),\n+                            state);\n+                default:\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"1:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"2:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"3:\" + channel),\n+                            state);\n+                    updateState(new ChannelUID(channelPrefix.substring(0, channelPrefix.length() - 2) + \"4:\" + channel),\n+                            state);\n+            }\n+        }\n+    }\n+\n+    private void processIncomingState(String messageJSON) {\n+        // Need to handle State and Level at the same time to process level=0 as off//\n+        BigDecimal tempBulbLevel = BigDecimal.ZERO;\n+        String bulbState = Helper.resolveJSON(messageJSON, \"\\\"state\\\":\\\"\", 3);\n+        String bulbLevel = Helper.resolveJSON(messageJSON, \"\\\"level\\\":\", 3);\n+        if (!bulbLevel.isEmpty()) {\n+            if (bulbLevel.equals(\"0\") || bulbState.equals(\"OFF\")) {\n+                changeChannel(CHANNEL_LEVEL, OnOffType.OFF);\n+                tempBulbLevel = BigDecimal.ZERO;\n+            } else {\n+                tempBulbLevel = new BigDecimal(bulbLevel);\n+                changeChannel(CHANNEL_LEVEL, new PercentType(tempBulbLevel));\n+            }\n+        } else if (bulbState.equals(\"ON\") || bulbState.equals(\"OFF\")) { // NOTE: Level is missing when this runs\n+            changeChannel(CHANNEL_LEVEL, OnOffType.valueOf(bulbState));\n+        }\n+        bulbMode = Helper.resolveJSON(messageJSON, \"\\\"bulb_mode\\\":\\\"\", 5);\n+        switch (bulbMode) {\n+            case \"white\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"white\"));\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(\"0,0,\" + tempBulbLevel));\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                }\n+                String bulbCTemp = Helper.resolveJSON(messageJSON, \"\\\"color_temp\\\":\", 3);\n+                if (!bulbCTemp.isEmpty()) {\n+                    int ibulbCTemp = (int) Math.round(((Float.valueOf(bulbCTemp) / 2.17) - 171) * -1);\n+                    changeChannel(CHANNEL_COLOURTEMP, new PercentType(ibulbCTemp));\n+                }\n+                break;\n+            case \"color\":\n+                changeChannel(CHANNEL_BULB_MODE, new StringType(\"color\"));\n+                changeChannel(CHANNEL_DISCO_MODE, new StringType(\"None\"));\n+                String bulbHue = Helper.resolveJSON(messageJSON, \"\\\"hue\\\":\", 3);\n+                String bulbSaturation = Helper.resolveJSON(messageJSON, \"\\\"saturation\\\":\", 3);\n+                if (bulbHue.isEmpty()) {\n+                    logger.warn(\"Milight MQTT message came in as being a colour mode, but was missing a HUE value.\");\n+                } else {\n+                    if (bulbSaturation.isEmpty()) {\n+                        bulbSaturation = \"100\";\n+                    }\n+                    changeChannel(CHANNEL_COLOUR, new HSBType(bulbHue + \",\" + bulbSaturation + \",\" + tempBulbLevel));\n+                }\n+                break;\n+            case \"scene\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"scene\"));\n+                }\n+                String bulbDiscoMode = Helper.resolveJSON(messageJSON, \"\\\"mode\\\":\", 1);\n+                if (!bulbDiscoMode.isEmpty()) {\n+                    changeChannel(CHANNEL_DISCO_MODE, new StringType(bulbDiscoMode));\n+                }\n+                break;\n+            case \"night\":\n+                if (!globeType.equals(\"cct\") && !globeType.equals(\"fut091\")) {\n+                    changeChannel(CHANNEL_BULB_MODE, new StringType(\"night\"));\n+                    if (config.oneTriggersNightMode) {\n+                        changeChannel(CHANNEL_LEVEL, new PercentType(\"1\"));\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+\n+    /*\n+     * Used to calculate the colour temp for a globe if you want the light to get warmer as it is dimmed like a\n+     * traditional halogen globe\n+     */\n+    private int autoColourTemp(int brightness) {\n+        return minColourTemp.subtract(\n+                minColourTemp.subtract(maxColourTemp).divide(BIG_DECIMAL_100).multiply(new BigDecimal(brightness)))\n+                .intValue();\n+    }\n+\n+    void turnOff() {\n+        if (config.powerFailsToMinimum) {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\",\\\"level\\\":0}\");\n+        } else {\n+            sendMQTT(\"{\\\"state\\\":\\\"OFF\\\"}\");\n+        }\n+    }\n+\n+    void handleLevelColour(Command command) {\n+        if (command instanceof OnOffType) {\n+            if (OnOffType.ON.equals(command)) {\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \"}\");\n+                return;\n+            } else {\n+                turnOff();\n+            }\n+        } else if (command instanceof IncreaseDecreaseType) {\n+            if (IncreaseDecreaseType.INCREASE.equals(command)) {\n+                if (savedLevel.intValue() <= 90) {\n+                    savedLevel = savedLevel.add(BigDecimal.TEN);\n+                }\n+            } else {\n+                if (savedLevel.intValue() >= 10) {\n+                    savedLevel = savedLevel.subtract(BigDecimal.TEN);\n+                }\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel.intValue() + \"}\");\n+            return;\n+        } else if (command instanceof HSBType) {\n+            HSBType hsb = (HSBType) command;\n+            // This feature allows google home or Echo to trigger white mode when asked to turn color to white.\n+            if (hsb.getHue().intValue() == config.whiteHue && hsb.getSaturation().intValue() == config.whiteSat) {\n+                if (\"rgb_cct\".equals(globeType) || \"fut089\".equals(globeType)) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + config.favouriteWhite + \"}\");\n+                } else {// globe must only have 1 type of white\n+                    sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                }\n+                return;\n+            } else if (PercentType.ZERO.equals(hsb.getBrightness())) {\n+                turnOff();\n+                return;\n+            } else if (config.whiteThreshold != -1 && hsb.getSaturation().intValue() <= config.whiteThreshold\n+                    && \"rgbw\".equals(globeType)) {\n+                sendMQTT(\"{\\\"command\\\":\\\"set_white\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + hsb.getBrightness().intValue() + \",\\\"hue\\\":\"\n+                    + hsb.getHue().intValue() + \",\\\"saturation\\\":\" + hsb.getSaturation().intValue() + \"}\");\n+            savedLevel = hsb.getBrightness().toBigDecimal();\n+            return;\n+        } else if (command instanceof PercentType) {\n+            PercentType percentType = (PercentType) command;\n+            if (percentType.intValue() == 0) {\n+                turnOff();\n+                return;\n+            } else if (percentType.intValue() == 1 && config.oneTriggersNightMode) {\n+                sendMQTT(\"{\\\"command\\\":\\\"night_mode\\\"}\");\n+                return;\n+            }\n+            sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + command + \"}\");\n+            savedLevel = percentType.toBigDecimal();\n+            if (globeType.equals(\"rgb_cct\") || globeType.equals(\"fut089\")) {\n+                if (config.dimmedCT > 0 && bulbMode.equals(\"white\")) {\n+                    sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"color_temp\\\":\" + autoColourTemp(savedLevel.intValue()) + \"}\");\n+                }\n+            }\n+            return;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            return;\n+        }\n+        switch (channelUID.getId()) {\n+            case CHANNEL_LEVEL:\n+                handleLevelColour(command);\n+                return;\n+            case CHANNEL_BULB_MODE:\n+                bulbMode = command.toString();\n+                break;\n+            case CHANNEL_COLOURTEMP:\n+                int scaledCommand = (int) Math.round((370 - (2.17 * Float.valueOf(command.toString()))));\n+                sendMQTT(\"{\\\"state\\\":\\\"ON\\\",\\\"level\\\":\" + savedLevel + \",\\\"color_temp\\\":\" + scaledCommand + \"}\");\n+                break;\n+            case CHANNEL_COMMAND:\n+                sendMQTT(\"{\\\"command\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_DISCO_MODE:\n+                sendMQTT(\"{\\\"mode\\\":\\\"\" + command + \"\\\"}\");\n+                break;\n+            case CHANNEL_COLOUR:\n+                handleLevelColour(command);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        config = getConfigAs(ConfigOptions.class);\n+        if (config.dimmedCT > 0) {\n+            maxColourTemp = new BigDecimal(config.favouriteWhite);\n+            minColourTemp = new BigDecimal(config.dimmedCT);\n+            if (minColourTemp.intValue() <= maxColourTemp.intValue()) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\n+                        \"The dimmedCT config value must be greater than the favourite White value.\");\n+                return;\n+            }\n+        }\n+        Bridge localBridge = getBridge();\n+        if (localBridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    \"Globe must have a valid bridge selected before it can come online.\");\n+            return;\n+        } else {\n+            globeType = thing.getThingTypeUID().getId();// eg rgb_cct\n+            String globeLocation = this.getThing().getUID().getId();// eg 0x014\n+            remotesGroupID = globeLocation.substring(globeLocation.length() - 1, globeLocation.length());// eg 4\n+            String remotesIDCode = globeLocation.substring(0, globeLocation.length() - 1);// eg 0x01\n+            fullCommandTopic = COMMANDS_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            fullStatesTopic = STATES_BASE_TOPIC + remotesIDCode + \"/\" + globeType + \"/\" + remotesGroupID;\n+            // Need to remove the lowercase x from 0x12AB in case it contains all numbers\n+            String caseCheck = globeLocation.substring(2, globeLocation.length() - 1);\n+            if (!caseCheck.equals(caseCheck.toUpperCase())) {\n+                logger.warn(\n+                        \"The milight globe {}{} is using lowercase for the remote code when the hub needs UPPERCASE\",\n+                        remotesIDCode, remotesGroupID);\n+            }\n+            channelPrefix = BINDING_ID + \":\" + globeType + \":\" + localBridge.getUID().getId() + \":\" + remotesIDCode\n+                    + remotesGroupID + \":\";\n+            connectMQTT();\n+        }\n+    }\n+\n+    private void sendMQTT(String payload) {\n+        MqttBrokerConnection localConnection = connection;\n+        if (localConnection != null) {\n+            localConnection.publish(fullCommandTopic, payload.getBytes(), 1, false);\n+        }\n+    }\n+\n+    @Override\n+    public void processMessage(String topic, byte[] payload) {\n+        String state = new String(payload, StandardCharsets.UTF_8);\n+        logger.trace(\"Recieved the following new Milight state:{}:{}\", topic, state);\n+        processIncomingState(state);\n+    }\n+\n+    @Override\n+    public void connectionStateChanged(MqttConnectionState state, @Nullable Throwable error) {\n+        logger.debug(\"MQTT brokers state changed to:{}\", state);\n+        switch (state) {\n+            case CONNECTED:\n+                updateStatus(ThingStatus.ONLINE);\n+                break;\n+            case CONNECTING:\n+            case DISCONNECTED:\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Bridge (broker) is not connected to your MQTT broker.\");\n+        }\n+    }\n+\n+    public void connectMQTT() {\n+        Bridge localBridge = this.getBridge();\n+        if (localBridge == null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_UNINITIALIZED,\n+                    \"Bridge is missing or offline, you need to setup a working MQTT broker first.\");\n+            return;\n+        }\n+        ThingUID thingUID = new ThingUID(new ThingTypeUID(\"mqtt\", \"broker\"), localBridge.getUID().getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMzOTYzNQ=="}, "originalCommit": {"oid": "cc2092a8db83ea2b12d3458d8ad49de4138f72fc"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzY4MDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyMTo0OFrOIaEhjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyMTo0OFrOIaEhjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDIwODAxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To use these examples for textual configuration, you must have already have a configured a MQTT `broker` thing and know its unique ID.\n          \n          \n            \n            To use these examples for textual configuration, you must already have a configured a MQTT `broker` thing and know its unique ID.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564208012", "createdAt": "2021-01-26T04:21:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,192 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and  only need connecting with 7 wires. \n+They can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups to give individual control over an entire house of Milight globes without needing multiple bridges.\n++ If using the Milight remotes to control the globes, this binding can update the openHAB controls the moment a key is pressed on the physical remotes.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this Linux command to watch all MQTT topics from Milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes.\n+The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` thing and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next, move a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page which cause a MQTT message to be sent.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 35 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | Night mode is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode by design locks out some controls of a physical remote, so this feature is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| `level` | Dimmer | Level changes the brightness of the globe. |\n+| `colourTemperature` | Dimmer | Change from cool to warm white with this control. |\n+| `colour` | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| `discoMode` | String | Switch to a Disco mode directly from a drop down list. |\n+| `bulbMode` | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| `command` | String | Sends the raw commands that the buttons on a remote send. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe multiplied by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n+\n+Settings for the radio tab found in the esp control panel using your browser, mine are:\n+\n++ Packet repeats = 12 (if you only turn 1 globe on or off it uses this value)\n++ Packet repeat throttle threshold = 200\n++ Packet repeat throttle sensitivity = 0\n++ Packet repeat minimum = 8 (When turning multiple globes on and off it will use this value as it throttles the repeats back to reduce latency/delay between each globe)\n+\n+## Important for Textual Configuration\n+\n+This binding requires things to have a specific format for the unique ID, the auto discovery does this for you.\n+\n+If doing textual configuration you need to add the Device ID and Group ID together to create the things unique ID.\n+The DeviceID is different for each remote.\n+The GroupID can be 0 (all channels on the remote), or 1 to 8 for each of the individual channels on the remote).\n+If you do not understand this please use auto discovery to do it for you. \n+\n+The formula is\n+DeviceID + GroupID = ThingUID\n+\n+For example:\n+\n+| Device ID | Group ID |ThingUID  | \n+|-----------|----------|----------|\n+| 0xE6C     | 4        | 0xE6C4   | \n+| 0xB4CA    | 4        | 0xB4CA4  | \n+| 0xB4CA    | 8        | 0xB4CA8  |\n+| 0xB4CA    | 0        | 0xB4CA0  |\n+\n+## Full Example\n+\n+To use these examples for textual configuration, you must have already have a configured a MQTT `broker` thing and know its unique ID.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2be940e9253e9c6037665a2a424e23c0c3aa92"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzY4MzQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyNDowMVrOIaEjWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyNDowMVrOIaEjWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDIwODQ3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The hubs can be built from 2 ready made boards and  only need connecting with 7 wires. \n          \n          \n            \n            The hubs can be built from 2 ready made boards and only need connecting with 7 wires.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564208472", "createdAt": "2021-01-26T04:24:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,192 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and  only need connecting with 7 wires. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2be940e9253e9c6037665a2a424e23c0c3aa92"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzY4NzcwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyNjoxNVrOIaElfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyNjoxNVrOIaElfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDIwOTAyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n          \n          \n            \n            You can reduce the packet repeats to speed up the response of this binding and the hub by tweaking a few settings.", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564209022", "createdAt": "2021-01-26T04:26:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,192 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and  only need connecting with 7 wires. \n+They can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups to give individual control over an entire house of Milight globes without needing multiple bridges.\n++ If using the Milight remotes to control the globes, this binding can update the openHAB controls the moment a key is pressed on the physical remotes.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this Linux command to watch all MQTT topics from Milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes.\n+The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` thing and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next, move a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page which cause a MQTT message to be sent.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 35 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | Night mode is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode by design locks out some controls of a physical remote, so this feature is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| `level` | Dimmer | Level changes the brightness of the globe. |\n+| `colourTemperature` | Dimmer | Change from cool to warm white with this control. |\n+| `colour` | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| `discoMode` | String | Switch to a Disco mode directly from a drop down list. |\n+| `bulbMode` | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| `command` | String | Sends the raw commands that the buttons on a remote send. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe multiplied by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2be940e9253e9c6037665a2a424e23c0c3aa92"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1MzY5Mjk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyODo1OFrOIaEoVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQwNDoyODo1OFrOIaEoVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDIwOTc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Settings for the radio tab found in the esp control panel using your browser, mine are:\n          \n          \n            \n            Settings can be found on the radio tab in the esp control panel using your browser.\n          \n          \n            \n            Suggested settings are as follows:", "url": "https://github.com/openhab/openhab-addons/pull/9218#discussion_r564209751", "createdAt": "2021-01-26T04:28:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.mqtt.espmilighthub/README.md", "diffHunk": "@@ -0,0 +1,192 @@\n+# EspMilightHub Binding\n+\n+This binding allows an open source esp8266 based bridge to automatically find and add Milight globes.\n+The hubs can be built from 2 ready made boards and  only need connecting with 7 wires. \n+They can be very easy to build with no soldering needed. \n+\n+Advantages to using this DIY bridge over the OEM bridge:\n+\n++ Almost unlimited groups to give individual control over an entire house of Milight globes without needing multiple bridges.\n++ If using the Milight remotes to control the globes, this binding can update the openHAB controls the moment a key is pressed on the physical remotes.\n++ Supports auto discovery.\n+\n+## Setup the hardware\n+\n+In depth details on how to build and what the bridge is can be found here: <http://blog.christophermullins.com/2017/02/11/milight-wifi-gateway-emulator-on-an-esp8266>\n+\n+A quick overview of the steps to get the hardware going are:\n+\n++ Connect a nodemcu/D1 mini/esp8266 to your computer via a USB cable.\n++ Download the latest BIN file from here <https://github.com/sidoh/esp8266_milight_hub/releases>\n++ Download esp8266flasher if you are on windows <https://github.com/nodemcu/nodemcu-flasher>\n++ Check the blog above on more info for Mac or Linux.\n++ Open the flasher tool and make sure the flash size is 4mb or whatever your esp8266 board has.\n++ Flash the bin and press the reset button on the board when it completes.\n++ Connect to the wifi access point of the esp directly with your phone/tablet and setup wifi details.\n++ Login by using the IP address of the esp8266 in a web browser and the control panel will show up.\n++ Connect 7 wires between the two ready made PCBs as shown in the blog.\n++ Setup a MQTT broker as this method uses the faster and lightweight MQTT protocol and not UDP.\n+\n+## Setup the Firmware\n+\n+Enter the control panel for the ESP8266 by using any browser and enter the IP address. \n+The following options need to be changed in the firmware for the binding to work.\n+Click on SETTINGS>MQTT>:\n+\n+**mqtt_topic_pattern:**\n+`milight/commands/:device_id/:device_type/:group_id`\n+\n+**mqtt_update_topic_pattern:**\n+Leave this blank.\n+\n+**mqtt_state_topic_pattern:**\n+`milight/states/:device_id/:device_type/:group_id`\n+\n+**group_state_fields:** \n+IMPORTANT: Make sure only the following are ticked:\n+\n++ state\n++ level\n++ hue\n++ saturation\n++ mode\n++ color_temp\n++ bulb_mode\n+\n+Fill in the MQTT broker fields with the correct details so the hub can connect and then click **save**.\n+Now when you use any Milight remote control, you will see MQTT topics being created that should include `level` and `hsb` in the messages.\n+If you see `brightness` and not `level`, then go back and follow the above setup steps.\n+\n+You can use this Linux command to watch all MQTT topics from Milight:\n+\n+```\n+mosquitto_sub -u usernamehere -P passwordhere -p 1883 -v -t 'milight/#'\n+```\n+\n+You can also use the mosquitto_pub command to send your own commands and watch the bulbs respond all without the binding being setup.\n+Everything this binding does goes in and out via MQTT and can be watched with the above command.\n+Once you have setup and test the hub you can move onto using the binding.\n+\n+## Supported Things\n+\n+This binding is best thought of as a remote control emulator, so the things are really the type of remote that you own and not the globes.\n+The Milight protocol is 1 way only so there is no way to find actual globes.\n+\n+| Thing Type ID | Description |\n+|-|-|\n+| `rgb_cct` | Remote that has 4 channels and controls globes with full colour, and both cool and warm whites. |\n+| `fut089` | Remote is the newer 8 channel type called FUT089 and your globes are the rgb_cct. |\n+| `cct` | Remote is 4 channels and the globes have no colours with only cool and warm white controls. |\n+| `fut091` | Remote is the newer 8 group model called a fut091 and your globes are cct. |\n+| `rgbw` | Remote is 4 channels and the globes have RGB and a fixed white. |\n+| `rgb` | Remote is 4 channels and the globes have full RGB with no white. |\n+\n+## Discovery\n+\n+First install the MQTT binding and setup a `broker` thing and make sure it is ONLINE, as this binding uses the MQTT binding to talk to your broker and hence that binding must be setup first.\n+Next, move a control on either a physical remote, or used a virtual control inside the esp8266 control panel web page which cause a MQTT message to be sent.\n+This binding should then detect the new device the moment the control is moved and a new entry should appear in your INBOX.\n+\n+To remove a saved state from your MQTT broker that causes an entry in your INBOX you can use this command or use the ignore feature of openHAB.\n+\n+```\n+mosquitto_pub -u username -P password -p 1883 -t 'milight/states/0x0/rgb_cct/1' -n -r\n+```\n+\n+## Thing Configuration\n+\n+| Parameter | Description | Required | Default |\n+|-|-|-|-|\n+| `whiteHue` | When both the `whiteHue` and `whiteSat` values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 0 for Alexa, or 35 for Google Home. | Y | 35 |\n+| `whiteSat` | When both the whiteHue and whiteSat values are seen by the binding it will trigger the white LEDS. Set to -1 to disable, 100 for Alexa or 32 for Google Home. | Y | 32 |\n+| `favouriteWhite` | When one of the shortcuts triggers white mode, use this for the colour white instead of the default colour. | Y |200 |\n+| `dimmedCT` | Traditional globes grow warmer the more they are dimmed. Set this to 370, or leave blank to disable. | N | blank |\n+| `oneTriggersNightMode` | Night mode is a much lower level of light and this feature allows it to be auto selected when your fader/slider moves to 1%. NOTE: Night mode by design locks out some controls of a physical remote, so this feature is disabled by default. | Y | false |\n+| `powerFailsToMinimum` | If lights loose power from the power switch OR a power outage, they will default to using the lowest brightness if the light was turned off before the power failure occurred. | Y | true |\n+| `whiteThreshold` | RGBW globes do not respond to saturation changes, so this feature allows you to specify a number that if the saturation drops below, it will trigger the white mode. -1 will disable this feature. | Y | 12 |\n+\n+## Channels\n+\n+| Channel | Type | Description |\n+|-|-|-|\n+| `level` | Dimmer | Level changes the brightness of the globe. |\n+| `colourTemperature` | Dimmer | Change from cool to warm white with this control. |\n+| `colour` | Color | Allows you to change the colour, brightness and saturation of the globe. |\n+| `discoMode` | String | Switch to a Disco mode directly from a drop down list. |\n+| `bulbMode` | String (read only) | Displays the mode the bulb is currently in so that rules can determine if the globe is white, a color, disco modes or night mode are selected. |\n+| `command` | String | Sends the raw commands that the buttons on a remote send. |\n+\n+## Note Regarding Transmission Delays\n+\n+If you have lots of globes and openHAB turns them all on, you may notice a delay that causes the globes to turn on one by one and the delay can add up when a lot of globes are installed in your house.\n+This is caused by the time it takes to transmit the desired setting to the globe multiplied by how many times the hub repeats transmitting the setting.\n+Since it takes around 2.8ms for a setting to be transmitted, if the firmware is set to repeat the packets 50 times it would then take 2.8*50 = 140ms before the next globe starts to have its new state transmitted by the hub.\n+You can reduce the packet repeats to speed up the response of this binding and the hub, but a few settings can be tweaked.\n+\n+Settings for the radio tab found in the esp control panel using your browser, mine are:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2be940e9253e9c6037665a2a424e23c0c3aa92"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}