{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NDcyNDMz", "number": 6772, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo0MzoyNFrODWWXcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDowMzoyMFrODWWsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzYxNzEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo0MzoyNFrOFbDzAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDozMjo0N1rOFbFAew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODA4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public boolean isExtPayloadSupported() {\n          \n          \n            \n                public boolean hasExtPayloadSupport() {", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363918081", "createdAt": "2020-01-07T19:43:24Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.satel.internal.command;\n+\n+import org.openhab.binding.satel.internal.event.EventDispatcher;\n+import org.openhab.binding.satel.internal.event.ModuleVersionEvent;\n+import org.openhab.binding.satel.internal.protocol.SatelMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Command class for command that returns communication module version.\n+ *\n+ * @author Krzysztof Goworek - Initial contribution\n+ */\n+public class ModuleVersionCommand extends SatelCommandBase {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ModuleVersionCommand.class);\n+\n+    public static final byte COMMAND_CODE = 0x7c;\n+\n+    /**\n+     * Creates new command class instance.\n+     */\n+    public ModuleVersionCommand() {\n+        super(COMMAND_CODE, false);\n+    }\n+\n+    /**\n+     * @return communication module firmware version and release date\n+     */\n+    public String getVersion() {\n+        return getVersion(0);\n+    }\n+\n+    /**\n+     * @return <code>true</code> if the module supports extended (32-bit) payload for zones/outputs\n+     */\n+    public boolean isExtPayloadSupported() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fc5eaefa7a58af4376955a99c8364d16158379"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzNzkxNQ==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363937915", "createdAt": "2020-01-07T20:32:47Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/command/ModuleVersionCommand.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.satel.internal.command;\n+\n+import org.openhab.binding.satel.internal.event.EventDispatcher;\n+import org.openhab.binding.satel.internal.event.ModuleVersionEvent;\n+import org.openhab.binding.satel.internal.protocol.SatelMessage;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Command class for command that returns communication module version.\n+ *\n+ * @author Krzysztof Goworek - Initial contribution\n+ */\n+public class ModuleVersionCommand extends SatelCommandBase {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ModuleVersionCommand.class);\n+\n+    public static final byte COMMAND_CODE = 0x7c;\n+\n+    /**\n+     * Creates new command class instance.\n+     */\n+    public ModuleVersionCommand() {\n+        super(COMMAND_CODE, false);\n+    }\n+\n+    /**\n+     * @return communication module firmware version and release date\n+     */\n+    public String getVersion() {\n+        return getVersion(0);\n+    }\n+\n+    /**\n+     * @return <code>true</code> if the module supports extended (32-bit) payload for zones/outputs\n+     */\n+    public boolean isExtPayloadSupported() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODA4MQ=="}, "originalCommit": {"oid": "05fc5eaefa7a58af4376955a99c8364d16158379"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzY3MTA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/SatelModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDowMzoyMFrOFbEUUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDozOTozNlrOFbFKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNjYwOA==", "bodyText": "I think you need the lock to protect the channel from disconnecting two times. Wouldn't be a Lock be better? If tryLock() fails the thread would not be blocked. Or is blocking until disconnect what you want to achieve?", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363926608", "createdAt": "2020-01-07T20:03:20Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/SatelModule.java", "diffHunk": "@@ -52,11 +54,12 @@\n \n     private final BlockingQueue<SatelCommand> sendQueue = new LinkedBlockingQueue<SatelCommand>();\n \n-    private IntegraType integraType;\n-    private int timeout;\n-    private String integraVersion;\n+    private final int timeout;\n+    private volatile IntegraType integraType;\n+    private volatile String integraVersion;\n+    private volatile boolean extPayloadSupport;\n     private CommunicationChannel channel;\n-    private Object channelLock;\n+    private final Object channelLock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fc5eaefa7a58af4376955a99c8364d16158379"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MDQ1MQ==", "bodyText": "Good question. :-)\nThis is very old code and I don't remember what was the purpose. It seems to be useless as the whole disconnect method is synchronized. I think I was about to remove synchronization from the method and use this channelLock to not lock the whole object, but just disconnect method.\nBut now I am not sure whether or not it is safe to remove this lock from the code and I would't do this in this PR.", "url": "https://github.com/openhab/openhab-addons/pull/6772#discussion_r363940451", "createdAt": "2020-01-07T20:39:36Z", "author": {"login": "druciak"}, "path": "bundles/org.openhab.binding.satel/src/main/java/org/openhab/binding/satel/internal/protocol/SatelModule.java", "diffHunk": "@@ -52,11 +54,12 @@\n \n     private final BlockingQueue<SatelCommand> sendQueue = new LinkedBlockingQueue<SatelCommand>();\n \n-    private IntegraType integraType;\n-    private int timeout;\n-    private String integraVersion;\n+    private final int timeout;\n+    private volatile IntegraType integraType;\n+    private volatile String integraVersion;\n+    private volatile boolean extPayloadSupport;\n     private CommunicationChannel channel;\n-    private Object channelLock;\n+    private final Object channelLock = new Object();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNjYwOA=="}, "originalCommit": {"oid": "05fc5eaefa7a58af4376955a99c8364d16158379"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1016, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}