{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjY2MTEw", "number": 7347, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMzo0NjoyM1rODxAlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNDowNTo1OFrODxApuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzE2Mzg2OnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMzo0NjoyM1rOGER7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzozMTo1M1rOGETDwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MTM3MA==", "bodyText": "You aren't going to log this message anymore?", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407141370", "createdAt": "2020-04-12T03:46:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -300,21 +300,23 @@ public void run() {\n         }\n \n         private void processMessages() {\n-            try {\n-                // must call processData() until we get a null pointer back\n-                for (Msg m = msgFactory.processData(); m != null; m = msgFactory.processData()) {\n-                    toAllListeners(m);\n-                    notifyWriter(m);\n-                }\n-            } catch (IOException e) {\n-                // got bad data from modem,\n-                // unblock those waiting for ack\n-                logger.warn(\"bad data received: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTc0NA==", "bodyText": "This was removed because it was getting logged twice just before the IOException is raised. That's why the bad data received prefix was moved to the other log statement.", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407159744", "createdAt": "2020-04-12T07:31:53Z", "author": {"login": "jsetton"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/driver/Port.java", "diffHunk": "@@ -300,21 +300,23 @@ public void run() {\n         }\n \n         private void processMessages() {\n-            try {\n-                // must call processData() until we get a null pointer back\n-                for (Msg m = msgFactory.processData(); m != null; m = msgFactory.processData()) {\n-                    toAllListeners(m);\n-                    notifyWriter(m);\n-                }\n-            } catch (IOException e) {\n-                // got bad data from modem,\n-                // unblock those waiting for ack\n-                logger.warn(\"bad data received: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MTM3MA=="}, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzE3MTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNDowMDowM1rOGER_cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzozMjozNVrOGETD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI1OA==", "bodyText": "Is there any way to prevent calling getHexByte if it wouldn't be logged anyway? Maybe call it inside the bail method?", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142258", "createdAt": "2020-04-12T04:00:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTgwMA==", "bodyText": "The message is being logged in the bail method. So I am unsure why you are asking this?", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407159800", "createdAt": "2020-04-12T07:32:35Z", "author": {"login": "jsetton"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI1OA=="}, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzE3MTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNDowMDoxN1rOGER_fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzozMjo1MVrOGETEHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI3MA==", "bodyText": "please fix the indentation.", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142270", "createdAt": "2020-04-12T04:00:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -56,9 +66,13 @@ public MsgFactory() {\n     public void addData(byte[] data, int len) {\n         int l = len;\n         if (l + end > MAX_MSG_LEN) {\n-            logger.warn(\"warn: truncating excessively long message!\");\n+            logger.warn(\"truncating excessively long message!\");\n             l = MAX_MSG_LEN - end;\n         }\n+        // indicate new data can be processed if length > 0\n+        if (l > 0) {\n+          done = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTgzNg==", "bodyText": "Sure.", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407159836", "createdAt": "2020-04-12T07:32:51Z", "author": {"login": "jsetton"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -56,9 +66,13 @@ public MsgFactory() {\n     public void addData(byte[] data, int len) {\n         int l = len;\n         if (l + end > MAX_MSG_LEN) {\n-            logger.warn(\"warn: truncating excessively long message!\");\n+            logger.warn(\"truncating excessively long message!\");\n             l = MAX_MSG_LEN - end;\n         }\n+        // indicate new data can be processed if length > 0\n+        if (l > 0) {\n+          done = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjI3MA=="}, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzE3NDk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNDowNTo1OFrOGESA2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzozNDozOVrOGETE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjYxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\n          \n          \n            \n                    if(logger.isTraceEnabled()){\n          \n          \n            \n                        logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407142618", "createdAt": "2020-04-12T04:05:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));\n+                    } else if (msgLen > 0) {\n+                        if (end >= msgLen) {\n+                            msg = Msg.createMessage(buf, msgLen, isExtended);\n+                            removeFromBuffer(msgLen);\n+                        }\n+                    } else { // should never happen\n+                        logger.warn(\"invalid message length, internal error!\");\n                     }\n                 }\n             } else { // should never happen\n                 logger.warn(\"invalid header length, internal error!\");\n-                msgLen = -1;\n             }\n         }\n-        logger.trace(\"msgLen expected: {}\", msgLen);\n-        Msg msg = null;\n-        if (msgLen > 0 && end >= msgLen) {\n-            msg = Msg.createMessage(buf, msgLen, isExtended);\n-            removeFromBuffer(msgLen);\n+        // indicate no more messages available in buffer if empty or undefined message\n+        if (end == 0 || msg == null) {\n+            logger.trace(\"done processing current buffer data\");\n+            done = true;\n         }\n         logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MDAxNw==", "bodyText": "There are a ton of logger.trace calls across the code. What's the point of this?", "url": "https://github.com/openhab/openhab-addons/pull/7347#discussion_r407160017", "createdAt": "2020-04-12T07:34:39Z", "author": {"login": "jsetton"}, "path": "bundles/org.openhab.binding.insteon/src/main/java/org/openhab/binding/insteon/internal/message/MsgFactory.java", "diffHunk": "@@ -93,44 +108,48 @@ public void addData(byte[] data, int len) {\n         // Now see if we have enough data for a complete message.\n         // If not, we return null, and expect this method to be called again\n         // when more data has come in.\n-        int msgLen = -1;\n-        boolean isExtended = false;\n         if (end > 1) {\n             // we have some data, but do we have enough to read the entire header?\n             int headerLength = Msg.getHeaderLength(buf[1]);\n-            isExtended = Msg.isExtended(buf, end, headerLength);\n+            boolean isExtended = Msg.isExtended(buf, end, headerLength);\n             logger.trace(\"header length expected: {} extended: {}\", headerLength, isExtended);\n             if (headerLength < 0) {\n                 removeFromBuffer(1); // get rid of the leading 0x02 so draining works\n-                bail(\"got unknown command code \" + Utils.getHexByte(buf[1]));\n+                bail(\"got unknown command code \" + Utils.getHexByte(buf[0]));\n             } else if (headerLength >= 2) {\n                 if (end >= headerLength) {\n                     // only when the header is complete do we know that isExtended is correct!\n-                    msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    int msgLen = Msg.getMessageLength(buf[1], isExtended);\n+                    logger.trace(\"msgLen expected: {}\", msgLen);\n                     if (msgLen < 0) {\n                         // Cannot make sense out of the combined command code & isExtended flag.\n                         removeFromBuffer(1);\n-                        bail(\"unknown command code/ext flag: \" + Utils.getHexByte(buf[1]));\n+                        bail(\"got unknown command code/ext flag \" + Utils.getHexByte(buf[0]));\n+                    } else if (msgLen > 0) {\n+                        if (end >= msgLen) {\n+                            msg = Msg.createMessage(buf, msgLen, isExtended);\n+                            removeFromBuffer(msgLen);\n+                        }\n+                    } else { // should never happen\n+                        logger.warn(\"invalid message length, internal error!\");\n                     }\n                 }\n             } else { // should never happen\n                 logger.warn(\"invalid header length, internal error!\");\n-                msgLen = -1;\n             }\n         }\n-        logger.trace(\"msgLen expected: {}\", msgLen);\n-        Msg msg = null;\n-        if (msgLen > 0 && end >= msgLen) {\n-            msg = Msg.createMessage(buf, msgLen, isExtended);\n-            removeFromBuffer(msgLen);\n+        // indicate no more messages available in buffer if empty or undefined message\n+        if (end == 0 || msg == null) {\n+            logger.trace(\"done processing current buffer data\");\n+            done = true;\n         }\n         logger.trace(\"keeping buffer len {} data: {}\", end, Utils.getHexString(buf, end));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0MjYxOA=="}, "originalCommit": {"oid": "3bd1fde7518a1e879104b4c8bf63309c4e76b7d1"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 586, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}