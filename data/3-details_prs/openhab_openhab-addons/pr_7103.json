{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NTIxMTk2", "number": 7103, "title": "[lgwebos] Wake-on-Lan Integration ", "bodyText": "Integrates Wake-on-Lan functionality in power channel, so that there is no need anymore for wol1 binding.\nRemoves special ssdp search request for lge-com:service:webos-second-screen:1", "createdAt": "2020-03-05T21:57:36Z", "url": "https://github.com/openhab/openhab-addons/pull/7103", "merged": true, "mergeCommit": {"oid": "f8a943c0114d6db7477e0f1533d9e90e34135839"}, "closed": true, "closedAt": "2020-04-18T16:24:04Z", "author": {"login": "sprehn"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK9A_cgFqTM3MDE3ODQzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcY4ZDngFqTM5NTkyODA5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMTc4NDM4", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-370178438", "createdAt": "2020-03-06T09:17:55Z", "commit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToxNzo1NVrOFyx4WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwOToyNjozM1rOFyyI9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDM2MA==", "bodyText": "Isn't it too much to send the packet 10 times ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790360", "createdAt": "2020-03-06T09:17:55Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDYyMg==", "bodyText": "Typo: teh => the", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790622", "createdAt": "2020-03-06T09:18:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated\n+     *\n+     * @param macStr String representation of teh MAC address (either with : or -)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5MDg4OQ==", "bodyText": "Is it 6 times or 16 times like I understand with the code ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388790889", "createdAt": "2020-03-06T09:19:03Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();\n+                        logger.trace(\"Sent WOL packet to {} {}\", broadcast, macAddress);\n+                    } catch (IOException e) {\n+                        logger.warn(\"Problem sending WOL packet to {} {}\", broadcast, macAddress);\n+                    }\n+                }\n+            }\n+\n+        } catch (IOException e) {\n+            logger.warn(\"Problem with interface while sending WOL packet to {}\", macAddress);\n+        }\n+    }\n+\n+    /**\n+     * Create WOL UDP package: 6 bytes 0xff and then 6 times the 6 byte mac address repeated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc5NDYxNQ==", "bodyText": "Rather than reimplementing something existing from the core framework (using directly JUPnP stuff) and creating a dependency between your binding and the thing registry (which is normally unexpected), why not updating your discovery service to consider urn:schemas-upnp-org:device:MediaRenderer:1 rather than urn:schemas-upnp-org:device:Basic:1 ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r388794615", "createdAt": "2020-03-06T09:26:33Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/discovery/LGWebOSUpnpShutdownDetector.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal.discovery;\n+\n+import static org.openhab.binding.lgwebos.internal.LGWebOSBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.thing.ThingRegistry;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.jupnp.UpnpService;\n+import org.jupnp.model.meta.LocalDevice;\n+import org.jupnp.model.meta.RemoteDevice;\n+import org.jupnp.model.meta.RemoteService;\n+import org.jupnp.registry.Registry;\n+import org.jupnp.registry.RegistryListener;\n+import org.openhab.binding.lgwebos.internal.handler.LGWebOSHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class detects TV shutdown much before TV closes the websocket by listening to the upnp registry.\n+ *\n+ * Upnp devices send a good-bye broadcast on normal shutdown. This is true also for webos devices.\n+ * This seems to be the only way to detect instantly that the TV was turned off by remote control and much before the\n+ * device actually closes the websocket connection.\n+ *\n+ * However, not all users do use Upnp, so this use case is an optional optimization.\n+ *\n+ * The only Upnp device in webos that sends an event on shut down is of type\n+ * urn:schemas-upnp-org:device:MediaRenderer:1, with services types:\n+ * urn:schemas-upnp-org:service:AVTransport:1\n+ * urn:schemas-upnp-org:service:ConnectionManager:1\n+ * urn:schemas-upnp-org:service:RenderingControl:1\n+ *\n+ * 20 to 30 seconds later the websocket connection will close.\n+ * Arround this point in time device type: urn:schemas-upnp-org:device:Basic:1 de-registers with service type:\n+ * urn:lge-com:service:webos-second-screen:1 - the same, which is used for thing discovery.\n+ * Thus, thingRemoved of DiscoveryListener implementation in LGWebOSHandler will only be called at this point.\n+ *\n+ *\n+ * @author Sebastian Prehn - Initial contribution\n+ *\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, configurationPid = \"discovery.lgwebos.shutdown\")\n+public class LGWebOSUpnpShutdownDetector implements RegistryListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bed4b2c1f15469394673894764d3edf66feaf49a"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzQxMjI3", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-370741227", "createdAt": "2020-03-07T12:19:38Z", "commit": {"oid": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxOTozOVrOFzN_oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxMjoxOTozOVrOFzN_oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTI1MDk3Nw==", "bodyText": "Take care, you have to filter to not run your code for any thing discovered.\nIn fact, I even don't understand why you run this code depending on a thing discovery ?!\nThis looks simply like something to run at init time, doesn't it ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389250977", "createdAt": "2020-03-07T12:19:39Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +352,41 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    @Override\n+    public void thingDiscovered(DiscoveryService source, DiscoveryResult result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519f1fbf1acb3f9a38b865c9315267abb1abc2f5"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzkzMDg3", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-370793087", "createdAt": "2020-03-07T22:46:01Z", "commit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMjo0NjowMVrOFzSEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QyMjo1MzoxOFrOFzSGIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxNzgzNQ==", "bodyText": "Is it necessary to call it twice, once here and once more after web socket connection ?\nIs this one really necessary ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389317835", "createdAt": "2020-03-07T22:46:01Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -127,7 +130,9 @@ public void initialize() {\n         s.setListener(this);\n         socket = s;\n \n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.NONE, \"TV is off\");\n         startReconnectJob();\n+        findMacAddress(); // host config value could have changed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMxODE3Nw==", "bodyText": "I was playing with simiilar code in my own PR to update the discovered UDN and this leads to weird behaviour, probably because my thing is defined in a config file (and so with a readonly configuration). I have the feeling that at a certain time (after binding restart), the framework detects a change and restore the original configuration.\nBut leave it like that until this is more clear for me.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389318177", "createdAt": "2020-03-07T22:53:18Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSHandler.java", "diffHunk": "@@ -328,4 +340,29 @@ private void refreshChannelSubscription(ChannelUID channelUID) {\n     public Collection<Class<? extends ThingHandlerService>> getServices() {\n         return Collections.singleton(LGWebOSActions.class);\n     }\n+\n+    /**\n+     * Make a best effort to automatically detect the MAC address of the TV.\n+     * If this does not work automatically, users can still set it manually in the Thing config.\n+     */\n+    private void findMacAddress() {\n+        LGWebOSConfiguration c = getLGWebOSConfig();\n+        String host = c.getHost();\n+        if (!host.isEmpty()) {\n+            try {\n+                // validate host, so that no command can be injected\n+                String macAddress = WakeOnLanUtility.getMACAddress(InetAddress.getByName(host).getHostAddress());\n+                logger.debug(\"Determined MAC address: {} for host: {}\", macAddress, host);\n+                if (macAddress != null && !macAddress.equals(c.macAddress)) {\n+                    c.macAddress = macAddress;\n+                    // persist the configuration change\n+                    Configuration configuration = editConfiguration();\n+                    configuration.put(LGWebOSBindingConstants.CONFIG_MAC_ADDRESS, macAddress);\n+                    updateConfiguration(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bdbe7baf04f4dee002ff937ad92c3c770cb4e84"}, "originalPosition": 99}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dede53927af49f8b5e79852a947e69e9781d4366", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/dede53927af49f8b5e79852a947e69e9781d4366", "committedDate": "2020-03-08T08:34:02Z", "message": "Merge branch '2.5.x-WOL' of https://github.com/sprehn/openhab-addons into 2.5.x-WOL"}, "afterCommit": {"oid": "ff39abeea59492867f268cdfb33f7490f370fcb0", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/ff39abeea59492867f268cdfb33f7490f370fcb0", "committedDate": "2020-03-08T08:33:19Z", "message": "Only attemtp to find mac when device is online.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODE2OTg3", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-370816987", "createdAt": "2020-03-08T09:40:41Z", "commit": {"oid": "ff39abeea59492867f268cdfb33f7490f370fcb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff39abeea59492867f268cdfb33f7490f370fcb0", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/ff39abeea59492867f268cdfb33f7490f370fcb0", "committedDate": "2020-03-08T08:33:19Z", "message": "Only attemtp to find mac when device is online.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/45609b1dfdabab6471d339ebdcea55c0001f2614", "committedDate": "2020-03-09T20:51:18Z", "message": "Only attemtp to find mac when device is online.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/45609b1dfdabab6471d339ebdcea55c0001f2614", "committedDate": "2020-03-09T20:51:18Z", "message": "Only attemtp to find mac when device is online.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "committedDate": "2020-03-09T20:55:23Z", "message": "Adding WOL Implementation to PowerControl channel with ability to determine MAC (best effort via arp) and send WOL natively.\nRemoved Search, as second screen service does actually show up in regular scans now.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTIzMDgz", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-371523083", "createdAt": "2020-03-09T20:56:33Z", "commit": {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDo1NjozM1rOFz5FGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMTowNDoyMFrOFz5UAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1Njg5MA==", "bodyText": "Is it possible to change this so it stops sending packets once you succeed?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389956890", "createdAt": "2020-03-09T20:56:33Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,20 +32,44 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n         if (!handler.getSocket().isConnected()) {\n             /*\n              * Unable to send anything to a not connected device.\n              * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n              * Therefore setting state to OFF\n              */\n             handler.postUpdate(channelId, OnOffType.OFF);\n+        }\n+\n+        if (OnOffType.ON == command) {\n+            String macAddress = configProvider.getMacAddress();\n+            if (macAddress.isEmpty()) {\n+                logger.debug(\n+                        \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");\n+            } else {\n+                for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                    scheduler.schedule(() -> {\n+                        try {\n+                            WakeOnLanUtility.sendWOLPacket(macAddress);\n+                        } catch (IllegalArgumentException e) {\n+                            logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                        }\n+                    }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45609b1dfdabab6471d339ebdcea55c0001f2614"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTAwOQ==", "bodyText": "Just in case you don't know, readLine() doesn't include the \\n character in the result.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389959009", "createdAt": "2020-03-09T21:00:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk1OTIzNw==", "bodyText": "make this Pattern static", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389959237", "createdAt": "2020-03-09T21:01:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDIyMQ==", "bodyText": "Please wrap socket in a try-with-resources", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389960221", "createdAt": "2020-03-09T21:03:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+\n+    /**\n+     * Get MAC address for host\n+     * uses \"arp\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName); // arp on linux\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                logger.debug(\"getMacAddress error stream: {}\", builder.toString());\n+            } else {\n+\n+                Pattern macPattern = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+                Matcher matcher = macPattern.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }\n+                }\n+\n+                if (macAddress != null) {\n+                    logger.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+                    return macAddress;\n+                }\n+            }\n+        } catch (IOException | InterruptedException e) {\n+            logger.debug(\"Problem getting MAC address: {}\", e.getMessage());\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Send single WOL (Wake On Lan) package on all interfaces\n+     *\n+     * @macAddress MAC address to send WOL package to\n+     */\n+    public static void sendWOLPacket(String macAddress) {\n+        byte[] bytes = getWOLPackage(macAddress);\n+\n+        try {\n+            Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();\n+            while (interfaces.hasMoreElements()) {\n+                NetworkInterface networkInterface = interfaces.nextElement();\n+                if (networkInterface.isLoopback()) {\n+                    continue; // Do not want to use the loopback interface.\n+                }\n+                for (InterfaceAddress interfaceAddress : networkInterface.getInterfaceAddresses()) {\n+                    InetAddress broadcast = interfaceAddress.getBroadcast();\n+                    if (broadcast == null) {\n+                        continue;\n+                    }\n+\n+                    try {\n+                        DatagramPacket packet = new DatagramPacket(bytes, bytes.length, broadcast, 9);\n+                        DatagramSocket socket = new DatagramSocket();\n+                        socket.send(packet);\n+                        socket.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk2MDcwNA==", "bodyText": "Please include mac address format in the description.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r389960704", "createdAt": "2020-03-09T21:04:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -15,6 +15,10 @@\n \t\t\t<label>Access Key</label>\n \t\t\t<description>Key exchanged with TV after pairing.</description>\n \t\t</parameter>\n+\t\t<parameter name=\"macAddress\" type=\"text\" required=\"false\">\n+\t\t\t<label>MAC Address</label>\n+\t\t\t<description>If MAC Address of TV is entered here, the binding will attempt to power on the device via Wake On Lan (WOL), when it receives command ON on channel power.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/ca15d846425f9130ae4c656dc09fd0e427ce4aaa", "committedDate": "2020-03-09T20:55:23Z", "message": "Adding WOL Implementation to PowerControl channel with ability to determine MAC (best effort via arp) and send WOL natively.\nRemoved Search, as second screen service does actually show up in regular scans now.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/47ab7a5c3353665b368926978b05891db0fba5ad", "committedDate": "2020-03-10T20:32:01Z", "message": "Addressing review comments in WakeOnLanUitility and config.xml.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzQwMzcy", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-372340372", "createdAt": "2020-03-10T21:38:26Z", "commit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTozODoyNlrOF0h9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTozODoyNlrOF0h9aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYyNjY2NA==", "bodyText": "The arping utility might not be present on the user's machine (like a windows machine). Is there any way you can make this work on a windows machine as well?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r390626664", "createdAt": "2020-03-10T21:38:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    /**\n+     * Get MAC address for host usesing \"arping\" tool\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        try {\n+            Process proc = Runtime.getRuntime().exec(\"arping -r -c 1 -C 1 \" + hostName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ab7a5c3353665b368926978b05891db0fba5ad"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMTQyNTQ4", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-373142548", "createdAt": "2020-03-11T21:36:35Z", "commit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozNjozNVrOF1J-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozNjozNVrOF1J-3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MjM5OQ==", "bodyText": "Shouldn't you break at this point? Or do you always want the last mac address?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391282399", "createdAt": "2020-03-11T21:36:35Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);\n+            int returnCode = proc.waitFor();\n+            String s;\n+            StringBuilder builder = new StringBuilder();\n+            BufferedReader input = new BufferedReader(\n+                    new InputStreamReader(returnCode == 0 ? proc.getInputStream() : proc.getErrorStream()));\n+            while ((s = input.readLine()) != null) {\n+                builder.append(s);\n+            }\n+\n+            if (returnCode != 0) {\n+                LOGGER.debug(\"{} failed with error: {}\", cmd, builder.toString());\n+            } else {\n+                Matcher matcher = MAC_REGEX.matcher(builder.toString());\n+                String macAddress = null;\n+\n+                while (matcher.find()) {\n+                    String group = matcher.group();\n+\n+                    if (group.length() == 17) {\n+                        macAddress = group;\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjExMTY0", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-373211164", "createdAt": "2020-03-12T00:29:55Z", "commit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyOTo1NlrOF1NtUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwMDoyOTo1NlrOF1NtUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTM0MzQ0MQ==", "bodyText": "I suggest using org.eclipse.smarthome.io.net.exec.ExecUtil instead since it would simplify this method a bit while making this command line call a bit more robust", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r391343441", "createdAt": "2020-03-12T00:29:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+\n+    private static String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux, docker\n+            COMMAND = \"arping -r -c 1 -C 1 %s\";\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        String cmd = String.format(COMMAND, hostName);\n+        LOGGER.debug(\"cmd: {}\", cmd);\n+\n+        try {\n+            Process proc = Runtime.getRuntime().exec(cmd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a2c70e3098219b3d8365a3c5e458aa05bb3a862", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/9a2c70e3098219b3d8365a3c5e458aa05bb3a862", "committedDate": "2020-03-11T20:45:50Z", "message": "Add mac and windows commands to discover MAC.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/09e8dec016e95c3aeee56888f14b43dab6a9efd2", "committedDate": "2020-03-13T20:44:40Z", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09e8dec016e95c3aeee56888f14b43dab6a9efd2", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/09e8dec016e95c3aeee56888f14b43dab6a9efd2", "committedDate": "2020-03-13T20:44:40Z", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "d5446d8c9695ae58f42ffbdd3dd48bf320962dc6", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/d5446d8c9695ae58f42ffbdd3dd48bf320962dc6", "committedDate": "2020-04-10T10:58:10Z", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDkzNDQ5", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-392093449", "createdAt": "2020-04-13T11:29:02Z", "commit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMToyOTowMlrOGEj8_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMToyOTowMlrOGEj8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQzNjU0Mg==", "bodyText": "As host and macAdress are nullable, could you please replace host by getHost() and macAdress by getMacAdress() (which can't return null) to avoid a potential NPE ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407436542", "createdAt": "2020-04-13T11:29:02Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/handler/LGWebOSConfiguration.java", "diffHunk": "@@ -43,9 +45,15 @@ public int getPort() {\n         return port;\n     }\n \n+    public String getMacAddress() {\n+        String m = macAddress;\n+        return m == null ? \"\" : m;\n+    }\n+\n     @Override\n     public String toString() {\n-        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length() + \"]\";\n+        return \"WebOSConfiguration [host=\" + host + \", port=\" + port + \", key.length=\" + getKey().length()\n+                + \", macAddress=\" + macAddress + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/c5bdca6d0744d4452159165a832c278ba7d8208c", "committedDate": "2020-04-12T19:19:41Z", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "d3e92d608e47a3714e926d13e6cbd726c1682a08", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/d3e92d608e47a3714e926d13e6cbd726c1682a08", "committedDate": "2020-04-13T19:57:23Z", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3e92d608e47a3714e926d13e6cbd726c1682a08", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/d3e92d608e47a3714e926d13e6cbd726c1682a08", "committedDate": "2020-04-13T19:57:23Z", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "407bd9ca02fb69521b84014a28be01262fd75375", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/407bd9ca02fb69521b84014a28be01262fd75375", "committedDate": "2020-04-16T18:57:07Z", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTIwNjcw", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-394920670", "createdAt": "2020-04-16T19:05:46Z", "commit": {"oid": "407bd9ca02fb69521b84014a28be01262fd75375"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTA3MzQ1", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-391907345", "createdAt": "2020-04-13T00:14:09Z", "commit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMDoxNDowOVrOGEZz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMTowNzowNVrOGG3LSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3MDM2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private ScheduledExecutorService scheduler;\n          \n          \n            \n                private final ScheduledExecutorService scheduler;", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r407270364", "createdAt": "2020-04-13T00:14:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -30,6 +33,15 @@\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private ScheduledExecutorService scheduler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bdca6d0744d4452159165a832c278ba7d8208c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg0ODY0OQ==", "bodyText": "remove blank line", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r409848649", "createdAt": "2020-04-16T21:07:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/WakeOnLanUtility.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.lgwebos.internal;\n+\n+import java.io.IOException;\n+import java.net.DatagramPacket;\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InterfaceAddress;\n+import java.net.NetworkInterface;\n+import java.util.Enumeration;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.io.net.exec.ExecUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class with utility functions to support Wake On Lan (WOL)\n+ *\n+ * @author Arjan Mels - Initial contribution\n+ * @author Sebastian Prehn - Modification to getMACAddress\n+ *\n+ */\n+@NonNullByDefault\n+public class WakeOnLanUtility {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(WakeOnLanUtility.class);\n+    private static final Pattern MAC_REGEX = Pattern.compile(\"(([0-9a-fA-F]{2}[:-]){5}[0-9a-fA-F]{2})\");\n+    private static final int CMD_TIMEOUT_MS = 1000;\n+\n+    private static final String COMMAND;\n+    static {\n+        String os = System.getProperty(\"os.name\").toLowerCase();\n+        LOGGER.debug(\"os: {}\", os);\n+        if ((os.indexOf(\"win\") >= 0)) {\n+            COMMAND = \"arp -a %s\";\n+        } else if ((os.indexOf(\"mac\") >= 0)) {\n+            COMMAND = \"arp %s\";\n+        } else { // linux\n+            if (checkIfLinuxCommandExists(\"arp\")) {\n+                COMMAND = \"arp %s\";\n+            } else if (checkIfLinuxCommandExists(\"arping\")) { // typically OH provided docker image\n+                COMMAND = \"arping -r -c 1 -C 1 %s\";\n+            } else {\n+                COMMAND = \"\";\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get MAC address for host\n+     *\n+     * @param hostName Host Name (or IP address) of host to retrieve MAC address for\n+     * @return MAC address\n+     */\n+    public static @Nullable String getMACAddress(String hostName) {\n+        if (COMMAND.isEmpty()) {\n+            LOGGER.debug(\"MAC address detection not possible. No command to identify MAC found.\");\n+            return null;\n+        }\n+\n+        String cmd = String.format(COMMAND, hostName);\n+        String response = ExecUtil.executeCommandLineAndWaitResponse(cmd, CMD_TIMEOUT_MS);\n+        Matcher matcher = MAC_REGEX.matcher(response);\n+        String macAddress = null;\n+\n+        while (matcher.find()) {\n+            String group = matcher.group();\n+\n+            if (group.length() == 17) {\n+                macAddress = group;\n+                break;\n+            }\n+        }\n+\n+        if (macAddress != null) {\n+            LOGGER.debug(\"MAC address of host {} is {}\", hostName, macAddress);\n+        } else {\n+            LOGGER.debug(\"Problem executing command {} to retrieve MAC address for {}: {}\", cmd, hostName, response);\n+        }\n+        return macAddress;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407bd9ca02fb69521b84014a28be01262fd75375"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjAyMDEz", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-395602013", "createdAt": "2020-04-17T16:30:23Z", "commit": {"oid": "c97fac2f259c4022b6b750f09f33f3cb0af273ac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjQ5NDc3", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-395649477", "createdAt": "2020-04-17T17:40:05Z", "commit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MDowNVrOGHXL0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNzo0MDowNVrOGHXL0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MzA3Mg==", "bodyText": "can you run the spotless formatter on this? This string is too long and should be split into multiple lines.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410373072", "createdAt": "2020-04-17T17:40:05Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,81 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\n+                            \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan (WOL). Please set the macAddress config value in Thing configuration to enable this.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e3dbfc563775033ed3e35787a44252ffa747a44", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/8e3dbfc563775033ed3e35787a44252ffa747a44", "committedDate": "2020-04-17T19:20:27Z", "message": "Update bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java\r\n\r\nReformatting debug message.\r\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>"}, "afterCommit": {"oid": "80f3e89fdfb1873c1109eeaca72aa9834c270bee", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/80f3e89fdfb1873c1109eeaca72aa9834c270bee", "committedDate": "2020-04-17T19:23:43Z", "message": "Reformatting debug message.\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzM1NjA1", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-395735605", "createdAt": "2020-04-17T19:58:31Z", "commit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTo1ODozMVrOGHbUDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDowMzoxMFrOGHbcEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MDcxOQ==", "bodyText": "Why a first if and then a switch ??\nJust reading that change, I already know that it will no more work for me.\nYou must absolutely consider DISCONNECTING too and send a WOL. The state DISCONNECTING is a state that remains a long time in my case. I need the ability to turn on the TV in this case too.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410440719", "createdAt": "2020-04-17T19:58:31Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -46,13 +47,11 @@ public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n         } else if (OnOffType.ON == command) {\n-            if (handler.getSocket().isConnected()) {\n-                logger.debug(\"Received ON - TV is already on.\");\n-                handler.postUpdate(channelId, OnOffType.ON);\n-            } else {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTMyMA==", "bodyText": "All your logic was to consider the channel as ON only when REGISTERED. So why setting the channel state to ON when the state is CONNECTING or REGISTERING ?", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410441320", "createdAt": "2020-04-17T19:59:48Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MTU4Mg==", "bodyText": "As already mentioned, I disagree here. We need the ability to turn on the TV with WOL when in this state.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410441582", "createdAt": "2020-04-17T20:00:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0MjMyNA==", "bodyText": "Are you sure that you can send command when in REGISTERING ?\nLook at sendCommand, you allow sending commands only when state is REGISTERED.\nAnd once again, why a first if and then a switch ??", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410442324", "createdAt": "2020-04-17T20:02:13Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0Mjc3MA==", "bodyText": "No coherent with your logic.", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410442770", "createdAt": "2020-04-17T20:03:10Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -69,13 +68,42 @@ public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command c\n                         }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n                     }\n                 }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n             }\n         } else if (OnOffType.OFF == command) {\n-            if (!handler.getSocket().isConnected()) {\n-                logger.debug(\"Received OFF - TV is already off.\");\n-                handler.postUpdate(channelId, OnOffType.OFF);\n-            } else {\n+            if (State.REGISTERED == state || State.REGISTERING == state) {\n                 handler.getSocket().powerOff(getDefaultResponseListener());\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                        logger.debug(\"Received OFF - TV is currently connecting.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6e869d7d8c00a8d62ce9fd92cae282fe1222092"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NzQ1MDIx", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-395745021", "createdAt": "2020-04-17T20:15:14Z", "commit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoxNToxNVrOGHbwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMDoxNToyNlrOGHbw_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODAzOA==", "bodyText": "Please move this to the switch statement", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410448038", "createdAt": "2020-04-17T20:15:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {\n+                String macAddress = configProvider.getMacAddress();\n+                if (macAddress.isEmpty()) {\n+                    logger.debug(\"Received ON - Turning TV on via API is not supported by LG WebOS TVs. \"\n+                            + \"You may succeed using wake on lan (WOL). \"\n+                            + \"Please set the macAddress config value in Thing configuration to enable this.\");\n+                    handler.postUpdate(channelId, OnOffType.OFF);\n+                } else {\n+                    for (int i = 0; i < WOL_PACKET_RETRY_COUNT; i++) {\n+                        scheduler.schedule(() -> {\n+                            try {\n+                                WakeOnLanUtility.sendWOLPacket(macAddress);\n+                            } catch (IllegalArgumentException e) {\n+                                logger.debug(\"Failed to send WOL packet: {}\", e.getMessage());\n+                            }\n+                        }, i * WOL_PACKET_RETRY_DELAY_MILLIS, TimeUnit.MILLISECONDS);\n+                    }\n+                }\n+            } else {\n+                switch (state) {\n+                    case CONNECTING:\n+                    case REGISTERING:\n+                    case REGISTERED:\n+                        logger.debug(\"Received ON - TV is already on.\");\n+                        handler.postUpdate(channelId, OnOffType.ON);\n+                        break;\n+                    case DISCONNECTING:\n+                        logger.debug(\"Received ON - TV is currently disconnecting.\");\n+                        handler.postUpdate(channelId, OnOffType.OFF);\n+                        break;\n+                    case DISCONNECTED:\n+                        // none reachable code\n+                        break;\n+                }\n+            }\n         } else if (OnOffType.OFF == command) {\n-            handler.getSocket().powerOff(getDefaultResponseListener());\n+            if (State.REGISTERED == state || State.REGISTERING == state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ0ODEyNQ==", "bodyText": "Please move this to the switch statement", "url": "https://github.com/openhab/openhab-addons/pull/7103#discussion_r410448125", "createdAt": "2020-04-17T20:15:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.lgwebos/src/main/java/org/openhab/binding/lgwebos/internal/PowerControlPower.java", "diffHunk": "@@ -29,31 +33,82 @@\n  */\n @NonNullByDefault\n public class PowerControlPower extends BaseChannelHandler<CommandConfirmation> {\n+    private static final int WOL_PACKET_RETRY_COUNT = 10;\n+    private static final int WOL_PACKET_RETRY_DELAY_MILLIS = 100;\n+\n     private final Logger logger = LoggerFactory.getLogger(PowerControlPower.class);\n+    private final ConfigProvider configProvider;\n+    private final ScheduledExecutorService scheduler;\n+\n+    public PowerControlPower(ConfigProvider configProvider, ScheduledExecutorService scheduler) {\n+        this.configProvider = configProvider;\n+        this.scheduler = scheduler;\n+    }\n \n     @Override\n     public void onReceiveCommand(String channelId, LGWebOSHandler handler, Command command) {\n+        final State state = handler.getSocket().getState();\n         if (RefreshType.REFRESH == command) {\n             handler.postUpdate(channelId, handler.getSocket().isConnected() ? OnOffType.ON : OnOffType.OFF);\n-            return;\n-        }\n-        if (OnOffType.ON == command) {\n-            logger.debug(\n-                    \"Received ON - Turning TV on via API is not supported by LG WebOS TVs. You may succeed using wake on lan binding, please consult lgwebos binding documentation.\");\n-        }\n-        if (!handler.getSocket().isConnected()) {\n-            /*\n-             * Unable to send anything to a not connected device.\n-             * onDeviceReady nor onDeviceRemoved will be called and item state would be permanently inconsistent.\n-             * Therefore setting state to OFF\n-             */\n-            handler.postUpdate(channelId, OnOffType.OFF);\n+        } else if (OnOffType.ON == command) {\n+            if (State.DISCONNECTED == state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae0c60c670e6b7b70bb79b872b205d608a1a303"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "770acf232a7022ea234900dce9c3e60f932708c7", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/770acf232a7022ea234900dce9c3e60f932708c7", "committedDate": "2020-04-17T22:00:33Z", "message": "Adding WOL Implementation to PowerControl channel with ability to determine MAC (best effort via arp) and send WOL natively.\nRemoved Search, as second screen service does actually show up in regular scans now.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f3a79202a05002476fb32bb3be34f257c283923", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/2f3a79202a05002476fb32bb3be34f257c283923", "committedDate": "2020-04-17T22:00:33Z", "message": "Addressing review comments in WakeOnLanUitility and config.xml.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa1d08beaa0f9f8bb8b757ecc987de2be1562f80", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/aa1d08beaa0f9f8bb8b757ecc987de2be1562f80", "committedDate": "2020-04-17T22:00:33Z", "message": "Add mac and windows commands to discover MAC.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdf1dcf817039dfe99e57bd819f30298bbdfaba5", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/fdf1dcf817039dfe99e57bd819f30298bbdfaba5", "committedDate": "2020-04-17T22:00:33Z", "message": "Break once MAC is found in result.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "705c3dd29f7884cd658e3c146753bdc879288aba", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/705c3dd29f7884cd658e3c146753bdc879288aba", "committedDate": "2020-04-17T22:00:33Z", "message": "Using org.eclipse.smarthome.io.net.exec.ExecUtil instead of implementing Commandline Execution in the binding itself.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b90b8ff7addf978fae15e84c9f7bcbcc125447e8", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/b90b8ff7addf978fae15e84c9f7bcbcc125447e8", "committedDate": "2020-04-17T22:00:34Z", "message": "Detecting which linux tool to detect MAC exists, arp or arping.\n\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b204ab30af9eedd1296c8461c18decce4bd20c1", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/5b204ab30af9eedd1296c8461c18decce4bd20c1", "committedDate": "2020-04-17T22:00:34Z", "message": "Fixed typo in debug message.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e8e9ec98f24266b8c35b6a1ad9d78b5a4e93fab", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/5e8e9ec98f24266b8c35b6a1ad9d78b5a4e93fab", "committedDate": "2020-04-17T22:00:34Z", "message": "Addressing review comments on formatting.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f6d1e85197afd43e818bff5c5c53ca7bada4c43", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/8f6d1e85197afd43e818bff5c5c53ca7bada4c43", "committedDate": "2020-04-17T22:00:34Z", "message": "MacAddress parameter added to README demo item and Power Control Handler updated.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f062c373afa577bf268216e70f77c72afb2e44", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/35f062c373afa577bf268216e70f77c72afb2e44", "committedDate": "2020-04-17T22:00:34Z", "message": "Handle power on off commands in all possible LGWebOSTVSocket states.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e1c56a77530375cb006d554390d17e5d4327520", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/4e1c56a77530375cb006d554390d17e5d4327520", "committedDate": "2020-04-17T22:00:34Z", "message": "Reformatting debug message.\n\nCo-Authored-By: cpmeister <mistercpp2000@gmail.com>\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667ac968dcc4e337f9d0cd3927e617545eb4484f", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/667ac968dcc4e337f9d0cd3927e617545eb4484f", "committedDate": "2020-04-17T22:00:34Z", "message": "Fix whitespace.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2868228602368cd96b9f6ab3d6f36724c0b448b7", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/2868228602368cd96b9f6ab3d6f36724c0b448b7", "committedDate": "2020-04-17T22:00:34Z", "message": "Moved If statement cases into switch statement.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "committedDate": "2020-04-17T22:00:34Z", "message": "Adding comments.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e008b4ad527a0fd59fa5f5b42cc4b70ecaa4faf", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/8e008b4ad527a0fd59fa5f5b42cc4b70ecaa4faf", "committedDate": "2020-04-17T21:47:59Z", "message": "Adding comments.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}, "afterCommit": {"oid": "9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/9f1e593e8e5c3a49b423a49e03456d1fa167c44b", "committedDate": "2020-04-17T22:00:34Z", "message": "Adding comments.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a9a6ca80c5741ff51085b8c0d488e6c3fdefb95", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/0a9a6ca80c5741ff51085b8c0d488e6c3fdefb95", "committedDate": "2020-04-18T12:21:48Z", "message": "Applying code review recommendations. Reducing power channel updates. CONNECTING and REGISTERING still count as OFF states.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98635746879e0f30086c3f51e715dc5c788580c5", "author": {"user": {"login": "sprehn", "name": "Sebastian Prehn"}}, "url": "https://github.com/openhab/openhab-addons/commit/98635746879e0f30086c3f51e715dc5c788580c5", "committedDate": "2020-04-18T12:31:17Z", "message": "Inlining Socket's isConnected method. The method name was also misleading.\nSigned-off-by: Sebastian Prehn <sebastian.prehn@gmx.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTEwNTQ3", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-395910547", "createdAt": "2020-04-18T12:41:07Z", "commit": {"oid": "98635746879e0f30086c3f51e715dc5c788580c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTI4MDkw", "url": "https://github.com/openhab/openhab-addons/pull/7103#pullrequestreview-395928090", "createdAt": "2020-04-18T16:22:19Z", "commit": {"oid": "98635746879e0f30086c3f51e715dc5c788580c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}