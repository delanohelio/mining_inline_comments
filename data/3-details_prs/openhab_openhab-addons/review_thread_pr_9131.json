{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjgzNDg1", "number": 9131, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDo1Njo0MVrOE9Y66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDo1Njo0MVrOE9Y66g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODA2ODkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMDo1Njo0MVrOH6DnTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjowMzozNVrOH6FPHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ==", "bodyText": "This most likely won't generate an alphanumeric string. So this change isn't equivalent.", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530638671", "createdAt": "2020-11-25T20:56:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0NDMzNw==", "bodyText": "Do you have an idea how it could be solved? Something like this\nUUID.randomUUID().toString().replaceAll(\"-\", \"\");", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530644337", "createdAt": "2020-11-25T21:10:51Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, "originalCommit": {"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY0NjAzOA==", "bodyText": "You could also do:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        byte[] array = new byte[20];\n          \n          \n            \n                        new Random().nextBytes(array);\n          \n          \n            \n                        newSecretString = new String(array, StandardCharsets.UTF_8);\n          \n          \n            \n                        byte[] array = new byte[10];\n          \n          \n            \n                        new Random().nextBytes(array);\n          \n          \n            \n                        newSecretString = HexUtils.bytesToHex(array);\n          \n      \n    \n    \n  \n\nThat should produce a random enough alphanumeric string.", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530646038", "createdAt": "2020-11-25T21:15:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, "originalCommit": {"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1Mzg5MQ==", "bodyText": "Alright, but is it secure enough?\nWhile touching it anyways we can ask @digitaldan for his opinion and if we maybe should increase the number of characters for the secret.", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530653891", "createdAt": "2020-11-25T21:35:22Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, "originalCommit": {"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY1NDY3OQ==", "bodyText": "If you want something truly equivalent to the original code, you could just make a utility method:\nstatic final String AB = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\nstatic SecureRandom rnd = new SecureRandom();\n\nString randomString(int len){\n   StringBuilder sb = new StringBuilder(len);\n   for(int i = 0; i < len; i++)\n      sb.append(AB.charAt(rnd.nextInt(AB.length())));\n   return sb.toString();\n}", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530654679", "createdAt": "2020-11-25T21:37:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, "originalCommit": {"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2NTI0NQ==", "bodyText": "That sounds like the best option for me. Thanks for your help, I will incorporate it later.", "url": "https://github.com/openhab/openhab-addons/pull/9131#discussion_r530665245", "createdAt": "2020-11-25T22:03:35Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.io.openhabcloud/src/main/java/org/openhab/io/openhabcloud/internal/CloudService.java", "diffHunk": "@@ -292,7 +298,9 @@ private String getSecret() {\n         String newSecretString = \"\";\n \n         if (!file.exists()) {\n-            newSecretString = RandomStringUtils.randomAlphanumeric(20);\n+            byte[] array = new byte[20];\n+            new Random().nextBytes(array);\n+            newSecretString = new String(array, StandardCharsets.UTF_8);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDYzODY3MQ=="}, "originalCommit": {"oid": "84f40bb56e629e49f9d7c5ebdc487f505e43ec90"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3707, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}