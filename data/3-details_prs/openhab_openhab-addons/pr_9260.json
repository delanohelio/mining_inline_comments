{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMjI0MTg3", "number": 9260, "title": "[Broadlinkthermostat] Initial contribution", "bodyText": "This is a new binding to support thermostats that are based on a broadlink chips and sold with different brand names (see https://community.openhab.org/t/electronic-heating-thermostat-reverse-engineering-beok-floureon-decdeal/39251).\nWhile there is already another broadlink binding in development (https://community.openhab.org/t/broadlink-binding-for-rmx-a1-spx-and-mp-any-interest/22768) they both focus on different things, that's why I decided to create a separate binding.\nUnfortunately the binding includes a library in the lib folder which is not an osgi bundle. The distributed version is a jdk11 patched version of https://github.com/mob41/broadlink-java-api/\nMyself and other users have been using this binding for quite a while, that's why I'd like to get this into the official distribution.\nDiscussion for this binding takes place at https://community.openhab.org/t/broadlink-floureon-hysen-thermostat-binding/81921", "createdAt": "2020-12-06T16:24:50Z", "url": "https://github.com/openhab/openhab-addons/pull/9260", "merged": true, "mergeCommit": {"oid": "a58676dc414556db71b09ce7307a51b3e0c17d9a"}, "closed": true, "closedAt": "2021-02-08T22:08:10Z", "author": {"login": "flo-02-mu"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdl36sJgFqTU1MDk1Nzg0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd4OvMmgFqTU4NTk2ODc4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTU3ODQx", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-550957841", "createdAt": "2020-12-13T20:41:00Z", "commit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDo0MTowMVrOIE5HdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMToxNTo1OFrOIE5f3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMTAxMg==", "bodyText": "The link is broken.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542001012", "createdAt": "2020-12-13T20:41:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/README.md", "diffHunk": "@@ -0,0 +1,69 @@\n+# Broadlink Thermostat Binding\n+\n+The binding integrates devices based on Broadlinkthermostat controllers.\n+As the binding uses the [broadlinkthermostat-java-api](https://github.com/mob41/broadlinkthermostat-java-api), theoretically all devices supported by the api can be integrated with this binding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMTA5Nw==", "bodyText": "This is redundant. One of the sentences could be removed.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542001097", "createdAt": "2020-12-13T20:41:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/README.md", "diffHunk": "@@ -0,0 +1,69 @@\n+# Broadlink Thermostat Binding\n+\n+The binding integrates devices based on Broadlinkthermostat controllers.\n+As the binding uses the [broadlinkthermostat-java-api](https://github.com/mob41/broadlinkthermostat-java-api), theoretically all devices supported by the api can be integrated with this binding.\n+\n+*Note:* So far only the Floureon Thermostat has been tested! \n+\n+## Supported Things\n+\n+*Note:* So far only the Floureon Thermostat has been tested! The other things are \"best guess\" implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMTk1MA==", "bodyText": "Can you ask the maintainer of this lib if it can be uploaded to a public maven repository to remove the JAR from this binding?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542001950", "createdAt": "2020-12-13T20:45:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/pom.xml", "diffHunk": "@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.broadlinkthermostat</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Broadlink Thermostat Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.github.mob41.blapi</groupId>\n+      <artifactId>broadlink-java-api</artifactId>\n+      <version>1.0.1</version>\n+      <!-- <scope>provided</scope> -->\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMjAwMQ==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542002001", "createdAt": "2020-12-13T20:46:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/pom.xml", "diffHunk": "@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.broadlinkthermostat</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: Broadlink Thermostat Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.github.mob41.blapi</groupId>\n+      <artifactId>broadlink-java-api</artifactId>\n+      <version>1.0.1</version>\n+      <!-- <scope>provided</scope> -->\n+    </dependency>\n+  </dependencies>\n+\n+  <!-- Enable to build on newer java versions -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMjg3MQ==", "bodyText": "What's the purpose of this?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542002871", "createdAt": "2020-12-13T20:50:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.BroadlinkThermostatHandler;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE)\n+            .collect(Collectors.toSet()));\n+    private static final Map<String, BroadlinkThermostatHandler> BROADLINK_THERMOSTAT_THING_HANDLERS = new HashMap<>();\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (FLOUREON_THERMOSTAT_THING_TYPE.equals(thingTypeUID) || HYSEN_THERMOSTAT_THING_TYPE.equals(thingTypeUID)) {\n+            return new FloureonThermostatHandler(thing);\n+        }\n+        logger.warn(\"No handler for {} available\", thingTypeUID);\n+        return null;\n+    }\n+\n+    @Override\n+    public void unregisterHandler(Thing thing) {\n+        super.unregisterHandler(thing);\n+        BROADLINK_THERMOSTAT_THING_HANDLERS.remove(thing.getUID().toString());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMjk1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n          \n          \n            \n                        .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE)\n          \n          \n            \n                        .collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set\n          \n          \n            \n                        .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542002950", "createdAt": "2020-12-13T20:51:14Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.BroadlinkThermostatHandler;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE)\n+            .collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzI0OA==", "bodyText": "You could move this as a parameter argument to the constructor to avoid the Nullable annotation.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003248", "createdAt": "2020-12-13T20:52:40Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzMxNA==", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be debug. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003314", "createdAt": "2020-12-13T20:53:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzMzMg==", "bodyText": "Logging to info should be used sparsely e.g. a newly started component or a user file that has been loaded. This could be debug.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003332", "createdAt": "2020-12-13T20:53:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.info(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzQwMg==", "bodyText": "warn seems a bit unreasonable.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003402", "createdAt": "2020-12-13T20:53:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.info(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwMzQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Uses OpenHAB's NetworkAddressService to determine the local primary network interface.\n          \n          \n            \n                 * Uses openHAB's NetworkAddressService to determine the local primary network interface.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542003482", "createdAt": "2020-12-13T20:54:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private @Nullable NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Collections.unmodifiableSet(Stream\n+            .of(FLOUREON_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE).collect(Collectors.toSet()));\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    public BroadlinkThermostatDiscoveryService(@Nullable Set<ThingTypeUID> supportedThingTypes, int timeout)\n+            throws IllegalArgumentException {\n+        super(supportedThingTypes, timeout);\n+    }\n+\n+    public BroadlinkThermostatDiscoveryService() {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+    }\n+\n+    @Reference\n+    protected void setNetworkAddressService(NetworkAddressService networkAddressService) {\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.error(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.info(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.warn(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());\n+            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+            logger.debug(\"Property map: {}\", properties);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                    .withRepresentationProperty(BroadlinkThermostatBindingConstants.HOST).build();\n+\n+            thingDiscovered(discoveryResult);\n+\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        startScan();\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.trace(\"Stopping background scan for Broadlinkthermostat devices\");\n+        stopScan();\n+    }\n+\n+    private @Nullable InetAddress getIpAddress() {\n+        return getIpFromNetworkAddressService().orElse(null);\n+    }\n+\n+    /**\n+     * Uses OpenHAB's NetworkAddressService to determine the local primary network interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDE1OQ==", "bodyText": "The config parameters should be read in initialize() as the constructor won't be invoked when then configuration changes.\nYou could create a config parameter class and read the config with getConfigAs(). This way you can avoid the casting and the null checks, which would be necesseary if you read the config in initialize().", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004159", "createdAt": "2020-12-13T20:57:43Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDE5Ng==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004196", "createdAt": "2020-12-13T20:57:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDgxNg==", "bodyText": "What's the purpose of this?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004816", "createdAt": "2020-12-13T21:01:42Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);\n+    }\n+\n+    protected void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while authenticating broadlinkthermostat device {}\", thing.getLabel(), e);\n+            updateStatus(ThingStatus.INITIALIZING);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        authenticate();\n+\n+        // schedule a new scan every minute\n+        scanJob = scheduler.scheduleWithFixedDelay(this::refreshData, 0, 1, TimeUnit.MINUTES);\n+    }\n+\n+    protected void refreshData() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDg4Mg==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging\nSame for below.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004882", "createdAt": "2020-12-13T21:02:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);\n+    }\n+\n+    protected void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while authenticating broadlinkthermostat device {}\", thing.getLabel(), e);\n+            updateStatus(ThingStatus.INITIALIZING);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        authenticate();\n+\n+        // schedule a new scan every minute\n+        scanJob = scheduler.scheduleWithFixedDelay(this::refreshData, 0, 1, TimeUnit.MINUTES);\n+    }\n+\n+    protected void refreshData() {\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"Disposing thing {}\", getThing().getUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNDk0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private FloureonDevice floureonDevice;\n          \n          \n            \n                private @Nullable FloureonDevice floureonDevice;", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542004945", "createdAt": "2020-12-13T21:02:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTQ4NA==", "bodyText": "Bindings must not set the status to INITIALIZING. OFFLINE would be appropriate. Also, you could set the ThingStatusDetail to COMMUNICATION_ERROR and set a message as third argument to updateStatus(), which includes the exception's message.\nThe log message can be removed, as updateStatus() does already the logging.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005484", "createdAt": "2020-12-13T21:05:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    protected @Nullable BLDevice blDevice;\n+    protected final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    protected @Nullable ScheduledFuture<?> scanJob;\n+    protected String host;\n+    protected String mac;\n+    protected String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+        host = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.HOST);\n+        mac = (String) thing.getConfiguration().get(BroadlinkThermostatBindingConstants.MAC);\n+        logger.debug(\"Config properties: {}\", thing.getConfiguration());\n+        logger.debug(\"host: {}, mac: {}, deviceDescription: {}\", host, mac, deviceDescription);\n+    }\n+\n+    protected void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            logger.error(\"Error while authenticating broadlinkthermostat device {}\", thing.getLabel(), e);\n+            updateStatus(ThingStatus.INITIALIZING);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTU4MA==", "bodyText": "Can you make the logging less chatty?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005580", "createdAt": "2020-12-13T21:06:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTYzMQ==", "bodyText": "What type of exception do you expect here? Can you specify the concrete type? Please check all.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005631", "createdAt": "2020-12-13T21:06:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTk4OA==", "bodyText": "You should use QuantityTyp.toUnit() to convert the temperature to the unit you expect. The user could use \u00b0F or \u00b0C.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542005988", "createdAt": "2020-12-13T21:08:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                floureonDevice.setThermostatTemp(((QuantityType) command).doubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjYwNg==", "bodyText": "This annotation has no effect and can be removed.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006606", "createdAt": "2020-12-13T21:12:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                floureonDevice.setThermostatTemp(((QuantityType) command).doubleValue());\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting setpoint of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while trying to set sensor mode {}: \", command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting remote lock of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting time of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        try {\n+            AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            if (advancedStatusInfo == null) {\n+                logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                authenticate();\n+                advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            }\n+            if (advancedStatusInfo == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                return;\n+            }\n+            logger.debug(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE,\n+                    new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Mode {}\", StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(ROOM_TEMPERATURE, new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                    new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(ROOM_TEMPERATURE_EXTERNAL_SENSOR, new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(SETPOINT, new DecimalType(advancedStatusInfo.getThermostatTemp()));\n+            updateState(POWER, OnOffType.from(advancedStatusInfo.getPower()));\n+            updateState(MODE, StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(SENSOR, StringType.valueOf(advancedStatusInfo.getSensorControl().name()));\n+            logger.debug(\"Updating channel {} with value {}\", SENSOR,\n+                    new StringType(advancedStatusInfo.getSensorControl().name()));\n+            updateState(TEMPERATURE_OFFSET, new DecimalType(advancedStatusInfo.getDif()));\n+            updateState(ACTIVE, OnOffType.from(advancedStatusInfo.getActive()));\n+            updateState(REMOTE_LOCK, OnOffType.from(advancedStatusInfo.getRemoteLock()));\n+            String timestamp = getTimestamp(advancedStatusInfo);\n+            logger.debug(\"Composed timestamp: {}\", timestamp);\n+            updateState(TIME, DateTimeType.valueOf(timestamp));\n+        } catch (Exception e) {\n+            logger.error(\"Error while retrieving data for {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjc3NA==", "bodyText": "You could use DateTimeFormatter to make the code better to read and maintain.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006774", "createdAt": "2020-12-13T21:12:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                floureonDevice.setThermostatTemp(((QuantityType) command).doubleValue());\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting setpoint of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while trying to set sensor mode {}: \", command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting remote lock of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting time of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        try {\n+            AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            if (advancedStatusInfo == null) {\n+                logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                authenticate();\n+                advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            }\n+            if (advancedStatusInfo == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                return;\n+            }\n+            logger.debug(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE,\n+                    new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Mode {}\", StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(ROOM_TEMPERATURE, new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                    new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(ROOM_TEMPERATURE_EXTERNAL_SENSOR, new DecimalType(advancedStatusInfo.getExternalTemp()));\n+            updateState(SETPOINT, new DecimalType(advancedStatusInfo.getThermostatTemp()));\n+            updateState(POWER, OnOffType.from(advancedStatusInfo.getPower()));\n+            updateState(MODE, StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(SENSOR, StringType.valueOf(advancedStatusInfo.getSensorControl().name()));\n+            logger.debug(\"Updating channel {} with value {}\", SENSOR,\n+                    new StringType(advancedStatusInfo.getSensorControl().name()));\n+            updateState(TEMPERATURE_OFFSET, new DecimalType(advancedStatusInfo.getDif()));\n+            updateState(ACTIVE, OnOffType.from(advancedStatusInfo.getActive()));\n+            updateState(REMOTE_LOCK, OnOffType.from(advancedStatusInfo.getRemoteLock()));\n+            String timestamp = getTimestamp(advancedStatusInfo);\n+            logger.debug(\"Composed timestamp: {}\", timestamp);\n+            updateState(TIME, DateTimeType.valueOf(timestamp));\n+        } catch (Exception e) {\n+            logger.error(\"Error while retrieving data for {}\", thing.getUID(), e);\n+        }\n+    }\n+\n+    @NotNull\n+    private String getTimestamp(AdvancedStatusInfo advancedStatusInfo) {\n+        ZonedDateTime now = ZonedDateTime.now();\n+        return (String.valueOf(now.getYear()) + \"-\" + String.format(\"%02d\", now.getMonthValue()) + \"-\"\n+                + String.format(\"%02d\", now.getDayOfMonth()) + \"T\" + String.format(\"%02d\", advancedStatusInfo.getHour())\n+                + \":\" + String.format(\"%02d\", advancedStatusInfo.getMin()) + \":\"\n+                + String.format(\"%02d\", advancedStatusInfo.getSec()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjgwNA==", "bodyText": "Can this be removed?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006804", "createdAt": "2020-12-13T21:13:10Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"broadlinkthermostat\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Broadlinkthermostat Binding</name>\n+\t<description>This is the binding for Broadlinkthermostat devices.</description>\n+\t<author>Florian Mueller</author>\n+\n+\t<!--config-description>\n+\t\t<parameter name=\"timeout\" type=\"integer\">\n+\t\t<label>Timeout</label>\n+\t\t<description>The discovery timeout</description>\n+\t\t<required>false</required>\n+\t\t</parameter>\n+\t\t</config-description -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjgyMw==", "bodyText": "The author tag is deprecated and should therefore be removed. See openhab/openhab-core#1844.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006823", "createdAt": "2020-12-13T21:13:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/binding/binding.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<binding:binding id=\"broadlinkthermostat\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:binding=\"https://openhab.org/schemas/binding/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/binding/v1.0.0 https://openhab.org/schemas/binding-1.0.0.xsd\">\n+\n+\t<name>Broadlinkthermostat Binding</name>\n+\t<description>This is the binding for Broadlinkthermostat devices.</description>\n+\t<author>Florian Mueller</author>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjg0MQ==", "bodyText": "You could specify <context>network-address</context> to get a free validation.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006841", "createdAt": "2020-12-13T21:13:28Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0\n+\thttps://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\">\n+\t\t<parameter name=\"host\" type=\"text\">\n+\t\t\t<label>Hostname</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNjg2OA==", "bodyText": "The required tag is deprecated. You could use the attribute instead: required=\"true\"", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542006868", "createdAt": "2020-12-13T21:13:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,21 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0\n+\thttps://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\">\n+\t\t<parameter name=\"host\" type=\"text\">\n+\t\t\t<label>Hostname</label>\n+\t\t\t<description>The hostname/IP address the device is bound to, e.g. 192.168.0.2</description>\n+\t\t\t<required>false</required>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNzA5MA==", "bodyText": "The tag's value could be human readable.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542007090", "createdAt": "2020-12-13T21:14:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"broadlinkthermostat\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Floureon Thermostat Thing Type -->\n+\t<thing-type id=\"floureonthermostat\">\n+\t\t<label>Floureon Thermostat</label>\n+\t\t<description>A heating device thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"sensor\" typeId=\"sensor\"/>\n+\t\t\t<channel id=\"roomtemperature\" typeId=\"roomtemperature\"/>\n+\t\t\t<channel id=\"roomtemperatureexternalsensor\" typeId=\"roomtemperatureexternalsensor\"/>\n+\t\t\t<channel id=\"active\" typeId=\"active\"/>\n+\t\t\t<channel id=\"setpoint\" typeId=\"setpoint\"/>\n+\t\t\t<channel id=\"temperatureoffset\" typeId=\"temperatureoffset\"/>\n+\t\t\t<channel id=\"remotelock\" typeId=\"remotelock\"/>\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>host</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\"/>\n+\t</thing-type>\n+\t<thing-type id=\"hysenthermostat\">\n+\t\t<label>Hysen Thermostat</label>\n+\t\t<description>A heating device thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"sensor\" typeId=\"sensor\"/>\n+\t\t\t<channel id=\"roomtemperature\" typeId=\"roomtemperature\"/>\n+\t\t\t<channel id=\"roomtemperatureexternalsensor\" typeId=\"roomtemperatureexternalsensor\"/>\n+\t\t\t<channel id=\"active\" typeId=\"active\"/>\n+\t\t\t<channel id=\"setpoint\" typeId=\"setpoint\"/>\n+\t\t\t<channel id=\"temperatureoffset\" typeId=\"temperatureoffset\"/>\n+\t\t\t<channel id=\"remotelock\" typeId=\"remotelock\"/>\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>host</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"power\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Switch display on/off and enable/disables heating</description>\n+\t\t<category>Switch</category>\n+\t</channel-type>\n+\t<channel-type id=\"mode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Mode</label>\n+\t\t<description>Current mode of the thermostat</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">auto</option>\n+\t\t\t\t<option value=\"manual\">manual</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"sensor\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Sensor</label>\n+\t\t<description>The sensor (internal/external) used for triggering the thermostat</description>\n+\t\t<category>Sensor</category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"internal\">internal</option>\n+\t\t\t\t<option value=\"external\">external</option>\n+\t\t\t\t<option value=\"internal_temp_external_limit\">internal_temp_external_limit</option>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNzI0MQ==", "bodyText": "Words in labels should be capitalized (except prepositions and so on). See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542007241", "createdAt": "2020-12-13T21:15:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"broadlinkthermostat\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Floureon Thermostat Thing Type -->\n+\t<thing-type id=\"floureonthermostat\">\n+\t\t<label>Floureon Thermostat</label>\n+\t\t<description>A heating device thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"sensor\" typeId=\"sensor\"/>\n+\t\t\t<channel id=\"roomtemperature\" typeId=\"roomtemperature\"/>\n+\t\t\t<channel id=\"roomtemperatureexternalsensor\" typeId=\"roomtemperatureexternalsensor\"/>\n+\t\t\t<channel id=\"active\" typeId=\"active\"/>\n+\t\t\t<channel id=\"setpoint\" typeId=\"setpoint\"/>\n+\t\t\t<channel id=\"temperatureoffset\" typeId=\"temperatureoffset\"/>\n+\t\t\t<channel id=\"remotelock\" typeId=\"remotelock\"/>\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>host</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\"/>\n+\t</thing-type>\n+\t<thing-type id=\"hysenthermostat\">\n+\t\t<label>Hysen Thermostat</label>\n+\t\t<description>A heating device thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"sensor\" typeId=\"sensor\"/>\n+\t\t\t<channel id=\"roomtemperature\" typeId=\"roomtemperature\"/>\n+\t\t\t<channel id=\"roomtemperatureexternalsensor\" typeId=\"roomtemperatureexternalsensor\"/>\n+\t\t\t<channel id=\"active\" typeId=\"active\"/>\n+\t\t\t<channel id=\"setpoint\" typeId=\"setpoint\"/>\n+\t\t\t<channel id=\"temperatureoffset\" typeId=\"temperatureoffset\"/>\n+\t\t\t<channel id=\"remotelock\" typeId=\"remotelock\"/>\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>host</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"power\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Switch display on/off and enable/disables heating</description>\n+\t\t<category>Switch</category>\n+\t</channel-type>\n+\t<channel-type id=\"mode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Mode</label>\n+\t\t<description>Current mode of the thermostat</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">auto</option>\n+\t\t\t\t<option value=\"manual\">manual</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"sensor\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Sensor</label>\n+\t\t<description>The sensor (internal/external) used for triggering the thermostat</description>\n+\t\t<category>Sensor</category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"internal\">internal</option>\n+\t\t\t\t<option value=\"external\">external</option>\n+\t\t\t\t<option value=\"internal_temp_external_limit\">internal_temp_external_limit</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"active\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Active</label>\n+\t\t<description>Shows if thermostat is currently actively heating</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomtemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<description>Room temperature, measured directly at the device</description>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomtemperatureexternalsensor\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature external sensor</label>\n+\t\t<description>Room temperature, measured by the external sensor</description>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"setpoint\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Setpoint</label>\n+\t\t<description>Temperature setpoint that open/close valve</description>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" step=\"0.5\"/>\n+\t</channel-type>\n+\t<channel-type id=\"temperatureoffset\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature offset</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNzI2MQ==", "bodyText": "Labels are expected to be as short as possible. Guideline is 2-3 words with up to 25 chars. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r542007261", "createdAt": "2020-12-13T21:15:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,136 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"broadlinkthermostat\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Floureon Thermostat Thing Type -->\n+\t<thing-type id=\"floureonthermostat\">\n+\t\t<label>Floureon Thermostat</label>\n+\t\t<description>A heating device thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"sensor\" typeId=\"sensor\"/>\n+\t\t\t<channel id=\"roomtemperature\" typeId=\"roomtemperature\"/>\n+\t\t\t<channel id=\"roomtemperatureexternalsensor\" typeId=\"roomtemperatureexternalsensor\"/>\n+\t\t\t<channel id=\"active\" typeId=\"active\"/>\n+\t\t\t<channel id=\"setpoint\" typeId=\"setpoint\"/>\n+\t\t\t<channel id=\"temperatureoffset\" typeId=\"temperatureoffset\"/>\n+\t\t\t<channel id=\"remotelock\" typeId=\"remotelock\"/>\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>host</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\"/>\n+\t</thing-type>\n+\t<thing-type id=\"hysenthermostat\">\n+\t\t<label>Hysen Thermostat</label>\n+\t\t<description>A heating device thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power\" typeId=\"power\"/>\n+\t\t\t<channel id=\"mode\" typeId=\"mode\"/>\n+\t\t\t<channel id=\"sensor\" typeId=\"sensor\"/>\n+\t\t\t<channel id=\"roomtemperature\" typeId=\"roomtemperature\"/>\n+\t\t\t<channel id=\"roomtemperatureexternalsensor\" typeId=\"roomtemperatureexternalsensor\"/>\n+\t\t\t<channel id=\"active\" typeId=\"active\"/>\n+\t\t\t<channel id=\"setpoint\" typeId=\"setpoint\"/>\n+\t\t\t<channel id=\"temperatureoffset\" typeId=\"temperatureoffset\"/>\n+\t\t\t<channel id=\"remotelock\" typeId=\"remotelock\"/>\n+\t\t\t<channel id=\"time\" typeId=\"time\"/>\n+\t\t</channels>\n+\n+\t\t<representation-property>host</representation-property>\n+\n+\t\t<config-description-ref uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\"/>\n+\t</thing-type>\n+\n+\t<channel-type id=\"power\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Power</label>\n+\t\t<description>Switch display on/off and enable/disables heating</description>\n+\t\t<category>Switch</category>\n+\t</channel-type>\n+\t<channel-type id=\"mode\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Mode</label>\n+\t\t<description>Current mode of the thermostat</description>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"auto\">auto</option>\n+\t\t\t\t<option value=\"manual\">manual</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"sensor\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Sensor</label>\n+\t\t<description>The sensor (internal/external) used for triggering the thermostat</description>\n+\t\t<category>Sensor</category>\n+\t\t<state>\n+\t\t\t<options>\n+\t\t\t\t<option value=\"internal\">internal</option>\n+\t\t\t\t<option value=\"external\">external</option>\n+\t\t\t\t<option value=\"internal_temp_external_limit\">internal_temp_external_limit</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\t<channel-type id=\"active\">\n+\t\t<item-type>Switch</item-type>\n+\t\t<label>Active</label>\n+\t\t<description>Shows if thermostat is currently actively heating</description>\n+\t\t<category>Switch</category>\n+\t\t<state readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomtemperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature</label>\n+\t\t<description>Room temperature, measured directly at the device</description>\n+\t\t<category>Temperature</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\t<channel-type id=\"roomtemperatureexternalsensor\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Room Temperature external sensor</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODIzODEy", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-558823812", "createdAt": "2020-12-25T15:18:08Z", "commit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNToxODowOFrOILdNuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTozOToxOVrOILdWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4Mzg5Ng==", "bodyText": "Can you add license information about the used library here?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548883896", "createdAt": "2020-12-25T15:18:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/NOTICE", "diffHunk": "@@ -0,0 +1,13 @@\n+This content is produced and maintained by the openHAB project.\n+\n+* Project home: https://www.openhab.org\n+\n+== Declared Project Licenses\n+\n+This program and the accompanying materials are made available under the terms\n+of the Eclipse Public License 2.0 which is available at\n+https://www.eclipse.org/legal/epl-2.0/.\n+\n+== Source Code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDA3Nw==", "bodyText": "To make the binding compile, you need to rebase your branch and set the version to the upcoming openHAB version: 3.1.0-SNAPSHOT.\nHere are the commands for rebasing your branch:\nIf not already done, add the upstream openHAB addon repo as a remote to your local repo and fetch it:\ngit remote add upstream https://github.com/openhab/openhab-addons.git\ngit fetch upstream\n\nThen, you can rebase your PR's branch onto main:\ngit rebase upstream/main\n\nFinally force-push the rebased branch to this PR's branch:\ngit push origin [your branch name of this PR] --force-with-lease", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884077", "createdAt": "2020-12-25T15:19:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/pom.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDEzNQ==", "bodyText": "This is logged by the framework and can therefore be removed.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884135", "createdAt": "2020-12-25T15:21:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            HYSEN_THERMOSTAT_THING_TYPE, UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (FLOUREON_THERMOSTAT_THING_TYPE.equals(thingTypeUID) || HYSEN_THERMOSTAT_THING_TYPE.equals(thingTypeUID)) {\n+            return new FloureonThermostatHandler(thing);\n+        }\n+        logger.warn(\"No handler for {} available\", thingTypeUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n          \n          \n            \n            @Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884174", "createdAt": "2020-12-25T15:21:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDI0NA==", "bodyText": "Logging the whole stack trace seems a bit unreasonable. Is logging the exception's message sufficient?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);\n          \n          \n            \n                        logger.debug(\"Error while trying to discover broadlinkthermostat devices: \" + e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884244", "createdAt": "2020-12-25T15:22:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDY2Ng==", "bodyText": "There's a predefined constant for the mac address:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());\n          \n          \n            \n                        properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884666", "createdAt": "2020-12-25T15:26:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                .withRepresentationProperty(BroadlinkThermostatBindingConstants.HOST).build();\n          \n          \n            \n                                .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884703", "createdAt": "2020-12-25T15:26:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: \", e);\n+        }\n+        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(BroadlinkThermostatBindingConstants.MAC, dev.getMac().getMacString());\n+            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+            logger.debug(\"Property map: {}\", properties);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                    .withRepresentationProperty(BroadlinkThermostatBindingConstants.HOST).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDk4OQ==", "bodyText": "You could use the scheduler provided by BaseThingHandler. The protected field is also called scheduler.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548884989", "createdAt": "2020-12-25T15:29:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTAzOQ==", "bodyText": "The log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885039", "createdAt": "2020-12-25T15:29:48Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    protected @Nullable String host;\n+    @Nullable\n+    String mac;\n+    private String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTE4Nw==", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nYou could remove the log message and use the message as a third argument to updateStatus() to display it in the UI.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885187", "createdAt": "2020-12-25T15:31:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTI1Mg==", "bodyText": "This is never used.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885252", "createdAt": "2020-12-25T15:32:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    protected @Nullable String host;\n+    @Nullable\n+    String mac;\n+    private String deviceDescription;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTI4OQ==", "bodyText": "Ok, I overlooked that.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885289", "createdAt": "2020-12-25T15:32:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.jetbrains.annotations.NotNull;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    @Nullable\n+    private FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command class: {}\", command.getClass());\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAwNTYzMQ=="}, "originalCommit": {"oid": "da23d4be119c54a5341b1997504ca25f9cf4dfd1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTMyNg==", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. This could be warn. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nAlso, it seems a bit unreasonable to log the stack trace when the network fails.\nPlease check all.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885326", "createdAt": "2020-12-25T15:33:15Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+        authenticate();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTgyNA==", "bodyText": "You set required=\"false\". Are these two parameters really optional?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885824", "createdAt": "2020-12-25T15:37:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/resources/OH-INF/config/config.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<config-description:config-descriptions\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0\n+\thttps://openhab.org/schemas/config-description-1.0.0.xsd\">\n+\n+\t<config-description uri=\"thing-type:broadlinkthermostat:floureonandhysenthermostat\">\n+\t\t<parameter name=\"host\" type=\"text\" required=\"false\">\n+\t\t\t<label>Hostname</label>\n+\t\t\t<description>The hostname/IP address the device is bound to, e.g. 192.168.0.2</description>\n+\t\t\t<context>network-address</context>\n+\t\t</parameter>\n+\t\t<parameter name=\"mac\" type=\"text\" required=\"false\">\n+\t\t\t<label>MAC Address</label>\n+\t\t\t<description>The unique MAC address of the device, e.g. 00:10:FA:6E:38:4A</description>\n+\t\t</parameter>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NTkxOQ==", "bodyText": "The javadoc states this will throw an exception if the MAC address is null.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548885919", "createdAt": "2020-12-25T15:38:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NjAzNA==", "bodyText": "Please store the result of getConfigAs() to a local variable, as reading the config is an expensive operation.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r548886034", "createdAt": "2020-12-25T15:39:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.common.ThreadPoolManager;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private final ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(\"thingHandler\");\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    protected @Nullable String host;\n+    @Nullable\n+    String mac;\n+    private String deviceDescription;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+        String deviceDescription = thing.getProperties().get(BroadlinkThermostatBindingConstants.DESCRIPTION);\n+        this.deviceDescription = deviceDescription == null ? \"\" : deviceDescription;\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            if (blDevice.auth()) {\n+                logger.debug(\"Authentication for device {} successful\", thing.getLabel());\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error while authenticating broadlinkthermostat device \" + thing.getLabel() + \":\" + e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        host = getConfigAs(BroadlinkThermostatConfig.class).getHost();\n+        mac = getConfigAs(BroadlinkThermostatConfig.class).getMac();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1a486c47e843501fd80a5dd943d72e476307109"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ef47e6c3039ca4d1b5ab4a66cadd496a597aee", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/80ef47e6c3039ca4d1b5ab4a66cadd496a597aee", "committedDate": "2020-12-29T22:42:59Z", "message": "Initial commit\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93e7b3fd1163851591946cd38db28327cdcff66", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/e93e7b3fd1163851591946cd38db28327cdcff66", "committedDate": "2020-12-29T22:42:59Z", "message": "Fix comment in pom\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67702b0cdf0ab56c9c983e1d6e4fa8cb01bceddc", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/67702b0cdf0ab56c9c983e1d6e4fa8cb01bceddc", "committedDate": "2020-12-29T22:42:59Z", "message": "Update bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java\n\nAccept review suggestion.\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "131104e6dde27543ef79c62536a3cea2e20baa39", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/131104e6dde27543ef79c62536a3cea2e20baa39", "committedDate": "2020-12-29T22:42:59Z", "message": "Update bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java\n\nAccept review suggestion.\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ea49f8bf94b0f545348c7de220dc5cdea5c466", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/c7ea49f8bf94b0f545348c7de220dc5cdea5c466", "committedDate": "2020-12-29T22:42:59Z", "message": "Process PR review comments.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8465eb388b55675ea2157041cdd57ed5889ec944", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/8465eb388b55675ea2157041cdd57ed5889ec944", "committedDate": "2020-12-29T22:42:59Z", "message": "Update bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java\n\nAccept review suggestion.\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>\n\nCo-authored-by: Fabian Wolter <github@fabian-wolter.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b64b66794bbd940d8980ffadd4767e157171283", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/8b64b66794bbd940d8980ffadd4767e157171283", "committedDate": "2020-12-29T22:42:59Z", "message": "Remove unused imports.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67a00b435afedc24534818ac8600cef150e46e05", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/67a00b435afedc24534818ac8600cef150e46e05", "committedDate": "2020-12-29T22:42:59Z", "message": "Fix typo in README.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff35479db2429b7f8f9c19444ef7f2b16ea94fb4", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/ff35479db2429b7f8f9c19444ef7f2b16ea94fb4", "committedDate": "2020-12-29T22:42:59Z", "message": "Remove packaged library\nSimplify timestamp method\nFormat fixes\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c89805e18e5ea0a4860c71e5727208a60b98de", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/c6c89805e18e5ea0a4860c71e5727208a60b98de", "committedDate": "2020-12-29T22:42:59Z", "message": "Add tp-jaxb dependency.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc1cd7bfe9e324f8498f67036d6d682aa42d1477", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/bc1cd7bfe9e324f8498f67036d6d682aa42d1477", "committedDate": "2020-12-29T22:42:59Z", "message": "Process review comments.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/fe23ac3f9c7e0f6924efead709098eb172796427", "committedDate": "2020-12-29T22:42:59Z", "message": "Process \"hidden\" review comments.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNjkzNDI3", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-560693427", "createdAt": "2021-01-03T12:42:58Z", "commit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMjo0Mjo1OFrOINecPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wM1QxMjo1Mjo1NFrOINegpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTE0OA==", "bodyText": "Is this correct?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001148", "createdAt": "2021-01-03T12:42:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTM4NA==", "bodyText": "This method should return fast. You could use scheduler.scheduleWithFixedDelay() to let it run asynchronously.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001384", "createdAt": "2021-01-03T12:45:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        BLDevice[] blDevices = new BLDevice[0];\n+        try {\n+            InetAddress sourceAddress = getIpAddress();\n+            if (sourceAddress != null) {\n+                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+            } else {\n+                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+            }\n+\n+        } catch (IOException e) {\n+            logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+        }\n+        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+        for (BLDevice dev : blDevices) {\n+            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n+                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n+\n+            ThingUID thingUID;\n+            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+            logger.debug(\"Device ID with IP address replacement: {}\", id);\n+            try {\n+                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                logger.debug(\"Device ID with DNS name: {}\", id);\n+            } catch (UnknownHostException e) {\n+                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                        dev.getHost());\n+            }\n+\n+            switch (dev.getDeviceDescription()) {\n+                case \"Floureon Thermostat\":\n+                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                case \"Hysen Thermostat\":\n+                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                    break;\n+                default:\n+                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+            }\n+\n+            Map<String, Object> properties = new HashMap<>();\n+            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+            properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+            logger.debug(\"Property map: {}\", properties);\n+\n+            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                    .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+            thingDiscovered(discoveryResult);\n+\n+        }\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        startScan();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTcwMg==", "bodyText": "Bindings should only log to error if something severe happened, like the detection of a bug in your code. See this link for a description of the log levels: https://www.openhab.org/docs/developer/guidelines.html#f-logging\nThe log message could be removed, as the status update is already logged by the framework.\nThe state change originated by updateStatus() is logged to events.log. Including the status detail message.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001702", "createdAt": "2021-01-03T12:47:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTc4OQ==", "bodyText": "Logging to error. See above. This could be warn.\nDo you log the stack trace by intention?\nPlease check all.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001789", "createdAt": "2021-01-03T12:48:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + mac + \": \"\n+                            + e.getMessage());\n+        }\n+        authenticate();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMTk1Ng==", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551001956", "createdAt": "2021-01-03T12:49:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        try {\n+            blDevice = new FloureonDevice(host, new Mac(mac));\n+            this.floureonDevice = (FloureonDevice) blDevice;\n+        } catch (IOException e) {\n+            logger.error(\"Could not find broadlinkthermostat device at Host {} with MAC {} \", host, mac, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + mac + \": \"\n+                            + e.getMessage());\n+        }\n+        authenticate();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting power of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof QuantityType) {\n+            try {\n+                QuantityType<Temperature> temperatureQuantityType = ((QuantityType) command).toUnit(SIUnits.CELSIUS);\n+                if (temperatureQuantityType != null) {\n+                    floureonDevice.setThermostatTemp(temperatureQuantityType.doubleValue());\n+                } else {\n+                    logger.warn(\"Could not convert {} to \u00b0C\", command);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting setpoint of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof StringType) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.error(\"Error while trying to set sensor mode {}: \", command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof OnOffType) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting remote lock of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.error(\"Error while setting time of {} to {}\", thing.getUID(), command, e);\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        if (ThingStatus.ONLINE != thing.getStatus()) {\n+            return;\n+        }\n+        try {\n+            AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            if (advancedStatusInfo == null) {\n+                logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                authenticate();\n+                advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+            }\n+            if (advancedStatusInfo == null) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                return;\n+            }\n+            logger.debug(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE,\n+                    new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Mode {}\", StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+            updateState(ROOM_TEMPERATURE, new DecimalType(advancedStatusInfo.getRoomTemp()));\n+            logger.debug(\"Updating channel {} with value {}\", ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                    new DecimalType(advancedStatusInfo.getExternalTemp()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "originalPosition": 228}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTAwMjI3OA==", "bodyText": "This logger is never used.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551002278", "createdAt": "2021-01-03T12:52:54Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/BroadlinkThermostatHandlerFactory.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.handler.FloureonThermostatHandler;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandlerFactory} is responsible for creating things and thing handlers.\n+ *\n+ * @author Gerhard Riegler - Initial contribution\n+ */\n+@Component(configurationPid = \"binding.broadlinkthermostat\", service = ThingHandlerFactory.class)\n+@NonNullByDefault\n+public class BroadlinkThermostatHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandlerFactory.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23ac3f9c7e0f6924efead709098eb172796427"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d675806dc52f3e1384ba55693ce795fae95e548", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/6d675806dc52f3e1384ba55693ce795fae95e548", "committedDate": "2021-01-03T23:06:33Z", "message": "Process latest review comments.\nFix regex\nUse QuantityType for temperatures.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMjQ4ODI1", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-561248825", "createdAt": "2021-01-04T18:35:27Z", "commit": {"oid": "6d675806dc52f3e1384ba55693ce795fae95e548"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNToyN1rOIN8csQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNToyN1rOIN8csQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5Mjc4NQ==", "bodyText": "This unnecessary empty line is present in my checkstyle warnings.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r551492785", "createdAt": "2021-01-04T18:35:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d675806dc52f3e1384ba55693ce795fae95e548"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/c24a8a364af4eb43b96bf3d70c9041dd1aec71cd", "committedDate": "2021-01-04T21:56:05Z", "message": "Remove empty line.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTcyOTM5", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-562972939", "createdAt": "2021-01-06T19:12:01Z", "commit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOToxMjowMVrOIPTAMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxOToxNzozM1rOIPTLEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMDg5Nw==", "bodyText": "You could make this a method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Runnable createScanner() {\n          \n          \n            \n                    return () -> {\n          \n          \n            \n                private void createScanner() {", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552910897", "createdAt": "2021-01-06T19:12:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTA4Ng==", "bodyText": "Then, you can apply this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduler.execute(scanner);\n          \n          \n            \n                    scheduler.execute(this::createScanner);", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552911086", "createdAt": "2021-01-06T19:12:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTMwNw==", "bodyText": "No harm in canceling a task that is already cancelled.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (currentBackgroundDiscoveryFuture != null && !currentBackgroundDiscoveryFuture.isDone()) {\n          \n          \n            \n                    if (currentBackgroundDiscoveryFuture != null) {", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552911307", "createdAt": "2021-01-06T19:12:55Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        @Nullable\n+        ScheduledFuture<?> currentBackgroundDiscoveryFuture = backgroundDiscoveryFuture;\n+        if (currentBackgroundDiscoveryFuture != null && !currentBackgroundDiscoveryFuture.isDone()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMTY1MA==", "bodyText": "The compiler is more intelligent on local variables, so this annotation could be removed.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552911650", "createdAt": "2021-01-06T19:13:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjE1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552912157", "createdAt": "2021-01-06T19:14:34Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;\n+    private final Runnable scanner;\n+    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n+\n+    @Activate\n+    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n+        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT);\n+        this.networkAddressService = networkAddressService;\n+        scanner = createScanner();\n+    }\n+\n+    private Runnable createScanner() {\n+        return () -> {\n+            long timestampOfLastScan = getTimestampOfLastScan();\n+            BLDevice[] blDevices = new BLDevice[0];\n+            try {\n+                @Nullable\n+                InetAddress sourceAddress = getIpAddress();\n+                if (sourceAddress != null) {\n+                    logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n+                    blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT * 1000);\n+                } else {\n+                    blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT * 1000);\n+                }\n+            } catch (IOException e) {\n+                logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n+            }\n+            logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n+\n+            for (BLDevice dev : blDevices) {\n+                logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\",\n+                        dev.getDeviceDescription(), Integer.toHexString(dev.getDeviceType()), dev.getHost(),\n+                        dev.getMac());\n+\n+                ThingUID thingUID;\n+                String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n+                logger.debug(\"Device ID with IP address replacement: {}\", id);\n+                try {\n+                    id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n+                    logger.debug(\"Device ID with DNS name: {}\", id);\n+                } catch (UnknownHostException e) {\n+                    logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n+                            dev.getHost());\n+                }\n+\n+                switch (dev.getDeviceDescription()) {\n+                    case \"Floureon Thermostat\":\n+                        thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    case \"Hysen Thermostat\":\n+                        thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n+                        break;\n+                    default:\n+                        thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n+                }\n+\n+                Map<String, Object> properties = new HashMap<>();\n+                properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n+                properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n+                properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n+\n+                logger.debug(\"Property map: {}\", properties);\n+\n+                DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n+                        .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n+                        .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n+\n+                thingDiscovered(discoveryResult);\n+\n+            }\n+            removeOlderResults(timestampOfLastScan);\n+        };\n+    }\n+\n+    @Override\n+    protected void startScan() {\n+        scheduler.execute(scanner);\n+    }\n+\n+    @Override\n+    protected void startBackgroundDiscovery() {\n+        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n+        @Nullable\n+        ScheduledFuture<?> currentBackgroundDiscoveryFuture = backgroundDiscoveryFuture;\n+        if (currentBackgroundDiscoveryFuture != null && !currentBackgroundDiscoveryFuture.isDone()) {\n+            currentBackgroundDiscoveryFuture.cancel(true);\n+        }\n+        backgroundDiscoveryFuture = scheduler.scheduleWithFixedDelay(scanner, 0, 60, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    protected void stopBackgroundDiscovery() {\n+        logger.trace(\"Stopping background scan for Broadlinkthermostat devices\");\n+        @Nullable\n+        ScheduledFuture<?> backgroundDiscoveryFuture = this.backgroundDiscoveryFuture;\n+        if (backgroundDiscoveryFuture != null && !backgroundDiscoveryFuture.isCancelled()) {\n+            if (backgroundDiscoveryFuture.cancel(true)) {\n+                this.backgroundDiscoveryFuture = null;\n+            }\n+        }\n+        stopScan();\n+    }\n+\n+    private @Nullable InetAddress getIpAddress() {\n+        return getIpFromNetworkAddressService().orElse(null);\n+    }\n+\n+    /**\n+     * Uses openHAB's NetworkAddressService to determine the local primary network interface.\n+     *\n+     * @return local ip or <code>empty</code> if configured primary IP is not set or could not be parsed.\n+     */\n+    private Optional<InetAddress> getIpFromNetworkAddressService() {\n+        @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjc1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552912756", "createdAt": "2021-01-06T19:15:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    @Nullable\n+    String host;\n+    @Nullable\n+    String macAddress;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMjg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552912856", "createdAt": "2021-01-06T19:15:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    @Nullable\n+    String host;\n+    @Nullable\n+    String macAddress;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link Thing}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    BroadlinkThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    void authenticate() {\n+        logger.debug(\"Authenticating with broadlinkthermostat device {}...\", thing.getLabel());\n+        try {\n+            @Nullable\n+            BLDevice blDevice = this.blDevice;\n+            if (blDevice != null && blDevice.auth()) {\n+                updateStatus(ThingStatus.ONLINE);\n+            }\n+        } catch (IOException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                    \"Error while authenticating broadlinkthermostat device \" + thing.getLabel() + \":\" + e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        BroadlinkThermostatConfig config = getConfigAs(BroadlinkThermostatConfig.class);\n+        host = config.getHost();\n+        macAddress = config.getMacAddress();\n+\n+        // schedule a new scan every minute\n+        scanJob = scheduler.scheduleWithFixedDelay(this::refreshData, 0, 1, TimeUnit.MINUTES);\n+    }\n+\n+    protected abstract void refreshData();\n+\n+    @Override\n+    public void dispose() {\n+        @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMzIxMQ==", "bodyText": "Please check all.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552913211", "createdAt": "2021-01-06T19:16:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkxMzY4Mg==", "bodyText": "You could specify the wildcard to get rid of the supression.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            @Nullable\n          \n          \n            \n                            @SuppressWarnings(\"unchecked\")\n          \n          \n            \n                            QuantityType<Temperature> temperatureQuantityType = ((QuantityType<Temperature>) command)\n          \n          \n            \n                                    .toUnit(SIUnits.CELSIUS);\n          \n          \n            \n                            QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r552913682", "createdAt": "2021-01-06T19:17:33Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.*;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power off {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        @Nullable\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof QuantityType && floureonDevice != null) {\n+            try {\n+                @Nullable\n+                @SuppressWarnings(\"unchecked\")\n+                QuantityType<Temperature> temperatureQuantityType = ((QuantityType<Temperature>) command)\n+                        .toUnit(SIUnits.CELSIUS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c24a8a364af4eb43b96bf3d70c9041dd1aec71cd"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/8a66147bf9b8e53eb40a568cabdd09cab2750b71", "committedDate": "2021-01-07T13:51:39Z", "message": "Remove Nullable annotations and extract scanner to a method.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3NTQ5NTk3", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-567549597", "createdAt": "2021-01-13T19:27:29Z", "commit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwMjc3NTQ5", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-580277549", "createdAt": "2021-02-01T11:53:50Z", "commit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMTo1Mzo1MVrOIddt7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxMjoxMToyMlrOIdeXeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2NjUxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final int DISCOVERY_TIMEOUT = 30;\n          \n          \n            \n                private static final int DISCOVERY_TIMEOUT_SECONDS = 30;", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567766511", "createdAt": "2021-02-01T11:53:51Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/discovery/BroadlinkThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.discovery;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\n+import org.openhab.core.config.discovery.AbstractDiscoveryService;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.DiscoveryService;\n+import org.openhab.core.net.NetworkAddressService;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatDiscoveryService} is responsible for discovering Broadlinkthermostat devices through\n+ * Broadcast.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n+@NonNullByDefault\n+public class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n+\n+    private final NetworkAddressService networkAddressService;\n+\n+    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n+            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n+    private static final int DISCOVERY_TIMEOUT = 30;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2ODIzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                BLDevice blDevice;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> scanJob;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                String host;\n          \n          \n            \n                @Nullable\n          \n          \n            \n                String macAddress;\n          \n          \n            \n                @Nullable BLDevice blDevice;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> scanJob;\n          \n          \n            \n                @Nullable String host;\n          \n          \n            \n                @Nullable String macAddress;\n          \n      \n    \n    \n  \n\nOr should these fields without access modifier also be protected?", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567768235", "createdAt": "2021-02-01T11:56:50Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/BroadlinkThermostatHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatConfig;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.BLDevice;\n+\n+/**\n+ * The {@link BroadlinkThermostatHandler} is the device handler class for a broadlinkthermostat device.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BroadlinkThermostatHandler extends BaseThingHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatHandler.class);\n+\n+    @Nullable\n+    BLDevice blDevice;\n+    private @Nullable ScheduledFuture<?> scanJob;\n+    @Nullable\n+    String host;\n+    @Nullable\n+    String macAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc2OTYwNg==", "bodyText": "I'm assuming authenticate() makes some network call. In which case you should schedule this call (or do the scheduling in authenticate) to make sure it won't run to long. Because initialize should finish fast.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567769606", "createdAt": "2021-02-01T11:59:01Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3MjY1MQ==", "bodyText": "If the device is set off line here it looks like it will never be set online again. Because the first part of refresh checks if the device is online and if not just returns.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567772651", "createdAt": "2021-02-01T12:04:12Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power off {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof QuantityType && floureonDevice != null) {\n+            try {\n+                QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                if (temperatureQuantityType != null) {\n+                    floureonDevice.setThermostatTemp(temperatureQuantityType.doubleValue());\n+                } else {\n+                    logger.warn(\"Could not convert {} to \u00b0C\", command);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting setpoint of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while trying to set sensor mode {}: {}\", command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting remote lock of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting time of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        if (ThingStatus.ONLINE != thing.getStatus()) {\n+            return;\n+        }\n+\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (floureonDevice != null) {\n+            try {\n+                AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                if (advancedStatusInfo == null) {\n+                    logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                    authenticate();\n+                    advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                }\n+                if (advancedStatusInfo == null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3NjU3MA==", "bodyText": "Refresh is called for every channel. So if you have 10 channels this will be called 10 times. So you might want to build in some caching. You can do this for example with ExpiringCache on AdvancedStatusInfo. Where the actual call to the service is set in the cache. When getting the value you just call get on the cache and if the timeout has exceeded it will to a refresh. For example set the timeout to 3 seconds. So repeated calls due to refresh calls won't trigger a new call to the service.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567776570", "createdAt": "2021-02-01T12:10:27Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzc3NzE0NQ==", "bodyText": "If this happens you might want to set the thing to offline (and log to debug). So the user is also informed about this.", "url": "https://github.com/openhab/openhab-addons/pull/9260#discussion_r567777145", "createdAt": "2021-02-01T12:11:22Z", "author": {"login": "Hilbrand"}, "path": "bundles/org.openhab.binding.broadlinkthermostat/src/main/java/org/openhab/binding/broadlinkthermostat/internal/handler/FloureonThermostatHandler.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.broadlinkthermostat.internal.handler;\n+\n+import static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n+\n+import java.io.IOException;\n+import java.time.LocalTime;\n+import java.time.ZonedDateTime;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.library.types.DateTimeType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.github.mob41.blapi.FloureonDevice;\n+import com.github.mob41.blapi.dev.hysen.AdvancedStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.BaseStatusInfo;\n+import com.github.mob41.blapi.dev.hysen.SensorControl;\n+import com.github.mob41.blapi.mac.Mac;\n+import com.github.mob41.blapi.pkt.cmd.hysen.SetTimeCommand;\n+\n+/**\n+ * The {@link FloureonThermostatHandler} is responsible for handling thermostats labeled as Floureon Thermostat.\n+ *\n+ * @author Florian Mueller - Initial contribution\n+ */\n+@NonNullByDefault\n+public class FloureonThermostatHandler extends BroadlinkThermostatHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(FloureonThermostatHandler.class);\n+    private @Nullable FloureonDevice floureonDevice;\n+\n+    /**\n+     * Creates a new instance of this class for the {@link FloureonThermostatHandler}.\n+     *\n+     * @param thing the thing that should be handled, not null\n+     */\n+    public FloureonThermostatHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Initializes a new instance of a {@link FloureonThermostatHandler}.\n+     */\n+    @Override\n+    public void initialize() {\n+        super.initialize();\n+        if (host != null && macAddress != null) {\n+            try {\n+                blDevice = new FloureonDevice(host, new Mac(macAddress));\n+                this.floureonDevice = (FloureonDevice) blDevice;\n+            } catch (IOException e) {\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\n+                        \"Could not find broadlinkthermostat device at host\" + host + \"with MAC+\" + macAddress + \": \"\n+                                + e.getMessage());\n+            }\n+            authenticate();\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Command: {}\", command.toFullString());\n+\n+        if (command == RefreshType.REFRESH) {\n+            refreshData();\n+            return;\n+        }\n+\n+        switch (channelUID.getIdWithoutGroup()) {\n+            case SETPOINT:\n+                handleSetpointCommand(channelUID, command);\n+                break;\n+            case POWER:\n+                handlePowerCommand(channelUID, command);\n+                break;\n+            case MODE:\n+                handleModeCommand(channelUID, command);\n+                break;\n+            case SENSOR:\n+                handleSensorCommand(channelUID, command);\n+                break;\n+            case REMOTE_LOCK:\n+                handleRemoteLockCommand(channelUID, command);\n+                break;\n+            case TIME:\n+                handleSetTimeCommand(channelUID, command);\n+                break;\n+            default:\n+                logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handlePowerCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setPower(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleModeCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                if (MODE_AUTO.equals(command.toFullString())) {\n+                    floureonDevice.switchToAuto();\n+                } else {\n+                    floureonDevice.switchToManual();\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting power off {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetpointCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof QuantityType && floureonDevice != null) {\n+            try {\n+                QuantityType<?> temperatureQuantityType = ((QuantityType<?>) command).toUnit(SIUnits.CELSIUS);\n+                if (temperatureQuantityType != null) {\n+                    floureonDevice.setThermostatTemp(temperatureQuantityType.doubleValue());\n+                } else {\n+                    logger.warn(\"Could not convert {} to \u00b0C\", command);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting setpoint of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSensorCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof StringType && floureonDevice != null) {\n+            try {\n+                BaseStatusInfo statusInfo = floureonDevice.getBasicStatus();\n+                if (SENSOR_INTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.INTERNAL);\n+                } else if (SENSOR_EXTERNAL.equals(command.toFullString())) {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(), SensorControl.EXTERNAL);\n+                } else {\n+                    floureonDevice.setMode(statusInfo.getAutoMode(), statusInfo.getLoopMode(),\n+                            SensorControl.INTERNAL_TEMP_EXTERNAL_LIMIT);\n+                }\n+            } catch (Exception e) {\n+                logger.warn(\"Error while trying to set sensor mode {}: {}\", command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleRemoteLockCommand(ChannelUID channelUID, Command command) {\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (command instanceof OnOffType && floureonDevice != null) {\n+            try {\n+                floureonDevice.setLock(command == OnOffType.ON);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting remote lock of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    private void handleSetTimeCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof DateTimeType) {\n+            ZonedDateTime zonedDateTime = ((DateTimeType) command).getZonedDateTime();\n+            try {\n+                new SetTimeCommand(tob(zonedDateTime.getHour()), tob(zonedDateTime.getMinute()),\n+                        tob(zonedDateTime.getSecond()), tob(zonedDateTime.getDayOfWeek().getValue()))\n+                                .execute(floureonDevice);\n+            } catch (Exception e) {\n+                logger.warn(\"Error while setting time of {} to {}: {}\", thing.getUID(), command, e.getMessage());\n+            }\n+        } else {\n+            logger.warn(\"Channel {} does not support command {}\", channelUID, command);\n+        }\n+    }\n+\n+    @Override\n+    protected void refreshData() {\n+        if (ThingStatus.ONLINE != thing.getStatus()) {\n+            return;\n+        }\n+\n+        FloureonDevice floureonDevice = this.floureonDevice;\n+        if (floureonDevice != null) {\n+            try {\n+                AdvancedStatusInfo advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                if (advancedStatusInfo == null) {\n+                    logger.warn(\"Device {} did not return any data. Trying to reauthenticate...\", thing.getUID());\n+                    authenticate();\n+                    advancedStatusInfo = floureonDevice.getAdvancedStatus();\n+                }\n+                if (advancedStatusInfo == null) {\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Device not responding.\");\n+                    return;\n+                }\n+                logger.trace(\"Retrieved data from device {}: {}\", thing.getUID(), advancedStatusInfo);\n+                updateState(ROOM_TEMPERATURE, new QuantityType<>(advancedStatusInfo.getRoomTemp(), SIUnits.CELSIUS));\n+                updateState(ROOM_TEMPERATURE_EXTERNAL_SENSOR,\n+                        new QuantityType<>(advancedStatusInfo.getExternalTemp(), SIUnits.CELSIUS));\n+                updateState(SETPOINT, new QuantityType<>(advancedStatusInfo.getThermostatTemp(), SIUnits.CELSIUS));\n+                updateState(POWER, OnOffType.from(advancedStatusInfo.getPower()));\n+                updateState(MODE, StringType.valueOf(advancedStatusInfo.getAutoMode() ? \"auto\" : \"manual\"));\n+                updateState(SENSOR, StringType.valueOf(advancedStatusInfo.getSensorControl().name()));\n+                updateState(TEMPERATURE_OFFSET, new QuantityType<>(advancedStatusInfo.getDif(), SIUnits.CELSIUS));\n+                updateState(ACTIVE, OnOffType.from(advancedStatusInfo.getActive()));\n+                updateState(REMOTE_LOCK, OnOffType.from(advancedStatusInfo.getRemoteLock()));\n+                updateState(TIME, new DateTimeType(getTimestamp(advancedStatusInfo)));\n+            } catch (Exception e) {\n+                logger.warn(\"Error while retrieving data for {}: {}\", thing.getUID(), e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a66147bf9b8e53eb40a568cabdd09cab2750b71"}, "originalPosition": 246}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24ae00c1149f34ff1ab4757cb3a4bb0e77795b39", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/24ae00c1149f34ff1ab4757cb3a4bb0e77795b39", "committedDate": "2021-02-06T21:05:56Z", "message": "Merge remote-tracking branch 'upstream/main' into broadlinkthermostat"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e3169b11c206607998214ab987ae47f2da2c75", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/d8e3169b11c206607998214ab987ae47f2da2c75", "committedDate": "2021-02-06T21:09:38Z", "message": "Update license files.\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7795f5841392ed9ff4120a30071d62e801374736", "author": {"user": {"login": "flo-02-mu", "name": "Florian Mueller"}}, "url": "https://github.com/openhab/openhab-addons/commit/7795f5841392ed9ff4120a30071d62e801374736", "committedDate": "2021-02-06T22:19:01Z", "message": "Address review comments:\n* introduce cache for AdvanceStatusInfo\n* Move authentication outside of initialize step\n\nSigned-off-by: Florian Mueller <f.l.o.mueller@web.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg1OTY4Nzgy", "url": "https://github.com/openhab/openhab-addons/pull/9260#pullrequestreview-585968782", "createdAt": "2021-02-08T22:07:13Z", "commit": {"oid": "7795f5841392ed9ff4120a30071d62e801374736"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4048, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}