{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NTA5NzAx", "number": 6738, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTozNzozMFrODVns-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjozMToyNVrODe34ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTk3MTc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericMQTTThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTozNzozMFrOFZ8dIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNTo1MDo0OVrOFaDGSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc0OTIxNg==", "bodyText": "This is a whitespace only change. Is the ESH formatter in use?", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362749216", "createdAt": "2020-01-03T09:37:30Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericMQTTThingHandler.java", "diffHunk": "@@ -100,14 +100,15 @@ public void dispose() {\n         // Remove all state descriptions of this handler\n         channelStateByChannelUID.forEach((uid, state) -> stateDescProvider.remove(uid));\n         super.dispose();\n-        // there is a design flaw, we can't clean up our stuff because it is needed by the super-class on disposal for unsubscribing\n+        // there is a design flaw, we can't clean up our stuff because it is needed by the super-class on disposal for\n+        // unsubscribing\n         channelStateByChannelUID.clear();\n     }\n \n     @Override\n     public CompletableFuture<Void> unsubscribeAll() {\n-        return CompletableFuture.allOf(channelStateByChannelUID.values().stream().map(ChannelState::stop)\n-                .toArray(CompletableFuture[]::new));\n+        return CompletableFuture.allOf(\n+                channelStateByChannelUID.values().stream().map(ChannelState::stop).toArray(CompletableFuture[]::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1ODA1Nw==", "bodyText": "Yes, I tried with all ESH formatter, openHAB formatter (https://www.openhab.org/docs/developer/guidelines.html#java-code) and mvn spotless:apply.\nThey all give me this result.\nI now ran mvn spotless:apply on the project. There are some more WS-only changes...", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362858057", "createdAt": "2020-01-03T15:50:49Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericMQTTThingHandler.java", "diffHunk": "@@ -100,14 +100,15 @@ public void dispose() {\n         // Remove all state descriptions of this handler\n         channelStateByChannelUID.forEach((uid, state) -> stateDescProvider.remove(uid));\n         super.dispose();\n-        // there is a design flaw, we can't clean up our stuff because it is needed by the super-class on disposal for unsubscribing\n+        // there is a design flaw, we can't clean up our stuff because it is needed by the super-class on disposal for\n+        // unsubscribing\n         channelStateByChannelUID.clear();\n     }\n \n     @Override\n     public CompletableFuture<Void> unsubscribeAll() {\n-        return CompletableFuture.allOf(channelStateByChannelUID.values().stream().map(ChannelState::stop)\n-                .toArray(CompletableFuture[]::new));\n+        return CompletableFuture.allOf(\n+                channelStateByChannelUID.values().stream().map(ChannelState::stop).toArray(CompletableFuture[]::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc0OTIxNg=="}, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTk4MTc2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo0MjozOVrOFZ8i-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo0MjozOVrOFZ8i-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MDcxMw==", "bodyText": "I'm not sure if I like the class name. Could be generic thing config, generic binding config and so on. A better name is probably GenericThingConfiguration.", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362750713", "createdAt": "2020-01-03T09:42:39Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericConfiguration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mqtt.generic.internal.handler;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+\n+/**\n+ * The {@link GenericMQTTThingHandler} manages Things that are responsible for MQTT components.\n+ * This class contains the necessary configuration for such a Thing handler.\n+ *\n+ * @author Jochen Klein - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GenericConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTk4NzU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo0NTo1NVrOFZ8mVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMzo1Mjo1NFrOFaAfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MTU3Mw==", "bodyText": "If the correct logic behaviour is covered by tests, I strongly recommend not to log anything. updateThingStatus will already notify the framework and log the new thing status, why add log pressure here as well.", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362751573", "createdAt": "2020-01-03T09:45:55Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -262,4 +304,73 @@ public void postChannelCommand(ChannelUID channelUID, Command command) {\n     public void setConnection(MqttBrokerConnection connection) {\n         this.connection = connection;\n     }\n+\n+    @Override\n+    public void addAvailabilityTopic(String availability_topic, String payload_available,\n+            String payload_not_available) {\n+        availabilityStates.computeIfAbsent(availability_topic, topic -> {\n+            Value value = new OnOffValue(payload_available, payload_not_available);\n+            ChannelGroupUID groupUID = new ChannelGroupUID(getThing().getUID(), \"availablility\");\n+            ChannelUID channelUID = new ChannelUID(groupUID, UIDUtils.encode(topic));\n+            ChannelState state = new ChannelState(ChannelConfigBuilder.create().withStateTopic(topic).build(),\n+                    channelUID, value, new ChannelStateUpdateListener() {\n+                        @Override\n+                        public void updateChannelState(ChannelUID channelUID, State value) {\n+                            calculateThingStatus();\n+                        }\n+\n+                        @Override\n+                        public void triggerChannel(ChannelUID channelUID, String eventPayload) {\n+                        }\n+\n+                        @Override\n+                        public void postChannelCommand(ChannelUID channelUID, Command value) {\n+                        }\n+                    });\n+            MqttBrokerConnection connection = getConnection();\n+            if (connection != null) {\n+                state.start(connection, scheduler, 0);\n+            }\n+\n+            return state;\n+        });\n+    }\n+\n+    @Override\n+    public void removeAvailabilityTopic(@NonNull String availability_topic) {\n+        availabilityStates.computeIfPresent(availability_topic, (topic, state) -> {\n+            if (connection != null && state != null) {\n+                state.stop();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void clearAllAvailabilityTopics() {\n+        Set<String> topics = new HashSet<>(availabilityStates.keySet());\n+        topics.forEach(t -> removeAvailabilityTopic(t));\n+    }\n+\n+    @Override\n+    public void resetMessageReceived() {\n+        if (messageReceived.getAndSet(false)) {\n+            calculateThingStatus();\n+        }\n+    }\n+\n+    protected void calculateThingStatus() {\n+        final boolean availabilityTopicsSeen;\n+\n+        if (availabilityStates.isEmpty()) {\n+            availabilityTopicsSeen = true;\n+        } else {\n+            availabilityTopicsSeen = availabilityStates.values().stream().allMatch(\n+                    c -> c != null && OnOffType.ON.equals(c.getCache().getChannelState().as(OnOffType.class)));\n+        }\n+        logger.debug(\"thing status {} {} {}\", getThing().getUID(), messageReceived.get(), availabilityTopicsSeen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxNTQwMg==", "bodyText": "just that this updateThingStatus is not calling the framwork directly, but an abstract method, which determins the status. I might ignore one or the other parameter.\nI was for me, well, a debuging help....\nBut I can remove it...", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362815402", "createdAt": "2020-01-03T13:52:54Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -262,4 +304,73 @@ public void postChannelCommand(ChannelUID channelUID, Command command) {\n     public void setConnection(MqttBrokerConnection connection) {\n         this.connection = connection;\n     }\n+\n+    @Override\n+    public void addAvailabilityTopic(String availability_topic, String payload_available,\n+            String payload_not_available) {\n+        availabilityStates.computeIfAbsent(availability_topic, topic -> {\n+            Value value = new OnOffValue(payload_available, payload_not_available);\n+            ChannelGroupUID groupUID = new ChannelGroupUID(getThing().getUID(), \"availablility\");\n+            ChannelUID channelUID = new ChannelUID(groupUID, UIDUtils.encode(topic));\n+            ChannelState state = new ChannelState(ChannelConfigBuilder.create().withStateTopic(topic).build(),\n+                    channelUID, value, new ChannelStateUpdateListener() {\n+                        @Override\n+                        public void updateChannelState(ChannelUID channelUID, State value) {\n+                            calculateThingStatus();\n+                        }\n+\n+                        @Override\n+                        public void triggerChannel(ChannelUID channelUID, String eventPayload) {\n+                        }\n+\n+                        @Override\n+                        public void postChannelCommand(ChannelUID channelUID, Command value) {\n+                        }\n+                    });\n+            MqttBrokerConnection connection = getConnection();\n+            if (connection != null) {\n+                state.start(connection, scheduler, 0);\n+            }\n+\n+            return state;\n+        });\n+    }\n+\n+    @Override\n+    public void removeAvailabilityTopic(@NonNull String availability_topic) {\n+        availabilityStates.computeIfPresent(availability_topic, (topic, state) -> {\n+            if (connection != null && state != null) {\n+                state.stop();\n+            }\n+            return null;\n+        });\n+    }\n+\n+    @Override\n+    public void clearAllAvailabilityTopics() {\n+        Set<String> topics = new HashSet<>(availabilityStates.keySet());\n+        topics.forEach(t -> removeAvailabilityTopic(t));\n+    }\n+\n+    @Override\n+    public void resetMessageReceived() {\n+        if (messageReceived.getAndSet(false)) {\n+            calculateThingStatus();\n+        }\n+    }\n+\n+    protected void calculateThingStatus() {\n+        final boolean availabilityTopicsSeen;\n+\n+        if (availabilityStates.isEmpty()) {\n+            availabilityTopicsSeen = true;\n+        } else {\n+            availabilityTopicsSeen = availabilityStates.values().stream().allMatch(\n+                    c -> c != null && OnOffType.ON.equals(c.getCache().getChannelState().as(OnOffType.class)));\n+        }\n+        logger.debug(\"thing status {} {} {}\", getThing().getUID(), messageReceived.get(), availabilityTopicsSeen);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MTU3Mw=="}, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTk5MjA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo0ODoxNFrOFZ8o7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxODoxNjo0OVrOFaGLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MjIzNw==", "bodyText": "updateChannelState is called frequently (hot path). This statement will access an atomic variable, which requires cpu cores to ensure cache coherence (expensive!). Is it absolutely necessary to access this variable on each channel state update?", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362752237", "createdAt": "2020-01-03T09:48:14Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -237,11 +273,17 @@ public void dispose() {\n \n     @Override\n     public void updateChannelState(ChannelUID channelUID, State value) {\n+        if (!messageReceived.getAndSet(true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxNDMzMQ==", "bodyText": "Well, we need to keep track, if messages were received (at least for some HA components) to be able to set the thing status.\nWould it be better to schedule this check in another thread?", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362814331", "createdAt": "2020-01-03T13:49:28Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -237,11 +273,17 @@ public void dispose() {\n \n     @Override\n     public void updateChannelState(ChannelUID channelUID, State value) {\n+        if (!messageReceived.getAndSet(true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MjIzNw=="}, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkwODQ3OQ==", "bodyText": "At the moment every mqtt Thing or to be more precise every mqtt thing channel pays this cost though and it is not even used at all times, that's my issue with this code.\nScheduling a thread here would be even more costly. I don't have an idea yet.", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362908479", "createdAt": "2020-01-03T18:16:49Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -237,11 +273,17 @@ public void dispose() {\n \n     @Override\n     public void updateChannelState(ChannelUID channelUID, State value) {\n+        if (!messageReceived.getAndSet(true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MjIzNw=="}, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTk5NDczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwOTo0OTozNFrOFZ8qYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMzo1OToxMFrOFaAnYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MjYwOA==", "bodyText": "Why \"@nullable\"? Wouldn't it be more easy to make this non nullable?", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362752608", "createdAt": "2020-01-03T09:49:34Z", "author": {"login": "davidgraeff"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -61,13 +75,17 @@\n  * @author David Graeff - Initial contribution\n  */\n @NonNullByDefault\n-public abstract class AbstractMQTTThingHandler extends BaseThingHandler implements ChannelStateUpdateListener {\n+public abstract class AbstractMQTTThingHandler extends BaseThingHandler\n+        implements ChannelStateUpdateListener, AvailabilityTracker {\n     private final Logger logger = LoggerFactory.getLogger(AbstractMQTTThingHandler.class);\n     // Timeout for the entire tree parsing and subscription\n     private final int subscribeTimeout;\n \n     protected @Nullable MqttBrokerConnection connection;\n \n+    private AtomicBoolean messageReceived = new AtomicBoolean(false);\n+    private Map<String, @Nullable ChannelState> availabilityStates = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxNzM3OQ==", "bodyText": "I have 2 problems with Map if the value is @NonNull:\n\nMap.get() is assumed to be @NonNull, which is wrong. So I get warnings when doing a null check. And I do not like doing a contains() first, because that would double the compution time.\nMap.computeIfPresent() will not allow we to return null to remove the element. But this is the best way to do it in an atomic matter. (ConcurrentHashMap does not allow null as key or value)\n\n(edit: Formatting)", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r362817379", "createdAt": "2020-01-03T13:59:10Z", "author": {"login": "jochen314"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/AbstractMQTTThingHandler.java", "diffHunk": "@@ -61,13 +75,17 @@\n  * @author David Graeff - Initial contribution\n  */\n @NonNullByDefault\n-public abstract class AbstractMQTTThingHandler extends BaseThingHandler implements ChannelStateUpdateListener {\n+public abstract class AbstractMQTTThingHandler extends BaseThingHandler\n+        implements ChannelStateUpdateListener, AvailabilityTracker {\n     private final Logger logger = LoggerFactory.getLogger(AbstractMQTTThingHandler.class);\n     // Timeout for the entire tree parsing and subscription\n     private final int subscribeTimeout;\n \n     protected @Nullable MqttBrokerConnection connection;\n \n+    private AtomicBoolean messageReceived = new AtomicBoolean(false);\n+    private Map<String, @Nullable ChannelState> availabilityStates = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc1MjYwOA=="}, "originalCommit": {"oid": "43e607b9600aaa3bc6d10ce62e07e45c7be0ed62"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjk1NDAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/feature/feature.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyMTozMlrOFoPo3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyMTozMlrOFoPo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MzU4MA==", "bodyText": "please make sure that this is on one line. otherwise concatenation might fail when building the full feature-file.", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r377743580", "createdAt": "2020-02-11T16:21:32Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/feature/feature.xml", "diffHunk": "@@ -1,12 +1,13 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<features name=\"org.openhab.binding.mqtt.generic-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n-    <repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+<features name=\"org.openhab.binding.mqtt.generic-${project.version}\"\n+\txmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fbf2df5b14612a4eaa8527f60c0fe23bb77202"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjk2MzkxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericMQTTThingHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyMzo1NVrOFoPvAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyMzo1NVrOFoPvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NTE1Mg==", "bodyText": "return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()])).thenRun(this::calculateThingStatus);", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r377745152", "createdAt": "2020-02-11T16:23:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/java/org/openhab/binding/mqtt/generic/internal/handler/GenericMQTTThingHandler.java", "diffHunk": "@@ -86,7 +86,7 @@ public GenericMQTTThingHandler(Thing thing, MqttChannelStateDescriptionProvider\n         List<CompletableFuture<@Nullable Void>> futures = channelStateByChannelUID.values().stream()\n                 .map(c -> c.start(connection, scheduler, 0)).collect(Collectors.toList());\n         return CompletableFuture.allOf(futures.toArray(new CompletableFuture[futures.size()])).thenRun(() -> {\n-            updateStatus(ThingStatus.ONLINE, ThingStatusDetail.NONE);\n+            calculateThingStatus();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fbf2df5b14612a4eaa8527f60c0fe23bb77202"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjk3MjA4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.generic/src/main/resources/ESH-INF/thing/generic-thing.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNTo1NlrOFoP0TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoyNTo1NlrOFoP0TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NjUwOA==", "bodyText": "What about making this parameters advanced? I think most users don't need it and the available option should be kept at a minimum.", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r377746508", "createdAt": "2020-02-11T16:25:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.generic/src/main/resources/ESH-INF/thing/generic-thing.xml", "diffHunk": "@@ -13,6 +13,20 @@\n \t\t<label>Generic MQTT Thing</label>\n \t\t<description>You need a configured Broker first. Dynamically add channels of various types to this Thing. Link\n \t\t\tdifferent MQTT topics to each channel.</description>\n-\t</thing-type>\n \n+\t\t<config-description>\n+\t\t\t<parameter name=\"availabilityTopic\" type=\"text\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fbf2df5b14612a4eaa8527f60c0fe23bb77202"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjk5NTE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.mqtt.homeassistant/src/main/java/org/openhab/binding/mqtt/homeassistant/internal/AbstractComponent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjozMToyNVrOFoQCMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjozMToyNVrOFoQCMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1MDA2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return channels.values().parallelStream().map(v -> v.stop()).collect(FutureCollector.allOf());\n          \n          \n            \n                    return channels.values().parallelStream().map(CChannel::stop).collect(FutureCollector.allOf());", "url": "https://github.com/openhab/openhab-addons/pull/6738#discussion_r377750064", "createdAt": "2020-02-11T16:31:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.mqtt.homeassistant/src/main/java/org/openhab/binding/mqtt/homeassistant/internal/AbstractComponent.java", "diffHunk": "@@ -150,13 +122,7 @@ public boolean isActive() {\n      *         exceptionally on errors.\n      */\n     public CompletableFuture<@Nullable Void> stop() {\n-        CompletableFuture<@Nullable Void> all = channels.values().parallelStream().map(v -> v.stop())\n-                .collect(FutureCollector.allOf());\n-\n-        if (availablityChannel != null) {\n-            all = all.thenCompose(v -> availablityChannel.stop());\n-        }\n-        return all;\n+        return channels.values().parallelStream().map(v -> v.stop()).collect(FutureCollector.allOf());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fbf2df5b14612a4eaa8527f60c0fe23bb77202"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1136, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}