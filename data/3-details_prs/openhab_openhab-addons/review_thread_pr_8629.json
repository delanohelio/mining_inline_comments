{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTAyOTk2", "number": 8629, "reviewThreads": {"totalCount": 68, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNTo1NFrOExoWcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0OToxMlrOFOU-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc2Nzg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNTo1NFrOHn3AwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyNjo0NlrOHofCng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzgyNQ==", "bodyText": "Please remove all these blank lines before your else statements", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511557825", "createdAt": "2020-10-25T07:15:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_CLIMATE_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_INWALL_SWITCH;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_MOTION_DETECTOR;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHC;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHUTTER_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_THERMOSTAT;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_TWINGUARD;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_WINDOW_CONTACT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.devices.climatecontrol.ClimateControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.BoschInWallSwitchHandler;\n+import org.openhab.binding.boschshc.internal.devices.motiondetector.MotionDetectorHandler;\n+import org.openhab.binding.boschshc.internal.devices.shuttercontrol.ShutterControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.thermostat.ThermostatHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.BoschTwinguardHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.WindowContactHandler;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link BoschSHCHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - added Shutter Control and ThermostatHandler\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.boschshc\", service = ThingHandlerFactory.class)\n+public class BoschSHCHandlerFactory extends BaseThingHandlerFactory {\n+\n+    // List of all supported Bosch devices.\n+    public static final Collection<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Arrays.asList(THING_TYPE_SHC,\n+            THING_TYPE_INWALL_SWITCH, THING_TYPE_TWINGUARD, THING_TYPE_WINDOW_CONTACT, THING_TYPE_MOTION_DETECTOR,\n+            THING_TYPE_SHUTTER_CONTROL, THING_TYPE_THERMOSTAT, THING_TYPE_CLIMATE_CONTROL);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_SHC.equals(thingTypeUID)) {\n+            return new BoschSHCBridgeHandler((Bridge) thing);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMzY2Mg==", "bodyText": "Used the chance to refactor the mapping in BoschSHCHandlerFactory, which does not require the long if-else check.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512213662", "createdAt": "2020-10-26T19:26:46Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_CLIMATE_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_INWALL_SWITCH;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_MOTION_DETECTOR;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHC;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHUTTER_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_THERMOSTAT;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_TWINGUARD;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_WINDOW_CONTACT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.devices.climatecontrol.ClimateControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.BoschInWallSwitchHandler;\n+import org.openhab.binding.boschshc.internal.devices.motiondetector.MotionDetectorHandler;\n+import org.openhab.binding.boschshc.internal.devices.shuttercontrol.ShutterControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.thermostat.ThermostatHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.BoschTwinguardHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.WindowContactHandler;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link BoschSHCHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - added Shutter Control and ThermostatHandler\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.boschshc\", service = ThingHandlerFactory.class)\n+public class BoschSHCHandlerFactory extends BaseThingHandlerFactory {\n+\n+    // List of all supported Bosch devices.\n+    public static final Collection<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Arrays.asList(THING_TYPE_SHC,\n+            THING_TYPE_INWALL_SWITCH, THING_TYPE_TWINGUARD, THING_TYPE_WINDOW_CONTACT, THING_TYPE_MOTION_DETECTOR,\n+            THING_TYPE_SHUTTER_CONTROL, THING_TYPE_THERMOSTAT, THING_TYPE_CLIMATE_CONTROL);\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n+\n+        if (THING_TYPE_SHC.equals(thingTypeUID)) {\n+            return new BoschSHCBridgeHandler((Bridge) thing);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzgyNQ=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc2ODQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNjozNlrOHn3BBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNjozNlrOHn3BBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1Nzg5NA==", "bodyText": "Please avoid using info logging, change this to debug instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.info(\"Pairing successful.\");\n          \n          \n            \n                            logger.debug(\"Pairing successful.\");", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511557894", "createdAt": "2020-10-25T07:16:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.info(\"Pairing successful.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc2ODc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxNzowMVrOHn3BMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1MTo0OFrOHof5ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzkzNw==", "bodyText": "Please put fields above the constructor", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511557937", "createdAt": "2020-10-25T07:17:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyNzc3MA==", "bodyText": "Moved the fields above the constructor.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512227770", "createdAt": "2020-10-26T19:51:48Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1NzkzNw=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc2OTM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxODowOFrOHn3BfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1MjoxNFrOHof6gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODAxMw==", "bodyText": "Don't assign the config here as it is subject to change. Instead it should be assigned in the initialize method.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558013", "createdAt": "2020-10-25T07:18:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyNzk2OQ==", "bodyText": "Removed the config field and getting the config inside the initialize method.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512227969", "createdAt": "2020-10-26T19:52:14Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODAxMw=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc2OTc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxOTowNFrOHn3BtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyOToxNlrOHwAZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODA2OA==", "bodyText": "either remove this log or lower the logging level.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558068", "createdAt": "2020-10-25T07:19:04Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyNzAzOA==", "bodyText": "This is meant as a workaround until we have the auto discovery implemented. It will log the available devices with their IDs. The users need those IDs to create the things, so we like to keep it at this log level for the moment. Otherwise the users would have to increase the log level to find this information which might be a problem for not so advanced users.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512227038", "createdAt": "2020-10-26T19:50:29Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODA2OA=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4OTQxOA==", "bodyText": "@cpmeister Is my explanation understandable? Can we keep it in?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520089418", "createdAt": "2020-11-09T20:09:16Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODA2OA=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwMDMwNw==", "bodyText": "You can keep it in for now.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520100307", "createdAt": "2020-11-09T20:29:16Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODA2OA=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc3MDUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoxOTo1OFrOHn3CEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1MjoyOVrOHof7BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODE2MA==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.\nPlease change this to warn.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558160", "createdAt": "2020-10-25T07:19:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.error(\"Long polling failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyODEwMQ==", "bodyText": "Changed it to logger.warn", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512228101", "createdAt": "2020-10-26T19:52:29Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.error(\"Long polling failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODE2MA=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 254}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc3MTE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoyMDoyMlrOHn3CUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoyMDoyMlrOHn3CUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODIyNA==", "bodyText": "same issue here", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558224", "createdAt": "2020-10-25T07:20:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,363 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        // Read configuration\n+        this.config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private BoschSHCBridgeConfiguration config;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    @Override\n+    public void initialize() {\n+        if (this.config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (this.config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.trace(\"Handle command on bridge: {}\", config.ipAddress);\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", config.ipAddress,\n+                httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", config.ipAddress);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.error(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc3MTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoyMToxOVrOHn3Cog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoyMToxOVrOHn3Cog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODMwNg==", "bodyText": "Always include the cause exception when throwing another exception.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n          \n          \n            \n                                + \". Check path, write access and JKS content.\");\n          \n          \n            \n                        throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n          \n          \n            \n                                + \". Check path, write access and JKS content.\", e);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558306", "createdAt": "2020-10-25T07:21:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDc3MjQ2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/JsonRpcRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNzoyMjoxMVrOHn3C7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTo1Mjo0MlrOHof7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODM4Mg==", "bodyText": "Please put fields at the top of the class.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r511558382", "createdAt": "2020-10-25T07:22:11Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/JsonRpcRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Payload as POST data for triggering a RPC call on the Bosch Smart Home Controller.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+class JsonRpcRequest {\n+\n+    public JsonRpcRequest(String jsonrpc, String method, String[] params) {\n+        this.jsonrpc = jsonrpc;\n+        this.method = method;\n+        this.params = params;\n+    }\n+\n+    public String getJsonrpc() {\n+        return jsonrpc;\n+    }\n+\n+    public void setJsonrpc(String jsonrpc) {\n+        this.jsonrpc = jsonrpc;\n+    }\n+\n+    public String getMethod() {\n+        return method;\n+    }\n+\n+    public void setMethod(String method) {\n+        this.method = method;\n+    }\n+\n+    public String[] getParams() {\n+        return params;\n+    }\n+\n+    public void setParams(String[] params) {\n+        this.params = params;\n+    }\n+\n+    public JsonRpcRequest() {\n+        this.jsonrpc = \"\";\n+        this.method = \"\";\n+        this.params = new String[0];\n+    }\n+\n+    public String jsonrpc;\n+    public String method;\n+    public String[] params;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyODIwOQ==", "bodyText": "Moved the fields to the top of the class.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512228209", "createdAt": "2020-10-26T19:52:42Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/JsonRpcRequest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * Payload as POST data for triggering a RPC call on the Bosch Smart Home Controller.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+class JsonRpcRequest {\n+\n+    public JsonRpcRequest(String jsonrpc, String method, String[] params) {\n+        this.jsonrpc = jsonrpc;\n+        this.method = method;\n+        this.params = params;\n+    }\n+\n+    public String getJsonrpc() {\n+        return jsonrpc;\n+    }\n+\n+    public void setJsonrpc(String jsonrpc) {\n+        this.jsonrpc = jsonrpc;\n+    }\n+\n+    public String getMethod() {\n+        return method;\n+    }\n+\n+    public void setMethod(String method) {\n+        this.method = method;\n+    }\n+\n+    public String[] getParams() {\n+        return params;\n+    }\n+\n+    public void setParams(String[] params) {\n+        this.params = params;\n+    }\n+\n+    public JsonRpcRequest() {\n+        this.jsonrpc = \"\";\n+        this.method = \"\";\n+        this.params = new String[0];\n+    }\n+\n+    public String jsonrpc;\n+    public String method;\n+    public String[] params;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1ODM4Mg=="}, "originalCommit": {"oid": "d2389b287c20c9b5e3197106eb018de3403c2927"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDM0ODIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwMjo1MzowNlrOHopjsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0NDo1MlrOHsTLUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTk2OQ==", "bodyText": "{} isn't used for String.format, you should use %s instead.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512385969", "createdAt": "2020-10-27T02:53:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.BoschSHCService;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} represents Bosch Things. Each type of device\n+ * inherits from this abstract thing handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public abstract class BoschSHCHandler extends BaseThingHandler {\n+\n+    /**\n+     * Service State for a Bosch device.\n+     */\n+    class DeviceService<TState extends BoschSHCServiceState> {\n+        /**\n+         * Constructor.\n+         * \n+         * @param service Service which belongs to the device.\n+         * @param affectedChannels Channels which are affected by the state of this service.\n+         */\n+        public DeviceService(BoschSHCService<TState> service, Collection<String> affectedChannels) {\n+            this.service = service;\n+            this.affectedChannels = affectedChannels;\n+        }\n+\n+        /**\n+         * Service which belongs to the device.\n+         */\n+        public BoschSHCService<TState> service;\n+\n+        /**\n+         * Channels which are affected by the state of this service.\n+         */\n+        public Collection<String> affectedChannels;\n+    }\n+\n+    protected final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    /**\n+     * Reusable gson instance to convert a class to json string and back in derived classes.\n+     */\n+    protected Gson gson = new Gson();\n+\n+    /**\n+     * Bosch SHC configuration loaded from openHAB configuration.\n+     */\n+    private @Nullable BoschSHCConfiguration config;\n+\n+    /**\n+     * Services of the device.\n+     */\n+    private List<DeviceService<? extends BoschSHCServiceState>> services = new ArrayList<>();\n+\n+    public BoschSHCHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Returns the unique id of the Bosch device.\n+     * \n+     * @return Unique id of the Bosch device.\n+     */\n+    public @Nullable String getBoschID() {\n+        BoschSHCConfiguration config = this.config;\n+        if (config != null) {\n+            return config.id;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Initializes this handler. Use this method to register all services of the device with\n+     * {@link #registerService(BoschSHCService)}.\n+     */\n+    @Override\n+    public void initialize() {\n+        this.config = getConfigAs(BoschSHCConfiguration.class);\n+\n+        try {\n+            this.initializeServices();\n+\n+            // Mark immediately as online - if the bridge is online, the thing is too.\n+            this.updateStatus(ThingStatus.ONLINE);\n+        } catch (BoschSHCException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Handles the refresh command of all registered services. Override it to handle custom commands (e.g. to update\n+     * states of services).\n+     * \n+     * @param channelUID {@link ChannelUID} of the channel to which the command was sent\n+     * @param command {@link Command}\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // Refresh state of services that affect the channel\n+            for (DeviceService<? extends BoschSHCServiceState> deviceService : this.services) {\n+                if (deviceService.affectedChannels.contains(channelUID.getIdWithoutGroup())) {\n+                    try {\n+                        deviceService.service.refreshState();\n+                    } catch (InterruptedException | TimeoutException | ExecutionException | BoschSHCException e) {\n+                        this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                                String.format(\"Error when trying to refresh state from service {}: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzU4NQ==", "bodyText": "Changed to %s", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516213585", "createdAt": "2020-11-02T19:44:52Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.BoschSHCService;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} represents Bosch Things. Each type of device\n+ * inherits from this abstract thing handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public abstract class BoschSHCHandler extends BaseThingHandler {\n+\n+    /**\n+     * Service State for a Bosch device.\n+     */\n+    class DeviceService<TState extends BoschSHCServiceState> {\n+        /**\n+         * Constructor.\n+         * \n+         * @param service Service which belongs to the device.\n+         * @param affectedChannels Channels which are affected by the state of this service.\n+         */\n+        public DeviceService(BoschSHCService<TState> service, Collection<String> affectedChannels) {\n+            this.service = service;\n+            this.affectedChannels = affectedChannels;\n+        }\n+\n+        /**\n+         * Service which belongs to the device.\n+         */\n+        public BoschSHCService<TState> service;\n+\n+        /**\n+         * Channels which are affected by the state of this service.\n+         */\n+        public Collection<String> affectedChannels;\n+    }\n+\n+    protected final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    /**\n+     * Reusable gson instance to convert a class to json string and back in derived classes.\n+     */\n+    protected Gson gson = new Gson();\n+\n+    /**\n+     * Bosch SHC configuration loaded from openHAB configuration.\n+     */\n+    private @Nullable BoschSHCConfiguration config;\n+\n+    /**\n+     * Services of the device.\n+     */\n+    private List<DeviceService<? extends BoschSHCServiceState>> services = new ArrayList<>();\n+\n+    public BoschSHCHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    /**\n+     * Returns the unique id of the Bosch device.\n+     * \n+     * @return Unique id of the Bosch device.\n+     */\n+    public @Nullable String getBoschID() {\n+        BoschSHCConfiguration config = this.config;\n+        if (config != null) {\n+            return config.id;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Initializes this handler. Use this method to register all services of the device with\n+     * {@link #registerService(BoschSHCService)}.\n+     */\n+    @Override\n+    public void initialize() {\n+        this.config = getConfigAs(BoschSHCConfiguration.class);\n+\n+        try {\n+            this.initializeServices();\n+\n+            // Mark immediately as online - if the bridge is online, the thing is too.\n+            this.updateStatus(ThingStatus.ONLINE);\n+        } catch (BoschSHCException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Handles the refresh command of all registered services. Override it to handle custom commands (e.g. to update\n+     * states of services).\n+     * \n+     * @param channelUID {@link ChannelUID} of the channel to which the command was sent\n+     * @param command {@link Command}\n+     */\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            // Refresh state of services that affect the channel\n+            for (DeviceService<? extends BoschSHCServiceState> deviceService : this.services) {\n+                if (deviceService.affectedChannels.contains(channelUID.getIdWithoutGroup())) {\n+                    try {\n+                        deviceService.service.refreshState();\n+                    } catch (InterruptedException | TimeoutException | ExecutionException | BoschSHCException e) {\n+                        this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                                String.format(\"Error when trying to refresh state from service {}: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM4NTk2OQ=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU4NjUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxNDoyM1rOHortlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0NDo0OFrOHsTLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMTI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                public String id;\n          \n          \n            \n                public @Nullable String id;", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512421269", "createdAt": "2020-10-27T05:14:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCConfiguration.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link BoschSHCConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSHCConfiguration {\n+    /**\n+     * ID of the device as returned by the controller.\n+     */\n+    @Nullable\n+    public String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzUzOA==", "bodyText": "Changed the order", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516213538", "createdAt": "2020-11-02T19:44:48Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCConfiguration.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link BoschSHCConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSHCConfiguration {\n+    /**\n+     * ID of the device as returned by the controller.\n+     */\n+    @Nullable\n+    public String id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMTI2OQ=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU5MjIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxNzowN1rOHorwvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0NDo0MFrOHsTK4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjA3OA==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512422078", "createdAt": "2020-10-27T05:17:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed\", e);\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Query the Bosch Smart Home Controller for the state of the given thing.\n+     *\n+     * @param deviceId Id of device to get state for\n+     * @param stateName Name of the state to query\n+     * @param stateClass Class to convert the resulting JSON to\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     * @throws BoschSHCException\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable T getState(String deviceId, String stateName, Class<T> stateClass)\n+            throws InterruptedException, TimeoutException, ExecutionException, BoschSHCException {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        String url = httpClient.createServiceUrl(stateName, deviceId);\n+        Request request = httpClient.createRequest(url, GET).header(\"Accept\", \"application/json\");\n+\n+        logger.debug(\"refreshState: Requesting \\\"{}\\\" from Bosch: {} via {}\", stateName, deviceId, url);\n+\n+        ContentResponse contentResponse = request.send();\n+\n+        String content = contentResponse.getContentAsString();\n+        logger.debug(\"refreshState: Request complete: [{}] - return code: {}\", content, contentResponse.getStatus());\n+\n+        int statusCode = contentResponse.getStatus();\n+        if (statusCode != 200) {\n+            JsonRestExceptionResponse errorResponse = gson.fromJson(content, JsonRestExceptionResponse.class);\n+            throw new BoschSHCException(String.format(\n+                    \"State request for service {} of device {} failed with status code {} and error code {}\", stateName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzQ3Mw==", "bodyText": "Changed to %s", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516213473", "createdAt": "2020-11-02T19:44:40Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed\", e);\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Query the Bosch Smart Home Controller for the state of the given thing.\n+     *\n+     * @param deviceId Id of device to get state for\n+     * @param stateName Name of the state to query\n+     * @param stateClass Class to convert the resulting JSON to\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     * @throws BoschSHCException\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable T getState(String deviceId, String stateName, Class<T> stateClass)\n+            throws InterruptedException, TimeoutException, ExecutionException, BoschSHCException {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        String url = httpClient.createServiceUrl(stateName, deviceId);\n+        Request request = httpClient.createRequest(url, GET).header(\"Accept\", \"application/json\");\n+\n+        logger.debug(\"refreshState: Requesting \\\"{}\\\" from Bosch: {} via {}\", stateName, deviceId, url);\n+\n+        ContentResponse contentResponse = request.send();\n+\n+        String content = contentResponse.getContentAsString();\n+        logger.debug(\"refreshState: Request complete: [{}] - return code: {}\", content, contentResponse.getStatus());\n+\n+        int statusCode = contentResponse.getStatus();\n+        if (statusCode != 200) {\n+            JsonRestExceptionResponse errorResponse = gson.fromJson(content, JsonRestExceptionResponse.class);\n+            throw new BoschSHCException(String.format(\n+                    \"State request for service {} of device {} failed with status code {} and error code {}\", stateName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjA3OA=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU5NDE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxODoyMFrOHorx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0NDoyOVrOHsTKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjM3Ng==", "bodyText": "The default charset varies from system to system so it is better to specify it yourself instead of using the default.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512422376", "createdAt": "2020-10-27T05:18:20Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzM3OQ==", "bodyText": "Using StandardCharsets.UTF_8", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516213379", "createdAt": "2020-11-02T19:44:29Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjM3Ng=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU5NjczOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToxOTozN1rOHorzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0NDoxMVrOHsTJyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjc0Mw==", "bodyText": "Can you you remove the spaces in these file names?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512422743", "createdAt": "2020-10-27T05:19:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes());\n+        signer.sign();\n+\n+        X509Certificate cert = generateClientCertificate(keyPair);\n+\n+        logger.debug(\"Adding keypair and self signed certificate to keystore\");\n+        keyStore.setKeyEntry(getBoschSHCId(), keyPair.getPrivate(), keystorePassword.toCharArray(),\n+                new Certificate[] { cert });\n+\n+        // add Bosch Certs\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        logger.debug(\"Adding Issuing CA to keystore\");\n+        try (BufferedInputStream streamIssuingCA = new BufferedInputStream(\n+                BoschSslUtil.class.getClassLoader().getResourceAsStream(\"Smart Home Controller Issuing CA.pem\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxMzE5Mg==", "bodyText": "Removed the spaces", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516213192", "createdAt": "2020-11-02T19:44:11Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes());\n+        signer.sign();\n+\n+        X509Certificate cert = generateClientCertificate(keyPair);\n+\n+        logger.debug(\"Adding keypair and self signed certificate to keystore\");\n+        keyStore.setKeyEntry(getBoschSHCId(), keyPair.getPrivate(), keystorePassword.toCharArray(),\n+                new Certificate[] { cert });\n+\n+        // add Bosch Certs\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        logger.debug(\"Adding Issuing CA to keystore\");\n+        try (BufferedInputStream streamIssuingCA = new BufferedInputStream(\n+                BoschSslUtil.class.getClassLoader().getResourceAsStream(\"Smart Home Controller Issuing CA.pem\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMjc0Mw=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDU5OTMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/dto/Device.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyMDo1M1rOHor0vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTo0Njo0MVrOHsTPsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzEwMw==", "bodyText": "Do you have to use ArrayList here? Would List not suffice?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512423103", "createdAt": "2020-10-27T05:20:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/dto/Device.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge.dto;\n+\n+import java.util.ArrayList;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Represents a single devices connected to the Bosch Smart Home Controller.\n+ *\n+ * Example from Json:\n+ *\n+ * {\n+ * \"@type\":\"device\",\n+ * \"rootDeviceId\":\"64-da-a0-02-14-9b\",\n+ * \"id\":\"hdm:HomeMaticIP:3014F711A00004953859F31B\",\n+ * \"deviceServiceIds\":[\"PowerMeter\",\"PowerSwitch\",\"PowerSwitchProgram\",\"Routing\"],\n+ * \"manufacturer\":\"BOSCH\",\n+ * \"roomId\":\"hz_3\",\n+ * \"deviceModel\":\"PSM\",\n+ * \"serial\":\"3014F711A00004953859F31B\",\n+ * \"profile\":\"GENERIC\",\n+ * \"name\":\"Coffee Machine\",\n+ * \"status\":\"AVAILABLE\",\n+ * \"childDeviceIds\":[]\n+ * }\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+public class Device {\n+\n+    @SerializedName(\"@type\")\n+    public String type;\n+\n+    public String rootDeviceId;\n+    public String id;\n+    public ArrayList<String> deviceSerivceIDs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIxNDcwNA==", "bodyText": "Changed it", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516214704", "createdAt": "2020-11-02T19:46:41Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/dto/Device.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge.dto;\n+\n+import java.util.ArrayList;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * Represents a single devices connected to the Bosch Smart Home Controller.\n+ *\n+ * Example from Json:\n+ *\n+ * {\n+ * \"@type\":\"device\",\n+ * \"rootDeviceId\":\"64-da-a0-02-14-9b\",\n+ * \"id\":\"hdm:HomeMaticIP:3014F711A00004953859F31B\",\n+ * \"deviceServiceIds\":[\"PowerMeter\",\"PowerSwitch\",\"PowerSwitchProgram\",\"Routing\"],\n+ * \"manufacturer\":\"BOSCH\",\n+ * \"roomId\":\"hz_3\",\n+ * \"deviceModel\":\"PSM\",\n+ * \"serial\":\"3014F711A00004953859F31B\",\n+ * \"profile\":\"GENERIC\",\n+ * \"name\":\"Coffee Machine\",\n+ * \"status\":\"AVAILABLE\",\n+ * \"childDeviceIds\":[]\n+ * }\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+public class Device {\n+\n+    @SerializedName(\"@type\")\n+    public String type;\n+\n+    public String rootDeviceId;\n+    public String id;\n+    public ArrayList<String> deviceSerivceIDs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzEwMw=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDYwMjc3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyMjo1OVrOHor2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowNTo1MVrOHsT1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzYyMQ==", "bodyText": "Can this be made final?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512423621", "createdAt": "2020-10-27T05:22:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private PowerSwitchService powerSwitchService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDQ0Mw==", "bodyText": "Yes, changed it.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516224443", "createdAt": "2020-11-02T20:05:51Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private PowerSwitchService powerSwitchService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyMzYyMQ=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDYwNTQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyNDoyOFrOHor4SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowNTo0M1rOHsT1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDAwOA==", "bodyText": "Should't these be QuantityType?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512424008", "createdAt": "2020-10-27T05:24:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+        if (command instanceof RefreshType) {\n+            switch (channelUID.getId()) {\n+                case CHANNEL_POWER_CONSUMPTION: {\n+                    PowerMeterState state = this.getState(\"PowerMeter\", PowerMeterState.class);\n+                    if (state != null) {\n+                        updatePowerMeterState(state);\n+                    }\n+                    break;\n+                }\n+                case CHANNEL_ENERGY_CONSUMPTION:\n+                    // Nothing to do here, since the same update is received from POWER_CONSUMPTION\n+                    break;\n+                default:\n+                    logger.warn(\"Received refresh request for unsupported channel: {}\", channelUID);\n+            }\n+        } else {\n+            switch (channelUID.getId()) {\n+                case CHANNEL_POWER_SWITCH:\n+                    if (command instanceof OnOffType) {\n+                        updatePowerSwitchState((OnOffType) command);\n+                    }\n+                    break;\n+            }\n+        }\n+    }\n+\n+    void updatePowerMeterState(PowerMeterState state) {\n+        logger.debug(\"Parsed power meter state of {}: energy {} - power {}\", this.getBoschID(), state.energyConsumption,\n+                state.energyConsumption);\n+\n+        updateState(CHANNEL_POWER_CONSUMPTION, new DecimalType(state.powerConsumption));\n+        updateState(CHANNEL_ENERGY_CONSUMPTION, new DecimalType(state.energyConsumption));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNDM3Ng==", "bodyText": "Yes, that would be better, changed it.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516224376", "createdAt": "2020-11-02T20:05:43Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+        if (command instanceof RefreshType) {\n+            switch (channelUID.getId()) {\n+                case CHANNEL_POWER_CONSUMPTION: {\n+                    PowerMeterState state = this.getState(\"PowerMeter\", PowerMeterState.class);\n+                    if (state != null) {\n+                        updatePowerMeterState(state);\n+                    }\n+                    break;\n+                }\n+                case CHANNEL_ENERGY_CONSUMPTION:\n+                    // Nothing to do here, since the same update is received from POWER_CONSUMPTION\n+                    break;\n+                default:\n+                    logger.warn(\"Received refresh request for unsupported channel: {}\", channelUID);\n+            }\n+        } else {\n+            switch (channelUID.getId()) {\n+                case CHANNEL_POWER_SWITCH:\n+                    if (command instanceof OnOffType) {\n+                        updatePowerSwitchState((OnOffType) command);\n+                    }\n+                    break;\n+            }\n+        }\n+    }\n+\n+    void updatePowerMeterState(PowerMeterState state) {\n+        logger.debug(\"Parsed power meter state of {}: energy {} - power {}\", this.getBoschID(), state.energyConsumption,\n+                state.energyConsumption);\n+\n+        updateState(CHANNEL_POWER_CONSUMPTION, new DecimalType(state.powerConsumption));\n+        updateState(CHANNEL_ENERGY_CONSUMPTION, new DecimalType(state.energyConsumption));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDAwOA=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMDYwOTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/shuttercontrol/ShutterControlHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNToyNjozNFrOHor6uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDoxMjowM1rOHsUBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDYzMg==", "bodyText": "You should check whether Stop or Move was specified. Wouldn't want the blinds to stop when someone tells them to move. I don't tend to implement Move though, so I suggest ignoring that particular command.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r512424632", "createdAt": "2020-10-27T05:26:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/shuttercontrol/ShutterControlHandler.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.shuttercontrol;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.CHANNEL_LEVEL;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.OperationState;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.ShutterControlService;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.dto.ShutterControlServiceState;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StopMoveType;\n+import org.openhab.core.library.types.UpDownType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * Handler for a shutter control device\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShutterControlHandler extends BoschSHCHandler {\n+    /**\n+     * Utility functions to convert data between Bosch things and openHAB items\n+     */\n+    static final class DataConversion {\n+        public static int levelToOpenPercentage(double level) {\n+            return (int) Math.round((1 - level) * 100);\n+        }\n+\n+        public static double openPercentageToLevel(double openPercentage) {\n+            return (100 - openPercentage) / 100.0;\n+        }\n+    }\n+\n+    private ShutterControlService shutterControlService;\n+\n+    public ShutterControlHandler(Thing thing) {\n+        super(thing);\n+        this.shutterControlService = new ShutterControlService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.shutterControlService, this::updateChannels, Arrays.asList(CHANNEL_LEVEL));\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        if (command instanceof UpDownType) {\n+            // Set full close/open as target state\n+            UpDownType upDownType = (UpDownType) command;\n+            ShutterControlServiceState state = new ShutterControlServiceState();\n+            if (upDownType == UpDownType.UP) {\n+                state.level = 1.0;\n+            } else if (upDownType == UpDownType.DOWN) {\n+                state.level = 0.0;\n+            } else {\n+                logger.warn(\"Received unknown UpDownType command: {}\", upDownType);\n+                return;\n+            }\n+            this.shutterControlService.setState(state);\n+        } else if (command instanceof StopMoveType) {\n+            // Set STOPPED operation state\n+            ShutterControlServiceState state = new ShutterControlServiceState();\n+            state.operationState = OperationState.STOPPED;\n+            this.shutterControlService.setState(state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNzQ0MA==", "bodyText": "Added check for StopMoveType.STOP", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516227440", "createdAt": "2020-11-02T20:12:03Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/shuttercontrol/ShutterControlHandler.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.shuttercontrol;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.CHANNEL_LEVEL;\n+\n+import java.util.Arrays;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.OperationState;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.ShutterControlService;\n+import org.openhab.binding.boschshc.internal.services.shuttercontrol.dto.ShutterControlServiceState;\n+import org.openhab.core.library.types.PercentType;\n+import org.openhab.core.library.types.StopMoveType;\n+import org.openhab.core.library.types.UpDownType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+\n+/**\n+ * Handler for a shutter control device\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ShutterControlHandler extends BoschSHCHandler {\n+    /**\n+     * Utility functions to convert data between Bosch things and openHAB items\n+     */\n+    static final class DataConversion {\n+        public static int levelToOpenPercentage(double level) {\n+            return (int) Math.round((1 - level) * 100);\n+        }\n+\n+        public static double openPercentageToLevel(double openPercentage) {\n+            return (100 - openPercentage) / 100.0;\n+        }\n+    }\n+\n+    private ShutterControlService shutterControlService;\n+\n+    public ShutterControlHandler(Thing thing) {\n+        super(thing);\n+        this.shutterControlService = new ShutterControlService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.shutterControlService, this::updateChannels, Arrays.asList(CHANNEL_LEVEL));\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        super.handleCommand(channelUID, command);\n+\n+        if (command instanceof UpDownType) {\n+            // Set full close/open as target state\n+            UpDownType upDownType = (UpDownType) command;\n+            ShutterControlServiceState state = new ShutterControlServiceState();\n+            if (upDownType == UpDownType.UP) {\n+                state.level = 1.0;\n+            } else if (upDownType == UpDownType.DOWN) {\n+                state.level = 0.0;\n+            } else {\n+                logger.warn(\"Received unknown UpDownType command: {}\", upDownType);\n+                return;\n+            }\n+            this.shutterControlService.setState(state);\n+        } else if (command instanceof StopMoveType) {\n+            // Set STOPPED operation state\n+            ShutterControlServiceState state = new ShutterControlServiceState();\n+            state.operationState = OperationState.STOPPED;\n+            this.shutterControlService.setState(state);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyNDYzMg=="}, "originalCommit": {"oid": "83a86f55011d6dddeabce910fe3a3efaa105549e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDA5NDA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoxMTo1OVrOHtCTLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNzo1MFrOHv_sPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTY0Ng==", "bodyText": "Can these be final?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516985646", "createdAt": "2020-11-03T22:11:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.BoschSHCService;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} represents Bosch Things. Each type of device\n+ * inherits from this abstract thing handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public abstract class BoschSHCHandler extends BaseThingHandler {\n+\n+    /**\n+     * Service State for a Bosch device.\n+     */\n+    class DeviceService<TState extends BoschSHCServiceState> {\n+        /**\n+         * Constructor.\n+         * \n+         * @param service Service which belongs to the device.\n+         * @param affectedChannels Channels which are affected by the state of this service.\n+         */\n+        public DeviceService(BoschSHCService<TState> service, Collection<String> affectedChannels) {\n+            this.service = service;\n+            this.affectedChannels = affectedChannels;\n+        }\n+\n+        /**\n+         * Service which belongs to the device.\n+         */\n+        public BoschSHCService<TState> service;\n+\n+        /**\n+         * Channels which are affected by the state of this service.\n+         */\n+        public Collection<String> affectedChannels;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4ODYzNg==", "bodyText": "Yes, they can :)", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520088636", "createdAt": "2020-11-09T20:07:50Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandler.java", "diffHunk": "@@ -0,0 +1,280 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.BoschSHCService;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} represents Bosch Things. Each type of device\n+ * inherits from this abstract thing handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public abstract class BoschSHCHandler extends BaseThingHandler {\n+\n+    /**\n+     * Service State for a Bosch device.\n+     */\n+    class DeviceService<TState extends BoschSHCServiceState> {\n+        /**\n+         * Constructor.\n+         * \n+         * @param service Service which belongs to the device.\n+         * @param affectedChannels Channels which are affected by the state of this service.\n+         */\n+        public DeviceService(BoschSHCService<TState> service, Collection<String> affectedChannels) {\n+            this.service = service;\n+            this.affectedChannels = affectedChannels;\n+        }\n+\n+        /**\n+         * Service which belongs to the device.\n+         */\n+        public BoschSHCService<TState> service;\n+\n+        /**\n+         * Channels which are affected by the state of this service.\n+         */\n+        public Collection<String> affectedChannels;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4NTY0Ng=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDEyMDgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoyMToyMlrOHtCi0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNzozOFrOHv_r7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4OTY0OQ==", "bodyText": "Don't you also need to stop the httpClient here?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516989649", "createdAt": "2020-11-03T22:21:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4ODU1Nw==", "bodyText": "Stopping the client in dispose", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520088557", "createdAt": "2020-11-09T20:07:38Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk4OTY0OQ=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDEzODcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjoyNzoyOVrOHtCtMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNzoyM1rOHv_rYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MjMwNw==", "bodyText": "You need to keep of the Future returned here and make sure to cancel it when this handler is disposed.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516992307", "createdAt": "2020-11-03T22:27:29Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4ODQxOQ==", "bodyText": "Storing the future and cancel it in dispose", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520088419", "createdAt": "2020-11-09T20:07:23Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5MjMwNw=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDE0ODM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozMDo1NlrOHtCy4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNjozMFrOHx6SYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Mzc2Mg==", "bodyText": "is it?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516993762", "createdAt": "2020-11-03T22:30:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTg5Ng==", "bodyText": "Yes, as far as I can see. Just in contrast to other methods of the class which are handled asynchronous, e.g. executeLongPoll. Should I remove the comment?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520075896", "createdAt": "2020-11-09T19:45:25Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Mzc2Mg=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwMjQ5OQ==", "bodyText": "Well saying that it is synchronous implies that only a single thread can call it at a time, but I see no indication of that in the code. I suggest removing the comment.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520102499", "createdAt": "2020-11-09T20:33:28Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Mzc2Mg=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NDAyMw==", "bodyText": "Alright, I see. I just saw it as the opposite of an asynchronous http request, but have not thought about threading. I will remove it to not confuse people :)", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r522094023", "createdAt": "2020-11-12T13:10:54Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Mzc2Mg=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NzI0OQ==", "bodyText": "Removed the comment.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r522097249", "createdAt": "2020-11-12T13:16:30Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5Mzc2Mg=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDE1OTc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozNToxNFrOHtC5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNzowNVrOHv_qvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTUxNw==", "bodyText": "Are you going to handle refresh of any of the other channels?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516995517", "createdAt": "2020-11-03T22:35:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType && CHANNEL_TEMPERATURE.equals(channelUID.getId())) {\n+                // Only refresh the state for CHANNEL_TEMPERATURE, the rest will be filled in too.\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4ODI1Mg==", "bodyText": "Removed the channel check, in my opinion the command should be sent no matter which channel should be refreshed.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520088252", "createdAt": "2020-11-09T20:07:05Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType && CHANNEL_TEMPERATURE.equals(channelUID.getId())) {\n+                // Only refresh the state for CHANNEL_TEMPERATURE, the rest will be filled in too.\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTUxNw=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDE2MTEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozNTo0M1rOHtC6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNjoxNlrOHv_pCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTcyOA==", "bodyText": "You should include the exception message in the log.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516995728", "createdAt": "2020-11-03T22:35:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType && CHANNEL_TEMPERATURE.equals(channelUID.getId())) {\n+                // Only refresh the state for CHANNEL_TEMPERATURE, the rest will be filled in too.\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"Twinguard: received update: {} {}\", id, state);\n+\n+        try {\n+            AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);\n+\n+            logger.debug(\"Parsed switch state of {}: {}\", this.getBoschID(), parsed);\n+            updateAirQualityState(parsed);\n+\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"Received unknown update in in-wall switch: {}\", state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NzgxNw==", "bodyText": "Changed it", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087817", "createdAt": "2020-11-09T20:06:16Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType && CHANNEL_TEMPERATURE.equals(channelUID.getId())) {\n+                // Only refresh the state for CHANNEL_TEMPERATURE, the rest will be filled in too.\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"Twinguard: received update: {} {}\", id, state);\n+\n+        try {\n+            AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);\n+\n+            logger.debug(\"Parsed switch state of {}: {}\", this.getBoschID(), parsed);\n+            updateAirQualityState(parsed);\n+\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"Received unknown update in in-wall switch: {}\", state);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTcyOA=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDE2MjQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/windowcontact/WindowContactHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjozNjoxM1rOHtC7Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNjowOVrOHv_ozw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTkxOQ==", "bodyText": "here too", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r516995919", "createdAt": "2020-11-03T22:36:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/windowcontact/WindowContactHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.windowcontact;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.CHANNEL_CONTACT;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.dto.ShutterContactState;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling Bosch window/door contacts.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WindowContactHandler extends BoschSHCHandler {\n+\n+    public WindowContactHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+        if (command instanceof RefreshType && CHANNEL_CONTACT.equals(channelUID.getId())) {\n+            ShutterContactState state = this.getState(\"ShutterContact\", ShutterContactState.class);\n+            if (state != null) {\n+                updateShutterContactState(state);\n+            }\n+        }\n+    }\n+\n+    void updateShutterContactState(ShutterContactState state) {\n+        State contact = state.value.equals(\"CLOSED\") ? OpenClosedType.CLOSED : OpenClosedType.OPEN;\n+        updateState(CHANNEL_CONTACT, contact);\n+\n+        logger.debug(\"Parsed shutter contact state state of {}: {}\", this.getBoschID(), state.value);\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"WindowContact: received update: {} {}\", id, state);\n+        try {\n+            updateShutterContactState(gson.fromJson(state, ShutterContactState.class));\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"Received unknown update in window contact handler: {}\", state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4Nzc1OQ==", "bodyText": "Changed it", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087759", "createdAt": "2020-11-09T20:06:09Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/windowcontact/WindowContactHandler.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.windowcontact;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.CHANNEL_CONTACT;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.dto.ShutterContactState;\n+import org.openhab.core.library.types.OpenClosedType;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling Bosch window/door contacts.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class WindowContactHandler extends BoschSHCHandler {\n+\n+    public WindowContactHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+        if (command instanceof RefreshType && CHANNEL_CONTACT.equals(channelUID.getId())) {\n+            ShutterContactState state = this.getState(\"ShutterContact\", ShutterContactState.class);\n+            if (state != null) {\n+                updateShutterContactState(state);\n+            }\n+        }\n+    }\n+\n+    void updateShutterContactState(ShutterContactState state) {\n+        State contact = state.value.equals(\"CLOSED\") ? OpenClosedType.CLOSED : OpenClosedType.OPEN;\n+        updateState(CHANNEL_CONTACT, contact);\n+\n+        logger.debug(\"Parsed shutter contact state state of {}: {}\", this.getBoschID(), state.value);\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"WindowContact: received update: {} {}\", id, state);\n+        try {\n+            updateShutterContactState(gson.fromJson(state, ShutterContactState.class));\n+        } catch (JsonSyntaxException e) {\n+            logger.warn(\"Received unknown update in window contact handler: {}\", state);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk5NTkxOQ=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDE5NzE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo0OTo1MFrOHtDQFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNTozMVrOHv_njA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | power-consumption  | Number    | Current power consumption (W) of the device. |\n          \n          \n            \n            | energy-consumption | Number    | Energy consumption of the device.            |\n          \n          \n            \n            | power-consumption  | Number:Power    | Current power consumption (W) of the device. |\n          \n          \n            \n            | energy-consumption | Number:Energy    | Energy consumption of the device.            |", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517001236", "createdAt": "2020-11-03T22:49:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NzQzNg==", "bodyText": "Changed it", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087436", "createdAt": "2020-11-09T20:05:31Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTIzNg=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDE5ODE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1MDoxMFrOHtDQoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNToxNVrOHv_nAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTM3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | humidity           | Number             | Current measured humidity.                    |\n          \n          \n            \n            | humidity           | Number:Dimensionless             | Current measured humidity.                    |", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517001376", "createdAt": "2020-11-03T22:50:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type          | Description                                   |\n+| ------------------ | ------------------ | --------------------------------------------- |\n+| temperature        | Number:Temperature | Current measured temperature.                 |\n+| temperature-rating | String             | Rating of the currently measured temperature. |\n+| humidity           | Number             | Current measured humidity.                    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NzI5Nw==", "bodyText": "Changed it", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087297", "createdAt": "2020-11-09T20:05:15Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type          | Description                                   |\n+| ------------------ | ------------------ | --------------------------------------------- |\n+| temperature        | Number:Temperature | Current measured temperature.                 |\n+| temperature-rating | String             | Rating of the currently measured temperature. |\n+| humidity           | Number             | Current measured humidity.                    |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTM3Ng=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDIwMTE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1MToxOVrOHtDSYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNToxMFrOHv_m5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | valve-tappet-position | Number             | Current open ratio of valve tappet (0 to 100). |\n          \n          \n            \n            | valve-tappet-position | Number:Dimensionless             | Current open ratio of valve tappet (0 to 100). |", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517001826", "createdAt": "2020-11-03T22:51:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type          | Description                                   |\n+| ------------------ | ------------------ | --------------------------------------------- |\n+| temperature        | Number:Temperature | Current measured temperature.                 |\n+| temperature-rating | String             | Rating of the currently measured temperature. |\n+| humidity           | Number             | Current measured humidity.                    |\n+| humidity-rating    | String             | Rating of current measured humidity.          |\n+| purity             | String             | Purity of the air.                            |\n+| purity-rating      | String             | Rating of current measured purity.            |\n+| air-description    | String             | Overall description of the air quality.       |\n+| combined-rating    | String             | Combined rating of the air quality.           |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+| --------------- | --------- | ---------------------------- |\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+| --------------- | --------- | ------------------------------ |\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+| --------------- | ------------- | ---------------------------------------- |\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type          | Description                                    |\n+| --------------------- | ------------------ | ---------------------------------------------- |\n+| temperature           | Number:Temperature | Current measured temperature.                  |\n+| valve-tappet-position | Number             | Current open ratio of valve tappet (0 to 100). |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NzI2OA==", "bodyText": "Changed it", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087268", "createdAt": "2020-11-09T20:05:10Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type | Description                                  |\n+| ------------------ | --------- | -------------------------------------------- |\n+| power-switch       | Switch    | Current state of the switch.                 |\n+| power-consumption  | Number    | Current power consumption (W) of the device. |\n+| energy-consumption | Number    | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type          | Description                                   |\n+| ------------------ | ------------------ | --------------------------------------------- |\n+| temperature        | Number:Temperature | Current measured temperature.                 |\n+| temperature-rating | String             | Rating of the currently measured temperature. |\n+| humidity           | Number             | Current measured humidity.                    |\n+| humidity-rating    | String             | Rating of current measured humidity.          |\n+| purity             | String             | Purity of the air.                            |\n+| purity-rating      | String             | Rating of current measured purity.            |\n+| air-description    | String             | Overall description of the air quality.       |\n+| combined-rating    | String             | Combined rating of the air quality.           |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+| --------------- | --------- | ---------------------------- |\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+| --------------- | --------- | ------------------------------ |\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+| --------------- | ------------- | ---------------------------------------- |\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type          | Description                                    |\n+| --------------------- | ------------------ | ---------------------------------------------- |\n+| temperature           | Number:Temperature | Current measured temperature.                  |\n+| valve-tappet-position | Number             | Current open ratio of valve tappet (0 to 100). |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMTgyNg=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDIwODI5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1Mzo1NFrOHtDWcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNDoyNjo1NVrOHywWjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjg2NA==", "bodyText": "Is this supposed to be writable? Also please add some details to the README as to what purity values are supposed to mean. Is a higher value better or worse?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517002864", "createdAt": "2020-11-03T22:53:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"purity\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Purity</label>\n+\t\t<description>Purity of the air.</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4Mjg0OQ==", "bodyText": "@stefan-kaestle Maybe you have an information about the purity value? I can not find any further description in the Bosch docs.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520082849", "createdAt": "2020-11-09T19:57:23Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"purity\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Purity</label>\n+\t\t<description>Purity of the air.</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjg2NA=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NzY3MA==", "bodyText": "Flagged the channels that are read-only", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087670", "createdAt": "2020-11-09T20:05:58Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"purity\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Purity</label>\n+\t\t<description>Purity of the air.</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjg2NA=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk4MzA1NA==", "bodyText": "Alright, I received some information from the Bosch devs: BoschSmartHome/bosch-shc-api-docs#40 Added them to the channel definition and the Readme.md", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r522983054", "createdAt": "2020-11-13T14:26:55Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"purity\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Purity</label>\n+\t\t<description>Purity of the air.</description>\n+\t</channel-type>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMjg2NA=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDIxNDI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMjo1NjowMlrOHtDZ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowNDo1M1rOHv_mRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMzc0OQ==", "bodyText": "Channels with units will typically need to have a state pattern format defined as well.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r517003749", "createdAt": "2020-11-03T22:56:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NzEwOA==", "bodyText": "Added pattern for power and energy consumption", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520087108", "createdAt": "2020-11-09T20:04:53Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,238 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"shutter-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Shutter Control</label>\n+\t\t<description>Bosch Shutter Control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"level\" typeId=\"level\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"thermostat\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Thermostat</label>\n+\t\t<description>Bosch Thermostat</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"valve-tappet-position\" typeId=\"valve-tappet-position\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"climate-control\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"shc\"/>\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Climate Control</label>\n+\t\t<description>Bosch Climate Control. This is a virtual device which is automatically created for all rooms that have\n+\t\t\tthermostats in it.</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"setpoint-temperature\" typeId=\"setpoint-temperature\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<channel-type id=\"temperature\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Current measured temperature.</description>\n+\t\t<state min=\"0\" max=\"40\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"true\"/>\n+\t</channel-type>\n+\n+\t<channel-type id=\"temperature-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Temperature Rating</label>\n+\t\t<description>Rating of the currently measured temperature.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Temperature</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Temperature</option>\n+\t\t\t\t<option value=\"BAD\">Bad Temperature</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity\">\n+\t\t<item-type>Number:Dimensionless</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Current measured humidity.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"humidity-rating\">\n+\t\t<item-type>String</item-type>\n+\t\t<label>Humidity Rating</label>\n+\t\t<description>Rating of current measured humidity.</description>\n+\t\t<state readOnly=\"true\">\n+\t\t\t<options>\n+\t\t\t\t<option value=\"GOOD\">Good Humidity</option>\n+\t\t\t\t<option value=\"MEDIUM\">Medium Humidity</option>\n+\t\t\t\t<option value=\"BAD\">Bad Humidity</option>\n+\t\t\t</options>\n+\t\t</state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"energy-consumption\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Energy consumption (Wh)</label>\n+\t\t<description>Energy consumption of the device.</description>\n+\t</channel-type>\n+\n+\t<channel-type id=\"power-consumption\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Power consumption (W)</label>\n+\t\t<description>Current power consumption of the device.</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAwMzc0OQ=="}, "originalCommit": {"oid": "78b127da74d2e553e43b1a95202b5df1824be322"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDQ2ODI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDozNDoxNVrOHwAj3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNjowOFrOHx6RqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwMjg3OA==", "bodyText": "The error logging level should be reserved for issues catastrophic enough to threaten the operation of openHab itself. An error in a binding shouldn't qualify for this. Please read the openHab coding guidelines for expected use of logging in bindings.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r520102878", "createdAt": "2020-11-09T20:34:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.\n+     * \n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            logger.error(\"Error on subscribe request\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd8eebeffb0d579024148baf12f76751c63e2ce"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NzA2NQ==", "bodyText": "Removed the log completely as a warning will be already logged by the BoschBridgeHandler when a LongPollingException occurs.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r522097065", "createdAt": "2020-11-12T13:16:08Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling\n+     *\n+     * Method is synchronous.\n+     * \n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            logger.error(\"Error on subscribe request\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwMjg3OA=="}, "originalCommit": {"oid": "3fd8eebeffb0d579024148baf12f76751c63e2ce"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDU2MjMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxOTo0ODowNlrOH1G9rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNDo1NVrOIDRxPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MDY3MA==", "bodyText": "Temperature, humidity, and purity should be QuantityType instead of DecimalType.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525450670", "createdAt": "2020-11-17T19:48:06Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NDgzMA==", "bodyText": "Changed it :) Hope the QuantityType<Dimensionless> is okay for humidity and purity as the channels are of type Number:Dimensionless?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525964830", "createdAt": "2020-11-18T10:10:52Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MDY3MA=="}, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwNzc3NA==", "bodyText": "@cpmeister Are the current types okay?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540307774", "createdAt": "2020-12-10T16:24:55Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.DecimalType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new DecimalType(state.temperature));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new DecimalType(state.humidity));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new DecimalType(state.purity));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ1MDY3MA=="}, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDY5MjkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDowNzowMVrOH1IXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDowMjo0MlrOH1mAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ3MzYwNg==", "bodyText": "Typo: Remove \"for\"", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525473606", "createdAt": "2020-11-17T20:07:01Z", "author": {"login": "JohannesPtaszyk"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` for of your openHAB test instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1NzQzNg==", "bodyText": "Thanks @JohannesPtaszyk :) Fixed the typo!", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525957436", "createdAt": "2020-11-18T09:59:52Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` for of your openHAB test instance.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ3MzYwNg=="}, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1OTMyNg==", "bodyText": "Thank you! Looking forward to this merge! \u263a\ufe0f", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r525959326", "createdAt": "2020-11-18T10:02:42Z", "author": {"login": "JohannesPtaszyk"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` for of your openHAB test instance.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ3MzYwNg=="}, "originalCommit": {"oid": "e3127e654952dbcec182c622b43fe15547f50bbf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ2NjgwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/.classpath", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0MjoxMVrOH2w0oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0NDo0N1rOH7KB_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTA1Nw==", "bodyText": "This file shouldn't pe part of your PR, as it is generated automatically.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185057", "createdAt": "2020-11-19T20:42:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/.classpath", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjM4Mg==", "bodyText": "Removed the file", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792382", "createdAt": "2020-11-27T21:44:47Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/.classpath", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTA1Nw=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ2NzExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/.project", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0MjoxN1rOH2w01w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0NDo0MlrOH7KB-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTExMQ==", "bodyText": "This file shouldn't pe part of your PR, as it is generated automatically.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185111", "createdAt": "2020-11-19T20:42:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/.project", "diffHunk": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjM3Ng==", "bodyText": "Removed the file", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792376", "createdAt": "2020-11-27T21:44:42Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/.project", "diffHunk": "@@ -0,0 +1,34 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTExMQ=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ3MDQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0MzoyM1rOH2w25w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToxMjowNFrOH-U4pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTYzOQ==", "bodyText": "Actually this is done automatically, when the file date of the jar in the addons folder changes.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185639", "createdAt": "2020-11-19T20:43:23Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` folder of your openHAB test instance.\n+\n+For the first time the jar is loaded automatically as a bundle.\n+If the jar is updated, your need to execute:\n+\n+    bundle:update \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+   \n+or get the ID and update the bundle using the ID:\n+\n+    bundle:list\n+    -> Get ID for \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+    bundle:update <ID>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNTk0MA==", "bodyText": "Added the information that the reload of the bundle is done automatically.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535115940", "createdAt": "2020-12-03T11:12:04Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` folder of your openHAB test instance.\n+\n+For the first time the jar is loaded automatically as a bundle.\n+If the jar is updated, your need to execute:\n+\n+    bundle:update \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+   \n+or get the ID and update the bundle using the ID:\n+\n+    bundle:list\n+    -> Get ID for \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+    bundle:update <ID>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTYzOQ=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ3MjMyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0NDowM1rOH2w4NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0NDozMFrOH7KB1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We need secured and paired connection from the openHAB binding instacne to the Bosch SHC.  \n          \n          \n            \n            We need secured and paired connection from the openHAB binding instance to the Bosch SHC.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527185972", "createdAt": "2020-11-19T20:44:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` folder of your openHAB test instance.\n+\n+For the first time the jar is loaded automatically as a bundle.\n+If the jar is updated, your need to execute:\n+\n+    bundle:update \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+   \n+or get the ID and update the bundle using the ID:\n+\n+    bundle:list\n+    -> Get ID for \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+    bundle:update <ID>\n+\n+    \n+\n+## Debugging\n+\n+To get debug output and traces of the Bosch SHC binding code\n+add the following lines into ``userdata/etc/log4j2.xml`` Loggers XML section. \n+\n+    <!-- Bosch SHC for debugging -->\n+\t<Logger level=\"TRACE\" name=\"org.openhab.binding.boschshc\"/>\n+\n+## Pairing and  Certificates\n+\n+We need secured and paired connection from the openHAB binding instacne to the Bosch SHC.  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjM0Mg==", "bodyText": "Fixed the typo", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792342", "createdAt": "2020-11-27T21:44:30Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/DEVELOPERS.md", "diffHunk": "@@ -0,0 +1,50 @@\n+# For Developers\n+\n+## Build\n+\n+To only build the Bosch SHC binding code execute\n+\n+    mvn -pl :org.openhab.binding.boschshc install\n+\n+## Execute\n+\n+After compiling a new ``org.openhab.binding.boschshc.jar`` \n+copy it into the ``addons`` folder of your openHAB test instance.\n+\n+For the first time the jar is loaded automatically as a bundle.\n+If the jar is updated, your need to execute:\n+\n+    bundle:update \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+   \n+or get the ID and update the bundle using the ID:\n+\n+    bundle:list\n+    -> Get ID for \"openHAB Add-ons :: Bundles :: BoschSHC Binding\"\n+    bundle:update <ID>\n+\n+    \n+\n+## Debugging\n+\n+To get debug output and traces of the Bosch SHC binding code\n+add the following lines into ``userdata/etc/log4j2.xml`` Loggers XML section. \n+\n+    <!-- Bosch SHC for debugging -->\n+\t<Logger level=\"TRACE\" name=\"org.openhab.binding.boschshc\"/>\n+\n+## Pairing and  Certificates\n+\n+We need secured and paired connection from the openHAB binding instacne to the Bosch SHC.  ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NTk3Mg=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ5MDIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0ODo1OFrOH2xCpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0NDowMlrOH7KBdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4ODY0Nw==", "bodyText": "This is actually the Bridge configuration. If I see correctly, your binding has no configuration at the top level.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527188647", "createdAt": "2020-11-19T20:48:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjI0NQ==", "bodyText": "Changed the text", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792245", "createdAt": "2020-11-27T21:44:02Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4ODY0Nw=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTUwNDA3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1MjozN1rOH2xK0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0NDoxNFrOH7KBlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MDczNg==", "bodyText": "Is the password parameter missing?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527190736", "createdAt": "2020-11-19T20:52:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration\n+\n+You need to provide the IP address and the system password of your Bosch Smart Home Controller.\n+The IP address of the controller is visible in the Bosch Smart Home Mobile App (More -> System -> Smart Home Controller) or in your network router UI.\n+The system password is set by you during your initial registration steps in the _Bosch Smart Home App_.\n+\n+A keystore file with a self signed certificate is created automatically.\n+This certificate is used for pairing between the Bridge and the Bosch SHC.\n+\n+*Press and hold the Bosch Smart Home Controller Bridge button until the LED starts blinking after you save your settings for pairing*.\n+\n+## Getting the device IDs\n+\n+Bosch IDs for found devices are displayed in the openHAB log on bootup (`OPENHAB_FOLDER/userdata/logs/openhab.log`)\n+\n+Example:\n+\n+```\n+2020-08-11 12:42:49.490 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.495 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_1\n+2020-08-11 12:42:49.497 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-VentilationService- id=ventilationService\n+2020-08-11 12:42:49.498 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Gro\u00dfes Fenster id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.501 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-IntrusionDetectionSystem- id=intrusionDetectionSystem\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung Haus id=hdm:ICom:819410185:HC1\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_6\n+2020-08-11 12:42:49.504 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=PhilipsHueBridgeManager id=hdm:PhilipsHueBridge:PhilipsHueBridgeManager\n+2020-08-11 12:42:49.505 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.506 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.507 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Central Heating id=hdm:ICom:819410185\n+```\n+\n+## Thing Configuration\n+\n+You define your Bosch devices by adding them either to a `.things` file in your `$OPENHAB_CONF/things` folder like this:\n+\n+```\n+Bridge boschshc:shc:1 [ ipAddress=\"192.168.x.y\" ] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjI3Ng==", "bodyText": "Yes, it was, added it :)", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792276", "createdAt": "2020-11-27T21:44:14Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration\n+\n+You need to provide the IP address and the system password of your Bosch Smart Home Controller.\n+The IP address of the controller is visible in the Bosch Smart Home Mobile App (More -> System -> Smart Home Controller) or in your network router UI.\n+The system password is set by you during your initial registration steps in the _Bosch Smart Home App_.\n+\n+A keystore file with a self signed certificate is created automatically.\n+This certificate is used for pairing between the Bridge and the Bosch SHC.\n+\n+*Press and hold the Bosch Smart Home Controller Bridge button until the LED starts blinking after you save your settings for pairing*.\n+\n+## Getting the device IDs\n+\n+Bosch IDs for found devices are displayed in the openHAB log on bootup (`OPENHAB_FOLDER/userdata/logs/openhab.log`)\n+\n+Example:\n+\n+```\n+2020-08-11 12:42:49.490 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.495 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_1\n+2020-08-11 12:42:49.497 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-VentilationService- id=ventilationService\n+2020-08-11 12:42:49.498 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Gro\u00dfes Fenster id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.501 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-IntrusionDetectionSystem- id=intrusionDetectionSystem\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung Haus id=hdm:ICom:819410185:HC1\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_6\n+2020-08-11 12:42:49.504 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=PhilipsHueBridgeManager id=hdm:PhilipsHueBridge:PhilipsHueBridgeManager\n+2020-08-11 12:42:49.505 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.506 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.507 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Central Heating id=hdm:ICom:819410185\n+```\n+\n+## Thing Configuration\n+\n+You define your Bosch devices by adding them either to a `.things` file in your `$OPENHAB_CONF/things` folder like this:\n+\n+```\n+Bridge boschshc:shc:1 [ ipAddress=\"192.168.x.y\" ] {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MDczNg=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTUwNDg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1Mjo1N1rOH2xLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToxNTo1NFrOH-VHtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MDg4Mw==", "bodyText": "Can you express this more abstract, as PaperUI will be removed in OH3? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527190883", "createdAt": "2020-11-19T20:52:57Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration\n+\n+You need to provide the IP address and the system password of your Bosch Smart Home Controller.\n+The IP address of the controller is visible in the Bosch Smart Home Mobile App (More -> System -> Smart Home Controller) or in your network router UI.\n+The system password is set by you during your initial registration steps in the _Bosch Smart Home App_.\n+\n+A keystore file with a self signed certificate is created automatically.\n+This certificate is used for pairing between the Bridge and the Bosch SHC.\n+\n+*Press and hold the Bosch Smart Home Controller Bridge button until the LED starts blinking after you save your settings for pairing*.\n+\n+## Getting the device IDs\n+\n+Bosch IDs for found devices are displayed in the openHAB log on bootup (`OPENHAB_FOLDER/userdata/logs/openhab.log`)\n+\n+Example:\n+\n+```\n+2020-08-11 12:42:49.490 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.495 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_1\n+2020-08-11 12:42:49.497 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-VentilationService- id=ventilationService\n+2020-08-11 12:42:49.498 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Gro\u00dfes Fenster id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.501 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-IntrusionDetectionSystem- id=intrusionDetectionSystem\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung Haus id=hdm:ICom:819410185:HC1\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_6\n+2020-08-11 12:42:49.504 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=PhilipsHueBridgeManager id=hdm:PhilipsHueBridge:PhilipsHueBridgeManager\n+2020-08-11 12:42:49.505 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.506 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.507 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Central Heating id=hdm:ICom:819410185\n+```\n+\n+## Thing Configuration\n+\n+You define your Bosch devices by adding them either to a `.things` file in your `$OPENHAB_CONF/things` folder like this:\n+\n+```\n+Bridge boschshc:shc:1 [ ipAddress=\"192.168.x.y\" ] {\n+  Thing in-wall-switch bathroom \"Bathroom\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch bedroom \"Bedroom\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch kitchen \"Kitchen\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch corridor \"Corridor\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch livingroom \"Living Room\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+\n+  Thing in-wall-switch coffeemachine \"Coffee Machine\" [ id=\"hdm:HomeMaticIP:3014F711A0000XXXXXXXXXXXX\" ]\n+\n+  Thing twinguard      tg-corridor    \"Twinguard Smoke Detector\" [ id=\"hdm:ZigBee:000d6f000XXXXXXX\" ]\n+  Thing window-contact window-kitchen \"Window Kitchen\"           [ id=\"hdm:HomeMaticIP:3014F711A00000XXXXXXXXXX\" ]\n+  Thing window-contact entrance       \"Entrance door\"            [ id=\"hdm:HomeMaticIP:3014F711A00000XXXXXXXXXX\" ]\n+\n+  Thing motion-detector  motion-corridor \"Bewegungsmelder\"      [ id=\"hdm:ZigBee:000d6f000XXXXXXX\" ]\n+}\n+```\n+\n+Or by adding them via PaperUI -> Configuration -> Things -> \"+\" -> Bosch Smart Home Binding.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExOTc5Ng==", "bodyText": "Used UI instead of PaperUI and set the correct menu path.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535119796", "createdAt": "2020-12-03T11:15:54Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/README.md", "diffHunk": "@@ -0,0 +1,170 @@\n+# BoschSHC Binding\n+\n+Binding for the Bosch Smart Home Controller.\n+\n+- [BoschSHC Binding](#boschshc-binding)\n+  - [Supported Things](#supported-things)\n+    - [Bosch In-Wall switches & Bosch Smart Plugs](#bosch-in-wall-switches--bosch-smart-plugs)\n+    - [Bosch TwinGuard smoke detector](#bosch-twinguard-smoke-detector)\n+    - [Bosch Window/Door contacts](#bosch-windowdoor-contacts)\n+    - [Bosch Motion Detector](#bosch-motion-detector)\n+    - [Bosch Shutter Control in-wall](#bosch-shutter-control-in-wall)\n+    - [Bosch Thermostat](#bosch-thermostat)\n+    - [Bosch Climate Control](#bosch-climate-control)\n+  - [Limitations](#limitations)\n+  - [Discovery](#discovery)\n+  - [Binding Configuration](#binding-configuration)\n+  - [Getting the device IDs](#getting-the-device-ids)\n+  - [Thing Configuration](#thing-configuration)\n+  - [Item Configuration](#item-configuration)\n+\n+## Supported Things\n+\n+### Bosch In-Wall switches & Bosch Smart Plugs\n+\n+**Thing Type ID**: `in-wall-switch`\n+\n+| Channel Type ID    | Item Type     | Description                                  |\n+|--------------------|---------------|----------------------------------------------|\n+| power-switch       | Switch        | Current state of the switch.                 |\n+| power-consumption  | Number:Power  | Current power consumption (W) of the device. |\n+| energy-consumption | Number:Energy | Energy consumption of the device.            |\n+\n+### Bosch TwinGuard smoke detector\n+\n+**Thing Type ID**: `twinguard`\n+\n+| Channel Type ID    | Item Type            | Description                                                                                       |\n+|--------------------|----------------------|---------------------------------------------------------------------------------------------------|\n+| temperature        | Number:Temperature   | Current measured temperature.                                                                     |\n+| temperature-rating | String               | Rating of the currently measured temperature.                                                     |\n+| humidity           | Number:Dimensionless | Current measured humidity.                                                                        |\n+| humidity-rating    | String               | Rating of current measured humidity.                                                              |\n+| purity             | Number:Dimensionless | Purity of the air (ppm). Range from 500 to 5500 ppm. A higher value indicates a higher pollution. |\n+| purity-rating      | String               | Rating of current measured purity.                                                                |\n+| air-description    | String               | Overall description of the air quality.                                                           |\n+| combined-rating    | String               | Combined rating of the air quality.                                                               |\n+\n+### Bosch Window/Door contacts\n+\n+**Thing Type ID**: `window-contact`\n+\n+| Channel Type ID | Item Type | Description                  |\n+|-----------------|-----------|------------------------------|\n+| contact         | Contact   | Contact state of the device. |\n+\n+### Bosch Motion Detector\n+\n+**Thing Type ID**: `motion-detector`\n+\n+| Channel Type ID | Item Type | Description                    |\n+|-----------------|-----------|--------------------------------|\n+| latest-motion   | DateTime  | The date of the latest motion. |\n+\n+### Bosch Shutter Control in-wall\n+\n+**Thing Type ID**: `shutter-control`\n+\n+| Channel Type ID | Item Type     | Description                              |\n+|-----------------|---------------|------------------------------------------|\n+| level           | Rollershutter | Current open ratio (0 to 100, Step 0.5). |\n+\n+### Bosch Thermostat\n+\n+**Thing Type ID**: `thermostat`\n+\n+| Channel Type ID       | Item Type            | Description                                    |\n+|-----------------------|----------------------|------------------------------------------------|\n+| temperature           | Number:Temperature   | Current measured temperature.                  |\n+| valve-tappet-position | Number:Dimensionless | Current open ratio of valve tappet (0 to 100). |\n+\n+### Bosch Climate Control\n+\n+**Thing Type ID**: `climate-control`\n+\n+| Channel Type ID      | Item Type          | Description                   |\n+|----------------------|--------------------|-------------------------------|\n+| temperature          | Number:Temperature | Current measured temperature. |\n+| setpoint-temperature | Number:Temperature | Desired temperature.          |\n+\n+## Limitations\n+\n+- Discovery of Things\n+- Discovery of Bridge\n+\n+## Discovery\n+\n+Configuration via configuration files or UI (see below).\n+\n+## Binding Configuration\n+\n+You need to provide the IP address and the system password of your Bosch Smart Home Controller.\n+The IP address of the controller is visible in the Bosch Smart Home Mobile App (More -> System -> Smart Home Controller) or in your network router UI.\n+The system password is set by you during your initial registration steps in the _Bosch Smart Home App_.\n+\n+A keystore file with a self signed certificate is created automatically.\n+This certificate is used for pairing between the Bridge and the Bosch SHC.\n+\n+*Press and hold the Bosch Smart Home Controller Bridge button until the LED starts blinking after you save your settings for pairing*.\n+\n+## Getting the device IDs\n+\n+Bosch IDs for found devices are displayed in the openHAB log on bootup (`OPENHAB_FOLDER/userdata/logs/openhab.log`)\n+\n+Example:\n+\n+```\n+2020-08-11 12:42:49.490 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.495 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_1\n+2020-08-11 12:42:49.497 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-VentilationService- id=ventilationService\n+2020-08-11 12:42:49.498 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Gro\u00dfes Fenster id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.501 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-IntrusionDetectionSystem- id=intrusionDetectionSystem\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.502 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Heizung Haus id=hdm:ICom:819410185:HC1\n+2020-08-11 12:42:49.503 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=-RoomClimateControl- id=roomClimateControl_hz_6\n+2020-08-11 12:42:49.504 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=PhilipsHueBridgeManager id=hdm:PhilipsHueBridge:PhilipsHueBridgeManager\n+2020-08-11 12:42:49.505 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.506 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Rollladen id=hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\n+2020-08-11 12:42:49.507 [INFO ] [chshc.internal.BoschSHCBridgeHandler] - Found device: name=Central Heating id=hdm:ICom:819410185\n+```\n+\n+## Thing Configuration\n+\n+You define your Bosch devices by adding them either to a `.things` file in your `$OPENHAB_CONF/things` folder like this:\n+\n+```\n+Bridge boschshc:shc:1 [ ipAddress=\"192.168.x.y\" ] {\n+  Thing in-wall-switch bathroom \"Bathroom\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch bedroom \"Bedroom\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch kitchen \"Kitchen\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch corridor \"Corridor\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+  Thing in-wall-switch livingroom \"Living Room\" [ id=\"hdm:HomeMaticIP:3014F711A000XXXXXXXXXXXX\" ]\n+\n+  Thing in-wall-switch coffeemachine \"Coffee Machine\" [ id=\"hdm:HomeMaticIP:3014F711A0000XXXXXXXXXXXX\" ]\n+\n+  Thing twinguard      tg-corridor    \"Twinguard Smoke Detector\" [ id=\"hdm:ZigBee:000d6f000XXXXXXX\" ]\n+  Thing window-contact window-kitchen \"Window Kitchen\"           [ id=\"hdm:HomeMaticIP:3014F711A00000XXXXXXXXXX\" ]\n+  Thing window-contact entrance       \"Entrance door\"            [ id=\"hdm:HomeMaticIP:3014F711A00000XXXXXXXXXX\" ]\n+\n+  Thing motion-detector  motion-corridor \"Bewegungsmelder\"      [ id=\"hdm:ZigBee:000d6f000XXXXXXX\" ]\n+}\n+```\n+\n+Or by adding them via PaperUI -> Configuration -> Things -> \"+\" -> Bosch Smart Home Binding.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MDg4Mw=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTUwNzY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/pom.xml", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo1Mzo1MVrOH2xNLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwMjozNDoxMFrOIQDlIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA==", "bodyText": "Can you add these dependencies to the NOTICE file?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527191340", "createdAt": "2020-11-19T20:53:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc2OTQxMw==", "bodyText": "@GerdZanker Could you add an info about it in the NOTICE file? And is it really necessary that we include both org.bountycastle dependencies?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531769413", "createdAt": "2020-11-27T20:17:41Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjAzODg1MA==", "bodyText": "I think it should be sufficient to include one.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r532038850", "createdAt": "2020-11-28T13:12:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDY1NA==", "bodyText": "I think it is necessary to include both as compile dependencies since the intent is for those jars to be shaded into the binding jar. Transient dependencies are not automatically shaded alongside a compile dependency so they have to be manually specified. If you exclude one of those dependencies then you will be forced to include the missing dependency in the feature.xml instead. Since I don't see that these dependencies are used by any other bindings then you should include them as compile dependencies.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r532100654", "createdAt": "2020-11-28T20:03:23Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDk3OA==", "bodyText": "I meant the occurrence in NOTICE. I'm not sure if @coeing meant the pom.xml or NOTICE.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r532100978", "createdAt": "2020-11-28T20:06:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMTUxNw==", "bodyText": "Well yes, I do agree that these should added to the NOTICE. Just to be safe, include both dependencies in the NOTICE file.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r532101517", "createdAt": "2020-11-28T20:11:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMzEyNQ==", "bodyText": "Thanks for the info to include both dependencies. Is there a documentation which information of the dependencies should go into the NOTICE file?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535123125", "createdAt": "2020-12-03T11:19:06Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcwNjc4Nw==", "bodyText": "Is there a documentation which information of the dependencies should go into the NOTICE file?\n\nNot that I'm aware of, but you can look at other bindings as an example.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553706787", "createdAt": "2021-01-08T02:34:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/pom.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.openhab.addons.bundles</groupId>\n+    <artifactId>org.openhab.addons.reactor.bundles</artifactId>\n+    <version>3.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>org.openhab.binding.boschshc</artifactId>\n+\n+  <name>openHAB Add-ons :: Bundles :: BoschSHC Binding</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcpkix-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.bouncycastle</groupId>\n+      <artifactId>bcprov-jdk15on</artifactId>\n+      <version>1.54</version>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE5MTM0MA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTU2NzM1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMToxMDoyNFrOH2xxBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0NTozMlrOH7KCqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwMDUxNw==", "bodyText": "Are you logging the stack trace by intention? Same for below.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527200517", "createdAt": "2020-11-19T21:10:24Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjU1Mg==", "bodyText": "Only logging the error message now", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792552", "createdAt": "2020-11-27T21:45:32Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,388 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwMDUxNw=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTU3Njg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMToxMzowMFrOH2x2sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0Mzo0NVrOH7KBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwMTk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    signer.update(\"Hello OpenHAB\".getBytes(StandardCharsets.UTF_8));\n          \n          \n            \n                    signer.update(\"Hello openHAB\".getBytes(StandardCharsets.UTF_8));", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527201968", "createdAt": "2020-11-19T21:13:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjE4Nw==", "bodyText": "Fixed typo.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792187", "createdAt": "2020-11-27T21:43:45Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {\n+        final String dirName = \"CN=\" + getBoschSHCId() + \", O=openHAB, L=None, ST=None, C=None\";\n+        logger.debug(\"Creating a new self signed certificate: {}\", dirName);\n+        final Instant now = Instant.now();\n+        final Date notBefore = Date.from(now);\n+        final Date notAfter = Date.from(now.plus(Duration.ofDays(365 * 10)));\n+        X500Name name = new X500Name(dirName);\n+\n+        // create the certificate\n+        X509v3CertificateBuilder certificateBuilder = new JcaX509v3CertificateBuilder(name, // Issuer\n+                BigInteger.valueOf(now.toEpochMilli()), notBefore, notAfter, name, // Subject\n+                keyPair.getPublic() // Public key to be associated with the certificate\n+        );\n+        // and sign it\n+        ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSA\").build(keyPair.getPrivate());\n+        return new JcaX509CertificateConverter().setProvider(new BouncyCastleProvider())\n+                .getCertificate(certificateBuilder.build(contentSigner));\n+    }\n+\n+    private KeyStore createKeyStore(String keystore, String keystorePassword)\n+            throws IOException, OperatorCreationException, GeneralSecurityException {\n+        // create a new keystore\n+        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+        keyStore.load(null, null);\n+\n+        // create new key pair for BoschSHC binding\n+        logger.debug(\"Creating new keypair\");\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n+        kpg.initialize(2048);\n+        KeyPair keyPair = kpg.generateKeyPair();\n+\n+        Security.addProvider(new BouncyCastleProvider());\n+        Signature signer = Signature.getInstance(\"SHA256withRSA\", \"BC\");\n+        signer.initSign(keyPair.getPrivate());\n+        signer.update(\"Hello OpenHAB\".getBytes(StandardCharsets.UTF_8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwMTk2OA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTU5NTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMToxODoxN1rOH2yCIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTo1NDo1MlrOH-Xg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwNDg5Nw==", "bodyText": "Does that mean send() will block for 20 sec regularly? If so, you could take a look at Jetty's async API to not block the framework's thread pool that long. See https://www.eclipse.org/jetty/documentation/current/http-client-api.html#http-client-async", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527204897", "createdAt": "2020-11-19T21:18:17Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling.\n+     * \n+     * @param httpClient Http client to use for sending subscription request\n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            throw new LongPollingFailedException(\"Error on subscribe request\", e);\n+        }\n+    }\n+\n+    private void executeLongPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        scheduler.execute(() -> this.longPoll(httpClient, subscriptionId));\n+    }\n+\n+    /**\n+     * Start long polling the home controller. Once a long poll resolves, a new one is started.\n+     */\n+    private void longPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        logger.debug(\"Sending long poll request\");\n+\n+        JsonRpcRequest requestContent = new JsonRpcRequest(\"2.0\", \"RE/longPoll\", new String[] { subscriptionId, \"20\" });\n+        String url = httpClient.createUrl(\"remote/json-rpc\");\n+        Request request = httpClient.createRequest(url, POST, requestContent);\n+\n+        // Long polling responds after 20 seconds with an empty response if no update has happened\n+        request.timeout(30, TimeUnit.SECONDS);\n+\n+        this.request = request;\n+        try {\n+            ContentResponse contentResponse = request.send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE1OTAyMQ==", "bodyText": "@fwolter Thanks for the report. The link to the documentation is broken. But I already used Jetty asynchronous, so I changed the long polling requests to be async instead of synchronous to not block a thread.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535159021", "createdAt": "2020-12-03T11:54:52Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling.\n+     * \n+     * @param httpClient Http client to use for sending subscription request\n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            throw new LongPollingFailedException(\"Error on subscribe request\", e);\n+        }\n+    }\n+\n+    private void executeLongPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        scheduler.execute(() -> this.longPoll(httpClient, subscriptionId));\n+    }\n+\n+    /**\n+     * Start long polling the home controller. Once a long poll resolves, a new one is started.\n+     */\n+    private void longPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        logger.debug(\"Sending long poll request\");\n+\n+        JsonRpcRequest requestContent = new JsonRpcRequest(\"2.0\", \"RE/longPoll\", new String[] { subscriptionId, \"20\" });\n+        String url = httpClient.createUrl(\"remote/json-rpc\");\n+        Request request = httpClient.createRequest(url, POST, requestContent);\n+\n+        // Long polling responds after 20 seconds with an empty response if no update has happened\n+        request.timeout(30, TimeUnit.SECONDS);\n+\n+        this.request = request;\n+        try {\n+            ContentResponse contentResponse = request.send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIwNDg5Nw=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzI5MDA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNjo1NDo0N1rOH3CmJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0MzozMVrOH7KBIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ3NjI2Mw==", "bodyText": "Better only use the OH units. Same for the others.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, AbstractUnit.ONE));\n          \n          \n            \n                    updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, SmartHomeUnits.ONE));", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527476263", "createdAt": "2020-11-20T06:54:47Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+import tec.uom.se.AbstractUnit;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, AbstractUnit.ONE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjE2MQ==", "bodyText": "Changed the types", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792161", "createdAt": "2020-11-27T21:43:31Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonSyntaxException;\n+\n+import tec.uom.se.AbstractUnit;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, AbstractUnit.ONE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ3NjI2Mw=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzMxNzE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzowNTo1MlrOH3C1kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0MzoxOFrOH7KBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MDIwOA==", "bodyText": "Is the supported-bridge-type-refs tag missing?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527480208", "createdAt": "2020-11-20T07:05:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjEzMg==", "bodyText": "Added the missing tags.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792132", "createdAt": "2020-11-27T21:43:18Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MDIwOA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzMzNDg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzoxMjozOFrOH3C_hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyNjo1MVrOIDR5PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mjc1OA==", "bodyText": "How would you visualize the motion in a sitemap? Many motion sensors have a Contact Channel, which you can map to the motion icon easily.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527482758", "createdAt": "2020-11-20T07:12:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NDY1Mw==", "bodyText": "The motion detector reports the DateTime of the latest detected motion. Maybe what you think about is the WindowContactHandler? That one has a Contact channel (called contact :) ).", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535244653", "createdAt": "2020-12-03T13:53:50Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mjc1OA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg5NzM0NQ==", "bodyText": "I'm still wondering how you would control e.g. the motion icon without a rule. But that's only a functional issue, which is up to you.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535897345", "createdAt": "2020-12-04T07:44:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mjc1OA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMwOTgyMA==", "bodyText": "Okay, I like to keep it like this for now. I like to forward the data from the Bosch controller as precise as it is for now. We might add some additional channels with custom logic if needed.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540309820", "createdAt": "2020-12-10T16:26:51Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,246 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"boschshc\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<!-- Bosch Bridge -->\n+\t<bridge-type id=\"shc\">\n+\t\t<label>Smart Home Controller</label>\n+\t\t<description>The Bosch SHC Bridge representing the Bosch Smart Home Controller.</description>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:bridge\"/>\n+\t</bridge-type>\n+\n+\t<thing-type id=\"in-wall-switch\">\n+\t\t<label>In-wall Switch</label>\n+\t\t<description>Bosch In-wall switch for light control</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"power-switch\" typeId=\"system.power\"/>\n+\t\t\t<channel id=\"power-consumption\" typeId=\"power-consumption\"/>\n+\t\t\t<channel id=\"energy-consumption\" typeId=\"energy-consumption\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"twinguard\">\n+\t\t<label>TwinGuard</label>\n+\t\t<description>Bosch TwinGuard environmental sensor</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"temperature-rating\" typeId=\"temperature-rating\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"humidity\"/>\n+\t\t\t<channel id=\"humidity-rating\" typeId=\"humidity-rating\"/>\n+\t\t\t<channel id=\"purity\" typeId=\"purity\"/>\n+\t\t\t<channel id=\"air-description\" typeId=\"air-description\"/>\n+\t\t\t<channel id=\"purity-rating\" typeId=\"purity-rating\"/>\n+\t\t\t<channel id=\"combined-rating\" typeId=\"combined-rating\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"window-contact\">\n+\t\t<label>Window/Door Contact</label>\n+\t\t<description>Bosch Contact for windows and doors</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"contact\" typeId=\"contact\"/>\n+\t\t</channels>\n+\n+\t\t<config-description-ref uri=\"thing-type:boschshc:device\"/>\n+\n+\t</thing-type>\n+\n+\t<thing-type id=\"motion-detector\">\n+\t\t<label>Motion Detector</label>\n+\t\t<description>Bosch Motion Detector</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"latest-motion\" typeId=\"latest-motion\"/>\n+\t\t</channels>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4Mjc1OA=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODM3Mzg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1NTo1NlrOH3Mxtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QyMTo0MzowNVrOH7KA6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzA2Mg==", "bodyText": "The IOException is never thrown.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r527643062", "createdAt": "2020-11-20T11:55:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTc5MjEwNQ==", "bodyText": "Removed it.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r531792105", "createdAt": "2020-11-27T21:43:05Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSslUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Paths;\n+import java.security.GeneralSecurityException;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.KeyStore;\n+import java.security.Security;\n+import java.security.Signature;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.Date;\n+\n+import org.bouncycastle.asn1.x500.X500Name;\n+import org.bouncycastle.cert.X509v3CertificateBuilder;\n+import org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n+import org.bouncycastle.cert.jcajce.JcaX509v3CertificateBuilder;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.bouncycastle.operator.ContentSigner;\n+import org.bouncycastle.operator.OperatorCreationException;\n+import org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.core.OpenHAB;\n+import org.openhab.core.id.InstanceUUID;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SSL context utility.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschSslUtil {\n+\n+    private static final String OSS_OPENHAB_BINDING = \"oss_openhab_binding\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSslUtil.class);\n+\n+    private String keystorePath;\n+    private String keystorePassword;\n+\n+    public static String getBoschSHCId() {\n+        return OSS_OPENHAB_BINDING + \"_\" + InstanceUUID.get();\n+    }\n+\n+    public BoschSslUtil(String keystorePassword) {\n+        this.keystorePath = Paths.get(OpenHAB.getUserDataFolder(), \"etc\", getBoschSHCId() + \".jks\").toString();\n+        this.keystorePassword = keystorePassword;\n+    }\n+\n+    public SslContextFactory getSslContextFactory() throws PairingFailedException {\n+        // Instantiate and configure the SslContextFactory\n+        SslContextFactory sslContextFactory = new SslContextFactory(true); // Accept all certificates\n+\n+        // during pairing the cert from this keystore is accessed by HTTP client via name\n+        sslContextFactory.setKeyStore(getKeyStoreAndCreateIfNecessary());\n+\n+        // Keystore for managing the keys that have been used to pair with the SHC\n+        // https://www.eclipse.org/jetty/javadoc/9.4.12.v20180830/org/eclipse/jetty/util/ssl/SslContextFactory.html\n+        sslContextFactory.setKeyStorePath(keystorePath);\n+        sslContextFactory.setKeyStorePassword(keystorePassword);\n+\n+        // Bosch is using a self signed certificate\n+        sslContextFactory.setTrustAll(true);\n+        sslContextFactory.setValidateCerts(false);\n+        sslContextFactory.setValidatePeerCerts(false);\n+        sslContextFactory.setEndpointIdentificationAlgorithm(null);\n+\n+        return sslContextFactory;\n+    }\n+\n+    public KeyStore getKeyStoreAndCreateIfNecessary() throws PairingFailedException {\n+        try {\n+            File file = new File(keystorePath);\n+            if (!file.exists()) {\n+                // create new keystore\n+                logger.info(\"Creating new keystore {} because it doesn't exist.\", keystorePath);\n+                return createKeyStore(keystorePath, keystorePassword);\n+            } else {\n+                // load keystore as a first check\n+                KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n+                keyStore.load(new FileInputStream(file), keystorePassword.toCharArray());\n+                logger.debug(\"Using existing keystore {}\", keystorePath);\n+                return keyStore;\n+            }\n+        } catch (OperatorCreationException | GeneralSecurityException | IOException e) {\n+            logger.debug(\"Exception during keystore creation {}\", e.getMessage());\n+            throw new PairingFailedException(\"Can not create or load keystore file: \" + keystorePath\n+                    + \". Check path, write access and JKS content.\", e);\n+        }\n+    }\n+\n+    private X509Certificate generateClientCertificate(KeyPair keyPair)\n+            throws GeneralSecurityException, IOException, OperatorCreationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzA2Mg=="}, "originalCommit": {"oid": "01a607ac5fd1d78dbde98496248e63d79751f940"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjM3NTk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/.gitignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzoyMToyNVrOH_D8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjoyODozMVrOIDR_7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4Njg3OA==", "bodyText": "These are excluded at project level and don't need to be excluded in your bundle.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535886878", "createdAt": "2020-12-04T07:21:25Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/.gitignore", "diffHunk": "@@ -0,0 +1,2 @@\n+/.classpath\n+/.project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMTUzNQ==", "bodyText": "\ud83d\udc4d Alright, removed the .gitignore file for the bundle", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540311535", "createdAt": "2020-12-10T16:28:31Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/.gitignore", "diffHunk": "@@ -0,0 +1,2 @@\n+/.classpath\n+/.project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg4Njg3OA=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjQ3NjI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNzo1MjoxMlrOH_Ey7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjozMTozOVrOIDSJYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMDkxMA==", "bodyText": "Constants should be all upper case.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r535900910", "createdAt": "2020-12-04T07:52:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_CLIMATE_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_INWALL_SWITCH;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_MOTION_DETECTOR;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHC;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHUTTER_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_THERMOSTAT;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_TWINGUARD;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_WINDOW_CONTACT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.devices.climatecontrol.ClimateControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.BoschInWallSwitchHandler;\n+import org.openhab.binding.boschshc.internal.devices.motiondetector.MotionDetectorHandler;\n+import org.openhab.binding.boschshc.internal.devices.shuttercontrol.ShutterControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.thermostat.ThermostatHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.BoschTwinguardHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.WindowContactHandler;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link BoschSHCHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - Added Shutter Control and ThermostatHandler; refactored handler mapping\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.boschshc\", service = ThingHandlerFactory.class)\n+public class BoschSHCHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static class ThingTypeHandlerMapping {\n+        public ThingTypeUID thingTypeUID;\n+        public Function<Thing, BaseThingHandler> handlerSupplier;\n+\n+        public ThingTypeHandlerMapping(ThingTypeUID thingTypeUID, Function<Thing, BaseThingHandler> handlerSupplier) {\n+            this.thingTypeUID = thingTypeUID;\n+            this.handlerSupplier = handlerSupplier;\n+        }\n+    }\n+\n+    private static final Collection<ThingTypeHandlerMapping> supportedThingTypes = Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMxMzk1NQ==", "bodyText": "Renamed the field.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540313955", "createdAt": "2020-12-10T16:31:39Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/BoschSHCHandlerFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_CLIMATE_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_INWALL_SWITCH;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_MOTION_DETECTOR;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHC;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_SHUTTER_CONTROL;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_THERMOSTAT;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_TWINGUARD;\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.THING_TYPE_WINDOW_CONTACT;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.function.Function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.bridge.BoschSHCBridgeHandler;\n+import org.openhab.binding.boschshc.internal.devices.climatecontrol.ClimateControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.BoschInWallSwitchHandler;\n+import org.openhab.binding.boschshc.internal.devices.motiondetector.MotionDetectorHandler;\n+import org.openhab.binding.boschshc.internal.devices.shuttercontrol.ShutterControlHandler;\n+import org.openhab.binding.boschshc.internal.devices.thermostat.ThermostatHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.BoschTwinguardHandler;\n+import org.openhab.binding.boschshc.internal.devices.windowcontact.WindowContactHandler;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * The {@link BoschSHCHandlerFactory} is responsible for creating things and\n+ * thing handlers.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Christian Oeing - Added Shutter Control and ThermostatHandler; refactored handler mapping\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.boschshc\", service = ThingHandlerFactory.class)\n+public class BoschSHCHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static class ThingTypeHandlerMapping {\n+        public ThingTypeUID thingTypeUID;\n+        public Function<Thing, BaseThingHandler> handlerSupplier;\n+\n+        public ThingTypeHandlerMapping(ThingTypeUID thingTypeUID, Function<Thing, BaseThingHandler> handlerSupplier) {\n+            this.thingTypeUID = thingTypeUID;\n+            this.handlerSupplier = handlerSupplier;\n+        }\n+    }\n+\n+    private static final Collection<ThingTypeHandlerMapping> supportedThingTypes = Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTkwMDkxMA=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njc3MzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoxMzoxOVrOIA_EgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDozNTo0NVrOIEL_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNDI1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));\n          \n          \n            \n                    this.registerService(this.powerSwitchService, this::updateChannels, List.of(CHANNEL_POWER_SWITCH));", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537904256", "createdAt": "2020-12-07T23:13:19Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import javax.measure.quantity.Energy;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private final PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyMjQ3OA==", "bodyText": "I changed Arrays.asList to List.of in several places. Is List.of always preferred?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540322478", "createdAt": "2020-12-10T16:40:37Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import javax.measure.quantity.Energy;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private final PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNDI1Ng=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2MTU5OA==", "bodyText": "The change increases readability of the code. So I would prefer it if possible.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541261598", "createdAt": "2020-12-11T20:35:45Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/inwallswitch/BoschInWallSwitchHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.inwallswitch;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import java.util.Arrays;\n+\n+import javax.measure.quantity.Energy;\n+import javax.measure.quantity.Power;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.inwallswitch.dto.PowerMeterState;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchService;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.PowerSwitchState;\n+import org.openhab.binding.boschshc.internal.services.powerswitch.dto.PowerSwitchServiceState;\n+import org.openhab.core.library.types.OnOffType;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SmartHomeUnits;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * Represents Bosch in-wall switches.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschInWallSwitchHandler extends BoschSHCHandler {\n+\n+    private final PowerSwitchService powerSwitchService;\n+\n+    public BoschInWallSwitchHandler(Thing thing) {\n+        super(thing);\n+        this.powerSwitchService = new PowerSwitchService();\n+    }\n+\n+    @Override\n+    protected void initializeServices() throws BoschSHCException {\n+        super.initializeServices();\n+\n+        this.registerService(this.powerSwitchService, this::updateChannels, Arrays.asList(CHANNEL_POWER_SWITCH));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNDI1Ng=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njc4OTM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoxNzo1NFrOIA_NMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1ODo1NlrOIDTjjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNjQ4MQ==", "bodyText": "You need to handle the syntax exception that gson throws here.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537906481", "createdAt": "2020-12-07T23:17:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        @Nullable\n+        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNzAzOA==", "bodyText": "Handling it now the same way as an empty response.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540337038", "createdAt": "2020-12-10T16:58:56Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        @Nullable\n+        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNjQ4MQ=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njc5NzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMDowMlrOIA_RZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzo0OToyOFrOIDV1GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzU1Nw==", "bodyText": "I wouldn't consider this a proper handling of the InterruptedException. You need to either throw another exception or rethrow the InterruptedException.\nAn InterruptedException typically means that the interrupter wants the thread to stop what it is doing and shut down. Handling the InterruptedException here would cause code higher up the stack to continue running normally, which is exactly the opposite of what the interrupter wants to happen.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537907557", "createdAt": "2020-12-07T23:20:02Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM3NDI5Ng==", "bodyText": "I am throwing the InterruptedException now instead of catching it, so it can be handled by the callers. In general the status of the thing will change to Offline with the exception message in the status message. In my opinion this should be appropriate for those very rare cases. If not, please give me a hint how a better handling could look like :)", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540374296", "createdAt": "2020-12-10T17:49:28Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzU1Nw=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njc5ODYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMDozMVrOIA_SMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMDozMVrOIA_SMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwNzc2MQ==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537907761", "createdAt": "2020-12-07T23:20:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjgwMzQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMTo1NFrOIA_U4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo0OTo0NFrOIDTHjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwODQ1MQ==", "bodyText": "super.dispose() should typically be called last.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537908451", "createdAt": "2020-12-07T23:21:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMyOTg3MA==", "bodyText": "Moved the call to the end of the dispose() function.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540329870", "createdAt": "2020-12-10T16:49:44Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwODQ1MQ=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjgwNTYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMjoyNFrOIA_V-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNjo1MDowMVrOIDTIQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwODcyOQ==", "bodyText": "It would be useful for the user if you included the exception message in the status.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537908729", "createdAt": "2020-12-07T23:22:24Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzMDA1MQ==", "bodyText": "Added the exception message to the status message.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r540330051", "createdAt": "2020-12-10T16:50:01Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwODcyOQ=="}, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjgxMjg2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMzoyMlrOIA_aOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyMzoyMlrOIA_aOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkwOTgxNg==", "bodyText": "same issue as earlier.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537909816", "createdAt": "2020-12-07T23:23:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed: {}\", e.getMessage());\n+                return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjgyNjAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyNDo1MFrOIA_hww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzoyNDo1MFrOIA_hww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxMTc0Nw==", "bodyText": "same here, if I missed any others please take a look and try to address them.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r537911747", "createdAt": "2020-12-07T23:24:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,398 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;\n+\n+    private @Nullable ScheduledFuture<?> scheduledPairing;\n+\n+    public BoschSHCBridgeHandler(Bridge bridge) {\n+        super(bridge);\n+\n+        this.longPolling = new LongPolling(this.scheduler, this::handleLongPollResult, this::handleLongPollFailure);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        // Read configuration\n+        BoschSHCBridgeConfiguration config = getConfigAs(BoschSHCBridgeConfiguration.class);\n+\n+        if (config.ipAddress.isEmpty()) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No IP address set\");\n+            return;\n+        }\n+\n+        if (config.password.isEmpty()) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"No system password set\");\n+            return;\n+        }\n+\n+        SslContextFactory factory;\n+        try {\n+            // prepare SSL key and certificates\n+            factory = new BoschSslUtil(config.password).getSslContextFactory();\n+        } catch (PairingFailedException e) {\n+            this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                    \"@text/offline.conf-error-ssl\");\n+            return;\n+        }\n+\n+        // Instantiate HttpClient with the SslContextFactory\n+        BoschHttpClient httpClient = this.httpClient = new BoschHttpClient(config.ipAddress, config.password, factory);\n+\n+        // Start http client\n+        try {\n+            httpClient.start();\n+        } catch (Exception e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                    \"Could not create http connection to controller\");\n+            return;\n+        }\n+\n+        // Initialize bridge in the background.\n+        // Start initial access the first time\n+        scheduleInitialAccess(httpClient);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        // Cancel scheduled pairing.\n+        ScheduledFuture<?> scheduledPairing = this.scheduledPairing;\n+        if (scheduledPairing != null) {\n+            scheduledPairing.cancel(true);\n+            this.scheduledPairing = null;\n+        }\n+\n+        // Stop long polling.\n+        this.longPolling.stop();\n+\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                httpClient.stop();\n+            } catch (Exception e) {\n+                logger.debug(\"HttpClient failed on bridge disposal: {}\", e.getMessage());\n+            }\n+            this.httpClient = null;\n+        }\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+    }\n+\n+    /**\n+     * Schedule the initial access.\n+     * Use a delay if pairing fails and next retry is scheduled.\n+     */\n+    private void scheduleInitialAccess(BoschHttpClient httpClient) {\n+        this.scheduledPairing = scheduler.schedule(() -> initialAccess(httpClient), 15, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Execute the initial access.\n+     * Uses the HTTP Bosch SHC client\n+     * to check if access if possible\n+     * pairs this Bosch SHC Bridge with the SHC if necessary\n+     * and starts the first log poll.\n+     */\n+    private void initialAccess(BoschHttpClient httpClient) {\n+        logger.debug(\"Initializing Bosch SHC Bridge: {} - HTTP client is: {} - version: 2020-04-05\", this, httpClient);\n+\n+        // check access and pair if necessary\n+        if (!httpClient.isAccessPossible()) {\n+            // update status already if access is not possible\n+            this.updateStatus(ThingStatus.UNKNOWN, ThingStatusDetail.UNKNOWN.NONE, \"@text/offline.conf-error-pairing\");\n+            if (!httpClient.doPairing()) {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.CONFIGURATION_ERROR,\n+                        \"@text/offline.conf-error-pairing\");\n+            }\n+            // restart initial access - needed also in case of successful pairing to check access again\n+            scheduleInitialAccess(httpClient);\n+        } else {\n+            // print rooms and devices if things are reachable\n+            boolean thingReachable = true;\n+            thingReachable &= this.getRooms();\n+            thingReachable &= this.getDevices();\n+\n+            if (thingReachable) {\n+                this.updateStatus(ThingStatus.ONLINE);\n+\n+                // Start long polling\n+                try {\n+                    this.longPolling.start(httpClient);\n+                } catch (LongPollingFailedException e) {\n+                    this.handleLongPollFailure(e);\n+                }\n+            } else {\n+                this.updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR,\n+                        \"@text/offline.not-reachable\");\n+                // restart initial access\n+                scheduleInitialAccess(httpClient);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Get a list of connected devices from the Smart-Home Controller\n+     */\n+    private boolean getDevices() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            return false;\n+        }\n+\n+        try {\n+            logger.debug(\"Sending http request to Bosch to request clients: {}\", httpClient);\n+            String url = httpClient.createSmartHomeUrl(\"devices\");\n+            ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+            Type collectionType = new TypeToken<ArrayList<Device>>() {\n+            }.getType();\n+            ArrayList<Device> devices = gson.fromJson(content, collectionType);\n+\n+            if (devices != null) {\n+                for (Device d : devices) {\n+                    // Write found devices into openhab.log until we have implemented auto discovery\n+                    logger.info(\"Found device: name={} id={}\", d.name, d.id);\n+                    if (d.deviceSerivceIDs != null) {\n+                        for (String s : d.deviceSerivceIDs) {\n+                            logger.info(\".... service: {}\", s);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.debug(\"HTTP request failed with exception {}\", e.getMessage());\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private void handleLongPollResult(LongPollResult result) {\n+        for (DeviceStatusUpdate update : result.result) {\n+            if (update != null && update.state != null) {\n+                logger.debug(\"Got update for {}\", update.deviceId);\n+\n+                boolean handled = false;\n+\n+                Bridge bridge = this.getThing();\n+                for (Thing childThing : bridge.getThings()) {\n+                    // All children of this should implement BoschSHCHandler\n+                    ThingHandler baseHandler = childThing.getHandler();\n+                    if (baseHandler != null && baseHandler instanceof BoschSHCHandler) {\n+                        BoschSHCHandler handler = (BoschSHCHandler) baseHandler;\n+                        String deviceId = handler.getBoschID();\n+\n+                        handled = true;\n+                        logger.debug(\"Registered device: {} - looking for {}\", deviceId, update.deviceId);\n+\n+                        if (deviceId != null && update.deviceId.equals(deviceId)) {\n+                            logger.debug(\"Found child: {} - calling processUpdate with {}\", handler, update.state);\n+                            handler.processUpdate(update.id, update.state);\n+                        }\n+                    } else {\n+                        logger.warn(\"longPoll: child handler for {} does not implement Bosch SHC handler\", baseHandler);\n+                    }\n+                }\n+\n+                if (!handled) {\n+                    logger.debug(\"Could not find a thing for device ID: {}\", update.deviceId);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void handleLongPollFailure(Throwable e) {\n+        logger.warn(\"Long polling failed\", e);\n+        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"Long polling failed\");\n+    }\n+\n+    /**\n+     * Get a list of rooms from the Smart-Home controller\n+     */\n+    private boolean getRooms() {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient != null) {\n+            try {\n+                logger.debug(\"Sending http request to Bosch to request rooms\");\n+                String url = httpClient.createSmartHomeUrl(\"rooms\");\n+                ContentResponse contentResponse = httpClient.createRequest(url, GET).send();\n+\n+                String content = contentResponse.getContentAsString();\n+                logger.debug(\"Response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+\n+                Type collectionType = new TypeToken<ArrayList<Room>>() {\n+                }.getType();\n+\n+                ArrayList<Room> rooms = gson.fromJson(content, collectionType);\n+\n+                if (rooms != null) {\n+                    for (Room r : rooms) {\n+                        logger.info(\"Found room: {}\", r.name);\n+                    }\n+                }\n+\n+                return true;\n+            } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+                logger.warn(\"HTTP request failed: {}\", e.getMessage());\n+                return false;\n+            }\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Query the Bosch Smart Home Controller for the state of the given thing.\n+     *\n+     * @param deviceId Id of device to get state for\n+     * @param stateName Name of the state to query\n+     * @param stateClass Class to convert the resulting JSON to\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     * @throws BoschSHCException\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable T getState(String deviceId, String stateName, Class<T> stateClass)\n+            throws InterruptedException, TimeoutException, ExecutionException, BoschSHCException {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        String url = httpClient.createServiceUrl(stateName, deviceId);\n+        Request request = httpClient.createRequest(url, GET).header(\"Accept\", \"application/json\");\n+\n+        logger.debug(\"refreshState: Requesting \\\"{}\\\" from Bosch: {} via {}\", stateName, deviceId, url);\n+\n+        ContentResponse contentResponse = request.send();\n+\n+        String content = contentResponse.getContentAsString();\n+        logger.debug(\"refreshState: Request complete: [{}] - return code: {}\", content, contentResponse.getStatus());\n+\n+        int statusCode = contentResponse.getStatus();\n+        if (statusCode != 200) {\n+            JsonRestExceptionResponse errorResponse = gson.fromJson(content, JsonRestExceptionResponse.class);\n+            if (errorResponse != null) {\n+                throw new BoschSHCException(String.format(\n+                        \"State request for service %s of device %s failed with status code %d and error code %s\",\n+                        stateName, deviceId, errorResponse.statusCode, errorResponse.errorCode));\n+            } else {\n+                throw new BoschSHCException(\n+                        String.format(\"State request for service %s of device %s failed with status code %d\", stateName,\n+                                deviceId, statusCode));\n+            }\n+        }\n+\n+        @Nullable\n+        T state = gson.fromJson(content, stateClass);\n+        if (state == null) {\n+            throw new BoschSHCException(String.format(\"Received invalid, expected type %s\", stateClass.getName()));\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Sends a state change for a device to the controller\n+     * \n+     * @param deviceId Id of device to change state for\n+     * @param serviceName Name of service of device to change state for\n+     * @param state New state data to set for service\n+     * \n+     * @return Response of request\n+     */\n+    public <T extends BoschSHCServiceState> @Nullable Response putState(String deviceId, String serviceName, T state) {\n+        BoschHttpClient httpClient = this.httpClient;\n+        if (httpClient == null) {\n+            logger.warn(\"HttpClient not initialized\");\n+            return null;\n+        }\n+\n+        // Create request\n+        String url = httpClient.createServiceUrl(serviceName, deviceId);\n+        Request request = httpClient.createRequest(url, PUT, state);\n+\n+        // Send request\n+        try {\n+            Response response = request.send();\n+            return response;\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"HTTP request failed: {}\", e.getMessage());\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1421ee4b553ea5958eac23ccade2f7cf70539d19"}, "originalPosition": 395}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTI5ODIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDozODo0OFrOIEMKrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozMTowNFrOIGOPUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NDU1Nw==", "bodyText": "Also pass on the causing exception.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n          \n          \n            \n                                responseContentClass.getName(), e.getMessage()), null);\n          \n          \n            \n                        throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n          \n          \n            \n                                responseContentClass.getName(), e.getMessage()), e);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541264557", "createdAt": "2020-12-11T20:38:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);\n+            if (content == null) {\n+                throw new ExecutionException(String.format(\"Received no content in response, expected type %s\",\n+                        responseContentClass.getName()), null);\n+            }\n+            return content;\n+        } catch (JsonSyntaxException e) {\n+            throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n+                    responseContentClass.getName(), e.getMessage()), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NTY2Nw==", "bodyText": "Added the causing exception.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543395667", "createdAt": "2020-12-15T14:31:04Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);\n+            if (content == null) {\n+                throw new ExecutionException(String.format(\"Received no content in response, expected type %s\",\n+                        responseContentClass.getName()), null);\n+            }\n+            return content;\n+        } catch (JsonSyntaxException e) {\n+            throw new ExecutionException(String.format(\"Received invalid content in response, expected type %s: %s\",\n+                    responseContentClass.getName(), e.getMessage()), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NDU1Nw=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTMwNDUyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDozOTo0OVrOIEMOZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxOTowNTo0N1rOIP4fYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable\n          \n          \n            \n                        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);\n          \n          \n            \n                        TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541265508", "createdAt": "2020-12-11T20:39:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NjAxMw==", "bodyText": "Removed the annotation", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543396013", "createdAt": "2020-12-15T14:31:31Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5OTk4OQ==", "bodyText": "@cpmeister I get a warning after removing this annotation:\n\n[WARNING] D:\\Projects\\openHAB\\openhab-addons\\bundles\\org.openhab.binding.boschshc\\src\\main\\java\\org\\openhab\\binding\\boschshc\\internal\\devices\\bridge\\BoschHttpClient.java:[180,32] Null type mismatch (type annotations): required 'TContent' but this expression has type '@nullable TContent', where 'TContent' is a free type variable\n\nIs it still okay?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543399989", "createdAt": "2020-12-15T14:36:26Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NjYxNg==", "bodyText": "I'd revert the change.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r546256616", "createdAt": "2020-12-19T16:29:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjY3MDYwOA==", "bodyText": "@cpmeister Are you okay with reverting it?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r546670608", "createdAt": "2020-12-21T12:07:35Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwNTA1Mw==", "bodyText": "Just revert it then. I don't know why removing it causes an issue though...", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553005053", "createdAt": "2021-01-06T22:53:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzUyNTA5MA==", "bodyText": "The @Nullable annotation is now added again to avoid the warning.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553525090", "createdAt": "2021-01-07T19:05:47Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();\n+\n+    public BoschHttpClient(String ipAddress, String systempassword, SslContextFactory sslContextFactory) {\n+        super(sslContextFactory);\n+        this.ipAddress = ipAddress;\n+        this.systempassword = systempassword;\n+    }\n+\n+    private String getCertFromSslContextFactory() throws KeyStoreException, CertificateEncodingException {\n+        Certificate cert = this.getSslContextFactory().getKeyStore().getCertificate(BoschSslUtil.getBoschSHCId());\n+        return Base64.getEncoder().encodeToString(cert.getEncoded());\n+    }\n+\n+    public boolean isAccessPossible() throws InterruptedException {\n+        try {\n+            String url = this.createSmartHomeUrl(\"devices\");\n+            Request request = this.createRequest(url, GET);\n+            ContentResponse contentResponse = request.send();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Access check response complete: {} - return code: {}\", content, contentResponse.getStatus());\n+            return true;\n+        } catch (TimeoutException | ExecutionException e) {\n+            logger.debug(\"Access check response failed because of {}!\", e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    public boolean doPairing() {\n+        logger.trace(\"Starting pairing openHAB Client with Bosch SmartHomeController!\");\n+        logger.trace(\"Please press the Bosch SHC button until LED starts blinking\");\n+\n+        ContentResponse contentResponse;\n+        try {\n+            String publicCert = getCertFromSslContextFactory();\n+            logger.trace(\"Pairing this Client '{}' with SHC {}\", BoschSslUtil.getBoschSHCId(), ipAddress);\n+\n+            // JSON Rest content\n+            Map<String, String> items = new HashMap<>();\n+            items.put(\"@type\", \"client\");\n+            items.put(\"id\", BoschSslUtil.getBoschSHCId()); // Client Id contains the unique OpenHab instance Id\n+            items.put(\"name\", \"oss_OpenHAB_Binding\"); // Client name according to\n+                                                      // https://github.com/BoschSmartHome/bosch-shc-api-docs#terms-and-conditions\n+            items.put(\"primaryRole\", \"ROLE_RESTRICTED_CLIENT\");\n+            items.put(\"certificate\", \"-----BEGIN CERTIFICATE-----\\r\" + publicCert + \"\\r-----END CERTIFICATE-----\");\n+\n+            String url = this.createPairingUrl();\n+            Request request = this.createRequest(url, HttpMethod.POST, items).header(\"Systempassword\",\n+                    Base64.getEncoder().encodeToString(systempassword.getBytes(StandardCharsets.UTF_8)));\n+\n+            contentResponse = request.send();\n+\n+            logger.trace(\"Pairing response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                    contentResponse.getStatus());\n+            if (201 == contentResponse.getStatus()) {\n+                logger.debug(\"Pairing successful.\");\n+                return true;\n+            } else {\n+                logger.info(\"Pairing failed with response status {}.\", contentResponse.getStatus());\n+                return false;\n+            }\n+        } catch (InterruptedException | TimeoutException | CertificateEncodingException | KeyStoreException e) {\n+            logger.warn(\"Pairing failed with exception {}\", e.getMessage());\n+            return false;\n+        } catch (ExecutionException e) {\n+            // javax.net.ssl.SSLHandshakeException: General SSLEngine problem\n+            // => usually the pairing failed, because hardware button was not pressed.\n+            logger.trace(\"Pairing failed - Details: {}\", e.getMessage());\n+            logger.warn(\"Pairing failed. Was the Bosch SHC button pressed?\");\n+            return false;\n+        }\n+    }\n+\n+    public String createPairingUrl() {\n+        return String.format(\"https://%s:8443/smarthome/clients\", this.ipAddress);\n+    }\n+\n+    public String createUrl(String endpoint) {\n+        return String.format(\"https://%s:8444/%s\", this.ipAddress, endpoint);\n+    }\n+\n+    public String createSmartHomeUrl(String endpoint) {\n+        return this.createUrl(String.format(\"smarthome/%s\", endpoint));\n+    }\n+\n+    public String createServiceUrl(String serviceName, String deviceId) {\n+        return this.createSmartHomeUrl(String.format(\"devices/%s/services/%s/state\", deviceId, serviceName));\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method) {\n+        return this.createRequest(url, method, null);\n+    }\n+\n+    public Request createRequest(String url, HttpMethod method, @Nullable Object content) {\n+        Request request = this.newRequest(url).method(method).header(\"Content-Type\", \"application/json\");\n+        if (content != null) {\n+            String body = gson.toJson(content);\n+            logger.trace(\"create request for {} and content {}\", url, body);\n+            request = request.content(new StringContentProvider(body));\n+        } else {\n+            logger.trace(\"create request for {}\", url);\n+        }\n+\n+        // Set default timeout\n+        request.timeout(10, TimeUnit.SECONDS);\n+\n+        return request;\n+    }\n+\n+    /**\n+     * Sends a request and expects a response of the specified type.\n+     * \n+     * @param request Request to send\n+     * @param responseContentClass Type of expected response\n+     * @throws ExecutionException\n+     * @throws TimeoutException\n+     * @throws InterruptedException\n+     */\n+    public <TContent> TContent sendRequest(Request request, Class<TContent> responseContentClass)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        ContentResponse contentResponse = request.send();\n+\n+        logger.debug(\"BoschHttpClient: response complete: {} - return code: {}\", contentResponse.getContentAsString(),\n+                contentResponse.getStatus());\n+\n+        try {\n+            @Nullable\n+            TContent content = gson.fromJson(contentResponse.getContentAsString(), responseContentClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2NTUwOA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTMyNjY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0MzozNFrOIEMbmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozMToxNlrOIGOP8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2ODg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable\n          \n          \n            \n                    AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);\n          \n          \n            \n                    AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541268889", "createdAt": "2020-12-11T20:43:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, Units.ONE));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new QuantityType<Dimensionless>(state.purity, Units.ONE));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"Twinguard: received update: {} {}\", id, state);\n+\n+        @Nullable\n+        AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NTgyNg==", "bodyText": "Removed the annotation", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543395826", "createdAt": "2020-12-15T14:31:16Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, Units.ONE));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new QuantityType<Dimensionless>(state.purity, Units.ONE));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {\n+        logger.debug(\"Twinguard: received update: {} {}\", id, state);\n+\n+        @Nullable\n+        AirQualityLevelState parsed = gson.fromJson(state, AirQualityLevelState.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI2ODg4OQ=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM0MzE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo0NjoyMlrOIEMlvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozNzozNFrOIGOjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MTQ4NA==", "bodyText": "Although it is a RuntimeException, it should be handled by callers so you should declare it in the method signature so that callers know that it might get thrown.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void processUpdate(String id, JsonElement state) {\n          \n          \n            \n                public void processUpdate(String id, JsonElement state) throws JsonSyntaxException{", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541271484", "createdAt": "2020-12-11T20:46:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, Units.ONE));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new QuantityType<Dimensionless>(state.purity, Units.ONE));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQwMDkwOQ==", "bodyText": "The BoschTwinguardHandler will be refactored soon, but I still added the exception to the definition for now", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543400909", "createdAt": "2020-12-15T14:37:34Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.twinguard;\n+\n+import static org.openhab.binding.boschshc.internal.devices.BoschSHCBindingConstants.*;\n+\n+import javax.measure.quantity.Dimensionless;\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.twinguard.dto.AirQualityLevelState;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.types.StringType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+\n+import com.google.gson.JsonElement;\n+\n+/**\n+ * The {@link BoschSHCHandler} is responsible for handling commands for the TwinGuard handler.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschTwinguardHandler extends BoschSHCHandler {\n+\n+    public BoschTwinguardHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        Bridge bridge = this.getBridge();\n+\n+        if (bridge != null) {\n+            logger.debug(\"Handle command for: {} - {}\", channelUID.getThingUID(), command);\n+\n+            if (command instanceof RefreshType) {\n+                AirQualityLevelState state = this.getState(\"AirQualityLevel\", AirQualityLevelState.class);\n+                if (state != null) {\n+                    updateAirQualityState(state);\n+                }\n+            }\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, \"Bridge is NUL\");\n+        }\n+    }\n+\n+    void updateAirQualityState(AirQualityLevelState state) {\n+        updateState(CHANNEL_TEMPERATURE, new QuantityType<Temperature>(state.temperature, SIUnits.CELSIUS));\n+        updateState(CHANNEL_TEMPERATURE_RATING, new StringType(state.temperatureRating));\n+        updateState(CHANNEL_HUMIDITY, new QuantityType<Dimensionless>(state.humidity, Units.ONE));\n+        updateState(CHANNEL_HUMIDITY_RATING, new StringType(state.humidityRating));\n+        updateState(CHANNEL_PURITY, new QuantityType<Dimensionless>(state.purity, Units.ONE));\n+        updateState(CHANNEL_AIR_DESCRIPTION, new StringType(state.description));\n+        updateState(CHANNEL_PURITY_RATING, new StringType(state.purityRating));\n+        updateState(CHANNEL_COMBINED_RATING, new StringType(state.combinedRating));\n+    }\n+\n+    @Override\n+    public void processUpdate(String id, JsonElement state) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3MTQ4NA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTM4NDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1MzozNFrOIEM_dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozMjoxM1rOIGOS9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODA3MA==", "bodyText": "Gson instances should be static and final since they don't change.\nPlease make changes elsewhere as appropriate.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Gson gson = new Gson();\n          \n          \n            \n                private static final Gson gson = new Gson();\n          \n      \n    \n    \n  \n\nIt should also be noted that static final fields should be placed above all other fields.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541278070", "createdAt": "2020-12-11T20:53:34Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NjU5OQ==", "bodyText": "Added the modifiers to the field", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543396599", "createdAt": "2020-12-15T14:32:13Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschHttpClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStoreException;\n+import java.security.cert.Certificate;\n+import java.security.cert.CertificateEncodingException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.util.StringContentProvider;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * HTTP client using own context with private & Bosch Certs\n+ * to pair and connect to the Bosch Smart Home Controller.\n+ *\n+ * @author Gerd Zanker - Initial contribution\n+ */\n+@NonNullByDefault\n+public class BoschHttpClient extends HttpClient {\n+    private final Logger logger = LoggerFactory.getLogger(BoschHttpClient.class);\n+\n+    private String ipAddress;\n+    private String systempassword;\n+\n+    private Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI3ODA3MA=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTQwMDQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDo1NjowM1rOIENJkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozMjoyNFrOIGOTtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4MDY1Ng==", "bodyText": "Please put this nested class definition at the end of the class.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541280656", "createdAt": "2020-12-11T20:56:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5Njc5MQ==", "bodyText": "Moved the nested class", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543396791", "createdAt": "2020-12-15T14:32:24Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4MDY1Ng=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTQ0NjE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMTowMzoxMFrOIENmMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDozMjozOFrOIGOUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4Nzk4NQ==", "bodyText": "I don't think logging the hashcode is going to very helpful for debugging...", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r541287985", "createdAt": "2020-12-11T21:03:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling.\n+     * \n+     * @param httpClient Http client to use for sending subscription request\n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            throw new LongPollingFailedException(\"Error on subscribe request\", e);\n+        }\n+    }\n+\n+    private void executeLongPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        scheduler.execute(() -> this.longPoll(httpClient, subscriptionId));\n+    }\n+\n+    /**\n+     * Start long polling the home controller. Once a long poll resolves, a new one is started.\n+     */\n+    private void longPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        logger.debug(\"Sending long poll request\");\n+\n+        JsonRpcRequest requestContent = new JsonRpcRequest(\"2.0\", \"RE/longPoll\", new String[] { subscriptionId, \"20\" });\n+        String url = httpClient.createUrl(\"remote/json-rpc\");\n+        Request request = httpClient.createRequest(url, POST, requestContent);\n+\n+        // Long polling responds after 20 seconds with an empty response if no update has happened.\n+        // 10 second threshold was added to not time out if response from controller takes a bit longer than 20 seconds.\n+        request.timeout(30, TimeUnit.SECONDS);\n+\n+        this.request = request;\n+        LongPolling longPolling = this;\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                Throwable failure = result != null ? result.getFailure() : null;\n+                if (failure != null) {\n+                    if (failure instanceof ExecutionException) {\n+                        if (failure.getCause() instanceof AbortLongPolling) {\n+                            logger.debug(\"Canceling long polling for subscription id {} because it was aborted\",\n+                                    subscriptionId);\n+                        } else {\n+                            longPolling.handleFailure.accept(new LongPollingFailedException(\n+                                    \"Unexpected exception during long polling request\", failure));\n+                        }\n+                    } else {\n+                        longPolling.handleFailure.accept(new LongPollingFailedException(\n+                                \"Unexpected exception during long polling request\", failure));\n+                    }\n+                } else {\n+                    longPolling.onLongPollResponse(httpClient, subscriptionId, this.getContentAsString());\n+                }\n+            }\n+        });\n+    }\n+\n+    private void onLongPollResponse(BoschHttpClient httpClient, String subscriptionId, String content) {\n+        // Check if thing is still online\n+        if (this.aborted) {\n+            logger.debug(\"Canceling long polling for subscription id {} because it was aborted\", subscriptionId);\n+            return;\n+        }\n+\n+        logger.debug(\"Long poll response: {}\", content);\n+\n+        String nextSubscriptionId = subscriptionId;\n+\n+        LongPollResult longPollResult = gson.fromJson(content, LongPollResult.class);\n+        if (longPollResult != null) {\n+            this.handleResult.accept(longPollResult);\n+        } else {\n+            logger.warn(\"Could not parse long poll response: {}\", content);\n+\n+            // Check if we got a proper result from the SHC\n+            LongPollError longPollError = gson.fromJson(content, LongPollError.class);\n+\n+            if (longPollError != null) {\n+                logger.warn(\"Got error from SHC: {}\", longPollError.error.hashCode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM5NzAxOQ==", "bodyText": "Oops, logging the message and code now :)", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r543397019", "createdAt": "2020-12-15T14:32:38Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/LongPolling.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.POST;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Consumer;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Result;\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollError;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.LongPollResult;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.SubscribeResult;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * Handles the long polling to the Smart Home Controller.\n+ * \n+ * @author Christian Oeing - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LongPolling {\n+    @SuppressWarnings(\"serial\")\n+    private class AbortLongPolling extends BoschSHCException {\n+    }\n+\n+    private final Logger logger = LoggerFactory.getLogger(LongPolling.class);\n+\n+    private final Gson gson = new Gson();\n+\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Handler for long poll results.\n+     */\n+    private final Consumer<LongPollResult> handleResult;\n+\n+    /**\n+     * Handler for unrecoverable.\n+     */\n+    private final Consumer<Throwable> handleFailure;\n+\n+    /**\n+     * Current running long polling request.\n+     */\n+    private @Nullable Request request;\n+\n+    /**\n+     * Indicates if long polling was aborted.\n+     */\n+    private boolean aborted = false;\n+\n+    public LongPolling(ScheduledExecutorService scheduler, Consumer<LongPollResult> handleResult,\n+            Consumer<Throwable> handleFailure) {\n+        this.scheduler = scheduler;\n+        this.handleResult = handleResult;\n+        this.handleFailure = handleFailure;\n+    }\n+\n+    public void start(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        // Subscribe to state updates.\n+        String subscriptionId = this.subscribe(httpClient);\n+        this.executeLongPoll(httpClient, subscriptionId);\n+    }\n+\n+    public void stop() {\n+        // Abort long polling.\n+        this.aborted = true;\n+        Request request = this.request;\n+        if (request != null) {\n+            request.abort(new AbortLongPolling());\n+            this.request = null;\n+        }\n+    }\n+\n+    /**\n+     * Subscribe to events and store the subscription ID needed for long polling.\n+     * \n+     * @param httpClient Http client to use for sending subscription request\n+     * @return Subscription id\n+     */\n+    private String subscribe(BoschHttpClient httpClient) throws LongPollingFailedException {\n+        try {\n+            String url = httpClient.createUrl(\"remote/json-rpc\");\n+            JsonRpcRequest request = new JsonRpcRequest(\"2.0\", \"RE/subscribe\",\n+                    new String[] { \"com/bosch/sh/remote/*\", null });\n+            logger.debug(\"Subscribe: Sending request: {} - using httpClient {}\", gson.toJson(request), httpClient);\n+            Request httpRequest = httpClient.createRequest(url, POST, request);\n+            SubscribeResult response = httpClient.sendRequest(httpRequest, SubscribeResult.class);\n+\n+            logger.debug(\"Subscribe: Got subscription ID: {} {}\", response.getResult(), response.getJsonrpc());\n+            String subscriptionId = response.getResult();\n+            return subscriptionId;\n+        } catch (TimeoutException | ExecutionException | InterruptedException e) {\n+            throw new LongPollingFailedException(\"Error on subscribe request\", e);\n+        }\n+    }\n+\n+    private void executeLongPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        scheduler.execute(() -> this.longPoll(httpClient, subscriptionId));\n+    }\n+\n+    /**\n+     * Start long polling the home controller. Once a long poll resolves, a new one is started.\n+     */\n+    private void longPoll(BoschHttpClient httpClient, String subscriptionId) {\n+        logger.debug(\"Sending long poll request\");\n+\n+        JsonRpcRequest requestContent = new JsonRpcRequest(\"2.0\", \"RE/longPoll\", new String[] { subscriptionId, \"20\" });\n+        String url = httpClient.createUrl(\"remote/json-rpc\");\n+        Request request = httpClient.createRequest(url, POST, requestContent);\n+\n+        // Long polling responds after 20 seconds with an empty response if no update has happened.\n+        // 10 second threshold was added to not time out if response from controller takes a bit longer than 20 seconds.\n+        request.timeout(30, TimeUnit.SECONDS);\n+\n+        this.request = request;\n+        LongPolling longPolling = this;\n+        request.send(new BufferingResponseListener() {\n+            @Override\n+            public void onComplete(@Nullable Result result) {\n+                Throwable failure = result != null ? result.getFailure() : null;\n+                if (failure != null) {\n+                    if (failure instanceof ExecutionException) {\n+                        if (failure.getCause() instanceof AbortLongPolling) {\n+                            logger.debug(\"Canceling long polling for subscription id {} because it was aborted\",\n+                                    subscriptionId);\n+                        } else {\n+                            longPolling.handleFailure.accept(new LongPollingFailedException(\n+                                    \"Unexpected exception during long polling request\", failure));\n+                        }\n+                    } else {\n+                        longPolling.handleFailure.accept(new LongPollingFailedException(\n+                                \"Unexpected exception during long polling request\", failure));\n+                    }\n+                } else {\n+                    longPolling.onLongPollResponse(httpClient, subscriptionId, this.getContentAsString());\n+                }\n+            }\n+        });\n+    }\n+\n+    private void onLongPollResponse(BoschHttpClient httpClient, String subscriptionId, String content) {\n+        // Check if thing is still online\n+        if (this.aborted) {\n+            logger.debug(\"Canceling long polling for subscription id {} because it was aborted\", subscriptionId);\n+            return;\n+        }\n+\n+        logger.debug(\"Long poll response: {}\", content);\n+\n+        String nextSubscriptionId = subscriptionId;\n+\n+        LongPollResult longPollResult = gson.fromJson(content, LongPollResult.class);\n+        if (longPollResult != null) {\n+            this.handleResult.accept(longPollResult);\n+        } else {\n+            logger.warn(\"Could not parse long poll response: {}\", content);\n+\n+            // Check if we got a proper result from the SHC\n+            LongPollError longPollError = gson.fromJson(content, LongPollError.class);\n+\n+            if (longPollError != null) {\n+                logger.warn(\"Got error from SHC: {}\", longPollError.error.hashCode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI4Nzk4NQ=="}, "originalCommit": {"oid": "2739ba0b9feed3735bda84c784d6f462c3797836"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDQ5OTg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo0NDoxMFrOIPYjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxODowMDo0MVrOIP2eQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMTkxNQ==", "bodyText": "Since this is a new year, please update the copyright date for all your files.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2010-2020 Contributors to the openHAB project\n          \n          \n            \n             * Copyright (c) 2010-2021 Contributors to the openHAB project", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553001915", "createdAt": "2021-01-06T22:44:10Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ0OTg2Ng==", "bodyText": "Hello @coeing I will taking care of the copyright update and move the final fields.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553449866", "createdAt": "2021-01-07T16:48:46Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMTkxNQ=="}, "originalCommit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQ5MjAzNQ==", "bodyText": "A rebase on main branch was necessary to get the latest maven file header format.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553492035", "createdAt": "2021-01-07T18:00:41Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/twinguard/BoschTwinguardHandler.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMTkxNQ=="}, "originalCommit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4MDUwODc1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo0Nzo1N1rOIPYotw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMjo0Nzo1N1rOIPYotw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzAwMzE5MQ==", "bodyText": "Please move final fields above non-final fields.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r553003191", "createdAt": "2021-01-06T22:47:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/java/org/openhab/binding/boschshc/internal/devices/bridge/BoschSHCBridgeHandler.java", "diffHunk": "@@ -0,0 +1,407 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.boschshc.internal.devices.bridge;\n+\n+import static org.eclipse.jetty.http.HttpMethod.GET;\n+import static org.eclipse.jetty.http.HttpMethod.PUT;\n+\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.client.api.Response;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.openhab.binding.boschshc.internal.devices.BoschSHCHandler;\n+import org.openhab.binding.boschshc.internal.devices.bridge.dto.*;\n+import org.openhab.binding.boschshc.internal.exceptions.BoschSHCException;\n+import org.openhab.binding.boschshc.internal.exceptions.LongPollingFailedException;\n+import org.openhab.binding.boschshc.internal.exceptions.PairingFailedException;\n+import org.openhab.binding.boschshc.internal.services.dto.BoschSHCServiceState;\n+import org.openhab.binding.boschshc.internal.services.dto.JsonRestExceptionResponse;\n+import org.openhab.core.thing.Bridge;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseBridgeHandler;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.types.Command;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.reflect.TypeToken;\n+\n+/**\n+ * Representation of a connection with a Bosch Smart Home Controller bridge.\n+ *\n+ * @author Stefan K\u00e4stle - Initial contribution\n+ * @author Gerd Zanker - added HttpClient with pairing support\n+ * @author Christian Oeing - refactorings of e.g. server registration\n+ */\n+@NonNullByDefault\n+public class BoschSHCBridgeHandler extends BaseBridgeHandler {\n+\n+    private final Logger logger = LoggerFactory.getLogger(BoschSHCBridgeHandler.class);\n+\n+    private @Nullable BoschHttpClient httpClient;\n+\n+    private final Gson gson = new Gson();\n+\n+    /**\n+     * Handler to do long polling.\n+     */\n+    private final LongPolling longPolling;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d8c914d5dd468ea68ff4d3131e7d9eed2be51c8"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTY3OTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "isResolved": false, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMDo0OToxMlrOITBifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNlQyMjo0Mzo0M1rOIVJn1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA==", "bodyText": "After switch the dependencies to provided you would then need to update your feature.xml to let the osgi system know where it can find those dependencies. This should solve the error your are seeing in the build.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<feature>openhab-runtime-base</feature>\n          \n          \n            \n            \t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>\n          \n          \n            \n            \t\t<feature>openhab-runtime-base</feature>\n          \n          \n            \n            \t\t<bundle dependency=\"true\">mvn:org.bouncycastle/bcpkix-jdk15on/1.52</bundle>\n          \n          \n            \n            \t\t<bundle dependency=\"true\">mvn:org.bouncycastle/bcprov-jdk15on/1.52</bundle>\n          \n          \n            \n            \t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r556819068", "createdAt": "2021-01-13T20:49:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU3NzY4NA==", "bodyText": "Thanks a lot @cpmeister! Your suggestion solves the error on my machine.\nThis means that the maven pom.xml contains the \"compile time\" dependencies and the feature.xml defines the runtime OSGi environment.\nI will tests the new binding jar - now only 88Kb big - and commit the changes afterwards.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r557577684", "createdAt": "2021-01-14T17:44:56Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwNzcxMQ==", "bodyText": "88kb?! \ud83c\udf86", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r557607711", "createdAt": "2021-01-14T18:36:17Z", "author": {"login": "coeing"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYxNzY4Nw==", "bodyText": "Oh no \ud83d\ude27. During runtime I get now problems: Not all used class from org.bouncycastle.* are contained in org.openhab.io.jetty.certificate and this binding code uses of cause missing classes.\nI will evaluate the following option:\na) rewrite the binding certificate code to only use available classes\nb) use the maven-shade-plugin as in the org.openhab.io.jetty.certificate bundle pom.xml to reduce the jar size", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r557617687", "createdAt": "2021-01-14T18:54:05Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDIyMg==", "bodyText": "From what I can tell, org.openhab.io.jetty.certificate doesn't export any of the org.bouncycastle.* classes that it has shaded internally. This means that you can't rely on org.openhab.io.jetty.certificate as a dependency to get those classes from.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r557680222", "createdAt": "2021-01-14T20:30:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MTE4NQ==", "bodyText": "Are you having any trouble getting the binding to install? Or does it install and just throw errors?", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r557681185", "createdAt": "2021-01-14T20:32:54Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2MjcwOQ==", "bodyText": "This means that you can't rely on org.openhab.io.jetty.certificate as a dependency to get those classes from.\n\nOk, one reason more to focus option b) and shade bouncycastle jars on my one", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r558462709", "createdAt": "2021-01-15T17:40:11Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ2ODc2MQ==", "bodyText": "Are you having any trouble getting the binding to install? Or does it install and just throw errors?\n\nThe trouble started after a successful compilation and bundle installation. It seems to me that all dependencies inside the OSGi container were resolved, because I was able to start the Bosch SHC Bridge Thing. But during the very first initialization I got exceptions during the keystore and the self signed certificate creation.\nI will write unit tests to have a defined environment and reproduce steps for keystore and self signed certificate creation. Then I can evaluate different dependencies and code combinations.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r558468761", "createdAt": "2021-01-15T17:49:08Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQ3MDY0NQ==", "bodyText": "FYI: A first \"copy & paste\" of the maven-shade-plugin settings from the org.openhab.io.jetty.certificate pom.xml  to this binding pom resulted in the error\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-shade-plugin:3.2.1:shade (default) on project org.openhab.binding.boschshc: Error creating shaded jar: Invalid signature file digest for Manifest main attributes -> [Help 1]", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r558470645", "createdAt": "2021-01-15T17:51:27Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU2OTQwNw==", "bodyText": "Since you are going to shade the bouncycastle libraries into you binding anyway, the easiest way to do that would be to give those dependencies a compile scope in your pom file. Doing so would automatically get those dependencies shaded into your final binding jar. You also wouldn't need to list the dependencies in your feature.xml file either in that case.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r558569407", "createdAt": "2021-01-15T20:13:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODk1MzU0OQ==", "bodyText": "The current PR content has the compile scope for the bouncycastle dependencies and the shading results in a 3.4MB big  jar which is working.\nIt was requested to reduce the jar size and up to now I found no feasible way, because\na) the org.openhab.io.jetty.certificate jar doesn't provide necessary classes currently used in the BoschSslUtil class during runtime\nb) I have no working maven pom to shade and reduce the jar size during compile time", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r558953549", "createdAt": "2021-01-16T16:34:50Z", "author": {"login": "GerdZanker"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA0ODY2MA==", "bodyText": "When @Hilbrand made his suggestion I don't think he was aware that the org.openhab.io.jetty.certificate doesn't export the bouncycastle packages. So depending on the core to provide those dependencies isn't an option at the moment. For now I suggest leaving the dependencies embedded for now and once the core exposes the bouncycastle packages we can try to readdress the sizing issue.", "url": "https://github.com/openhab/openhab-addons/pull/8629#discussion_r559048660", "createdAt": "2021-01-16T22:43:43Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.boschshc/src/main/feature/feature.xml", "diffHunk": "@@ -0,0 +1,9 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<features name=\"org.openhab.binding.boschshc-${project.version}\" xmlns=\"http://karaf.apache.org/xmlns/features/v1.4.0\">\n+\t<repository>mvn:org.openhab.core.features.karaf/org.openhab.core.features.karaf.openhab-core/${ohc.version}/xml/features</repository>\n+\n+\t<feature name=\"openhab-binding-boschshc\" description=\"BoschSHC Binding\" version=\"${project.version}\">\n+\t\t<feature>openhab-runtime-base</feature>\n+\t\t<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.boschshc/${project.version}</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgxOTA2OA=="}, "originalCommit": {"oid": "ed36092b6bc6d147cc06094bc6578ea1cc717bcf"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4180, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}