{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MDExMzY0", "number": 7914, "reviewThreads": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1ODozOVrOEM9TvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo0MToxMlrOEivoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDIyODQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1ODozOVrOGvXqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxMDo0OVrOGwNYPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n          \n          \n            \n            Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452323951", "createdAt": "2020-07-09T15:58:39Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDAzMA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204030", "createdAt": "2020-07-11T15:10:49Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzk1MQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDIzNzQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowMDo1MVrOGvXwKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxMToyOVrOGwNYeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNTQxNg==", "bodyText": "Can you mention the Thing Type IDs?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452325416", "createdAt": "2020-07-09T16:00:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDA4OQ==", "bodyText": "Added", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204089", "createdAt": "2020-07-11T15:11:29Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNTQxNg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI1MjAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowNTowMFrOGvX5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxMToxMlrOGwNYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNzgyNA==", "bodyText": "The anchors of the links are broken. Do you mean #Size_distribution_of_particulates?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452327824", "createdAt": "2020-07-09T16:05:00Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDA1NQ==", "bodyText": "Link corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204055", "createdAt": "2020-07-11T15:11:12Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyNzgyNA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI1ODAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowNjozNVrOGvX9gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxMjoxOVrOGwNYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyODgzMw==", "bodyText": "Can you use Units of Measure?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |\n          \n          \n            \n            | pm25                 | Number:Density | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452328833", "createdAt": "2020-07-09T16:06:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDE3NA==", "bodyText": "Yes, done in description, configuration files and code", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204174", "createdAt": "2020-07-11T15:12:19Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyODgzMw=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI2MDIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowNzoxM1rOGvX-9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxMjo0OFrOGwNY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyOTIwNg==", "bodyText": "See above and same for below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | temperature          | Number               | current temperature in degrees Celsius |\n          \n          \n            \n            | temperature          | Number:Temperature      | current temperature in degrees Celsius |", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452329206", "createdAt": "2020-07-09T16:07:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |\n+| pm100                | Number               | [Coarse particulate matter](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter  |\n+\n+### Conditions Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| temperature          | Number               | current temperature in degrees Celsius |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDIyMA==", "bodyText": "Corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204220", "createdAt": "2020-07-11T15:12:48Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |\n+| pm100                | Number               | [Coarse particulate matter](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter  |\n+\n+### Conditions Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| temperature          | Number               | current temperature in degrees Celsius |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyOTIwNg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI2ODQyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjowOTozMlrOGvYEcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxMzo1MlrOGwNZSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMDYwOA==", "bodyText": "This statement could be removed, since it will be outdated when the beta phase ends.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452330608", "createdAt": "2020-07-09T16:09:32Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |\n+| pm100                | Number               | [Coarse particulate matter](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter  |\n+\n+### Conditions Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| temperature          | Number               | current temperature in degrees Celsius |\n+| humidity             | Number               | current humidity percent  |\n+| pressure             | Number               | Atmospheric Pressure in hpa (not supported by all sensors) |\n+| pressure-sea         | Number               | Atmospheric Pressure on sea level in hpa (not supported by all sensors)  |\n+\n+\n+### Noise Sensor \n+\n+Currently in [beta phase of the community](https://luftdaten.info/einfuehrung-zum-laermsensor/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDI5OA==", "bodyText": "True - line removed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204298", "createdAt": "2020-07-11T15:13:52Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor<i>Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+* Particulate Sensor - measure particulate matter PM2.5 and PM10\n+* Conditions Sensor - measures environment conditions like temperature, humidity and some also provides atmospheric pressure\n+* Noise Sensor - measures noise exposures in the environment\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number               | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter |\n+| pm100                | Number               | [Coarse particulate matter](https://en.wikipedia.org/wiki/Particulates#Size,shapeandsolubilitymatter) microgram per cubic meter  |\n+\n+### Conditions Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| temperature          | Number               | current temperature in degrees Celsius |\n+| humidity             | Number               | current humidity percent  |\n+| pressure             | Number               | Atmospheric Pressure in hpa (not supported by all sensors) |\n+| pressure-sea         | Number               | Atmospheric Pressure on sea level in hpa (not supported by all sensors)  |\n+\n+\n+### Noise Sensor \n+\n+Currently in [beta phase of the community](https://luftdaten.info/einfuehrung-zum-laermsensor/)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMDYwOA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI3MzQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/LuftdatenInfoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxMDo1MFrOGvYHrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNDoxMFrOGwNZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMTQzNw==", "bodyText": "Can this comment be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452331437", "createdAt": "2020-07-09T16:10:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/LuftdatenInfoConfiguration.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link LuftdatenInfoConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LuftdatenInfoConfiguration {\n+\n+    /**\n+     * Sample configuration parameter. Replace with your own.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDMxNQ==", "bodyText": "Deleted", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204315", "createdAt": "2020-07-11T15:14:10Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/LuftdatenInfoConfiguration.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link LuftdatenInfoConfiguration} class contains fields mapping thing configuration parameters.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class LuftdatenInfoConfiguration {\n+\n+    /**\n+     * Sample configuration parameter. Replace with your own.\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMTQzNw=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI3ODEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/LuftdatenInfoHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxMjowN1rOGvYKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNTowNlrOGwNZ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMjIwOQ==", "bodyText": "Does this comment makes sense?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452332209", "createdAt": "2020-07-09T16:12:07Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/LuftdatenInfoHandlerFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.luftdateninfo.internal.handler.ConditionHandler;\n+import org.openhab.binding.luftdateninfo.internal.handler.HTTPHandler;\n+import org.openhab.binding.luftdateninfo.internal.handler.NoiseHandler;\n+import org.openhab.binding.luftdateninfo.internal.handler.PMHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link LuftdatenInfoHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.luftdateninfo\", service = ThingHandlerFactory.class)\n+public class LuftdatenInfoHandlerFactory extends BaseThingHandlerFactory {\n+    protected final Logger logger = LoggerFactory.getLogger(LuftdatenInfoHandlerFactory.class);\n+\n+    @Activate\n+    public LuftdatenInfoHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\n+        HTTPHandler.init(httpClientFactory.getCommonHttpClient());\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        if (thingTypeUID.equals(LuftdatenInfoBindingConstants.THING_TYPE_PARTICULATE)\n+                || thingTypeUID.equals(LuftdatenInfoBindingConstants.THING_TYPE_CONDITIONS)\n+                || thingTypeUID.equals(LuftdatenInfoBindingConstants.THING_TYPE_NOISE)) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        // one handler for all", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDQzOA==", "bodyText": "not really - removed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204438", "createdAt": "2020-07-11T15:15:06Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/LuftdatenInfoHandlerFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\n+import org.openhab.binding.luftdateninfo.internal.handler.ConditionHandler;\n+import org.openhab.binding.luftdateninfo.internal.handler.HTTPHandler;\n+import org.openhab.binding.luftdateninfo.internal.handler.NoiseHandler;\n+import org.openhab.binding.luftdateninfo.internal.handler.PMHandler;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link LuftdatenInfoHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(configurationPid = \"binding.luftdateninfo\", service = ThingHandlerFactory.class)\n+public class LuftdatenInfoHandlerFactory extends BaseThingHandlerFactory {\n+    protected final Logger logger = LoggerFactory.getLogger(LuftdatenInfoHandlerFactory.class);\n+\n+    @Activate\n+    public LuftdatenInfoHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\n+        HTTPHandler.init(httpClientFactory.getCommonHttpClient());\n+    }\n+\n+    @Override\n+    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n+        if (thingTypeUID.equals(LuftdatenInfoBindingConstants.THING_TYPE_PARTICULATE)\n+                || thingTypeUID.equals(LuftdatenInfoBindingConstants.THING_TYPE_CONDITIONS)\n+                || thingTypeUID.equals(LuftdatenInfoBindingConstants.THING_TYPE_NOISE)) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    @Override\n+    protected @Nullable ThingHandler createHandler(Thing thing) {\n+        // one handler for all", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMjIwOQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI4MzExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxMzoyMVrOGvYNsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNDoyNVrOGwNZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMjk3Ng==", "bodyText": "Can you put the field definition to the top of the class?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452332976", "createdAt": "2020-07-09T16:13:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;\n+    private Integer exact_location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDM0OQ==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204349", "createdAt": "2020-07-11T15:14:25Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;\n+    private Integer exact_location;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMjk3Ng=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI4NDI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxMzozOFrOGvYOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMTozOToxNFrOGwTjvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzE0Mg==", "bodyText": "Please use camel case.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String altitude;\n          \n          \n            \n                private String latitude;\n          \n          \n            \n                private String longtitude;\n          \n          \n            \n                private Integer indoor;\n          \n          \n            \n                private Integer exact_location;\n          \n          \n            \n                private String altitude;\n          \n          \n            \n                private String latitude;\n          \n          \n            \n                private String longtitude;\n          \n          \n            \n                private Integer indoor;\n          \n          \n            \n                private Integer exactLocation;", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452333142", "createdAt": "2020-07-09T16:13:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;\n+    private Integer exact_location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4NTkzMw==", "bodyText": "I think I cannot change this - name has to match exactly to the deliverd json key, right? That's why I ignored all checkstyle warnings in dto subfolder regarding camel case.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453185933", "createdAt": "2020-07-11T11:32:00Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;\n+    private Integer exact_location;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzE0Mg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIyNzk3NA==", "bodyText": "You can annotate the field with @SerializedName(\"exact_location\"). The field name can be anything, then.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453227974", "createdAt": "2020-07-11T19:44:45Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;\n+    private Integer exact_location;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzE0Mg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMwNTI3Nw==", "bodyText": "Perfect - looks good now and all checkstyle warnings are eliminated!", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453305277", "createdAt": "2020-07-12T11:39:14Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;\n+    private Integer exact_location;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzE0Mg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI4Njk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxNDoxOVrOGvYP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNTozM1rOGwNaBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzU1Mg==", "bodyText": "Typo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String longtitude;\n          \n          \n            \n                private String longitude;", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452333552", "createdAt": "2020-07-09T16:14:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDQ4NA==", "bodyText": "Corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204484", "createdAt": "2020-07-11T15:15:33Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzMzU1Mg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDI5MTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxNToxMVrOGvYSrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNjowN1rOGwNaPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNDI1NA==", "bodyText": "Primitive types should be used where possible.\nThere are several locations where you use complex types, where int would be sufficient. I didn't mark all of them.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Integer indoor;\n          \n          \n            \n                private int indoor;", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452334254", "createdAt": "2020-07-09T16:15:11Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDU0MA==", "bodyText": "Corrected in all DTO classes", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204540", "createdAt": "2020-07-11T15:16:07Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private Integer id;\n+    private String country;\n+\n+    public Integer getId() {\n+        return id;\n+    }\n+\n+    public void setId(Integer id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongtitude() {\n+        return longtitude;\n+    }\n+\n+    public void setLongtitude(String longtitude) {\n+        this.longtitude = longtitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(Integer indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public Integer getExact_location() {\n+        return exact_location;\n+    }\n+\n+    public void setExact_location(Integer exact_location) {\n+        this.exact_location = exact_location;\n+    }\n+\n+    private String altitude;\n+    private String latitude;\n+    private String longtitude;\n+    private Integer indoor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNDI1NA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMwMjIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxNzo1MFrOGvYZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNjozOVrOGwNaXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNTkwNA==", "bodyText": "This can be a constant. You could make it static final, all uppercase and move it to the top of the class. Also it's good practice to append the unit to the field name e.g. TIMEOUT_SEC.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452335904", "createdAt": "2020-07-09T16:17:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDU3Mw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204573", "createdAt": "2020-07-11T15:16:39Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNTkwNA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMwODEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoxOToyN1rOGvYc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNzozNlrOGwNasA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNjg2NA==", "bodyText": "You could declare an Enum for those constants.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452336864", "createdAt": "2020-07-09T16:19:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDY1Ng==", "bodyText": "Config, Update and Lifecycle Status adaption to enum", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204656", "createdAt": "2020-07-11T15:17:36Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNjg2NA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMxMzIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyMDo0MVrOGvYgBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxNzo1M1rOGwNayw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNzY2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n          \n          \n            \n                                        TimeUnit.SECONDS);\n          \n          \n            \n                                refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval,\n          \n          \n            \n                                        TimeUnit.MINUTES);", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452337669", "createdAt": "2020-07-09T16:20:41Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;\n+\n+    protected int updateStatus = -1;\n+    protected static final int UPDATE_OK = 0;\n+    protected static final int UPDATE_CONNECTION_ERROR = 1;\n+    protected static final int UPDATE_VALUE_ERROR = 2;\n+    protected static final int UPDATE_VALUE_EMPTY = 3;\n+\n+    protected static final int LC_UNKNOWN = -1;\n+    protected static final int LC_RUNNING = 0;\n+    protected static final int LC_INITIALIZING = 1;\n+    protected static final int LC_DISPOSED = 2;\n+    protected int lifecycleStatus = LC_UNKNOWN;\n+\n+    protected static final DecimalType UNDEF = new DecimalType(-1);\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LC_INITIALIZING;\n+        scheduler.execute(() -> {\n+            config = getConfigAs(LuftdatenInfoConfiguration.class);\n+            configStatus = checkConfig(config);\n+            if (configStatus == CONFIG_OK) {\n+                update();\n+                if (updateStatus == UPDATE_OK) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Start refresh job at interval {} min.\", refreshInterval);\n+                    if (refreshJob != null) {\n+                        refreshJob.cancel(true);\n+                    }\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n+                            TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDY4Mw==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204683", "createdAt": "2020-07-11T15:17:53Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;\n+\n+    protected int updateStatus = -1;\n+    protected static final int UPDATE_OK = 0;\n+    protected static final int UPDATE_CONNECTION_ERROR = 1;\n+    protected static final int UPDATE_VALUE_ERROR = 2;\n+    protected static final int UPDATE_VALUE_EMPTY = 3;\n+\n+    protected static final int LC_UNKNOWN = -1;\n+    protected static final int LC_RUNNING = 0;\n+    protected static final int LC_INITIALIZING = 1;\n+    protected static final int LC_DISPOSED = 2;\n+    protected int lifecycleStatus = LC_UNKNOWN;\n+\n+    protected static final DecimalType UNDEF = new DecimalType(-1);\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LC_INITIALIZING;\n+        scheduler.execute(() -> {\n+            config = getConfigAs(LuftdatenInfoConfiguration.class);\n+            configStatus = checkConfig(config);\n+            if (configStatus == CONFIG_OK) {\n+                update();\n+                if (updateStatus == UPDATE_OK) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Start refresh job at interval {} min.\", refreshInterval);\n+                    if (refreshJob != null) {\n+                        refreshJob.cancel(true);\n+                    }\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n+                            TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzNzY2OQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMxNzU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyMTo1MFrOGvYirA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTozMDoyMFrOGwNfRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODM0OA==", "bodyText": "Can you remove the empty line?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452338348", "createdAt": "2020-07-09T16:21:50Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;\n+\n+    protected int updateStatus = -1;\n+    protected static final int UPDATE_OK = 0;\n+    protected static final int UPDATE_CONNECTION_ERROR = 1;\n+    protected static final int UPDATE_VALUE_ERROR = 2;\n+    protected static final int UPDATE_VALUE_EMPTY = 3;\n+\n+    protected static final int LC_UNKNOWN = -1;\n+    protected static final int LC_RUNNING = 0;\n+    protected static final int LC_INITIALIZING = 1;\n+    protected static final int LC_DISPOSED = 2;\n+    protected int lifecycleStatus = LC_UNKNOWN;\n+\n+    protected static final DecimalType UNDEF = new DecimalType(-1);\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LC_INITIALIZING;\n+        scheduler.execute(() -> {\n+            config = getConfigAs(LuftdatenInfoConfiguration.class);\n+            configStatus = checkConfig(config);\n+            if (configStatus == CONFIG_OK) {\n+                update();\n+                if (updateStatus == UPDATE_OK) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Start refresh job at interval {} min.\", refreshInterval);\n+                    if (refreshJob != null) {\n+                        refreshJob.cancel(true);\n+                    }\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    switch (updateStatus) {\n+                        case UPDATE_CONNECTION_ERROR:\n+                            logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                            break;\n+                        case UPDATE_VALUE_ERROR:\n+                            logger.warn(\n+                                    \"Sensor values doesn't match - please check if Sensor ID is delivering the correct Thing channel values\");\n+                            break;\n+                        case UPDATE_VALUE_EMPTY:\n+                            logger.warn(\n+                                    \"No values deliverd by Sensor. Please check for valid Sensor ID in configuration\");\n+                            break;\n+                    }\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                logger.warn(\"Configuration not valid. Sensor ID as a number is mandatory!\");\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+            lifecycleStatus = LC_RUNNING;\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        lifecycleStatus = LC_DISPOSED;\n+    }\n+\n+    /**\n+     * Checks if config is valid - a) not null and b) sensorid is a number\n+     *\n+     * @param c\n+     * @return\n+     */\n+    private int checkConfig(@Nullable LuftdatenInfoConfiguration c) {\n+        if (c != null) {\n+            try {\n+                Integer.parseInt(c.sensorid);\n+                return CONFIG_OK;\n+            } catch (NumberFormatException t) {\n+                return CONFIG_SENSOR_NUMBER;\n+            }\n+        } else\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTgzMA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205830", "createdAt": "2020-07-11T15:30:20Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;\n+\n+    protected int updateStatus = -1;\n+    protected static final int UPDATE_OK = 0;\n+    protected static final int UPDATE_CONNECTION_ERROR = 1;\n+    protected static final int UPDATE_VALUE_ERROR = 2;\n+    protected static final int UPDATE_VALUE_EMPTY = 3;\n+\n+    protected static final int LC_UNKNOWN = -1;\n+    protected static final int LC_RUNNING = 0;\n+    protected static final int LC_INITIALIZING = 1;\n+    protected static final int LC_DISPOSED = 2;\n+    protected int lifecycleStatus = LC_UNKNOWN;\n+\n+    protected static final DecimalType UNDEF = new DecimalType(-1);\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LC_INITIALIZING;\n+        scheduler.execute(() -> {\n+            config = getConfigAs(LuftdatenInfoConfiguration.class);\n+            configStatus = checkConfig(config);\n+            if (configStatus == CONFIG_OK) {\n+                update();\n+                if (updateStatus == UPDATE_OK) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Start refresh job at interval {} min.\", refreshInterval);\n+                    if (refreshJob != null) {\n+                        refreshJob.cancel(true);\n+                    }\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    switch (updateStatus) {\n+                        case UPDATE_CONNECTION_ERROR:\n+                            logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                            break;\n+                        case UPDATE_VALUE_ERROR:\n+                            logger.warn(\n+                                    \"Sensor values doesn't match - please check if Sensor ID is delivering the correct Thing channel values\");\n+                            break;\n+                        case UPDATE_VALUE_EMPTY:\n+                            logger.warn(\n+                                    \"No values deliverd by Sensor. Please check for valid Sensor ID in configuration\");\n+                            break;\n+                    }\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                logger.warn(\"Configuration not valid. Sensor ID as a number is mandatory!\");\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+            lifecycleStatus = LC_RUNNING;\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        lifecycleStatus = LC_DISPOSED;\n+    }\n+\n+    /**\n+     * Checks if config is valid - a) not null and b) sensorid is a number\n+     *\n+     * @param c\n+     * @return\n+     */\n+    private int checkConfig(@Nullable LuftdatenInfoConfiguration c) {\n+        if (c != null) {\n+            try {\n+                Integer.parseInt(c.sensorid);\n+                return CONFIG_OK;\n+            } catch (NumberFormatException t) {\n+                return CONFIG_SENSOR_NUMBER;\n+            }\n+        } else\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODM0OA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMyNDgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/ConditionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyNDowNFrOGvYnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxODozM1rOGwNbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzOTU3OQ==", "bodyText": "Syntactical sugar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                Iterator<SensorDataValue> iter = valueList.iterator();\n          \n          \n            \n                                while (iter.hasNext()) {\n          \n          \n            \n                                    SensorDataValue v = iter.next();\n          \n          \n            \n                                valueList.forEach(v -> {", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452339579", "createdAt": "2020-07-09T16:24:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/ConditionHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import static org.openhab.binding.luftdateninfo.internal.LuftdatenInfoBindingConstants.*;\n+import static org.openhab.binding.luftdateninfo.internal.handler.HTTPHandler.*;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.NumberUtils;\n+\n+/**\n+ * The {@link ConditionHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ConditionHandler extends BaseSensorHandler {\n+\n+    protected DecimalType temperatureCache = UNDEF;\n+    protected DecimalType humidityCache = UNDEF;\n+    protected DecimalType pressureCache = UNDEF;\n+    protected DecimalType pressureSeaCache = UNDEF;\n+\n+    public ConditionHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public int updateChannels(@Nullable String json) {\n+        if (json != null) {\n+            List<SensorDataValue> valueList = HTTPHandler.getLatestValues(json);\n+            if (valueList != null) {\n+                if (HTTPHandler.isCondition(valueList)) {\n+                    Iterator<SensorDataValue> iter = valueList.iterator();\n+                    while (iter.hasNext()) {\n+                        SensorDataValue v = iter.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDczOA==", "bodyText": "Changed in several locations", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204738", "createdAt": "2020-07-11T15:18:33Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/ConditionHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import static org.openhab.binding.luftdateninfo.internal.LuftdatenInfoBindingConstants.*;\n+import static org.openhab.binding.luftdateninfo.internal.handler.HTTPHandler.*;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.NumberUtils;\n+\n+/**\n+ * The {@link ConditionHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ConditionHandler extends BaseSensorHandler {\n+\n+    protected DecimalType temperatureCache = UNDEF;\n+    protected DecimalType humidityCache = UNDEF;\n+    protected DecimalType pressureCache = UNDEF;\n+    protected DecimalType pressureSeaCache = UNDEF;\n+\n+    public ConditionHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public int updateChannels(@Nullable String json) {\n+        if (json != null) {\n+            List<SensorDataValue> valueList = HTTPHandler.getLatestValues(json);\n+            if (valueList != null) {\n+                if (HTTPHandler.isCondition(valueList)) {\n+                    Iterator<SensorDataValue> iter = valueList.iterator();\n+                    while (iter.hasNext()) {\n+                        SensorDataValue v = iter.next();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzOTU3OQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMzNzQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/ConditionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyNzowMVrOGvYvRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToxOToyNVrOGwNbUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MTU3NA==", "bodyText": "When using Units of Measure, this would look like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        temperatureCache = new DecimalType(NumberUtils.round(v.getValue(), 1));\n          \n          \n            \n                                        temperatureCache = QuantityType.valueOf(NumberUtils.round(v.getValue(), 1),\n          \n          \n            \n                                                SIUnits.CELSIUS);", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452341574", "createdAt": "2020-07-09T16:27:01Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/ConditionHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import static org.openhab.binding.luftdateninfo.internal.LuftdatenInfoBindingConstants.*;\n+import static org.openhab.binding.luftdateninfo.internal.handler.HTTPHandler.*;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.NumberUtils;\n+\n+/**\n+ * The {@link ConditionHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ConditionHandler extends BaseSensorHandler {\n+\n+    protected DecimalType temperatureCache = UNDEF;\n+    protected DecimalType humidityCache = UNDEF;\n+    protected DecimalType pressureCache = UNDEF;\n+    protected DecimalType pressureSeaCache = UNDEF;\n+\n+    public ConditionHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public int updateChannels(@Nullable String json) {\n+        if (json != null) {\n+            List<SensorDataValue> valueList = HTTPHandler.getLatestValues(json);\n+            if (valueList != null) {\n+                if (HTTPHandler.isCondition(valueList)) {\n+                    Iterator<SensorDataValue> iter = valueList.iterator();\n+                    while (iter.hasNext()) {\n+                        SensorDataValue v = iter.next();\n+                        if (v.getValue_type().equals(TEMPERATURE)) {\n+                            temperatureCache = new DecimalType(NumberUtils.round(v.getValue(), 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDgxNw==", "bodyText": "All values adapted to QuantityType", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204817", "createdAt": "2020-07-11T15:19:25Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/ConditionHandler.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import static org.openhab.binding.luftdateninfo.internal.LuftdatenInfoBindingConstants.*;\n+import static org.openhab.binding.luftdateninfo.internal.handler.HTTPHandler.*;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.NumberUtils;\n+\n+/**\n+ * The {@link ConditionHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ConditionHandler extends BaseSensorHandler {\n+\n+    protected DecimalType temperatureCache = UNDEF;\n+    protected DecimalType humidityCache = UNDEF;\n+    protected DecimalType pressureCache = UNDEF;\n+    protected DecimalType pressureSeaCache = UNDEF;\n+\n+    public ConditionHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public int updateChannels(@Nullable String json) {\n+        if (json != null) {\n+            List<SensorDataValue> valueList = HTTPHandler.getLatestValues(json);\n+            if (valueList != null) {\n+                if (HTTPHandler.isCondition(valueList)) {\n+                    Iterator<SensorDataValue> iter = valueList.iterator();\n+                    while (iter.hasNext()) {\n+                        SensorDataValue v = iter.next();\n+                        if (v.getValue_type().equals(TEMPERATURE)) {\n+                            temperatureCache = new DecimalType(NumberUtils.round(v.getValue(), 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MTU3NA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM0MzM4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyODozN1rOGvYzEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyMDozMFrOGwNbww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MjU0Nw==", "bodyText": "Logging to info should be used rarely. This could be debug or warn.\nDon't you want to log the other error codes, too? E.g. 500. You could log in the default case of the switch.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452342547", "createdAt": "2020-07-09T16:28:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDkzMQ==", "bodyText": "Switched to WARN level", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204931", "createdAt": "2020-07-11T15:20:30Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MjU0Nw=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM1MDMxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozMDoyMVrOGvY3QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyMDo1MFrOGwNb-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MzYxNg==", "bodyText": "You might want to log the exception's message\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        logger.warn(\"Exception when calling {}\", url);\n          \n          \n            \n                        logger.warn(\"Exception when calling {}: {}\", url, e.getMessage());", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452343616", "createdAt": "2020-07-09T16:30:21Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);\n+                    return null;\n+                default:\n+                    return null;\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Exception when calling {}\", url);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNDk4NA==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453204984", "createdAt": "2020-07-11T15:20:50Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);\n+                    return null;\n+                default:\n+                    return null;\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Exception when calling {}\", url);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0MzYxNg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM1MTgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozMDo0NlrOGvY4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyMTozMFrOGwNcNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0Mzg3MA==", "bodyText": "Can you make this a final field to save resources?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452343870", "createdAt": "2020-07-09T16:30:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);\n+                    return null;\n+                default:\n+                    return null;\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Exception when calling {}\", url);\n+            return null;\n+        }\n+    }\n+\n+    public static @Nullable List<SensorDataValue> getLatestValues(String response) {\n+        Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTA0NQ==", "bodyText": "Should be ok - change is done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205045", "createdAt": "2020-07-11T15:21:30Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);\n+                    return null;\n+                default:\n+                    return null;\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Exception when calling {}\", url);\n+            return null;\n+        }\n+    }\n+\n+    public static @Nullable List<SensorDataValue> getLatestValues(String response) {\n+        Gson gson = new Gson();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0Mzg3MA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM1NDY2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozMTozNlrOGvY5-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMTozOTozOVrOGwTj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<SensorDataValue> sensordatavalues;\n          \n          \n            \n                private List<SensorDataValue> sensorDataValues;", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452344315", "createdAt": "2020-07-09T16:31:36Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import java.util.List;\n+\n+/**\n+ * The {@link SensorData} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorData {\n+    private Long id;\n+    private String timestamp;\n+    private Integer sampling_rate;\n+    private List<SensorDataValue> sensordatavalues;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4NjAwNg==", "bodyText": "Same here - field is exactly named after Json key", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453186006", "createdAt": "2020-07-11T11:33:07Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import java.util.List;\n+\n+/**\n+ * The {@link SensorData} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorData {\n+    private Long id;\n+    private String timestamp;\n+    private Integer sampling_rate;\n+    private List<SensorDataValue> sensordatavalues;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDMxNQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMwNTMyMg==", "bodyText": "Solved with SerializedName annotation", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453305322", "createdAt": "2020-07-12T11:39:39Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import java.util.List;\n+\n+/**\n+ * The {@link SensorData} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorData {\n+    private Long id;\n+    private String timestamp;\n+    private Integer sampling_rate;\n+    private List<SensorDataValue> sensordatavalues;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDMxNQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM1NTQwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozMTo0NlrOGvY6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMTo0NTo1NlrOGwTmtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDQzNg==", "bodyText": "See above", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452344436", "createdAt": "2020-07-09T16:31:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import java.util.List;\n+\n+/**\n+ * The {@link SensorData} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorData {\n+    private Long id;\n+    private String timestamp;\n+    private Integer sampling_rate;\n+    private List<SensorDataValue> sensordatavalues;\n+    private Location location;\n+    private Sensor sensor;\n+\n+    @Override\n+    public String toString() {\n+        return id + timestamp;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTimeStamp() {\n+        return timestamp;\n+    }\n+\n+    public void setTimeStamp(String timeStamp) {\n+        this.timestamp = timeStamp;\n+    }\n+\n+    public Integer getSampling_rate() {\n+        return sampling_rate;\n+    }\n+\n+    public void setSampling_rate(Integer sampling_rate) {\n+        this.sampling_rate = sampling_rate;\n+    }\n+\n+    public List<SensorDataValue> getSensordatavalues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTA4Mw==", "bodyText": "Same here - field is exactly named after Json key", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205083", "createdAt": "2020-07-11T15:22:05Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import java.util.List;\n+\n+/**\n+ * The {@link SensorData} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorData {\n+    private Long id;\n+    private String timestamp;\n+    private Integer sampling_rate;\n+    private List<SensorDataValue> sensordatavalues;\n+    private Location location;\n+    private Sensor sensor;\n+\n+    @Override\n+    public String toString() {\n+        return id + timestamp;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTimeStamp() {\n+        return timestamp;\n+    }\n+\n+    public void setTimeStamp(String timeStamp) {\n+        this.timestamp = timeStamp;\n+    }\n+\n+    public Integer getSampling_rate() {\n+        return sampling_rate;\n+    }\n+\n+    public void setSampling_rate(Integer sampling_rate) {\n+        this.sampling_rate = sampling_rate;\n+    }\n+\n+    public List<SensorDataValue> getSensordatavalues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDQzNg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMwNjAzOA==", "bodyText": "Solved with SerializedName annotation", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453306038", "createdAt": "2020-07-12T11:45:56Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorData.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import java.util.List;\n+\n+/**\n+ * The {@link SensorData} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorData {\n+    private Long id;\n+    private String timestamp;\n+    private Integer sampling_rate;\n+    private List<SensorDataValue> sensordatavalues;\n+    private Location location;\n+    private Sensor sensor;\n+\n+    @Override\n+    public String toString() {\n+        return id + timestamp;\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public String getTimeStamp() {\n+        return timestamp;\n+    }\n+\n+    public void setTimeStamp(String timeStamp) {\n+        this.timestamp = timeStamp;\n+    }\n+\n+    public Integer getSampling_rate() {\n+        return sampling_rate;\n+    }\n+\n+    public void setSampling_rate(Integer sampling_rate) {\n+        this.sampling_rate = sampling_rate;\n+    }\n+\n+    public List<SensorDataValue> getSensordatavalues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NDQzNg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM2MDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozMzowNFrOGvY9mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNDoxMlrOGwNdEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NTI0MQ==", "bodyText": "Config can be null at this point.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452345241", "createdAt": "2020-07-09T16:33:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;\n+\n+    protected int updateStatus = -1;\n+    protected static final int UPDATE_OK = 0;\n+    protected static final int UPDATE_CONNECTION_ERROR = 1;\n+    protected static final int UPDATE_VALUE_ERROR = 2;\n+    protected static final int UPDATE_VALUE_EMPTY = 3;\n+\n+    protected static final int LC_UNKNOWN = -1;\n+    protected static final int LC_RUNNING = 0;\n+    protected static final int LC_INITIALIZING = 1;\n+    protected static final int LC_DISPOSED = 2;\n+    protected int lifecycleStatus = LC_UNKNOWN;\n+\n+    protected static final DecimalType UNDEF = new DecimalType(-1);\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LC_INITIALIZING;\n+        scheduler.execute(() -> {\n+            config = getConfigAs(LuftdatenInfoConfiguration.class);\n+            configStatus = checkConfig(config);\n+            if (configStatus == CONFIG_OK) {\n+                update();\n+                if (updateStatus == UPDATE_OK) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Start refresh job at interval {} min.\", refreshInterval);\n+                    if (refreshJob != null) {\n+                        refreshJob.cancel(true);\n+                    }\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    switch (updateStatus) {\n+                        case UPDATE_CONNECTION_ERROR:\n+                            logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                            break;\n+                        case UPDATE_VALUE_ERROR:\n+                            logger.warn(\n+                                    \"Sensor values doesn't match - please check if Sensor ID is delivering the correct Thing channel values\");\n+                            break;\n+                        case UPDATE_VALUE_EMPTY:\n+                            logger.warn(\n+                                    \"No values deliverd by Sensor. Please check for valid Sensor ID in configuration\");\n+                            break;\n+                    }\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                logger.warn(\"Configuration not valid. Sensor ID as a number is mandatory!\");\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+            lifecycleStatus = LC_RUNNING;\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        lifecycleStatus = LC_DISPOSED;\n+    }\n+\n+    /**\n+     * Checks if config is valid - a) not null and b) sensorid is a number\n+     *\n+     * @param c\n+     * @return\n+     */\n+    private int checkConfig(@Nullable LuftdatenInfoConfiguration c) {\n+        if (c != null) {\n+            try {\n+                Integer.parseInt(c.sensorid);\n+                return CONFIG_OK;\n+            } catch (NumberFormatException t) {\n+                return CONFIG_SENSOR_NUMBER;\n+            }\n+        } else\n+\n+        {\n+            return CONFIG_IS_NULL;\n+        }\n+    }\n+\n+    public int getLifecycleStatus() {\n+        return lifecycleStatus;\n+    }\n+\n+    protected void update() {\n+        String response = HTTPHandler.getResponse(config.sensorid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTI2NA==", "bodyText": "Shouldn't be the case - update & scheduler are only started if initialize is checked with OK", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205264", "createdAt": "2020-07-11T15:24:12Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.DecimalType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected @Nullable LuftdatenInfoConfiguration config;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+    protected int refreshInterval = 5;\n+\n+    protected int configStatus = -1;\n+    protected static final int CONFIG_OK = 0;\n+    protected static final int CONFIG_IS_NULL = 1;\n+    protected static final int CONFIG_SENSOR_IS_NULL = 2;\n+    protected static final int CONFIG_SENSOR_NUMBER = 3;\n+\n+    protected int updateStatus = -1;\n+    protected static final int UPDATE_OK = 0;\n+    protected static final int UPDATE_CONNECTION_ERROR = 1;\n+    protected static final int UPDATE_VALUE_ERROR = 2;\n+    protected static final int UPDATE_VALUE_EMPTY = 3;\n+\n+    protected static final int LC_UNKNOWN = -1;\n+    protected static final int LC_RUNNING = 0;\n+    protected static final int LC_INITIALIZING = 1;\n+    protected static final int LC_DISPOSED = 2;\n+    protected int lifecycleStatus = LC_UNKNOWN;\n+\n+    protected static final DecimalType UNDEF = new DecimalType(-1);\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LC_INITIALIZING;\n+        scheduler.execute(() -> {\n+            config = getConfigAs(LuftdatenInfoConfiguration.class);\n+            configStatus = checkConfig(config);\n+            if (configStatus == CONFIG_OK) {\n+                update();\n+                if (updateStatus == UPDATE_OK) {\n+                    updateStatus(ThingStatus.ONLINE);\n+                    logger.debug(\"Start refresh job at interval {} min.\", refreshInterval);\n+                    if (refreshJob != null) {\n+                        refreshJob.cancel(true);\n+                    }\n+                    refreshJob = scheduler.scheduleWithFixedDelay(this::update, 5, refreshInterval * 60,\n+                            TimeUnit.SECONDS);\n+                } else {\n+                    switch (updateStatus) {\n+                        case UPDATE_CONNECTION_ERROR:\n+                            logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                            break;\n+                        case UPDATE_VALUE_ERROR:\n+                            logger.warn(\n+                                    \"Sensor values doesn't match - please check if Sensor ID is delivering the correct Thing channel values\");\n+                            break;\n+                        case UPDATE_VALUE_EMPTY:\n+                            logger.warn(\n+                                    \"No values deliverd by Sensor. Please check for valid Sensor ID in configuration\");\n+                            break;\n+                    }\n+                    updateStatus(ThingStatus.OFFLINE);\n+                }\n+            } else {\n+                logger.warn(\"Configuration not valid. Sensor ID as a number is mandatory!\");\n+                updateStatus(ThingStatus.OFFLINE);\n+            }\n+            lifecycleStatus = LC_RUNNING;\n+        });\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        if (refreshJob != null) {\n+            refreshJob.cancel(true);\n+        }\n+        lifecycleStatus = LC_DISPOSED;\n+    }\n+\n+    /**\n+     * Checks if config is valid - a) not null and b) sensorid is a number\n+     *\n+     * @param c\n+     * @return\n+     */\n+    private int checkConfig(@Nullable LuftdatenInfoConfiguration c) {\n+        if (c != null) {\n+            try {\n+                Integer.parseInt(c.sensorid);\n+                return CONFIG_OK;\n+            } catch (NumberFormatException t) {\n+                return CONFIG_SENSOR_NUMBER;\n+            }\n+        } else\n+\n+        {\n+            return CONFIG_IS_NULL;\n+        }\n+    }\n+\n+    public int getLifecycleStatus() {\n+        return lifecycleStatus;\n+    }\n+\n+    protected void update() {\n+        String response = HTTPHandler.getResponse(config.sensorid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NTI0MQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDM2NjgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjozNDo1OFrOGvZBxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNDozMFrOGwNdLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NjMwOA==", "bodyText": "You can fix the compiler warning by storing commonHttpClient to a local variable and do a null check on that.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452346308", "createdAt": "2020-07-09T16:34:58Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTI5NQ==", "bodyText": "Yes, it worked", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205295", "createdAt": "2020-07-11T15:24:30Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0NjMwOA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQwNDAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo0NDo0NlrOGvZZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNjo0MVrOGwNd7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1MjMwOQ==", "bodyText": "You could have some fun with streams here. You could try something like this. Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Iterator<SensorDataValue> iter = valueList.iterator();\n          \n          \n            \n                    while (iter.hasNext()) {\n          \n          \n            \n                        SensorDataValue v = iter.next();\n          \n          \n            \n                        if (!(v.getValue_type().equals(P1) || v.getValue_type().equals(P2))) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                    return true;\n          \n          \n            \n                    return valueList.stream().map(v -> v.getValue_type()).filter(t -> t.equals(P1) || t.equals(P2)).findAny().isPresent();", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452352309", "createdAt": "2020-07-09T16:44:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);\n+                    return null;\n+                default:\n+                    return null;\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Exception when calling {}\", url);\n+            return null;\n+        }\n+    }\n+\n+    public static @Nullable List<SensorDataValue> getLatestValues(String response) {\n+        Gson gson = new Gson();\n+        SensorData[] valueArray = gson.fromJson(response, SensorData[].class);\n+        if (valueArray.length == 0) {\n+            return null;\n+        } else if (valueArray.length == 1) {\n+            SensorData v = valueArray[0];\n+            return v.getSensordatavalues();\n+        } else if (valueArray.length > 1) {\n+            // declare first item as latest\n+            SensorData latestData = valueArray[0];\n+            String latestTimeStr = latestData.getTimeStamp();\n+            Date latestTime = DateTimeUtils.toDate(latestTimeStr);\n+            if (latestTime == null) {\n+                logDateConversionError(response, latestData);\n+            }\n+            for (int i = 1; i < valueArray.length; i++) {\n+                SensorData iterData = valueArray[i];\n+                String iterTimeStr = iterData.getTimeStamp();\n+                Date iterTime = DateTimeUtils.toDate(iterTimeStr);\n+                if (iterTime == null) {\n+                    logDateConversionError(response, latestData);\n+                }\n+                if (iterTime != null && latestTime != null) {\n+                    if (latestTime.before(iterTime)) {\n+                        // found item is newer - take it as latest\n+                        latestTime = iterTime;\n+                        latestData = iterData;\n+                    } // else - found item is older - nothing to do\n+\n+                } else {\n+                    logger.warn(\"One or two dates cannot be decoded 1) {} 2) {}\", iterTimeStr, latestTimeStr);\n+                }\n+            }\n+            return latestData.getSensordatavalues();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static void logDateConversionError(final String response, final Object dto) {\n+        logger.warn(\"Unable to get timestamp\");\n+        logger.warn(\"Response: {}\", response);\n+        Gson gson = new Gson();\n+        String json = gson.toJson(dto);\n+        logger.warn(\"GSon: {}\", json);\n+    }\n+\n+    public static boolean isParticulate(@Nullable List<SensorDataValue> valueList) {\n+        if (valueList == null) {\n+            return false;\n+        }\n+        Iterator<SensorDataValue> iter = valueList.iterator();\n+        while (iter.hasNext()) {\n+            SensorDataValue v = iter.next();\n+            if (!(v.getValue_type().equals(P1) || v.getValue_type().equals(P2))) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTQ4NQ==", "bodyText": "Nice - changed for all isXYZ functions", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205485", "createdAt": "2020-07-11T15:26:41Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private static final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static @Nullable String getResponse(String sensorId) {\n+        if (commonHttpClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        }\n+        String url = sensorUrl + sensorId + \"/\";\n+        try {\n+            ContentResponse contentResponse = commonHttpClient.newRequest(url).timeout(10, TimeUnit.SECONDS).send();\n+            int httpStatus = contentResponse.getStatus();\n+            String content = contentResponse.getContentAsString();\n+            logger.debug(\"Sensor response: {}\", httpStatus);\n+            switch (httpStatus) {\n+                case 200:\n+                    return content;\n+                case 400:\n+                case 401:\n+                case 404:\n+                    logger.info(\"Sensor response: {}\", httpStatus);\n+                    return null;\n+                default:\n+                    return null;\n+            }\n+        } catch (InterruptedException | TimeoutException | ExecutionException e) {\n+            logger.warn(\"Exception when calling {}\", url);\n+            return null;\n+        }\n+    }\n+\n+    public static @Nullable List<SensorDataValue> getLatestValues(String response) {\n+        Gson gson = new Gson();\n+        SensorData[] valueArray = gson.fromJson(response, SensorData[].class);\n+        if (valueArray.length == 0) {\n+            return null;\n+        } else if (valueArray.length == 1) {\n+            SensorData v = valueArray[0];\n+            return v.getSensordatavalues();\n+        } else if (valueArray.length > 1) {\n+            // declare first item as latest\n+            SensorData latestData = valueArray[0];\n+            String latestTimeStr = latestData.getTimeStamp();\n+            Date latestTime = DateTimeUtils.toDate(latestTimeStr);\n+            if (latestTime == null) {\n+                logDateConversionError(response, latestData);\n+            }\n+            for (int i = 1; i < valueArray.length; i++) {\n+                SensorData iterData = valueArray[i];\n+                String iterTimeStr = iterData.getTimeStamp();\n+                Date iterTime = DateTimeUtils.toDate(iterTimeStr);\n+                if (iterTime == null) {\n+                    logDateConversionError(response, latestData);\n+                }\n+                if (iterTime != null && latestTime != null) {\n+                    if (latestTime.before(iterTime)) {\n+                        // found item is newer - take it as latest\n+                        latestTime = iterTime;\n+                        latestData = iterData;\n+                    } // else - found item is older - nothing to do\n+\n+                } else {\n+                    logger.warn(\"One or two dates cannot be decoded 1) {} 2) {}\", iterTimeStr, latestTimeStr);\n+                }\n+            }\n+            return latestData.getSensordatavalues();\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    public static void logDateConversionError(final String response, final Object dto) {\n+        logger.warn(\"Unable to get timestamp\");\n+        logger.warn(\"Response: {}\", response);\n+        Gson gson = new Gson();\n+        String json = gson.toJson(dto);\n+        logger.warn(\"GSon: {}\", json);\n+    }\n+\n+    public static boolean isParticulate(@Nullable List<SensorDataValue> valueList) {\n+        if (valueList == null) {\n+            return false;\n+        }\n+        Iterator<SensorDataValue> iter = valueList.iterator();\n+        while (iter.hasNext()) {\n+            SensorDataValue v = iter.next();\n+            if (!(v.getValue_type().equals(P1) || v.getValue_type().equals(P2))) {\n+                return false;\n+            }\n+        }\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1MjMwOQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQxMzY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo0NzoyMFrOGvZfPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyOTozMFrOGwNe5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1Mzg1Mw==", "bodyText": "This could be final (and upper case, then)", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452353853", "createdAt": "2020-07-09T16:47:20Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DateTimeUtils} class provides helpers for converting Dates and Times.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DateTimeUtils {\n+    private static SimpleDateFormat sdf = new SimpleDateFormat(\"YYYY-mm-dd hh:mm:ss\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTczMw==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205733", "createdAt": "2020-07-11T15:29:30Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DateTimeUtils} class provides helpers for converting Dates and Times.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DateTimeUtils {\n+    private static SimpleDateFormat sdf = new SimpleDateFormat(\"YYYY-mm-dd hh:mm:ss\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1Mzg1Mw=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQxNTE1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo0Nzo0NFrOGvZgLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMTozNDoyNFrOGwMSNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NDA5Mw==", "bodyText": "Is there a reason why this is synchronized?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452354093", "createdAt": "2020-07-09T16:47:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DateTimeUtils} class provides helpers for converting Dates and Times.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DateTimeUtils {\n+    private static SimpleDateFormat sdf = new SimpleDateFormat(\"YYYY-mm-dd hh:mm:ss\");\n+\n+    public static synchronized @Nullable Date toDate(String dateTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4NjEwMA==", "bodyText": "Without synchronize I get a checkstyle warning: https://pmd.github.io/pmd-6.7.0/pmd_rules_java_multithreading.html#unsynchronizedstaticdateformatter", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453186100", "createdAt": "2020-07-11T11:34:24Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DateTimeUtils} class provides helpers for converting Dates and Times.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DateTimeUtils {\n+    private static SimpleDateFormat sdf = new SimpleDateFormat(\"YYYY-mm-dd hh:mm:ss\");\n+\n+    public static synchronized @Nullable Date toDate(String dateTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NDA5Mw=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQxNjIzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo0Nzo1OVrOGvZg2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNjo1N1rOGwNeAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NDI2NA==", "bodyText": "You might want to log this error.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452354264", "createdAt": "2020-07-09T16:47:59Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DateTimeUtils} class provides helpers for converting Dates and Times.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DateTimeUtils {\n+    private static SimpleDateFormat sdf = new SimpleDateFormat(\"YYYY-mm-dd hh:mm:ss\");\n+\n+    public static synchronized @Nullable Date toDate(String dateTime) {\n+        try {\n+            return sdf.parse(dateTime);\n+        } catch (ParseException | NumberFormatException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTUwNg==", "bodyText": "Done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205506", "createdAt": "2020-07-11T15:26:57Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/DateTimeUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The {@link DateTimeUtils} class provides helpers for converting Dates and Times.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class DateTimeUtils {\n+    private static SimpleDateFormat sdf = new SimpleDateFormat(\"YYYY-mm-dd hh:mm:ss\");\n+\n+    public static synchronized @Nullable Date toDate(String dateTime) {\n+        try {\n+            return sdf.parse(dateTime);\n+        } catch (ParseException | NumberFormatException e) {\n+            return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NDI2NA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQyMDM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_xx_XX.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo0OToxMlrOGvZjcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyOToxMVrOGwNewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NDkzMQ==", "bodyText": "Did this file found its way accidentally into your binding?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452354931", "createdAt": "2020-07-09T16:49:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_xx_XX.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTY5OA==", "bodyText": "Yep - removed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205698", "createdAt": "2020-07-11T15:29:11Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_xx_XX.properties", "diffHunk": "@@ -0,0 +1,17 @@\n+# FIXME: please substitute the xx_XX with a proper locale, ie. de_DE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NDkzMQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQyNjE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1MDo0NFrOGvZnJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNzoxNFrOGwNeHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NTg3OQ==", "bodyText": "Is the sensor ID an integer?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n          \n          \n            \n            \t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452355879", "createdAt": "2020-07-09T16:50:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTUzMw==", "bodyText": "Changed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205533", "createdAt": "2020-07-11T15:27:14Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NTg3OQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQyODYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1MToyOVrOGvZoww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyODo0OVrOGwNeow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NjI5MQ==", "bodyText": "Units of Measure\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<label>Humidity</label>\n          \n          \n            \n            \t\t<label>Humidity:Dimensionless</label>", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452356291", "createdAt": "2020-07-09T16:51:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\" />\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\" />\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTY2Nw==", "bodyText": "Done for all values", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205667", "createdAt": "2020-07-11T15:28:49Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\" />\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\" />\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NjI5MQ=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQzMjk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1Mjo0NlrOGvZrqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNzozNlrOGwNeVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NzAzMg==", "bodyText": "Words in labels should be capitalized. See https://www.openhab.org/docs/developer/bindings/thing-xml.html#formatting-labels-and-descriptions", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452357032", "createdAt": "2020-07-09T16:52:46Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\" />\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\" />\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure</label>\n+\t\t<description>Atmospheric Pressure from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-sea-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure sea level</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTU5MA==", "bodyText": "Corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205590", "createdAt": "2020-07-11T15:27:36Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\" />\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\" />\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure</label>\n+\t\t<description>Atmospheric Pressure from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-sea-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure sea level</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NzAzMg=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQzNDUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1MzowOFrOGvZslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyNzo1MFrOGwNeaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NzI3MA==", "bodyText": "Same for below\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<description>Minimum noise level (last 2,5 minutes) from the selected Sensor ID</description>\n          \n          \n            \n            \t\t<description>Minimum noise level (last 2.5 minutes) from the selected Sensor ID</description>", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452357270", "createdAt": "2020-07-09T16:53:08Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\" />\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\" />\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure</label>\n+\t\t<description>Atmospheric Pressure from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-sea-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure sea level</label>\n+\t\t<description>Atmospheric Pressure at sea level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-eq-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Noise EQ</label>\n+\t\t<description>Average noise level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-min-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Min Noise</label>\n+\t\t<description>Minimum noise level (last 2,5 minutes) from the selected Sensor ID</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTYwOA==", "bodyText": "Corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205608", "createdAt": "2020-07-11T15:27:50Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,105 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\" />\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\t\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\" />\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\" />\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\" />\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\" />\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\" />\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\" />\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t\t<parameter name=\"sensorid\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity</label>\n+\t\t<description>Humidity from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure</label>\n+\t\t<description>Atmospheric Pressure from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-sea-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure sea level</label>\n+\t\t<description>Atmospheric Pressure at sea level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-eq-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Noise EQ</label>\n+\t\t<description>Average noise level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-min-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Min Noise</label>\n+\t\t<description>Minimum noise level (last 2,5 minutes) from the selected Sensor ID</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1NzI3MA=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQzOTI3OnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjo1NDozMlrOGvZvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNToyODoxOVrOGwNehg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1ODA1Mw==", "bodyText": "Can you remove this new line from your PR?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r452358053", "createdAt": "2020-07-09T16:54:32Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNTYzOA==", "bodyText": "Sure - done", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453205638", "createdAt": "2020-07-11T15:28:19Z", "author": {"login": "weymann"}, "path": "bundles/pom.xml", "diffHunk": "@@ -1,5 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM1ODA1Mw=="}, "originalCommit": {"oid": "6996467c5ab723d3e7402fb62dad898cfd382190"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQzNjY4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODowOTo0OVrOGwz9lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxNzoxNlrOGxTOMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjE4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n          \n          \n            \n            With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openHAB.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453836180", "createdAt": "2020-07-13T18:09:49Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0ODMzNw==", "bodyText": "Will be fixed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454348337", "createdAt": "2020-07-14T13:17:16Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjE4MA=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ0MDYzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxMDo1NlrOGw0AAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxNzo0NFrOGxTPVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n          \n          \n            \n            * Choose your desired value in bottom list - now only the Sensors are displayed which are supporting this", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453836803", "createdAt": "2020-07-13T18:10:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+| Name               | Thing Type ID | Description                                                                                            |\n+|--------------------|---------------|--------------------------------------------------------------------------------------------------------|\n+| Particulate Sensor | particulate   | measure particulate matter PM2.5 and PM10                                                              |\n+| Conditions Sensor  | condition     | measures environment conditions like temperature, humidity and some also provides atmospheric pressure |\n+| Noise Sensor       | noise         | measures noise exposures in the environment                                                            |\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0ODYyOQ==", "bodyText": "Will be fixed!", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454348629", "createdAt": "2020-07-14T13:17:44Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+| Name               | Thing Type ID | Description                                                                                            |\n+|--------------------|---------------|--------------------------------------------------------------------------------------------------------|\n+| Particulate Sensor | particulate   | measure particulate matter PM2.5 and PM10                                                              |\n+| Conditions Sensor  | condition     | measures environment conditions like temperature, humidity and some also provides atmospheric pressure |\n+| Noise Sensor       | noise         | measures noise exposures in the environment                                                            |\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjgwMw=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ0MTEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxMTowNVrOGw0AVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxODoxNFrOGxTQqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjg4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n          \n          \n            \n            * Click on your / any Sensor and the ID is displayed in the top right corner. Note: Sensor ID is just the number without beginning hash #", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453836887", "createdAt": "2020-07-13T18:11:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+| Name               | Thing Type ID | Description                                                                                            |\n+|--------------------|---------------|--------------------------------------------------------------------------------------------------------|\n+| Particulate Sensor | particulate   | measure particulate matter PM2.5 and PM10                                                              |\n+| Conditions Sensor  | condition     | measures environment conditions like temperature, humidity and some also provides atmospheric pressure |\n+| Noise Sensor       | noise         | measures noise exposures in the environment                                                            |\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0ODk3MQ==", "bodyText": "Fixed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454348971", "createdAt": "2020-07-14T13:18:14Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+| Name               | Thing Type ID | Description                                                                                            |\n+|--------------------|---------------|--------------------------------------------------------------------------------------------------------|\n+| Particulate Sensor | particulate   | measure particulate matter PM2.5 and PM10                                                              |\n+| Conditions Sensor  | condition     | measures environment conditions like temperature, humidity and some also provides atmospheric pressure |\n+| Noise Sensor       | noise         | measures noise exposures in the environment                                                            |\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNjg4Nw=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ0NzA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxMjo1NlrOGw0EQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxMjo1NlrOGw0EQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgzNzg5MA==", "bodyText": "The user can choose the unit himself now, due to Units of Measure.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | temperature          | Number:Temperature   | current temperature in degrees Celsius |\n          \n          \n            \n            | temperature          | Number:Temperature   | current temperature |", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453837890", "createdAt": "2020-07-13T18:12:56Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# LuftdatenInfo Binding\n+\n+<img style=\"float: right;\" src=\"doc/logo-rund.png\">\n+Binding for the Sensor Community <a href=https://luftdaten.info/>luftdaten.info</a>. The community provides instructions to build sensors on your own and they can be integrated into the database.\n+With this binding you can integrate your sensor, a sensor nearby or even any sensors you want into openhab.\n+\n+## Supported Things\n+\n+Three Things are supported\n+\n+| Name               | Thing Type ID | Description                                                                                            |\n+|--------------------|---------------|--------------------------------------------------------------------------------------------------------|\n+| Particulate Sensor | particulate   | measure particulate matter PM2.5 and PM10                                                              |\n+| Conditions Sensor  | condition     | measures environment conditions like temperature, humidity and some also provides atmospheric pressure |\n+| Noise Sensor       | noise         | measures noise exposures in the environment                                                            |\n+\n+## Discovery\n+\n+There's no auto discovery. See Thing configuration how to setup a Sensor.\n+\n+## Thing Configuration\n+\n+| Parameter       | Description                                                          |\n+|-----------------|----------------------------------------------------------------------|\n+| sensorid        | Sensor ID obtained from https://deutschland.maps.sensor.community/   |\n+\n+Perform the following steps to get the appropriate Sensor ID\n+\n+* Go to to [luftdaten.info map](https://deutschland.maps.sensor.community/)\n+* Choose your wanted value in bottom list - now only the Sensors are displayed which are supporting this\n+* Click on your / any Sensor and the ID is displayed in the top right corner.Note: Sensor ID is just the number without beginning hash #\n+* Enter this Sensor ID into the thing configuration\n+\n+![Luftdaten.info Logo](doc/LuftdatenInfo-Map.png)\n+\n+## Channels\n+\n+### Particulate Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| pm25                 | Number:Density       | [Ultrafine particulates](https://en.wikipedia.org/wiki/Particulates#Size,_shape_and_solubility_matter) microgram per cubic meter |\n+| pm100                | Number:Density       | [Coarse particulate matter](https://en.wikipedia.org/wiki/Particulates#Size,_shape_and_solubility_matter) microgram per cubic meter  |\n+\n+### Conditions Sensor \n+\n+| Channel ID           | Item Type            | Description                              |\n+|----------------------|----------------------|------------------------------------------|\n+| temperature          | Number:Temperature   | current temperature in degrees Celsius |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ2NDQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxNzozOFrOGw0PAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoyMDoyOFrOGxTWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MDY0Mg==", "bodyText": "Syntactical sugar\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SerializedName(value = \"exact_location\")\n          \n          \n            \n                @SerializedName(\"exact_location\")", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453840642", "createdAt": "2020-07-13T18:17:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private int id;\n+    private String country;\n+    private String altitude;\n+    private String latitude;\n+    private String longitude;\n+    private int indoor;\n+    @SerializedName(value = \"exact_location\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1MDQwOQ==", "bodyText": "Ok, changed in all occurences", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454350409", "createdAt": "2020-07-14T13:20:28Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private int id;\n+    private String country;\n+    private String altitude;\n+    private String latitude;\n+    private String longitude;\n+    private int indoor;\n+    @SerializedName(value = \"exact_location\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MDY0Mg=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ2NjIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoxODowNVrOGw0QAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoyNzoyNFrOGxToHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MDg5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void setExactLocation(Integer exactLocation) {\n          \n          \n            \n                public void setExactLocation(int exactLocation) {", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453840899", "createdAt": "2020-07-13T18:18:05Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private int id;\n+    private String country;\n+    private String altitude;\n+    private String latitude;\n+    private String longitude;\n+    private int indoor;\n+    @SerializedName(value = \"exact_location\")\n+    private int exactLocation;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongitude() {\n+        return longitude;\n+    }\n+\n+    public void setLongitude(String longitude) {\n+        this.longitude = longitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(int indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public int getExactLocation() {\n+        return exactLocation;\n+    }\n+\n+    public void setExactLocation(Integer exactLocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1NDk3Mg==", "bodyText": "Ups, missed this correction from first review", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454354972", "createdAt": "2020-07-14T13:27:24Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/Location.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link LuftdatenInfo} class definition for Logging identification\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class Location {\n+    private int id;\n+    private String country;\n+    private String altitude;\n+    private String latitude;\n+    private String longitude;\n+    private int indoor;\n+    @SerializedName(value = \"exact_location\")\n+    private int exactLocation;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getCountry() {\n+        return country;\n+    }\n+\n+    public void setCountry(String country) {\n+        this.country = country;\n+    }\n+\n+    public String getAltitude() {\n+        return altitude;\n+    }\n+\n+    public void setAltitude(String altitude) {\n+        this.altitude = altitude;\n+    }\n+\n+    public String getLatitude() {\n+        return latitude;\n+    }\n+\n+    public void setLatitude(String latitude) {\n+        this.latitude = latitude;\n+    }\n+\n+    public String getLongitude() {\n+        return longitude;\n+    }\n+\n+    public void setLongitude(String longitude) {\n+        this.longitude = longitude;\n+    }\n+\n+    public Integer getIndoor() {\n+        return indoor;\n+    }\n+\n+    public void setIndoor(int indoor) {\n+        this.indoor = indoor;\n+    }\n+\n+    public int getExactLocation() {\n+        return exactLocation;\n+    }\n+\n+    public void setExactLocation(Integer exactLocation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MDg5OQ=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ3ODQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoyMToyN1rOGw0XdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozNTozM1rOGxT8rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MjgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    logger.warn(\"No values deliverd by Sensor.  Trying to recover in next refresh\");\n          \n          \n            \n                                    logger.warn(\"No values delivered by Sensor. Trying to recover in next refresh\");", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453842805", "createdAt": "2020-07-13T18:21:27Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected static final int REFRESH_INTERVAL_MIN = 5;\n+    protected static final HTTPHandler HTTP = new HTTPHandler();\n+    private static final LuftdatenInfoConfiguration DEFAULT_CONFIG = new LuftdatenInfoConfiguration();\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected LuftdatenInfoConfiguration config = DEFAULT_CONFIG;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+\n+    protected ConfigStatus configStatus = ConfigStatus.UNKNOWN;\n+\n+    public enum ConfigStatus {\n+        OK,\n+        IS_NULL,\n+        SENSOR_IS_NULL,\n+        SENSOR_NOT_A_NUMBER,\n+        UNKNOWN\n+    };\n+\n+    protected UpdateStatus updateStatus = UpdateStatus.UNKNOWN;\n+\n+    public enum UpdateStatus {\n+        OK,\n+        CONNECTION_ERROR,\n+        VALUE_ERROR,\n+        VALUE_EMPTY,\n+        UNKNOWN\n+    }\n+\n+    protected LifecycleStatus lifecycleStatus = LifecycleStatus.UNKNOWN;\n+\n+    public enum LifecycleStatus {\n+        UNKNOWN,\n+        RUNNING,\n+        INITIALIZING,\n+        DISPOSED\n+    }\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LifecycleStatus.INITIALIZING;\n+        scheduler.execute(() -> {\n+            startUp();\n+        });\n+    }\n+\n+    private void startUp() {\n+        config = getConfigAs(LuftdatenInfoConfiguration.class);\n+        configStatus = checkConfig(config);\n+        if (configStatus == ConfigStatus.OK) {\n+            update();\n+            if (updateStatus == UpdateStatus.OK) {\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Start refresh job at interval {} min.\", REFRESH_INTERVAL_MIN);\n+                startSchedule();\n+            } else {\n+                switch (updateStatus) {\n+                    case CONNECTION_ERROR:\n+                        logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                        // start job even if first update isn't valid\n+                        startSchedule();\n+                        updateStatus(ThingStatus.OFFLINE);\n+                        break;\n+                    case VALUE_EMPTY:\n+                        logger.warn(\"No values deliverd by Sensor.  Trying to recover in next refresh\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MDIzNw==", "bodyText": "Corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454360237", "createdAt": "2020-07-14T13:35:33Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected static final int REFRESH_INTERVAL_MIN = 5;\n+    protected static final HTTPHandler HTTP = new HTTPHandler();\n+    private static final LuftdatenInfoConfiguration DEFAULT_CONFIG = new LuftdatenInfoConfiguration();\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected LuftdatenInfoConfiguration config = DEFAULT_CONFIG;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+\n+    protected ConfigStatus configStatus = ConfigStatus.UNKNOWN;\n+\n+    public enum ConfigStatus {\n+        OK,\n+        IS_NULL,\n+        SENSOR_IS_NULL,\n+        SENSOR_NOT_A_NUMBER,\n+        UNKNOWN\n+    };\n+\n+    protected UpdateStatus updateStatus = UpdateStatus.UNKNOWN;\n+\n+    public enum UpdateStatus {\n+        OK,\n+        CONNECTION_ERROR,\n+        VALUE_ERROR,\n+        VALUE_EMPTY,\n+        UNKNOWN\n+    }\n+\n+    protected LifecycleStatus lifecycleStatus = LifecycleStatus.UNKNOWN;\n+\n+    public enum LifecycleStatus {\n+        UNKNOWN,\n+        RUNNING,\n+        INITIALIZING,\n+        DISPOSED\n+    }\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LifecycleStatus.INITIALIZING;\n+        scheduler.execute(() -> {\n+            startUp();\n+        });\n+    }\n+\n+    private void startUp() {\n+        config = getConfigAs(LuftdatenInfoConfiguration.class);\n+        configStatus = checkConfig(config);\n+        if (configStatus == ConfigStatus.OK) {\n+            update();\n+            if (updateStatus == UpdateStatus.OK) {\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Start refresh job at interval {} min.\", REFRESH_INTERVAL_MIN);\n+                startSchedule();\n+            } else {\n+                switch (updateStatus) {\n+                    case CONNECTION_ERROR:\n+                        logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                        // start job even if first update isn't valid\n+                        startSchedule();\n+                        updateStatus(ThingStatus.OFFLINE);\n+                        break;\n+                    case VALUE_EMPTY:\n+                        logger.warn(\"No values deliverd by Sensor.  Trying to recover in next refresh\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MjgwNQ=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDQ4NDEzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoyMzowNFrOGw0a6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoyNTozOFrOGxTjbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MzY5MQ==", "bodyText": "You could feed the message into updateStatus() to display it in PaperUI. Then, the log message can be removed, since the framework is logging it. Same for the others.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453843691", "createdAt": "2020-07-13T18:23:04Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected static final int REFRESH_INTERVAL_MIN = 5;\n+    protected static final HTTPHandler HTTP = new HTTPHandler();\n+    private static final LuftdatenInfoConfiguration DEFAULT_CONFIG = new LuftdatenInfoConfiguration();\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected LuftdatenInfoConfiguration config = DEFAULT_CONFIG;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+\n+    protected ConfigStatus configStatus = ConfigStatus.UNKNOWN;\n+\n+    public enum ConfigStatus {\n+        OK,\n+        IS_NULL,\n+        SENSOR_IS_NULL,\n+        SENSOR_NOT_A_NUMBER,\n+        UNKNOWN\n+    };\n+\n+    protected UpdateStatus updateStatus = UpdateStatus.UNKNOWN;\n+\n+    public enum UpdateStatus {\n+        OK,\n+        CONNECTION_ERROR,\n+        VALUE_ERROR,\n+        VALUE_EMPTY,\n+        UNKNOWN\n+    }\n+\n+    protected LifecycleStatus lifecycleStatus = LifecycleStatus.UNKNOWN;\n+\n+    public enum LifecycleStatus {\n+        UNKNOWN,\n+        RUNNING,\n+        INITIALIZING,\n+        DISPOSED\n+    }\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LifecycleStatus.INITIALIZING;\n+        scheduler.execute(() -> {\n+            startUp();\n+        });\n+    }\n+\n+    private void startUp() {\n+        config = getConfigAs(LuftdatenInfoConfiguration.class);\n+        configStatus = checkConfig(config);\n+        if (configStatus == ConfigStatus.OK) {\n+            update();\n+            if (updateStatus == UpdateStatus.OK) {\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Start refresh job at interval {} min.\", REFRESH_INTERVAL_MIN);\n+                startSchedule();\n+            } else {\n+                switch (updateStatus) {\n+                    case CONNECTION_ERROR:\n+                        logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                        // start job even if first update isn't valid\n+                        startSchedule();\n+                        updateStatus(ThingStatus.OFFLINE);\n+                        break;\n+                    case VALUE_EMPTY:\n+                        logger.warn(\"No values deliverd by Sensor.  Trying to recover in next refresh\");\n+                        // start job even if first update isn't valid\n+                        startSchedule();\n+                        updateStatus(ThingStatus.ONLINE);\n+                        break;\n+                    case VALUE_ERROR:\n+                        logger.warn(\n+                                \"Sensor values doesn't match - please check if Sensor ID is delivering the correct Thing channel values\");\n+                        updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM1Mzc3NA==", "bodyText": "Good hint - I'll do so!", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454353774", "createdAt": "2020-07-14T13:25:38Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+\n+    protected static final int REFRESH_INTERVAL_MIN = 5;\n+    protected static final HTTPHandler HTTP = new HTTPHandler();\n+    private static final LuftdatenInfoConfiguration DEFAULT_CONFIG = new LuftdatenInfoConfiguration();\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+\n+    protected LuftdatenInfoConfiguration config = DEFAULT_CONFIG;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+\n+    protected ConfigStatus configStatus = ConfigStatus.UNKNOWN;\n+\n+    public enum ConfigStatus {\n+        OK,\n+        IS_NULL,\n+        SENSOR_IS_NULL,\n+        SENSOR_NOT_A_NUMBER,\n+        UNKNOWN\n+    };\n+\n+    protected UpdateStatus updateStatus = UpdateStatus.UNKNOWN;\n+\n+    public enum UpdateStatus {\n+        OK,\n+        CONNECTION_ERROR,\n+        VALUE_ERROR,\n+        VALUE_EMPTY,\n+        UNKNOWN\n+    }\n+\n+    protected LifecycleStatus lifecycleStatus = LifecycleStatus.UNKNOWN;\n+\n+    public enum LifecycleStatus {\n+        UNKNOWN,\n+        RUNNING,\n+        INITIALIZING,\n+        DISPOSED\n+    }\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LifecycleStatus.INITIALIZING;\n+        scheduler.execute(() -> {\n+            startUp();\n+        });\n+    }\n+\n+    private void startUp() {\n+        config = getConfigAs(LuftdatenInfoConfiguration.class);\n+        configStatus = checkConfig(config);\n+        if (configStatus == ConfigStatus.OK) {\n+            update();\n+            if (updateStatus == UpdateStatus.OK) {\n+                updateStatus(ThingStatus.ONLINE);\n+                logger.debug(\"Start refresh job at interval {} min.\", REFRESH_INTERVAL_MIN);\n+                startSchedule();\n+            } else {\n+                switch (updateStatus) {\n+                    case CONNECTION_ERROR:\n+                        logger.warn(\"Update failed due to Connection error. Trying to recover in next refresh\");\n+                        // start job even if first update isn't valid\n+                        startSchedule();\n+                        updateStatus(ThingStatus.OFFLINE);\n+                        break;\n+                    case VALUE_EMPTY:\n+                        logger.warn(\"No values deliverd by Sensor.  Trying to recover in next refresh\");\n+                        // start job even if first update isn't valid\n+                        startSchedule();\n+                        updateStatus(ThingStatus.ONLINE);\n+                        break;\n+                    case VALUE_ERROR:\n+                        logger.warn(\n+                                \"Sensor values doesn't match - please check if Sensor ID is delivering the correct Thing channel values\");\n+                        updateStatus(ThingStatus.OFFLINE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0MzY5MQ=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUwMzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODoyODoxMlrOGw0m9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTowMzoyOVrOGy4gyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0Njc3NA==", "bodyText": "Next time implementing a static only class, you could take a look at the singleton pattern. That'd be a better object oriented programming approach.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453846774", "createdAt": "2020-07-13T18:28:12Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTUzMw==", "bodyText": "Honestly I'm not sure. In principle I just want a static function which transforms an URL into a JSON response. For this I don't need an instance - everything is executed on local variables on stack. But if I want to use the logger inside static functions checkstyle responds \"static Logger => Bad Practice\"\nI've no problem to switch to singleton pattern even if it's not my preferred solution.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454415533", "createdAt": "2020-07-14T14:50:50Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0Njc3NA=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwNzg4MQ==", "bodyText": "IMHO you can leave it if you want. I would make it singleton, because of the storage of the HTTPHandler. It's a matter of taste.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456007881", "createdAt": "2020-07-16T19:03:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0Njc3NA=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUxNzI2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMTozNVrOGw0vhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1Njo1M1rOGxU4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0ODk2NA==", "bodyText": "Same for the others.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<item-type>Number</item-type>\n          \n          \n            \n            \t\t<label>PM 2.5:Density</label>\n          \n          \n            \n            \t\t<item-type>Number:Density</item-type>\n          \n          \n            \n            \t\t<label>PM 2.5</label>", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453848964", "createdAt": "2020-07-13T18:31:35Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\"/>\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\"/>\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\"/>\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\"/>\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\"/>\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5:Density</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3NTQyOQ==", "bodyText": "Oh no, my fault! Sure, moved QuantityTypes from \"label\" to \"item-type\" at all locations", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454375429", "createdAt": "2020-07-14T13:56:53Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\"/>\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\"/>\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\"/>\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\"/>\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\"/>\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5:Density</label>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0ODk2NA=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUyMDEwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMjoxOFrOGw0xGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1MzozOVrOGxUuZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTM3MA==", "bodyText": "This can be removed. Same for below.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t<description>Minimum noise level (last 2.5 minutes:Dimensionless) from the selected Sensor ID</description>\n          \n          \n            \n            \t\t<description>Minimum noise level (last 2.5 minutes) from the selected Sensor ID</description>", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453849370", "createdAt": "2020-07-13T18:32:18Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\"/>\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\"/>\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\"/>\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\"/>\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\"/>\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5:Density</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0:Density</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature:Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity:Dimensionless</label>\n+\t\t<description>Humidity from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure:Pressure</label>\n+\t\t<description>Atmospheric Pressure from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-sea-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure Sea Level:Pressure</label>\n+\t\t<description>Atmospheric Pressure at sea level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-eq-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Noise EQ:Dimensionless</label>\n+\t\t<description>Average noise level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-min-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Min Noise:Dimensionless</label>\n+\t\t<description>Minimum noise level (last 2.5 minutes:Dimensionless) from the selected Sensor ID</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3Mjk2NQ==", "bodyText": "Corrected all locations", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454372965", "createdAt": "2020-07-14T13:53:39Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"luftdateninfo\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"particulate\">\n+\t\t<label>Particulate Sensor</label>\n+\t\t<description>Sensor to measure Particulate Matter (PM)</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"pm25\" typeId=\"pm25-channel\"/>\n+\t\t\t<channel id=\"pm100\" typeId=\"pm100-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"conditions\">\n+\t\t<label>Condition Sensor</label>\n+\t\t<description>Sensor to measure Temperature and Humidity conditions</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"temperature\" typeId=\"temp-channel\"/>\n+\t\t\t<channel id=\"humidity\" typeId=\"hum-channel\"/>\n+\t\t\t<channel id=\"pressure\" typeId=\"pressure-channel\"/>\n+\t\t\t<channel id=\"pressure-sea\" typeId=\"pressure-sea-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<thing-type id=\"noise\">\n+\t\t<label>Noise Sensor</label>\n+\t\t<description>Sensor to measure noise on location</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"noise-eq\" typeId=\"noise-eq-channel\"/>\n+\t\t\t<channel id=\"noise-min\" typeId=\"noise-min-channel\"/>\n+\t\t\t<channel id=\"noise-max\" typeId=\"noise-max-channel\"/>\n+\t\t</channels>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"sensorid\" type=\"integer\" required=\"true\">\n+\t\t\t\t<label>Sensor ID</label>\n+\t\t\t\t<description>Sensor ID</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<channel-type id=\"pm25-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 2.5:Density</label>\n+\t\t<description>Particulate Matter 2.5</description>\n+\t</channel-type>\n+\t<channel-type id=\"pm100-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>PM 10.0:Density</label>\n+\t\t<description>Particulate Matter 10.0</description>\n+\t</channel-type>\n+\t<channel-type id=\"temp-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Temperature:Temperature</label>\n+\t\t<description>Temperature from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"hum-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Humidity:Dimensionless</label>\n+\t\t<description>Humidity from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure:Pressure</label>\n+\t\t<description>Atmospheric Pressure from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"pressure-sea-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Atmospheric Pressure Sea Level:Pressure</label>\n+\t\t<description>Atmospheric Pressure at sea level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-eq-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Noise EQ:Dimensionless</label>\n+\t\t<description>Average noise level from the selected Sensor ID</description>\n+\t</channel-type>\n+\t<channel-type id=\"noise-min-channel\">\n+\t\t<item-type>Number</item-type>\n+\t\t<label>Min Noise:Dimensionless</label>\n+\t\t<description>Minimum noise level (last 2.5 minutes:Dimensionless) from the selected Sensor ID</description>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg0OTM3MA=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDUyNDk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/test/java/org/openhab/binding/luftdateninfo/internal/mock/ThingMock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxODozMzozMFrOGw00Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzozOTo1MFrOGxUILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDE1MA==", "bodyText": "Can the comment be removed?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r453850150", "createdAt": "2020-07-13T18:33:30Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/test/java/org/openhab/binding/luftdateninfo/internal/mock/ThingMock.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.mock;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+\n+/**\n+ * The {@link ThingMock} Thing Mock\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThingMock implements Thing {\n+    private Configuration config = new Configuration(); // = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM2MzE4MQ==", "bodyText": "Sure", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r454363181", "createdAt": "2020-07-14T13:39:50Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/test/java/org/openhab/binding/luftdateninfo/internal/mock/ThingMock.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.mock;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.core.Configuration;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+\n+/**\n+ * The {@link ThingMock} Thing Mock\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThingMock implements Thing {\n+    private Configuration config = new Configuration(); // = new HashMap<String, Object>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg1MDE1MA=="}, "originalCommit": {"oid": "c5894e846a920e09e59ce28dd5a6a3ad158a0229"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTQxMjAyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwODoyOToxOVrOGzmyGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNDo1MTowNlrOGzor3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NTk3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung \n          \n          \n            \n            thing-type.luftdateninfo.particulate.description = Messung der Feinstaubbelastung in der Umgebung", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456765978", "createdAt": "2020-07-18T08:29:19Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+binding.luftdateninfo.name = LuftdatenInfo Binding\n+binding.luftdateninfo.description = Das Binding stellt die Daten der Eigenbau-Sensoren von LuftdatenInfo zur Verf\ufffdgung\n+\n+thing-type.luftdateninfo.particulate.label = Feinstaubsensor\n+thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5NzE1MQ==", "bodyText": "Right, I'll fix", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456797151", "createdAt": "2020-07-18T14:51:06Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+binding.luftdateninfo.name = LuftdatenInfo Binding\n+binding.luftdateninfo.description = Das Binding stellt die Daten der Eigenbau-Sensoren von LuftdatenInfo zur Verf\ufffdgung\n+\n+thing-type.luftdateninfo.particulate.label = Feinstaubsensor\n+thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NTk3OA=="}, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTQxMjY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwODozMDowMlrOGzmyag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNDo1NDozNVrOGzos-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NjA1OA==", "bodyText": "Copy & paste error", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456766058", "createdAt": "2020-07-18T08:30:02Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+binding.luftdateninfo.name = LuftdatenInfo Binding\n+binding.luftdateninfo.description = Das Binding stellt die Daten der Eigenbau-Sensoren von LuftdatenInfo zur Verf\ufffdgung\n+\n+thing-type.luftdateninfo.particulate.label = Feinstaubsensor\n+thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung \n+thing-type.luftdateninfo.conditions.label = Umgebungssensor\n+thing-type.luftdateninfo.conditions.description = Messung der Temperatur, Luftfeuchtigkeit und Luftdruck \n+thing-type.luftdateninfo.noise.label = L\ufffdrmsensor\n+thing-type.luftdateninfo.noise.description = Messung der Feinstaub Belastung in der Umgebung ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5NzQzMg==", "bodyText": "OMG -  such a small file, so many errors :( Sorry for that! Will fix it", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456797432", "createdAt": "2020-07-18T14:54:35Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+binding.luftdateninfo.name = LuftdatenInfo Binding\n+binding.luftdateninfo.description = Das Binding stellt die Daten der Eigenbau-Sensoren von LuftdatenInfo zur Verf\ufffdgung\n+\n+thing-type.luftdateninfo.particulate.label = Feinstaubsensor\n+thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung \n+thing-type.luftdateninfo.conditions.label = Umgebungssensor\n+thing-type.luftdateninfo.conditions.description = Messung der Temperatur, Luftfeuchtigkeit und Luftdruck \n+thing-type.luftdateninfo.noise.label = L\ufffdrmsensor\n+thing-type.luftdateninfo.noise.description = Messung der Feinstaub Belastung in der Umgebung ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NjA1OA=="}, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTQxMjk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwODozMDo0NFrOGzmylg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNDo1MTo1OFrOGzosOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NjEwMg==", "bodyText": "Vielleicht w\u00e4re \"Umweltsensor\" passender?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456766102", "createdAt": "2020-07-18T08:30:44Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+binding.luftdateninfo.name = LuftdatenInfo Binding\n+binding.luftdateninfo.description = Das Binding stellt die Daten der Eigenbau-Sensoren von LuftdatenInfo zur Verf\ufffdgung\n+\n+thing-type.luftdateninfo.particulate.label = Feinstaubsensor\n+thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung \n+thing-type.luftdateninfo.conditions.label = Umgebungssensor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5NzI0MA==", "bodyText": "Ja, passt besser", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456797240", "createdAt": "2020-07-18T14:51:58Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/resources/ESH-INF/i18n/luftdateninfo_de.properties", "diffHunk": "@@ -0,0 +1,9 @@\n+binding.luftdateninfo.name = LuftdatenInfo Binding\n+binding.luftdateninfo.description = Das Binding stellt die Daten der Eigenbau-Sensoren von LuftdatenInfo zur Verf\ufffdgung\n+\n+thing-type.luftdateninfo.particulate.label = Feinstaubsensor\n+thing-type.luftdateninfo.particulate.description = Messung der Feinstaub Belastung in der Umgebung \n+thing-type.luftdateninfo.conditions.label = Umgebungssensor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NjEwMg=="}, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTQxNTE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQwODozNDoyOVrOGzmznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNToxMDozOVrOGzoyew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NjM2NA==", "bodyText": "Did you re-add the quotes by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456766364", "createdAt": "2020-07-18T08:34:29Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -68,9 +68,9 @@ Perform the following steps to get the appropriate Sensor ID\n luftdaten.things\n \n ```perl\n-Thing luftdateninfo:particulate:pm_sensor   \"PM Sensor\"         [ sensorid=28842]\n-Thing luftdateninfo:conditions:cond_sensor  \"Condition Sensor\"  [ sensorid=28843]\n-Thing luftdateninfo:noise:noise_sensor      \"Noise Sensor\"      [ sensorid=39745]\n+Thing luftdateninfo:particulate:pm_sensor   \"PM Sensor\"         [ sensorid=\"28842\"]\n+Thing luftdateninfo:conditions:cond_sensor  \"Condition Sensor\"  [ sensorid=\"28843\"]\n+Thing luftdateninfo:noise:noise_sensor      \"Noise Sensor\"      [ sensorid=\"39745\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc5ODg0Mw==", "bodyText": "Yes, I got an error when removing quotes. I followed this problem and in a previous review I changed the thing-config.xml sensorid from text to int. But I didn't change it in Java code. Now I did this and code and xml fits together. Quotes are removed and it works.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r456798843", "createdAt": "2020-07-18T15:10:39Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/README.md", "diffHunk": "@@ -68,9 +68,9 @@ Perform the following steps to get the appropriate Sensor ID\n luftdaten.things\n \n ```perl\n-Thing luftdateninfo:particulate:pm_sensor   \"PM Sensor\"         [ sensorid=28842]\n-Thing luftdateninfo:conditions:cond_sensor  \"Condition Sensor\"  [ sensorid=28843]\n-Thing luftdateninfo:noise:noise_sensor      \"Noise Sensor\"      [ sensorid=39745]\n+Thing luftdateninfo:particulate:pm_sensor   \"PM Sensor\"         [ sensorid=\"28842\"]\n+Thing luftdateninfo:conditions:cond_sensor  \"Condition Sensor\"  [ sensorid=\"28843\"]\n+Thing luftdateninfo:noise:noise_sensor      \"Noise Sensor\"      [ sensorid=\"39745\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2NjM2NA=="}, "originalCommit": {"oid": "529c812a4a12361e019e76544e8c21bf16d311c5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDMyMTEyOnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.binding.e3dc/.project", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMDo1MTozOFrOHBRgnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNToyMDoxMFrOHBTMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5NzUwMw==", "bodyText": "Did you remove the project file by intention?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r471097503", "createdAt": "2020-08-16T10:51:38Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.e3dc/.project", "diffHunk": "@@ -1,23 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a26ebca63244d12dd2accccbc6811fb0480c049"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyNTA1Mw==", "bodyText": "Yes, it was accidently added from my parallel E3DC project. I made clean rebase yesterday so it is removed.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r471125053", "createdAt": "2020-08-16T15:20:10Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.e3dc/.project", "diffHunk": "@@ -1,23 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5NzUwMw=="}, "originalCommit": {"oid": "4a26ebca63244d12dd2accccbc6811fb0480c049"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDMyMjg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxMDo1Mzo1MlrOHBRhgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxNTo0NTowOFrOHBTV6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5NzczMA==", "bodyText": "Joda found its replacement in Java 8. You could use ZonedDateTime.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r471097730", "createdAt": "2020-08-16T10:53:52Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -24,7 +26,9 @@\n import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n import org.eclipse.smarthome.core.types.Command;\n import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a26ebca63244d12dd2accccbc6811fb0480c049"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTEyNzUzMA==", "bodyText": "Sorry for the rework. But after my observations during running this binding it was necessary:\n\n\nREST API calls of luftdateninfo are taking sometimes a lot of time. Many warnings were printed in the logs which isn't covenient. Now http timeout is increased and details with timestamp are delivered via \"updateStatus\" so they are shown in the UI\n\n\nUoM wasn't properly defined in sitemap and items. This is corrected\n\n\nTranslations on channel-type were missing\n\n\nI think it was worth to apply these corrections before a second reviewer starts his work.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r471127530", "createdAt": "2020-08-16T15:45:08Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -24,7 +26,9 @@\n import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n import org.eclipse.smarthome.core.types.Command;\n import org.eclipse.smarthome.core.types.RefreshType;\n+import org.joda.time.DateTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA5NzczMA=="}, "originalCommit": {"oid": "4a26ebca63244d12dd2accccbc6811fb0480c049"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMxNzg3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjowODowNlrOHEIziw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjoyMjoxOVrOHQlcnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ==", "bodyText": "180 sec. seem a bit long for the timeout. The framework's safe caller will kick in after 15 sec.\n10 sec. would be a better value.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r474100619", "createdAt": "2020-08-20T16:08:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNjQwMw==", "bodyText": "Ok, let me leave then the 15 seconds timeout.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r478616403", "createdAt": "2020-08-27T18:32:06Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY1Nzg4OQ==", "bodyText": "That might lead to a race condition, as the safe caller timeout is 15sec, too. If you want to use higher timeouts, you could use Jetty's async API.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r478657889", "createdAt": "2020-08-27T19:51:06Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyNzU1NQ==", "bodyText": "Ok, let me get this straight because I'm implementing a binding for BMW ConnectedDrive which is based on REST API too and I don't want to fall in the same trap again.\nI switched back to my previous timeout of 30 seconds and measured the duration.\n2020-08-28 14:26:58.322 [WARN ] [o.internal.handler.BaseSensorHandler] - Sensor 39745 call duration 30006 ms\n2020-08-28 14:26:58.385 [INFO ] [o.internal.handler.BaseSensorHandler] - Total timeout 30000 ms elapsed / 2020-08-28 14:26:58\n\nI didn't observe a \"safe caller timeout\" after 15 seconds. I also don't know which race condition can happen in/after this synchronous call.\nI've also taken a look into the Jetty Asynchronous API => https://www.eclipse.org/jetty/documentation/current/http-client-api.html#http-client-async . In general I see the use cases \"large content download\" and \"parallel requests\" which is in my opinion not fitting to this sensor binding.\nSo my question is why it's not suitable to apply a timeout like 1 Minute with the above observations?\nI really like to have your honest opinion.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r479427555", "createdAt": "2020-08-28T17:00:17Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUxMTQ1Nw==", "bodyText": "The safe caller only kicks in if the code is invoked by the framework e.g. via handleCommand(). I just saw that your code will be invoked only within scheduler threads. These have no time limit. But that doesn't mean that you should block them longer as needed, as the threads in the scheduler pool are shared amongst all ThingHandlers of all bindings.\nI think a timeout of more than 10 sec. is a bit unreasonable for most use cases. There was a use case with an embedded device, which was really slow in responding. A timeout of 30 sec. was sufficient. So, I'm wondering what use case you have in mind when specifying an even higher timeout.\nJetty's async API is not only useful for \"large content downloads, for parallel processing of requests/responses\", but also if \"efficient thread and resource utilization is a key factor\". The last points are quite important, as openHAB often runs on small hardware like raspberries.\nIMHO event-driven program execution should be preferred over blocking, where possible.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r479511457", "createdAt": "2020-08-28T20:06:51Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk4OTQ3Nw==", "bodyText": "I fully agree! I played around with async API and I really like the unblocking character. I'll perform changes accordingly.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r481989477", "createdAt": "2020-09-02T11:13:45Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYyNzYxNw==", "bodyText": "I don't want to push you, but the merge window for 2.5.9 comes closer and closer. If we miss that, the binding must be ported to OH3 manually.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r486627617", "createdAt": "2020-09-10T20:54:37Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE1Mjc5Ng==", "bodyText": "No problem. Sorry, I'm too busy with my next contribution. But this was a very good hint because it's also related to get data from REST API.\nI applied the changes and tested them. As said I like the unblocking character and also makes the error handling more comprehensive.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487152796", "createdAt": "2020-09-11T16:22:19Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/HTTPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorData;\n+import org.openhab.binding.luftdateninfo.internal.dto.SensorDataValue;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link HTTPHandler} is responsible for HTTP requests and JSON handling\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class HTTPHandler {\n+    private final Logger logger = LoggerFactory.getLogger(HTTPHandler.class);\n+\n+    private static final Gson GSON = new Gson();\n+    private static final HTTPHandler HTTP_HANDLER = new HTTPHandler();\n+\n+    public static final String P1 = \"P1\";\n+    public static final String P2 = \"P2\";\n+\n+    public static final String TEMPERATURE = \"temperature\";\n+    public static final String HUMIDITY = \"humidity\";\n+    public static final String PRESSURE = \"pressure\";\n+    public static final String PRESSURE_SEALEVEL = \"pressure_at_sealevel\";\n+\n+    public static final String NOISE_EQ = \"noise_LAeq\";\n+    public static final String NOISE_MIN = \"noise_LA_min\";\n+    public static final String NOISE_MAX = \"noise_LA_max\";\n+\n+    private static String sensorUrl = \"http://data.sensor.community/airrohr/v1/sensor/\";\n+    private static @Nullable HttpClient commonHttpClient;\n+\n+    public static void init(HttpClient httpClient) {\n+        commonHttpClient = httpClient;\n+    }\n+\n+    public static HTTPHandler getHandler() {\n+        return HTTP_HANDLER;\n+    }\n+\n+    public @Nullable String getResponse(int sensorId)\n+            throws InterruptedException, TimeoutException, ExecutionException {\n+        HttpClient localClient = commonHttpClient;\n+        if (localClient == null) {\n+            logger.warn(\"HTTP Client not initialized\");\n+            return null;\n+        } else {\n+            String url = sensorUrl + sensorId + \"/\";\n+            ContentResponse contentResponse = localClient.newRequest(url).timeout(180, TimeUnit.SECONDS).send();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMDYxOQ=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzMyNzEwOnYy", "diffSide": "RIGHT", "path": "bundles/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoxMDoyMVrOHEI5aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNDo1OFrOHIchMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMjEyMw==", "bodyText": "Can you leave the line feed?", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r474102123", "createdAt": "2020-08-20T16:10:21Z", "author": {"login": "fwolter"}, "path": "bundles/pom.xml", "diffHunk": "@@ -515,4 +516,4 @@\n     </profile>\n   </profiles>\n \n-</project>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNzkwNg==", "bodyText": "Ups, didn't recognized this after rebase.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r478617906", "createdAt": "2020-08-27T18:34:58Z", "author": {"login": "weymann"}, "path": "bundles/pom.xml", "diffHunk": "@@ -515,4 +516,4 @@\n     </profile>\n   </profiles>\n \n-</project>\n+</project>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDEwMjEyMw=="}, "originalCommit": {"oid": "d9dc71a0d67e134482b67f8297052f83c3243d75"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODY2NDk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorDataValue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDoyODoyMlrOHQydrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxMjo1MDo1M1rOHQ08Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NjA2MQ==", "bodyText": "fields should be at the top of the class.", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487366061", "createdAt": "2020-09-12T04:28:22Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorDataValue.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link SensorDataValue} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorDataValue {\n+    private long id;\n+    @SerializedName(\"value_type\")\n+    private String valueType;\n+\n+    @Override\n+    public String toString() {\n+        return valueType + \":\" + value;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getValueType() {\n+        return valueType;\n+    }\n+\n+    public void setValueType(String valueType) {\n+        this.valueType = valueType;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    private String value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQwNjY0Mw==", "bodyText": "Fixed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487406643", "createdAt": "2020-09-12T12:50:53Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/dto/SensorDataValue.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.dto;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link SensorDataValue} Data Transfer Object\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+public class SensorDataValue {\n+    private long id;\n+    @SerializedName(\"value_type\")\n+    private String valueType;\n+\n+    @Override\n+    public String toString() {\n+        return valueType + \":\" + value;\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getValueType() {\n+        return valueType;\n+    }\n+\n+    public void setValueType(String valueType) {\n+        this.valueType = valueType;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(String value) {\n+        this.value = value;\n+    }\n+\n+    private String value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NjA2MQ=="}, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODY2NjQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDozMDowOVrOHQyeTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxMjo1MjozM1rOHQ08yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NjIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    scheduler.execute(() -> {\n          \n          \n            \n                        startUp();\n          \n          \n            \n                    });\n          \n          \n            \n                    scheduler.execute(this::startUp);", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487366221", "createdAt": "2020-09-12T04:30:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+    private static final LuftdatenInfoConfiguration DEFAULT_CONFIG = new LuftdatenInfoConfiguration();\n+    private static final String EMPTY = \"\";\n+\n+    protected static final int REFRESH_INTERVAL_MIN = 5;\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+    protected LuftdatenInfoConfiguration config = DEFAULT_CONFIG;\n+    protected ConfigStatus configStatus = ConfigStatus.UNKNOWN;\n+    protected ThingStatus myThingStatus = ThingStatus.UNKNOWN;\n+    protected UpdateStatus lastUpdateStatus = UpdateStatus.UNKNOWN;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+\n+    public enum ConfigStatus {\n+        OK,\n+        IS_NULL,\n+        SENSOR_IS_NULL,\n+        SENSOR_ID_NEGATIVE,\n+        UNKNOWN\n+    };\n+\n+    public enum UpdateStatus {\n+        OK,\n+        CONNECTION_ERROR,\n+        CONNECTION_EXCEPTION,\n+        VALUE_ERROR,\n+        VALUE_EMPTY,\n+        UNKNOWN\n+    }\n+\n+    protected LifecycleStatus lifecycleStatus = LifecycleStatus.UNKNOWN;\n+\n+    public enum LifecycleStatus {\n+        UNKNOWN,\n+        RUNNING,\n+        INITIALIZING,\n+        DISPOSED\n+    }\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LifecycleStatus.INITIALIZING;\n+        scheduler.execute(() -> {\n+            startUp();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQwNjc5Mg==", "bodyText": "Fixed", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487406792", "createdAt": "2020-09-12T12:52:33Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/handler/BaseSensorHandler.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.handler;\n+\n+import java.time.LocalDateTime;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.openhab.binding.luftdateninfo.internal.LuftdatenInfoConfiguration;\n+import org.openhab.binding.luftdateninfo.internal.utils.DateTimeUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link PMHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class BaseSensorHandler extends BaseThingHandler {\n+    private static final LuftdatenInfoConfiguration DEFAULT_CONFIG = new LuftdatenInfoConfiguration();\n+    private static final String EMPTY = \"\";\n+\n+    protected static final int REFRESH_INTERVAL_MIN = 5;\n+    protected final Logger logger = LoggerFactory.getLogger(BaseSensorHandler.class);\n+    protected LuftdatenInfoConfiguration config = DEFAULT_CONFIG;\n+    protected ConfigStatus configStatus = ConfigStatus.UNKNOWN;\n+    protected ThingStatus myThingStatus = ThingStatus.UNKNOWN;\n+    protected UpdateStatus lastUpdateStatus = UpdateStatus.UNKNOWN;\n+    protected @Nullable ScheduledFuture<?> refreshJob;\n+\n+    public enum ConfigStatus {\n+        OK,\n+        IS_NULL,\n+        SENSOR_IS_NULL,\n+        SENSOR_ID_NEGATIVE,\n+        UNKNOWN\n+    };\n+\n+    public enum UpdateStatus {\n+        OK,\n+        CONNECTION_ERROR,\n+        CONNECTION_EXCEPTION,\n+        VALUE_ERROR,\n+        VALUE_EMPTY,\n+        UNKNOWN\n+    }\n+\n+    protected LifecycleStatus lifecycleStatus = LifecycleStatus.UNKNOWN;\n+\n+    public enum LifecycleStatus {\n+        UNKNOWN,\n+        RUNNING,\n+        INITIALIZING,\n+        DISPOSED\n+    }\n+\n+    public BaseSensorHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateFromCache();\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        lifecycleStatus = LifecycleStatus.INITIALIZING;\n+        scheduler.execute(() -> {\n+            startUp();\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NjIyMQ=="}, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODY3MzQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/NumberUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo0MDoxNVrOHQyhdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNDoyMTo0N1rOHQ1a6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NzAzMQ==", "bodyText": "Perhaps it would be better to use Double.NaN?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Double UNDEF = new Double(-1);\n          \n          \n            \n                private static final double UNDEF = Double.NaN;", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487367031", "createdAt": "2020-09-12T04:40:15Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/NumberUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link NumberUtils} class provides helpers for converting Numbers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NumberUtils {\n+    private static final Double UNDEF = new Double(-1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQxNDUwNQ==", "bodyText": "yes, sounds feasible", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487414505", "createdAt": "2020-09-12T14:21:47Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/NumberUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link NumberUtils} class provides helpers for converting Numbers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NumberUtils {\n+    private static final Double UNDEF = new Double(-1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NzAzMQ=="}, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODY3NDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/NumberUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNDo0MToxMlrOHQyhyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNDoyMjowMFrOHQ1bAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NzExMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Double value = UNDEF;\n          \n          \n            \n                    if (o instanceof Integer) {\n          \n          \n            \n                        value = (double) ((Integer) o).intValue();\n          \n          \n            \n                    } else if (o instanceof String) {\n          \n          \n            \n                        value = Double.parseDouble(o.toString());\n          \n          \n            \n                    } else {\n          \n          \n            \n                        value = (Double) o;\n          \n          \n            \n                    }\n          \n          \n            \n                    double value = UNDEF;\n          \n          \n            \n                    if (o instanceof Number) {\n          \n          \n            \n                        value = ((Number) o).doubleValue();\n          \n          \n            \n                    } else if (o instanceof String) {\n          \n          \n            \n                        value = Double.parseDouble(o.toString());\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487367113", "createdAt": "2020-09-12T04:41:12Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/NumberUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link NumberUtils} class provides helpers for converting Numbers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NumberUtils {\n+    private static final Double UNDEF = new Double(-1);\n+\n+    public static double round(Object o, int places) {\n+        double value = convert(o);\n+\n+        // for negative places return plain number\n+        if (places < 0) {\n+            return value;\n+        }\n+\n+        long factor = (long) Math.pow(10, places);\n+        value = value * factor;\n+        long tmp = Math.round(value);\n+        return (double) tmp / factor;\n+    }\n+\n+    public static double convert(Object o) {\n+        // ensure value not null\n+        Double value = UNDEF;\n+        if (o instanceof Integer) {\n+            value = (double) ((Integer) o).intValue();\n+        } else if (o instanceof String) {\n+            value = Double.parseDouble(o.toString());\n+        } else {\n+            value = (Double) o;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQxNDUyOA==", "bodyText": "Corrected", "url": "https://github.com/openhab/openhab-addons/pull/7914#discussion_r487414528", "createdAt": "2020-09-12T14:22:00Z", "author": {"login": "weymann"}, "path": "bundles/org.openhab.binding.luftdateninfo/src/main/java/org/openhab/binding/luftdateninfo/internal/utils/NumberUtils.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.luftdateninfo.internal.utils;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+\n+/**\n+ * The {@link NumberUtils} class provides helpers for converting Numbers.\n+ *\n+ * @author Bernd Weymann - Initial contribution\n+ */\n+@NonNullByDefault\n+public class NumberUtils {\n+    private static final Double UNDEF = new Double(-1);\n+\n+    public static double round(Object o, int places) {\n+        double value = convert(o);\n+\n+        // for negative places return plain number\n+        if (places < 0) {\n+            return value;\n+        }\n+\n+        long factor = (long) Math.pow(10, places);\n+        value = value * factor;\n+        long tmp = Math.round(value);\n+        return (double) tmp / factor;\n+    }\n+\n+    public static double convert(Object o) {\n+        // ensure value not null\n+        Double value = UNDEF;\n+        if (o instanceof Integer) {\n+            value = (double) ((Integer) o).intValue();\n+        } else if (o instanceof String) {\n+            value = Double.parseDouble(o.toString());\n+        } else {\n+            value = (Double) o;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM2NzExMw=="}, "originalCommit": {"oid": "8db91b0e4884065bda6e387e97d1a756b538ab8a"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4794, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}