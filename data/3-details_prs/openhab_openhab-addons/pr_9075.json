{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MjM3MjA1", "number": 9075, "title": "[mecmeter] Initial contribution of mecmeter binding", "bodyText": "This is a new binding for the din-rail power meter from MEC, see https://www.mec.at/produkte/#mecMeter.\nSigned-off-by: Kai Kreuzer kai@openhab.org", "createdAt": "2020-11-19T21:17:27Z", "url": "https://github.com/openhab/openhab-addons/pull/9075", "merged": true, "mergeCommit": {"oid": "1d8b0df4a7d89c51e4e21d5beab257430e68bf42"}, "closed": true, "closedAt": "2021-03-28T09:20:21Z", "author": {"login": "kaikreuzer"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABeCr6b9gBqjQ0NTM2NjAyNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABeHgiOOAFqTYyMjczMzY5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c322402addcaacb9d23c85fac43a62267fdafcda", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/c322402addcaacb9d23c85fac43a62267fdafcda", "committedDate": "2020-11-19T21:05:52Z", "message": "Initial contribution of mecmeter binding\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "c5b243e8089a05d72dd5e90801953251e4768417", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/c5b243e8089a05d72dd5e90801953251e4768417", "committedDate": "2021-03-13T09:45:33Z", "message": "Introduced UoM and cleaned up code\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE5ODEzOTg4", "url": "https://github.com/openhab/openhab-addons/pull/9075#pullrequestreview-619813988", "createdAt": "2021-03-24T14:47:26Z", "commit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxNDo0NzoyNlrOI8uj6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxNTo0MDo0OFrOI8yCdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU0ODMyOQ==", "bodyText": "What is exactly the contribution of these authors? There don't seem to be any Also-by lines in your commits for them.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600548329", "createdAt": "2021-03-24T14:47:26Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/MecMeterDeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter;\n+\n+/**\n+ * The {@link MecMeterDeviceConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU0OTAzMg==", "bodyText": "Looks like you can add @NonNullByDefault on this class.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600549032", "createdAt": "2021-03-24T14:48:05Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/MecMeterDeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter;\n+\n+/**\n+ * The {@link MecMeterDeviceConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ */\n+public class MecMeterDeviceConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU0OTc0NQ==", "bodyText": "Can this default constructor implementation be removed?", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600549745", "createdAt": "2021-03-24T14:48:46Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/MecMeterDeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter;\n+\n+/**\n+ * The {@link MecMeterDeviceConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ */\n+public class MecMeterDeviceConfiguration {\n+    public String ip = \"\";\n+    public String username = \"admin\";\n+    public String password = \"12345\";\n+    public int refreshInterval = 5;\n+\n+    public MecMeterDeviceConfiguration() {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU1MjEwMg==", "bodyText": "The username is commented in the thing-types.xml, whats up with that and do we still need this in this config?", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600552102", "createdAt": "2021-03-24T14:51:14Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/MecMeterDeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter;\n+\n+/**\n+ * The {@link MecMeterDeviceConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ */\n+public class MecMeterDeviceConfiguration {\n+    public String ip = \"\";\n+    public String username = \"admin\";\n+    public String password = \"12345\";\n+    public int refreshInterval = 5;\n+\n+    public MecMeterDeviceConfiguration() {\n+        super();\n+    }\n+\n+    public String getIp() {\n+        return ip;\n+    }\n+\n+    public void setIp(String inetaddress) {\n+        ip = inetaddress;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String user) {\n+        username = user;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU1MzExNA==", "bodyText": "If it results in a null value when not set, you might want to use an empty string as default here to prevent null values.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600553114", "createdAt": "2021-03-24T14:52:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,567 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mecmeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"meter\">\n+\t\t<label>mecMeter</label>\n+\t\t<description>Power Meter from MEC</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"general_group\" typeId=\"general_group\"/>\n+\t\t\t<channel-group id=\"voltage_group\" typeId=\"voltage_group\"/>\n+\t\t\t<channel-group id=\"current_group\" typeId=\"current_group\"/>\n+\t\t\t<channel-group id=\"angle_group\" typeId=\"angle_group\"/>\n+\n+\t\t\t<channel-group id=\"activepower_group\" typeId=\"activepower_group\"/>\n+\t\t\t<channel-group id=\"activefundpower_group\" typeId=\"activefundpower_group\"/>\n+\t\t\t<channel-group id=\"activeharmpower_group\" typeId=\"activeharmpower_group\"/>\n+\t\t\t<channel-group id=\"reactivepower_group\" typeId=\"reactivepower_group\"/>\n+\t\t\t<channel-group id=\"powerfactor_group\" typeId=\"powerfactor_group\"/>\n+\n+\t\t\t<channel-group id=\"apppower_group\" typeId=\"apppower_group\"/>\n+\n+\t\t\t<channel-group id=\"fwd_active_energy_group\" typeId=\"fwd_active_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_fund_energy_group\" typeId=\"fwd_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_harm_energy_group\" typeId=\"fwd_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_reactive_energy_group\" typeId=\"fwd_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"rev_active_energy_group\" typeId=\"rev_active_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_fund_energy_group\" typeId=\"rev_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_harm_energy_group\" typeId=\"rev_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_reactive_energy_group\" typeId=\"rev_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"app_energy_group\" typeId=\"app_energy_group\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<!-- which parameters are required to find the PowerMeter -->\n+\t\t\t<!-- <parameter name=\"username\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>Enter the username of the device</description>\n+\t\t\t\t</parameter> -->\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Enter the password</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>IP</label>\n+\t\t\t\t<description>the IP address of the mecMeter</description>\n+\t\t\t\t<context>network-address</context>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU1MzUzNw==", "bodyText": "Uncomment and implement or remove this please.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600553537", "createdAt": "2021-03-24T14:52:47Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,567 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mecmeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"meter\">\n+\t\t<label>mecMeter</label>\n+\t\t<description>Power Meter from MEC</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"general_group\" typeId=\"general_group\"/>\n+\t\t\t<channel-group id=\"voltage_group\" typeId=\"voltage_group\"/>\n+\t\t\t<channel-group id=\"current_group\" typeId=\"current_group\"/>\n+\t\t\t<channel-group id=\"angle_group\" typeId=\"angle_group\"/>\n+\n+\t\t\t<channel-group id=\"activepower_group\" typeId=\"activepower_group\"/>\n+\t\t\t<channel-group id=\"activefundpower_group\" typeId=\"activefundpower_group\"/>\n+\t\t\t<channel-group id=\"activeharmpower_group\" typeId=\"activeharmpower_group\"/>\n+\t\t\t<channel-group id=\"reactivepower_group\" typeId=\"reactivepower_group\"/>\n+\t\t\t<channel-group id=\"powerfactor_group\" typeId=\"powerfactor_group\"/>\n+\n+\t\t\t<channel-group id=\"apppower_group\" typeId=\"apppower_group\"/>\n+\n+\t\t\t<channel-group id=\"fwd_active_energy_group\" typeId=\"fwd_active_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_fund_energy_group\" typeId=\"fwd_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_harm_energy_group\" typeId=\"fwd_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_reactive_energy_group\" typeId=\"fwd_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"rev_active_energy_group\" typeId=\"rev_active_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_fund_energy_group\" typeId=\"rev_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_harm_energy_group\" typeId=\"rev_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_reactive_energy_group\" typeId=\"rev_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"app_energy_group\" typeId=\"app_energy_group\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<!-- which parameters are required to find the PowerMeter -->\n+\t\t\t<!-- <parameter name=\"username\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>Enter the username of the device</description>\n+\t\t\t\t</parameter> -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU1NjQ1NA==", "bodyText": "You should use .equals to compare the content of the actual string instead of checking if they are the same object instances. What is this magic IP address 192.168.255.1?  Will this cause issues when using different IP ranges in your network?", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600556454", "createdAt": "2021-03-24T14:55:33Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/internal/discovery/MecMeterDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.internal.discovery;\n+\n+import static org.openhab.binding.mecmeter.MecMeterBindingConstants.THING_TYPE_METER;\n+\n+import java.net.InetAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MecMeterDiscoveryParticipant} is responsible for discovering devices, which are\n+ * sent to inbox.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class)\n+public class MecMeterDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(MecMeterDiscoveryParticipant.class);\n+    private static final String SERVICE_TYPE = \"_http._tcp.local.\";\n+\n+    /**\n+     * Match the serial number, vendor and model of the discovered PowerMeter.\n+     * Input is like \"vpmAA11BB33CC55\"\n+     */\n+    private static final Pattern MECMETER_PATTERN = Pattern\n+            .compile(\"^(vpm|mec)[A-F0-9]{12}\\\\._http\\\\._tcp\\\\.local\\\\.$\");\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(THING_TYPE_METER);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return SERVICE_TYPE;\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo service) {\n+        String qualifiedName = service.getQualifiedName();\n+        logger.debug(\"Device found: {}\", qualifiedName);\n+        ThingUID uid = getThingUID(service);\n+        if (uid == null) {\n+            return null;\n+        }\n+\n+        String serial = qualifiedName.substring(3, 15);\n+        String vendor = \"MEC\";\n+\n+        InetAddress ip = getIpAddress(service);\n+        if (ip == null) {\n+            return null;\n+        }\n+        String inetAddress = ip.toString().substring(1);\n+\n+        Map<String, Object> properties = new HashMap<>(2);\n+        properties.put(Thing.PROPERTY_SERIAL_NUMBER, serial);\n+        properties.put(Thing.PROPERTY_VENDOR, vendor);\n+        properties.put(\"ip\", inetAddress);\n+\n+        String label = \"MEC Power Meter\";\n+        DiscoveryResult result = DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(label)\n+                .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER).build();\n+        return result;\n+    }\n+\n+    private @Nullable InetAddress getIpAddress(ServiceInfo service) {\n+        InetAddress address = null;\n+        for (InetAddress addr : service.getInet4Addresses()) {\n+            if (addr.toString() != \"192.168.255.1\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU2MjI1Ng==", "bodyText": "This is a strange check. My IP could be 100.0.0.0 and it will be considered as not set.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600562256", "createdAt": "2021-03-24T14:58:39Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/MecMeterDeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter;\n+\n+/**\n+ * The {@link MecMeterDeviceConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ */\n+public class MecMeterDeviceConfiguration {\n+    public String ip = \"\";\n+    public String username = \"admin\";\n+    public String password = \"12345\";\n+    public int refreshInterval = 5;\n+\n+    public MecMeterDeviceConfiguration() {\n+        super();\n+    }\n+\n+    public String getIp() {\n+        return ip;\n+    }\n+\n+    public void setIp(String inetaddress) {\n+        ip = inetaddress;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String user) {\n+        username = user;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String pw) {\n+        password = pw;\n+    }\n+\n+    public int getRefreshInterval() {\n+        return refreshInterval;\n+    }\n+\n+    public void setRefreshInterval(int ri) {\n+        refreshInterval = ri;\n+    }\n+\n+    public String isValid() {\n+        if (ip == null || ip.isBlank()) {\n+            return \"Missing IP\";\n+        }\n+        if (ip.contains(\"0.0.0.0\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU2NTYwOQ==", "bodyText": "In Java 11 this can be more clear and shorter with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_METER);\n          \n          \n            \n                private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Set.of(THING_TYPE_METER);\n          \n      \n    \n    \n  \n\nIf you move this to the MecMeterBindingConstants, then it can also be reused in the MecMeterDiscoveryParticipant.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600565609", "createdAt": "2021-03-24T15:01:23Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/internal/MecMeterHandlerFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.internal;\n+\n+import static org.openhab.binding.mecmeter.MecMeterBindingConstants.THING_TYPE_METER;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.openhab.binding.mecmeter.handler.MecMeterHandler;\n+import org.openhab.core.io.net.http.HttpClientFactory;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.binding.BaseThingHandlerFactory;\n+import org.openhab.core.thing.binding.ThingHandler;\n+import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+\n+/**\n+ * The {@link MecMeterHandlerFactory} is responsible for creating things and thing\n+ * handlers.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+@Component(service = ThingHandlerFactory.class, configurationPid = \"binding.mecmeter\")\n+public class MecMeterHandlerFactory extends BaseThingHandlerFactory {\n+\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(THING_TYPE_METER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU3MDA4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t<description>the IP address of the mecMeter</description>\n          \n          \n            \n            \t\t\t\t<description>The IP address of the mecMeter</description>", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600570087", "createdAt": "2021-03-24T15:05:40Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,567 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mecmeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"meter\">\n+\t\t<label>mecMeter</label>\n+\t\t<description>Power Meter from MEC</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"general_group\" typeId=\"general_group\"/>\n+\t\t\t<channel-group id=\"voltage_group\" typeId=\"voltage_group\"/>\n+\t\t\t<channel-group id=\"current_group\" typeId=\"current_group\"/>\n+\t\t\t<channel-group id=\"angle_group\" typeId=\"angle_group\"/>\n+\n+\t\t\t<channel-group id=\"activepower_group\" typeId=\"activepower_group\"/>\n+\t\t\t<channel-group id=\"activefundpower_group\" typeId=\"activefundpower_group\"/>\n+\t\t\t<channel-group id=\"activeharmpower_group\" typeId=\"activeharmpower_group\"/>\n+\t\t\t<channel-group id=\"reactivepower_group\" typeId=\"reactivepower_group\"/>\n+\t\t\t<channel-group id=\"powerfactor_group\" typeId=\"powerfactor_group\"/>\n+\n+\t\t\t<channel-group id=\"apppower_group\" typeId=\"apppower_group\"/>\n+\n+\t\t\t<channel-group id=\"fwd_active_energy_group\" typeId=\"fwd_active_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_fund_energy_group\" typeId=\"fwd_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_harm_energy_group\" typeId=\"fwd_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_reactive_energy_group\" typeId=\"fwd_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"rev_active_energy_group\" typeId=\"rev_active_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_fund_energy_group\" typeId=\"rev_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_harm_energy_group\" typeId=\"rev_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_reactive_energy_group\" typeId=\"rev_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"app_energy_group\" typeId=\"app_energy_group\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<!-- which parameters are required to find the PowerMeter -->\n+\t\t\t<!-- <parameter name=\"username\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>Enter the username of the device</description>\n+\t\t\t\t</parameter> -->\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Enter the password</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>IP</label>\n+\t\t\t\t<description>the IP address of the mecMeter</description>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU3Mzk0MA==", "bodyText": "Why use 2 if you add 3 entries?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> properties = new HashMap<>(2);\n          \n          \n            \n                    Map<String, Object> properties = new HashMap<>(3);", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600573940", "createdAt": "2021-03-24T15:09:01Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/internal/discovery/MecMeterDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.internal.discovery;\n+\n+import static org.openhab.binding.mecmeter.MecMeterBindingConstants.THING_TYPE_METER;\n+\n+import java.net.InetAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MecMeterDiscoveryParticipant} is responsible for discovering devices, which are\n+ * sent to inbox.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class)\n+public class MecMeterDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(MecMeterDiscoveryParticipant.class);\n+    private static final String SERVICE_TYPE = \"_http._tcp.local.\";\n+\n+    /**\n+     * Match the serial number, vendor and model of the discovered PowerMeter.\n+     * Input is like \"vpmAA11BB33CC55\"\n+     */\n+    private static final Pattern MECMETER_PATTERN = Pattern\n+            .compile(\"^(vpm|mec)[A-F0-9]{12}\\\\._http\\\\._tcp\\\\.local\\\\.$\");\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(THING_TYPE_METER);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return SERVICE_TYPE;\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo service) {\n+        String qualifiedName = service.getQualifiedName();\n+        logger.debug(\"Device found: {}\", qualifiedName);\n+        ThingUID uid = getThingUID(service);\n+        if (uid == null) {\n+            return null;\n+        }\n+\n+        String serial = qualifiedName.substring(3, 15);\n+        String vendor = \"MEC\";\n+\n+        InetAddress ip = getIpAddress(service);\n+        if (ip == null) {\n+            return null;\n+        }\n+        String inetAddress = ip.toString().substring(1);\n+\n+        Map<String, Object> properties = new HashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU3NzA3OQ==", "bodyText": "SAT warnings about missing @NonNullByDefault can be prevented by moving it to another package:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.openhab.binding.mecmeter.internal.api;\n          \n          \n            \n            package org.openhab.binding.mecmeter.internal.dto;", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600577079", "createdAt": "2021-03-24T15:12:06Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/internal/api/MecMeterResponse.java", "diffHunk": "@@ -0,0 +1,856 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.internal.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU3Nzk0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /* Konstanten */\n          \n          \n            \n                /* Constants */", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600577948", "createdAt": "2021-03-24T15:13:02Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/internal/api/MecMeterResponse.java", "diffHunk": "@@ -0,0 +1,856 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.internal.api;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link MecMeterResponse} is responsible for storing\n+ * the \"data\" node of the JSON response\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+public class MecMeterResponse {\n+    /* General */\n+    @SerializedName(\"F\")\n+    private float frequency;\n+    @SerializedName(\"T\")\n+    private float temperature;\n+    @SerializedName(\"TIME\")\n+    private long operationalTime;\n+\n+    /* Voltage */\n+    @SerializedName(\"VA\")\n+    private float voltagePhase1;\n+    @SerializedName(\"VB\")\n+    private float voltagePhase2;\n+    @SerializedName(\"VC\")\n+    private float voltagePhase3;\n+    @SerializedName(\"VCB\")\n+    private float voltagePhase3ToPhase2;\n+    @SerializedName(\"VBA\")\n+    private float voltagePhase2ToPhase1;\n+    @SerializedName(\"VAC\")\n+    private float voltagePhase1ToPhase3;\n+    @SerializedName(\"VPT\")\n+    private float averageVoltagePhaseToPhase;\n+    @SerializedName(\"VT\")\n+    private float averageVoltageNeutralToPhase;\n+\n+    /* Current */\n+    @SerializedName(\"IA\")\n+    private float currentPhase1;\n+    @SerializedName(\"IB\")\n+    private float currentPhase2;\n+    @SerializedName(\"IC\")\n+    private float currentPhase3;\n+    @SerializedName(\"IN\")\n+    private float currentSum;\n+\n+    /* Angles */\n+    @SerializedName(\"IAA\")\n+    private float phaseAngleCurrentToVoltagePhase1;\n+    @SerializedName(\"IAB\")\n+    private float phaseAngleCurrentToVoltagePhase2;\n+    @SerializedName(\"IAC\")\n+    private float phaseAngleCurrentToVoltagePhase3;\n+    @SerializedName(\"UAA\")\n+    private float phaseAnglePhase1To3;\n+    @SerializedName(\"UAB\")\n+    private float phaseAnglePhase2To3;\n+\n+    /* Power */\n+    @SerializedName(\"PA\")\n+    private float activePowerPhase1;\n+    @SerializedName(\"PB\")\n+    private float activePowerPhase2;\n+    @SerializedName(\"PC\")\n+    private float activePowerPhase3;\n+    @SerializedName(\"PT\")\n+    private float activePowerSum;\n+\n+    @SerializedName(\"PAF\")\n+    private float activeFundamentalPowerPhase1;\n+    @SerializedName(\"PBF\")\n+    private float activeFundamentalPowerPhase2;\n+    @SerializedName(\"PCF\")\n+    private float activeFundamentalPowerPhase3;\n+    @SerializedName(\"PTF\")\n+    private float activeFundamentalPowerSum;\n+\n+    @SerializedName(\"PFA\")\n+    private float powerFactorPhase1;\n+    @SerializedName(\"PFB\")\n+    private float powerFactorPhase2;\n+    @SerializedName(\"PFC\")\n+    private float powerFactorPhase3;\n+    @SerializedName(\"PFT\")\n+    private float powerFactorSum;\n+\n+    @SerializedName(\"PAH\")\n+    private float activeHarmonicPowerPhase1;\n+    @SerializedName(\"PBH\")\n+    private float activeHarmonicPowerPhase2;\n+    @SerializedName(\"PCH\")\n+    private float activeHarmonicPowerPhase3;\n+    @SerializedName(\"PTH\")\n+    private float activeHarmonicPowerSum;\n+\n+    @SerializedName(\"QA\")\n+    private float reactivePowerPhase1;\n+    @SerializedName(\"QB\")\n+    private float reactivePowerPhase2;\n+    @SerializedName(\"QC\")\n+    private float reactivePowerPhase3;\n+    @SerializedName(\"QT\")\n+    private float reactivePowerSum;\n+\n+    @SerializedName(\"SA\")\n+    private float apparentPowerPhase1;\n+    @SerializedName(\"SB\")\n+    private float apparentPowerPhase2;\n+    @SerializedName(\"SC\")\n+    private float apparentPowerPhase3;\n+    @SerializedName(\"ST\")\n+    private float apparentPowerSum;\n+\n+    /* Forward Energy */\n+    @SerializedName(\"EFAA\")\n+    private float forwardActiveEnergyPhase1;\n+    @SerializedName(\"EFAB\")\n+    private float forwardActiveEnergyPhase2;\n+    @SerializedName(\"EFAC\")\n+    private float forwardActiveEnergyPhase3;\n+    @SerializedName(\"EFAT\")\n+    private float forwardActiveEnergySum;\n+\n+    @SerializedName(\"EFAF\")\n+    private float forwardActiveFundamentalEnergyPhase1;\n+    @SerializedName(\"EFBF\")\n+    private float forwardActiveFundamentalEnergyPhase2;\n+    @SerializedName(\"EFCF\")\n+    private float forwardActiveFundamentalEnergyPhase3;\n+    @SerializedName(\"EFTF\")\n+    private float forwardActiveFundamentalEnergySum;\n+\n+    @SerializedName(\"EFAH\")\n+    private float forwardActiveHarmonicEnergyPhase1;\n+    @SerializedName(\"EFBH\")\n+    private float forwardActiveHarmonicEnergyPhase2;\n+    @SerializedName(\"EFCH\")\n+    private float forwardActiveHarmonicEnergyPhase3;\n+    @SerializedName(\"EFTH\")\n+    private float forwardActiveHarmonicEnergySum;\n+\n+    @SerializedName(\"EFRA\")\n+    private float forwardReactiveEnergyPhase1;\n+    @SerializedName(\"EFRB\")\n+    private float forwardReactiveEnergyPhase2;\n+    @SerializedName(\"EFRC\")\n+    private float forwardReactiveEnergyPhase3;\n+    @SerializedName(\"EFRT\")\n+    private float forwardReactiveEnergySum;\n+\n+    /* Reverse Energy */\n+    @SerializedName(\"ERAA\")\n+    private float reverseActiveEnergyPhase1;\n+    @SerializedName(\"ERAB\")\n+    private float reverseActiveEnergyPhase2;\n+    @SerializedName(\"ERAC\")\n+    private float reverseActiveEnergyPhase3;\n+    @SerializedName(\"ERAT\")\n+    private float reverseActiveEnergySum;\n+\n+    @SerializedName(\"ERAF\")\n+    private float reverseActiveFundamentalEnergyPhase1;\n+    @SerializedName(\"ERBF\")\n+    private float reverseActiveFundamentalEnergyPhase2;\n+    @SerializedName(\"ERCF\")\n+    private float reverseActiveFundamentalEnergyPhase3;\n+    @SerializedName(\"ERTF\")\n+    private float reverseActiveFundamentalEnergySum;\n+\n+    @SerializedName(\"ERAH\")\n+    private float reverseActiveHarmonicEnergyPhase1;\n+    @SerializedName(\"ERBH\")\n+    private float reverseActiveHarmonicEnergyPhase2;\n+    @SerializedName(\"ERCH\")\n+    private float reverseActiveHarmonicEnergyPhase3;\n+    @SerializedName(\"ERTH\")\n+    private float reverseActiveHarmonicEnergySum;\n+\n+    @SerializedName(\"ERRA\")\n+    private float reverseReactiveEnergyPhase1;\n+    @SerializedName(\"ERRB\")\n+    private float reverseReactiveEnergyPhase2;\n+    @SerializedName(\"ERRC\")\n+    private float reverseReactiveEnergyPhase3;\n+    @SerializedName(\"ERRT\")\n+    private float reverseReactiveEnergySum;\n+\n+    /* apparent Energy */\n+    @SerializedName(\"ESA\")\n+    private float apparentEnergyConsumptionPhase1;\n+    @SerializedName(\"ESB\")\n+    private float apparentEnergyConsumptionPhase2;\n+    @SerializedName(\"ESC\")\n+    private float apparentEnergyConsumptionPhase3;\n+    @SerializedName(\"EST\")\n+    private float apparentEnergyConsumptionSum;\n+\n+    /* Konstanten */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU3OTQ2NA==", "bodyText": "Useless assignment:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    DiscoveryResult result = DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(label)\n          \n          \n            \n                            .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER).build();\n          \n          \n            \n                    return result;\n          \n          \n            \n                    return DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(label)\n          \n          \n            \n                            .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER).build();", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600579464", "createdAt": "2021-03-24T15:14:46Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/internal/discovery/MecMeterDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.internal.discovery;\n+\n+import static org.openhab.binding.mecmeter.MecMeterBindingConstants.THING_TYPE_METER;\n+\n+import java.net.InetAddress;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MecMeterDiscoveryParticipant} is responsible for discovering devices, which are\n+ * sent to inbox.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+@Component(service = MDNSDiscoveryParticipant.class)\n+public class MecMeterDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private Logger logger = LoggerFactory.getLogger(MecMeterDiscoveryParticipant.class);\n+    private static final String SERVICE_TYPE = \"_http._tcp.local.\";\n+\n+    /**\n+     * Match the serial number, vendor and model of the discovered PowerMeter.\n+     * Input is like \"vpmAA11BB33CC55\"\n+     */\n+    private static final Pattern MECMETER_PATTERN = Pattern\n+            .compile(\"^(vpm|mec)[A-F0-9]{12}\\\\._http\\\\._tcp\\\\.local\\\\.$\");\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(THING_TYPE_METER);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return SERVICE_TYPE;\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo service) {\n+        String qualifiedName = service.getQualifiedName();\n+        logger.debug(\"Device found: {}\", qualifiedName);\n+        ThingUID uid = getThingUID(service);\n+        if (uid == null) {\n+            return null;\n+        }\n+\n+        String serial = qualifiedName.substring(3, 15);\n+        String vendor = \"MEC\";\n+\n+        InetAddress ip = getIpAddress(service);\n+        if (ip == null) {\n+            return null;\n+        }\n+        String inetAddress = ip.toString().substring(1);\n+\n+        Map<String, Object> properties = new HashMap<>(2);\n+        properties.put(Thing.PROPERTY_SERIAL_NUMBER, serial);\n+        properties.put(Thing.PROPERTY_VENDOR, vendor);\n+        properties.put(\"ip\", inetAddress);\n+\n+        String label = \"MEC Power Meter\";\n+        DiscoveryResult result = DiscoveryResultBuilder.create(uid).withProperties(properties).withLabel(label)\n+                .withRepresentationProperty(Thing.PROPERTY_SERIAL_NUMBER).build();\n+        return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU4OTA4Mg==", "bodyText": "The IP is not mandatory according to the configuration in thing-types.xml. It's probably only mandatory if you want to textually configure the meter?", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600589082", "createdAt": "2021-03-24T15:25:07Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/README.MD", "diffHunk": "@@ -0,0 +1,247 @@\n+# MecMeter Binding\n+\n+This binding reads data from MEC power meter for providing electrical information for the electric circuit.\n+\n+To use this binding the meter must be installed, initialized and connected to the same network as openHAB. \n+\n+## Supported Things\n+\n+The mecMeter is supported with firmware version starting from 2.0.0.\n+There is exactly one supported thing type `meter`, which represents the electric meter.\n+Its unique ID is the serial number.\n+\n+## Discovery\n+\n+MecMeters are automatically discovered via mDNS. \n+The IP of the Power Meter is automatically set and can be changed manually if needed.\n+The default update interval is set to 5 seconds. Intervals from 1 to 300 seconds can be set manually.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:  \n+\n+| Parameter       | Description                                                           |\n+|-----------------|-----------------------------------------------------------------------|\n+| password        | User-defined password during initializing the Power Meter.            |\n+| ip              | The IP address of the meter. Mandatory.                               |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5MDIxNA==", "bodyText": "The password is required so it cannot be null.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600590214", "createdAt": "2021-03-24T15:26:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/MecMeterDeviceConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter;\n+\n+/**\n+ * The {@link MecMeterDeviceConfiguration} is the class used to match the\n+ * thing configuration.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ */\n+public class MecMeterDeviceConfiguration {\n+    public String ip = \"\";\n+    public String username = \"admin\";\n+    public String password = \"12345\";\n+    public int refreshInterval = 5;\n+\n+    public MecMeterDeviceConfiguration() {\n+        super();\n+    }\n+\n+    public String getIp() {\n+        return ip;\n+    }\n+\n+    public void setIp(String inetaddress) {\n+        ip = inetaddress;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(String user) {\n+        username = user;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+    public void setPassword(String pw) {\n+        password = pw;\n+    }\n+\n+    public int getRefreshInterval() {\n+        return refreshInterval;\n+    }\n+\n+    public void setRefreshInterval(int ri) {\n+        refreshInterval = ri;\n+    }\n+\n+    public String isValid() {\n+        if (ip == null || ip.isBlank()) {\n+            return \"Missing IP\";\n+        }\n+        if (ip.contains(\"0.0.0.0\")) {\n+            return \"IP not set\";\n+        }\n+        if (username == null || username.isBlank()) {\n+            return \"username is missing\";\n+        }\n+        if (password == null || password.isBlank()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5MDkzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> pollFuture;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> pollFuture;", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600590938", "createdAt": "2021-03-24T15:27:03Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5MTIzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private MecMeterResponse powerMeterResponse;\n          \n          \n            \n                private @Nullable MecMeterResponse powerMeterResponse;", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600591233", "createdAt": "2021-03-24T15:27:18Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;\n+\n+    @Nullable\n+    private MecMeterResponse powerMeterResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5MjMyOQ==", "bodyText": "There is no such parameter.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600592329", "createdAt": "2021-03-24T15:28:24Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;\n+\n+    @Nullable\n+    private MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     *\n+     * @param config powermeter config ( ip, user, pwd )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5Mjc5Mg==", "bodyText": "There is no such parameter.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600592792", "createdAt": "2021-03-24T15:28:49Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;\n+\n+    @Nullable\n+    private MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @param config powermeter config ( ip, user, pwd )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5NTcyMA==", "bodyText": "This can be done without Jetty utility classes:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                new String(config.username + \":\" + config.password).getBytes(StringUtil.__ISO_8859_1));\n          \n          \n            \n                                new String(config.username + \":\" + config.password).getBytes(StandardCharsets.ISO_8859_1));", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600595720", "createdAt": "2021-03-24T15:31:53Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;\n+\n+    @Nullable\n+    private MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     * @return PowerMeterResponse class where json values \"are saved\"\n+     */\n+    private @Nullable MecMeterResponse getRealtimeData() {\n+        MecMeterResponse result = null;\n+        boolean resultOk = false;\n+        String errorMsg = null;\n+\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+\n+        try {\n+            String basicAuthentication = \"Basic \" + Base64.getEncoder().encodeToString(\n+                    new String(config.username + \":\" + config.password).getBytes(StringUtil.__ISO_8859_1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5NTgyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return PowerMeterResponse class where json values \"are saved\"\n          \n          \n            \n                 * @return MecMeterResponse class where json values \"are saved\"", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600595820", "createdAt": "2021-03-24T15:32:01Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;\n+\n+    @Nullable\n+    private MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     * @return PowerMeterResponse class where json values \"are saved\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5NjEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            errorMsg = \"Reading meter did not succeeed: \" + response.getReason();\n          \n          \n            \n                            errorMsg = \"Reading meter did not succeed: \" + response.getReason();", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600596138", "createdAt": "2021-03-24T15:32:23Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,412 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.jetty.util.StringUtil;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.api.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollFuture;\n+\n+    @Nullable\n+    private MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @param config powermeter config ( ip, user, pwd )\n+     * @return PowerMeterResponse class where json values \"are saved\"\n+     */\n+    private @Nullable MecMeterResponse getRealtimeData() {\n+        MecMeterResponse result = null;\n+        boolean resultOk = false;\n+        String errorMsg = null;\n+\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+\n+        try {\n+            String basicAuthentication = \"Basic \" + Base64.getEncoder().encodeToString(\n+                    new String(config.username + \":\" + config.password).getBytes(StringUtil.__ISO_8859_1));\n+\n+            String location = MecMeterBindingConstants.POWERMETER_DATA_URL.replace(\"%IP%\", config.ip.strip());\n+\n+            ContentResponse response = httpClient.newRequest(location).method(HttpMethod.GET)\n+                    .header(HttpHeader.AUTHORIZATION, basicAuthentication).timeout(API_TIMEOUT, TimeUnit.MILLISECONDS)\n+                    .send();\n+            if (response.getStatus() != 200) {\n+                errorMsg = \"Reading meter did not succeeed: \" + response.getReason();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDU5OTgzNg==", "bodyText": "Suggested change", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600599836", "createdAt": "2021-03-24T15:35:15Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,567 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mecmeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"meter\">\n+\t\t<label>mecMeter</label>\n+\t\t<description>Power Meter from MEC</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"general_group\" typeId=\"general_group\"/>\n+\t\t\t<channel-group id=\"voltage_group\" typeId=\"voltage_group\"/>\n+\t\t\t<channel-group id=\"current_group\" typeId=\"current_group\"/>\n+\t\t\t<channel-group id=\"angle_group\" typeId=\"angle_group\"/>\n+\n+\t\t\t<channel-group id=\"activepower_group\" typeId=\"activepower_group\"/>\n+\t\t\t<channel-group id=\"activefundpower_group\" typeId=\"activefundpower_group\"/>\n+\t\t\t<channel-group id=\"activeharmpower_group\" typeId=\"activeharmpower_group\"/>\n+\t\t\t<channel-group id=\"reactivepower_group\" typeId=\"reactivepower_group\"/>\n+\t\t\t<channel-group id=\"powerfactor_group\" typeId=\"powerfactor_group\"/>\n+\n+\t\t\t<channel-group id=\"apppower_group\" typeId=\"apppower_group\"/>\n+\n+\t\t\t<channel-group id=\"fwd_active_energy_group\" typeId=\"fwd_active_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_fund_energy_group\" typeId=\"fwd_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_harm_energy_group\" typeId=\"fwd_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_reactive_energy_group\" typeId=\"fwd_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"rev_active_energy_group\" typeId=\"rev_active_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_fund_energy_group\" typeId=\"rev_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_harm_energy_group\" typeId=\"rev_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_reactive_energy_group\" typeId=\"rev_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"app_energy_group\" typeId=\"app_energy_group\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<!-- which parameters are required to find the PowerMeter -->\n+\t\t\t<!-- <parameter name=\"username\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>Username</label>\n+\t\t\t\t<description>Enter the username of the device</description>\n+\t\t\t\t</parameter> -->\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Enter the password</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"false\">\n+\t\t\t\t<label>IP</label>\n+\t\t\t\t<description>the IP address of the mecMeter</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" min=\"1\" max=\"300\" step=\"1\" unit=\"s\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>5</default>\n+\t\t\t\t<description>Refresh interval in seconds, default 5 seconds, range 1 to 300 seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Definition of all Channel Groups -->\n+\t<channel-group-type id=\"general_group\">\n+\t\t<label>General Channels</label>\n+\t\t<description>General Channels</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"frequency\" typeId=\"frequency\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"op_time\" typeId=\"op_time\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"voltage_group\">\n+\t\t<label>Voltage</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_phase1\" typeId=\"voltage\">\n+\t\t\t\t<label>Voltage P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"voltage_phase2\" typeId=\"voltage\">\n+\t\t\t\t<label>Voltage P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"voltage_phase3\" typeId=\"voltage\">\n+\t\t\t\t<label>Voltage P3</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avg_phase_phase_voltage\" typeId=\"avg_phase_phase_voltage\"/>\n+\t\t\t<channel id=\"avg_neutral_phase_voltage\" typeId=\"avg_neutral_phase_voltage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"current_group\">\n+\t\t<label>Current</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"current_allphase\" typeId=\"current\"/>\n+\t\t\t<channel id=\"current_phase1\" typeId=\"current\">\n+\t\t\t\t<label>Current P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"current_phase2\" typeId=\"current\">\n+\t\t\t\t<label>Current P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"current_phase3\" typeId=\"current\">\n+\t\t\t\t<label>Current P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"angle_group\">\n+\t\t<label>Angles</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"phase_angle_currvolt_phase1\" typeId=\"phase_angle_currvolt\">\n+\t\t\t\t<label>Angle Current to P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"phase_angle_currvolt_phase2\" typeId=\"phase_angle_currvolt\">\n+\t\t\t\t<label>Angle Current to P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"phase_angle_currvolt_phase3\" typeId=\"phase_angle_currvolt\">\n+\t\t\t\t<label>Angle Current to P3</label>\n+\t\t\t</channel>\n+\n+\t\t\t<channel id=\"phase_angle_phase1-3\" typeId=\"phase_angle\"/>\n+\t\t\t<channel id=\"phase_angle_phase2-3\" typeId=\"phase_angle\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"activepower_group\">\n+\t\t<label>Active Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activepower_allphase\" typeId=\"activepower\"/>\n+\t\t\t<channel id=\"activepower_phase1\" typeId=\"activepower\">\n+\t\t\t\t<label>Active Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activepower_phase2\" typeId=\"activepower\">\n+\t\t\t\t<label>Active Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activepower_phase3\" typeId=\"activepower\">\n+\t\t\t\t<label>Active Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"activefundpower_group\">\n+\t\t<label>Active Fund Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activefundpower_allphase\" typeId=\"activefundpower\"/>\n+\t\t\t<channel id=\"activefundpower_phase1\" typeId=\"activefundpower\">\n+\t\t\t\t<label>Active Fund Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activefundpower_phase2\" typeId=\"activefundpower\">\n+\t\t\t\t<label>Active Fund Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activefundpower_phase3\" typeId=\"activefundpower\">\n+\t\t\t\t<label>Active Fund Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"activeharmpower_group\">\n+\t\t<label>Active Harm Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activeharmpower_allphase\" typeId=\"activeharmpower\"/>\n+\t\t\t<channel id=\"activeharmpower_phase1\" typeId=\"activeharmpower\">\n+\t\t\t\t<label>Active Harm Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activeharmpower_phase2\" typeId=\"activeharmpower\">\n+\t\t\t\t<label>Active Harm Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activeharmpower_phase3\" typeId=\"activeharmpower\">\n+\t\t\t\t<label>Active Harm Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"reactivepower_group\">\n+\t\t<label>Reactive Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"reactivepower_allphase\" typeId=\"reactivepower\"/>\n+\t\t\t<channel id=\"reactivepower_phase1\" typeId=\"reactivepower\">\n+\t\t\t\t<label>Reactive Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"reactivepower_phase2\" typeId=\"reactivepower\">\n+\t\t\t\t<label>Reactive Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"reactivepower_phase3\" typeId=\"reactivepower\">\n+\t\t\t\t<label>Reactive Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"apppower_group\">\n+\t\t<label>Apparent Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"apppower_allphase\" typeId=\"apppower\"/>\n+\t\t\t<channel id=\"apppower_phase1\" typeId=\"apppower\">\n+\t\t\t\t<label>Apparent Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"apppower_phase2\" typeId=\"apppower\">\n+\t\t\t\t<label>Apparent Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"apppower_phase3\" typeId=\"apppower\">\n+\t\t\t\t<label>Apparent Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_active_energy_group\">\n+\t\t<label>Fwd Active Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_active_energy_allphase\" typeId=\"fwd_active_energy_all\"/>\n+\t\t\t<channel id=\"fwd_active_energy_phase1\" typeId=\"fwd_active_energy\">\n+\t\t\t\t<label>Fwd Active Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_energy_phase2\" typeId=\"fwd_active_energy\">\n+\t\t\t\t<label>Fwd Active Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_energy_phase3\" typeId=\"fwd_active_energy\">\n+\t\t\t\t<label>Fwd Active Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_active_fund_energy_group\">\n+\t\t<label>Fwd Active Fund Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_active_fund_energy_allphase\" typeId=\"fwd_active_fund_energy\"/>\n+\t\t\t<channel id=\"fwd_active_fund_energy_phase1\" typeId=\"fwd_active_fund_energy\">\n+\t\t\t\t<label>Fwd Active Fund Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_fund_energy_phase2\" typeId=\"fwd_active_fund_energy\">\n+\t\t\t\t<label>Fwd Active Fund Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_fund_energy_phase3\" typeId=\"fwd_active_fund_energy\">\n+\t\t\t\t<label>Fwd Active Fund Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_active_harm_energy_group\">\n+\t\t<label>Fwd Active Harm Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_active_harm_energy_allphase\" typeId=\"fwd_active_harm_energy\"/>\n+\t\t\t<channel id=\"fwd_active_harm_energy_phase1\" typeId=\"fwd_active_harm_energy\">\n+\t\t\t\t<label>Fwd Active Harm Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_harm_energy_phase2\" typeId=\"fwd_active_harm_energy\">\n+\t\t\t\t<label>Fwd Active Harm Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_harm_energy_phase3\" typeId=\"fwd_active_harm_energy\">\n+\t\t\t\t<label>Fwd Active Harm Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_reactive_energy_group\">\n+\t\t<label>Fwd Reactive Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_reactive_energy_allphase\" typeId=\"fwd_reactive_energy\"/>\n+\t\t\t<channel id=\"fwd_reactive_energy_phase1\" typeId=\"fwd_reactive_energy\">\n+\t\t\t\t<label>Fwd Reactive Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_reactive_energy_phase2\" typeId=\"fwd_reactive_energy\">\n+\t\t\t\t<label>Fwd Reactive Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_reactive_energy_phase3\" typeId=\"fwd_reactive_energy\">\n+\t\t\t\t<label>Fwd Reactive Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_active_energy_group\">\n+\t\t<label>Rev Active Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_active_energy_allphase\" typeId=\"rev_active_energy_all\"/>\n+\t\t\t<channel id=\"rev_active_energy_phase1\" typeId=\"rev_active_energy\">\n+\t\t\t\t<label>Rev Active Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_energy_phase2\" typeId=\"rev_active_energy\">\n+\t\t\t\t<label>Rev Active Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_energy_phase3\" typeId=\"rev_active_energy\">\n+\t\t\t\t<label>Rev Active Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_active_fund_energy_group\">\n+\t\t<label>Rev Active Fund Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_active_fund_energy_allphase\" typeId=\"rev_active_fund_energy\"/>\n+\t\t\t<channel id=\"rev_active_fund_energy_phase1\" typeId=\"rev_active_fund_energy\">\n+\t\t\t\t<label>Rev Active Fund Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_fund_energy_phase2\" typeId=\"rev_active_fund_energy\">\n+\t\t\t\t<label>Rev Active Fund Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_fund_energy_phase3\" typeId=\"rev_active_fund_energy\">\n+\t\t\t\t<label>Rev Active Fund Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_active_harm_energy_group\">\n+\t\t<label>Rev Active Harm Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_active_harm_energy_allphase\" typeId=\"rev_active_harm_energy\"/>\n+\t\t\t<channel id=\"rev_active_harm_energy_phase1\" typeId=\"rev_active_harm_energy\">\n+\t\t\t\t<label>Rev Active Harm Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_harm_energy_phase2\" typeId=\"rev_active_harm_energy\">\n+\t\t\t\t<label>Rev Active Harm Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_harm_energy_phase3\" typeId=\"rev_active_harm_energy\">\n+\t\t\t\t<label>Rev Active Harm Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_reactive_energy_group\">\n+\t\t<label>Rev Reactive Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_reactive_energy_allphase\" typeId=\"rev_reactive_energy\"/>\n+\t\t\t<channel id=\"rev_reactive_energy_phase1\" typeId=\"rev_reactive_energy\">\n+\t\t\t\t<label>Rev Reactive Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_reactive_energy_phase2\" typeId=\"rev_reactive_energy\">\n+\t\t\t\t<label>Rev Reactive Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_reactive_energy_phase3\" typeId=\"rev_reactive_energy\">\n+\t\t\t\t<label>Rev Reactive Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"app_energy_group\">\n+\t\t<label>Apparent Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"appenergy_consumption_allphase\" typeId=\"appenergy_consumption\"/>\n+\t\t\t<channel id=\"appenergy_consumption_phase1\" typeId=\"appenergy_consumption\">\n+\t\t\t\t<label>Apparent Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"appenergy_consumption_phase2\" typeId=\"appenergy_consumption\">\n+\t\t\t\t<label>Apparent Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"appenergy_consumption_phase3\" typeId=\"appenergy_consumption\">\n+\t\t\t\t<label>Apparent Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"powerfactor_group\">\n+\t\t<label>Power Factor</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"powerFactor_allphase\" typeId=\"powerFactor\"/>\n+\t\t\t<channel id=\"powerFactor_phase1\" typeId=\"powerFactor\">\n+\t\t\t\t<label>Power Factor P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"powerFactor_phase2\" typeId=\"powerFactor\">\n+\t\t\t\t<label>Power Factor P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"powerFactor_phase3\" typeId=\"powerFactor\">\n+\t\t\t\t<label>Power Factor P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<!-- definition of channels types -->\n+\t<!-- General -->\n+\t<channel-type id=\"frequency\">\n+\t\t<item-type>Number:Frequency</item-type>\n+\t\t<label>Main Frequency</label>\n+\t\t<description>Frequency in Hertz</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Internal Temperature</label>\n+\t\t<description>Internal Temperature of the energy meter</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"op_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Time in Operation</label>\n+\t\t<description>Time in Operation</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDYwNTMwMQ==", "bodyText": "It also needs to be added to the BOM pom.xml.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600605301", "createdAt": "2021-03-24T15:40:48Z", "author": {"login": "wborn"}, "path": "bundles/pom.xml", "diffHunk": "@@ -178,6 +178,7 @@\n     <module>org.openhab.binding.mail</module>\n     <module>org.openhab.binding.max</module>\n     <module>org.openhab.binding.mcp23017</module>\n+    <module>org.openhab.binding.mecmeter</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b864586f55baf5f4e6c3c07835942750efb0573"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84ff064da612a2fd792d3ecb109823fd0aed3bee", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/84ff064da612a2fd792d3ecb109823fd0aed3bee", "committedDate": "2021-03-24T18:40:10Z", "message": "Initial contribution of mecmeter binding\n\nAlso-by: Klaus Berger <klaus.berger@verbund.com>\nAlso-by: Florian Pazour <florian.pazour@verbund.com>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11d5c756be321df5083ac4d142587d6d1013d68f", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/11d5c756be321df5083ac4d142587d6d1013d68f", "committedDate": "2021-03-24T18:39:31Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "84ff064da612a2fd792d3ecb109823fd0aed3bee", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/84ff064da612a2fd792d3ecb109823fd0aed3bee", "committedDate": "2021-03-24T18:40:10Z", "message": "Initial contribution of mecmeter binding\n\nAlso-by: Klaus Berger <klaus.berger@verbund.com>\nAlso-by: Florian Pazour <florian.pazour@verbund.com>\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIwMjQzNTM2", "url": "https://github.com/openhab/openhab-addons/pull/9075#pullrequestreview-620243536", "createdAt": "2021-03-24T21:23:37Z", "commit": {"oid": "84ff064da612a2fd792d3ecb109823fd0aed3bee"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQyMToyMzozOFrOI9DCHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQyMTozNTowNVrOI9DZXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDg4Mzc0MA==", "bodyText": "It may help to also document that this parameter is mandatory.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600883740", "createdAt": "2021-03-24T21:23:38Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/README.MD", "diffHunk": "@@ -0,0 +1,247 @@\n+# MecMeter Binding\n+\n+This binding reads data from MEC power meter for providing electrical information for the electric circuit.\n+\n+To use this binding the meter must be installed, initialized and connected to the same network as openHAB. \n+\n+## Supported Things\n+\n+The mecMeter is supported with firmware version starting from 2.0.0.\n+There is exactly one supported thing type `meter`, which represents the electric meter.\n+Its unique ID is the serial number.\n+\n+## Discovery\n+\n+MecMeters are automatically discovered via mDNS. \n+The IP of the Power Meter is automatically set and can be changed manually if needed.\n+The default update interval is set to 5 seconds. Intervals from 1 to 300 seconds can be set manually.\n+\n+## Thing Configuration\n+\n+The thing has a few configuration parameters:  \n+\n+| Parameter       | Description                                                           |\n+|-----------------|-----------------------------------------------------------------------|\n+| password        | User-defined password during initializing the Power Meter.            |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84ff064da612a2fd792d3ecb109823fd0aed3bee"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDg4OTY5Mg==", "bodyText": "The error log level used in this method seems a bit too severe. The debug/error logging in this method also isn't that useful. That's because a very similar errorMsg is always used to update the Thing status. So it might be better to remove all the debug/error logging. WDYT?", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r600889692", "createdAt": "2021-03-24T21:35:05Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.dto.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private static final String USERNAME = \"admin\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    private @Nullable ScheduledFuture<?> pollFuture;\n+\n+    private @Nullable MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @return MecMeterResponse class where json values \"are saved\"\n+     */\n+    private @Nullable MecMeterResponse getRealtimeData() {\n+        MecMeterResponse result = null;\n+        boolean resultOk = false;\n+        String errorMsg = null;\n+\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+\n+        try {\n+            String basicAuthentication = \"Basic \" + Base64.getEncoder()\n+                    .encodeToString(new String(USERNAME + \":\" + config.password).getBytes(StandardCharsets.ISO_8859_1));\n+\n+            String location = MecMeterBindingConstants.POWERMETER_DATA_URL.replace(\"%IP%\", config.ip.strip());\n+\n+            ContentResponse response = httpClient.newRequest(location).method(HttpMethod.GET)\n+                    .header(HttpHeader.AUTHORIZATION, basicAuthentication).timeout(API_TIMEOUT, TimeUnit.MILLISECONDS)\n+                    .send();\n+            if (response.getStatus() != 200) {\n+                errorMsg = \"Reading meter did not succeed: \" + response.getReason();\n+                logger.error(\"Request to meter failed: HTTP {}: {}\", response.getStatus(), response.getReason());\n+            } else {\n+                result = gson.fromJson(response.getContentAsString(), MecMeterResponse.class);\n+                if (result == null) {\n+                    errorMsg = \"no data returned\";\n+                    logger.error(\"no data returned from meter at {}\", location);\n+                } else {\n+                    resultOk = true;\n+                }\n+            }\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = \"Configuration is incorrect\";\n+            logger.error(\"Error running power meter request: {}\", e.getMessage());\n+        } catch (IllegalStateException e) {\n+            errorMsg = \"Connection failed\";\n+            logger.error(\"Error running powermeter request: {}\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84ff064da612a2fd792d3ecb109823fd0aed3bee"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdf7e9aa659ad8410e527db9476859e6d10a46ae", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/bdf7e9aa659ad8410e527db9476859e6d10a46ae", "committedDate": "2021-03-24T22:30:07Z", "message": "addressed review feedback\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIwMjkwODY4", "url": "https://github.com/openhab/openhab-addons/pull/9075#pullrequestreview-620290868", "createdAt": "2021-03-24T22:45:18Z", "commit": {"oid": "bdf7e9aa659ad8410e527db9476859e6d10a46ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717fa514782235a9ceaceeefbcfb3e340ac4a903", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/717fa514782235a9ceaceeefbcfb3e340ac4a903", "committedDate": "2021-03-25T12:04:23Z", "message": "added codeowners entry\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIyNjU0MzQy", "url": "https://github.com/openhab/openhab-addons/pull/9075#pullrequestreview-622654342", "createdAt": "2021-03-27T14:32:13Z", "commit": {"oid": "717fa514782235a9ceaceeefbcfb3e340ac4a903"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yN1QxNDozMjoxM1rOI-zfSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yN1QxNDozOTowOVrOI-ziiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjcyNjIxOA==", "bodyText": "I think this should be warn, if the remote fails.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r602726218", "createdAt": "2021-03-27T14:32:13Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.dto.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private static final String USERNAME = \"admin\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    private @Nullable ScheduledFuture<?> pollFuture;\n+\n+    private @Nullable MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @return MecMeterResponse class where json values \"are saved\"\n+     */\n+    private @Nullable MecMeterResponse getRealtimeData() {\n+        MecMeterResponse result = null;\n+        boolean resultOk = false;\n+        String errorMsg = null;\n+\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+\n+        try {\n+            String basicAuthentication = \"Basic \" + Base64.getEncoder()\n+                    .encodeToString(new String(USERNAME + \":\" + config.password).getBytes(StandardCharsets.ISO_8859_1));\n+\n+            String location = MecMeterBindingConstants.POWERMETER_DATA_URL.replace(\"%IP%\", config.ip.strip());\n+\n+            ContentResponse response = httpClient.newRequest(location).method(HttpMethod.GET)\n+                    .header(HttpHeader.AUTHORIZATION, basicAuthentication).timeout(API_TIMEOUT, TimeUnit.MILLISECONDS)\n+                    .send();\n+            if (response.getStatus() != 200) {\n+                errorMsg = \"Reading meter did not succeed: \" + response.getReason();\n+                logger.error(\"Request to meter failed: HTTP {}: {}\", response.getStatus(), response.getReason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fa514782235a9ceaceeefbcfb3e340ac4a903"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjcyNjQ1OA==", "bodyText": "Are you sure these are Energy? The names sound dimensionless.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r602726458", "createdAt": "2021-03-27T14:35:03Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/java/org/openhab/binding/mecmeter/handler/MecMeterHandler.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mecmeter.handler;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpHeader;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.openhab.binding.mecmeter.MecMeterBindingConstants;\n+import org.openhab.binding.mecmeter.MecMeterDeviceConfiguration;\n+import org.openhab.binding.mecmeter.internal.dto.MecMeterResponse;\n+import org.openhab.core.library.types.QuantityType;\n+import org.openhab.core.library.unit.SIUnits;\n+import org.openhab.core.library.unit.Units;\n+import org.openhab.core.thing.Channel;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.Thing;\n+import org.openhab.core.thing.ThingStatus;\n+import org.openhab.core.thing.ThingStatusDetail;\n+import org.openhab.core.thing.binding.BaseThingHandler;\n+import org.openhab.core.types.Command;\n+import org.openhab.core.types.RefreshType;\n+import org.openhab.core.types.State;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link MecMeterHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Florian Pazour - Initial contribution\n+ * @author Klaus Berger - Initial contribution\n+ * @author Kai Kreuzer - Refactoring for openHAB 3\n+ */\n+@NonNullByDefault\n+public class MecMeterHandler extends BaseThingHandler {\n+\n+    private static final int API_TIMEOUT = 5000; // set on 5000ms - not specified in datasheet\n+\n+    private static final String USERNAME = \"admin\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MecMeterHandler.class);\n+\n+    private Gson gson = new Gson();\n+\n+    private final HttpClient httpClient;\n+\n+    private @Nullable ScheduledFuture<?> pollFuture;\n+\n+    private @Nullable MecMeterResponse powerMeterResponse;\n+\n+    public MecMeterHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        if (command instanceof RefreshType) {\n+            updateChannel(channelUID.getId());\n+        } else {\n+            logger.debug(\"Received unsupported command {}.\", command);\n+        }\n+    }\n+\n+    /**\n+     * function which is called to refresh the data\n+     */\n+    public void refresh() {\n+        updateData();\n+        updateChannels();\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+        logger.debug(\"removing thing..\");\n+        if (pollFuture != null) {\n+            pollFuture.cancel(true);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+        String configCheck = config.isValid();\n+\n+        if (configCheck != null) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, configCheck);\n+            return;\n+        }\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        if (pollFuture != null) {\n+            pollFuture.cancel(false);\n+        }\n+        pollFuture = scheduler.scheduleWithFixedDelay(() -> {\n+            refresh();\n+        }, 0, config.refreshInterval, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * Get new data\n+     * Function to save Response of the powermeter\n+     */\n+    private void updateData() {\n+        powerMeterResponse = getRealtimeData();\n+    }\n+\n+    /**\n+     * Get new realtime data over the network\n+     *\n+     * @return MecMeterResponse class where json values \"are saved\"\n+     */\n+    private @Nullable MecMeterResponse getRealtimeData() {\n+        MecMeterResponse result = null;\n+        boolean resultOk = false;\n+        String errorMsg = null;\n+\n+        MecMeterDeviceConfiguration config = getConfig().as(MecMeterDeviceConfiguration.class);\n+\n+        try {\n+            String basicAuthentication = \"Basic \" + Base64.getEncoder()\n+                    .encodeToString(new String(USERNAME + \":\" + config.password).getBytes(StandardCharsets.ISO_8859_1));\n+\n+            String location = MecMeterBindingConstants.POWERMETER_DATA_URL.replace(\"%IP%\", config.ip.strip());\n+\n+            ContentResponse response = httpClient.newRequest(location).method(HttpMethod.GET)\n+                    .header(HttpHeader.AUTHORIZATION, basicAuthentication).timeout(API_TIMEOUT, TimeUnit.MILLISECONDS)\n+                    .send();\n+            if (response.getStatus() != 200) {\n+                errorMsg = \"Reading meter did not succeed: \" + response.getReason();\n+                logger.error(\"Request to meter failed: HTTP {}: {}\", response.getStatus(), response.getReason());\n+            } else {\n+                result = gson.fromJson(response.getContentAsString(), MecMeterResponse.class);\n+                if (result == null) {\n+                    errorMsg = \"no data returned\";\n+                    logger.error(\"no data returned from meter at {}\", location);\n+                } else {\n+                    resultOk = true;\n+                }\n+            }\n+        } catch (JsonSyntaxException e) {\n+            errorMsg = \"Configuration is incorrect\";\n+            logger.error(\"Error running power meter request: {}\", e.getMessage());\n+        } catch (IllegalStateException e) {\n+            errorMsg = \"Connection failed\";\n+            logger.error(\"Error running powermeter request: {}\", e.getMessage());\n+        } catch (InterruptedException e) {\n+            logger.debug(\"Http request has been interrupted: {}\", e.getMessage());\n+        } catch (TimeoutException e) {\n+            logger.debug(\"Http request ran into a timeout: {}\", e.getMessage());\n+            errorMsg = \"Connection to power meter timed out.\";\n+        } catch (ExecutionException e) {\n+            logger.debug(\"Http request did not succeed: {}\", e.getMessage());\n+            errorMsg = \"Connection problem: \" + e.getMessage();\n+        }\n+\n+        // Update the thing status\n+        if (resultOk) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, errorMsg);\n+        }\n+\n+        return resultOk ? result : null;\n+    }\n+\n+    /**\n+     * Update all Channels\n+     */\n+    protected void updateChannels() {\n+        for (Channel channel : getThing().getChannels()) {\n+            updateChannel(channel.getUID().getId());\n+        }\n+    }\n+\n+    /**\n+     * Update the channel state\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     */\n+    protected void updateChannel(String channelId) {\n+        if (!isLinked(channelId)) {\n+            return;\n+        }\n+        State state = getState(channelId);\n+        if (state != null) {\n+            updateState(channelId, state);\n+        }\n+    }\n+\n+    /**\n+     * Get the state of a given channel\n+     *\n+     * @param channelId the id identifying the channel to be updated\n+     * @return state of the channel\n+     */\n+    protected @Nullable State getState(String channelId) {\n+        MecMeterResponse response = powerMeterResponse;\n+        if (response == null) {\n+            return null;\n+        } else {\n+            switch (channelId) {\n+                /* General */\n+                case MecMeterBindingConstants.FREQUENCY:\n+                    return new QuantityType<>(response.getFrequency(), Units.HERTZ);\n+                case MecMeterBindingConstants.TEMPERATURE:\n+                    return new QuantityType<>(response.getTemperature(), SIUnits.CELSIUS);\n+                case MecMeterBindingConstants.OPERATIONAL_TIME:\n+                    return new QuantityType<>(response.getOperationalTime() / 1000, Units.SECOND);\n+\n+                /* Voltage */\n+                case MecMeterBindingConstants.VOLTAGE_PHASE_1:\n+                    return new QuantityType<>(response.getVoltagePhase1(), Units.VOLT);\n+                case MecMeterBindingConstants.VOLTAGE_PHASE_2:\n+                    return new QuantityType<>(response.getVoltagePhase2(), Units.VOLT);\n+                case MecMeterBindingConstants.VOLTAGE_PHASE_3:\n+                    return new QuantityType<>(response.getVoltagePhase3(), Units.VOLT);\n+                case MecMeterBindingConstants.VOLTAGE_PHASE_3_TO_PHASE_2:\n+                    return new QuantityType<>(response.getVoltagePhase3ToPhase2(), Units.VOLT);\n+                case MecMeterBindingConstants.VOLTAGE_PHASE_2_TO_PHASE_1:\n+                    return new QuantityType<>(response.getVoltagePhase2ToPhase1(), Units.VOLT);\n+                case MecMeterBindingConstants.VOLTAGE_PHASE_1_TO_PHASE_3:\n+                    return new QuantityType<>(response.getVoltagePhase1ToPhase3(), Units.VOLT);\n+                case MecMeterBindingConstants.AVERAGE_VOLTAGE_PHASE_2_PHASE:\n+                    return new QuantityType<>(response.getAverageVoltagePhaseToPhase(), Units.VOLT);\n+                case MecMeterBindingConstants.AVERAGE_VOLTAGE_NEUTRAL_2_PHASE:\n+                    return new QuantityType<>(response.getAverageVoltageNeutralToPhase(), Units.VOLT);\n+\n+                /* Current */\n+                case MecMeterBindingConstants.CURRENT_PHASE_1:\n+                    return new QuantityType<>(response.getCurrentPhase1(), Units.AMPERE);\n+                case MecMeterBindingConstants.CURRENT_PHASE_2:\n+                    return new QuantityType<>(response.getCurrentPhase2(), Units.AMPERE);\n+                case MecMeterBindingConstants.CURRENT_PHASE_3:\n+                    return new QuantityType<>(response.getCurrentPhase3(), Units.AMPERE);\n+                case MecMeterBindingConstants.CURRENT_SUM:\n+                    return new QuantityType<>(response.getCurrentSum(), Units.AMPERE);\n+\n+                /* Angles */\n+                case MecMeterBindingConstants.PHASE_ANGLE_TO_CURRENT_PHASE_1:\n+                    return new QuantityType<>(response.getPhaseAngleCurrentToVoltagePhase1(), Units.DEGREE_ANGLE);\n+                case MecMeterBindingConstants.PHASE_ANGLE_TO_CURRENT_PHASE_2:\n+                    return new QuantityType<>(response.getPhaseAngleCurrentToVoltagePhase2(), Units.DEGREE_ANGLE);\n+                case MecMeterBindingConstants.PHASE_ANGLE_TO_CURRENT_PHASE_3:\n+                    return new QuantityType<>(response.getPhaseAngleCurrentToVoltagePhase3(), Units.DEGREE_ANGLE);\n+                case MecMeterBindingConstants.PHASE_ANGLE_PHASE_1_3:\n+                    return new QuantityType<>(response.getPhaseAnglePhase1To3(), Units.DEGREE_ANGLE);\n+                case MecMeterBindingConstants.PHASE_ANGLE_PHASE_2_3:\n+                    return new QuantityType<>(response.getPhaseAnglePhase2To3(), Units.DEGREE_ANGLE);\n+\n+                /* Power */\n+                case MecMeterBindingConstants.ACTIVE_POWER_PHASE_1:\n+                    return new QuantityType<>(response.getActivePowerPhase1(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_POWER_PHASE_2:\n+                    return new QuantityType<>(response.getActivePowerPhase2(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_POWER_PHASE_3:\n+                    return new QuantityType<>(response.getActivePowerPhase3(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_POWER_SUM:\n+                    return new QuantityType<>(response.getActivePowerSum(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_FUND_POWER_PHASE_1:\n+                    return new QuantityType<>(response.getActiveFundamentalPowerPhase1(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_FUND_POWER_PHASE_2:\n+                    return new QuantityType<>(response.getActiveFundamentalPowerPhase2(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_FUND_POWER_PHASE_3:\n+                    return new QuantityType<>(response.getActiveFundamentalPowerPhase3(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_FUND_POWER_ALL:\n+                    return new QuantityType<>(response.getActiveFundamentalPowerSum(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_HARM_POWER_PHASE_1:\n+                    return new QuantityType<>(response.getActiveHarmonicPowerPhase1(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_HARM_POWER_PHASE_2:\n+                    return new QuantityType<>(response.getActiveHarmonicPowerPhase2(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_HARM_POWER_PHASE_3:\n+                    return new QuantityType<>(response.getActiveHarmonicPowerPhase3(), Units.WATT);\n+                case MecMeterBindingConstants.ACTIVE_HARM_POWER_ALL:\n+                    return new QuantityType<>(response.getActiveHarmonicPowerSum(), Units.WATT);\n+                case MecMeterBindingConstants.REACTIVE_POWER_PHASE_1:\n+                    return new QuantityType<>(response.getReactivePowerPhase1(), Units.VAR);\n+                case MecMeterBindingConstants.REACTIVE_POWER_PHASE_2:\n+                    return new QuantityType<>(response.getReactivePowerPhase2(), Units.VAR);\n+                case MecMeterBindingConstants.REACTIVE_POWER_PHASE_3:\n+                    return new QuantityType<>(response.getReactivePowerPhase3(), Units.VAR);\n+                case MecMeterBindingConstants.REACTIVE_POWER_ALL:\n+                    return new QuantityType<>(response.getReactivePowerSum(), Units.VAR);\n+                case MecMeterBindingConstants.APP_POWER_PHASE_1:\n+                    return new QuantityType<>(response.getApparentPowerPhase1(), Units.VOLT_AMPERE);\n+                case MecMeterBindingConstants.APP_POWER_PHASE_2:\n+                    return new QuantityType<>(response.getApparentPowerPhase2(), Units.VOLT_AMPERE);\n+                case MecMeterBindingConstants.APP_POWER_PHASE_3:\n+                    return new QuantityType<>(response.getApparentPowerPhase3(), Units.VOLT_AMPERE);\n+                case MecMeterBindingConstants.APP_POWER_ALL:\n+                    return new QuantityType<>(response.getApparentPowerSum(), Units.VOLT_AMPERE);\n+\n+                /* Forward Energy */\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getForwardActiveEnergyPhase1(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getForwardActiveEnergyPhase2(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getForwardActiveEnergyPhase3(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_ENERGY_ALL:\n+                    return new QuantityType<>(response.getForwardActiveEnergySum(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_FUND_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getForwardActiveFundamentalEnergyPhase1(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_FUND_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getForwardActiveFundamentalEnergyPhase2(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_FUND_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getForwardActiveFundamentalEnergyPhase3(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_FUND_ENERGY_ALL:\n+                    return new QuantityType<>(response.getForwardActiveFundamentalEnergySum(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_HARM_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getForwardActiveHarmonicEnergyPhase1(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_HARM_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getForwardActiveHarmonicEnergyPhase2(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_HARM_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getForwardActiveHarmonicEnergyPhase3(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_ACTIVE_HARM_ENERGY_ALL:\n+                    return new QuantityType<>(response.getForwardActiveHarmonicEnergySum(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.FORWARD_REACTIVE_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getForwardReactiveEnergyPhase1(), Units.VAR_HOUR);\n+                case MecMeterBindingConstants.FORWARD_REACTIVE_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getForwardReactiveEnergyPhase2(), Units.VAR_HOUR);\n+                case MecMeterBindingConstants.FORWARD_REACTIVE_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getForwardReactiveEnergyPhase3(), Units.VAR_HOUR);\n+                case MecMeterBindingConstants.FORWARD_REACTIVE_ENERGY_ALL:\n+                    return new QuantityType<>(response.getForwardReactiveEnergySum(), Units.VAR_HOUR);\n+\n+                /* Reverse Energy */\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getReverseActiveEnergyPhase1(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getReverseActiveEnergyPhase2(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getReverseActiveEnergyPhase3(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_ENERGY_ALL:\n+                    return new QuantityType<>(response.getReverseActiveEnergySum(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_FUND_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getReverseActiveFundamentalEnergyPhase1(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_FUND_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getReverseActiveFundamentalEnergyPhase2(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_FUND_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getReverseActiveFundamentalEnergyPhase3(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_FUND_ENERGY_ALL:\n+                    return new QuantityType<>(response.getReverseActiveFundamentalEnergySum(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_HARM_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getReverseActiveHarmonicEnergyPhase1(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_HARM_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getReverseActiveHarmonicEnergyPhase2(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_HARM_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getReverseActiveHarmonicEnergyPhase3(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_ACTIVE_HARM_ENERGY_ALL:\n+                    return new QuantityType<>(response.getReverseActiveHarmonicEnergySum(), Units.KILOWATT_HOUR);\n+                case MecMeterBindingConstants.REVERSE_REACTIVE_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getReverseReactiveEnergyPhase1(), Units.VAR_HOUR);\n+                case MecMeterBindingConstants.REVERSE_REACTIVE_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getReverseReactiveEnergyPhase2(), Units.VAR_HOUR);\n+                case MecMeterBindingConstants.REVERSE_REACTIVE_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getReverseReactiveEnergyPhase3(), Units.VAR_HOUR);\n+                case MecMeterBindingConstants.REVERSE_REACTIVE_ENERGY_ALL:\n+                    return new QuantityType<>(response.getReverseReactiveEnergySum(), Units.VAR_HOUR);\n+\n+                /* Apparent Energy */\n+                case MecMeterBindingConstants.APP_ENERGY_PHASE_1:\n+                    return new QuantityType<>(response.getApparentEnergyConsumptionPhase1(), Units.VOLT_AMPERE_HOUR);\n+                case MecMeterBindingConstants.APP_ENERGY_PHASE_2:\n+                    return new QuantityType<>(response.getApparentEnergyConsumptionPhase2(), Units.VOLT_AMPERE_HOUR);\n+                case MecMeterBindingConstants.APP_ENERGY_PHASE_3:\n+                    return new QuantityType<>(response.getApparentEnergyConsumptionPhase3(), Units.VOLT_AMPERE_HOUR);\n+                case MecMeterBindingConstants.APP_ENERGY_ALL:\n+                    return new QuantityType<>(response.getApparentEnergyConsumptionSum(), Units.VOLT_AMPERE_HOUR);\n+\n+                /* Power Factor */\n+                case MecMeterBindingConstants.POWER_FACTOR_PHASE_1:\n+                    return new QuantityType<>(response.getPowerFactorPhase1(), Units.VOLT_AMPERE_HOUR);\n+                case MecMeterBindingConstants.POWER_FACTOR_PHASE_2:\n+                    return new QuantityType<>(response.getPowerFactorPhase2(), Units.VOLT_AMPERE_HOUR);\n+                case MecMeterBindingConstants.POWER_FACTOR_PHASE_3:\n+                    return new QuantityType<>(response.getPowerFactorPhase3(), Units.VOLT_AMPERE_HOUR);\n+                case MecMeterBindingConstants.POWER_FACTOR_ALL:\n+                    return new QuantityType<>(response.getPowerFactorSum(), Units.VOLT_AMPERE_HOUR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fa514782235a9ceaceeefbcfb3e340ac4a903"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjcyNzA0OA==", "bodyText": "This exceeds 25 chars.", "url": "https://github.com/openhab/openhab-addons/pull/9075#discussion_r602727048", "createdAt": "2021-03-27T14:39:09Z", "author": {"login": "fwolter"}, "path": "bundles/org.openhab.binding.mecmeter/src/main/resources/OH-INF/thing/thing-types.xml", "diffHunk": "@@ -0,0 +1,561 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<thing:thing-descriptions bindingId=\"mecmeter\"\n+\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+\txmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n+\txsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0 https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n+\n+\t<thing-type id=\"meter\">\n+\t\t<label>mecMeter</label>\n+\t\t<description>Power Meter from MEC</description>\n+\n+\t\t<channel-groups>\n+\t\t\t<channel-group id=\"general_group\" typeId=\"general_group\"/>\n+\t\t\t<channel-group id=\"voltage_group\" typeId=\"voltage_group\"/>\n+\t\t\t<channel-group id=\"current_group\" typeId=\"current_group\"/>\n+\t\t\t<channel-group id=\"angle_group\" typeId=\"angle_group\"/>\n+\n+\t\t\t<channel-group id=\"activepower_group\" typeId=\"activepower_group\"/>\n+\t\t\t<channel-group id=\"activefundpower_group\" typeId=\"activefundpower_group\"/>\n+\t\t\t<channel-group id=\"activeharmpower_group\" typeId=\"activeharmpower_group\"/>\n+\t\t\t<channel-group id=\"reactivepower_group\" typeId=\"reactivepower_group\"/>\n+\t\t\t<channel-group id=\"powerfactor_group\" typeId=\"powerfactor_group\"/>\n+\n+\t\t\t<channel-group id=\"apppower_group\" typeId=\"apppower_group\"/>\n+\n+\t\t\t<channel-group id=\"fwd_active_energy_group\" typeId=\"fwd_active_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_fund_energy_group\" typeId=\"fwd_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_active_harm_energy_group\" typeId=\"fwd_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"fwd_reactive_energy_group\" typeId=\"fwd_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"rev_active_energy_group\" typeId=\"rev_active_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_fund_energy_group\" typeId=\"rev_active_fund_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_active_harm_energy_group\" typeId=\"rev_active_harm_energy_group\"/>\n+\t\t\t<channel-group id=\"rev_reactive_energy_group\" typeId=\"rev_reactive_energy_group\"/>\n+\n+\t\t\t<channel-group id=\"app_energy_group\" typeId=\"app_energy_group\"/>\n+\t\t</channel-groups>\n+\n+\t\t<config-description>\n+\t\t\t<parameter name=\"password\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>Password</label>\n+\t\t\t\t<description>Enter the password</description>\n+\t\t\t\t<context>password</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"ip\" type=\"text\" required=\"true\">\n+\t\t\t\t<label>IP</label>\n+\t\t\t\t<description>The IP address of the mecMeter</description>\n+\t\t\t\t<context>network-address</context>\n+\t\t\t</parameter>\n+\t\t\t<parameter name=\"refreshInterval\" type=\"integer\" min=\"1\" max=\"300\" step=\"1\" unit=\"s\" required=\"false\">\n+\t\t\t\t<label>Refresh Interval</label>\n+\t\t\t\t<default>5</default>\n+\t\t\t\t<description>Refresh interval in seconds, default 5 seconds, range 1 to 300 seconds</description>\n+\t\t\t</parameter>\n+\t\t</config-description>\n+\t</thing-type>\n+\n+\t<!-- Definition of all Channel Groups -->\n+\t<channel-group-type id=\"general_group\">\n+\t\t<label>General Channels</label>\n+\t\t<description>General Channels</description>\n+\t\t<channels>\n+\t\t\t<channel id=\"frequency\" typeId=\"frequency\"/>\n+\t\t\t<channel id=\"temperature\" typeId=\"temperature\"/>\n+\t\t\t<channel id=\"op_time\" typeId=\"op_time\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"voltage_group\">\n+\t\t<label>Voltage</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"voltage_phase1\" typeId=\"voltage\">\n+\t\t\t\t<label>Voltage P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"voltage_phase2\" typeId=\"voltage\">\n+\t\t\t\t<label>Voltage P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"voltage_phase3\" typeId=\"voltage\">\n+\t\t\t\t<label>Voltage P3</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"avg_phase_phase_voltage\" typeId=\"avg_phase_phase_voltage\"/>\n+\t\t\t<channel id=\"avg_neutral_phase_voltage\" typeId=\"avg_neutral_phase_voltage\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"current_group\">\n+\t\t<label>Current</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"current_allphase\" typeId=\"current\"/>\n+\t\t\t<channel id=\"current_phase1\" typeId=\"current\">\n+\t\t\t\t<label>Current P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"current_phase2\" typeId=\"current\">\n+\t\t\t\t<label>Current P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"current_phase3\" typeId=\"current\">\n+\t\t\t\t<label>Current P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"angle_group\">\n+\t\t<label>Angles</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"phase_angle_currvolt_phase1\" typeId=\"phase_angle_currvolt\">\n+\t\t\t\t<label>Angle Current to P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"phase_angle_currvolt_phase2\" typeId=\"phase_angle_currvolt\">\n+\t\t\t\t<label>Angle Current to P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"phase_angle_currvolt_phase3\" typeId=\"phase_angle_currvolt\">\n+\t\t\t\t<label>Angle Current to P3</label>\n+\t\t\t</channel>\n+\n+\t\t\t<channel id=\"phase_angle_phase1-3\" typeId=\"phase_angle\"/>\n+\t\t\t<channel id=\"phase_angle_phase2-3\" typeId=\"phase_angle\"/>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"activepower_group\">\n+\t\t<label>Active Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activepower_allphase\" typeId=\"activepower\"/>\n+\t\t\t<channel id=\"activepower_phase1\" typeId=\"activepower\">\n+\t\t\t\t<label>Active Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activepower_phase2\" typeId=\"activepower\">\n+\t\t\t\t<label>Active Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activepower_phase3\" typeId=\"activepower\">\n+\t\t\t\t<label>Active Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"activefundpower_group\">\n+\t\t<label>Active Fund Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activefundpower_allphase\" typeId=\"activefundpower\"/>\n+\t\t\t<channel id=\"activefundpower_phase1\" typeId=\"activefundpower\">\n+\t\t\t\t<label>Active Fund Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activefundpower_phase2\" typeId=\"activefundpower\">\n+\t\t\t\t<label>Active Fund Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activefundpower_phase3\" typeId=\"activefundpower\">\n+\t\t\t\t<label>Active Fund Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"activeharmpower_group\">\n+\t\t<label>Active Harm Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"activeharmpower_allphase\" typeId=\"activeharmpower\"/>\n+\t\t\t<channel id=\"activeharmpower_phase1\" typeId=\"activeharmpower\">\n+\t\t\t\t<label>Active Harm Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activeharmpower_phase2\" typeId=\"activeharmpower\">\n+\t\t\t\t<label>Active Harm Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"activeharmpower_phase3\" typeId=\"activeharmpower\">\n+\t\t\t\t<label>Active Harm Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"reactivepower_group\">\n+\t\t<label>Reactive Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"reactivepower_allphase\" typeId=\"reactivepower\"/>\n+\t\t\t<channel id=\"reactivepower_phase1\" typeId=\"reactivepower\">\n+\t\t\t\t<label>Reactive Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"reactivepower_phase2\" typeId=\"reactivepower\">\n+\t\t\t\t<label>Reactive Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"reactivepower_phase3\" typeId=\"reactivepower\">\n+\t\t\t\t<label>Reactive Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"apppower_group\">\n+\t\t<label>Apparent Power</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"apppower_allphase\" typeId=\"apppower\"/>\n+\t\t\t<channel id=\"apppower_phase1\" typeId=\"apppower\">\n+\t\t\t\t<label>Apparent Power P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"apppower_phase2\" typeId=\"apppower\">\n+\t\t\t\t<label>Apparent Power P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"apppower_phase3\" typeId=\"apppower\">\n+\t\t\t\t<label>Apparent Power P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_active_energy_group\">\n+\t\t<label>Fwd Active Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_active_energy_allphase\" typeId=\"fwd_active_energy_all\"/>\n+\t\t\t<channel id=\"fwd_active_energy_phase1\" typeId=\"fwd_active_energy\">\n+\t\t\t\t<label>Fwd Active Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_energy_phase2\" typeId=\"fwd_active_energy\">\n+\t\t\t\t<label>Fwd Active Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_energy_phase3\" typeId=\"fwd_active_energy\">\n+\t\t\t\t<label>Fwd Active Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_active_fund_energy_group\">\n+\t\t<label>Fwd Active Fund Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_active_fund_energy_allphase\" typeId=\"fwd_active_fund_energy\"/>\n+\t\t\t<channel id=\"fwd_active_fund_energy_phase1\" typeId=\"fwd_active_fund_energy\">\n+\t\t\t\t<label>Fwd Active Fund Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_fund_energy_phase2\" typeId=\"fwd_active_fund_energy\">\n+\t\t\t\t<label>Fwd Active Fund Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_fund_energy_phase3\" typeId=\"fwd_active_fund_energy\">\n+\t\t\t\t<label>Fwd Active Fund Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_active_harm_energy_group\">\n+\t\t<label>Fwd Active Harm Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_active_harm_energy_allphase\" typeId=\"fwd_active_harm_energy\"/>\n+\t\t\t<channel id=\"fwd_active_harm_energy_phase1\" typeId=\"fwd_active_harm_energy\">\n+\t\t\t\t<label>Fwd Active Harm Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_harm_energy_phase2\" typeId=\"fwd_active_harm_energy\">\n+\t\t\t\t<label>Fwd Active Harm Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_active_harm_energy_phase3\" typeId=\"fwd_active_harm_energy\">\n+\t\t\t\t<label>Fwd Active Harm Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"fwd_reactive_energy_group\">\n+\t\t<label>Fwd Reactive Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"fwd_reactive_energy_allphase\" typeId=\"fwd_reactive_energy\"/>\n+\t\t\t<channel id=\"fwd_reactive_energy_phase1\" typeId=\"fwd_reactive_energy\">\n+\t\t\t\t<label>Fwd Reactive Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_reactive_energy_phase2\" typeId=\"fwd_reactive_energy\">\n+\t\t\t\t<label>Fwd Reactive Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"fwd_reactive_energy_phase3\" typeId=\"fwd_reactive_energy\">\n+\t\t\t\t<label>Fwd Reactive Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_active_energy_group\">\n+\t\t<label>Rev Active Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_active_energy_allphase\" typeId=\"rev_active_energy_all\"/>\n+\t\t\t<channel id=\"rev_active_energy_phase1\" typeId=\"rev_active_energy\">\n+\t\t\t\t<label>Rev Active Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_energy_phase2\" typeId=\"rev_active_energy\">\n+\t\t\t\t<label>Rev Active Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_energy_phase3\" typeId=\"rev_active_energy\">\n+\t\t\t\t<label>Rev Active Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_active_fund_energy_group\">\n+\t\t<label>Rev Active Fund Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_active_fund_energy_allphase\" typeId=\"rev_active_fund_energy\"/>\n+\t\t\t<channel id=\"rev_active_fund_energy_phase1\" typeId=\"rev_active_fund_energy\">\n+\t\t\t\t<label>Rev Active Fund Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_fund_energy_phase2\" typeId=\"rev_active_fund_energy\">\n+\t\t\t\t<label>Rev Active Fund Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_fund_energy_phase3\" typeId=\"rev_active_fund_energy\">\n+\t\t\t\t<label>Rev Active Fund Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_active_harm_energy_group\">\n+\t\t<label>Rev Active Harm Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_active_harm_energy_allphase\" typeId=\"rev_active_harm_energy\"/>\n+\t\t\t<channel id=\"rev_active_harm_energy_phase1\" typeId=\"rev_active_harm_energy\">\n+\t\t\t\t<label>Rev Active Harm Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_harm_energy_phase2\" typeId=\"rev_active_harm_energy\">\n+\t\t\t\t<label>Rev Active Harm Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_active_harm_energy_phase3\" typeId=\"rev_active_harm_energy\">\n+\t\t\t\t<label>Rev Active Harm Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"rev_reactive_energy_group\">\n+\t\t<label>Rev Reactive Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"rev_reactive_energy_allphase\" typeId=\"rev_reactive_energy\"/>\n+\t\t\t<channel id=\"rev_reactive_energy_phase1\" typeId=\"rev_reactive_energy\">\n+\t\t\t\t<label>Rev Reactive Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_reactive_energy_phase2\" typeId=\"rev_reactive_energy\">\n+\t\t\t\t<label>Rev Reactive Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"rev_reactive_energy_phase3\" typeId=\"rev_reactive_energy\">\n+\t\t\t\t<label>Rev Reactive Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"app_energy_group\">\n+\t\t<label>Apparent Energy</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"appenergy_consumption_allphase\" typeId=\"appenergy_consumption\"/>\n+\t\t\t<channel id=\"appenergy_consumption_phase1\" typeId=\"appenergy_consumption\">\n+\t\t\t\t<label>Apparent Energy P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"appenergy_consumption_phase2\" typeId=\"appenergy_consumption\">\n+\t\t\t\t<label>Apparent Energy P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"appenergy_consumption_phase3\" typeId=\"appenergy_consumption\">\n+\t\t\t\t<label>Apparent Energy P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<channel-group-type id=\"powerfactor_group\">\n+\t\t<label>Power Factor</label>\n+\t\t<channels>\n+\t\t\t<channel id=\"powerFactor_allphase\" typeId=\"powerFactor\"/>\n+\t\t\t<channel id=\"powerFactor_phase1\" typeId=\"powerFactor\">\n+\t\t\t\t<label>Power Factor P1</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"powerFactor_phase2\" typeId=\"powerFactor\">\n+\t\t\t\t<label>Power Factor P2</label>\n+\t\t\t</channel>\n+\t\t\t<channel id=\"powerFactor_phase3\" typeId=\"powerFactor\">\n+\t\t\t\t<label>Power Factor P3</label>\n+\t\t\t</channel>\n+\t\t</channels>\n+\t</channel-group-type>\n+\n+\t<!-- definition of channels types -->\n+\t<!-- General -->\n+\t<channel-type id=\"frequency\">\n+\t\t<item-type>Number:Frequency</item-type>\n+\t\t<label>Main Frequency</label>\n+\t\t<description>Frequency in Hertz</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"temperature\" advanced=\"true\">\n+\t\t<item-type>Number:Temperature</item-type>\n+\t\t<label>Internal Temperature</label>\n+\t\t<description>Internal Temperature of the energy meter</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"op_time\" advanced=\"true\">\n+\t\t<item-type>Number:Time</item-type>\n+\t\t<label>Time in Operation</label>\n+\t\t<description>Time in Operation</description>\n+\t\t<state pattern=\"%d %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<!-- Voltage -->\n+\t<channel-type id=\"avg_neutral_phase_voltage\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Average Voltage</label>\n+\t\t<description>Average N \u2013 Phase Voltage in Volt</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"voltage\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Voltage</label>\n+\t\t<description>Voltage in Volt</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"avg_phase_phase_voltage\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricPotential</item-type>\n+\t\t<label>Average Phase \u2013 Phase Voltage</label>\n+\t\t<description>Average Phase \u2013 Phase Voltage in Volt</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<!-- Current -->\n+\t<channel-type id=\"current\" advanced=\"true\">\n+\t\t<item-type>Number:ElectricCurrent</item-type>\n+\t\t<label>Current</label>\n+\t\t<description>Current in Ampere</description>\n+\t\t<state pattern=\"%.2f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<!-- Angles -->\n+\t<channel-type id=\"phase_angle_currvolt\" advanced=\"true\">\n+\t\t<item-type>Number:Angle</item-type>\n+\t\t<label>Angle Current to Voltage</label>\n+\t\t<description>Angle Current to Voltage in Degree</description>\n+\t\t<state pattern=\"%.1f \u00b0\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"phase_angle\" advanced=\"true\">\n+\t\t<item-type>Number:Angle</item-type>\n+\t\t<label>Angle Voltage to Voltage</label>\n+\t\t<description>Angle Voltage to Voltage in Degree</description>\n+\t\t<state pattern=\"%.1f \u00b0\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<!-- Power -->\n+\t<channel-type id=\"activepower\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Active Power</label>\n+\t\t<description>Active power consumed</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"activefundpower\" advanced=\"true\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Active Fundamental Power</label>\n+\t\t<description>Active fundamental power</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"activeharmpower\" advanced=\"true\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Active Harmonic Power</label>\n+\t\t<description>Active harmonic power</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"reactivepower\" advanced=\"true\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Reactive Power</label>\n+\t\t<description>Reactive power consumed</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"apppower\" advanced=\"true\">\n+\t\t<item-type>Number:Power</item-type>\n+\t\t<label>Apparent Power</label>\n+\t\t<description>Apparent power consumed</description>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<!-- Forward Energy -->\n+\t<channel-type id=\"fwd_active_energy_all\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Forward Active Energy</label>\n+\t\t<description>Forward Active Energy in kWh</description>\n+\t\t<category>Energy</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"fwd_active_energy\" advanced=\"true\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Forward Active Energy</label>\n+\t\t<description>Forward Active Energy in kWh</description>\n+\t\t<category>Energy</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\t<channel-type id=\"fwd_active_energy_allphase\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Forward Active Energy</label>\n+\t\t<description>Forward Active Energy all phase in kWh</description>\n+\t\t<category>Energy</category>\n+\t\t<state pattern=\"%.1f %unit%\" readOnly=\"true\"></state>\n+\t</channel-type>\n+\n+\t<channel-type id=\"fwd_active_fund_energy\" advanced=\"true\">\n+\t\t<item-type>Number:Energy</item-type>\n+\t\t<label>Forward Active Fundamental Energy</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fa514782235a9ceaceeefbcfb3e340ac4a903"}, "originalPosition": 484}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4582144ea02befc3db8224ffc83ee45b43f583d6", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/4582144ea02befc3db8224ffc83ee45b43f583d6", "committedDate": "2021-03-27T18:37:37Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjIyNzMzNjk3", "url": "https://github.com/openhab/openhab-addons/pull/9075#pullrequestreview-622733697", "createdAt": "2021-03-28T09:20:12Z", "commit": {"oid": "4582144ea02befc3db8224ffc83ee45b43f583d6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4127, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}