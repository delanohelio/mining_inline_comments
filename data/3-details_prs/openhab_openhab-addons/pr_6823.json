{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxODY4MTE4", "number": 6823, "title": "[ecobee] Ecobee binding initial contribution", "bodyText": "Contributing an OH2 version of the ecobee binding.\nBinding supports:\n\nAuto discovery of thermostats and remote sensors.\nCurrently uses OAuth process from OH1 version of the binding. Changes to core are needed to use the core OAuth support, so that will be tackled when the binding is ported to OH3.\nAdded several thing actions in addition to the actions from OH1.\n\nThings are organized in a Bridge->Bridge->Thing configuration. The first level (Account Bridge) represents the Ecobee Account. The second-level (Thermostat Bridge) represents the Thermostats that are associated with the Ecobee Account bridge. The third-level (Remote Sensor Thing) represents the remote and internal sensors that are associated with the Thermostat bridge.\nSigned-off-by: Mark Hilbush mark@hilbush.com", "createdAt": "2020-01-12T20:30:24Z", "url": "https://github.com/openhab/openhab-addons/pull/6823", "merged": true, "mergeCommit": {"oid": "36d7ef0faf33d4633e355d743fe993ef4c35bb29"}, "closed": true, "closedAt": "2020-04-16T20:17:49Z", "author": {"login": "mhilbush"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5yEr3gBqjI5NDE2NjcwNjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYSjjDgH2gAyMzYxODY4MTE4OmIwYTI2MDEwYjJkMzhjYmVmMjc5NWZiNzNmZGFmNmViNWU0YzNhNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72ba357936a18d6cee335e28f62b2fe7ea6a8a52", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/72ba357936a18d6cee335e28f62b2fe7ea6a8a52", "committedDate": "2020-01-12T20:13:56Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "d6698927922cfcf802bc5b9baf63404515361129", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/d6698927922cfcf802bc5b9baf63404515361129", "committedDate": "2020-01-13T01:28:35Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6698927922cfcf802bc5b9baf63404515361129", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/d6698927922cfcf802bc5b9baf63404515361129", "committedDate": "2020-01-13T01:28:35Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "3a17ab4d3b10b3d111a4dcadfe164f71bc874a19", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/3a17ab4d3b10b3d111a4dcadfe164f71bc874a19", "committedDate": "2020-01-13T14:21:32Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a17ab4d3b10b3d111a4dcadfe164f71bc874a19", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/3a17ab4d3b10b3d111a4dcadfe164f71bc874a19", "committedDate": "2020-01-13T14:21:32Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "85f2ca8c804f3bf07c3387e6d4deb883bc74f786", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/85f2ca8c804f3bf07c3387e6d4deb883bc74f786", "committedDate": "2020-01-13T16:36:55Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85f2ca8c804f3bf07c3387e6d4deb883bc74f786", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/85f2ca8c804f3bf07c3387e6d4deb883bc74f786", "committedDate": "2020-01-13T16:36:55Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "b67405e8d845f30ade6f50116353bfd7dc604fba", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/b67405e8d845f30ade6f50116353bfd7dc604fba", "committedDate": "2020-01-13T18:52:52Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b67405e8d845f30ade6f50116353bfd7dc604fba", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/b67405e8d845f30ade6f50116353bfd7dc604fba", "committedDate": "2020-01-13T18:52:52Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "f4a7d92e0fe81ae0671ca43fd60ceef430fbfab0", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/f4a7d92e0fe81ae0671ca43fd60ceef430fbfab0", "committedDate": "2020-01-13T18:55:53Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4a7d92e0fe81ae0671ca43fd60ceef430fbfab0", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/f4a7d92e0fe81ae0671ca43fd60ceef430fbfab0", "committedDate": "2020-01-13T18:55:53Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "70203dc4ba5df3f850e5383aab17af51064f5e66", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/70203dc4ba5df3f850e5383aab17af51064f5e66", "committedDate": "2020-01-13T20:44:42Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70203dc4ba5df3f850e5383aab17af51064f5e66", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/70203dc4ba5df3f850e5383aab17af51064f5e66", "committedDate": "2020-01-13T20:44:42Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "a392439f8dde6442e8488c55425a4d6fc5b7bcaa", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/a392439f8dde6442e8488c55425a4d6fc5b7bcaa", "committedDate": "2020-01-13T23:34:13Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a392439f8dde6442e8488c55425a4d6fc5b7bcaa", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/a392439f8dde6442e8488c55425a4d6fc5b7bcaa", "committedDate": "2020-01-13T23:34:13Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "e83dabd75e561b1c257bf14a1406d8229554d5ad", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/e83dabd75e561b1c257bf14a1406d8229554d5ad", "committedDate": "2020-01-14T01:04:06Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1eb46e6fc640471896a857ff98a5acc06d4ecd4c", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/1eb46e6fc640471896a857ff98a5acc06d4ecd4c", "committedDate": "2020-01-16T23:48:30Z", "message": "Integrate with OHC OAuth service\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "e63f073621d319c8814474a28d94455864721cc8", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/e63f073621d319c8814474a28d94455864721cc8", "committedDate": "2020-01-17T02:00:32Z", "message": "Integrate with OHC OAuth service\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "805bd52d27a8d70840b2285701286a57001607a1", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/805bd52d27a8d70840b2285701286a57001607a1", "committedDate": "2020-02-08T13:43:56Z", "message": "Improve handling of \"common\" API errors\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "64c3e44e1512561a9d86afe6df452bbf90c5acc6", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/64c3e44e1512561a9d86afe6df452bbf90c5acc6", "committedDate": "2020-02-26T19:07:47Z", "message": "Update to latest snapshot\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba02c4e7ddeeddb93fc228f5f4effadefdb74bd", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/1ba02c4e7ddeeddb93fc228f5f4effadefdb74bd", "committedDate": "2020-03-19T21:11:32Z", "message": "Initial contribution\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "912d1bc639057905442d60acb209769499398f90", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/912d1bc639057905442d60acb209769499398f90", "committedDate": "2020-03-19T21:11:33Z", "message": "Add readwrite indicator to docs\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ec8dab0b4e368f371f7497c36829a72f8b7b9d", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/66ec8dab0b4e368f371f7497c36829a72f8b7b9d", "committedDate": "2020-03-19T21:11:33Z", "message": "Integrate with OHC OAuth service\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2470cdbd6445347de2b040d1b227ffa904123b5c", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/2470cdbd6445347de2b040d1b227ffa904123b5c", "committedDate": "2020-03-19T21:11:33Z", "message": "Small fixes\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0096982d637e91319e6a28abbe343d6b5caea346", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/0096982d637e91319e6a28abbe343d6b5caea346", "committedDate": "2020-03-19T21:11:33Z", "message": "README updates\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63bd12237720d31c2b74b83ac5b2096835e9e792", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/63bd12237720d31c2b74b83ac5b2096835e9e792", "committedDate": "2020-03-19T21:11:33Z", "message": "Improve handling of \"common\" API errors\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f9d9c04df55fb8881c6a49d9aeafcf93886f562", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/6f9d9c04df55fb8881c6a49d9aeafcf93886f562", "committedDate": "2020-03-19T21:11:33Z", "message": "Update to latest snapshot\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f80ace88210a297be78b283d51e34a040ae97d69", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/f80ace88210a297be78b283d51e34a040ae97d69", "committedDate": "2020-03-19T21:13:00Z", "message": "Update to 2.5.4\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64c3e44e1512561a9d86afe6df452bbf90c5acc6", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/64c3e44e1512561a9d86afe6df452bbf90c5acc6", "committedDate": "2020-02-26T19:07:47Z", "message": "Update to latest snapshot\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}, "afterCommit": {"oid": "f80ace88210a297be78b283d51e34a040ae97d69", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/f80ace88210a297be78b283d51e34a040ae97d69", "committedDate": "2020-03-19T21:13:00Z", "message": "Update to 2.5.4\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5", "committedDate": "2020-04-03T16:56:37Z", "message": "Fix thermostat update url\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzM3NzYx", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-386737761", "createdAt": "2020-04-02T19:38:18Z", "commit": {"oid": "f80ace88210a297be78b283d51e34a040ae97d69"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxOTozODoxOVrOF_6mAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDozNjo0MFrOGABOtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjU2NDYxMA==", "bodyText": "Can you change this message to something like:\n\"Awaiting entry of PIN '%s' in MyApps, it expires in %d minutes.\"\nAlso what happens if it's expired?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r402564610", "createdAt": "2020-04-02T19:38:19Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/api/EcobeeAuth.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.api;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.HttpResponseException;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.smarthome.core.auth.client.oauth2.AccessTokenResponse;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthClientService;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthException;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.ecobee.internal.dto.oauth.AuthorizeResponseDTO;\n+import org.openhab.binding.ecobee.internal.dto.oauth.TokenResponseDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link EcobeeAuth} performs the initial OAuth authorization\n+ * with the Ecobee authorization servers. Once this process is complete, the\n+ * AccessTokenResponse will be imported into the OHC OAuth Client Service.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAuth.class);\n+\n+    private final EcobeeAccountBridgeHandler bridgeHandler;\n+    private final String apiKey;\n+    private final int apiTimeout;\n+    private final OAuthClientService oAuthClientService;\n+    private final HttpClient httpClient;\n+\n+    private EcobeeAuthState state;\n+\n+    private @Nullable AuthorizeResponseDTO authResponse;\n+\n+    private long pinExpirationTime;\n+\n+    /**\n+     * The authorization code needed to make the first-time request\n+     * of the refresh and access tokens. Obtained from the call to {@code authorize()}.\n+     */\n+    private @Nullable String code;\n+\n+    public EcobeeAuth(EcobeeAccountBridgeHandler bridgeHandler, String apiKey, int apiTimeout,\n+            OAuthClientService oAuthClientService, HttpClient httpClient) {\n+        this.apiKey = apiKey;\n+        this.apiTimeout = apiTimeout;\n+        this.oAuthClientService = oAuthClientService;\n+        this.httpClient = httpClient;\n+        this.bridgeHandler = bridgeHandler;\n+        pinExpirationTime = 0;\n+        state = EcobeeAuthState.NEED_PIN;\n+    }\n+\n+    public void setState(EcobeeAuthState newState) {\n+        if (newState != state) {\n+            logger.debug(\"EcobeeAuth: Change state from {} to {}\", state, newState);\n+            state = newState;\n+        }\n+    }\n+\n+    public boolean isComplete() {\n+        return state == EcobeeAuthState.COMPLETE;\n+    }\n+\n+    public EcobeeAuthState doAuthorization() throws EcobeeAuthException {\n+        switch (state) {\n+            case NEED_PIN:\n+                authorize();\n+                break;\n+            case NEED_TOKEN:\n+                getTokens();\n+                break;\n+            case COMPLETE:\n+                bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Call the Ecobee authorize endpoint to get the authorization code and PIN\n+     * that will be used a) validate the application in the the Ecobee user web portal,\n+     * and b) make the first time request for the access and refresh tokens.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void authorize() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'authorize'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_AUTHORIZE_URL);\n+        url.append(\"?response_type=ecobeePin\");\n+        url.append(\"&client_id=\").append(apiKey);\n+        url.append(\"&scope=\").append(ECOBEE_SCOPE);\n+\n+        logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url.toString());\n+        String response = executeUrl(\"GET\", url.toString());\n+        logger.trace(\"EcobeeAuth: Auth response: {}\", response);\n+\n+        try {\n+            authResponse = EcobeeApi.getGson().fromJson(response, AuthorizeResponseDTO.class);\n+            if (authResponse == null) {\n+                logger.debug(\"EcobeeAuth: Got null authorize response from Ecobee API\");\n+                setState(EcobeeAuthState.NEED_PIN);\n+            } else {\n+                if (StringUtils.isNotEmpty(authResponse.error)) {\n+                    throw new EcobeeAuthException(authResponse.error + \": \" + authResponse.errorDescription);\n+                }\n+                code = authResponse.code;\n+                writeLogMessage(authResponse.pin, authResponse.expiresIn);\n+                setPinExpirationTime(authResponse.expiresIn.longValue());\n+                updateBridgeStatus();\n+                setState(EcobeeAuthState.NEED_TOKEN);\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.info(\"EcobeeAuth: Exception while parsing authorize response: {}\", e.getMessage());\n+            setState(EcobeeAuthState.NEED_PIN);\n+        }\n+    }\n+\n+    /**\n+     * Call the Ecobee token endpoint to get the access and refresh tokens. Once successfully retrieved,\n+     * the access and refresh tokens will be injected into the OHC OAuth service.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void getTokens() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'getToken'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_TOKEN_URL);\n+        url.append(\"?grant_type=ecobeePin\");\n+        url.append(\"&code=\").append(code);\n+        url.append(\"&client_id=\").append(apiKey);\n+\n+        logger.trace(\"EcobeeAuth: Posting token URL={}\", url.toString());\n+        String response = executeUrl(\"POST\", url.toString());\n+        logger.trace(\"EcobeeAuth: Got a valid token response: {}\", response);\n+\n+        TokenResponseDTO tokenResponse = EcobeeApi.getGson().fromJson(response, TokenResponseDTO.class);\n+        if (tokenResponse == null) {\n+            logger.debug(\"EcobeeAuth: Got null token response from Ecobee API\");\n+            updateBridgeStatus();\n+            setState(isPinExpired() ? EcobeeAuthState.NEED_PIN : EcobeeAuthState.NEED_TOKEN);\n+            return;\n+        }\n+        if (StringUtils.isNotEmpty(tokenResponse.error)) {\n+            throw new EcobeeAuthException(tokenResponse.error + \": \" + tokenResponse.errorDescription);\n+        }\n+        AccessTokenResponse accessTokenResponse = new AccessTokenResponse();\n+        accessTokenResponse.setRefreshToken(tokenResponse.refreshToken);\n+        accessTokenResponse.setAccessToken(tokenResponse.accessToken);\n+        accessTokenResponse.setScope(tokenResponse.scope);\n+        accessTokenResponse.setTokenType(tokenResponse.tokenType);\n+        accessTokenResponse.setExpiresIn(tokenResponse.expiresIn);\n+        try {\n+            logger.debug(\"EcobeeAuth: Importing AccessTokenResponse into oAuthClientService!!!\");\n+            oAuthClientService.importAccessTokenResponse(accessTokenResponse);\n+            bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+            setState(EcobeeAuthState.COMPLETE);\n+            return;\n+        } catch (OAuthException e) {\n+            logger.info(\"EcobeeAuth: Got OAuthException\", e);\n+            // No other processing needed here\n+        }\n+        updateBridgeStatus();\n+        setState(isPinExpired() ? EcobeeAuthState.NEED_PIN : EcobeeAuthState.NEED_TOKEN);\n+    }\n+\n+    private void writeLogMessage(String pin, Integer expiresIn) {\n+        logger.info(\"#################################################################\");\n+        logger.info(\"# Ecobee: U S E R   I N T E R A C T I O N   R E Q U I R E D !!\");\n+        logger.info(\"# Go to the Ecobee web portal, then:\");\n+        logger.info(\"# Enter PIN '{}' in My Apps within {} minutes.\", pin, expiresIn);\n+        logger.info(\"# NOTE: All API attempts will fail in the meantime.\");\n+        logger.info(\"#################################################################\");\n+    }\n+\n+    private void updateBridgeStatus() {\n+        AuthorizeResponseDTO response = authResponse;\n+        if (response != null) {\n+            bridgeHandler.updateBridgeStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    String.format(\"Awaiting entry of PIN %s. Expires in %d minutes\", response.pin,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80ace88210a297be78b283d51e34a040ae97d69"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MzMzMw==", "bodyText": "This should be logger.debug", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r402673333", "createdAt": "2020-04-03T00:36:40Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/handler/EcobeeAccountBridgeHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.handler;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.CONFIG_THERMOSTAT_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthFactory;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ecobee.internal.api.EcobeeApi;\n+import org.openhab.binding.ecobee.internal.config.EcobeeAccountConfiguration;\n+import org.openhab.binding.ecobee.internal.discovery.ThermostatDiscoveryService;\n+import org.openhab.binding.ecobee.internal.dto.SelectionDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatUpdateRequestDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.summary.SummaryResponseDTO;\n+import org.openhab.binding.ecobee.internal.function.FunctionRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeAccountBridgeHandler} is responsible for managing\n+ * communication with the Ecobee API.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAccountBridgeHandler extends BaseBridgeHandler {\n+\n+    private static final int REFRESH_STARTUP_DELAY_SECONDS = 3;\n+    private static final int REFRESH_INTERVAL_SECONDS = 1;\n+    private static final int DISCOVERY_INTERVAL_SECONDS = 300;\n+    private static final int DISCOVERY_INITIAL_DELAY_SECONDS = 10;\n+    private static final int DEFAULT_REFRESH_INTERVAL_NORMAL_SECONDS = 20;\n+    private static final int DEFAULT_REFRESH_INTERVAL_QUICK_SECONDS = 5;\n+    private static final int DEFAULT_API_TIMEOUT_SECONDS = 20;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAccountBridgeHandler.class);\n+\n+    private final OAuthFactory oAuthFactory;\n+    private final HttpClient httpClient;\n+\n+    private @NonNullByDefault({}) EcobeeApi api;\n+    private @NonNullByDefault({}) String apiKey;\n+    private int refreshIntervalNormal;\n+    private int refreshIntervalQuick;\n+    private int apiTimeout;\n+    private boolean discoveryEnabled;\n+    private int discoveryInterval;\n+\n+    private final Map<String, EcobeeThermostatBridgeHandler> thermostatHandlers = new ConcurrentHashMap<>();\n+    private final Set<String> thermostatIds = new CopyOnWriteArraySet<>();\n+\n+    private @Nullable Future<?> refreshThermostatsJob;\n+    private final AtomicInteger refreshThermostatsCounter = new AtomicInteger(REFRESH_STARTUP_DELAY_SECONDS);\n+    private final AtomicInteger discoveryCounter = new AtomicInteger(DISCOVERY_INITIAL_DELAY_SECONDS);\n+    private @Nullable ThermostatDiscoveryService discoveryService;\n+\n+    private @Nullable SummaryResponseDTO previousSummary;\n+\n+    public EcobeeAccountBridgeHandler(final Bridge bridge, OAuthFactory oAuthFactory, HttpClient httpClient) {\n+        super(bridge);\n+        this.oAuthFactory = oAuthFactory;\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"AccountBridge: Initializing\");\n+        apiKey = getConfigAs(EcobeeAccountConfiguration.class).apiKey;\n+\n+        Integer value;\n+        value = getConfigAs(EcobeeAccountConfiguration.class).refreshIntervalNormal;\n+        refreshIntervalNormal = value == null ? DEFAULT_REFRESH_INTERVAL_NORMAL_SECONDS : value;\n+\n+        value = getConfigAs(EcobeeAccountConfiguration.class).refreshIntervalQuick;\n+        refreshIntervalQuick = value == null ? DEFAULT_REFRESH_INTERVAL_QUICK_SECONDS : value;\n+\n+        value = getConfigAs(EcobeeAccountConfiguration.class).apiTimeout;\n+        apiTimeout = (value == null ? DEFAULT_API_TIMEOUT_SECONDS : value) * 1000;\n+\n+        Boolean booleanValue = getConfigAs(EcobeeAccountConfiguration.class).discoveryEnabled;\n+        discoveryEnabled = booleanValue == null ? false : booleanValue.booleanValue();\n+        logger.info(\"AccountBridge: Thermostat and sensor discovery is {}\", discoveryEnabled ? \"enabled\" : \"disabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80ace88210a297be78b283d51e34a040ae97d69"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTY3NjQ5", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-387567649", "createdAt": "2020-04-03T20:42:36Z", "commit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDo0MjozNlrOGAos4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMTo0MzoyN1rOGAqlbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMDAzNQ==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403320035", "createdAt": "2020-04-03T20:42:36Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/enums/FanMode.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.enums;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link FanMode} represents the possible fan modes.\n+ *\n+ * @author John Cocula - Initial contribution\n+ * @author Mark Hilbush - Adapt for OH2/3\n+ */\n+public enum FanMode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMDU3OA==", "bodyText": "Please add @NonNullByDefault", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403320578", "createdAt": "2020-04-03T20:43:18Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/enums/HoldType.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.enums;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+/**\n+ * The {@link HoldType} represents the possible hold types.\n+ *\n+ * @author John Cocula - Initial contribution\n+ * @author Mark Hilbush - Adapt for OH2/3\n+ */\n+public enum HoldType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyMjcxNA==", "bodyText": "Maybe set the representation property as well?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403322714", "createdAt": "2020-04-03T20:46:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/discovery/ThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.discovery;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ThermostatDiscoveryService} is responsible for discovering the Ecobee\n+ * thermostats that are associated with the Ecobee Account.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ThermostatDiscoveryService.class);\n+\n+    private @NonNullByDefault({}) EcobeeAccountBridgeHandler bridgeHandler;\n+\n+    public ThermostatDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeAccountBridgeHandler) {\n+            this.bridgeHandler = (EcobeeAccountBridgeHandler) handler;\n+            this.bridgeHandler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.debug(\"ThermostatDiscovery: Activating Ecobee thermostat discovery service for {}\",\n+                bridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.debug(\"ThermostatDiscovery: Deactivating Ecobee thermostat discovery service for {}\",\n+                bridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THERMOSTAT_BRIDGE_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    public void startBackgroundDiscovery() {\n+        logger.trace(\"ThermostatDiscovery: Performing background discovery scan for {}\",\n+                bridgeHandler.getThing().getUID());\n+        discoverThermostats();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        logger.debug(\"ThermostatDiscovery: Starting discovery scan for {}\", bridgeHandler.getThing().getUID());\n+        discoverThermostats();\n+    }\n+\n+    @Override\n+    public synchronized void abortScan() {\n+        super.abortScan();\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+    }\n+\n+    private String buildLabel(String name) {\n+        return String.format(\"Ecobee Thermostat %s\", name);\n+    }\n+\n+    private synchronized void discoverThermostats() {\n+        for (ThermostatDTO thermostat : bridgeHandler.getRegisteredThermostats()) {\n+            String name = thermostat.name;\n+            String identifier = thermostat.identifier;\n+            if (identifier != null && name != null) {\n+                ThingUID thingUID = new ThingUID(UID_THERMOSTAT_BRIDGE, bridgeHandler.getThing().getUID(),\n+                        thermostat.identifier);\n+                thingDiscovered(createDiscoveryResult(thingUID, identifier, name));\n+                logger.trace(\"ThermostatDiscovery: Thermostat with id '{}' and name '{}' added to Inbox with UID '{}'\",\n+                        thermostat.identifier, thermostat.name, thingUID);\n+            }\n+        }\n+    }\n+\n+    private DiscoveryResult createDiscoveryResult(ThingUID thermostatUID, String identifier, String name) {\n+        Map<String, Object> properties = new HashMap<>(0);\n+        properties.put(CONFIG_THERMOSTAT_ID, identifier);\n+        return DiscoveryResultBuilder.create(thermostatUID).withProperties(properties)\n+                .withBridge(bridgeHandler.getThing().getUID()).withLabel(buildLabel(name)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyNDU4Nw==", "bodyText": "Maybe set the representation property as well?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403324587", "createdAt": "2020-04-03T20:48:41Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.discovery;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.RemoteSensorDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeThermostatBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SensorDiscoveryService} is responsible for discovering the Ecobee\n+ * sensors that are assigned to a thermostat.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SensorDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SensorDiscoveryService.class);\n+\n+    private @Nullable EcobeeThermostatBridgeHandler bridgeHandler;\n+\n+    public SensorDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeThermostatBridgeHandler) {\n+            ((EcobeeThermostatBridgeHandler) handler).setDiscoveryService(this);\n+            bridgeHandler = (EcobeeThermostatBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.debug(\"SensorDiscovery: Activating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.debug(\"SensorDiscovery: Deactivating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_SENSOR_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    public void startBackgroundDiscovery() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't perform background discovery because bridgeHandler is null\");\n+            return;\n+        }\n+        logger.debug(\"SensorDiscovery: Performing background discovery scan for {}\",\n+                localBridgeHandler.getThing().getUID());\n+        discoverSensors();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't perform discovery scan because bridgeHandler is null\");\n+            return;\n+        }\n+        logger.debug(\"SensorDiscovery: Starting discovery scan for {}\", localBridgeHandler.getThing().getUID());\n+        discoverSensors();\n+    }\n+\n+    @Override\n+    public synchronized void abortScan() {\n+        super.abortScan();\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+    }\n+\n+    private String buildLabel(String name) {\n+        return String.format(\"Ecobee Sensor %s\", name);\n+    }\n+\n+    private synchronized void discoverSensors() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't discover sensors because bridgeHandler is null\");\n+            return;\n+        }\n+        for (RemoteSensorDTO sensor : localBridgeHandler.getSensors()) {\n+            ThingUID bridgeUID = localBridgeHandler.getThing().getUID();\n+            ThingUID sensorUID = new ThingUID(UID_SENSOR_THING, bridgeUID, sensor.id.replace(\":\", \"-\"));\n+            thingDiscovered(createDiscoveryResult(sensorUID, bridgeUID, sensor));\n+            logger.trace(\"SensorDiscovery: Sensor with id '{}' and name '{}' added to Inbox with UID '{}'\", sensor.id,\n+                    sensor.name, sensorUID);\n+        }\n+    }\n+\n+    private DiscoveryResult createDiscoveryResult(ThingUID sensorUID, ThingUID bridgeUID, RemoteSensorDTO sensor) {\n+        Map<String, Object> properties = new HashMap<>(0);\n+        properties.put(CONFIG_SENSOR_ID, sensor.id);\n+        return DiscoveryResultBuilder.create(sensorUID).withProperties(properties).withBridge(bridgeUID)\n+                .withLabel(buildLabel(sensor.name)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyNzI5OQ==", "bodyText": "Would it be better to set a flag here so when the handler eventually does get assigned that it can start discovery at that time?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403327299", "createdAt": "2020-04-03T20:52:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.discovery;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.RemoteSensorDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeThermostatBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SensorDiscoveryService} is responsible for discovering the Ecobee\n+ * sensors that are assigned to a thermostat.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SensorDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SensorDiscoveryService.class);\n+\n+    private @Nullable EcobeeThermostatBridgeHandler bridgeHandler;\n+\n+    public SensorDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeThermostatBridgeHandler) {\n+            ((EcobeeThermostatBridgeHandler) handler).setDiscoveryService(this);\n+            bridgeHandler = (EcobeeThermostatBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.debug(\"SensorDiscovery: Activating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.debug(\"SensorDiscovery: Deactivating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_SENSOR_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    public void startBackgroundDiscovery() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't perform background discovery because bridgeHandler is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjE0NA==", "bodyText": "It would be better from a performance standpoint to use the logger for message formatting instead of trying to handle it yourself beforehand since use the logger from the get-go will allow avoiding wasting resources formatting a message that wouldn't get logged anyway due to logging levels.", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403332144", "createdAt": "2020-04-03T20:58:30Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/api/EcobeeAuth.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.api;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.HttpResponseException;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.smarthome.core.auth.client.oauth2.AccessTokenResponse;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthClientService;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthException;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.ecobee.internal.dto.oauth.AuthorizeResponseDTO;\n+import org.openhab.binding.ecobee.internal.dto.oauth.TokenResponseDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link EcobeeAuth} performs the initial OAuth authorization\n+ * with the Ecobee authorization servers. Once this process is complete, the\n+ * AccessTokenResponse will be imported into the OHC OAuth Client Service.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAuth.class);\n+\n+    private final EcobeeAccountBridgeHandler bridgeHandler;\n+    private final String apiKey;\n+    private final int apiTimeout;\n+    private final OAuthClientService oAuthClientService;\n+    private final HttpClient httpClient;\n+\n+    private EcobeeAuthState state;\n+\n+    private @Nullable AuthorizeResponseDTO authResponse;\n+\n+    private long pinExpirationTime;\n+\n+    /**\n+     * The authorization code needed to make the first-time request\n+     * of the refresh and access tokens. Obtained from the call to {@code authorize()}.\n+     */\n+    private @Nullable String code;\n+\n+    public EcobeeAuth(EcobeeAccountBridgeHandler bridgeHandler, String apiKey, int apiTimeout,\n+            OAuthClientService oAuthClientService, HttpClient httpClient) {\n+        this.apiKey = apiKey;\n+        this.apiTimeout = apiTimeout;\n+        this.oAuthClientService = oAuthClientService;\n+        this.httpClient = httpClient;\n+        this.bridgeHandler = bridgeHandler;\n+        pinExpirationTime = 0;\n+        state = EcobeeAuthState.NEED_PIN;\n+    }\n+\n+    public void setState(EcobeeAuthState newState) {\n+        if (newState != state) {\n+            logger.debug(\"EcobeeAuth: Change state from {} to {}\", state, newState);\n+            state = newState;\n+        }\n+    }\n+\n+    public boolean isComplete() {\n+        return state == EcobeeAuthState.COMPLETE;\n+    }\n+\n+    public EcobeeAuthState doAuthorization() throws EcobeeAuthException {\n+        switch (state) {\n+            case NEED_PIN:\n+                authorize();\n+                break;\n+            case NEED_TOKEN:\n+                getTokens();\n+                break;\n+            case COMPLETE:\n+                bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Call the Ecobee authorize endpoint to get the authorization code and PIN\n+     * that will be used a) validate the application in the the Ecobee user web portal,\n+     * and b) make the first time request for the access and refresh tokens.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void authorize() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'authorize'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_AUTHORIZE_URL);\n+        url.append(\"?response_type=ecobeePin\");\n+        url.append(\"&client_id=\").append(apiKey);\n+        url.append(\"&scope=\").append(ECOBEE_SCOPE);\n+\n+        logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url.toString());\n+        String response = executeUrl(\"GET\", url.toString());\n+        logger.trace(\"EcobeeAuth: Auth response: {}\", response);\n+\n+        try {\n+            authResponse = EcobeeApi.getGson().fromJson(response, AuthorizeResponseDTO.class);\n+            if (authResponse == null) {\n+                logger.debug(\"EcobeeAuth: Got null authorize response from Ecobee API\");\n+                setState(EcobeeAuthState.NEED_PIN);\n+            } else {\n+                if (StringUtils.isNotEmpty(authResponse.error)) {\n+                    throw new EcobeeAuthException(authResponse.error + \": \" + authResponse.errorDescription);\n+                }\n+                code = authResponse.code;\n+                writeLogMessage(authResponse.pin, authResponse.expiresIn);\n+                setPinExpirationTime(authResponse.expiresIn.longValue());\n+                updateBridgeStatus();\n+                setState(EcobeeAuthState.NEED_TOKEN);\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.info(\"EcobeeAuth: Exception while parsing authorize response: {}\", e.getMessage());\n+            setState(EcobeeAuthState.NEED_PIN);\n+        }\n+    }\n+\n+    /**\n+     * Call the Ecobee token endpoint to get the access and refresh tokens. Once successfully retrieved,\n+     * the access and refresh tokens will be injected into the OHC OAuth service.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void getTokens() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'getToken'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_TOKEN_URL);\n+        url.append(\"?grant_type=ecobeePin\");\n+        url.append(\"&code=\").append(code);\n+        url.append(\"&client_id=\").append(apiKey);\n+\n+        logger.trace(\"EcobeeAuth: Posting token URL={}\", url.toString());\n+        String response = executeUrl(\"POST\", url.toString());\n+        logger.trace(\"EcobeeAuth: Got a valid token response: {}\", response);\n+\n+        TokenResponseDTO tokenResponse = EcobeeApi.getGson().fromJson(response, TokenResponseDTO.class);\n+        if (tokenResponse == null) {\n+            logger.debug(\"EcobeeAuth: Got null token response from Ecobee API\");\n+            updateBridgeStatus();\n+            setState(isPinExpired() ? EcobeeAuthState.NEED_PIN : EcobeeAuthState.NEED_TOKEN);\n+            return;\n+        }\n+        if (StringUtils.isNotEmpty(tokenResponse.error)) {\n+            throw new EcobeeAuthException(tokenResponse.error + \": \" + tokenResponse.errorDescription);\n+        }\n+        AccessTokenResponse accessTokenResponse = new AccessTokenResponse();\n+        accessTokenResponse.setRefreshToken(tokenResponse.refreshToken);\n+        accessTokenResponse.setAccessToken(tokenResponse.accessToken);\n+        accessTokenResponse.setScope(tokenResponse.scope);\n+        accessTokenResponse.setTokenType(tokenResponse.tokenType);\n+        accessTokenResponse.setExpiresIn(tokenResponse.expiresIn);\n+        try {\n+            logger.debug(\"EcobeeAuth: Importing AccessTokenResponse into oAuthClientService!!!\");\n+            oAuthClientService.importAccessTokenResponse(accessTokenResponse);\n+            bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+            setState(EcobeeAuthState.COMPLETE);\n+            return;\n+        } catch (OAuthException e) {\n+            logger.info(\"EcobeeAuth: Got OAuthException\", e);\n+            // No other processing needed here\n+        }\n+        updateBridgeStatus();\n+        setState(isPinExpired() ? EcobeeAuthState.NEED_PIN : EcobeeAuthState.NEED_TOKEN);\n+    }\n+\n+    private void writeLogMessage(String pin, Integer expiresIn) {\n+        logger.info(\"#################################################################\");\n+        logger.info(\"# Ecobee: U S E R   I N T E R A C T I O N   R E Q U I R E D !!\");\n+        logger.info(\"# Go to the Ecobee web portal, then:\");\n+        logger.info(\"# Enter PIN '{}' in My Apps within {} minutes.\", pin, expiresIn);\n+        logger.info(\"# NOTE: All API attempts will fail in the meantime.\");\n+        logger.info(\"#################################################################\");\n+    }\n+\n+    private void updateBridgeStatus() {\n+        AuthorizeResponseDTO response = authResponse;\n+        if (response != null) {\n+            bridgeHandler.updateBridgeStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    String.format(\"Awaiting entry of PIN %s. Expires in %d minutes\", response.pin,\n+                            getMinutesUntilPinExpiration()));\n+\n+        }\n+    }\n+\n+    private void setPinExpirationTime(long expiresIn) {\n+        pinExpirationTime = expiresIn + TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis());\n+    }\n+\n+    private long getMinutesUntilPinExpiration() {\n+        return pinExpirationTime - TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis());\n+    }\n+\n+    private boolean isPinExpired() {\n+        return getMinutesUntilPinExpiration() <= 0;\n+    }\n+\n+    private @Nullable String executeUrl(String method, String url) {\n+        Request request = httpClient.newRequest(url);\n+        request.timeout(apiTimeout, TimeUnit.MILLISECONDS);\n+        request.method(method);\n+        EcobeeApi.HTTP_HEADERS.forEach((k, v) -> request.header((String) k, (String) v));\n+\n+        String errorMsg;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMzEyNQ==", "bodyText": "toString is handled for you by the logger.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"EcobeeAuth: Posting token URL={}\", url.toString());\n          \n          \n            \n                    logger.trace(\"EcobeeAuth: Posting token URL={}\", url);", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403333125", "createdAt": "2020-04-03T21:00:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/api/EcobeeAuth.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.api;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.HttpResponseException;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.smarthome.core.auth.client.oauth2.AccessTokenResponse;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthClientService;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthException;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.ecobee.internal.dto.oauth.AuthorizeResponseDTO;\n+import org.openhab.binding.ecobee.internal.dto.oauth.TokenResponseDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link EcobeeAuth} performs the initial OAuth authorization\n+ * with the Ecobee authorization servers. Once this process is complete, the\n+ * AccessTokenResponse will be imported into the OHC OAuth Client Service.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAuth.class);\n+\n+    private final EcobeeAccountBridgeHandler bridgeHandler;\n+    private final String apiKey;\n+    private final int apiTimeout;\n+    private final OAuthClientService oAuthClientService;\n+    private final HttpClient httpClient;\n+\n+    private EcobeeAuthState state;\n+\n+    private @Nullable AuthorizeResponseDTO authResponse;\n+\n+    private long pinExpirationTime;\n+\n+    /**\n+     * The authorization code needed to make the first-time request\n+     * of the refresh and access tokens. Obtained from the call to {@code authorize()}.\n+     */\n+    private @Nullable String code;\n+\n+    public EcobeeAuth(EcobeeAccountBridgeHandler bridgeHandler, String apiKey, int apiTimeout,\n+            OAuthClientService oAuthClientService, HttpClient httpClient) {\n+        this.apiKey = apiKey;\n+        this.apiTimeout = apiTimeout;\n+        this.oAuthClientService = oAuthClientService;\n+        this.httpClient = httpClient;\n+        this.bridgeHandler = bridgeHandler;\n+        pinExpirationTime = 0;\n+        state = EcobeeAuthState.NEED_PIN;\n+    }\n+\n+    public void setState(EcobeeAuthState newState) {\n+        if (newState != state) {\n+            logger.debug(\"EcobeeAuth: Change state from {} to {}\", state, newState);\n+            state = newState;\n+        }\n+    }\n+\n+    public boolean isComplete() {\n+        return state == EcobeeAuthState.COMPLETE;\n+    }\n+\n+    public EcobeeAuthState doAuthorization() throws EcobeeAuthException {\n+        switch (state) {\n+            case NEED_PIN:\n+                authorize();\n+                break;\n+            case NEED_TOKEN:\n+                getTokens();\n+                break;\n+            case COMPLETE:\n+                bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Call the Ecobee authorize endpoint to get the authorization code and PIN\n+     * that will be used a) validate the application in the the Ecobee user web portal,\n+     * and b) make the first time request for the access and refresh tokens.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void authorize() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'authorize'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_AUTHORIZE_URL);\n+        url.append(\"?response_type=ecobeePin\");\n+        url.append(\"&client_id=\").append(apiKey);\n+        url.append(\"&scope=\").append(ECOBEE_SCOPE);\n+\n+        logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url.toString());\n+        String response = executeUrl(\"GET\", url.toString());\n+        logger.trace(\"EcobeeAuth: Auth response: {}\", response);\n+\n+        try {\n+            authResponse = EcobeeApi.getGson().fromJson(response, AuthorizeResponseDTO.class);\n+            if (authResponse == null) {\n+                logger.debug(\"EcobeeAuth: Got null authorize response from Ecobee API\");\n+                setState(EcobeeAuthState.NEED_PIN);\n+            } else {\n+                if (StringUtils.isNotEmpty(authResponse.error)) {\n+                    throw new EcobeeAuthException(authResponse.error + \": \" + authResponse.errorDescription);\n+                }\n+                code = authResponse.code;\n+                writeLogMessage(authResponse.pin, authResponse.expiresIn);\n+                setPinExpirationTime(authResponse.expiresIn.longValue());\n+                updateBridgeStatus();\n+                setState(EcobeeAuthState.NEED_TOKEN);\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.info(\"EcobeeAuth: Exception while parsing authorize response: {}\", e.getMessage());\n+            setState(EcobeeAuthState.NEED_PIN);\n+        }\n+    }\n+\n+    /**\n+     * Call the Ecobee token endpoint to get the access and refresh tokens. Once successfully retrieved,\n+     * the access and refresh tokens will be injected into the OHC OAuth service.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void getTokens() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'getToken'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_TOKEN_URL);\n+        url.append(\"?grant_type=ecobeePin\");\n+        url.append(\"&code=\").append(code);\n+        url.append(\"&client_id=\").append(apiKey);\n+\n+        logger.trace(\"EcobeeAuth: Posting token URL={}\", url.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMzQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url.toString());\n          \n          \n            \n                    logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url);", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403333497", "createdAt": "2020-04-03T21:01:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/api/EcobeeAuth.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.api;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.HttpResponseException;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.smarthome.core.auth.client.oauth2.AccessTokenResponse;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthClientService;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthException;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.ecobee.internal.dto.oauth.AuthorizeResponseDTO;\n+import org.openhab.binding.ecobee.internal.dto.oauth.TokenResponseDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link EcobeeAuth} performs the initial OAuth authorization\n+ * with the Ecobee authorization servers. Once this process is complete, the\n+ * AccessTokenResponse will be imported into the OHC OAuth Client Service.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAuth.class);\n+\n+    private final EcobeeAccountBridgeHandler bridgeHandler;\n+    private final String apiKey;\n+    private final int apiTimeout;\n+    private final OAuthClientService oAuthClientService;\n+    private final HttpClient httpClient;\n+\n+    private EcobeeAuthState state;\n+\n+    private @Nullable AuthorizeResponseDTO authResponse;\n+\n+    private long pinExpirationTime;\n+\n+    /**\n+     * The authorization code needed to make the first-time request\n+     * of the refresh and access tokens. Obtained from the call to {@code authorize()}.\n+     */\n+    private @Nullable String code;\n+\n+    public EcobeeAuth(EcobeeAccountBridgeHandler bridgeHandler, String apiKey, int apiTimeout,\n+            OAuthClientService oAuthClientService, HttpClient httpClient) {\n+        this.apiKey = apiKey;\n+        this.apiTimeout = apiTimeout;\n+        this.oAuthClientService = oAuthClientService;\n+        this.httpClient = httpClient;\n+        this.bridgeHandler = bridgeHandler;\n+        pinExpirationTime = 0;\n+        state = EcobeeAuthState.NEED_PIN;\n+    }\n+\n+    public void setState(EcobeeAuthState newState) {\n+        if (newState != state) {\n+            logger.debug(\"EcobeeAuth: Change state from {} to {}\", state, newState);\n+            state = newState;\n+        }\n+    }\n+\n+    public boolean isComplete() {\n+        return state == EcobeeAuthState.COMPLETE;\n+    }\n+\n+    public EcobeeAuthState doAuthorization() throws EcobeeAuthException {\n+        switch (state) {\n+            case NEED_PIN:\n+                authorize();\n+                break;\n+            case NEED_TOKEN:\n+                getTokens();\n+                break;\n+            case COMPLETE:\n+                bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Call the Ecobee authorize endpoint to get the authorization code and PIN\n+     * that will be used a) validate the application in the the Ecobee user web portal,\n+     * and b) make the first time request for the access and refresh tokens.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void authorize() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'authorize'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_AUTHORIZE_URL);\n+        url.append(\"?response_type=ecobeePin\");\n+        url.append(\"&client_id=\").append(apiKey);\n+        url.append(\"&scope=\").append(ECOBEE_SCOPE);\n+\n+        logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzNDc1MA==", "bodyText": "If name has to be non-null why not just make the parameter non-null instead of @Nullable?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403334750", "createdAt": "2020-04-03T21:03:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/function/DeleteVacationFunction.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.function;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+/**\n+ * The delete vacation function deletes a vacation event from a thermostat. This is the\n+ * only way to cancel a vacation event. This method is able to remove vacation\n+ * events not yet started and scheduled in the future.\n+ *\n+ * @author John Cocula - Initial contribution\n+ * @author Mark Hilbush - Adapt for OH2/3\n+ */\n+@NonNullByDefault\n+public final class DeleteVacationFunction extends AbstractFunction {\n+\n+    public DeleteVacationFunction(@Nullable String name) {\n+        super(\"deleteVacation\");\n+        if (name == null) {\n+            throw new IllegalArgumentException(\"name argument is required.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzODUzNg==", "bodyText": "Please cache your config!", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403338536", "createdAt": "2020-04-03T21:12:50Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/handler/EcobeeAccountBridgeHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.handler;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.CONFIG_THERMOSTAT_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthFactory;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ecobee.internal.api.EcobeeApi;\n+import org.openhab.binding.ecobee.internal.config.EcobeeAccountConfiguration;\n+import org.openhab.binding.ecobee.internal.discovery.ThermostatDiscoveryService;\n+import org.openhab.binding.ecobee.internal.dto.SelectionDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatUpdateRequestDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.summary.SummaryResponseDTO;\n+import org.openhab.binding.ecobee.internal.function.FunctionRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeAccountBridgeHandler} is responsible for managing\n+ * communication with the Ecobee API.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAccountBridgeHandler extends BaseBridgeHandler {\n+\n+    private static final int REFRESH_STARTUP_DELAY_SECONDS = 3;\n+    private static final int REFRESH_INTERVAL_SECONDS = 1;\n+    private static final int DISCOVERY_INTERVAL_SECONDS = 300;\n+    private static final int DISCOVERY_INITIAL_DELAY_SECONDS = 10;\n+    private static final int DEFAULT_REFRESH_INTERVAL_NORMAL_SECONDS = 20;\n+    private static final int DEFAULT_REFRESH_INTERVAL_QUICK_SECONDS = 5;\n+    private static final int DEFAULT_API_TIMEOUT_SECONDS = 20;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAccountBridgeHandler.class);\n+\n+    private final OAuthFactory oAuthFactory;\n+    private final HttpClient httpClient;\n+\n+    private @NonNullByDefault({}) EcobeeApi api;\n+    private @NonNullByDefault({}) String apiKey;\n+    private int refreshIntervalNormal;\n+    private int refreshIntervalQuick;\n+    private int apiTimeout;\n+    private boolean discoveryEnabled;\n+    private int discoveryInterval;\n+\n+    private final Map<String, EcobeeThermostatBridgeHandler> thermostatHandlers = new ConcurrentHashMap<>();\n+    private final Set<String> thermostatIds = new CopyOnWriteArraySet<>();\n+\n+    private @Nullable Future<?> refreshThermostatsJob;\n+    private final AtomicInteger refreshThermostatsCounter = new AtomicInteger(REFRESH_STARTUP_DELAY_SECONDS);\n+    private final AtomicInteger discoveryCounter = new AtomicInteger(DISCOVERY_INITIAL_DELAY_SECONDS);\n+    private @Nullable ThermostatDiscoveryService discoveryService;\n+\n+    private @Nullable SummaryResponseDTO previousSummary;\n+\n+    public EcobeeAccountBridgeHandler(final Bridge bridge, OAuthFactory oAuthFactory, HttpClient httpClient) {\n+        super(bridge);\n+        this.oAuthFactory = oAuthFactory;\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"AccountBridge: Initializing\");\n+        apiKey = getConfigAs(EcobeeAccountConfiguration.class).apiKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzOTEzNg==", "bodyText": "Could you explain how this is being used? It isn't entirely clear to me from reading the code...", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403339136", "createdAt": "2020-04-03T21:14:07Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/handler/EcobeeAccountBridgeHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.handler;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.CONFIG_THERMOSTAT_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthFactory;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ecobee.internal.api.EcobeeApi;\n+import org.openhab.binding.ecobee.internal.config.EcobeeAccountConfiguration;\n+import org.openhab.binding.ecobee.internal.discovery.ThermostatDiscoveryService;\n+import org.openhab.binding.ecobee.internal.dto.SelectionDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatUpdateRequestDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.summary.SummaryResponseDTO;\n+import org.openhab.binding.ecobee.internal.function.FunctionRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeAccountBridgeHandler} is responsible for managing\n+ * communication with the Ecobee API.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAccountBridgeHandler extends BaseBridgeHandler {\n+\n+    private static final int REFRESH_STARTUP_DELAY_SECONDS = 3;\n+    private static final int REFRESH_INTERVAL_SECONDS = 1;\n+    private static final int DISCOVERY_INTERVAL_SECONDS = 300;\n+    private static final int DISCOVERY_INITIAL_DELAY_SECONDS = 10;\n+    private static final int DEFAULT_REFRESH_INTERVAL_NORMAL_SECONDS = 20;\n+    private static final int DEFAULT_REFRESH_INTERVAL_QUICK_SECONDS = 5;\n+    private static final int DEFAULT_API_TIMEOUT_SECONDS = 20;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAccountBridgeHandler.class);\n+\n+    private final OAuthFactory oAuthFactory;\n+    private final HttpClient httpClient;\n+\n+    private @NonNullByDefault({}) EcobeeApi api;\n+    private @NonNullByDefault({}) String apiKey;\n+    private int refreshIntervalNormal;\n+    private int refreshIntervalQuick;\n+    private int apiTimeout;\n+    private boolean discoveryEnabled;\n+    private int discoveryInterval;\n+\n+    private final Map<String, EcobeeThermostatBridgeHandler> thermostatHandlers = new ConcurrentHashMap<>();\n+    private final Set<String> thermostatIds = new CopyOnWriteArraySet<>();\n+\n+    private @Nullable Future<?> refreshThermostatsJob;\n+    private final AtomicInteger refreshThermostatsCounter = new AtomicInteger(REFRESH_STARTUP_DELAY_SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM0MjIwNg==", "bodyText": "What are you suppressing here?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403342206", "createdAt": "2020-04-03T21:21:21Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/handler/EcobeeSensorThingHandler.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.handler;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import org.apache.commons.lang.WordUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.library.unit.SmartHomeUnits;\n+import org.eclipse.smarthome.core.thing.Channel;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.ThingStatusInfo;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.builder.ChannelBuilder;\n+import org.eclipse.smarthome.core.thing.binding.builder.ThingBuilder;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.eclipse.smarthome.core.types.State;\n+import org.eclipse.smarthome.core.types.UnDefType;\n+import org.openhab.binding.ecobee.internal.config.EcobeeSensorConfiguration;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.RemoteSensorCapabilityDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.RemoteSensorDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeSensorThingHandler} is responsible for updating the channels associated\n+ * with an Ecobee remote sensor.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeSensorThingHandler extends BaseThingHandler {\n+\n+    public static final String CAPABILITY_ADC = \"adc\";\n+    public static final String CAPABILITY_CO2 = \"co2\";\n+    public static final String CAPABILITY_DRY_CONTACT = \"dryContact\";\n+    public static final String CAPABILITY_HUMIDITY = \"humidity\";\n+    public static final String CAPABILITY_OCCUPANCY = \"occupancy\";\n+    public static final String CAPABILITY_TEMPERATURE = \"temperature\";\n+    public static final String CAPABILITY_UNKNOWN = \"unknown\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeSensorThingHandler.class);\n+\n+    private @NonNullByDefault({}) String sensorId;\n+\n+    private Map<String, State> stateCache = new ConcurrentHashMap<>();\n+\n+    public EcobeeSensorThingHandler(Thing thing) {\n+        super(thing);\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        sensorId = getConfigAs(EcobeeSensorConfiguration.class).sensorId;\n+        logger.debug(\"SensorThing: Initializing sensor '{}'\", sensorId);\n+        clearSavedState();\n+        updateStatus(EcobeeUtils.isBridgeOnline(getBridge()) ? ThingStatus.ONLINE : ThingStatus.OFFLINE);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        logger.debug(\"SensorThing: Disposing sensor '{}'\", sensorId);\n+    }\n+\n+    @Override\n+    public void bridgeStatusChanged(ThingStatusInfo bridgeStatusInfo) {\n+        if (bridgeStatusInfo.getStatus() == ThingStatus.ONLINE) {\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.BRIDGE_OFFLINE);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"null\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDE4Ng==", "bodyText": "Why aren't any of these casts getting checked beforehand?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403350186", "createdAt": "2020-04-03T21:41:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/action/EcobeeActions.java", "diffHunk": "@@ -0,0 +1,783 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.action;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.EventDTO;\n+import org.openhab.binding.ecobee.internal.enums.AckType;\n+import org.openhab.binding.ecobee.internal.enums.FanMode;\n+import org.openhab.binding.ecobee.internal.enums.HoldType;\n+import org.openhab.binding.ecobee.internal.enums.PlugState;\n+import org.openhab.binding.ecobee.internal.enums.VentilatorMode;\n+import org.openhab.binding.ecobee.internal.function.AcknowledgeFunction;\n+import org.openhab.binding.ecobee.internal.function.ControlPlugFunction;\n+import org.openhab.binding.ecobee.internal.function.CreateVacationFunction;\n+import org.openhab.binding.ecobee.internal.function.DeleteVacationFunction;\n+import org.openhab.binding.ecobee.internal.function.ResetPreferencesFunction;\n+import org.openhab.binding.ecobee.internal.function.ResumeProgramFunction;\n+import org.openhab.binding.ecobee.internal.function.SendMessageFunction;\n+import org.openhab.binding.ecobee.internal.function.SetHoldFunction;\n+import org.openhab.binding.ecobee.internal.function.SetOccupiedFunction;\n+import org.openhab.binding.ecobee.internal.function.UpdateSensorFunction;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeThermostatBridgeHandler;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeUtils;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeActions} defines the thing actions for the Ecobee binding.\n+ *\n+ * @author John Cocula - Initial contribution\n+ * @author Mark Hilbush - Adapted for OH2/3\n+ */\n+@ThingActionsScope(name = \"ecobee\")\n+@NonNullByDefault\n+public class EcobeeActions implements ThingActions {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EcobeeActions.class);\n+\n+    private @Nullable EcobeeThermostatBridgeHandler handler;\n+\n+    public EcobeeActions() {\n+        LOGGER.debug(\"EcobeeActions: EcobeeActions: Actions service created\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeThermostatBridgeHandler) {\n+            this.handler = (EcobeeThermostatBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    /**\n+     * The acknowledge function allows an alert to be acknowledged.\n+     *\n+     * @see <a\n+     *      href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/Acknowledge.shtml\">Acknowledge\n+     *      </a>\n+     */\n+    @RuleAction(label = \"Acknowledge\", description = \"Acknowledges an alert.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean acknowledge(\n+            @ActionInput(name = \"ackRef\", description = \"The acknowledge ref of alert\") @Nullable String ackRef,\n+            @ActionInput(name = \"ackType\", description = \"The type of acknowledgement. Valid values: accept, decline, defer, unacknowledged\") String ackType,\n+            @ActionInput(name = \"remindMeLater\", description = \"(opt) Whether to remind at a later date, if this is a defer acknowledgement\") @Nullable Boolean remindMeLater) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Acknowledge' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        AcknowledgeFunction function = new AcknowledgeFunction(localHandler.getThermostatId(), ackRef,\n+                AckType.forValue(ackType), remindMeLater);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean acknowledge(@Nullable ThingActions actions, @Nullable String ackRef, @Nullable String ackType,\n+            @Nullable Boolean remindMeLater) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) (actions.getClass()\n+                    .getDeclaredMethod(\"acknowledge\", String.class, String.class, Boolean.class)\n+                    .invoke(actions, ackRef, ackType, remindMeLater));\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Control the on/off state of a plug by setting a hold on the plug.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/ControlPlug.shtml\">Control\n+     *      Plug</a>\n+     */\n+    @RuleAction(label = \"Control Plug\", description = \"Control the on/off state of a plug by setting a hold on the plug.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean controlPlug(\n+            @ActionInput(name = \"plugName\", description = \"The name of the plug. Ensure each plug has a unique name.\") @Nullable String plugName,\n+            @ActionInput(name = \"plugState\", description = \"The state to put the plug into. Valid values: on, off, resume.\") @Nullable String plugState,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date/time in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date/time in thermostat time.\") @Nullable Date endDateTime,\n+            @ActionInput(name = \"holdType\", description = \"(opt) The hold duration type. Valid values: dateTime, nextTransition, indefinite, holdHours.\") @Nullable String holdType,\n+            @ActionInput(name = \"holdHours\", description = \"(opt) The number of hours to hold for, used and required if holdType='holdHours'.\") @Nullable Number holdHours) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Control Plug' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        ControlPlugFunction function = (new ControlPlugFunction(plugName, PlugState.forValue(plugState), startDateTime,\n+                endDateTime, (holdType == null) ? null : HoldType.forValue(holdType),\n+                (holdHours == null) ? null : Integer.valueOf(holdHours.intValue())));\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean controlPlug(@Nullable ThingActions actions, @Nullable String plugName,\n+            @Nullable String plugState, @Nullable Date startDateTime, @Nullable Date endDateTime,\n+            @Nullable String holdType, @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) (actions.getClass()\n+                    .getDeclaredMethod(\"controlPlug\", String.class, String.class, Date.class, Date.class, String.class,\n+                            Number.class)\n+                    .invoke(actions, plugName, plugState, startDateTime, endDateTime, holdType, holdHours));\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The create vacation function creates a vacation event on the thermostat.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/CreateVacation.shtml\">Create\n+     *      Vacation</a>\n+     */\n+    @RuleAction(label = \"Create Vacation\", description = \"The create vacation function creates a vacation event on the thermostat.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean createVacation(\n+            @ActionInput(name = \"name\", description = \"The vacation event name. It must be unique.\") @Nullable String name,\n+            @ActionInput(name = \"coolHoldTemp\", description = \"The temperature at which to set the cool vacation hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"The temperature at which to set the heat vacation hold.\") @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date/time in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date in thermostat time.\") @Nullable Date endDateTime,\n+            @ActionInput(name = \"fan\", description = \"(opt) The fan mode during the vacation. Values: auto, on Default: auto\") @Nullable String fan,\n+            @ActionInput(name = \"fanMinOnTime\", description = \"(opt) The minimum number of minutes to run the fan each hour. Range: 0-60, Default: 0\") @Nullable Number fanMinOnTime) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Create Vacation' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        CreateVacationFunction function = new CreateVacationFunction(name, coolHoldTemp, heatHoldTemp, startDateTime,\n+                endDateTime, (fan == null) ? null : FanMode.forValue(fan),\n+                (fanMinOnTime == null) ? null : Integer.valueOf(fanMinOnTime.intValue()));\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean createVacation(@Nullable ThingActions actions, @Nullable String name,\n+            @Nullable QuantityType<Temperature> coolHoldTemp, @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @Nullable Date startDateTime, @Nullable Date endDateTime, @Nullable String fan,\n+            @Nullable Number fanMinOnTime) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass()\n+                    .getDeclaredMethod(\"createVacation\", String.class, QuantityType.class, QuantityType.class,\n+                            Date.class, Date.class, String.class, Number.class)\n+                    .invoke(actions, name, coolHoldTemp, heatHoldTemp, startDateTime, endDateTime, fan, fanMinOnTime);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The delete vacation function deletes a vacation event from a thermostat.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/DeleteVacation.shtml\">Delete\n+     *      Vacation</a>\n+     */\n+    @RuleAction(label = \"Delete Vacation\", description = \"The delete vacation function deletes a vacation event from a thermostat.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean deleteVacation(\n+            @ActionInput(name = \"name\", description = \"The vacation event name to delete.\") @Nullable String name) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Delete Vacation' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        DeleteVacationFunction function = new DeleteVacationFunction(name);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean deleteVacation(@Nullable ThingActions actions, @Nullable String name) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"deleteVacation\", String.class).invoke(actions, name);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The reset preferences function sets all of the user configurable settings back to the factory default values.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/ResetPreferences.shtml\">Reset\n+     *      Preferences</a>\n+     */\n+    @RuleAction(label = \"Reset Preferences\", description = \"The reset preferences function sets all of the user configurable settings back to the factory default values.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean resetPreferences() {\n+        LOGGER.debug(\"EcobeeActions: Action 'Reset Preferences' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        ResetPreferencesFunction function = new ResetPreferencesFunction();\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean resetPreferences(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"resetPreferences\").invoke(actions);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The resume program function removes the currently running event.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/ResumeProgram.shtml\">Resume\n+     *      Program</a>\n+     */\n+    @RuleAction(label = \"Resume Program\", description = \"Removes the currently running event providing the event is not a mandatory demand response event\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean resumeProgram(\n+            @ActionInput(name = \"resumeAll\", description = \"(opt) Should the thermostat be resumed to next event (false) or to its program (true)\") @Nullable Boolean resumeAll) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Resume Program' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        ResumeProgramFunction function = new ResumeProgramFunction(resumeAll);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean resumeProgram(@Nullable ThingActions actions, @Nullable Boolean resumeAll) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"resumeProgram\", Boolean.class).invoke(actions,\n+                    resumeAll);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The send message function allows an alert message to be sent to the thermostat.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/SendMessage.shtml\">Send\n+     *      Message</a>\n+     */\n+    @RuleAction(label = \"Send Message\", description = \"The send message function allows an alert message to be sent to the thermostat.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean sendMessage(\n+            @ActionInput(name = \"text\", description = \"The message text to send. Text will be truncated to 500 characters if longer\") @Nullable String text) {\n+        LOGGER.debug(\"EcobeeActions: Action 'SendMessage' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        SendMessageFunction function = new SendMessageFunction(text);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean sendMessage(@Nullable ThingActions actions, @Nullable String text) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"sendMessage\", String.class).invoke(actions, text);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set an indefinite hold using the supplied the cool and heat hold temperatures\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/SetHold.shtml\">Set Hold</a>\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified temperatures.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"coolHoldTemp\", description = \"The temperature at which to set the cool hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"The temperature at which to set the heat hold.\") @Nullable QuantityType<Temperature> heatHoldTemp) {\n+        if (coolHoldTemp == null || heatHoldTemp == null) {\n+            throw new IllegalArgumentException(\"hold temperatures cannot be null\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"coolHoldTemp\", coolHoldTemp);\n+        params.put(\"heatHoldTemp\", heatHoldTemp);\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @Nullable QuantityType<Temperature> heatHoldTemp) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"setHold\", QuantityType.class, QuantityType.class)\n+                    .invoke(actions, coolHoldTemp, heatHoldTemp);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold by providing the cool and heat temperatures and the number of hours.\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold for the specified number of hours.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"coolHoldTemp\", description = \"The temperature at which to set the cool hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"The temperature at which to set the heat hold.\") @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @ActionInput(name = \"holdHours\", description = \"The number of hours for the hold.\") @Nullable Number holdHours) {\n+        if (coolHoldTemp == null || heatHoldTemp == null) {\n+            throw new IllegalArgumentException(\"hold temperatures cannot be null\");\n+        }\n+        if (holdHours == null) {\n+            throw new IllegalArgumentException(\"number of hold hours is missing\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"coolHoldTemp\", coolHoldTemp);\n+        params.put(\"heatHoldTemp\", heatHoldTemp);\n+        params.put(\"holdType\", HoldType.HOLD_HOURS);\n+        params.put(\"holdHours\", Integer.valueOf(holdHours.intValue()));\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @Nullable QuantityType<Temperature> heatHoldTemp, @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass()\n+                    .getDeclaredMethod(\"setHold\", QuantityType.class, QuantityType.class, Number.class)\n+                    .invoke(actions, coolHoldTemp, heatHoldTemp, holdHours);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set an indefinite hold using the supplied climateRef\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified climate ref.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"holdClimateRef\", description = \"The holdClimateRef used to set the hold.\") @Nullable String holdClimateRef) {\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        if (holdClimateRef == null || !localHandler.isValidClimateRef(holdClimateRef)) {\n+            throw new IllegalArgumentException(\"hold climate ref is missing or invalid\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"holdClimateRef\", holdClimateRef);\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable String holdClimateRef) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"setHold\", String.class).invoke(actions,\n+                    holdClimateRef);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold using the supplied climateRef for the supplied number of hours.\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified climate ref.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"holdClimateRef\", description = \"The holdClimateRef used to set the hold.\") @Nullable String holdClimateRef,\n+            @ActionInput(name = \"holdHours\", description = \"The number of hours for the hold.\") @Nullable Number holdHours) {\n+        if (holdHours == null) {\n+            throw new IllegalArgumentException(\"number of hold hours is missing\");\n+        }\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        if (holdClimateRef == null || !localHandler.isValidClimateRef(holdClimateRef)) {\n+            throw new IllegalArgumentException(\"hold climate ref is missing or invalid\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"holdClimateRef\", holdClimateRef);\n+        params.put(\"holdType\", HoldType.HOLD_HOURS);\n+        params.put(\"holdHours\", Integer.valueOf(holdHours.intValue()));\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable String holdClimateRef,\n+            @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"setHold\", String.class, Number.class).invoke(actions,\n+                    holdClimateRef, holdHours);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified temperature or climate ref.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"coolHoldTemp\", description = \"(opt) The temperature at which to set the cool hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"(opt) The temperature at which to set the heat hold.\") @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @ActionInput(name = \"holdClimateRef\", description = \"(opt) The Climate to use as reference for setting the coolHoldTemp, heatHoldTemp and fan settings for this hold. If this value is passed the coolHoldTemp and heatHoldTemp are not required.\") @Nullable String holdClimateRef,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date in thermostat time.\") @Nullable Date endDateTime,\n+            @ActionInput(name = \"holdType\", description = \"(opt) The hold duration type. Valid values: dateTime, nextTransition, indefinite, holdHours.\") @Nullable String holdType,\n+            @ActionInput(name = \"holdHours\", description = \"(opt) The number of hours to hold for, used and required if holdType='holdHours'.\") @Nullable Number holdHours) {\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        if (coolHoldTemp != null) {\n+            params.put(\"coolHoldTemp\", coolHoldTemp);\n+        }\n+        if (heatHoldTemp != null) {\n+            params.put(\"heatHoldTemp\", heatHoldTemp);\n+        }\n+        if (holdClimateRef != null) {\n+            params.put(\"holdClimateRef\", holdClimateRef);\n+        }\n+        return setHold(params, holdType, holdHours, startDateTime, endDateTime);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @Nullable QuantityType<Temperature> heatHoldTemp, @Nullable String holdClimateRef,\n+            @Nullable Date startDateTime, @Nullable Date endDateTime, @Nullable String holdType,\n+            @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass()\n+                    .getDeclaredMethod(\"setHold\", QuantityType.class, QuantityType.class, String.class, Date.class,\n+                            Date.class, String.class, Number.class)\n+                    .invoke(actions, coolHoldTemp, heatHoldTemp, holdClimateRef, startDateTime, endDateTime, holdType,\n+                            holdHours);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold by providing a parameter map\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified event parameters.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"params\", description = \"The map of hold parameters.\") @Nullable Map<String, Object> params,\n+            @ActionInput(name = \"holdType\", description = \"(opt) The hold duration type. Valid values: dateTime, nextTransition, indefinite, holdHours.\") @Nullable String holdType,\n+            @ActionInput(name = \"holdHours\", description = \"(opt) The number of hours to hold for, used and required if holdType='holdHours'.\") @Nullable Number holdHours,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date in thermostat time.\") @Nullable Date endDateTime) {\n+        LOGGER.debug(\"EcobeeActions: Action 'SetHold' called\");\n+        if (params == null) {\n+            throw new IllegalArgumentException(\"params cannot be null\");\n+        }\n+        EventDTO event = new EventDTO();\n+        for (String key : params.keySet()) {\n+            Object value = params.get(key);\n+            switch (key) {\n+                case \"isOccupied\":\n+                    event.isOccupied = ((Boolean) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 547}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM1MDg5Mg==", "bodyText": "Why is this being done through reflection rather than just casting to a known action class?", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403350892", "createdAt": "2020-04-03T21:43:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/action/EcobeeActions.java", "diffHunk": "@@ -0,0 +1,783 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.action;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.measure.quantity.Temperature;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.binding.ThingActions;\n+import org.eclipse.smarthome.core.thing.binding.ThingActionsScope;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.EventDTO;\n+import org.openhab.binding.ecobee.internal.enums.AckType;\n+import org.openhab.binding.ecobee.internal.enums.FanMode;\n+import org.openhab.binding.ecobee.internal.enums.HoldType;\n+import org.openhab.binding.ecobee.internal.enums.PlugState;\n+import org.openhab.binding.ecobee.internal.enums.VentilatorMode;\n+import org.openhab.binding.ecobee.internal.function.AcknowledgeFunction;\n+import org.openhab.binding.ecobee.internal.function.ControlPlugFunction;\n+import org.openhab.binding.ecobee.internal.function.CreateVacationFunction;\n+import org.openhab.binding.ecobee.internal.function.DeleteVacationFunction;\n+import org.openhab.binding.ecobee.internal.function.ResetPreferencesFunction;\n+import org.openhab.binding.ecobee.internal.function.ResumeProgramFunction;\n+import org.openhab.binding.ecobee.internal.function.SendMessageFunction;\n+import org.openhab.binding.ecobee.internal.function.SetHoldFunction;\n+import org.openhab.binding.ecobee.internal.function.SetOccupiedFunction;\n+import org.openhab.binding.ecobee.internal.function.UpdateSensorFunction;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeThermostatBridgeHandler;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeUtils;\n+import org.openhab.core.automation.annotation.ActionInput;\n+import org.openhab.core.automation.annotation.ActionOutput;\n+import org.openhab.core.automation.annotation.RuleAction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeActions} defines the thing actions for the Ecobee binding.\n+ *\n+ * @author John Cocula - Initial contribution\n+ * @author Mark Hilbush - Adapted for OH2/3\n+ */\n+@ThingActionsScope(name = \"ecobee\")\n+@NonNullByDefault\n+public class EcobeeActions implements ThingActions {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EcobeeActions.class);\n+\n+    private @Nullable EcobeeThermostatBridgeHandler handler;\n+\n+    public EcobeeActions() {\n+        LOGGER.debug(\"EcobeeActions: EcobeeActions: Actions service created\");\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeThermostatBridgeHandler) {\n+            this.handler = (EcobeeThermostatBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return this.handler;\n+    }\n+\n+    /**\n+     * The acknowledge function allows an alert to be acknowledged.\n+     *\n+     * @see <a\n+     *      href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/Acknowledge.shtml\">Acknowledge\n+     *      </a>\n+     */\n+    @RuleAction(label = \"Acknowledge\", description = \"Acknowledges an alert.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean acknowledge(\n+            @ActionInput(name = \"ackRef\", description = \"The acknowledge ref of alert\") @Nullable String ackRef,\n+            @ActionInput(name = \"ackType\", description = \"The type of acknowledgement. Valid values: accept, decline, defer, unacknowledged\") String ackType,\n+            @ActionInput(name = \"remindMeLater\", description = \"(opt) Whether to remind at a later date, if this is a defer acknowledgement\") @Nullable Boolean remindMeLater) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Acknowledge' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        AcknowledgeFunction function = new AcknowledgeFunction(localHandler.getThermostatId(), ackRef,\n+                AckType.forValue(ackType), remindMeLater);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean acknowledge(@Nullable ThingActions actions, @Nullable String ackRef, @Nullable String ackType,\n+            @Nullable Boolean remindMeLater) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) (actions.getClass()\n+                    .getDeclaredMethod(\"acknowledge\", String.class, String.class, Boolean.class)\n+                    .invoke(actions, ackRef, ackType, remindMeLater));\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Control the on/off state of a plug by setting a hold on the plug.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/ControlPlug.shtml\">Control\n+     *      Plug</a>\n+     */\n+    @RuleAction(label = \"Control Plug\", description = \"Control the on/off state of a plug by setting a hold on the plug.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean controlPlug(\n+            @ActionInput(name = \"plugName\", description = \"The name of the plug. Ensure each plug has a unique name.\") @Nullable String plugName,\n+            @ActionInput(name = \"plugState\", description = \"The state to put the plug into. Valid values: on, off, resume.\") @Nullable String plugState,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date/time in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date/time in thermostat time.\") @Nullable Date endDateTime,\n+            @ActionInput(name = \"holdType\", description = \"(opt) The hold duration type. Valid values: dateTime, nextTransition, indefinite, holdHours.\") @Nullable String holdType,\n+            @ActionInput(name = \"holdHours\", description = \"(opt) The number of hours to hold for, used and required if holdType='holdHours'.\") @Nullable Number holdHours) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Control Plug' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        ControlPlugFunction function = (new ControlPlugFunction(plugName, PlugState.forValue(plugState), startDateTime,\n+                endDateTime, (holdType == null) ? null : HoldType.forValue(holdType),\n+                (holdHours == null) ? null : Integer.valueOf(holdHours.intValue())));\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean controlPlug(@Nullable ThingActions actions, @Nullable String plugName,\n+            @Nullable String plugState, @Nullable Date startDateTime, @Nullable Date endDateTime,\n+            @Nullable String holdType, @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) (actions.getClass()\n+                    .getDeclaredMethod(\"controlPlug\", String.class, String.class, Date.class, Date.class, String.class,\n+                            Number.class)\n+                    .invoke(actions, plugName, plugState, startDateTime, endDateTime, holdType, holdHours));\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The create vacation function creates a vacation event on the thermostat.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/CreateVacation.shtml\">Create\n+     *      Vacation</a>\n+     */\n+    @RuleAction(label = \"Create Vacation\", description = \"The create vacation function creates a vacation event on the thermostat.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean createVacation(\n+            @ActionInput(name = \"name\", description = \"The vacation event name. It must be unique.\") @Nullable String name,\n+            @ActionInput(name = \"coolHoldTemp\", description = \"The temperature at which to set the cool vacation hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"The temperature at which to set the heat vacation hold.\") @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date/time in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date in thermostat time.\") @Nullable Date endDateTime,\n+            @ActionInput(name = \"fan\", description = \"(opt) The fan mode during the vacation. Values: auto, on Default: auto\") @Nullable String fan,\n+            @ActionInput(name = \"fanMinOnTime\", description = \"(opt) The minimum number of minutes to run the fan each hour. Range: 0-60, Default: 0\") @Nullable Number fanMinOnTime) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Create Vacation' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        CreateVacationFunction function = new CreateVacationFunction(name, coolHoldTemp, heatHoldTemp, startDateTime,\n+                endDateTime, (fan == null) ? null : FanMode.forValue(fan),\n+                (fanMinOnTime == null) ? null : Integer.valueOf(fanMinOnTime.intValue()));\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean createVacation(@Nullable ThingActions actions, @Nullable String name,\n+            @Nullable QuantityType<Temperature> coolHoldTemp, @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @Nullable Date startDateTime, @Nullable Date endDateTime, @Nullable String fan,\n+            @Nullable Number fanMinOnTime) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass()\n+                    .getDeclaredMethod(\"createVacation\", String.class, QuantityType.class, QuantityType.class,\n+                            Date.class, Date.class, String.class, Number.class)\n+                    .invoke(actions, name, coolHoldTemp, heatHoldTemp, startDateTime, endDateTime, fan, fanMinOnTime);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The delete vacation function deletes a vacation event from a thermostat.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/DeleteVacation.shtml\">Delete\n+     *      Vacation</a>\n+     */\n+    @RuleAction(label = \"Delete Vacation\", description = \"The delete vacation function deletes a vacation event from a thermostat.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean deleteVacation(\n+            @ActionInput(name = \"name\", description = \"The vacation event name to delete.\") @Nullable String name) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Delete Vacation' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        DeleteVacationFunction function = new DeleteVacationFunction(name);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean deleteVacation(@Nullable ThingActions actions, @Nullable String name) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"deleteVacation\", String.class).invoke(actions, name);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The reset preferences function sets all of the user configurable settings back to the factory default values.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/ResetPreferences.shtml\">Reset\n+     *      Preferences</a>\n+     */\n+    @RuleAction(label = \"Reset Preferences\", description = \"The reset preferences function sets all of the user configurable settings back to the factory default values.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean resetPreferences() {\n+        LOGGER.debug(\"EcobeeActions: Action 'Reset Preferences' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        ResetPreferencesFunction function = new ResetPreferencesFunction();\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean resetPreferences(@Nullable ThingActions actions) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"resetPreferences\").invoke(actions);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The resume program function removes the currently running event.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/ResumeProgram.shtml\">Resume\n+     *      Program</a>\n+     */\n+    @RuleAction(label = \"Resume Program\", description = \"Removes the currently running event providing the event is not a mandatory demand response event\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean resumeProgram(\n+            @ActionInput(name = \"resumeAll\", description = \"(opt) Should the thermostat be resumed to next event (false) or to its program (true)\") @Nullable Boolean resumeAll) {\n+        LOGGER.debug(\"EcobeeActions: Action 'Resume Program' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        ResumeProgramFunction function = new ResumeProgramFunction(resumeAll);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean resumeProgram(@Nullable ThingActions actions, @Nullable Boolean resumeAll) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"resumeProgram\", Boolean.class).invoke(actions,\n+                    resumeAll);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * The send message function allows an alert message to be sent to the thermostat.\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/SendMessage.shtml\">Send\n+     *      Message</a>\n+     */\n+    @RuleAction(label = \"Send Message\", description = \"The send message function allows an alert message to be sent to the thermostat.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean sendMessage(\n+            @ActionInput(name = \"text\", description = \"The message text to send. Text will be truncated to 500 characters if longer\") @Nullable String text) {\n+        LOGGER.debug(\"EcobeeActions: Action 'SendMessage' called\");\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        SendMessageFunction function = new SendMessageFunction(text);\n+        return localHandler.actionPerformFunction(function);\n+    }\n+\n+    public static boolean sendMessage(@Nullable ThingActions actions, @Nullable String text) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"sendMessage\", String.class).invoke(actions, text);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set an indefinite hold using the supplied the cool and heat hold temperatures\n+     *\n+     * @see <a href=\"https://www.ecobee.com/home/developer/api/documentation/v1/functions/SetHold.shtml\">Set Hold</a>\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified temperatures.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"coolHoldTemp\", description = \"The temperature at which to set the cool hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"The temperature at which to set the heat hold.\") @Nullable QuantityType<Temperature> heatHoldTemp) {\n+        if (coolHoldTemp == null || heatHoldTemp == null) {\n+            throw new IllegalArgumentException(\"hold temperatures cannot be null\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"coolHoldTemp\", coolHoldTemp);\n+        params.put(\"heatHoldTemp\", heatHoldTemp);\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @Nullable QuantityType<Temperature> heatHoldTemp) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"setHold\", QuantityType.class, QuantityType.class)\n+                    .invoke(actions, coolHoldTemp, heatHoldTemp);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold by providing the cool and heat temperatures and the number of hours.\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold for the specified number of hours.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"coolHoldTemp\", description = \"The temperature at which to set the cool hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"The temperature at which to set the heat hold.\") @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @ActionInput(name = \"holdHours\", description = \"The number of hours for the hold.\") @Nullable Number holdHours) {\n+        if (coolHoldTemp == null || heatHoldTemp == null) {\n+            throw new IllegalArgumentException(\"hold temperatures cannot be null\");\n+        }\n+        if (holdHours == null) {\n+            throw new IllegalArgumentException(\"number of hold hours is missing\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"coolHoldTemp\", coolHoldTemp);\n+        params.put(\"heatHoldTemp\", heatHoldTemp);\n+        params.put(\"holdType\", HoldType.HOLD_HOURS);\n+        params.put(\"holdHours\", Integer.valueOf(holdHours.intValue()));\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @Nullable QuantityType<Temperature> heatHoldTemp, @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass()\n+                    .getDeclaredMethod(\"setHold\", QuantityType.class, QuantityType.class, Number.class)\n+                    .invoke(actions, coolHoldTemp, heatHoldTemp, holdHours);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set an indefinite hold using the supplied climateRef\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified climate ref.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"holdClimateRef\", description = \"The holdClimateRef used to set the hold.\") @Nullable String holdClimateRef) {\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        if (holdClimateRef == null || !localHandler.isValidClimateRef(holdClimateRef)) {\n+            throw new IllegalArgumentException(\"hold climate ref is missing or invalid\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"holdClimateRef\", holdClimateRef);\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable String holdClimateRef) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"setHold\", String.class).invoke(actions,\n+                    holdClimateRef);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold using the supplied climateRef for the supplied number of hours.\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified climate ref.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"holdClimateRef\", description = \"The holdClimateRef used to set the hold.\") @Nullable String holdClimateRef,\n+            @ActionInput(name = \"holdHours\", description = \"The number of hours for the hold.\") @Nullable Number holdHours) {\n+        if (holdHours == null) {\n+            throw new IllegalArgumentException(\"number of hold hours is missing\");\n+        }\n+        EcobeeThermostatBridgeHandler localHandler = handler;\n+        if (localHandler == null) {\n+            LOGGER.info(\"EcobeeActions: Action service ThingHandler is null!\");\n+            return false;\n+        }\n+        if (holdClimateRef == null || !localHandler.isValidClimateRef(holdClimateRef)) {\n+            throw new IllegalArgumentException(\"hold climate ref is missing or invalid\");\n+        }\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        params.put(\"holdClimateRef\", holdClimateRef);\n+        params.put(\"holdType\", HoldType.HOLD_HOURS);\n+        params.put(\"holdHours\", Integer.valueOf(holdHours.intValue()));\n+        return setHold(params, null, null, null, null);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable String holdClimateRef,\n+            @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass().getDeclaredMethod(\"setHold\", String.class, Number.class).invoke(actions,\n+                    holdClimateRef, holdHours);\n+        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n+                | InvocationTargetException e) {\n+            LOGGER.info(\"EcobeeActions: Exception getting or invoking method\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Set a hold\n+     */\n+    @RuleAction(label = \"Set Hold\", description = \"The set hold function sets the thermostat into a hold with the specified temperature or climate ref.\")\n+    public @ActionOutput(name = \"success\", type = \"java.lang.Boolean\") Boolean setHold(\n+            @ActionInput(name = \"coolHoldTemp\", description = \"(opt) The temperature at which to set the cool hold.\") @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @ActionInput(name = \"heatHoldTemp\", description = \"(opt) The temperature at which to set the heat hold.\") @Nullable QuantityType<Temperature> heatHoldTemp,\n+            @ActionInput(name = \"holdClimateRef\", description = \"(opt) The Climate to use as reference for setting the coolHoldTemp, heatHoldTemp and fan settings for this hold. If this value is passed the coolHoldTemp and heatHoldTemp are not required.\") @Nullable String holdClimateRef,\n+            @ActionInput(name = \"startDateTime\", description = \"(opt) The start date in thermostat time.\") @Nullable Date startDateTime,\n+            @ActionInput(name = \"endDateTime\", description = \"(opt) The end date in thermostat time.\") @Nullable Date endDateTime,\n+            @ActionInput(name = \"holdType\", description = \"(opt) The hold duration type. Valid values: dateTime, nextTransition, indefinite, holdHours.\") @Nullable String holdType,\n+            @ActionInput(name = \"holdHours\", description = \"(opt) The number of hours to hold for, used and required if holdType='holdHours'.\") @Nullable Number holdHours) {\n+        Map<String, Object> params = new HashMap<String, Object>();\n+        if (coolHoldTemp != null) {\n+            params.put(\"coolHoldTemp\", coolHoldTemp);\n+        }\n+        if (heatHoldTemp != null) {\n+            params.put(\"heatHoldTemp\", heatHoldTemp);\n+        }\n+        if (holdClimateRef != null) {\n+            params.put(\"holdClimateRef\", holdClimateRef);\n+        }\n+        return setHold(params, holdType, holdHours, startDateTime, endDateTime);\n+    }\n+\n+    public static boolean setHold(@Nullable ThingActions actions, @Nullable QuantityType<Temperature> coolHoldTemp,\n+            @Nullable QuantityType<Temperature> heatHoldTemp, @Nullable String holdClimateRef,\n+            @Nullable Date startDateTime, @Nullable Date endDateTime, @Nullable String holdType,\n+            @Nullable Number holdHours) {\n+        if (actions == null) {\n+            throw new IllegalArgumentException(\"actions cannot be null\");\n+        }\n+        try {\n+            return (Boolean) actions.getClass()\n+                    .getDeclaredMethod(\"setHold\", QuantityType.class, QuantityType.class, String.class, Date.class,\n+                            Date.class, String.class, Number.class)\n+                    .invoke(actions, coolHoldTemp, heatHoldTemp, holdClimateRef, startDateTime, endDateTime, holdType,\n+                            holdHours);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 520}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjE4NDg0", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-387618484", "createdAt": "2020-04-03T22:37:34Z", "commit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjozNzozNFrOGArr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjozNzozNFrOGArr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2ODkyMQ==", "bodyText": "This needs to be updated to indicate that the thing will be offline and will contain the pin that needs to be entered at ecobee.com. I'd think that this can replace the info about looking in the log file.", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r403368921", "createdAt": "2020-04-03T22:37:34Z", "author": {"login": "robnielsen"}, "path": "bundles/org.openhab.binding.ecobee/README.md", "diffHunk": "@@ -0,0 +1,1252 @@\n+# Ecobee Binding\n+\n+[Ecobee Inc.](https://www.ecobee.com/)  of Toronto, Canada, sells a range of Wi-Fi \n+enabled thermostats, principally in the Americas. \n+This binding communicates with the \n+[Ecobee API](https://www.ecobee.com/home/developer/api/introduction/index.shtml) over a secure, \n+RESTful API to Ecobee's servers. \n+Monitoring ambient temperature and humidity, changing HVAC mode, changing heat or cool setpoints, \n+changing the backlight intensity, and even sending textual messages to one or a group of thermostats, \n+can be accomplished through this binding.\n+\n+## Supported Things\n+\n+The following thing types are supported:\n+\n+| Thing          |  ID             |  Description |\n+|----------------|-----------------|--------------|\n+| Account        | account         | Represents an Ecobee account. Manages all communication with the Ecobee API. |\n+| Thermostat     | thermostat      | Represents a physical Ecobee thermostat associated with the Ecobee Account. |\n+| Remote Sensor  | sensor          | Represents an Ecobee remote sensor that is associated with an Ecobee Thermostat. Also represents the internal sensor of an Ecobee Thermostat. |\n+\n+## Discovery\n+\n+Once an Account has been set up, and the API key has been authorized, Thermostats and Remote \n+Sensors will be discovered automatically.\n+First, the thermostats will be added to the inbox.\n+Then, once a Thermostat thing has been created, the Remote Sensors associated with that \n+thermostat will be added to the inbox.\n+The binding will detect the capabilities (e.g. temperature, humidity, occupancy) supported by the \n+sensor, and then dynamically create channels for those capabilities.\n+\n+## Authorization\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459b15446d0a5aa574781e2fb921ba1c2fa8a9fa", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/459b15446d0a5aa574781e2fb921ba1c2fa8a9fa", "committedDate": "2020-04-04T19:42:10Z", "message": "Address review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4623dea161d151836043485de773c0110b78af2a", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/4623dea161d151836043485de773c0110b78af2a", "committedDate": "2020-04-07T20:54:55Z", "message": "Rework actions\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTE5ODU0", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-389519854", "createdAt": "2020-04-07T21:57:37Z", "commit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NzozN1rOGCXpnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjowNTowOVrOGCX2ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNzgyMQ==", "bodyText": "This would save quite a few lines of code. Also you should add comment in here about why the use of proxies are even needed in the first place.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static IEcobeeActions tryCast(ThingActions actions) {\n          \n          \n            \n                    if (actions.getClass().getName().equals(EcobeeActions.class.getName())) {\n          \n          \n            \n                private static IEcobeeActions tryCast(@Nullable ThingActions actions) {\n          \n          \n            \n                    if (actions == null) {\n          \n          \n            \n                        throw new IllegalArgumentException(\"actions cannot be null\");\n          \n          \n            \n                    } \n          \n          \n            \n                    if (actions.getClass().getName().equals(EcobeeActions.class.getName())) {", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405137821", "createdAt": "2020-04-07T21:57:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/action/EcobeeActions.java", "diffHunk": "@@ -79,17 +80,34 @@ public void setThingHandler(@Nullable ThingHandler handler) {\n         return this.handler;\n     }\n \n+    private static IEcobeeActions tryCast(ThingActions actions) {\n+        if (actions.getClass().getName().equals(EcobeeActions.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MTEzMA==", "bodyText": "Thanks for explaining it.", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405141130", "createdAt": "2020-04-07T22:05:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/handler/EcobeeAccountBridgeHandler.java", "diffHunk": "@@ -0,0 +1,285 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.handler;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.CONFIG_THERMOSTAT_ID;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthFactory;\n+import org.eclipse.smarthome.core.thing.Bridge;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.openhab.binding.ecobee.internal.api.EcobeeApi;\n+import org.openhab.binding.ecobee.internal.config.EcobeeAccountConfiguration;\n+import org.openhab.binding.ecobee.internal.discovery.ThermostatDiscoveryService;\n+import org.openhab.binding.ecobee.internal.dto.SelectionDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatUpdateRequestDTO;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.summary.SummaryResponseDTO;\n+import org.openhab.binding.ecobee.internal.function.FunctionRequest;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link EcobeeAccountBridgeHandler} is responsible for managing\n+ * communication with the Ecobee API.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAccountBridgeHandler extends BaseBridgeHandler {\n+\n+    private static final int REFRESH_STARTUP_DELAY_SECONDS = 3;\n+    private static final int REFRESH_INTERVAL_SECONDS = 1;\n+    private static final int DISCOVERY_INTERVAL_SECONDS = 300;\n+    private static final int DISCOVERY_INITIAL_DELAY_SECONDS = 10;\n+    private static final int DEFAULT_REFRESH_INTERVAL_NORMAL_SECONDS = 20;\n+    private static final int DEFAULT_REFRESH_INTERVAL_QUICK_SECONDS = 5;\n+    private static final int DEFAULT_API_TIMEOUT_SECONDS = 20;\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAccountBridgeHandler.class);\n+\n+    private final OAuthFactory oAuthFactory;\n+    private final HttpClient httpClient;\n+\n+    private @NonNullByDefault({}) EcobeeApi api;\n+    private @NonNullByDefault({}) String apiKey;\n+    private int refreshIntervalNormal;\n+    private int refreshIntervalQuick;\n+    private int apiTimeout;\n+    private boolean discoveryEnabled;\n+    private int discoveryInterval;\n+\n+    private final Map<String, EcobeeThermostatBridgeHandler> thermostatHandlers = new ConcurrentHashMap<>();\n+    private final Set<String> thermostatIds = new CopyOnWriteArraySet<>();\n+\n+    private @Nullable Future<?> refreshThermostatsJob;\n+    private final AtomicInteger refreshThermostatsCounter = new AtomicInteger(REFRESH_STARTUP_DELAY_SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzOTEzNg=="}, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 87}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTI2MjY4", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-389526268", "createdAt": "2020-04-07T22:10:38Z", "commit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxMDozOFrOGCX_Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjozNDo0OVrOGCYknA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0MzM0Mw==", "bodyText": "I'm not sure what good setting to 0 would do, but if you want to prevent the map from resizing then setting it to double the expected size works. The make will resize the cache once the fill exceeds 75% so by making the size double what you expect you make sure it won't exceed 50% fill, thus preventing rehashing.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> properties = new HashMap<>(0);\n          \n          \n            \n                    Map<String, Object> properties = new HashMap<>(2);", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405143343", "createdAt": "2020-04-07T22:10:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.discovery;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.RemoteSensorDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeThermostatBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SensorDiscoveryService} is responsible for discovering the Ecobee\n+ * sensors that are assigned to a thermostat.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SensorDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SensorDiscoveryService.class);\n+\n+    private @Nullable EcobeeThermostatBridgeHandler bridgeHandler;\n+\n+    public SensorDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeThermostatBridgeHandler) {\n+            ((EcobeeThermostatBridgeHandler) handler).setDiscoveryService(this);\n+            bridgeHandler = (EcobeeThermostatBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.debug(\"SensorDiscovery: Activating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.debug(\"SensorDiscovery: Deactivating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_SENSOR_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    public void startBackgroundDiscovery() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't perform background discovery because bridgeHandler is null\");\n+            return;\n+        }\n+        logger.debug(\"SensorDiscovery: Performing background discovery scan for {}\",\n+                localBridgeHandler.getThing().getUID());\n+        discoverSensors();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't perform discovery scan because bridgeHandler is null\");\n+            return;\n+        }\n+        logger.debug(\"SensorDiscovery: Starting discovery scan for {}\", localBridgeHandler.getThing().getUID());\n+        discoverSensors();\n+    }\n+\n+    @Override\n+    public synchronized void abortScan() {\n+        super.abortScan();\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+    }\n+\n+    private String buildLabel(String name) {\n+        return String.format(\"Ecobee Sensor %s\", name);\n+    }\n+\n+    private synchronized void discoverSensors() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't discover sensors because bridgeHandler is null\");\n+            return;\n+        }\n+        for (RemoteSensorDTO sensor : localBridgeHandler.getSensors()) {\n+            ThingUID bridgeUID = localBridgeHandler.getThing().getUID();\n+            ThingUID sensorUID = new ThingUID(UID_SENSOR_THING, bridgeUID, sensor.id.replace(\":\", \"-\"));\n+            thingDiscovered(createDiscoveryResult(sensorUID, bridgeUID, sensor));\n+            logger.trace(\"SensorDiscovery: Sensor with id '{}' and name '{}' added to Inbox with UID '{}'\", sensor.id,\n+                    sensor.name, sensorUID);\n+        }\n+    }\n+\n+    private DiscoveryResult createDiscoveryResult(ThingUID sensorUID, ThingUID bridgeUID, RemoteSensorDTO sensor) {\n+        Map<String, Object> properties = new HashMap<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDUwNQ==", "bodyText": "Yea, there isn't any reasonable way that this would get called, might be appropriate to throw an InvalidStateException instead. I also think using @NonNullByDefault({}) on the bridge handler field would be an appropriate solution as well.", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405144505", "createdAt": "2020-04-07T22:13:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/discovery/SensorDiscoveryService.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.discovery;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.RemoteSensorDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeThermostatBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link SensorDiscoveryService} is responsible for discovering the Ecobee\n+ * sensors that are assigned to a thermostat.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SensorDiscoveryService extends AbstractDiscoveryService implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SensorDiscoveryService.class);\n+\n+    private @Nullable EcobeeThermostatBridgeHandler bridgeHandler;\n+\n+    public SensorDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeThermostatBridgeHandler) {\n+            ((EcobeeThermostatBridgeHandler) handler).setDiscoveryService(this);\n+            bridgeHandler = (EcobeeThermostatBridgeHandler) handler;\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.debug(\"SensorDiscovery: Activating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.debug(\"SensorDiscovery: Deactivating Ecobee sensor discovery service\");\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_SENSOR_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    public void startBackgroundDiscovery() {\n+        EcobeeThermostatBridgeHandler localBridgeHandler = bridgeHandler;\n+        if (localBridgeHandler == null) {\n+            logger.info(\"SensorDiscovery: Can't perform background discovery because bridgeHandler is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMyNzI5OQ=="}, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NDYxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<String, Object> properties = new HashMap<>(0);\n          \n          \n            \n                    Map<String, Object> properties = new HashMap<>(2);", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405144614", "createdAt": "2020-04-07T22:13:40Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/discovery/ThermostatDiscoveryService.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.discovery;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.smarthome.config.discovery.AbstractDiscoveryService;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResult;\n+import org.eclipse.smarthome.config.discovery.DiscoveryResultBuilder;\n+import org.eclipse.smarthome.config.discovery.DiscoveryService;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+import org.eclipse.smarthome.core.thing.ThingUID;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerService;\n+import org.openhab.binding.ecobee.internal.dto.thermostat.ThermostatDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link ThermostatDiscoveryService} is responsible for discovering the Ecobee\n+ * thermostats that are associated with the Ecobee Account.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ThermostatDiscoveryService extends AbstractDiscoveryService\n+        implements DiscoveryService, ThingHandlerService {\n+\n+    private final Logger logger = LoggerFactory.getLogger(ThermostatDiscoveryService.class);\n+\n+    private @NonNullByDefault({}) EcobeeAccountBridgeHandler bridgeHandler;\n+\n+    public ThermostatDiscoveryService() {\n+        super(30);\n+    }\n+\n+    @Override\n+    public void setThingHandler(@Nullable ThingHandler handler) {\n+        if (handler instanceof EcobeeAccountBridgeHandler) {\n+            this.bridgeHandler = (EcobeeAccountBridgeHandler) handler;\n+            this.bridgeHandler.setDiscoveryService(this);\n+        }\n+    }\n+\n+    @Override\n+    public @Nullable ThingHandler getThingHandler() {\n+        return bridgeHandler;\n+    }\n+\n+    @Override\n+    public void activate() {\n+        logger.debug(\"ThermostatDiscovery: Activating Ecobee thermostat discovery service for {}\",\n+                bridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public void deactivate() {\n+        logger.debug(\"ThermostatDiscovery: Deactivating Ecobee thermostat discovery service for {}\",\n+                bridgeHandler.getThing().getUID());\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypes() {\n+        return SUPPORTED_THERMOSTAT_BRIDGE_THING_TYPES_UIDS;\n+    }\n+\n+    @Override\n+    public void startBackgroundDiscovery() {\n+        logger.trace(\"ThermostatDiscovery: Performing background discovery scan for {}\",\n+                bridgeHandler.getThing().getUID());\n+        discoverThermostats();\n+    }\n+\n+    @Override\n+    public void startScan() {\n+        logger.debug(\"ThermostatDiscovery: Starting discovery scan for {}\", bridgeHandler.getThing().getUID());\n+        discoverThermostats();\n+    }\n+\n+    @Override\n+    public synchronized void abortScan() {\n+        super.abortScan();\n+    }\n+\n+    @Override\n+    protected synchronized void stopScan() {\n+        super.stopScan();\n+    }\n+\n+    private String buildLabel(String name) {\n+        return String.format(\"Ecobee Thermostat %s\", name);\n+    }\n+\n+    private synchronized void discoverThermostats() {\n+        for (ThermostatDTO thermostat : bridgeHandler.getRegisteredThermostats()) {\n+            String name = thermostat.name;\n+            String identifier = thermostat.identifier;\n+            if (identifier != null && name != null) {\n+                ThingUID thingUID = new ThingUID(UID_THERMOSTAT_BRIDGE, bridgeHandler.getThing().getUID(),\n+                        thermostat.identifier);\n+                thingDiscovered(createDiscoveryResult(thingUID, identifier, name));\n+                logger.trace(\"ThermostatDiscovery: Thermostat with id '{}' and name '{}' added to Inbox with UID '{}'\",\n+                        thermostat.identifier, thermostat.name, thingUID);\n+            }\n+        }\n+    }\n+\n+    private DiscoveryResult createDiscoveryResult(ThingUID thermostatUID, String identifier, String name) {\n+        Map<String, Object> properties = new HashMap<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MTg1MA==", "bodyText": "I think this coding pattern, if done correctly, would not impact performance, but I think it sets a bad example for other developers to try to follow. So I would prefer if it was changed.", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405151850", "createdAt": "2020-04-07T22:31:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/src/main/java/org/openhab/binding/ecobee/internal/api/EcobeeAuth.java", "diffHunk": "@@ -0,0 +1,269 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.ecobee.internal.api;\n+\n+import static org.openhab.binding.ecobee.internal.EcobeeBindingConstants.*;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.ExceptionUtils;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.HttpResponseException;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.client.api.Request;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.smarthome.core.auth.client.oauth2.AccessTokenResponse;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthClientService;\n+import org.eclipse.smarthome.core.auth.client.oauth2.OAuthException;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.openhab.binding.ecobee.internal.dto.oauth.AuthorizeResponseDTO;\n+import org.openhab.binding.ecobee.internal.dto.oauth.TokenResponseDTO;\n+import org.openhab.binding.ecobee.internal.handler.EcobeeAccountBridgeHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonSyntaxException;\n+\n+/**\n+ * The {@link EcobeeAuth} performs the initial OAuth authorization\n+ * with the Ecobee authorization servers. Once this process is complete, the\n+ * AccessTokenResponse will be imported into the OHC OAuth Client Service.\n+ *\n+ * @author Mark Hilbush - Initial contribution\n+ */\n+@NonNullByDefault\n+public class EcobeeAuth {\n+\n+    private final Logger logger = LoggerFactory.getLogger(EcobeeAuth.class);\n+\n+    private final EcobeeAccountBridgeHandler bridgeHandler;\n+    private final String apiKey;\n+    private final int apiTimeout;\n+    private final OAuthClientService oAuthClientService;\n+    private final HttpClient httpClient;\n+\n+    private EcobeeAuthState state;\n+\n+    private @Nullable AuthorizeResponseDTO authResponse;\n+\n+    private long pinExpirationTime;\n+\n+    /**\n+     * The authorization code needed to make the first-time request\n+     * of the refresh and access tokens. Obtained from the call to {@code authorize()}.\n+     */\n+    private @Nullable String code;\n+\n+    public EcobeeAuth(EcobeeAccountBridgeHandler bridgeHandler, String apiKey, int apiTimeout,\n+            OAuthClientService oAuthClientService, HttpClient httpClient) {\n+        this.apiKey = apiKey;\n+        this.apiTimeout = apiTimeout;\n+        this.oAuthClientService = oAuthClientService;\n+        this.httpClient = httpClient;\n+        this.bridgeHandler = bridgeHandler;\n+        pinExpirationTime = 0;\n+        state = EcobeeAuthState.NEED_PIN;\n+    }\n+\n+    public void setState(EcobeeAuthState newState) {\n+        if (newState != state) {\n+            logger.debug(\"EcobeeAuth: Change state from {} to {}\", state, newState);\n+            state = newState;\n+        }\n+    }\n+\n+    public boolean isComplete() {\n+        return state == EcobeeAuthState.COMPLETE;\n+    }\n+\n+    public EcobeeAuthState doAuthorization() throws EcobeeAuthException {\n+        switch (state) {\n+            case NEED_PIN:\n+                authorize();\n+                break;\n+            case NEED_TOKEN:\n+                getTokens();\n+                break;\n+            case COMPLETE:\n+                bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+                break;\n+        }\n+        return state;\n+    }\n+\n+    /**\n+     * Call the Ecobee authorize endpoint to get the authorization code and PIN\n+     * that will be used a) validate the application in the the Ecobee user web portal,\n+     * and b) make the first time request for the access and refresh tokens.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void authorize() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'authorize'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_AUTHORIZE_URL);\n+        url.append(\"?response_type=ecobeePin\");\n+        url.append(\"&client_id=\").append(apiKey);\n+        url.append(\"&scope=\").append(ECOBEE_SCOPE);\n+\n+        logger.trace(\"EcobeeAuth: Getting authorize URL={}\", url.toString());\n+        String response = executeUrl(\"GET\", url.toString());\n+        logger.trace(\"EcobeeAuth: Auth response: {}\", response);\n+\n+        try {\n+            authResponse = EcobeeApi.getGson().fromJson(response, AuthorizeResponseDTO.class);\n+            if (authResponse == null) {\n+                logger.debug(\"EcobeeAuth: Got null authorize response from Ecobee API\");\n+                setState(EcobeeAuthState.NEED_PIN);\n+            } else {\n+                if (StringUtils.isNotEmpty(authResponse.error)) {\n+                    throw new EcobeeAuthException(authResponse.error + \": \" + authResponse.errorDescription);\n+                }\n+                code = authResponse.code;\n+                writeLogMessage(authResponse.pin, authResponse.expiresIn);\n+                setPinExpirationTime(authResponse.expiresIn.longValue());\n+                updateBridgeStatus();\n+                setState(EcobeeAuthState.NEED_TOKEN);\n+            }\n+        } catch (JsonSyntaxException e) {\n+            logger.info(\"EcobeeAuth: Exception while parsing authorize response: {}\", e.getMessage());\n+            setState(EcobeeAuthState.NEED_PIN);\n+        }\n+    }\n+\n+    /**\n+     * Call the Ecobee token endpoint to get the access and refresh tokens. Once successfully retrieved,\n+     * the access and refresh tokens will be injected into the OHC OAuth service.\n+     * Warnings are suppressed to avoid the Gson.fromJson warnings.\n+     */\n+    @SuppressWarnings({ \"null\", \"unused\" })\n+    private void getTokens() throws EcobeeAuthException {\n+        logger.debug(\"EcobeeAuth: State is {}: Executing step: 'getToken'\", state);\n+        StringBuilder url = new StringBuilder(ECOBEE_TOKEN_URL);\n+        url.append(\"?grant_type=ecobeePin\");\n+        url.append(\"&code=\").append(code);\n+        url.append(\"&client_id=\").append(apiKey);\n+\n+        logger.trace(\"EcobeeAuth: Posting token URL={}\", url.toString());\n+        String response = executeUrl(\"POST\", url.toString());\n+        logger.trace(\"EcobeeAuth: Got a valid token response: {}\", response);\n+\n+        TokenResponseDTO tokenResponse = EcobeeApi.getGson().fromJson(response, TokenResponseDTO.class);\n+        if (tokenResponse == null) {\n+            logger.debug(\"EcobeeAuth: Got null token response from Ecobee API\");\n+            updateBridgeStatus();\n+            setState(isPinExpired() ? EcobeeAuthState.NEED_PIN : EcobeeAuthState.NEED_TOKEN);\n+            return;\n+        }\n+        if (StringUtils.isNotEmpty(tokenResponse.error)) {\n+            throw new EcobeeAuthException(tokenResponse.error + \": \" + tokenResponse.errorDescription);\n+        }\n+        AccessTokenResponse accessTokenResponse = new AccessTokenResponse();\n+        accessTokenResponse.setRefreshToken(tokenResponse.refreshToken);\n+        accessTokenResponse.setAccessToken(tokenResponse.accessToken);\n+        accessTokenResponse.setScope(tokenResponse.scope);\n+        accessTokenResponse.setTokenType(tokenResponse.tokenType);\n+        accessTokenResponse.setExpiresIn(tokenResponse.expiresIn);\n+        try {\n+            logger.debug(\"EcobeeAuth: Importing AccessTokenResponse into oAuthClientService!!!\");\n+            oAuthClientService.importAccessTokenResponse(accessTokenResponse);\n+            bridgeHandler.updateBridgeStatus(ThingStatus.ONLINE);\n+            setState(EcobeeAuthState.COMPLETE);\n+            return;\n+        } catch (OAuthException e) {\n+            logger.info(\"EcobeeAuth: Got OAuthException\", e);\n+            // No other processing needed here\n+        }\n+        updateBridgeStatus();\n+        setState(isPinExpired() ? EcobeeAuthState.NEED_PIN : EcobeeAuthState.NEED_TOKEN);\n+    }\n+\n+    private void writeLogMessage(String pin, Integer expiresIn) {\n+        logger.info(\"#################################################################\");\n+        logger.info(\"# Ecobee: U S E R   I N T E R A C T I O N   R E Q U I R E D !!\");\n+        logger.info(\"# Go to the Ecobee web portal, then:\");\n+        logger.info(\"# Enter PIN '{}' in My Apps within {} minutes.\", pin, expiresIn);\n+        logger.info(\"# NOTE: All API attempts will fail in the meantime.\");\n+        logger.info(\"#################################################################\");\n+    }\n+\n+    private void updateBridgeStatus() {\n+        AuthorizeResponseDTO response = authResponse;\n+        if (response != null) {\n+            bridgeHandler.updateBridgeStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_PENDING,\n+                    String.format(\"Awaiting entry of PIN %s. Expires in %d minutes\", response.pin,\n+                            getMinutesUntilPinExpiration()));\n+\n+        }\n+    }\n+\n+    private void setPinExpirationTime(long expiresIn) {\n+        pinExpirationTime = expiresIn + TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis());\n+    }\n+\n+    private long getMinutesUntilPinExpiration() {\n+        return pinExpirationTime - TimeUnit.MILLISECONDS.toMinutes(System.currentTimeMillis());\n+    }\n+\n+    private boolean isPinExpired() {\n+        return getMinutesUntilPinExpiration() <= 0;\n+    }\n+\n+    private @Nullable String executeUrl(String method, String url) {\n+        Request request = httpClient.newRequest(url);\n+        request.timeout(apiTimeout, TimeUnit.MILLISECONDS);\n+        request.method(method);\n+        EcobeeApi.HTTP_HEADERS.forEach((k, v) -> request.header((String) k, (String) v));\n+\n+        String errorMsg;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMzMjE0NA=="}, "originalCommit": {"oid": "fda3ddfeda1320cbec97ff8c03f5fbfda170e4a5"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE1MjkyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To resume from a hold and return to the program, use the ResumeProgram function.\n          \n          \n            \n            To resume from a hold and return to the program, use the `resumeProgram` function.", "url": "https://github.com/openhab/openhab-addons/pull/6823#discussion_r405152924", "createdAt": "2020-04-07T22:34:49Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.ecobee/README.md", "diffHunk": "@@ -0,0 +1,1252 @@\n+# Ecobee Binding\n+\n+[Ecobee Inc.](https://www.ecobee.com/)  of Toronto, Canada, sells a range of Wi-Fi \n+enabled thermostats, principally in the Americas. \n+This binding communicates with the \n+[Ecobee API](https://www.ecobee.com/home/developer/api/introduction/index.shtml) over a secure, \n+RESTful API to Ecobee's servers. \n+Monitoring ambient temperature and humidity, changing HVAC mode, changing heat or cool setpoints, \n+changing the backlight intensity, and even sending textual messages to one or a group of thermostats, \n+can be accomplished through this binding.\n+\n+## Supported Things\n+\n+The following thing types are supported:\n+\n+| Thing          |  ID             |  Description |\n+|----------------|-----------------|--------------|\n+| Account        | account         | Represents an Ecobee account. Manages all communication with the Ecobee API. |\n+| Thermostat     | thermostat      | Represents a physical Ecobee thermostat associated with the Ecobee Account. |\n+| Remote Sensor  | sensor          | Represents an Ecobee remote sensor that is associated with an Ecobee Thermostat. Also represents the internal sensor of an Ecobee Thermostat. |\n+\n+## Discovery\n+\n+Once an Account has been set up, and the API key has been authorized, Thermostats and Remote \n+Sensors will be discovered automatically.\n+First, the thermostats will be added to the inbox.\n+Then, once a Thermostat thing has been created, the Remote Sensors associated with that \n+thermostat will be added to the inbox.\n+The binding will detect the capabilities (e.g. temperature, humidity, occupancy) supported by the \n+sensor, and then dynamically create channels for those capabilities.\n+\n+## Authorization\n+\n+After you have installed the binding, and have created the Account thing with a valid API key,\n+the binding will try to get information about your thermostats from the Ecobee web service.\n+When this happens, the binding will determine that it has not yet been authorized by the Ecobee web service.\n+\n+At this point the binding will retrieve a four-character PIN code from the Ecobee web service.\n+The binding will mark the Account thing OFFLINE with a detailed status message that contains the\n+PIN code needed to complete the authorization.\n+The PIN code will be valid for 9 minutes.\n+The status message will look something like this.\n+\n+```\n+Enter PIN 'RVLA' in MyApps. PIN expires in 9 minutes.\n+```\n+\n+To complete the authorization, the PIN code must be entered into the Ecobee **My Apps** settings in your account at ecobee.com.\n+This will authorize the binding to work with the thermostats associated with your Ecobee account.\n+Once authorization is complete, the binding will retrieve information about the available thermostats, \n+and add those thermostats to the inbox.\n+\n+## Thing Configuration\n+\n+### Ecobee Account\n+\n+The following configuration parameters are available on the Ecobee Account:\n+\n+| Parameter               | Type       |Required/Optional | Description |\n+|-------------------------|------------|------------------|-------------|\n+| apiKey                  | String     | Required         | This is the Ecobee API key, which is needed to authorize the binding with the Ecobee servers. |\n+| refreshIntervalNormal   | Integer    | Required         | Specifies the interval in seconds with which the Ecobee data will be updated under normal operation. |\n+| refreshIntervalQuick    | Integer    | Required         | Specifies the interval in seconds with which the Ecobee data will be updated after sending an update or executing a function. |\n+| apiTimeout              | Integer    | Required         | Time in seconds to allow an API request against the Ecobee servers to complete. |\n+| discoveryEnabled        | Switch     | Required         | Specifies whether the binding should auto-discover thermostats and remote sensors. |\n+| discoveryInterval       | Integer    | Optional         | Specifies time interval in seconds in which the binding will attempt to discover thermostats. |\n+\n+### Ecobee Thermostat\n+\n+The following configuration parameters are available on the Ecobee Thermostat:\n+\n+| Parameter               | Required/Optional | Description |\n+|-------------------------|-------------------|-------------|\n+| thermostatId            | Required          | This is the ID that is assigned to a thermostat by Ecobee. This parameter is used for all communication with Ecobee involving this thermostat. |\n+\n+### Ecobee Remote Sensor\n+\n+The following configuration parameters are available on the Ecobee Remote Sensor:\n+\n+| Parameter               | Required/Optional | Description |\n+|-------------------------|-------------------|-------------|\n+| sensorId                | Required          | This is the ID that is assigned to a remote and/or internal sensor by Ecobee. |\n+\n+## Channels\n+\n+### Thermostat Channels\n+\n+The following channels are available on the Ecobee Thermostat.\n+\n+| Group | Channel | Type | ReadWrite | Description |\n+|-------|---------|------|-----------|--------------|\n+| info | identifier | String |     | Identifier |\n+| info | name | String | yes | Name |\n+| info | thermostatRev | String |     | Thermostat Rev |\n+| info | isRegistered | Switch |     | Is Registered |\n+| info | modelNumber | String |     | Model Number |\n+| info | brand | String |     | Brand |\n+| info | features | String |     | Features |\n+| info | lastModified | DateTime |     | Last Modified |\n+| info | thermostatTime | DateTime |     | Thermostat Time |\n+||||||\n+| equipmentStatus | equipmentStatus | String |     | Equipment Status |\n+||||||\n+| program | currentClimateRef | String |     | Current Climate Ref |\n+||||||\n+| runtime | runtimeRev | String |     | Runtime Rev |\n+| runtime | connected | Switch |     | Connected |\n+| runtime | firstConnected | DateTime |     | First Connected |\n+| runtime | connectDateTime | DateTime |     | Connected Date Time |\n+| runtime | disconnectDateTime | DateTime |     | Disconnected Date Timee |\n+| runtime | lastModified | DateTime |     | Last Modified |\n+| runtime | lastStatusModified | DateTime |     | Last Status Modified |\n+| runtime | runtimeDate | String |     | Runtime Date |\n+| runtime | runtimeInterval | Number |     | Runtime Interval |\n+| runtime | actualTemperature | Number:Temperature |     | Actual Temperature |\n+| runtime | actualHumidity | Number:Dimensionless |     | Actual Humidity |\n+| runtime | rawTemperature | Number:Temperature |     | Raw Temperature |\n+| runtime | showIconMode | Number |     | Show Icon Mode |\n+| runtime | desiredHeat | Number:Temperature |     | Desired Heat |\n+| runtime | desiredCool | Number:Temperature |     | Desired Cool |\n+| runtime | desiredHumidity | Number:Dimensionless |     | Desired Humidity |\n+| runtime | desiredDehumidity | Number:Dimensionless |     | Desired Dehumidity |\n+| runtime | desiredFanMode | String |     | Desired Fan Mode |\n+| runtime | desiredHeatRangeLow | Number:Temperature |     | Desired Heat Range Low |\n+| runtime | desiredHeatRangeHigh | Number:Temperature |     | Desired Heat Range High |\n+| runtime | desiredCoolRangeLow | Number:Temperature |     | Desired Cool Range Low |\n+| runtime | desiredCoolRangeHigh | Number:Temperature |     | Desired Cool Range High |\n+||||||\n+| settings | hvacMode | String | yes | HVAC Mode |\n+| settings | lastServiceDate | String | yes | Last Service Date |\n+| settings | serviceRemindMe | Switch | yes | Service Remind Me |\n+| settings | monthsBetweenService | Number | yes | Months Between Service |\n+| settings | remindMeDate | String | yes | Remind Me Date |\n+| settings | vent | String | yes | Vent |\n+| settings | ventilatorMinOnTime | Number | yes | Ventilator Min On Time |\n+| settings | serviceRemindTechnician | Switch | yes | Service Remind Technician |\n+| settings | eiLocation | String | yes | EI Location |\n+| settings | coldTempAlert | Number:Temperature | yes | Cold Temp Alert |\n+| settings | coldTempAlertEnabled | Switch | yes | Cold Temp Alert Enabled |\n+| settings | hotTempAlert | Number:Temperature | yes | Hot Temp Alert |\n+| settings | hotTempAlertEnabled | Switch | yes | Hot Temp Alert Enabled |\n+| settings | coolStages | Number |     | Cool Stages |\n+| settings | heatStages | Number |     | Heat Stages |\n+| settings | maxSetBack | Number | yes | Max Set Back |\n+| settings | maxSetForward | Number | yes | Max Set Forward |\n+| settings | quickSaveSetBack | Number | yes | Quick Save Set Back |\n+| settings | quickSaveSetForward | Number | yes | Quick Save Set Forward |\n+| settings | hasHeatPump | Switch |     | Has Heat Pump |\n+| settings | hasForcedAir | Switch |     | Has Forced Air |\n+| settings | hasBoiler | Switch |     | Has Boiler |\n+| settings | hasHumidifier | Switch |     | Has Humidifier |\n+| settings | hasElectric | Switch |     | Has Electric |\n+| settings | hasDehumidifier | Switch |     | Has Dehumidifier |\n+| settings | hasErv | Switch |     | Has ERV |\n+| settings | hasHrv | Switch |     | Has HRV |\n+| settings | condensationAvoid | Switch | yes | Condensation Avoid |\n+| settings | useCelsius | Switch | yes | Use Celsius |\n+| settings | useTimeFormat12 | Switch | yes | Use Time Format 12 |\n+| settings | locale | String | yes | Locale |\n+| settings | humidity | String | yes | Humidity |\n+| settings | humidifierMode | String | yes | Humidifier Mode |\n+| settings | backlightOnIntensity | Number | yes | Backlight On Intensity |\n+| settings | backlightSleepIntensity | Number | yes | Backlight Sleep Intensity |\n+| settings | backlightOffTime | Number | yes | Backlight Off Time |\n+| settings | soundTickVolume | Number | yes | Sound Tick Volume |\n+| settings | soundAlertVolume | Number | yes | Sound Alert Volume |\n+| settings | compressorProtectionMinTime | Number | yes | Compressor Protection Min Time |\n+| settings | compressorProtectionMinTemp | Number:Temperature | yes | Compressor Protection Min Temp |\n+| settings | stage1HeatingDifferentialTemp | Number | yes | Stage 1 Heating Differential Temp |\n+| settings | stage1CoolingDifferentialTemp | Number | yes | Stage 1 Cooling Differential Temp |\n+| settings | stage1HeatingDissipationTime | Number | yes | Stage 1 Heating Dissipation Time |\n+| settings | stage1CoolingDissipationTime | Number | yes | Stage 1 Cooling Dissipation Time |\n+| settings | heatPumpReversalOnCool | Switch | yes | Heat Pump Reversal On Cool |\n+| settings | fanControlRequired | Switch | yes | Fan Control Required |\n+| settings | fanMinOnTime | Number | yes | Fan Min On Time |\n+| settings | heatCoolMinDelta | Number | yes | Heat Cool Min Delta |\n+| settings | tempCorrection | Number | yes | Temp Correction |\n+| settings | holdAction | String | yes | Hold Action |\n+| settings | heatPumpGroundWater | Switch |     | Heat Pump Ground Water |\n+| settings | dehumidifierMode | String | yes | Dehumidifier Mode |\n+| settings | dehumidifierLevel | Number | yes | Dehumidifier Level |\n+| settings | dehumidifyWithAC | Switch | yes | Dehumidify With AC |\n+| settings | dehumidifyOvercoolOffset | Number | yes | Dehumidify Overcool Effect |\n+| settings | autoHeatCoolFeatureEnabled | Switch | yes | Auto Heat Cool Feature Enabled |\n+| settings | wifiOfflineAlert | Switch | yes | WiFi Offline Alert |\n+| settings | heatMinTemp | Number:Temperature |     | Heat Min Temp |\n+| settings | heatMaxTemp | Number:Temperature |     | Heat Max Temp |\n+| settings | coolMinTemp | Number:Temperature |     | Cool Min Temp |\n+| settings | coolMaxTemp | Number:Temperature |     | Cool Max Temp |\n+| settings | heatRangeHigh | Number:Temperature | yes | Heat Range High |\n+| settings | heatRangeLow | Number:Temperature | yes | Heat Range Low |\n+| settings | coolRangeHigh | Number:Temperature | yes | Cool Range High |\n+| settings | coolRangeLow | Number:Temperature | yes | Cool Range Low |\n+| settings | userAccessCode | String |     | User Access Code |\n+| settings | userAccessSetting | Number |     | User Access Settings |\n+| settings | auxRuntimeAlert | Number | yes | Aux Runtime Alert |\n+| settings | auxOutdoorTempAlert | Number:Temperature | yes | Aux Outdoor Temp Alert |\n+| settings | auxMaxOutdoorTemp | Number:Temperature | yes | Aux Max Outdoor Temp |\n+| settings | auxRuntimeAlertNotify | Switch | yes | Aux Runtime Alert Notify |\n+| settings | auxOutdoorTempAlertNotify | Switch | yes | Aux Outdoor Temp Alert Notify |\n+| settings | auxRuntimeAlertNotifyTechnician | Switch | yes | Aux Runtime Alert Notify Technician |\n+| settings | auxOutdoorTempAlertNotifyTechnician | Switch | yes | Aux Outdoor Temp Alert Notify Technician |\n+| settings | disablePreHeating | Switch | yes | Disable Pre Heating |\n+| settings | disablePreCooling | Switch | yes | Disable Pre Cooling |\n+| settings | installerCodeRequired | Switch | yes | Installer Code Required |\n+| settings | drAccept | String | yes | DR Accept |\n+| settings | isRentalProperty | Switch | yes | Is Rental Property |\n+| settings | useZoneController | Switch | yes | Use Zone Controller |\n+| settings | randomStartDelayCool | Number | yes | Random Start Delay Cool |\n+| settings | randomStartDelayHeat | Number | yes | Random Start Delay Heat |\n+| settings | humidityHighAlert | Number:Dimensionless | yes | Humidity High Alert |\n+| settings | humidityLowAlert | Number:Dimensionless | yes | Humidity Low Alert |\n+| settings | disableHeatPumpAlerts | Switch | yes | Disable Heat Pump Alerts |\n+| settings | disableAlertsOnIdt | Switch | yes | Disable Alerts On IDT |\n+| settings | humidityAlertNotify | Switch | yes | Humidity Alert Notify |\n+| settings | humidityAlertNotifyTechnician | Switch | yes | Humidity Alert Notify Technician |\n+| settings | tempAlertNotify | Switch | yes | Temp Alert Notify |\n+| settings | tempAlertNotifyTechnician | Switch | yes | Temp Alert Notify Technician |\n+| settings | monthlyElectricityBillLimit | Number | yes | Monthly Electricity Bill Limit |\n+| settings | enableElectricityBillAlert | Switch | yes | Enable Electricity Bill Alert |\n+| settings | enableProjectedElectricityBillAlert | Switch | yes | Enable Projected Electricity Bill Alert |\n+| settings | electricityBillingDayOfMonth | Number | yes | Electricity Billing Day Of Month |\n+| settings | electricityBillCycleMonths | Number | yes | Electricity Bill Cycle Months |\n+| settings | electricityBillStartMonth | Number | yes | Electricity Bill Start Month |\n+| settings | ventilatorMinOnTimeHome | Number | yes | Ventilator Min On Time Home |\n+| settings | ventilatorMinOnTimeAway | Number | yes | Ventilator Min On Time Away |\n+| settings | backlightOffDuringSleep | Switch | yes | Backlight Off During Sleep |\n+| settings | autoAway | Switch | yes | Auto Away |\n+| settings | smartCirculation | Switch | yes | Smart Circulation |\n+| settings | followMeComfort | Switch | yes | Follow Me Comfort |\n+| settings | ventilatorType | String |     | Ventilator Type |\n+| settings | isVentilatorTimerOn | Switch | yes | Is Ventilator Timer On |\n+| settings | ventilatorOffDateTime | String |     | Ventilator Off Date Time |\n+| settings | hasUVFilter | Switch | yes | Has UV Filter |\n+| settings | coolingLockout | Switch | yes | Cooling Lockout |\n+| settings | ventilatorFreeCooling | Switch | yes | Ventilator Free Cooling |\n+| settings | dehumidifyWhenHeating | Switch | yes | Dehumidify When Heating |\n+| settings | ventilatorDehumidify | Switch | yes | Ventilator Dehumidify |\n+| settings | groupRef | String | yes | Group Ref |\n+| settings | groupName | String | yes | Group Name |\n+| settings | groupSetting | Number | yes | Group Setting |\n+||||||\n+| alerts | acknowledgeRef | String |     | Acknowledge Ref |\n+| alerts | date | String |     | Date |\n+| alerts | time | String |     | Time |\n+| alerts | severity | String |     | Severity |\n+| alerts | text | String |     | Text |\n+| alerts | number | Number |     | Number |\n+| alerts | type | String |     | Type |\n+| alerts | isOperatorAlert | Switch |     | Is Operator Alert |\n+| alerts | reminder | String |     | Reminder |\n+| alerts | showIdt | Switch |     | Show IDT |\n+| alerts | showWeb | Switch |     | Show Web |\n+| alerts | sendEmail | Switch |     | Send Email |\n+| alerts | acknowledgement | String |     | Acknowledgement |\n+| alerts | remindMeLater | Switch |     | Remind Me Later |\n+| alerts | thermostatIdentifier | String |     | Thermostat Identifier |\n+| alerts | notificationType | String |     | Notification Type |\n+||||||\n+| events | name | String |     | Event Name |\n+| events | type | String |     | Event Type |\n+| events | running | Switch |     | Event is Running |\n+| events | startDate | String |     | Event Start Date |\n+| events | startTime | String |     | Event Start Time |\n+| events | endDate | String |     | Event End Date |\n+| events | endTime | String |     | Event End Time |\n+| events | isOccupied | Switch |     | Is Occupied |\n+| events | isCoolOff | Switch |     | Is Cool Off |\n+| events | isHeatOff | Switch |     | Is Heat Off |\n+| events | coolHoldTemp | Number:Temperature |     | Cool Hold Temp |\n+| events | heatHoldTemp | Number:Temperature |     | Heat Hold Temp |\n+| events | fan | String |     | Fan |\n+| events | vent | String |     | Vent |\n+| events | ventilatorMinOnTime | Number |     | Ventilator Min On Time |\n+| events | isOptional | Switch |     | Is Optional |\n+| events | isTemperatureRelative | Switch |     | Is Temperature Relative |\n+| events | coolRelativeTemp | Number |     | Cool Relative Temp |\n+| events | heatRelativeTemp | Number |     | Heat Relative Temp |\n+| events | isTemperatureAbsolute | Switch |     | Is Temperature Absolute |\n+| events | dutyCyclePercentage | Number |     | Duty Cycle Percentage |\n+| events | fanMinOnTime | Number |     | Fan Min On Time |\n+| events | occupiedSensorActive | Switch |     | Occupied Sensor Active |\n+| events | unoccupiedSensorActive | Switch |     | Unoccupied Sensor Active |\n+| events | drRampUpTemp | Number |     | DR Ramp Up Temp |\n+| events | drRampUpTime | Number |     | DR Ramp Up Time |\n+| events | linkRef | String |     | Link Ref |\n+| events | holdClimateRef | String |     | Hold Climate Ref |\n+||||||\n+| weather | timestamp | DateTime |     | Timestamp |\n+| weather | weatherStation | String |     | Weather Station |\n+| weather | weatherSymbol | Number |     | Symbol |\n+| weather | weatherSymbolText | String |     | Symbol Text |\n+||||||\n+| forecast0..9 | dateTime | DateTime |     | Date Time |\n+| forecast0..9 | condition | String |     | Condition |\n+| forecast0..9 | temperature | Number:Temperature |     | Temperature |\n+| forecast0..9 | pressure | Number:Pressure |     | Pressure |\n+| forecast0..9 | relativeHumidity | Number:Dimensionless |     | Relative Humidity |\n+| forecast0..9 | dewpoint | Number:Temperature |     | Dewpoint |\n+| forecast0..9 | visibility | Number |     | Visibility |\n+| forecast0..9 | windSpeed | Number:Speed |     | Wind Speed |\n+| forecast0..9 | windGust | Number:Speed |     | Wind Gust |\n+| forecast0..9 | windDirection | String |     | Wind Direction |\n+| forecast0..9 | windBearing | Number:Angle |     | Wind Bearing |\n+| forecast0..9 | pop | Number:Dimensionless |     | Probability of Precipitation |\n+| forecast0..9 | tempHigh | Number:Temperature |     | High Temperature |\n+| forecast0..9 | tempLow | Number:Temperature |     | Low Temperature |\n+| forecast0..9 | sky | Number |     | Sky |\n+| forecast0..9 | skyText | String |     | Sky Text |\n+||||||\n+| location | timeZoneOffsetMinutes | Number |     | Time Zone Offset Minutes |\n+| location | timeZone | String | yes | Time Zone |\n+| location | isDaylightSaving | Switch |     | Is Daylight Saving |\n+| location | streetAddress | String | yes | Street Address |\n+| location | city | String | yes | City |\n+| location | provinceState | String | yes | Province/State |\n+| location | country | String | yes | Country |\n+| location | postalCode | String | yes | Postal Code |\n+| location | phoneNumber | String | yes | Phone Number |\n+| location | mapCoordinates | Location | yes | Thermostat Location |\n+||||||\n+| houseDetails | style | String | yes | Style |\n+| houseDetails | size | Number | yes | Size |\n+| houseDetails | numberOfFloors | Number | yes | Number of Floors |\n+| houseDetails | numberOfRooms | Number | yes | Number of Rooms |\n+| houseDetails | numberOfOccupants | Number | yes | Number of Occupants |\n+| houseDetails | age | Number | yes | Age |\n+| houseDetails | windowEfficiency | Number | yes | Window Efficiency |\n+||||||\n+| management | administrativeContact | String |     | Administrative Contact |\n+| management | billingContact | String |     | Billing Contact |\n+| management | name | String |     | Name |\n+| management | phone | String |     | Phone |\n+| management | email | String |     | Email |\n+| management | web | String |     | Web |\n+| management | showAlertIdt | Switch |     | Show Alert Idt |\n+| management | showAlertWeb | Switch |     | Show Alert Web |\n+||||||\n+| technician | contractorRef | String |     | Contractor Ref |\n+| technician | name | String |     | Name |\n+| technician | phone | String |     | Phone |\n+| technician | streetAddress | String |     | Street Address |\n+| technician | city | String |     | City |\n+| technician | provinceState | String | yes | Province/State |\n+| technician | country | String |     | Country |\n+| technician | postalCode | String |     | Postal Code |\n+| technician | email | String |     | Email |\n+| technician | web | String |     | Web |\n+||||||\n+| version | thermostatFirmwareVersion | String |     | Firmware Version |\n+\n+### Remote Sensor Channels\n+\n+The following channels are available on the Ecobee Remote Sensor.\n+\n+| Channel      | Type     | ReadWrite   | Description  |\n+|--------------|----------|-------------|--------------|\n+| id           | String   |             | Sensor ID assigned by thermostat  |\n+| name         | String   |             | Name given to the remote sensor by the user  |\n+| type         | String   |             | The type of sensor  |\n+| code         | String   |             | The unique 4-digit alphanumeric sensor code  |\n+| inUse        | Switch   |             | Indicates whether the remote sensor is currently in use by a comfort setting  |\n+\n+Some or all of the following Remote Sensor channels will be added dynamically depending on the capabilities of the sensor.\n+\n+| Channel      | Type                  | ReadWrite | Description  |\n+|--------------|-----------------------|-----------|--------------|\n+| temperature  | Number:Temperature    |           | Temperature reported by the sensor  |\n+| humidity     | Number:Dimensionless  |           | Humidity reported by the sensor  |\n+| occupancy    | Switch                |           | Occupancy status reported by the sensor  |\n+| co2          | String                |           | CO2 reported by the sensor  |\n+| dryContact   | String                |           | Dry contact status reported by the sensor  |\n+| adc          | String                |           | ADC reported by the sensor  |\n+\n+## Thing Actions\n+\n+### Acknowledge\n+\n+The acknowledge function allows an alert to be acknowledged by specifying the alert's acknowledgement ref.\n+\n+##### acknowledge - acknowledge an alert\n+\n+```java\n+boolean acknowledge(String ackRef, String ackType, Boolean remindMeLater)\n+```\n+\n+```\n+Parameters:\n+ackRef - The acknowledge ref of alert.\n+ackType - The type of acknowledgement. Valid values: accept, decline, defer, unacknowledged.\n+remindMeLater - Whether to remind at a later date, if this is a defer acknowledgement.\n+\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Control Plug\n+\n+Control the on/off state of a plug by setting a hold on the plug.\n+Creates a hold for the on or off state of the plug for the specified duration.\n+Note that an event is created regardless of whether the program is in the same state as the requested state.\n+\n+##### controlPlug - Control the on/off state of a plug\n+\n+```java\n+boolean controlPlug(String plugName, String plugState, Date startDateTime, Date endDateTime, String holdType, Number holdHours)\n+```\n+\n+```\n+Parameters:\n+plugName - Name of plug to be controlled.\n+plugState - State to which plug should be set (on, off, resume).\n+startDateTime - Start time for which the plug state should be applied.\n+endDateTime - End time for which the plug state should be applied.\n+holdType - Type of hold that should be applied (dateTime, nextTransityion, indefinite, holdHours).\n+holdHours - Number of hours for which the plug state should be applied.\n+\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Create Vacation\n+\n+If the start/end date/times are not provided for the vacation event,\n+the vacation event will begin immediately and last 14 days.\n+If both the coolHoldTemp and heatHoldTemp parameters provided to this function have the same value, \n+and the Thermostat is in auto mode, then the two values will be adjusted during processing to be\n+separated by the value stored in thermostat.settings.heatCoolMinDelta.\n+\n+##### createVacation - Create a vacation event on the thermostat\n+\n+```java\n+boolean createVacation(String name, QuantityType<Temperature> coolHoldTemp, QuantityType<Temperature> heatHoldTemp, Date startDateTime, Date endDateTime, String fan, Number fanMinOnTime)\n+```\n+\n+```\n+Parameters:\n+name - The vacation event name. It must be unique.\n+coolHoldTemp - The temperature to set the cool vacation hold at.\n+heatHoldTemp - The temperature to set the heat vacation hold at.\n+startDateTime - The start date/time.\n+endDateTime - The end date/time.\n+fan - The fan mode during the vacation. Values: auto, on Default: auto\n+fanMinOnTime - The minimum number of minutes to run the fan each hour. Range: 0-60, Default: 0\n+\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Delete Vacation\n+\n+The delete vacation function deletes a vacation event from a thermostat.\n+This is the only way to cancel a vacation event. \n+This method is able to remove vacation events not yet started and scheduled in the future.\n+\n+##### deleteVacation - delete a vacation event from a thermostat\n+\n+```java\n+boolean deleteVacation(String name)\n+```\n+\n+```\n+Parameters:\n+name - Name of vacation to be deleted.\n+\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Reset Preferences\n+\n+The reset preferences function sets all of the user configurable settings back \n+to the factory default values. \n+This function call will not only reset the top level thermostat settings such \n+as hvacMode, lastServiceDate and vent, but also all of the user configurable \n+fields of the thermostat.settings and thermostat.program objects.\n+Note that this does not reset all values. \n+For example, the installer settings and wifi details remain untouched.\n+\n+##### resetPreferences - Sets all user configurable settings back to factory defaults\n+\n+```java\n+boolean resetPreferences()\n+```\n+\n+```\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Resume program\n+\n+The resume program function removes the currently running event providing the event \n+is not a mandatory demand response event. \n+If resumeAll parameter is not set, top active event is removed from the stack and \n+the thermostat resumes its program, or enters the next event in the stack if one exists.\n+If resumeAll parameter set to true, the function resumes all events and returns the thermostat to its program.\n+\n+##### resumeProgram - Remove the currently running event\n+\n+```java\n+boolean resumeProgram(Boolean resumeAll)\n+```\n+\n+```\n+Parameters:\n+resumeAll - Indicates if the thermostat should be resumed to next event (false) or to its program (true).\n+\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Send Message\n+\n+The send message function allows an alert message to be sent to the thermostat. \n+The message properties are same as those of the Alert Object.\n+\n+##### - sendMessage - Send a message to a thermostat\n+\n+```java\n+boolean sendMessage(String text)\n+```\n+\n+```\n+Parameters:\n+text - Text of message to be sent to the thermostat.\n+\n+Returns - true if the operation was successful, false otherwise\n+```\n+\n+### Set Hold\n+\n+The set hold function sets the thermostat into a hold with the specified temperature. \n+Creates a hold for the specified duration. \n+Note that an event is created regardless of whether the program is in the same state as the requested state.\n+\n+There is also support for creating a hold by passing a holdClimateRef request parameter/value pair to this function. \n+When an existing and valid Climate.climateRef value is passed to this function, the coolHoldTemp, \n+heatHoldTemp and fan mode from that Climate are used in the creation of the hold event. \n+The values from that Climate will take precedence over any coolHoldTemp, heatHoldTemp and fan mode \n+parameters passed into this function separately.\n+\n+To resume from a hold and return to the program, use the ResumeProgram function.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "originalPosition": 537}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTQ1MTU2", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-389545156", "createdAt": "2020-04-07T22:53:38Z", "commit": {"oid": "4623dea161d151836043485de773c0110b78af2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef41b93a76d54569731a3ea0b1ac539dd019b7fd", "author": {"user": {"login": "mhilbush", "name": "Mark Hilbush"}}, "url": "https://github.com/openhab/openhab-addons/commit/ef41b93a76d54569731a3ea0b1ac539dd019b7fd", "committedDate": "2020-04-08T12:11:18Z", "message": "Address more review feedback\n\nSigned-off-by: Mark Hilbush <mark@hilbush.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMTExOTU3", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-390111957", "createdAt": "2020-04-08T15:58:08Z", "commit": {"oid": "ef41b93a76d54569731a3ea0b1ac539dd019b7fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0OTY3Njk3", "url": "https://github.com/openhab/openhab-addons/pull/6823#pullrequestreview-394967697", "createdAt": "2020-04-16T20:16:54Z", "commit": {"oid": "ef41b93a76d54569731a3ea0b1ac539dd019b7fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a26010b2d38cbef2795fb73fdaf6eb5e4c3a68", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-addons/commit/b0a26010b2d38cbef2795fb73fdaf6eb5e4c3a68", "committedDate": "2020-04-16T20:17:23Z", "message": "Merge branch '2.5.x' into ecobee-binding"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1638, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}