{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTA3MzAy", "number": 7660, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjo1MTowN1rOD9Louw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyMzoxN1rOD-vOgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDgwMzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjo1MTowN1rOGWiK9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxOTozMDozNlrOGWjCuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ==", "bodyText": "Why NOC ???\nWhy not something like NAPresence ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426281719", "createdAt": "2020-05-17T16:51:07Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NDQ5OQ==", "bodyText": "\"NOC\" is a type id which comes from the Netatmo API, I can't change that. ;-) At least the constant name is more meaningful. It seems to mean \"Netatmo Outdoor Camera\", see https://dev.netatmo.com/apidocumentation/security#products-details", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426284499", "createdAt": "2020-05-17T17:20:26Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjEzNA==", "bodyText": "We have the full control / choice of our openHAB thing types.\nAs I understand, until now the OH thing type is matching the API type ?\nThere was no real reason for that and as soon as this type has no easy meaning for the end user, I would suggest to use a more meaning thing type, like OutdoorCamera for example.\nAnd it was a bad idea to use uppercase letters in the thing types. But it is too late to change that.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426286134", "createdAt": "2020-05-17T17:38:06Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4NjgxNQ==", "bodyText": "\"NOC\" has technically to match the Netatmo API type, there is no other mapping mechanizm within the binding.\nYes, Netatmo changed their product names. \"Welcome\" is now \"Indoor\", and \"Presence\" is now \"Outdoor\". I decided to keep the old names, because everything is named \"Welcome\", now it is still consistent. I think it would be a good idea to plan a separate refactoring issue to rename everything to the new names, \"Welcome\" is existing in nearly every class, so that will become expensive and should planned separately.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426286815", "createdAt": "2020-05-17T17:46:33Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4Nzc0NQ==", "bodyText": "\"NOC\" has technically to match the Netatmo API type\n\nCan you please point in the code where it is required to have the openHAB thing type being named \"NOC\" to be able to use the API ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426287745", "createdAt": "2020-05-17T17:56:53Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5MDAyNg==", "bodyText": "Method \"org.openhab.binding.netatmo.internal.discovery.NetatmoModuleDiscoveryService#discoverWelcomeHome\", line 149. When you follow the trace you will find method \"org.openhab.binding.netatmo.internal.discovery.NetatmoModuleDiscoveryService#findThingUID\", there it is matched with the constants. See also the usage of method \"io.swagger.client.model.NAWelcomeCamera#getType\", there comes \"NOC\" from the Netatmo API like described in the API documentation from Netatmo.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426290026", "createdAt": "2020-05-17T18:23:59Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NTk5NQ==", "bodyText": "Ok, you're absolutely right ! I don't like how it was done but it makes sense in this case to continue with the same patten and so use NOC as thing type in openHAB.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426295995", "createdAt": "2020-05-17T19:30:36Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/NetatmoBindingConstants.java", "diffHunk": "@@ -95,6 +95,8 @@\n     public static final ThingTypeUID WELCOME_HOME_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomeHome\");\n     public static final ThingTypeUID WELCOME_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NACamera\");\n     public static final ThingTypeUID WELCOME_PERSON_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NAWelcomePerson\");\n+    // Presence camera\n+    public static final ThingTypeUID PRESENCE_CAMERA_THING_TYPE = new ThingTypeUID(BINDING_ID, \"NOC\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTcxOQ=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDgwNTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjo1MzoxM1rOGWiLuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMDo1Njo0OVrOGWjigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg==", "bodyText": "In case we decide to have only one configuration setting for any camera, at least its label and description has to be updated (not its name as it will break existing setup).\nBut I rather suggest to add a new configuration setting readPresence.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426281912", "createdAt": "2020-05-17T16:53:13Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -207,6 +207,8 @@ private String getApiScope() {\n         if (configuration.readWelcome) {\n             scopes.add(\"read_camera\");\n             scopes.add(\"access_camera\");\n+            scopes.add(\"read_presence\");\n+            scopes.add(\"access_presence\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMDMzNQ==", "bodyText": "Thank you for your feedback.\nI decided for the first option (renaming just label and description), because I think there is no use-case for enabling indoor camera access but not outdoor camera access or the other way round. I renamed it to generally \"Access Camera API\", that should it clarify for the user, it's downward compatible and nobody has to activate the Presence separately.\nI hope the solution is ok. When necessary I could also revert it and separate the settings.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426300335", "createdAt": "2020-05-17T20:16:28Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -207,6 +207,8 @@ private String getApiScope() {\n         if (configuration.readWelcome) {\n             scopes.add(\"read_camera\");\n             scopes.add(\"access_camera\");\n+            scopes.add(\"read_presence\");\n+            scopes.add(\"access_presence\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMjM0MA==", "bodyText": "Update: Hm, maybe it's better to separate it. It would cause that the user automatically grants more scopes when the binding is already installed, right? So it would be better when the user explicitly set the grants for the new scopes. I will separate it, please block the pull-request since the change is done.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426302340", "createdAt": "2020-05-17T20:37:38Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -207,6 +207,8 @@ private String getApiScope() {\n         if (configuration.readWelcome) {\n             scopes.add(\"read_camera\");\n             scopes.add(\"access_camera\");\n+            scopes.add(\"read_presence\");\n+            scopes.add(\"access_presence\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwNDEyOA==", "bodyText": "done. It is now separated, the user has to grant the access to the outdoor cameras explicitly.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426304128", "createdAt": "2020-05-17T20:56:49Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -207,6 +207,8 @@ private String getApiScope() {\n         if (configuration.readWelcome) {\n             scopes.add(\"read_camera\");\n             scopes.add(\"access_camera\");\n+            scopes.add(\"read_presence\");\n+            scopes.add(\"access_presence\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MTkxMg=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDgwNzEyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/welcomecamera.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjo1NjowMlrOGWiMow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMDoxNjo0MlrOGWjTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjE0Nw==", "bodyText": "Please rename the file into camera.xml for example as it now contains the description of several camera.\nWhy NOC ???", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426282147", "createdAt": "2020-05-17T16:56:02Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/welcomecamera.xml", "diffHunk": "@@ -27,6 +27,29 @@\n \t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n \t</thing-type>\n \n+\t<thing-type id=\"NOC\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMDM1Mw==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426300353", "createdAt": "2020-05-17T20:16:42Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/welcomecamera.xml", "diffHunk": "@@ -27,6 +27,29 @@\n \t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n \t</thing-type>\n \n+\t<thing-type id=\"NOC\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjE0Nw=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDgwODgxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/welcomecamera.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNjo1ODoyMVrOGWiNig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QyMDoxNjo1OFrOGWjT0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjM3OA==", "bodyText": "Could be renamed into thing-type:netatmo:camera for example (in the 2 thing types).", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426282378", "createdAt": "2020-05-17T16:58:21Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/welcomecamera.xml", "diffHunk": "@@ -27,6 +27,29 @@\n \t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n \t</thing-type>\n \n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>\n+\t\t\t<channel id=\"welcomeCameraSdStatus\" typeId=\"sd_status\"></channel>\n+\t\t\t<channel id=\"welcomeCameraAlimStatus\" typeId=\"alim_status\"></channel>\n+\t\t\t<channel id=\"welcomeCameraIsLocal\" typeId=\"is_locale\"></channel>\n+\t\t\t<channel id=\"welcomeCameraLivePicture\" typeId=\"live_picture\"></channel>\n+\t\t\t<channel id=\"welcomeCameraLivePictureUrl\" typeId=\"live_picture_url\"></channel>\n+\t\t\t<channel id=\"welcomeCameraLiveStreamUrl\" typeId=\"live_stream_url\"></channel>\n+\t\t\t<channel id=\"welcomeHomeEvent\" typeId=\"homeEvent\"></channel>\n+\t\t</channels>\n+\n+\t\t<representation-property>id</representation-property>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMwMDM3MA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426300370", "createdAt": "2020-05-17T20:16:58Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/welcomecamera.xml", "diffHunk": "@@ -27,6 +27,29 @@\n \t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n \t</thing-type>\n \n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>\n+\t\t\t<channel id=\"welcomeCameraSdStatus\" typeId=\"sd_status\"></channel>\n+\t\t\t<channel id=\"welcomeCameraAlimStatus\" typeId=\"alim_status\"></channel>\n+\t\t\t<channel id=\"welcomeCameraIsLocal\" typeId=\"is_locale\"></channel>\n+\t\t\t<channel id=\"welcomeCameraLivePicture\" typeId=\"live_picture\"></channel>\n+\t\t\t<channel id=\"welcomeCameraLivePictureUrl\" typeId=\"live_picture_url\"></channel>\n+\t\t\t<channel id=\"welcomeCameraLiveStreamUrl\" typeId=\"live_stream_url\"></channel>\n+\t\t\t<channel id=\"welcomeHomeEvent\" typeId=\"homeEvent\"></channel>\n+\t\t</channels>\n+\n+\t\t<representation-property>id</representation-property>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI4MjM3OA=="}, "originalCommit": {"oid": "9e42a99796414ded0289228d92324816ea829cf4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTEyMDk4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/config/config.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMDo0MDowM1rOGWkyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxODowMDoxOFrOGXB8PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDQ4Mw==", "bodyText": "Does this change effect existing users?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426324483", "createdAt": "2020-05-18T00:40:03Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -142,7 +148,7 @@\n \t\t</parameter>\n \t</config-description>\n \n-\t<config-description uri=\"thing-type:netatmo:nawelcomecamera\">\n+\t<config-description uri=\"thing-type:netatmo:camera\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM5NzkzNA==", "bodyText": "That is a good question.\nHow can this change affect existing users ? You think the config url is stored in the JSON database ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426397934", "createdAt": "2020-05-18T06:38:46Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -142,7 +148,7 @@\n \t\t</parameter>\n \t</config-description>\n \n-\t<config-description uri=\"thing-type:netatmo:nawelcomecamera\">\n+\t<config-description uri=\"thing-type:netatmo:camera\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDQ4Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4Mzk3Ng==", "bodyText": "IIRC it will not. We are persisting the Thing configuration. Not the config descriptions.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426583976", "createdAt": "2020-05-18T12:20:46Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -142,7 +148,7 @@\n \t\t</parameter>\n \t</config-description>\n \n-\t<config-description uri=\"thing-type:netatmo:nawelcomecamera\">\n+\t<config-description uri=\"thing-type:netatmo:camera\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDQ4Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwMjIzNw==", "bodyText": "Hm, I'm not sure. Are you sure enough?\nWhen not I think we have to revert that (but it is a result of a code review from lolodomo) or we have to test/confirm that (but I'm missing a Welcome camera which would necessary to test that).", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426802237", "createdAt": "2020-05-18T18:00:18Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/config/config.xml", "diffHunk": "@@ -142,7 +148,7 @@\n \t\t</parameter>\n \t</config-description>\n \n-\t<config-description uri=\"thing-type:netatmo:nawelcomecamera\">\n+\t<config-description uri=\"thing-type:netatmo:camera\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjMyNDQ4Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Njc1Nzg0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMjoxODowMFrOGW0hyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToyMToxNFrOGYah1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw==", "bodyText": "It maybe will be a little bit confusing for users to have the \"welcome\" prefix on their channels.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426582473", "createdAt": "2020-05-18T12:18:00Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4OTk4Mg==", "bodyText": "Good catch.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426589982", "createdAt": "2020-05-18T12:31:30Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU5MDcxNA==", "bodyText": "cameraStatus would be better.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426590714", "createdAt": "2020-05-18T12:32:46Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5NjI3NQ==", "bodyText": "Hm, I think I can't just rename it. Actual Welcome and Presence use the same API, so \"Welcome\" should get removed it the whole code base. When I start to rename these channels ...\n\nonly for Presence to \"presenceCameraStatus\": I have to duplicate at least class NAWelcomeCameraHandler. The next thing is NAWelcomeCamera which comes from the swagger-api project and there are many many more naming problems like this.\nfor Welcome and Presence to \"cameraStatus\": It isn't downward compatible.\n\nI see the point that it may be confusing for the user that the channels are named with \"welcome\". It would be ok for me to realize the 1. solution but this has to stop at NAWelcomeCameraHandler. I can't refactor the whole code base with this pull-request... ;-) So I would suggest to create a new refactoring issue to resolve this. At this point at least the user doesn't recognize the naming problems and the later refactoring can also be downward compatible.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426796275", "createdAt": "2020-05-18T17:49:26Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg4ODc4MQ==", "bodyText": "Renaming internal classes is not the problem. It does not (really) affect a user. I do not want you to refactor all the stuff right now. We should use general naming for new channels to make them reusable. I read about a Netatmo video doorbell coming soon which will have a camera too. Touching existing channels for Welcome will be a breaking change. In my POV we can leave them untouched at the moment.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r426888781", "createdAt": "2020-05-18T20:56:33Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MDUwNQ==", "bodyText": "So what are we doing there ? Keep the channel names with \"welcome\" in the new thing type for presence camera ? Or remove welcome from the channel names only in the new presence thing typ, keeping the channel names with welcome in the welcome thing type for backward compatibility ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427470505", "createdAt": "2020-05-19T17:21:46Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUwODMyMg==", "bodyText": "I have now pushed new changes which use \"camera\"... channels instead of \"welcomeCamera\"... channels. That required new mapping code and an inheritance structure at one class. You can decide what's the better solution, I could also revert it again. ;-)", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427508322", "createdAt": "2020-05-19T18:21:01Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3MzM5NA==", "bodyText": "I would prefer if we kept backward compatibility so this change can be released in the 2.5.x branch. Otherwise this can't be merged until openHAB 3 is released.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427573394", "createdAt": "2020-05-19T20:16:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1MzY1NA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428253654", "createdAt": "2020-05-20T19:21:14Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"welcomeCameraStatus\" typeId=\"status\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU4MjQ3Mw=="}, "originalCommit": {"oid": "f9572ed2f4faf2a9d975fedba6f639dbeb9674d8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDMzNTI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzoyNzoyMVrOGX-mfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToyMToyOFrOGYaiSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjA5NA==", "bodyText": "Can you please add few spaces in the first column to compensate the suppress of welcome ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427796094", "createdAt": "2020-05-20T07:27:21Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/README.md", "diffHunk": "@@ -483,10 +489,17 @@ All these channels are read only.\n | welcomeCameraLivePictureUrl | String    | Url of the live snapshot for this camera                 |\n | welcomeCameraLiveStreamUrl  | String    | Url of the live stream for this camera                   |\n \n-All these channels are read only.\n+**Supported channels for the Presence Camera thing:**\n \n-Warning : the URL of the live snapshot is a fixed URL so the value of the channel welcomeCameraLivePictureUrl will never be updated once first set by the binding.\n-So to get a refreshed picture, you need to use the refresh parameter in your sitemap image element.\n+| Channel ID                  | Item Type | Description                                              |\n+|-----------------------------|-----------|----------------------------------------------------------|\n+| cameraStatus         | Switch    | State of the camera                                      |\n+| cameraSdStatus       | Switch    | State of the SD card                                     |\n+| cameraAlimStatus     | Switch    | State of the power connector                             |\n+| cameraIsLocal        | Switch    | indicates whether the camera is on the same network than the openHAB Netatmo Binding |\n+| cameraLivePicture    | Image     | Camera Live Snapshot                                     |\n+| cameraLivePictureUrl | String    | Url of the live snapshot for this camera                 |\n+| cameraLiveStreamUrl  | String    | Url of the live stream for this camera                   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1Mzc3MA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428253770", "createdAt": "2020-05-20T19:21:28Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/README.md", "diffHunk": "@@ -483,10 +489,17 @@ All these channels are read only.\n | welcomeCameraLivePictureUrl | String    | Url of the live snapshot for this camera                 |\n | welcomeCameraLiveStreamUrl  | String    | Url of the live stream for this camera                   |\n \n-All these channels are read only.\n+**Supported channels for the Presence Camera thing:**\n \n-Warning : the URL of the live snapshot is a fixed URL so the value of the channel welcomeCameraLivePictureUrl will never be updated once first set by the binding.\n-So to get a refreshed picture, you need to use the refresh parameter in your sitemap image element.\n+| Channel ID                  | Item Type | Description                                              |\n+|-----------------------------|-----------|----------------------------------------------------------|\n+| cameraStatus         | Switch    | State of the camera                                      |\n+| cameraSdStatus       | Switch    | State of the SD card                                     |\n+| cameraAlimStatus     | Switch    | State of the power connector                             |\n+| cameraIsLocal        | Switch    | indicates whether the camera is on the same network than the openHAB Netatmo Binding |\n+| cameraLivePicture    | Image     | Camera Live Snapshot                                     |\n+| cameraLivePictureUrl | String    | Url of the live snapshot for this camera                 |\n+| cameraLiveStreamUrl  | String    | Url of the live stream for this camera                   |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NjA5NA=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDM0NDI0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/ChannelTypeUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzozMDoxMVrOGX-sGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToyMjo0OVrOGYalDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzUyOQ==", "bodyText": "UnDefType.NULL should never be set. Please rather use UnDefType.UNDEF.\nCan you fix the other methods in the class please ? I see the same error at line 96 for example.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427797529", "createdAt": "2020-05-20T07:30:11Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/ChannelTypeUtils.java", "diffHunk": "@@ -96,6 +96,10 @@ public static State toOnOffType(@Nullable Integer value) {\n         return value != null ? (value == 1 ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;\n     }\n \n+    public static State toOnOffType(@Nullable Boolean value) {\n+        return value != null ? (value ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNzAxMw==", "bodyText": "Ok, I have just realized the same behavior like the other methods. I can change that when you are sure. I hope this pull-request is not a never ending story... ;-)", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428237013", "createdAt": "2020-05-20T18:51:40Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/ChannelTypeUtils.java", "diffHunk": "@@ -96,6 +96,10 @@ public static State toOnOffType(@Nullable Integer value) {\n         return value != null ? (value == 1 ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;\n     }\n \n+    public static State toOnOffType(@Nullable Boolean value) {\n+        return value != null ? (value ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzUyOQ=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1NDQ3Nw==", "bodyText": "done (but I have only changed it for toOnOffType methods because there are too many usages and I can't ensure that nothing would break. That could be a good separate refactoring ;-))", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428254477", "createdAt": "2020-05-20T19:22:49Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/ChannelTypeUtils.java", "diffHunk": "@@ -96,6 +96,10 @@ public static State toOnOffType(@Nullable Integer value) {\n         return value != null ? (value == 1 ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;\n     }\n \n+    public static State toOnOffType(@Nullable Boolean value) {\n+        return value != null ? (value ? OnOffType.ON : OnOffType.OFF) : UnDefType.NULL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5NzUyOQ=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDM1NTE3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzozMzoyNVrOGX-yog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo0NjozN1rOGYZV_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5OTIwMg==", "bodyText": "Just a comment, I see the scope \"write_camera\" is used for the Welcome camera. I don't remember what it is its role. But are you sure that it is not required for the Presence ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427799202", "createdAt": "2020-05-20T07:33:25Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -210,6 +210,11 @@ private String getApiScope() {\n             scopes.add(\"write_camera\");\n         }\n \n+        if (configuration.readPresence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNDIzOA==", "bodyText": "Yes, write_camera isn't existing for the Presence camera. This is documented here: https://dev.netatmo.com/apidocumentation/security#scopes", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428234238", "createdAt": "2020-05-20T18:46:37Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/handler/NetatmoBridgeHandler.java", "diffHunk": "@@ -210,6 +210,11 @@ private String getApiScope() {\n             scopes.add(\"write_camera\");\n         }\n \n+        if (configuration.readPresence) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc5OTIwMg=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDM2MzgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNzozNjowM1rOGX-39w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxOToyMTo0MFrOGYaisg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMDU2Nw==", "bodyText": "Do we keep this channel with this name ?", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r427800567", "createdAt": "2020-05-20T07:36:03Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"cameraStatus\" typeId=\"status\"></channel>\n+\t\t\t<channel id=\"cameraSdStatus\" typeId=\"sd_status\"></channel>\n+\t\t\t<channel id=\"cameraAlimStatus\" typeId=\"alim_status\"></channel>\n+\t\t\t<channel id=\"cameraIsLocal\" typeId=\"is_locale\"></channel>\n+\t\t\t<channel id=\"cameraLivePicture\" typeId=\"live_picture\"></channel>\n+\t\t\t<channel id=\"cameraLivePictureUrl\" typeId=\"live_picture_url\"></channel>\n+\t\t\t<channel id=\"cameraLiveStreamUrl\" typeId=\"live_stream_url\"></channel>\n+\t\t\t<channel id=\"welcomeHomeEvent\" typeId=\"homeEvent\"></channel>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNjI3Ng==", "bodyText": "As I understand the events are reported to the WelcomeHome thing. Actually I haven't tested the channel and events of the Presence are useless at the moment, because sub events are missing within the retrofit Swagger mapping. I'm working on it separately as I mentioned in issue #3059. I think I will remove this channel for the moment and realize and test it with a separate issue later.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428236276", "createdAt": "2020-05-20T18:50:17Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"cameraStatus\" typeId=\"status\"></channel>\n+\t\t\t<channel id=\"cameraSdStatus\" typeId=\"sd_status\"></channel>\n+\t\t\t<channel id=\"cameraAlimStatus\" typeId=\"alim_status\"></channel>\n+\t\t\t<channel id=\"cameraIsLocal\" typeId=\"is_locale\"></channel>\n+\t\t\t<channel id=\"cameraLivePicture\" typeId=\"live_picture\"></channel>\n+\t\t\t<channel id=\"cameraLivePictureUrl\" typeId=\"live_picture_url\"></channel>\n+\t\t\t<channel id=\"cameraLiveStreamUrl\" typeId=\"live_stream_url\"></channel>\n+\t\t\t<channel id=\"welcomeHomeEvent\" typeId=\"homeEvent\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMDU2Nw=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1MjQ0OQ==", "bodyText": "Yes because that would have no sense to present a channel which is never set.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428252449", "createdAt": "2020-05-20T19:19:05Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"cameraStatus\" typeId=\"status\"></channel>\n+\t\t\t<channel id=\"cameraSdStatus\" typeId=\"sd_status\"></channel>\n+\t\t\t<channel id=\"cameraAlimStatus\" typeId=\"alim_status\"></channel>\n+\t\t\t<channel id=\"cameraIsLocal\" typeId=\"is_locale\"></channel>\n+\t\t\t<channel id=\"cameraLivePicture\" typeId=\"live_picture\"></channel>\n+\t\t\t<channel id=\"cameraLivePictureUrl\" typeId=\"live_picture_url\"></channel>\n+\t\t\t<channel id=\"cameraLiveStreamUrl\" typeId=\"live_stream_url\"></channel>\n+\t\t\t<channel id=\"welcomeHomeEvent\" typeId=\"homeEvent\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMDU2Nw=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI1Mzg3NA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428253874", "createdAt": "2020-05-20T19:21:40Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/resources/ESH-INF/thing/camera.xml", "diffHunk": "@@ -24,7 +24,30 @@\n \t\t</channels>\n \n \t\t<representation-property>id</representation-property>\n-\t\t<config-description-ref uri=\"thing-type:netatmo:nawelcomecamera\"/>\n+\t\t<config-description-ref uri=\"thing-type:netatmo:camera\"/>\n+\t</thing-type>\n+\n+\t<thing-type id=\"NOC\">\n+\t\t<supported-bridge-type-refs>\n+\t\t\t<bridge-type-ref id=\"netatmoapi\" />\n+\t\t</supported-bridge-type-refs>\n+\n+\t\t<label>Presence Camera</label>\n+\t\t<description>This represents a presence camera at home</description>\n+\n+\t\t<channels>\n+\t\t\t<channel id=\"cameraStatus\" typeId=\"status\"></channel>\n+\t\t\t<channel id=\"cameraSdStatus\" typeId=\"sd_status\"></channel>\n+\t\t\t<channel id=\"cameraAlimStatus\" typeId=\"alim_status\"></channel>\n+\t\t\t<channel id=\"cameraIsLocal\" typeId=\"is_locale\"></channel>\n+\t\t\t<channel id=\"cameraLivePicture\" typeId=\"live_picture\"></channel>\n+\t\t\t<channel id=\"cameraLivePictureUrl\" typeId=\"live_picture_url\"></channel>\n+\t\t\t<channel id=\"cameraLiveStreamUrl\" typeId=\"live_stream_url\"></channel>\n+\t\t\t<channel id=\"welcomeHomeEvent\" typeId=\"homeEvent\"></channel>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzgwMDU2Nw=="}, "originalCommit": {"oid": "0f00835aee272debe253defb0db074b2813525c7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTA2Nzc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeCameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDowNTo0N1rOGZBCWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxOTo0MFrOGZBdMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDU3MQ==", "bodyText": "Some of our build tools don't like EOF without a newline. So add a newline here.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428884571", "createdAt": "2020-05-21T20:05:47Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeCameraHandler.java", "diffHunk": "@@ -12,106 +12,44 @@\n  */\n package org.openhab.binding.netatmo.internal.welcome;\n \n-import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n import org.eclipse.jdt.annotation.NonNull;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\n-\n-import io.swagger.client.model.NAWelcomeCamera;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n \n /**\n  * {@link NAWelcomeCameraHandler} is the class used to handle the Welcome Camera Data\n  *\n  * @author Ing. Peter Weiss - Initial contribution\n  *\n  */\n-public class NAWelcomeCameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\n-    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\n+public class NAWelcomeCameraHandler extends CameraHandler {\n \n     public NAWelcomeCameraHandler(@NonNull Thing thing) {\n         super(thing);\n     }\n \n-    @Override\n-    protected void updateProperties(NAWelcomeCamera moduleData) {\n-        updateProperties(null, moduleData.getType());\n-    }\n-\n     @SuppressWarnings(\"null\")\n     @Override\n-    protected State getNAThingProperty(String chanelId) {\n-        switch (chanelId) {\n+    protected State getNAThingProperty(String channelId) {\n+        switch (channelId) {\n             case CHANNEL_WELCOME_CAMERA_STATUS:\n-                return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+                return getStatusState();\n             case CHANNEL_WELCOME_CAMERA_SDSTATUS:\n-                return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+                return getSdStatusState();\n             case CHANNEL_WELCOME_CAMERA_ALIMSTATUS:\n-                return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+                return getAlimStatusState();\n             case CHANNEL_WELCOME_CAMERA_ISLOCAL:\n-                return (module == null || module.getIsLocal() == null) ? UnDefType.UNDEF\n-                        : module.getIsLocal() ? OnOffType.ON : OnOffType.OFF;\n+                return getIsLocalState();\n             case CHANNEL_WELCOME_CAMERA_LIVEPICTURE_URL:\n-                return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\n+                return getLivePictureURLState();\n             case CHANNEL_WELCOME_CAMERA_LIVEPICTURE:\n-                return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\n+                return getLivePictureState();\n             case CHANNEL_WELCOME_CAMERA_LIVESTREAM_URL:\n-                return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\n-        }\n-        return super.getNAThingProperty(chanelId);\n-    }\n-\n-    /**\n-     * Get the url for the live snapshot\n-     *\n-     * @return Url of the live snapshot\n-     */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * Get the url for the live stream depending wether local or not\n-     *\n-     * @return Url of the live stream\n-     */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += \"/live/index\";\n-            result += isLocal() ? \"_local\" : \"\";\n-            result += \".m3u8\";\n+                return getLiveStreamState();\n         }\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n-    }\n-\n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += \"/vod/\" + videoId + \"/index\";\n-            result += isLocal() ? \"_local\" : \"\";\n-            result += \".m3u8\";\n-        }\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal().booleanValue();\n+        return super.getNAThingProperty(channelId);\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MTQ0Mg==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428891442", "createdAt": "2020-05-21T20:19:40Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/welcome/NAWelcomeCameraHandler.java", "diffHunk": "@@ -12,106 +12,44 @@\n  */\n package org.openhab.binding.netatmo.internal.welcome;\n \n-import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.*;\n import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\n \n import org.eclipse.jdt.annotation.NonNull;\n-import org.eclipse.smarthome.core.library.types.OnOffType;\n-import org.eclipse.smarthome.core.library.types.StringType;\n import org.eclipse.smarthome.core.thing.Thing;\n import org.eclipse.smarthome.core.types.State;\n-import org.eclipse.smarthome.core.types.UnDefType;\n-import org.eclipse.smarthome.io.net.http.HttpUtil;\n-import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\n-\n-import io.swagger.client.model.NAWelcomeCamera;\n+import org.openhab.binding.netatmo.internal.camera.CameraHandler;\n \n /**\n  * {@link NAWelcomeCameraHandler} is the class used to handle the Welcome Camera Data\n  *\n  * @author Ing. Peter Weiss - Initial contribution\n  *\n  */\n-public class NAWelcomeCameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\n-    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\n+public class NAWelcomeCameraHandler extends CameraHandler {\n \n     public NAWelcomeCameraHandler(@NonNull Thing thing) {\n         super(thing);\n     }\n \n-    @Override\n-    protected void updateProperties(NAWelcomeCamera moduleData) {\n-        updateProperties(null, moduleData.getType());\n-    }\n-\n     @SuppressWarnings(\"null\")\n     @Override\n-    protected State getNAThingProperty(String chanelId) {\n-        switch (chanelId) {\n+    protected State getNAThingProperty(String channelId) {\n+        switch (channelId) {\n             case CHANNEL_WELCOME_CAMERA_STATUS:\n-                return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\n+                return getStatusState();\n             case CHANNEL_WELCOME_CAMERA_SDSTATUS:\n-                return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\n+                return getSdStatusState();\n             case CHANNEL_WELCOME_CAMERA_ALIMSTATUS:\n-                return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\n+                return getAlimStatusState();\n             case CHANNEL_WELCOME_CAMERA_ISLOCAL:\n-                return (module == null || module.getIsLocal() == null) ? UnDefType.UNDEF\n-                        : module.getIsLocal() ? OnOffType.ON : OnOffType.OFF;\n+                return getIsLocalState();\n             case CHANNEL_WELCOME_CAMERA_LIVEPICTURE_URL:\n-                return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\n+                return getLivePictureURLState();\n             case CHANNEL_WELCOME_CAMERA_LIVEPICTURE:\n-                return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\n+                return getLivePictureState();\n             case CHANNEL_WELCOME_CAMERA_LIVESTREAM_URL:\n-                return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\n-        }\n-        return super.getNAThingProperty(chanelId);\n-    }\n-\n-    /**\n-     * Get the url for the live snapshot\n-     *\n-     * @return Url of the live snapshot\n-     */\n-    private String getLivePictureURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += LIVE_PICTURE;\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * Get the url for the live stream depending wether local or not\n-     *\n-     * @return Url of the live stream\n-     */\n-    private String getLiveStreamURL() {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += \"/live/index\";\n-            result += isLocal() ? \"_local\" : \"\";\n-            result += \".m3u8\";\n+                return getLiveStreamState();\n         }\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private String getVpnUrl() {\n-        return (module == null) ? null : module.getVpnUrl();\n-    }\n-\n-    public String getStreamURL(String videoId) {\n-        String result = getVpnUrl();\n-        if (result != null) {\n-            result += \"/vod/\" + videoId + \"/index\";\n-            result += isLocal() ? \"_local\" : \"\";\n-            result += \".m3u8\";\n-        }\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"null\")\n-    private boolean isLocal() {\n-        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal().booleanValue();\n+        return super.getNAThingProperty(channelId);\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDU3MQ=="}, "originalCommit": {"oid": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTA2OTgyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDowNjozMlrOGZBDvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoxOTozMlrOGZBc6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDkyNA==", "bodyText": "Some of our build tools don't like EOF without a newline. So add a newline here.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428884924", "createdAt": "2020-05-21T20:06:32Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private String getVpnUrl() {\r\n+        return (module == null) ? null : module.getVpnUrl();\r\n+    }\r\n+\r\n+    public String getStreamURL(String videoId) {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/vod/\" + videoId + \"/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private boolean isLocal() {\r\n+        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal().booleanValue();\r\n+    }\r\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MTM2OA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428891368", "createdAt": "2020-05-21T20:19:32Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private String getVpnUrl() {\r\n+        return (module == null) ? null : module.getVpnUrl();\r\n+    }\r\n+\r\n+    public String getStreamURL(String videoId) {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/vod/\" + videoId + \"/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private boolean isLocal() {\r\n+        return (module == null || module.getIsLocal() == null) ? false : module.getIsLocal().booleanValue();\r\n+    }\r\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg4NDkyNA=="}, "originalCommit": {"oid": "bc8e8e94089e71bd96bbda65e08c4e7827184aaf"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTExNjY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyMTo1N1rOGZBhkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0NToxOVrOGZCPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MjU2MA==", "bodyText": "Please cache getLiveStreamURL() to a local variable to it doesn't get recomputed. Also do the same for  the other methods above.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428892560", "createdAt": "2020-05-21T20:21:57Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2609e722b91b1797d228e4075991602ce88635e0"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDMzOQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428904339", "createdAt": "2020-05-21T20:45:19Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MjU2MA=="}, "originalCommit": {"oid": "2609e722b91b1797d228e4075991602ce88635e0"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTEyMDIxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyMzowOFrOGZBjyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0NTo0M1rOGZCQbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzEyOQ==", "bodyText": "You should use a StringBuilder here instead of raw string concatenation.", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428893129", "createdAt": "2020-05-21T20:23:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2609e722b91b1797d228e4075991602ce88635e0"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDU1Ng==", "bodyText": "done (but the code wasn't new, it was just moved and as I know to use StringBuilder isn't much important since Java 6 because the JDK / compiler optimizes the code itself)", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428904556", "createdAt": "2020-05-21T20:45:43Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzEyOQ=="}, "originalCommit": {"oid": "2609e722b91b1797d228e4075991602ce88635e0"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTEyMDY1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDoyMzoxN1rOGZBkGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMDo0NjozNFrOGZCR8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzIwOQ==", "bodyText": "same here", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428893209", "createdAt": "2020-05-21T20:23:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private String getVpnUrl() {\r\n+        return (module == null) ? null : module.getVpnUrl();\r\n+    }\r\n+\r\n+    public String getStreamURL(String videoId) {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/vod/\" + videoId + \"/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2609e722b91b1797d228e4075991602ce88635e0"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODkwNDk0NQ==", "bodyText": "done (but the code wasn't new, it was just moved and as I know to use StringBuilder isn't much important since Java 6 because the JDK / compiler optimizes the code itself)", "url": "https://github.com/openhab/openhab-addons/pull/7660#discussion_r428904945", "createdAt": "2020-05-21T20:46:34Z", "author": {"login": "Novanic"}, "path": "bundles/org.openhab.binding.netatmo/src/main/java/org/openhab/binding/netatmo/internal/camera/CameraHandler.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.netatmo.internal.camera;\r\n+\r\n+import io.swagger.client.model.NAWelcomeCamera;\r\n+import org.eclipse.jdt.annotation.NonNull;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+import org.eclipse.smarthome.io.net.http.HttpUtil;\r\n+import org.openhab.binding.netatmo.internal.handler.NetatmoModuleHandler;\r\n+\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toOnOffType;\r\n+import static org.openhab.binding.netatmo.internal.ChannelTypeUtils.toStringType;\r\n+import static org.openhab.binding.netatmo.internal.NetatmoBindingConstants.*;\r\n+\r\n+/**\r\n+ * {@link CameraHandler} is the class used to handle Camera Data\r\n+ *\r\n+ * @author Sven Strohschein (partly moved code from NAWelcomeCameraHandler to introduce inheritance, see NAWelcomeCameraHandler)\r\n+ *\r\n+ */\r\n+public class CameraHandler extends NetatmoModuleHandler<NAWelcomeCamera> {\r\n+\r\n+    private static final String LIVE_PICTURE = \"/live/snapshot_720.jpg\";\r\n+\r\n+    public CameraHandler(@NonNull Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    protected void updateProperties(NAWelcomeCamera moduleData) {\r\n+        updateProperties(null, moduleData.getType());\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    @Override\r\n+    protected State getNAThingProperty(String channelId) {\r\n+        switch (channelId) {\r\n+            case CHANNEL_CAMERA_STATUS:\r\n+                return getStatusState();\r\n+            case CHANNEL_CAMERA_SDSTATUS:\r\n+                return getSdStatusState();\r\n+            case CHANNEL_CAMERA_ALIMSTATUS:\r\n+                return getAlimStatusState();\r\n+            case CHANNEL_CAMERA_ISLOCAL:\r\n+                return getIsLocalState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE_URL:\r\n+                return getLivePictureURLState();\r\n+            case CHANNEL_CAMERA_LIVEPICTURE:\r\n+                return getLivePictureState();\r\n+            case CHANNEL_CAMERA_LIVESTREAM_URL:\r\n+                return getLiveStreamState();\r\n+        }\r\n+        return super.getNAThingProperty(channelId);\r\n+    }\r\n+\r\n+    protected State getStatusState() {\r\n+        return module != null ? toOnOffType(module.getStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getSdStatusState() {\r\n+        return module != null ? toOnOffType(module.getSdStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getAlimStatusState() {\r\n+        return module != null ? toOnOffType(module.getAlimStatus()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getIsLocalState() {\r\n+        return module != null ? toOnOffType(module.getIsLocal()) : UnDefType.UNDEF;\r\n+    }\r\n+\r\n+    protected State getLivePictureURLState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : toStringType(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLivePictureState() {\r\n+        return getLivePictureURL() == null ? UnDefType.UNDEF : HttpUtil.downloadImage(getLivePictureURL());\r\n+    }\r\n+\r\n+    protected State getLiveStreamState() {\r\n+        return getLiveStreamURL() == null ? UnDefType.UNDEF : new StringType(getLiveStreamURL());\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live snapshot\r\n+     *\r\n+     * @return Url of the live snapshot\r\n+     */\r\n+    private String getLivePictureURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += LIVE_PICTURE;\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the url for the live stream depending wether local or not\r\n+     *\r\n+     * @return Url of the live stream\r\n+     */\r\n+    private String getLiveStreamURL() {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/live/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    @SuppressWarnings(\"null\")\r\n+    private String getVpnUrl() {\r\n+        return (module == null) ? null : module.getVpnUrl();\r\n+    }\r\n+\r\n+    public String getStreamURL(String videoId) {\r\n+        String result = getVpnUrl();\r\n+        if (result != null) {\r\n+            result += \"/vod/\" + videoId + \"/index\";\r\n+            result += isLocal() ? \"_local\" : \"\";\r\n+            result += \".m3u8\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg5MzIwOQ=="}, "originalCommit": {"oid": "2609e722b91b1797d228e4075991602ce88635e0"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 35, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}