{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDEzNzUw", "number": 7621, "title": "[onewire] Fix error handling for connection issues (#7149)", "bodyText": "Note: this is my first PR - so please forgive me my unexperience in the process. I will gladly accept hints on the correct way to do things. Thanks!\nThis pull request addresses the issues identified in #7149. Further discussion was done in https://community.openhab.org/t/error-with-onewire-owfs-number-access-read-timed-out-although-accessible-via-owhttp/92687/6.\nChanges\nUnsynchronized access\nIssue: OwserverBridgeHandler.initialize and .reportConnectionState access the otherwise controlled resource owserverconnection without synchronizing on it\nFix is straightforward synchronizing the access.\nBridge erroneously allows refreshes although connection is in state FAILED\nIssue\nAfter connection issues the owserverconnection is set to FAILED which results in the OwserverBridgeHandler not being refresheable. But the scheduled try to re-attempt the connection (owserverconnection.start) erroneously allows for refresh again although connection still is faulty.\nIn case of connection issues, the OwserverBridgeHandler is set to not refresheable. But when the owserverconnection is in state FAILED and owserverconnection.start is called to re-initiate the connection. During the first try, the owserverconnection is set to CLOSED again, although still it is failed. Thus allowing new connections for refresh (although connection is down). This is because during retries, owserverconnection.closeOnError is called. This in turn sets the owserverconnection to CLOSED (even though it is failed) and updates this in the OwserverBridgeHandler.\nBehind that is the issue that the owserverconnection must be set to closed, otherwise the common open method won't run.\nFix\nFor a fix, I introduced a new internal variable that tracks whether the current connection attempt is part of a recovery - so that one does not need to change the owserverconnection anymore to allow for this attempt to re-open the connection. Furthermore, the close method now can be instructed not to report the status to the bridge.\nFurther Changes\n\nOwserverBridgeHandler.refresh does not abort refresh in all places when the connection state goes to FAILED. --> added further checks on refresheable in the method\nBased on the pattern I figured of who throws OWExceptions, OwserverConnection.checkPresence() needs a throws declaration. --> added\nThe new CLOSED state in OwserverConnection.close was set after error handling - overwriting a potential FAILED state set by try-catch block. --> put setting to CLOSED in try-block right after the close call\nError handling of output stream unavailability in OwserverConnection.write was inconsistent with handling other issues. An OwException needed to be thrown. --> Implemented\nError handling in OwserverConnection.read has too broad of a try-block --> scope of try block reduced to the actual statement it is needed for\n\nIn addition, I added some code documentation I wrote when I tried to get into the logic of the binding. And some more tracing output which might be generally helpful.\nWith the updates, the log (trace level) looks like this now ...\nNormal work - before issue occurs...\n2020-05-12 23:27:21.906 [TRACE] [ternal.handler.OwserverBridgeHandler] - refreshTask with thread ID 183 starts at 1589318841906, 15 childs\n2020-05-12 23:27:21.907 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh: getting handler for onewire:basic:sensix:UG_Schleuse_ReedSensor (15 to go)\n2020-05-12 23:27:21.908 [TRACE] [ternal.handler.OwserverBridgeHandler] - onewire:basic:sensix:UG_Schleuse_ReedSensor initialized, refreshing\n2020-05-12 23:27:21.909 [TRACE] [.internal.handler.OwBaseThingHandler] - refreshing onewire:basic:sensix:UG_Schleuse_ReedSensor\n2020-05-12 23:27:21.910 [TRACE] [internal.owserver.OwserverConnection] - owServerConnection already open, skipping input buffer\n2020-05-12 23:27:21.911 [TRACE] [internal.owserver.OwserverConnection] - wrote: messageType PRESENT, size 41, controlFlags 0x00000124, payload '/3A.F6BF13000000'\n\nOWServer was killed - issue occurs. In this case presence refresh is affected and set to false.\n2020-05-12 23:27:21.941 [WARN ] [internal.owserver.OwserverConnection] - EOFException: exception while reading packet - null\n2020-05-12 23:27:21.944 [TRACE] [internal.owserver.OwserverConnection] - owServerConnection already open, skipping input buffer\n2020-05-12 23:27:21.949 [DEBUG] [internal.owserver.OwserverConnection] - closed connection\n2020-05-12 23:27:21.950 [DEBUG] [ternal.handler.OwserverBridgeHandler] - Updating owserverconnectionstate from OPENED to CLOSED\n2020-05-12 23:27:21.951 [DEBUG] [internal.owserver.OwserverConnection] - couldn't send messageType READ, size 44, controlFlags 0x00000104, payload '/system/process/pid', Broken pipe (Write failed)\n2020-05-12 23:27:21.953 [DEBUG] [internal.owserver.OwserverConnection] - failed requesting messageType READ, size 44, controlFlags 0x00000104, payload '/system/process/pid'->return code 0, size 24, controlFlags 0x00000100, payload '' [I/O Error: exception while sending request packet - Broken pipe (Write failed)]\n2020-05-12 23:27:21.954 [DEBUG] [ternal.handler.OwserverBridgeHandler] - Updating owserverconnectionstate from CLOSED to CLOSED\n2020-05-12 23:27:21.955 [DEBUG] [internal.owserver.OwserverConnection] - failed requesting messageType PRESENT, size 41, controlFlags 0x00000124, payload '/3A.F6BF13000000'->return code 0, size 24, controlFlags 0x00000100, payload '' [EOFException: exception while reading packet - null]\n2020-05-12 23:27:21.955 [TRACE] [internal.owserver.OwserverConnection] - presence /3A.F6BF13000000 : OFF\n2020-05-12 23:27:21.958 [TRACE] [.internal.handler.OwBaseThingHandler] - sensor not present\n\nAs this was the first request / attempt that failed, we have more tries like the one below, before we go to failed...\n2020-05-12 23:27:21.958 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh: getting handler for onewire:basic:sensix:UG_HWR_ReedSensor (14 to go)\n2020-05-12 23:27:21.959 [TRACE] [ternal.handler.OwserverBridgeHandler] - onewire:basic:sensix:UG_HWR_ReedSensor initialized, refreshing\n2020-05-12 23:27:21.960 [TRACE] [.internal.handler.OwBaseThingHandler] - refreshing onewire:basic:sensix:UG_HWR_ReedSensor\n2020-05-12 23:27:21.961 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:21.962 [DEBUG] [ternal.handler.OwserverBridgeHandler] - Updating owserverconnectionstate from CLOSED to CLOSED\n2020-05-12 23:27:21.963 [DEBUG] [internal.owserver.OwserverConnection] - failed requesting messageType PRESENT, size 41, controlFlags 0x00000120, payload '/3A.D0AD13000000'->return code 0, size 24, controlFlags 0x00000100, payload '' [I/O error: could not open connection to send request packet]\n2020-05-12 23:27:21.964 [TRACE] [internal.owserver.OwserverConnection] - presence /3A.D0AD13000000 : OFF\n2020-05-12 23:27:21.965 [TRACE] [.internal.handler.OwBaseThingHandler] - sensor not present\n2020-05-12 23:27:21.974 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh: getting handler for onewire:basic:sensix:UG_Schleuse_TempSensor (13 to go)\n\nLast allowed attempt also fails - then go to FAILED state...\n2020-05-12 23:27:23.004 [TRACE] [.internal.handler.OwBaseThingHandler] - refreshing onewire:basic:sensix:UG_Schleuse_ReedSensor\n2020-05-12 23:27:23.007 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:23.007 [DEBUG] [internal.owserver.OwserverConnection] - OW connection state: set to failed as max retries exceeded.\n2020-05-12 23:27:23.008 [DEBUG] [ternal.handler.OwserverBridgeHandler] - Updating owserverconnectionstate from CLOSED to FAILED\n2020-05-12 23:27:23.017 [DEBUG] [internal.owserver.OwserverConnection] - failed requesting messageType PRESENT, size 41, controlFlags 0x00000120, payload '/3A.F6BF13000000'->return code 0, size 24, controlFlags 0x00000100, payload '' [I/O error: could not open connection to send request packet]\n2020-05-12 23:27:23.017 [TRACE] [internal.owserver.OwserverConnection] - presence /3A.F6BF13000000 : OFF\n2020-05-12 23:27:23.018 [TRACE] [.internal.handler.OwBaseThingHandler] - sensor not present\n\nAs we are failed now, bridge is not refresheable anymore. All requests are denied. 1 per second as intended.\n2020-05-12 23:27:24.019 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 891 denied, as not refresheable\n2020-05-12 23:27:25.021 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 891 denied, as not refresheable\n2020-05-12 23:27:26.021 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 891 denied, as not refresheable\n2020-05-12 23:27:27.023 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 891 denied, as not refresheable\n2020-05-12 23:27:28.024 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 183 denied, as not refresheable\n\nEven when a re-start attempt is made, the connection state stays FAILED...\n2020-05-12 23:27:28.045 [DEBUG] [internal.owserver.OwserverConnection] - Trying to (re)start OW server connection - previous state: FAILED\n2020-05-12 23:27:28.046 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:28.047 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:28.048 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:28.052 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:28.054 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:28.056 [DEBUG] [internal.owserver.OwserverConnection] - could not open owServerConnection to 192.168.178.15:4304: Connection refused (Connection refused)\n2020-05-12 23:27:28.058 [DEBUG] [internal.owserver.OwserverConnection] - OW connection state: set to failed as max retries exceeded.\n2020-05-12 23:27:28.059 [DEBUG] [ternal.handler.OwserverBridgeHandler] - Updating owserverconnectionstate from FAILED to FAILED\n2020-05-12 23:27:29.024 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 3079 denied, as not refresheable\n2020-05-12 23:27:30.027 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 3079 denied, as not refresheable\n2020-05-12 23:27:31.029 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 183 denied, as not refresheable\n2020-05-12 23:27:32.030 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 183 denied, as not refresheable\n2020-05-12 23:27:33.030 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh requested by thread ID 183 denied, as not refresheable\n\nThe OWServer is up again and the binding connects back to it ...\n2020-05-12 23:27:58.150 [DEBUG] [internal.owserver.OwserverConnection] - Trying to (re)start OW server connection - previous state: FAILED\n2020-05-12 23:27:58.152 [DEBUG] [ternal.handler.OwserverBridgeHandler] - Updating owserverconnectionstate from FAILED to OPENED\n2020-05-12 23:27:58.154 [DEBUG] [internal.owserver.OwserverConnection] - OW connection state: opened to 192.168.178.15:4304\n2020-05-12 23:27:59.104 [TRACE] [ternal.handler.OwserverBridgeHandler] - refreshTask with thread ID 3079 starts at 1589318879104, 15 childs\n2020-05-12 23:27:59.104 [TRACE] [ternal.handler.OwserverBridgeHandler] - refresh: getting handler for onewire:basic:sensix:UG_Schleuse_ReedSensor (15 to go)\n2020-05-12 23:27:59.105 [TRACE] [ternal.handler.OwserverBridgeHandler] - onewire:basic:sensix:UG_Schleuse_ReedSensor initialized, refreshing\n2020-05-12 23:27:59.105 [TRACE] [.internal.handler.OwBaseThingHandler] - refreshing onewire:basic:sensix:UG_Schleuse_ReedSensor\n2020-05-12 23:27:59.106 [TRACE] [internal.owserver.OwserverConnection] - owServerConnection already open, skipping input buffer\n2020-05-12 23:27:59.110 [TRACE] [internal.owserver.OwserverConnection] - wrote: messageType PRESENT, size 41, controlFlags 0x00000124, payload '/3A.F6BF13000000'\n2020-05-12 23:27:59.111 [TRACE] [internal.owserver.OwserverConnection] - read: return code 0, size 32, controlFlags 0x00000124, payload ':\ufffd\ufffd????\ufffd'\n2020-05-12 23:27:59.112 [TRACE] [internal.owserver.OwserverConnection] - presence /3A.F6BF13000000 : ON\n\n2 Do / WIP\nAttention new location of guides: https://www.openhab.org/docs/developer/guidelines.html\n\nCheck: Does your contribution follow the coding guidelines:\nhttps://www.openhab.org/docs/developer/development/guidelines.html\nCheck: Did you check for any (relevant) issues from the static code analysis:\nhttps://www.openhab.org/docs/developer/development/bindings.html#static-code-analysis\n\nAttention new location: https://www.openhab.org/docs/developer/contributing.html\n\nDid you sign-off your work:\nhttps://www.openhab.org/docs/developer/contributing/contributing.html#sign-your-work\nYour Pull Request will automatically be built and available under the following folder: https://openhab.jfrog.io/openhab/libs-pullrequest-local/org/openhab/. It is a good practice to add a URL to your built JAR in this Pull Request description, so it is easier for the community to test your Add-on.", "createdAt": "2020-05-12T22:47:13Z", "url": "https://github.com/openhab/openhab-addons/pull/7621", "merged": true, "mergeCommit": {"oid": "90bbd3736d73b878bf9decf0059e486dcbb61b5c"}, "closed": true, "closedAt": "2020-05-16T16:03:12Z", "author": {"login": "Urmel"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgsWLDAH2gAyNDE3MDEzNzUwOmRjMjlhMjFiNGQ3OGJmZjgxMWZjMTczMTM0NjcxMmM3NjFkYjVhODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABch45BagFqTQxMzA4Nzc0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc29a21b4d78bff811fc1731346712c761db5a83", "author": {"user": {"login": "Urmel", "name": "Alexander Behring"}}, "url": "https://github.com/openhab/openhab-addons/commit/dc29a21b4d78bff811fc1731346712c761db5a83", "committedDate": "2020-05-12T22:51:42Z", "message": "binding does not recover from dead and restarted owserver #7149\nbut when server goes down, something explodes...\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6", "author": {"user": {"login": "Urmel", "name": "Alexander Behring"}}, "url": "https://github.com/openhab/openhab-addons/commit/107145853c94c22639ce8fc4d1c164ee6f38c7f6", "committedDate": "2020-05-12T22:51:42Z", "message": "Fixes for Onewire binding issue 7149.\n* Unsynchronized access to OwserverConnection.java\n* Bridge erroneously allows refreshes although connection is in state FAILED\n* OwserverBridgeHandler.refresh does not abort refresh in all places when the connection state goes to FAILED.\n* OwserverConnection.checkPresence() needs a throws declaration.\n* The new CLOSED state in OwserverConnection.close was set after error handling - overwriting a potential FAILED state set by try-catch block.\n* Error handling of output stream unavailability in OwserverConnection.write was inconsistent with handling other issues. An OwException needs to be thrown.\n* Error handling in OwserverConnection.read has too broad of a try-block\n\nIn addition, some code documentation and some more tracing output which might be generally helpful.\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTY0NjM2", "url": "https://github.com/openhab/openhab-addons/pull/7621#pullrequestreview-411164636", "createdAt": "2020-05-13T17:54:06Z", "commit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo1NDowNlrOGU9CQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODowODo0OFrOGU9kvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNDcwNw==", "bodyText": "Nope. Don't catch Exception.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424624707", "createdAt": "2020-05-13T17:54:06Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/test/java/org/openhab/binding/onewire/owserver/OwserverConnectionTest.java", "diffHunk": "@@ -154,8 +152,8 @@ public void testCheckPresence() {\n \n             presence = owserverConnection.checkPresence(\"notpresent\");\n             assertEquals(OnOffType.OFF, presence);\n-        } catch (OwException e) {\n-            Assert.fail(\"caught unexpected OwException\");\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNjQzMQ==", "bodyText": "I would suhggest to check !refreshable, log the error and return. That wax the rest of the method can stay as it is (which is more clear IMO).", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424626431", "createdAt": "2020-05-13T17:56:52Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java", "diffHunk": "@@ -145,29 +165,37 @@ private void refresh() {\n                     thingCount--;\n                 }\n \n-                refreshBridgeChannels(now);\n+                if (refreshable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzA5Ng==", "bodyText": "I don't think we need this log-message. Logging the new connection state is sufficient. You can remove oldConnectionState then.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424627096", "createdAt": "2020-05-13T17:57:53Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java", "diffHunk": "@@ -342,12 +370,15 @@ public boolean isRefreshable() {\n      * @param connectionState current connection state\n      */\n     public void reportConnectionState(OwserverConnectionState connectionState) {\n+        logger.debug(\"Updating owserverconnectionstate from {} to {}\", oldConnectionState, connectionState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyNzc5NQ==", "bodyText": "Why does this need to be synchronized? I don't see any concurrency issue here.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424627795", "createdAt": "2020-05-13T17:59:07Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/handler/OwserverBridgeHandler.java", "diffHunk": "@@ -106,7 +123,9 @@ public void initialize() {\n         updateStatus(ThingStatus.UNKNOWN);\n \n         scheduler.execute(() -> {\n-            owserverConnection.start();\n+            synchronized (owserverConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODMyMQ==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628321", "createdAt": "2020-05-13T17:59:55Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -37,7 +37,22 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * The {@link OwserverConnection} defines the protocol for connections to owservers\n+ * The {@link OwserverConnection} defines the protocol for connections to owservers.\n+ *\n+ *\n+ * Data is requested by using one of the read / write methods. In case of errors, an {@link OwException}\n+ * is thrown. All other exceptions are caught and handled.\n+ *\n+ * The data request methods follow a general pattern:\n+ * * build the appropriate {@link OwserverPacket} for the request\n+ * * call {@link #request(OwserverPacket)} to ask for the data, which then\n+ * * uses {@link #write(OwserverPacket)} to get the request to the server and\n+ * * uses {@link #read(boolean)} to get the result\n+ *\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODU2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * expected payload is attached. If not, an {@link OwException} is raised.\n          \n          \n            \n             * expected payload is attached. If not, an {@link OwException} is thrown.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628563", "createdAt": "2020-05-13T18:00:17Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -37,7 +37,22 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * The {@link OwserverConnection} defines the protocol for connections to owservers\n+ * The {@link OwserverConnection} defines the protocol for connections to owservers.\n+ *\n+ *\n+ * Data is requested by using one of the read / write methods. In case of errors, an {@link OwException}\n+ * is thrown. All other exceptions are caught and handled.\n+ *\n+ * The data request methods follow a general pattern:\n+ * * build the appropriate {@link OwserverPacket} for the request\n+ * * call {@link #request(OwserverPacket)} to ask for the data, which then\n+ * * uses {@link #write(OwserverPacket)} to get the request to the server and\n+ * * uses {@link #read(boolean)} to get the result\n+ *\n+ *\n+ * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n+ * expected payload is attached. If not, an {@link OwException} is raised.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODY5OA==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628698", "createdAt": "2020-05-13T18:00:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -37,7 +37,22 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * The {@link OwserverConnection} defines the protocol for connections to owservers\n+ * The {@link OwserverConnection} defines the protocol for connections to owservers.\n+ *\n+ *\n+ * Data is requested by using one of the read / write methods. In case of errors, an {@link OwException}\n+ * is thrown. All other exceptions are caught and handled.\n+ *\n+ * The data request methods follow a general pattern:\n+ * * build the appropriate {@link OwserverPacket} for the request\n+ * * call {@link #request(OwserverPacket)} to ask for the data, which then\n+ * * uses {@link #write(OwserverPacket)} to get the request to the server and\n+ * * uses {@link #read(boolean)} to get the result\n+ *\n+ *\n+ * Hereby, the resulting packet is examined on an appropriate return code (!= -1) and whether the\n+ * expected payload is attached. If not, an {@link OwException} is raised.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyODk4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * stop the owserver connection\n          \n          \n            \n                 *\n          \n          \n            \n                 * and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.\n          \n          \n            \n                 * stop the owserver connection and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424628985", "createdAt": "2020-05-13T18:00:56Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -95,16 +111,24 @@ public void setPort(int port) {\n      * start the owserver connection\n      */\n     public void start() {\n+        logger.debug(\"Trying to (re)start OW server connection - previous state: {}\",\n+                owserverConnectionState.toString());\n         connectionErrorCounter = 0;\n-        owserverConnectionState = OwserverConnectionState.CLOSED;\n+        tryingConnectionRecovery = true;\n+        // owserverConnectionState = OwserverConnectionState.CLOSED;\n         boolean success = false;\n         do {\n             success = open();\n-        } while (!success && owserverConnectionState != OwserverConnectionState.FAILED);\n+            if (success && owserverConnectionState != OwserverConnectionState.FAILED) {\n+                tryingConnectionRecovery = false;\n+            }\n+        } while (!success && (owserverConnectionState != OwserverConnectionState.FAILED || tryingConnectionRecovery));\n     }\n \n     /**\n      * stop the owserver connection\n+     *\n+     * and report new {@link OwserverConnectionState} to {@link #thingHandlerCallback}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTEyNQ==", "bodyText": "remove commented code", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424629125", "createdAt": "2020-05-13T18:01:12Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -122,11 +146,11 @@ public void stop() {\n         OwserverPacket returnPacket = request(requestPacket);\n \n         if ((returnPacket.getReturnCode() != -1) && returnPacket.hasPayload()) {\n-            connectionErrorCounter = 0;\n+            // connectionErrorCounter = 0; -> done by request method!!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTMzMg==", "bodyText": "good catch!", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424629332", "createdAt": "2020-05-13T18:01:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -141,11 +165,12 @@ public void stop() {\n     /**\n      * check sensor presence\n      *\n+     * Errors are caught and interpreted as sensor not present.\n+     *\n      * @param path full owfs path to sensor\n      * @return OnOffType, ON=present, OFF=not present\n-     * @throws OwException\n      */\n-    public State checkPresence(String path) throws OwException {\n+    public State checkPresence(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTYyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * In case of issues, the connection is close using {@link #closeOnError()} and false is returned.\n          \n          \n            \n                 * In case of issues, the connection is closed using {@link #closeOnError()} and false is returned.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424629621", "createdAt": "2020-05-13T18:02:08Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -291,18 +323,22 @@ private OwserverPacket request(OwserverPacket requestPacket) throws OwException\n             close();\n         }\n \n+        // Success! Reset error counter.\n         connectionErrorCounter = 0;\n         return returnPacket;\n     }\n \n     /**\n      * open/reopen the connection to the owserver\n      *\n+     * In case of issues, the connection is close using {@link #closeOnError()} and false is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMDM3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Calls {@link #close(boolean)} with reportConnectionState = true.\n          \n          \n            \n                 * close connection and report connection state to callback", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424630376", "createdAt": "2020-05-13T18:03:25Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -340,13 +376,25 @@ private boolean open() {\n     }\n \n     /**\n-     * close the connection to the owserver instance\n+     * Calls {@link #close(boolean)} with reportConnectionState = true.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMDczNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * close the connection to the owserver instance.\n          \n          \n            \n                 * issues during closing are ignored.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param reportConnectionState - report the CLOSED state to\n          \n          \n            \n                 */\n          \n          \n            \n                private void close(boolean reportConnectionState) {\n          \n          \n            \n                /**\n          \n          \n            \n                 * close the connection to the owserver instance.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param reportConnectionState  true, if connection state shall be reported to callback\n          \n          \n            \n                 */\n          \n          \n            \n                private void close(boolean reportConnectionState) {", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424630734", "createdAt": "2020-05-13T18:04:02Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -340,13 +376,25 @@ private boolean open() {\n     }\n \n     /**\n-     * close the connection to the owserver instance\n+     * Calls {@link #close(boolean)} with reportConnectionState = true.\n      */\n     private void close() {\n+        this.close(true);\n+    }\n+\n+    /**\n+     * close the connection to the owserver instance.\n+     * issues during closing are ignored.\n+     *\n+     * @param reportConnectionState - report the CLOSED state to\n+     */\n+    private void close(boolean reportConnectionState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMTg0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * if {@link #CONNECTION_MAX_RETRY} is exceeded, the {@link #owserverConnectionState} is set to FAILED\n          \n          \n            \n                 * and reported to the {@link #thingHandlerCallback}.\n          \n          \n            \n                 * after {@link #CONNECTION_MAX_RETRY} is exceeded, connection state is reported to callback", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424631842", "createdAt": "2020-05-13T18:05:57Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -378,19 +425,29 @@ private void checkConnection() {\n \n     /**\n      * close the connection to the owserver instance after an error occured\n+     * if {@link #CONNECTION_MAX_RETRY} is exceeded, the {@link #owserverConnectionState} is set to FAILED\n+     * and reported to the {@link #thingHandlerCallback}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjE2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *\n          \n          \n            \n                 * If", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632169", "createdAt": "2020-05-13T18:06:31Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjY5Mg==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632692", "createdAt": "2020-05-13T18:07:29Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjgyMA==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632820", "createdAt": "2020-05-13T18:07:44Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+\n+        if (owserverInputStream != null) {\n+            DataInputStream inputStream = owserverInputStream;\n+            try {\n                 returnPacket = new OwserverPacket(inputStream, OwserverPacketType.RETURN);\n-                logger.trace(\"read: {}\", returnPacket);\n-            } else {\n-                logger.debug(\"input stream not available on read\");\n-                closeOnError();\n-            }\n-        } catch (EOFException e) {\n-            // nothing to read\n-        } catch (OwException e) {\n-            checkConnection();\n-            throw e;\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n-                logger.trace(\"timeout - setting error code to -1\");\n-                returnPacket.setPayload(\"timeout\");\n-                returnPacket.setReturnCode(-1);\n-            } else {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjk5MQ==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424632991", "createdAt": "2020-05-13T18:08:00Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+\n+        if (owserverInputStream != null) {\n+            DataInputStream inputStream = owserverInputStream;\n+            try {\n                 returnPacket = new OwserverPacket(inputStream, OwserverPacketType.RETURN);\n-                logger.trace(\"read: {}\", returnPacket);\n-            } else {\n-                logger.debug(\"input stream not available on read\");\n-                closeOnError();\n-            }\n-        } catch (EOFException e) {\n-            // nothing to read\n-        } catch (OwException e) {\n-            checkConnection();\n-            throw e;\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n-                logger.trace(\"timeout - setting error code to -1\");\n-                returnPacket.setPayload(\"timeout\");\n-                returnPacket.setReturnCode(-1);\n-            } else {\n+\n+            } catch (EOFException e) {\n+                // Read suddenly ended ....\n+                logger.warn(\"EOFException: exception while reading packet - {}\", e.getMessage());\n+                checkConnection();\n+                throw new OwException(\"EOFException: exception while reading packet - \" + e.getMessage());\n+            } catch (OwException e) {\n+                // Some other issue\n                 checkConnection();\n-                throw new OwException(\"I/O error: exception while reading packet - \" + e.getMessage());\n+                throw e;\n+            } catch (IOException e) {\n+                // Read time out\n+                if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n+                    logger.trace(\"timeout - setting error code to -1\");\n+                    // will lead to re-try reading in request method!!!\n+                    returnPacket.setPayload(\"timeout\");\n+                    returnPacket.setReturnCode(-1);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 331}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzEzNA==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424633134", "createdAt": "2020-05-13T18:08:13Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If\n+     *\n+     * @param noTimeoutException retry in case of read time outs instead of exiting with an {@link OwException}.\n      * @return the read packet\n      * @throws OwException\n      */\n     private OwserverPacket read(boolean noTimeoutException) throws OwException {\n         OwserverPacket returnPacket = new OwserverPacket(OwserverPacketType.RETURN);\n-        try {\n-            final DataInputStream owserverInputStream = this.owserverInputStream;\n-            if (owserverInputStream != null) {\n-                DataInputStream inputStream = owserverInputStream;\n+        final DataInputStream owserverInputStream = this.owserverInputStream;\n+\n+        if (owserverInputStream != null) {\n+            DataInputStream inputStream = owserverInputStream;\n+            try {\n                 returnPacket = new OwserverPacket(inputStream, OwserverPacketType.RETURN);\n-                logger.trace(\"read: {}\", returnPacket);\n-            } else {\n-                logger.debug(\"input stream not available on read\");\n-                closeOnError();\n-            }\n-        } catch (EOFException e) {\n-            // nothing to read\n-        } catch (OwException e) {\n-            checkConnection();\n-            throw e;\n-        } catch (IOException e) {\n-            if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n-                logger.trace(\"timeout - setting error code to -1\");\n-                returnPacket.setPayload(\"timeout\");\n-                returnPacket.setReturnCode(-1);\n-            } else {\n+\n+            } catch (EOFException e) {\n+                // Read suddenly ended ....\n+                logger.warn(\"EOFException: exception while reading packet - {}\", e.getMessage());\n+                checkConnection();\n+                throw new OwException(\"EOFException: exception while reading packet - \" + e.getMessage());\n+            } catch (OwException e) {\n+                // Some other issue\n                 checkConnection();\n-                throw new OwException(\"I/O error: exception while reading packet - \" + e.getMessage());\n+                throw e;\n+            } catch (IOException e) {\n+                // Read time out\n+                if (e.getMessage().equals(\"Read timed out\") && noTimeoutException) {\n+                    logger.trace(\"timeout - setting error code to -1\");\n+                    // will lead to re-try reading in request method!!!\n+                    returnPacket.setPayload(\"timeout\");\n+                    returnPacket.setReturnCode(-1);\n+\n+                } else {\n+                    // Other I/O issue\n+                    checkConnection();\n+                    throw new OwException(\"I/O error: exception while reading packet - \" + e.getMessage());\n+                }\n             }\n+            logger.trace(\"read: {}\", returnPacket);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzQyNA==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424633424", "createdAt": "2020-05-13T18:08:38Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java", "diffHunk": "@@ -342,5 +343,7 @@ public String toString() {\n \n         return String.format(\"%s, size %d, controlFlags 0x%08x, payload '%s'\", prefix, HEADER_SIZE + payloadLength,\n                 controlFlags, getPayloadString().replaceAll(\"\\\\p{C}\", \"?\"));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzUzMw==", "bodyText": "remove empty line", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424633533", "createdAt": "2020-05-13T18:08:48Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverPacket.java", "diffHunk": "@@ -342,5 +343,7 @@ public String toString() {\n \n         return String.format(\"%s, size %d, controlFlags 0x%08x, payload '%s'\", prefix, HEADER_SIZE + payloadLength,\n                 controlFlags, getPayloadString().replaceAll(\"\\\\p{C}\", \"?\"));\n+\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8601889cb237c13551668ba39e6d3fc50dfb65b", "author": {"user": {"login": "Urmel", "name": "Alexander Behring"}}, "url": "https://github.com/openhab/openhab-addons/commit/e8601889cb237c13551668ba39e6d3fc50dfb65b", "committedDate": "2020-05-13T20:51:52Z", "message": "Apply suggestions from code review\r\n\r\nThe ones that were directly commiteable in github...\n\nCo-authored-by: J-N-K <J-N-K@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjgyOTA5", "url": "https://github.com/openhab/openhab-addons/pull/7621#pullrequestreview-411282909", "createdAt": "2020-05-13T20:40:56Z", "commit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo0MDo1NlrOGVCu7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo0NDo1NVrOGVC2lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxODA2Mw==", "bodyText": "I will also remove this commented code...", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424718063", "createdAt": "2020-05-13T20:40:56Z", "author": {"login": "Urmel"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -95,16 +111,24 @@ public void setPort(int port) {\n      * start the owserver connection\n      */\n     public void start() {\n+        logger.debug(\"Trying to (re)start OW server connection - previous state: {}\",\n+                owserverConnectionState.toString());\n         connectionErrorCounter = 0;\n-        owserverConnectionState = OwserverConnectionState.CLOSED;\n+        tryingConnectionRecovery = true;\n+        // owserverConnectionState = OwserverConnectionState.CLOSED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcxODQzNw==", "bodyText": "Thanks.", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424718437", "createdAt": "2020-05-13T20:41:39Z", "author": {"login": "Urmel"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -141,11 +165,12 @@ public void stop() {\n     /**\n      * check sensor presence\n      *\n+     * Errors are caught and interpreted as sensor not present.\n+     *\n      * @param path full owfs path to sensor\n      * @return OnOffType, ON=present, OFF=not present\n-     * @throws OwException\n      */\n-    public State checkPresence(String path) throws OwException {\n+    public State checkPresence(String path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyOTMzMg=="}, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDAyMA==", "bodyText": "Whoops :)", "url": "https://github.com/openhab/openhab-addons/pull/7621#discussion_r424720020", "createdAt": "2020-05-13T20:44:55Z", "author": {"login": "Urmel"}, "path": "bundles/org.openhab.binding.onewire/src/main/java/org/openhab/binding/onewire/internal/owserver/OwserverConnection.java", "diffHunk": "@@ -419,35 +478,53 @@ private void write(OwserverPacket requestPacket) throws OwException {\n     /**\n      * read from owserver\n      *\n+     * In case of errors (which may also be due to an erroneous path), the connection is checked and potentially closed\n+     * using {@link #checkConnection()}.\n+     *\n+     * If", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjE2OQ=="}, "originalCommit": {"oid": "107145853c94c22639ce8fc4d1c164ee6f38c7f6"}, "originalPosition": 279}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "addd9485ef993fb7a2bcb473877079368307c979", "author": {"user": {"login": "Urmel", "name": "Alexander Behring"}}, "url": "https://github.com/openhab/openhab-addons/commit/addd9485ef993fb7a2bcb473877079368307c979", "committedDate": "2020-05-13T21:04:32Z", "message": "Added further changes due to review by J-N-K.\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb8ca0bda9827be7b462fd0bad0858662eb75c83", "author": {"user": {"login": "Urmel", "name": "Alexander Behring"}}, "url": "https://github.com/openhab/openhab-addons/commit/fb8ca0bda9827be7b462fd0bad0858662eb75c83", "committedDate": "2020-05-13T21:15:31Z", "message": "Merge branch 'openHAB-Bind-Onewire-Fix7149' of https://github.com/Urmel/openhab-addons into openHAB-Bind-Onewire-Fix7149\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b80392a685f779951fe4d8c4818033114ebeef1", "author": {"user": {"login": "Urmel", "name": "Alexander Behring"}}, "url": "https://github.com/openhab/openhab-addons/commit/9b80392a685f779951fe4d8c4818033114ebeef1", "committedDate": "2020-05-14T21:15:41Z", "message": "Fixes for PR7621 Onewire binding...\n* Remove try-catch in OwserverConnectionTest.java\n* Fixed missing new line at EOF (static code analysis issue) in OwserverPacket.java\n* Updated comment in OwserverConnection.java\n\nSigned-off-by: Alexander Behring <alex@behrings.eu>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDg3NzQz", "url": "https://github.com/openhab/openhab-addons/pull/7621#pullrequestreview-413087743", "createdAt": "2020-05-16T16:02:33Z", "commit": {"oid": "9b80392a685f779951fe4d8c4818033114ebeef1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 784, "cost": 1, "resetAt": "2021-10-28T19:08:13Z"}}}