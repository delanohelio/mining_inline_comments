{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTM5NjIw", "number": 8637, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0Mzo0OFrOEp-VMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjozMDowOVrOEqA4pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ4MzA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0Mzo0OFrOHb-D-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxMjoyNDoxMVrOHcHQYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA==", "bodyText": "Is there a reason you are only allowing 15 colors instead of the full 16?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            g2d.setColor(ROOM_COLORS[mapId % 15]);\n          \n          \n            \n                                            g2d.setColor(ROOM_COLORS[mapId % ROOM_COLORS.length]);", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499090424", "createdAt": "2020-10-02T23:43:48Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -160,7 +165,8 @@ private void drawMap(Graphics2D g2d, float scale) {\n                                 g2d.setColor(Color.BLACK);\n                                 break;\n                             case 7:\n-                                g2d.setColor(ROOM_COLORS[Math.round(mapId / 2)]);\n+                                g2d.setColor(ROOM_COLORS[mapId % 15]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTEyNjY1NQ==", "bodyText": "yes, I saw that in quite a few occasions somehow both room 1 & 17 were defined. (without many in between)\nThat made the color the same for both rooms, hence not recognizable as separate rooms anymore.\nso this is little hack to avoid that... double colors can obviously still occur, but this seems to reduce the chance.", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499126655", "createdAt": "2020-10-03T08:00:15Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -160,7 +165,8 @@ private void drawMap(Graphics2D g2d, float scale) {\n                                 g2d.setColor(Color.BLACK);\n                                 break;\n                             case 7:\n-                                g2d.setColor(ROOM_COLORS[Math.round(mapId / 2)]);\n+                                g2d.setColor(ROOM_COLORS[mapId % 15]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA=="}, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0Mzc0MA==", "bodyText": "Can't you just make sure that each room has a unique color?", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499143740", "createdAt": "2020-10-03T12:28:08Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -160,7 +165,8 @@ private void drawMap(Graphics2D g2d, float scale) {\n                                 g2d.setColor(Color.BLACK);\n                                 break;\n                             case 7:\n-                                g2d.setColor(ROOM_COLORS[Math.round(mapId / 2)]);\n+                                g2d.setColor(ROOM_COLORS[mapId % 15]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA=="}, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI0MTA1Ng==", "bodyText": "not easy to find 32 distinct colors while keeping the path, walls, vacuum etc still properly visible.\nThe Xiaomi app also does not do that.. don't know exactly how many they are using, but certainly not 32.\nHence originally I created 16 colors.. Seeing some of the maps from other (I don't have a vacuum that produces these roomcolor maps) I recognized that several ones had overlapping colors, hence the 16 colors and divide rooms/2 was maybe bit of a unlucky choice.", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499241056", "createdAt": "2020-10-04T12:24:11Z", "author": {"login": "marcelrv"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -160,7 +165,8 @@ private void drawMap(Graphics2D g2d, float scale) {\n                                 g2d.setColor(Color.BLACK);\n                                 break;\n                             case 7:\n-                                g2d.setColor(ROOM_COLORS[Math.round(mapId / 2)]);\n+                                g2d.setColor(ROOM_COLORS[mapId % 15]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDQyNA=="}, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ4NTY3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0NTo1M1rOHb-FdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0NTo1M1rOHb-FdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (Integer obstacleType : obstacles.keySet()) {\n          \n          \n            \n                        obstacles.get(obstacleType).forEach(obstacle -> {\n          \n          \n            \n                            final float obstacleX = toXCoord(obstacle[0]) * scale;\n          \n          \n            \n                            final float obstacleY = toYCoord(obstacle[1]) * scale;\n          \n          \n            \n                            drawCircle(g2d, obstacleX, obstacleY, radius, true);\n          \n          \n            \n                            if (scale > 1.0) {\n          \n          \n            \n                                drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n          \n          \n            \n                            }\n          \n          \n            \n                        });\n          \n          \n            \n            \n          \n          \n            \n                    }\n          \n          \n            \n                    for (ArrayList<int[]> value : obstacles.values()) {\n          \n          \n            \n                        value.forEach(obstacle -> {\n          \n          \n            \n                            final float obstacleX = toXCoord(obstacle[0]) * scale;\n          \n          \n            \n                            final float obstacleY = toYCoord(obstacle[1]) * scale;\n          \n          \n            \n                            drawCircle(g2d, obstacleX, obstacleY, radius, true);\n          \n          \n            \n                            if (scale > 1.0) {\n          \n          \n            \n                                drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n          \n          \n            \n                            }\n          \n          \n            \n                        });\n          \n          \n            \n                    }", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499090805", "createdAt": "2020-10-02T23:45:53Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -275,31 +288,58 @@ private void drawRobo(Graphics2D g2d, float scale) {\n         g2d.setColor(COLOR_CHARGER_HALO);\n         final float chargerX = toXCoord(rmfp.getChargerX()) * scale;\n         final float chargerY = toYCoord(rmfp.getChargerY()) * scale;\n-        drawCircle(g2d, chargerX, chargerY, radius);\n+        drawCircle(g2d, chargerX, chargerY, radius, false);\n         drawCenteredImg(g2d, scale / 8, \"charger.png\", chargerX, chargerY);\n         radius = 3 * scale;\n         g2d.setColor(COLOR_ROBO);\n         final float roboX = toXCoord(rmfp.getRoboX()) * scale;\n         final float roboY = toYCoord(rmfp.getRoboY()) * scale;\n-        drawCircle(g2d, roboX, roboY, radius);\n+        drawCircle(g2d, roboX, roboY, radius, false);\n         if (scale > 1.5) {\n             drawCenteredImg(g2d, scale / 15, \"robo.png\", roboX, roboY);\n         }\n     }\n \n-    private void drawCircle(Graphics2D g2d, float x, float y, float radius) {\n-        g2d.draw(new Ellipse2D.Double(x - radius, y - radius, 2.0 * radius, 2.0 * radius));\n+    private void drawObstacles(Graphics2D g2d, float scale) {\n+        float radius = 2 * scale;\n+        Stroke stroke = new BasicStroke(3 * scale);\n+        g2d.setStroke(stroke);\n+        g2d.setColor(Color.MAGENTA);\n+\n+        Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n+        for (Integer obstacleType : obstacles.keySet()) {\n+            obstacles.get(obstacleType).forEach(obstacle -> {\n+                final float obstacleX = toXCoord(obstacle[0]) * scale;\n+                final float obstacleY = toYCoord(obstacle[1]) * scale;\n+                drawCircle(g2d, obstacleX, obstacleY, radius, true);\n+                if (scale > 1.0) {\n+                    drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n+                }\n+            });\n+\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ4NjE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0NjoxNFrOHb-Fvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0NjoxNFrOHb-Fvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MDg3OQ==", "bodyText": "remove blank line", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499090879", "createdAt": "2020-10-02T23:46:14Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -275,31 +288,58 @@ private void drawRobo(Graphics2D g2d, float scale) {\n         g2d.setColor(COLOR_CHARGER_HALO);\n         final float chargerX = toXCoord(rmfp.getChargerX()) * scale;\n         final float chargerY = toYCoord(rmfp.getChargerY()) * scale;\n-        drawCircle(g2d, chargerX, chargerY, radius);\n+        drawCircle(g2d, chargerX, chargerY, radius, false);\n         drawCenteredImg(g2d, scale / 8, \"charger.png\", chargerX, chargerY);\n         radius = 3 * scale;\n         g2d.setColor(COLOR_ROBO);\n         final float roboX = toXCoord(rmfp.getRoboX()) * scale;\n         final float roboY = toYCoord(rmfp.getRoboY()) * scale;\n-        drawCircle(g2d, roboX, roboY, radius);\n+        drawCircle(g2d, roboX, roboY, radius, false);\n         if (scale > 1.5) {\n             drawCenteredImg(g2d, scale / 15, \"robo.png\", roboX, roboY);\n         }\n     }\n \n-    private void drawCircle(Graphics2D g2d, float x, float y, float radius) {\n-        g2d.draw(new Ellipse2D.Double(x - radius, y - radius, 2.0 * radius, 2.0 * radius));\n+    private void drawObstacles(Graphics2D g2d, float scale) {\n+        float radius = 2 * scale;\n+        Stroke stroke = new BasicStroke(3 * scale);\n+        g2d.setStroke(stroke);\n+        g2d.setColor(Color.MAGENTA);\n+\n+        Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n+        for (Integer obstacleType : obstacles.keySet()) {\n+            obstacles.get(obstacleType).forEach(obstacle -> {\n+                final float obstacleX = toXCoord(obstacle[0]) * scale;\n+                final float obstacleY = toYCoord(obstacle[1]) * scale;\n+                drawCircle(g2d, obstacleX, obstacleY, radius, true);\n+                if (scale > 1.0) {\n+                    drawCenteredImg(g2d, scale / 3, \"obstacle-\" + obstacle[2] + \".png\", obstacleX, obstacleY + 15);\n+                }\n+            });\n+\n+        }\n+    }\n+\n+    private void drawCircle(Graphics2D g2d, float x, float y, float radius, boolean fill) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ4ODA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapFileParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0Nzo1OVrOHb-G4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzo0Nzo1OVrOHb-G4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA5MTE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        pw.printf(\"\\tObstacle coordinates:\");\n          \n          \n            \n                        pw.print(\"\\tObstacle coordinates:\");", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499091169", "createdAt": "2020-10-02T23:47:59Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapFileParser.java", "diffHunk": "@@ -309,6 +368,16 @@ private void printAreaDetails(ArrayList<float[]> areas, PrintWriter pw) {\n         });\n     }\n \n+    private void printObstacleDetails(ArrayList<int[]> obstacle, PrintWriter pw) {\n+        obstacle.forEach(area -> {\n+            pw.printf(\"\\tObstacle coordinates:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDkwMTQ5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjozMDowOVrOHcBUzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wM1QxMjozMDowOVrOHcBUzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE0Mzg4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n          \n          \n            \n                    for (Integer obstacleType : obstacles.keySet()) {\n          \n          \n            \n                        obstacles.get(obstacleType).forEach(obstacle -> {\n          \n          \n            \n                    Map<Integer, ArrayList<int[]>> obstacleMap = rmfp.getObstacles();\n          \n          \n            \n                    for (ArrayList<int[]> obstacles : obstacleMap.values()) {\n          \n          \n            \n                        obstacles.forEach(obstacle -> {", "url": "https://github.com/openhab/openhab-addons/pull/8637#discussion_r499143886", "createdAt": "2020-10-03T12:30:09Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.binding.miio/src/main/java/org/openhab/binding/miio/internal/robot/RRMapDraw.java", "diffHunk": "@@ -275,31 +288,58 @@ private void drawRobo(Graphics2D g2d, float scale) {\n         g2d.setColor(COLOR_CHARGER_HALO);\n         final float chargerX = toXCoord(rmfp.getChargerX()) * scale;\n         final float chargerY = toYCoord(rmfp.getChargerY()) * scale;\n-        drawCircle(g2d, chargerX, chargerY, radius);\n+        drawCircle(g2d, chargerX, chargerY, radius, false);\n         drawCenteredImg(g2d, scale / 8, \"charger.png\", chargerX, chargerY);\n         radius = 3 * scale;\n         g2d.setColor(COLOR_ROBO);\n         final float roboX = toXCoord(rmfp.getRoboX()) * scale;\n         final float roboY = toYCoord(rmfp.getRoboY()) * scale;\n-        drawCircle(g2d, roboX, roboY, radius);\n+        drawCircle(g2d, roboX, roboY, radius, false);\n         if (scale > 1.5) {\n             drawCenteredImg(g2d, scale / 15, \"robo.png\", roboX, roboY);\n         }\n     }\n \n-    private void drawCircle(Graphics2D g2d, float x, float y, float radius) {\n-        g2d.draw(new Ellipse2D.Double(x - radius, y - radius, 2.0 * radius, 2.0 * radius));\n+    private void drawObstacles(Graphics2D g2d, float scale) {\n+        float radius = 2 * scale;\n+        Stroke stroke = new BasicStroke(3 * scale);\n+        g2d.setStroke(stroke);\n+        g2d.setColor(Color.MAGENTA);\n+\n+        Map<Integer, ArrayList<int[]>> obstacles = rmfp.getObstacles();\n+        for (Integer obstacleType : obstacles.keySet()) {\n+            obstacles.get(obstacleType).forEach(obstacle -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f101c232716bf1b30a87d1cab7d490c2c64564"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4187, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}