{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MDY4NzYw", "number": 276, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxMzozMzozNlrODaq6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxMzozMzozNlrODaq6mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjkyNjk2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/jellyfin/androidtv/details/DetailsActivity.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxMzozMzozNlrOFhwAHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNjoyMjo0OFrOFhwgQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzc4OQ==", "bodyText": "I would prefer it like this, or is there a reason the visitor pattern would be better in this case?\nfragment = when(lifted) {\n\tis Episode -> EpisodeDetailsFragment(lifted)\n\telse -> TODO()\n}", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276#discussion_r370933789", "createdAt": "2020-01-25T13:33:36Z", "author": {"login": "nielsvanvelzen"}, "path": "app/src/main/java/org/jellyfin/androidtv/details/DetailsActivity.kt", "diffHunk": "@@ -33,14 +29,13 @@ class DetailsActivity : FragmentActivity() {\n \n \t\tGlobalScope.launch(Dispatchers.Main) {\n \t\t\tval baseItem = getBaseItemDtoForID(id) ?: return@launch\n+\t\t\tval lifted = baseItem.liftToNewFormat()\n \n-\t\t\tfragment = when (baseItem.baseItemType!!) {\n-\t\t\t\tBaseItemType.Episode -> {\n-\t\t\t\t\tval episode = baseItem.asEpisode()\n-\t\t\t\t\tEpisodeDetailsFragment(episode)\n+\t\t\tlifted.acceptVisitor(object : IBaseItemVisitor {\n+\t\t\t\toverride fun visit(item: Episode) {\n+\t\t\t\t\tfragment = EpisodeDetailsFragment(item)\n \t\t\t\t}\n-\t\t\t\telse -> TODO()\n-\t\t\t}\n+\t\t\t})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b68f62708bd5c117da548b2f91a6442e2e826928"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0MTU0OQ==", "bodyText": "It forces you to notice where you missed some changes when a new Item type is introduced, as the interface changes and you have to adjust it everywhere.", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276#discussion_r370941549", "createdAt": "2020-01-25T16:14:08Z", "author": {"login": "AndreasGB"}, "path": "app/src/main/java/org/jellyfin/androidtv/details/DetailsActivity.kt", "diffHunk": "@@ -33,14 +29,13 @@ class DetailsActivity : FragmentActivity() {\n \n \t\tGlobalScope.launch(Dispatchers.Main) {\n \t\t\tval baseItem = getBaseItemDtoForID(id) ?: return@launch\n+\t\t\tval lifted = baseItem.liftToNewFormat()\n \n-\t\t\tfragment = when (baseItem.baseItemType!!) {\n-\t\t\t\tBaseItemType.Episode -> {\n-\t\t\t\t\tval episode = baseItem.asEpisode()\n-\t\t\t\t\tEpisodeDetailsFragment(episode)\n+\t\t\tlifted.acceptVisitor(object : IBaseItemVisitor {\n+\t\t\t\toverride fun visit(item: Episode) {\n+\t\t\t\t\tfragment = EpisodeDetailsFragment(item)\n \t\t\t\t}\n-\t\t\t\telse -> TODO()\n-\t\t\t}\n+\t\t\t})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzc4OQ=="}, "originalCommit": {"oid": "b68f62708bd5c117da548b2f91a6442e2e826928"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0MjAxOQ==", "bodyText": "Did some quick searching and it seems like using sealed classes is a way to do it \"the kotlin way\". It would look basically the same as my example except for the fact that there is no \"else\" block.\n\nhttps://kotlinlang.org/docs/reference/sealed-classes.html\nhttps://stackoverflow.com/questions/33602705/best-way-to-implement-visitor-pattern-in-kotlin", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/276#discussion_r370942019", "createdAt": "2020-01-25T16:22:48Z", "author": {"login": "nielsvanvelzen"}, "path": "app/src/main/java/org/jellyfin/androidtv/details/DetailsActivity.kt", "diffHunk": "@@ -33,14 +29,13 @@ class DetailsActivity : FragmentActivity() {\n \n \t\tGlobalScope.launch(Dispatchers.Main) {\n \t\t\tval baseItem = getBaseItemDtoForID(id) ?: return@launch\n+\t\t\tval lifted = baseItem.liftToNewFormat()\n \n-\t\t\tfragment = when (baseItem.baseItemType!!) {\n-\t\t\t\tBaseItemType.Episode -> {\n-\t\t\t\t\tval episode = baseItem.asEpisode()\n-\t\t\t\t\tEpisodeDetailsFragment(episode)\n+\t\t\tlifted.acceptVisitor(object : IBaseItemVisitor {\n+\t\t\t\toverride fun visit(item: Episode) {\n+\t\t\t\t\tfragment = EpisodeDetailsFragment(item)\n \t\t\t\t}\n-\t\t\t\telse -> TODO()\n-\t\t\t}\n+\t\t\t})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMzc4OQ=="}, "originalCommit": {"oid": "b68f62708bd5c117da548b2f91a6442e2e826928"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1126, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}