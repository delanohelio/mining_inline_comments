{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MDg3OTkx", "number": 644, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxODowNVrOFICcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxODowNVrOFICcKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTcyOTA3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/jellyfin/androidtv/auth/AuthenticationRepository.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxODowNVrOIJvt7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNjoxODowNVrOIJvt7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA4OTkwMg==", "bodyText": "We should suppress these warnings.", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/644#discussion_r547089902", "createdAt": "2020-12-22T06:18:05Z", "author": {"login": "thornbill"}, "path": "app/src/main/java/org/jellyfin/androidtv/auth/AuthenticationRepository.kt", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.jellyfin.androidtv.auth\n+\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.emitAll\n+import kotlinx.coroutines.flow.flow\n+import org.jellyfin.androidtv.JellyfinApplication\n+import org.jellyfin.androidtv.auth.model.*\n+import org.jellyfin.androidtv.util.apiclient.callApi\n+import org.jellyfin.androidtv.util.toUUID\n+import org.jellyfin.apiclient.Jellyfin\n+import org.jellyfin.apiclient.interaction.ApiClient\n+import org.jellyfin.apiclient.interaction.device.IDevice\n+import org.jellyfin.apiclient.model.apiclient.ServerInfo\n+import org.jellyfin.apiclient.model.dto.UserDto\n+import org.jellyfin.apiclient.model.users.AuthenticationResult\n+import timber.log.Timber\n+import java.util.*\n+\n+class AuthenticationRepository(\n+\tprivate val application: JellyfinApplication,\n+\tprivate val jellyfin: Jellyfin,\n+\tprivate val apiClient: ApiClient,\n+\tprivate val device: IDevice,\n+\tprivate val accountManagerHelper: AccountManagerHelper,\n+\tprivate val authenticationStore: AuthenticationStore,\n+) {\n+\tfun getServers() = authenticationStore.getServers().map { (id, info) ->\n+\t\tServer(id, info.name, info.address, Date(info.lastUsed))\n+\t}\n+\n+\tfun getUsers(server: UUID): List<PrivateUser>? = authenticationStore.getUsers(server)?.mapNotNull { (userId, userInfo) ->\n+\t\taccountManagerHelper.getAccount(userId)?.let { authInfo ->\n+\t\t\tPrivateUser(userId, authInfo.server, userInfo.name, authInfo.accessToken)\n+\t\t}\n+\t}\n+\n+\tfun saveServer(id: UUID, name: String, address: String) {\n+\t\tval current = authenticationStore.getServer(id)\n+\n+\t\tif (current != null)\n+\t\t\tauthenticationStore.putServer(id, current.copy(name = name, address = address))\n+\t\telse\n+\t\t\tauthenticationStore.putServer(id, AuthenticationStoreServer(name, address))\n+\t}\n+\n+\t/**\n+\t * Set the active session to the information in [user] and [server].\n+\t * Connects to the server and requests the info of the currently authenticated user.\n+\t *\n+\t * @return Whether the user information can be retrieved\n+\t */\n+\tprivate suspend fun setActiveSession(user: User, server: Server): Boolean {\n+\t\tapiClient.SetAuthenticationInfo(user.accessToken, user.id.toString())\n+\t\tapiClient.EnableAutomaticNetworking(ServerInfo().apply {\n+\t\t\tid = server.id.toString()\n+\t\t\tname = server.name\n+\t\t\taddress = server.address\n+\t\t\tuserId = user.id.toString()\n+\t\t\taccessToken = user.accessToken\n+\t\t})\n+\n+\t\ttry {\n+\t\t\tval userDto = callApi<UserDto?> { callback -> apiClient.GetUserAsync(user.id.toString(), callback) }\n+\t\t\tif (userDto != null) {\n+\t\t\t\tapplication.currentUser = userDto\n+\t\t\t\treturn true\n+\t\t\t}\n+\t\t} catch (err: Exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc8428b0bf05bfb7370bdf4c7a271b2251a37a45"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 995, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}