{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczODU0OTg5", "number": 332, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MToxOFrODfTvOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MToxOFrODfTvOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU1ODM0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/jellyfin/androidtv/presentation/MultiBadgeImageCardView.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0MToxOFrOFo8E8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjowODoyOFrOFpAVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MTY2NA==", "bodyText": "Does this function properly convert display pixels to pixels?", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/332#discussion_r378471664", "createdAt": "2020-02-12T19:41:18Z", "author": {"login": "nielsvanvelzen"}, "path": "app/src/main/java/org/jellyfin/androidtv/presentation/MultiBadgeImageCardView.kt", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.jellyfin.androidtv.presentation\n+\n+import android.animation.ObjectAnimator\n+import android.content.Context\n+import android.graphics.drawable.Drawable\n+import android.util.AttributeSet\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.leanback.widget.BaseCardView\n+import kotlinx.android.synthetic.main.multi_badge_image_card_view.view.*\n+import org.jellyfin.androidtv.R\n+\n+class MultiBadgeImageCardView(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : BaseCardView(context, attrs, defStyleAttr) {\n+\tprivate val mFadeInAnimator: ObjectAnimator\n+\tprivate var mAttachedToWindow: Boolean = false\n+\n+\tvar mainImageDrawable: Drawable?\n+\t\tget() = main_image.drawable\n+\t\tset(value) { setMainImage(value, true) }\n+\n+\tvar titleText: CharSequence\n+\t\tget() = title_text.text\n+\t\tset(value) { title_text.text = value }\n+\n+\tvar contentText: CharSequence?\n+\t\tget() = content_text.text\n+\t\tset(value) { content_text.text = value }\n+\n+\tval badgeContainers: Map<BadgeLocation, ViewGroup>\n+\n+\tconstructor(context: Context) : this(context, null)\n+\tconstructor(context: Context, attrs: AttributeSet?) : this(context, attrs, R.attr.imageCardViewStyle)\n+\n+\tinit {\n+\t    isFocusable = true\n+\t\tisFocusableInTouchMode = true\n+\n+\t\tval inflater = LayoutInflater.from(context)\n+\t\tinflater.inflate(R.layout.multi_badge_image_card_view, this)\n+\t\tval cardAttrs = context.obtainStyledAttributes(attrs, R.styleable.lbImageCardView, defStyleAttr, R.style.Widget_Leanback_ImageCardView)\n+\n+\t\t// TODO ViewCompat.saveAttributeDataForStyleable call that is here in the original\n+\n+\n+\t\tmFadeInAnimator = ObjectAnimator.ofFloat(main_image, View.ALPHA, 1f).apply {\n+\t\t\tduration = main_image.resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\n+\t\t}\n+\n+\t\tval backgroundDrawable: Drawable? = cardAttrs.getDrawable(R.styleable.lbImageCardView_infoAreaBackground)\n+\t\tif (backgroundDrawable != null) {\n+\t\t\tbackground = backgroundDrawable\n+\t\t}\n+\n+\t\tbadgeContainers = mapOf<BadgeLocation, ViewGroup>(\n+\t\t\tBadgeLocation.TOP_LEFT to badge_top_left,\n+\t\t\tBadgeLocation.TOP_RIGHT to badge_top_right,\n+\t\t\tBadgeLocation.BOTTOM_LEFT to badge_bottom_left,\n+\t\t\tBadgeLocation.BOTTOM_RIGHT to badge_bottom_right,\n+\t\t\tBadgeLocation.CONTENT_LEFT to content_badge_left,\n+\t\t\tBadgeLocation.CONTENT_RIGHT to content_badge_right\n+\t\t)\n+\n+\t\tcardAttrs.recycle()\n+\t}\n+\n+\tfun setBadge(badge: View?, badgeLocation: BadgeLocation) {\n+\t\tval badgeContainer = badgeContainers.getValue(badgeLocation)\n+\t\tbadgeContainer.removeAllViews()\n+\n+\t\tif (badge != null) {\n+\t\t\tbadgeContainer.apply {\n+\t\t\t\tvisibility = ViewGroup.VISIBLE\n+\t\t\t\taddView(badge)\n+\t\t\t}\n+\t\t} else {\n+\t\t\tbadgeContainer.apply {\n+\t\t\t\tvisibility = ViewGroup.GONE\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun setMainImage(drawable: Drawable?, fade: Boolean) {\n+\t\tmain_image.setImageDrawable(drawable)\n+\n+\t\tif (drawable == null) {\n+\t\t\tmFadeInAnimator.cancel()\n+\t\t\tmain_image.apply {\n+\t\t\t\talpha = 1f\n+\t\t\t\tvisibility = View.INVISIBLE\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (fade) {\n+\t\t\t\tfadeIn()\n+\t\t\t} else {\n+\t\t\t\tmFadeInAnimator.cancel()\n+\t\t\t\tmain_image.alpha = 1f\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun setMainImageDimensions(width: Int, height: Int) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b048f887749bc29236beefb8c06aa707b72e7194"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0MTQxMQ==", "bodyText": "No, it takes raw pixels atm, should I move to dp?", "url": "https://github.com/jellyfin/jellyfin-androidtv/pull/332#discussion_r378541411", "createdAt": "2020-02-12T22:08:28Z", "author": {"login": "AndreasGB"}, "path": "app/src/main/java/org/jellyfin/androidtv/presentation/MultiBadgeImageCardView.kt", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.jellyfin.androidtv.presentation\n+\n+import android.animation.ObjectAnimator\n+import android.content.Context\n+import android.graphics.drawable.Drawable\n+import android.util.AttributeSet\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.leanback.widget.BaseCardView\n+import kotlinx.android.synthetic.main.multi_badge_image_card_view.view.*\n+import org.jellyfin.androidtv.R\n+\n+class MultiBadgeImageCardView(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : BaseCardView(context, attrs, defStyleAttr) {\n+\tprivate val mFadeInAnimator: ObjectAnimator\n+\tprivate var mAttachedToWindow: Boolean = false\n+\n+\tvar mainImageDrawable: Drawable?\n+\t\tget() = main_image.drawable\n+\t\tset(value) { setMainImage(value, true) }\n+\n+\tvar titleText: CharSequence\n+\t\tget() = title_text.text\n+\t\tset(value) { title_text.text = value }\n+\n+\tvar contentText: CharSequence?\n+\t\tget() = content_text.text\n+\t\tset(value) { content_text.text = value }\n+\n+\tval badgeContainers: Map<BadgeLocation, ViewGroup>\n+\n+\tconstructor(context: Context) : this(context, null)\n+\tconstructor(context: Context, attrs: AttributeSet?) : this(context, attrs, R.attr.imageCardViewStyle)\n+\n+\tinit {\n+\t    isFocusable = true\n+\t\tisFocusableInTouchMode = true\n+\n+\t\tval inflater = LayoutInflater.from(context)\n+\t\tinflater.inflate(R.layout.multi_badge_image_card_view, this)\n+\t\tval cardAttrs = context.obtainStyledAttributes(attrs, R.styleable.lbImageCardView, defStyleAttr, R.style.Widget_Leanback_ImageCardView)\n+\n+\t\t// TODO ViewCompat.saveAttributeDataForStyleable call that is here in the original\n+\n+\n+\t\tmFadeInAnimator = ObjectAnimator.ofFloat(main_image, View.ALPHA, 1f).apply {\n+\t\t\tduration = main_image.resources.getInteger(android.R.integer.config_shortAnimTime).toLong()\n+\t\t}\n+\n+\t\tval backgroundDrawable: Drawable? = cardAttrs.getDrawable(R.styleable.lbImageCardView_infoAreaBackground)\n+\t\tif (backgroundDrawable != null) {\n+\t\t\tbackground = backgroundDrawable\n+\t\t}\n+\n+\t\tbadgeContainers = mapOf<BadgeLocation, ViewGroup>(\n+\t\t\tBadgeLocation.TOP_LEFT to badge_top_left,\n+\t\t\tBadgeLocation.TOP_RIGHT to badge_top_right,\n+\t\t\tBadgeLocation.BOTTOM_LEFT to badge_bottom_left,\n+\t\t\tBadgeLocation.BOTTOM_RIGHT to badge_bottom_right,\n+\t\t\tBadgeLocation.CONTENT_LEFT to content_badge_left,\n+\t\t\tBadgeLocation.CONTENT_RIGHT to content_badge_right\n+\t\t)\n+\n+\t\tcardAttrs.recycle()\n+\t}\n+\n+\tfun setBadge(badge: View?, badgeLocation: BadgeLocation) {\n+\t\tval badgeContainer = badgeContainers.getValue(badgeLocation)\n+\t\tbadgeContainer.removeAllViews()\n+\n+\t\tif (badge != null) {\n+\t\t\tbadgeContainer.apply {\n+\t\t\t\tvisibility = ViewGroup.VISIBLE\n+\t\t\t\taddView(badge)\n+\t\t\t}\n+\t\t} else {\n+\t\t\tbadgeContainer.apply {\n+\t\t\t\tvisibility = ViewGroup.GONE\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun setMainImage(drawable: Drawable?, fade: Boolean) {\n+\t\tmain_image.setImageDrawable(drawable)\n+\n+\t\tif (drawable == null) {\n+\t\t\tmFadeInAnimator.cancel()\n+\t\t\tmain_image.apply {\n+\t\t\t\talpha = 1f\n+\t\t\t\tvisibility = View.INVISIBLE\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (fade) {\n+\t\t\t\tfadeIn()\n+\t\t\t} else {\n+\t\t\t\tmFadeInAnimator.cancel()\n+\t\t\t\tmain_image.alpha = 1f\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfun setMainImageDimensions(width: Int, height: Int) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MTY2NA=="}, "originalCommit": {"oid": "b048f887749bc29236beefb8c06aa707b72e7194"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1016, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}