{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDgwNDA4", "number": 8451, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDozNzoyOFrOEMhOcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozOTozMVrOEMi66A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTYyNzM5OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/MessagesAdapterES7.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDozNzoyOFrOGurOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDozNzoyOFrOGurOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5NTg2NQ==", "bodyText": "IOException is never thrown here", "url": "https://github.com/Graylog2/graylog2-server/pull/8451#discussion_r451595865", "createdAt": "2020-07-08T14:37:28Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/MessagesAdapterES7.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.codahale.metrics.Meter;\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.Iterables;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.bulk.BulkItemResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.bulk.BulkRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.bulk.BulkResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.get.GetRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.get.GetResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.index.IndexRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.indices.AnalyzeRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.indices.AnalyzeResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.rest.RestStatus;\n+import org.graylog2.indexer.messages.ChunkedBulkIndexer;\n+import org.graylog2.indexer.messages.DocumentNotFoundException;\n+import org.graylog2.indexer.messages.IndexingRequest;\n+import org.graylog2.indexer.messages.Messages;\n+import org.graylog2.indexer.messages.MessagesAdapter;\n+import org.graylog2.indexer.results.ResultMessage;\n+import org.graylog2.plugin.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.codahale.metrics.MetricRegistry.name;\n+\n+public class MessagesAdapterES7 implements MessagesAdapter {\n+    private static final Logger LOG = LoggerFactory.getLogger(MessagesAdapterES7.class);\n+    static final String INDEX_BLOCK_ERROR = \"cluster_block_exception\";\n+    static final String MAPPER_PARSING_EXCEPTION = \"mapper_parsing_exception\";\n+    static final String INDEX_BLOCK_REASON = \"blocked by: [TOO_MANY_REQUESTS/12/index read-only / allow delete (api)\";\n+\n+    private final ElasticsearchClient client;\n+    private final Meter invalidTimestampMeter;\n+    private final ChunkedBulkIndexer chunkedBulkIndexer;\n+\n+    @Inject\n+    public MessagesAdapterES7(ElasticsearchClient elasticsearchClient, MetricRegistry metricRegistry, ChunkedBulkIndexer chunkedBulkIndexer) {\n+        this.client = elasticsearchClient;\n+        this.invalidTimestampMeter = metricRegistry.meter(name(Messages.class, \"invalid-timestamps\"));\n+        this.chunkedBulkIndexer = chunkedBulkIndexer;\n+    }\n+\n+    @Override\n+    public ResultMessage get(String messageId, String index) throws IOException, DocumentNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e20a6c3f5229f806e44aa97814e7e8814fcc0b0"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTYyODQ2OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/MessagesAdapterES7.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDozNzo0NFrOGurPGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDozNzo0NFrOGurPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU5NjA1Nw==", "bodyText": "IOException is never thrown here", "url": "https://github.com/Graylog2/graylog2-server/pull/8451#discussion_r451596057", "createdAt": "2020-07-08T14:37:44Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/MessagesAdapterES7.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.codahale.metrics.Meter;\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.Iterables;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.bulk.BulkItemResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.bulk.BulkRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.bulk.BulkResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.get.GetRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.get.GetResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.index.IndexRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.indices.AnalyzeRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.indices.AnalyzeResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.rest.RestStatus;\n+import org.graylog2.indexer.messages.ChunkedBulkIndexer;\n+import org.graylog2.indexer.messages.DocumentNotFoundException;\n+import org.graylog2.indexer.messages.IndexingRequest;\n+import org.graylog2.indexer.messages.Messages;\n+import org.graylog2.indexer.messages.MessagesAdapter;\n+import org.graylog2.indexer.results.ResultMessage;\n+import org.graylog2.plugin.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static com.codahale.metrics.MetricRegistry.name;\n+\n+public class MessagesAdapterES7 implements MessagesAdapter {\n+    private static final Logger LOG = LoggerFactory.getLogger(MessagesAdapterES7.class);\n+    static final String INDEX_BLOCK_ERROR = \"cluster_block_exception\";\n+    static final String MAPPER_PARSING_EXCEPTION = \"mapper_parsing_exception\";\n+    static final String INDEX_BLOCK_REASON = \"blocked by: [TOO_MANY_REQUESTS/12/index read-only / allow delete (api)\";\n+\n+    private final ElasticsearchClient client;\n+    private final Meter invalidTimestampMeter;\n+    private final ChunkedBulkIndexer chunkedBulkIndexer;\n+\n+    @Inject\n+    public MessagesAdapterES7(ElasticsearchClient elasticsearchClient, MetricRegistry metricRegistry, ChunkedBulkIndexer chunkedBulkIndexer) {\n+        this.client = elasticsearchClient;\n+        this.invalidTimestampMeter = metricRegistry.meter(name(Messages.class, \"invalid-timestamps\"));\n+        this.chunkedBulkIndexer = chunkedBulkIndexer;\n+    }\n+\n+    @Override\n+    public ResultMessage get(String messageId, String index) throws IOException, DocumentNotFoundException {\n+        final GetRequest getRequest = new GetRequest(index, messageId);\n+\n+        final GetResponse result = this.client.execute((c, requestOptions) -> c.get(getRequest, requestOptions));\n+\n+        if (!result.isExists()) {\n+            throw new DocumentNotFoundException(index, messageId);\n+        }\n+\n+        return ResultMessage.parseFromSource(messageId, index, result.getSource());\n+    }\n+\n+    @Override\n+    public List<String> analyze(String toAnalyze, String index, String analyzer) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e20a6c3f5229f806e44aa97814e7e8814fcc0b0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTY5MzM2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDo1MjowMFrOGur4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDo1MjowMFrOGur4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTYwNjU2Nw==", "bodyText": "Let's rename the variable to indexingErrors too.", "url": "https://github.com/Graylog2/graylog2-server/pull/8451#discussion_r451606567", "createdAt": "2020-07-08T14:52:00Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -77,17 +122,87 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n                 .map(entry -> IndexingRequest.create(entry.getKey(), entry.getValue()))\n                 .collect(Collectors.toList());\n \n-        final List<IndexFailure> indexFailures = messagesAdapter.bulkIndex(indexingRequestList);\n+        final List<IndexingError> indexFailures = runBulkRequest(indexingRequestList, messageList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e20a6c3f5229f806e44aa97814e7e8814fcc0b0"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTkwNTA0OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/testing/FixtureImporterES6.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNTozOTozMVrOGut-Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODowOTo1NlrOGvGW_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MDg5NA==", "bodyText": "JestUtils#execute will always throw an exception, if result.isSucceeded() == false\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final JestResult result = JestUtils.execute(jestClient, request.build(), () -> \"Unable to check if index exists: \" + indexName);\n          \n          \n            \n            \n          \n          \n            \n                    return result.isSucceeded();\n          \n          \n            \n                     try {\n          \n          \n            \n                        final JestResult result = jestClient.execute(request.build());\n          \n          \n            \n                        return result.isSucceeded();\n          \n          \n            \n                    } catch (IOException e) {\n          \n          \n            \n                        throw new RuntimeException(\"Unable to check if index exists: \" + indexName, e);\n          \n          \n            \n                    }", "url": "https://github.com/Graylog2/graylog2-server/pull/8451#discussion_r451640894", "createdAt": "2020-07-08T15:39:31Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/testing/FixtureImporterES6.java", "diffHunk": "@@ -144,4 +159,16 @@ private void importNode(JsonNode root) throws IOException {\n             throw new IllegalStateException(sb.toString());\n         }\n     }\n+\n+    private boolean indexExists(String indexName) {\n+        final IndicesExists.Builder request = new IndicesExists.Builder(indexName);\n+        final JestResult result = JestUtils.execute(jestClient, request.build(), () -> \"Unable to check if index exists: \" + indexName);\n+\n+        return result.isSucceeded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e81bfc3523da8c3ed0521e4bf876f72af5306db4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0MDQ0NA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8451#discussion_r452040444", "createdAt": "2020-07-09T08:09:56Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch6/src/test/java/org/graylog/storage/elasticsearch6/testing/FixtureImporterES6.java", "diffHunk": "@@ -144,4 +159,16 @@ private void importNode(JsonNode root) throws IOException {\n             throw new IllegalStateException(sb.toString());\n         }\n     }\n+\n+    private boolean indexExists(String indexName) {\n+        final IndicesExists.Builder request = new IndicesExists.Builder(indexName);\n+        final JestResult result = JestUtils.execute(jestClient, request.build(), () -> \"Unable to check if index exists: \" + indexName);\n+\n+        return result.isSucceeded();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY0MDg5NA=="}, "originalCommit": {"oid": "e81bfc3523da8c3ed0521e4bf876f72af5306db4"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4217, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}