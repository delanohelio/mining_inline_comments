{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTE3Nzkx", "number": 7671, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo0Nzo1MFrODoVs5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDozMDo0MVrODoXAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjI1MTkxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/stores/isEqualForSearch.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzo0Nzo1MFrOF204yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTowMDo0OVrOF24USw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzMzkzMA==", "bodyText": "You could use isDeepEqual() for the redundant logic.", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393033930", "createdAt": "2020-03-16T13:47:50Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/stores/isEqualForSearch.js", "diffHunk": "@@ -0,0 +1,24 @@\n+// @flow strict\n+import { isEqualWith, isFunction } from 'lodash';\n+\n+const hasFn = (obj, fn) => (obj && obj[fn] && isFunction(obj[fn]));\n+const hasEquals = obj => hasFn(obj, 'equals');\n+const hasEqualsForSearch = obj => hasFn(obj, 'equalsForSearch');\n+const isImmutable = obj => hasFn(obj, 'toJS');\n+\n+const _isEqual = (first, second) => {\n+  if (hasEqualsForSearch(first)) {\n+    return first.equalsForSearch(second);\n+  }\n+  if (isImmutable(first) && isImmutable(second)) {\n+    return isEqualWith(first.toJS(), second.toJS(), _isEqual);\n+  }\n+  if (hasEquals(first)) {\n+    return first.equals(second);\n+  }\n+  return undefined;\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5MDEyMw==", "bodyText": "Just saw we can't reuse some of the logic in isDeepEqual.js, please ignore this comment.", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393090123", "createdAt": "2020-03-16T15:00:49Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/stores/isEqualForSearch.js", "diffHunk": "@@ -0,0 +1,24 @@\n+// @flow strict\n+import { isEqualWith, isFunction } from 'lodash';\n+\n+const hasFn = (obj, fn) => (obj && obj[fn] && isFunction(obj[fn]));\n+const hasEquals = obj => hasFn(obj, 'equals');\n+const hasEqualsForSearch = obj => hasFn(obj, 'equalsForSearch');\n+const isImmutable = obj => hasFn(obj, 'toJS');\n+\n+const _isEqual = (first, second) => {\n+  if (hasEqualsForSearch(first)) {\n+    return first.equalsForSearch(second);\n+  }\n+  if (isImmutable(first) && isImmutable(second)) {\n+    return isEqualWith(first.toJS(), second.toJS(), _isEqual);\n+  }\n+  if (hasEquals(first)) {\n+    return first.equals(second);\n+  }\n+  return undefined;\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAzMzkzMA=="}, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjMyMDUyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/stores/connect.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDowNDoxMVrOF21j5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNToyMTo1MlrOF25NtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NDk2Ng==", "bodyText": "I am currently seeing the following warning, when I open any search page:\nConnectStoresWrapper[Widget] stores=view: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop.", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393044966", "createdAt": "2020-03-16T14:04:11Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/stores/connect.jsx", "diffHunk": "@@ -27,57 +38,77 @@ import { isFunction } from 'lodash';\n  * connect(SamplesComponent, { samples: SamplesStore }, ({ samples }) => ({ samples: samples.filter(sample => sample.id === 4) }))\n  *\n  */\n-export default (Component, stores, mapProps = props => props) => {\n+\n+function connect<Stores: Object, Props, ComponentType: React.ComponentType<Props>, MappedProps>(\n+  Component: ComponentType,\n+  stores: Stores,\n+  mapProps: (ResultType<Stores>) => MappedProps = props => props,\n+): React.ComponentType<$Diff<$Call<ExtractComponentProps, ComponentType>, MappedProps>> {\n   const wrappedComponentName = Component.displayName || Component.name || 'Unknown/Anonymous';\n-  class ConnectStoresWrapper extends React.Component {\n-    constructor(props) {\n-      super(props);\n+  class ConnectStoresWrapper extends React.Component<$Diff<$Call<ExtractComponentProps, ComponentType>, MappedProps>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwNDgyMA==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393104820", "createdAt": "2020-03-16T15:21:52Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/stores/connect.jsx", "diffHunk": "@@ -27,57 +38,77 @@ import { isFunction } from 'lodash';\n  * connect(SamplesComponent, { samples: SamplesStore }, ({ samples }) => ({ samples: samples.filter(sample => sample.id === 4) }))\n  *\n  */\n-export default (Component, stores, mapProps = props => props) => {\n+\n+function connect<Stores: Object, Props, ComponentType: React.ComponentType<Props>, MappedProps>(\n+  Component: ComponentType,\n+  stores: Stores,\n+  mapProps: (ResultType<Stores>) => MappedProps = props => props,\n+): React.ComponentType<$Diff<$Call<ExtractComponentProps, ComponentType>, MappedProps>> {\n   const wrappedComponentName = Component.displayName || Component.name || 'Unknown/Anonymous';\n-  class ConnectStoresWrapper extends React.Component {\n-    constructor(props) {\n-      super(props);\n+  class ConnectStoresWrapper extends React.Component<$Diff<$Call<ExtractComponentProps, ComponentType>, MappedProps>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA0NDk2Ng=="}, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjQ2NjYyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/aggregationbuilder/AggregationBuilder.jsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNDozMDo0MVrOF23AJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNTo0MjoxOFrOF26HCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2ODU4Mw==", "bodyText": "Due to the existing prop type warning we are receiving for some visualizations, I found out the component name gets lost here. Currently the warning looks like:\nWarning: Failed prop type: Invalid prop `data` of type `object` supplied to `<<anonymous>>`, expected an array.\n\nWhich means we need to add something like LineVisualization.displayName = 'LineVisualization' to every visualization, or we add an argument to this function makeVisualization(component, displayName, type) and add it here with visualizationComponent.displayName = displayName.\nThe first solution looks more familiar because the displayName clearly belongs to the component, but I prefer the second approach, because we only need to add the displayName when we use makeVisualization() and flow will remind us, whenever we could forget about adding the attribute.", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393068583", "createdAt": "2020-03-16T14:30:41Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/aggregationbuilder/AggregationBuilder.jsx", "diffHunk": "@@ -37,12 +37,19 @@ export type VisualizationComponentProps = {|\n   onChange: OnVisualizationConfigChange,\n   width: number,\n   toggleEdit: () => void,\n-|};\n+};\n \n export type VisualizationComponent =\n-  { type?: string, propTypes?: any }\n+  { type: string, propTypes?: any }\n   & React.ComponentType<VisualizationComponentProps>;\n \n+export const makeVisualization = (component: React.ComponentType<VisualizationComponentProps>, type: string): VisualizationComponent => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEwMjAxNA==", "bodyText": "I think this happens for the BarVisualization component? In that case, I think the display name never got lost, because it was simply never present as it is a functional component. We could use the logic from connect.jsx:\n  const wrappedComponentName = Component.displayName || Component.name || 'Unknown/Anonymous';\n\nand use that as displayName, but we would not gain anything.\nLong story short: I think we should just set displayName explicitly, when creating a functional component. E.g. adding: BarVisualization.displayName = 'BarVisualization'; before exporting it. This is beyond the scope of this PR though.", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393102014", "createdAt": "2020-03-16T15:17:51Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/aggregationbuilder/AggregationBuilder.jsx", "diffHunk": "@@ -37,12 +37,19 @@ export type VisualizationComponentProps = {|\n   onChange: OnVisualizationConfigChange,\n   width: number,\n   toggleEdit: () => void,\n-|};\n+};\n \n export type VisualizationComponent =\n-  { type?: string, propTypes?: any }\n+  { type: string, propTypes?: any }\n   & React.ComponentType<VisualizationComponentProps>;\n \n+export const makeVisualization = (component: React.ComponentType<VisualizationComponentProps>, type: string): VisualizationComponent => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2ODU4Mw=="}, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExOTQ5Ng==", "bodyText": "You are right, it never gets lost, I thought so because the component's name was part of the warning before these changes.\nI agree adding the displayName for functional components is a good idea in general, but out of the scope. Looks like a good case for an ESLint rule, i will have a look at a possible solution.", "url": "https://github.com/Graylog2/graylog2-server/pull/7671#discussion_r393119496", "createdAt": "2020-03-16T15:42:18Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/aggregationbuilder/AggregationBuilder.jsx", "diffHunk": "@@ -37,12 +37,19 @@ export type VisualizationComponentProps = {|\n   onChange: OnVisualizationConfigChange,\n   width: number,\n   toggleEdit: () => void,\n-|};\n+};\n \n export type VisualizationComponent =\n-  { type?: string, propTypes?: any }\n+  { type: string, propTypes?: any }\n   & React.ComponentType<VisualizationComponentProps>;\n \n+export const makeVisualization = (component: React.ComponentType<VisualizationComponentProps>, type: string): VisualizationComponent => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA2ODU4Mw=="}, "originalCommit": {"oid": "c12d28db960683bf228d1516feb7ba864f9c2935"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3832, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}