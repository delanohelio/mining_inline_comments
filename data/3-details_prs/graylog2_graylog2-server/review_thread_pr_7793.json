{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjQwMzAz", "number": 7793, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowOTowMlrODtDr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowOTowMlrODtDr6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTcyOTA1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/views/ViewList.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowOTowMlrOF-QmeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowOTowMlrOF-QmeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyODAyNQ==", "bodyText": "We need to execute the search, when page, perPage or query changes, this works perfectly in combination with useEffect, except for this case (deleting a view). As you can see in the diff, we are running execSearch  after setState.  With the current implementation, setPage(1) will not trigger executeSearch, when the current page is 1.\nThe above  execSearch(); in line 55 has no effect. also setPage(1).then() is not a possible solution.\nDo you have any idea how to deal with this case?", "url": "https://github.com/Graylog2/graylog2-server/pull/7793#discussion_r400828025", "createdAt": "2020-03-31T11:09:02Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/views/ViewList.jsx", "diffHunk": "@@ -1,126 +1,110 @@\n-import React from 'react';\n+import React, { useEffect, useState } from 'react';\n import PropTypes from 'prop-types';\n-import createReactClass from 'create-react-class';\n import { ButtonToolbar, DropdownButton, MenuItem } from 'components/graylog';\n import IfPermitted from 'components/common/IfPermitted';\n \n import { PaginatedList, SearchForm, Spinner, EntityList } from 'components/common';\n import View from './View';\n \n-const ViewList = createReactClass({\n-  propTypes: {\n-    views: PropTypes.arrayOf(PropTypes.object),\n-    pagination: PropTypes.shape({\n-      total: PropTypes.number.isRequired,\n-      page: PropTypes.number.isRequired,\n-      perPage: PropTypes.number.isRequired,\n-    }).isRequired,\n-    handleSearch: PropTypes.func.isRequired,\n-    handleViewDelete: PropTypes.func.isRequired,\n-  },\n-\n-  getDefaultProps() {\n-    return {\n-      views: undefined,\n-    };\n-  },\n-\n-  getInitialState() {\n-    return {\n-      query: '',\n-      page: 1,\n-      perPage: 10,\n-    };\n-  },\n-\n-  componentDidMount() {\n-    this.execSearch();\n-  },\n-\n-  execSearch(resetLoadingState = () => {\n-  }) {\n-    const { query, page, perPage } = this.state;\n-    this.props.handleSearch(query, page, perPage).then(resetLoadingState).catch(resetLoadingState);\n-  },\n-\n-  handleSearch(query, resetLoadingState) {\n-    this.setState({ query: query, page: 1 }, () => {\n-      this.execSearch(resetLoadingState);\n-    });\n-  },\n-\n-  handleSearchReset() {\n-    this.setState({ query: '', page: 1 }, () => {\n-      this.execSearch();\n-    });\n-  },\n-\n-  handlePageChange(page, perPage) {\n-    this.setState({ page: page, perPage: perPage }, () => {\n-      this.execSearch();\n-    });\n-  },\n-\n-  handleViewDelete(view) {\n+const itemActionsFactory = (view, onViewDelete) => {\n+  return (\n+    <IfPermitted permissions={['*']}>\n+      <ButtonToolbar>\n+        <DropdownButton title=\"Actions\" id={`view-actions-dropdown-${view.id}`} bsSize=\"small\" pullRight>\n+          <MenuItem onSelect={onViewDelete(view)}>Delete</MenuItem>\n+        </DropdownButton>\n+      </ButtonToolbar>\n+    </IfPermitted>\n+  );\n+};\n+\n+const ViewList = ({ pagination, handleSearch, handleViewDelete, views }) => {\n+  const [query, setQuery] = useState('');\n+  const [page, setPage] = useState(1);\n+  const [perPage, setPerPage] = useState(10);\n+\n+  const execSearch = (resetLoadingState = () => {}) => {\n+    handleSearch(query, page, perPage).then(resetLoadingState).catch(resetLoadingState);\n+  };\n+\n+  useEffect(() => {\n+    execSearch();\n+  }, [query, page, setPage]);\n+\n+\n+  const onSearch = (newQuery, resetLoadingState) => {\n+    setQuery(newQuery);\n+    setPage(1);\n+    resetLoadingState();\n+  };\n+\n+  const onSearchReset = () => {\n+    setQuery('');\n+    setPage(1);\n+  };\n+\n+  const onPageChange = (newPage, newPerPage) => {\n+    setPage(newPage);\n+    setPerPage(newPerPage);\n+  };\n+\n+  const onViewDelete = (view) => {\n     return () => {\n-      this.props.handleViewDelete(view).then(() => {\n-        this.setState({ page: 1 }, () => {\n-          this.execSearch();\n-        });\n+      handleViewDelete(view).then(() => {\n+        setPage(1);\n+        execSearch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6e01476a250ca3fc2c4784c9d7e22f4c4de7e28"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3779, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}