{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTQxMzI3", "number": 7186, "title": "Dashboard v1 facade", "bodyText": "Description\nAdd support to install content packs with old dashboards.\nMotivation and Context\nWe provided a content pack with old dashboards which we want the user still to be able to install.\nHow Has This Been Tested?\nContent Pack with old dashboards uploaded and installed.\nFixes #7028\nNeeds Refs #7206\nTypes of changes\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Refactoring (non-breaking change)\n Breaking change (fix or feature that would cause existing functionality to change)\n\nChecklist:\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n I have read the CONTRIBUTING document.\n I have added tests to cover my changes.", "createdAt": "2020-01-15T13:37:38Z", "url": "https://github.com/Graylog2/graylog2-server/pull/7186", "merged": true, "mergeCommit": {"oid": "e9304339440cc997c3f3790b23da4fa629fb63fc"}, "closed": true, "closedAt": "2020-01-24T15:34:25Z", "author": {"login": "kmerz"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6mklEgFqTM0MzIyOTE5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9gvmmAFqTM0ODAzMzU5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMjI5MTk3", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#pullrequestreview-343229197", "createdAt": "2020-01-15T13:49:20Z", "commit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzo1MDo0M1rOFd42jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMzo1MDo0M1rOFd42jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg4NDQ5Mw==", "bodyText": "Instead of making this public, could we introduce Titles#withWidgetTitle(String widgetId, String title) which returns a modified instance of Titles with the widget title being added?", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r366884493", "createdAt": "2020-01-15T13:50:43Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/views/Titles.java", "diffHunk": "@@ -26,7 +26,7 @@\n \n @AutoValue\n public abstract class Titles {\n-    private static final String KEY_WIDGETS = \"widget\";\n+    public static final String KEY_WIDGETS = \"widget\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/18f48ae43fae9afcab203932f690890c49cc7186", "committedDate": "2020-01-15T13:40:13Z", "message": "Update Licenses headers"}, "afterCommit": {"oid": "6b7ac392c0111115a1c4c5fb10ae4623517532f0", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6b7ac392c0111115a1c4c5fb10ae4623517532f0", "committedDate": "2020-01-16T13:15:13Z", "message": "Use already build in Builder generate functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b7ac392c0111115a1c4c5fb10ae4623517532f0", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6b7ac392c0111115a1c4c5fb10ae4623517532f0", "committedDate": "2020-01-16T13:15:13Z", "message": "Use already build in Builder generate functions"}, "afterCommit": {"oid": "01477b641b411cbb1defe097e4609ee5f01b5131", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/01477b641b411cbb1defe097e4609ee5f01b5131", "committedDate": "2020-01-17T08:30:06Z", "message": "Use already build in Builder generate functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01477b641b411cbb1defe097e4609ee5f01b5131", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/01477b641b411cbb1defe097e4609ee5f01b5131", "committedDate": "2020-01-17T08:30:06Z", "message": "Use already build in Builder generate functions"}, "afterCommit": {"oid": "105fb821f89342c6e7dd3ee8d87d69e9f728fb64", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/105fb821f89342c6e7dd3ee8d87d69e9f728fb64", "committedDate": "2020-01-17T13:59:02Z", "message": "Refactor to own converter class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "105fb821f89342c6e7dd3ee8d87d69e9f728fb64", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/105fb821f89342c6e7dd3ee8d87d69e9f728fb64", "committedDate": "2020-01-17T13:59:02Z", "message": "Refactor to own converter class"}, "afterCommit": {"oid": "f1a9b6a266f0ac3725a0995abd0da12e814bedf5", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f1a9b6a266f0ac3725a0995abd0da12e814bedf5", "committedDate": "2020-01-22T12:48:30Z", "message": "Fix rebase conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzODE5Mzkx", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#pullrequestreview-343819391", "createdAt": "2020-01-16T10:40:40Z", "commit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0MDo0MFrOFeVGCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzoyNjozNVrOFgklfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NzIwOA==", "bodyText": "This is the third copy of this class. :) Also, since this is never mocked, why not just use UUID.randomUUID().toString() to keep things simple?", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r367347208", "createdAt": "2020-01-16T10:40:40Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/RandomUUIDProvider.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NzcyOA==", "bodyText": "?", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r367347728", "createdAt": "2020-01-16T10:41:50Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/PositionConverter.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.plugins.views.search.views.Position;\n+import org.graylog.plugins.views.search.views.WidgetPositionDTO;\n+import org.graylog2.contentpacks.model.entities.DashboardWidgetEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class PositionConverter {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0Nzg0Ng==", "bodyText": "Unused", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r367347846", "createdAt": "2020-01-16T10:42:07Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/TimeIntervalMapper.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.TimeUnitInterval;\n+\n+import java.util.Map;\n+\n+public class TimeIntervalMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM1Njc0NA==", "bodyText": "ViewFacade#getNativeViews should be protected instead of public. It's only ever called in ViewFacade itself.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r367356744", "createdAt": "2020-01-16T11:01:54Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/DashboardV1Facade.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.graph.Graph;\n+import org.graylog.plugins.views.search.db.SearchDbService;\n+import org.graylog.plugins.views.search.views.ViewDTO;\n+import org.graylog.plugins.views.search.views.ViewService;\n+import org.graylog2.contentpacks.facades.ViewFacade;\n+import org.graylog2.contentpacks.model.ModelType;\n+import org.graylog2.contentpacks.model.ModelTypes;\n+import org.graylog2.contentpacks.model.entities.DashboardEntity;\n+import org.graylog2.contentpacks.model.entities.Entity;\n+import org.graylog2.contentpacks.model.entities.EntityDescriptor;\n+import org.graylog2.contentpacks.model.entities.EntityV1;\n+import org.graylog2.contentpacks.model.entities.NativeEntity;\n+import org.graylog2.contentpacks.model.entities.ViewEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+\n+import javax.inject.Inject;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+public class DashboardV1Facade extends ViewFacade {\n+    public static final ModelType TYPE_V1 = ModelTypes.DASHBOARD_V1;\n+    private ObjectMapper objectMapper;\n+    private RandomUUIDProvider randomUUIDProvider;\n+\n+    @Inject\n+    public DashboardV1Facade(ObjectMapper objectMapper,\n+                             SearchDbService searchDbService,\n+                             RandomUUIDProvider randomUUIDProvider,\n+                             ViewService viewService) {\n+        super(objectMapper, searchDbService, viewService);\n+        this.objectMapper = objectMapper;\n+        this.randomUUIDProvider = randomUUIDProvider;\n+    }\n+\n+    @Override\n+    public ViewDTO.Type getDTOType() {\n+        return ViewDTO.Type.DASHBOARD;\n+    }\n+\n+    @Override\n+    public ModelType getModelType() {\n+        return ModelTypes.DASHBOARD_V1;\n+    }\n+\n+    @Override\n+    public Stream<ViewDTO> getNativeViews() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18f48ae43fae9afcab203932f690890c49cc7186"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY5ODE3NQ==", "bodyText": "I think we should use type.toUpperCase() as old dashboard widgets can have their type in lower case. Was different for two different content packs with different dashboards I created on graylog.torch.sh.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r369698175", "createdAt": "2020-01-22T17:26:35Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/DashboardWidgetConverter.java", "diffHunk": "@@ -0,0 +1,465 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.views.WidgetConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AggregationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AreaVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AutoIntervalDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.BarVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.Interpolation;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.NumberVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.PivotDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.TimeHistogramConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.ValueConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.VisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.PivotSortConfig;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.SortConfigDTO;\n+import org.graylog2.contentpacks.model.entities.DashboardWidgetEntity;\n+import org.graylog2.contentpacks.model.entities.WidgetConfig;\n+import org.graylog2.contentpacks.model.entities.WidgetEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public class DashboardWidgetConverter {\n+    private Map<String, ValueReference> parameters;\n+    private RandomUUIDProvider randomUUIDProvider;\n+    private DashboardWidgetEntity dashboardWidgetEntity;\n+    private WidgetConfig config;\n+\n+    public DashboardWidgetConverter(DashboardWidgetEntity dashboardWidgetEntity,\n+                                    Map<String, ValueReference> parameters,\n+                                    RandomUUIDProvider randomUUIDProvider) {\n+        this.dashboardWidgetEntity = dashboardWidgetEntity;\n+        this.parameters = parameters;\n+        this.randomUUIDProvider = randomUUIDProvider;\n+        this.config = new WidgetConfig(dashboardWidgetEntity.configuration(), parameters);\n+    }\n+\n+    public static List<WidgetEntity> convert(DashboardWidgetEntity dashboardWidgetEntity,\n+                                             Map<String, ValueReference> parameters,\n+                                             RandomUUIDProvider randomUUIDProvider) {\n+        final DashboardWidgetConverter converter = new DashboardWidgetConverter(\n+                dashboardWidgetEntity, parameters, randomUUIDProvider);\n+        return converter.convert();\n+    }\n+\n+    public List<WidgetEntity> convert() {\n+        final String type = dashboardWidgetEntity.type().asString(parameters);\n+\n+        try {\n+            switch (type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1a9b6a266f0ac3725a0995abd0da12e814bedf5"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTg5MjAz", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#pullrequestreview-347189203", "createdAt": "2020-01-23T10:20:48Z", "commit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "state": "DISMISSED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMDoyMDo0OFrOFg5KzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMToxNToxOVrOFg6q3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNTQwNQ==", "bodyText": "Use com.google.common.collect.ImmutableMap", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370035405", "createdAt": "2020-01-23T10:20:48Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog2/contentpacks/facades/DashboardV1FacadeTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.google.common.io.Resources;\n+import com.lordofthejars.nosqlunit.annotation.UsingDataSet;\n+import com.lordofthejars.nosqlunit.core.LoadStrategyEnum;\n+import com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchRequirements;\n+import org.graylog.plugins.views.search.db.SearchDbService;\n+import org.graylog.plugins.views.search.filter.OrFilter;\n+import org.graylog.plugins.views.search.filter.QueryStringFilter;\n+import org.graylog.plugins.views.search.filter.StreamFilter;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSort;\n+import org.graylog.plugins.views.search.views.ViewDTO;\n+import org.graylog.plugins.views.search.views.ViewRequirements;\n+import org.graylog.plugins.views.search.views.ViewService;\n+import org.graylog.plugins.views.search.views.ViewStateDTO;\n+import org.graylog.plugins.views.search.views.WidgetDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AggregationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AutoIntervalDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.BarVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.NumberVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.TimeHistogramConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.ValueConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.PivotSortConfig;\n+import org.graylog.plugins.views.search.views.widgets.messagelist.MessageListConfigDTO;\n+import org.graylog2.bindings.providers.MongoJackObjectMapperProvider;\n+import org.graylog2.contentpacks.facades.dashboardV1.DashboardV1Facade;\n+import org.graylog2.contentpacks.model.ContentPack;\n+import org.graylog2.contentpacks.model.ContentPackV1;\n+import org.graylog2.contentpacks.model.ModelTypes;\n+import org.graylog2.contentpacks.model.entities.Entity;\n+import org.graylog2.contentpacks.model.entities.EntityDescriptor;\n+import org.graylog2.contentpacks.model.entities.NativeEntity;\n+import org.graylog2.contentpacks.model.entities.PivotEntity;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.MongoConnectionRule;\n+import org.graylog2.database.NotFoundException;\n+import org.graylog2.plugin.cluster.ClusterConfigService;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.graylog2.streams.StreamImpl;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzNzAzOQ==", "bodyText": "The throws clause is not needed here. If this is removed, you can also remove it from createNativeEntity and DashboardV1Facade#decode", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370037039", "createdAt": "2020-01-23T10:24:24Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/ViewFacade.java", "diffHunk": "@@ -105,17 +106,17 @@ private Entity exportNativeEntity(ViewDTO view, EntityDescriptorIds entityDescri\n     public NativeEntity<ViewDTO> createNativeEntity(Entity entity,\n                                                     Map<String, ValueReference> parameters,\n                                                     Map<EntityDescriptor, Object> nativeEntities,\n-                                                    String username) {\n+                                                    String username) throws InvalidRangeParametersException {\n         if (entity instanceof EntityV1) {\n             return decode((EntityV1) entity, parameters, nativeEntities);\n         } else {\n             throw new IllegalArgumentException(\"Unsupported entity version: \" + entity.getClass());\n         }\n     }\n \n-    private NativeEntity<ViewDTO> decode(EntityV1 entityV1,\n+    protected NativeEntity<ViewDTO> decode(EntityV1 entityV1,\n                                          Map<String, ValueReference> parameters,\n-                                         Map<EntityDescriptor, Object> nativeEntities) {\n+                                         Map<EntityDescriptor, Object> nativeEntities) throws InvalidRangeParametersException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAzOTE5Nw==", "bodyText": "The same instanceof check is done in resolveForInstallation and could be extracted into a method called ensureV1(Entity entity) which throws the exception.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370039197", "createdAt": "2020-01-23T10:28:38Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/DashboardV1Facade.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.graph.Graph;\n+import org.graylog.plugins.views.search.db.SearchDbService;\n+import org.graylog.plugins.views.search.views.ViewDTO;\n+import org.graylog.plugins.views.search.views.ViewService;\n+import org.graylog2.contentpacks.facades.ViewFacade;\n+import org.graylog2.contentpacks.model.ModelType;\n+import org.graylog2.contentpacks.model.ModelTypes;\n+import org.graylog2.contentpacks.model.entities.DashboardEntity;\n+import org.graylog2.contentpacks.model.entities.Entity;\n+import org.graylog2.contentpacks.model.entities.EntityDescriptor;\n+import org.graylog2.contentpacks.model.entities.EntityV1;\n+import org.graylog2.contentpacks.model.entities.NativeEntity;\n+import org.graylog2.contentpacks.model.entities.ViewEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+\n+import javax.inject.Inject;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+\n+public class DashboardV1Facade extends ViewFacade {\n+    public static final ModelType TYPE_V1 = ModelTypes.DASHBOARD_V1;\n+    private ObjectMapper objectMapper;\n+\n+    @Inject\n+    public DashboardV1Facade(ObjectMapper objectMapper,\n+                             SearchDbService searchDbService,\n+                             ViewService viewService) {\n+        super(objectMapper, searchDbService, viewService);\n+        this.objectMapper = objectMapper;\n+    }\n+\n+    @Override\n+    public ViewDTO.Type getDTOType() {\n+        return ViewDTO.Type.DASHBOARD;\n+    }\n+\n+    @Override\n+    public ModelType getModelType() {\n+        return ModelTypes.DASHBOARD_V1;\n+    }\n+\n+    @Override\n+    protected Stream<ViewDTO> getNativeViews() {\n+        /* There are no old dashboards in the system */\n+        return ImmutableSet.<ViewDTO>of().stream();\n+    }\n+\n+    @Override\n+    public NativeEntity<ViewDTO> createNativeEntity(Entity entity, Map<String, ValueReference> parameters, Map<EntityDescriptor, Object> nativeEntities, String username) {\n+        if (entity instanceof EntityV1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MTQ5Mg==", "bodyText": "Instead of instantiating the class in a static method I would recommend passing it to EntityConverter as a constructor parameter. This allows mocking it for unit tests, if necessary and is just generally good practice.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370041492", "createdAt": "2020-01-23T10:33:31Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/DashboardWidgetConverter.java", "diffHunk": "@@ -0,0 +1,462 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.views.WidgetConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AggregationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AreaVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AutoIntervalDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.BarVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.Interpolation;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.NumberVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.PivotDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.TimeHistogramConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.ValueConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.VisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.PivotSortConfig;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.SortConfigDTO;\n+import org.graylog2.contentpacks.model.entities.DashboardWidgetEntity;\n+import org.graylog2.contentpacks.model.entities.WidgetConfig;\n+import org.graylog2.contentpacks.model.entities.WidgetEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class DashboardWidgetConverter {\n+    private Map<String, ValueReference> parameters;\n+    private DashboardWidgetEntity dashboardWidgetEntity;\n+    private WidgetConfig config;\n+\n+    public DashboardWidgetConverter(DashboardWidgetEntity dashboardWidgetEntity,\n+                                    Map<String, ValueReference> parameters) {\n+        this.dashboardWidgetEntity = dashboardWidgetEntity;\n+        this.parameters = parameters;\n+        this.config = new WidgetConfig(dashboardWidgetEntity.configuration(), parameters);\n+    }\n+\n+    public static List<WidgetEntity> convert(DashboardWidgetEntity dashboardWidgetEntity,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MzM1MQ==", "bodyText": "The current constructor parameters are really the thing to convert so should (would have to, if you follow the suggestion above) become arguments of convert().", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370043351", "createdAt": "2020-01-23T10:37:30Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/DashboardWidgetConverter.java", "diffHunk": "@@ -0,0 +1,462 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.views.WidgetConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AggregationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AreaVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AutoIntervalDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.BarVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.Interpolation;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.NumberVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.PivotDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.TimeHistogramConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.ValueConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.VisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.PivotSortConfig;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.SortConfigDTO;\n+import org.graylog2.contentpacks.model.entities.DashboardWidgetEntity;\n+import org.graylog2.contentpacks.model.entities.WidgetConfig;\n+import org.graylog2.contentpacks.model.entities.WidgetEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class DashboardWidgetConverter {\n+    private Map<String, ValueReference> parameters;\n+    private DashboardWidgetEntity dashboardWidgetEntity;\n+    private WidgetConfig config;\n+\n+    public DashboardWidgetConverter(DashboardWidgetEntity dashboardWidgetEntity,\n+                                    Map<String, ValueReference> parameters) {\n+        this.dashboardWidgetEntity = dashboardWidgetEntity;\n+        this.parameters = parameters;\n+        this.config = new WidgetConfig(dashboardWidgetEntity.configuration(), parameters);\n+    }\n+\n+    public static List<WidgetEntity> convert(DashboardWidgetEntity dashboardWidgetEntity,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA0MTQ5Mg=="}, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1MjM4OA==", "bodyText": "I would suggest to extract more private methods to make this pretty long method easier to understand.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370052388", "createdAt": "2020-01-23T10:56:45Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/EntityConverter.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.views.Titles;\n+import org.graylog.plugins.views.search.views.WidgetPositionDTO;\n+import org.graylog2.contentpacks.model.entities.DashboardEntity;\n+import org.graylog2.contentpacks.model.entities.DashboardWidgetEntity;\n+import org.graylog2.contentpacks.model.entities.QueryEntity;\n+import org.graylog2.contentpacks.model.entities.SearchEntity;\n+import org.graylog2.contentpacks.model.entities.SearchTypeEntity;\n+import org.graylog2.contentpacks.model.entities.ViewEntity;\n+import org.graylog2.contentpacks.model.entities.ViewStateEntity;\n+import org.graylog2.contentpacks.model.entities.WidgetEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class EntityConverter {\n+\n+    private DashboardEntity dashboardEntity;\n+    private Map<String, ValueReference> parameters;\n+\n+    public EntityConverter(DashboardEntity dashboardEntity,\n+                           Map<String, ValueReference> parameters) {\n+       this.dashboardEntity = dashboardEntity;\n+       this.parameters = parameters;\n+    }\n+\n+    public ViewEntity convert() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NTc3MA==", "bodyText": "How about catching InvalidRangeParametersException and throwing some Runtimeexception instead? This would remove the need to declare (or handle) in a bunch of places in DashboardWidgetConverter.\nIMO InvalidRangeParametersException should be an unchecked exception anyway as nothing can be done about it by the system at runtime, but that's a different story and out of scope for this PR of course.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370055770", "createdAt": "2020-01-23T11:04:51Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/model/entities/KeywordRangeEntity.java", "diffHunk": "@@ -44,6 +49,12 @@ public static KeywordRangeEntity of(KeywordRange keywordRange) {\n         return new AutoValue_KeywordRangeEntity.Builder();\n     }\n \n+    @Override\n+    public final TimeRange convert(Map<String, ValueReference> parameters) throws InvalidRangeParametersException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NjE3NQ==", "bodyText": "Same applies to the other *RangeEntity classes of course.", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370056175", "createdAt": "2020-01-23T11:05:56Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/model/entities/KeywordRangeEntity.java", "diffHunk": "@@ -44,6 +49,12 @@ public static KeywordRangeEntity of(KeywordRange keywordRange) {\n         return new AutoValue_KeywordRangeEntity.Builder();\n     }\n \n+    @Override\n+    public final TimeRange convert(Map<String, ValueReference> parameters) throws InvalidRangeParametersException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NTc3MA=="}, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1NzUwMQ==", "bodyText": "I have read through the remainder of this class, but feel unable to really review it in depth in a reasonable time frame, as it's a huge bunch of special case logic for the various widget types. Gotta trust you here. :)", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370057501", "createdAt": "2020-01-23T11:09:21Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/facades/dashboardV1/DashboardWidgetConverter.java", "diffHunk": "@@ -0,0 +1,462 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades.dashboardV1;\n+\n+import com.google.common.base.Splitter;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.views.WidgetConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AggregationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AreaVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AutoIntervalDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.BarVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.Interpolation;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.NumberVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.PivotDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.SeriesDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.TimeHistogramConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.ValueConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.VisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.PivotSortConfig;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.SortConfigDTO;\n+import org.graylog2.contentpacks.model.entities.DashboardWidgetEntity;\n+import org.graylog2.contentpacks.model.entities.WidgetConfig;\n+import org.graylog2.contentpacks.model.entities.WidgetEntity;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+public class DashboardWidgetConverter {\n+    private Map<String, ValueReference> parameters;\n+    private DashboardWidgetEntity dashboardWidgetEntity;\n+    private WidgetConfig config;\n+\n+    public DashboardWidgetConverter(DashboardWidgetEntity dashboardWidgetEntity,\n+                                    Map<String, ValueReference> parameters) {\n+        this.dashboardWidgetEntity = dashboardWidgetEntity;\n+        this.parameters = parameters;\n+        this.config = new WidgetConfig(dashboardWidgetEntity.configuration(), parameters);\n+    }\n+\n+    public static List<WidgetEntity> convert(DashboardWidgetEntity dashboardWidgetEntity,\n+                                             Map<String, ValueReference> parameters) {\n+        final DashboardWidgetConverter converter = new DashboardWidgetConverter(dashboardWidgetEntity, parameters);\n+        return converter.convert();\n+    }\n+\n+    public List<WidgetEntity> convert() {\n+        final String type = dashboardWidgetEntity.type().asString(parameters);\n+\n+        try {\n+            switch (type.toUpperCase(Locale.ENGLISH)) {\n+                case \"SEARCH_RESULT_CHART\":\n+                    return createHistogramWidget();\n+                case \"FIELD_CHART\":\n+                    return createFieldChartWidget();\n+                case \"STACKED_CHART\":\n+                    return createStackedChartWidget();\n+                case \"STATS_COUNT\":\n+                    return createStatsCountWidget();\n+                case \"QUICKVALUES\":\n+                    return createQuickValueWidgets();\n+                case \"STREAM_SEARCH_RESULT_COUNT\":\n+                case \"SEARCH_RESULT_COUNT\":\n+                    return createSearchResultCount();\n+                case \"QUICKVALUES_HISTOGRAM\":\n+                    return createQuickValueHistogramWidgets();\n+                case \"ORG.GRAYLOG.PLUGINS.MAP.WIDGET.STRATEGY.MAPWIDGETSTRATEGY\":\n+                    return createMapWidget();\n+                default: {\n+                    throw new IllegalArgumentException(\n+                            \"The provided entity does not have a valid Widget type: \" + type);\n+                }\n+            }\n+        } catch (\n+                InvalidRangeParametersException e) {\n+            throw new IllegalArgumentException(\n+                    \"The provided entity does not have a valid timerange type: \" + e.getMessage());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1ODYxNg==", "bodyText": "The same applies as for DashboardWidgetConverter: I have read through the remainder of this class, but feel unable to really review it in depth in a reasonable time frame, as it's a huge bunch of special case logic for the various widget types. Gotta trust you here. :)", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370058616", "createdAt": "2020-01-23T11:12:02Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/model/entities/WidgetEntity.java", "diffHunk": "@@ -142,4 +166,103 @@ public WidgetDTO toNativeEntity(Map<String, ValueReference> parameters, Map<Enti\n         }\n         return widgetBuilder.build();\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA1OTk5Nw==", "bodyText": "I would split this up into three tests so that it becomes easier to see what's wrong when a test fails. Nice job extracting the assertions though! \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#discussion_r370059997", "createdAt": "2020-01-23T11:15:19Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog2/contentpacks/facades/DashboardV1FacadeTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.facades;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.jsontype.NamedType;\n+import com.google.common.io.Resources;\n+import com.lordofthejars.nosqlunit.annotation.UsingDataSet;\n+import com.lordofthejars.nosqlunit.core.LoadStrategyEnum;\n+import com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchRequirements;\n+import org.graylog.plugins.views.search.db.SearchDbService;\n+import org.graylog.plugins.views.search.filter.OrFilter;\n+import org.graylog.plugins.views.search.filter.QueryStringFilter;\n+import org.graylog.plugins.views.search.filter.StreamFilter;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSort;\n+import org.graylog.plugins.views.search.views.ViewDTO;\n+import org.graylog.plugins.views.search.views.ViewRequirements;\n+import org.graylog.plugins.views.search.views.ViewService;\n+import org.graylog.plugins.views.search.views.ViewStateDTO;\n+import org.graylog.plugins.views.search.views.WidgetDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AggregationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.AutoIntervalDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.BarVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.LineVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.NumberVisualizationConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.TimeHistogramConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.ValueConfigDTO;\n+import org.graylog.plugins.views.search.views.widgets.aggregation.sort.PivotSortConfig;\n+import org.graylog.plugins.views.search.views.widgets.messagelist.MessageListConfigDTO;\n+import org.graylog2.bindings.providers.MongoJackObjectMapperProvider;\n+import org.graylog2.contentpacks.facades.dashboardV1.DashboardV1Facade;\n+import org.graylog2.contentpacks.model.ContentPack;\n+import org.graylog2.contentpacks.model.ContentPackV1;\n+import org.graylog2.contentpacks.model.ModelTypes;\n+import org.graylog2.contentpacks.model.entities.Entity;\n+import org.graylog2.contentpacks.model.entities.EntityDescriptor;\n+import org.graylog2.contentpacks.model.entities.NativeEntity;\n+import org.graylog2.contentpacks.model.entities.PivotEntity;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.MongoConnectionRule;\n+import org.graylog2.database.NotFoundException;\n+import org.graylog2.plugin.cluster.ClusterConfigService;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.graylog2.streams.StreamImpl;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.testcontainers.shaded.com.google.common.collect.ImmutableMap;\n+\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.lordofthejars.nosqlunit.mongodb.InMemoryMongoDb.InMemoryMongoRuleBuilder.newInMemoryMongoDbRule;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class DashboardV1FacadeTest {\n+\n+    @ClassRule\n+    public static final InMemoryMongoDb IN_MEMORY_MONGO_DB = newInMemoryMongoDbRule().build();\n+    @Rule\n+    public final MongoConnectionRule mongoRule = MongoConnectionRule.build(\"test\");\n+\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+\n+    public static class TestSearchDBService extends SearchDbService {\n+        protected TestSearchDBService(MongoConnection mongoConnection,\n+                                      MongoJackObjectMapperProvider mapper) {\n+            super(mongoConnection, mapper, dto -> new SearchRequirements(Collections.emptySet(), dto));\n+        }\n+    }\n+\n+    public static class TestViewService extends ViewService {\n+        protected TestViewService(MongoConnection mongoConnection,\n+                                  MongoJackObjectMapperProvider mapper,\n+                                  ClusterConfigService clusterConfigService) {\n+            super(mongoConnection, mapper, clusterConfigService,\n+                    dto -> new ViewRequirements(Collections.emptySet(), dto));\n+        }\n+    }\n+\n+    private DashboardV1Facade facade;\n+    private ViewFacadeTest.TestViewService viewService;\n+    private ViewFacadeTest.TestSearchDBService searchDbService;\n+    private final String viewId = \"5def958063303ae5f68eccae\"; /* stored in database */\n+    private final String newViewId = \"5def958063303ae5f68edead\";\n+    private final String newStreamId = \"5def958063303ae5f68ebeaf\";\n+    private final String streamId = \"5cdab2293d27467fbe9e8a72\"; /* stored in database */\n+\n+\n+    @Before\n+    public void setUp() {\n+        objectMapper.registerSubtypes(new NamedType(AggregationConfigDTO.class, AggregationConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(MessageListConfigDTO.class, MessageListConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(LineVisualizationConfigDTO.class, LineVisualizationConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(BarVisualizationConfigDTO.class, BarVisualizationConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(NumberVisualizationConfigDTO.class, NumberVisualizationConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(TimeHistogramConfigDTO.class, TimeHistogramConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(ValueConfigDTO.class, ValueConfigDTO.NAME));\n+        objectMapper.registerSubtypes(new NamedType(PivotSortConfig.class, PivotSortConfig.Type));\n+        objectMapper.registerSubtypes(new NamedType(PivotEntity.class, PivotEntity.NAME));\n+        objectMapper.registerSubtypes(new NamedType(PivotSort.class, PivotSort.Type));\n+        objectMapper.registerSubtypes(new NamedType(OrFilter.class, OrFilter.NAME));\n+        objectMapper.registerSubtypes(new NamedType(StreamFilter.class, StreamFilter.NAME));\n+        objectMapper.registerSubtypes(new NamedType(QueryStringFilter.class, QueryStringFilter.NAME));\n+        objectMapper.registerSubtypes(new NamedType(AutoIntervalDTO.class, AutoIntervalDTO.type));\n+        searchDbService = new ViewFacadeTest.TestSearchDBService(mongoRule.getMongoConnection(),\n+                new MongoJackObjectMapperProvider(objectMapper));\n+        viewService = new ViewFacadeTest.TestViewService(mongoRule.getMongoConnection(),\n+                new MongoJackObjectMapperProvider(objectMapper), null);\n+        facade = new DashboardV1Facade(objectMapper, searchDbService, viewService);\n+    }\n+\n+    @Test\n+    @UsingDataSet(loadStrategy = LoadStrategyEnum.CLEAN_INSERT)\n+    public void shouldConvertAndInstallAOldDashboardAsNewView() throws Exception {\n+        final URL resourceUrl = Resources.getResource(DashboardV1Facade.class, \"content-pack-dashboard-v1.json\");\n+        final ContentPack contentPack = objectMapper.readValue(resourceUrl, ContentPack.class);\n+        assertThat(contentPack).isInstanceOf(ContentPackV1.class);\n+        final ContentPackV1 contentPackV1 = (ContentPackV1) contentPack;\n+        final Entity entity = contentPackV1.entities().iterator().next();\n+\n+        final StreamImpl stream = new StreamImpl(Collections.emptyMap());\n+        final Map<EntityDescriptor, Object> nativeEntities = new HashMap<>(1);\n+        nativeEntities.put(EntityDescriptor.create(\"58b3d55a-51ad-4b3e-865c-85776016a151\", ModelTypes.STREAM_V1), stream);\n+\n+        final NativeEntity<ViewDTO> nativeEntity = facade.createNativeEntity(entity,\n+                ImmutableMap.of(), nativeEntities, \"kmerz\");\n+        assertThat(nativeEntity).isNotNull();\n+\n+        final ViewDTO viewDTO = nativeEntity.entity();\n+        viewDOTShouldHaveGeneralInformation(viewDTO);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525d9448103910e390676bb5ac3917e2452306e4", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/525d9448103910e390676bb5ac3917e2452306e4", "committedDate": "2020-01-23T15:31:23Z", "message": "Add DashboardV1Facade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bff7adbf05c4cd639960e6907c4353ae32de135", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3bff7adbf05c4cd639960e6907c4353ae32de135", "committedDate": "2020-01-23T15:31:23Z", "message": "First widget converted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08c567ef9f97d1f993e23144018d96b41f4b05b", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/d08c567ef9f97d1f993e23144018d96b41f4b05b", "committedDate": "2020-01-23T15:31:23Z", "message": "Big Refactoring!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f38d13dc7ca2c598453a6ec24f70ff1e8e8f3c30", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f38d13dc7ca2c598453a6ec24f70ff1e8e8f3c30", "committedDate": "2020-01-23T15:31:23Z", "message": "Implement STATS_COUNT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5972266460c6abbe5ed64eeafe4a7eb88c31809", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c5972266460c6abbe5ed64eeafe4a7eb88c31809", "committedDate": "2020-01-23T15:31:24Z", "message": "Seems to be working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68b46b1dd51931d38b78d64b6fed1000ac9ba286", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/68b46b1dd51931d38b78d64b6fed1000ac9ba286", "committedDate": "2020-01-23T15:31:24Z", "message": "Small fixes do get it going"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be192711b521d3dc5de6f555f7a7616d4531034d", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/be192711b521d3dc5de6f555f7a7616d4531034d", "committedDate": "2020-01-23T15:31:24Z", "message": "Add last missing widgets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a65c0d7fbd49d6e50925b8e2c8eb3f6e85936f", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/93a65c0d7fbd49d6e50925b8e2c8eb3f6e85936f", "committedDate": "2020-01-23T15:31:24Z", "message": "Update Licenses headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f1706755b75e65a1af700c5ae6a5f2e64617662", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/1f1706755b75e65a1af700c5ae6a5f2e64617662", "committedDate": "2020-01-23T15:31:25Z", "message": "Use already build in Builder generate functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "625cc57ba1423545c3b700e363ed5a00b1c1c457", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/625cc57ba1423545c3b700e363ed5a00b1c1c457", "committedDate": "2020-01-23T15:31:25Z", "message": "Fix positioning mapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c18dd097aa3db8fe1348899f4f15b333e9203baa", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c18dd097aa3db8fe1348899f4f15b333e9203baa", "committedDate": "2020-01-23T15:31:25Z", "message": "Refactor test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1d5cdf4b30ba74ff962921f673bf3025d46f33", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/fd1d5cdf4b30ba74ff962921f673bf3025d46f33", "committedDate": "2020-01-23T15:31:25Z", "message": "Refactor to own converter class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d1c4abe3eb21df9c091bd4ac1ef9a1603249cc5", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7d1c4abe3eb21df9c091bd4ac1ef9a1603249cc5", "committedDate": "2020-01-23T15:31:26Z", "message": "Fix rebase conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c4b627c7e238bf28df68de29605950498ab170", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/d1c4b627c7e238bf28df68de29605950498ab170", "committedDate": "2020-01-23T15:31:26Z", "message": "Apply annotations from @alexkonn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0abb1dd2030a7a5b3b358098b586b81c53b4e2b", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c0abb1dd2030a7a5b3b358098b586b81c53b4e2b", "committedDate": "2020-01-23T15:31:26Z", "message": "Fix forbidden api call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1666e0ee734694cfffc02ff57a1696d7664a5534", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/1666e0ee734694cfffc02ff57a1696d7664a5534", "committedDate": "2020-01-23T15:31:26Z", "message": "Fix failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e2219c858a155aeab99d75ede0fea48da8dfe30", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6e2219c858a155aeab99d75ede0fea48da8dfe30", "committedDate": "2020-01-23T15:31:26Z", "message": "Fix annotations from @alexkonn"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97d35ff327b4a10b60bd71864d4d80dac801671a", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/97d35ff327b4a10b60bd71864d4d80dac801671a", "committedDate": "2020-01-23T09:50:31Z", "message": "Fix failing test"}, "afterCommit": {"oid": "6e2219c858a155aeab99d75ede0fea48da8dfe30", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6e2219c858a155aeab99d75ede0fea48da8dfe30", "committedDate": "2020-01-23T15:31:26Z", "message": "Fix annotations from @alexkonn"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3OTM3NzUy", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#pullrequestreview-347937752", "createdAt": "2020-01-24T13:01:26Z", "commit": {"oid": "6e2219c858a155aeab99d75ede0fea48da8dfe30"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a5a24e0cf03794de848e8908e3c30ade45db261", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/9a5a24e0cf03794de848e8908e3c30ade45db261", "committedDate": "2020-01-24T14:50:59Z", "message": "Fix annotations from @mpfz0r"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MDMzNTky", "url": "https://github.com/Graylog2/graylog2-server/pull/7186#pullrequestreview-348033592", "createdAt": "2020-01-24T15:33:16Z", "commit": {"oid": "9a5a24e0cf03794de848e8908e3c30ade45db261"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2674, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}