{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTM0NDkx", "number": 9761, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMjo0MlrOFEHOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0NDoxN1rOFEHenA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU2OTAwOnYy", "diffSide": "LEFT", "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMjo0MlrOIEE9XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMjo0MlrOIEE9XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjQ2MA==", "bodyText": "\ud83e\udd70", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541146460", "createdAt": "2020-12-11T18:32:42Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "diffHunk": "@@ -254,28 +254,8 @@ const GlobalThemeStyles = createGlobalStyle(({ theme }) => css`\n     margin-bottom: 15px !important;\n   }\n \n-  dl.metric-def dt {\n-    float: left;\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU3MDE1OnYy", "diffSide": "LEFT", "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMzowMVrOIEE-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMzowMVrOIEE-Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjYzNA==", "bodyText": "\ud83d\ude0d", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541146634", "createdAt": "2020-12-11T18:33:01Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "diffHunk": "@@ -254,28 +254,8 @@ const GlobalThemeStyles = createGlobalStyle(({ theme }) => css`\n     margin-bottom: 15px !important;\n   }\n \n-  dl.metric-def dt {\n-    float: left;\n-  }\n-\n   dl.metric-timer dd {\n-    margin-left: 125px;\n-  }\n-\n-  dl.metric-meter dd {\n-    margin-left: 95px;\n-  }\n-\n-  dl.metric-gauge dd {\n-    margin-left: 80px;\n-  }\n-\n-  dl.metric-counter dd {\n-    margin-left: 80px;\n-  }\n-\n-  dl.metric-histogram dd {\n-    margin-left: 125px;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU3MTk3OnYy", "diffSide": "LEFT", "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMzozNFrOIEE_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzozODoxN1rOIFDWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjkyMQ==", "bodyText": "Love seeing all this red in the global styles file", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541146921", "createdAt": "2020-12-11T18:33:34Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "diffHunk": "@@ -345,14 +325,6 @@ const GlobalThemeStyles = createGlobalStyle(({ theme }) => css`\n     margin-top: 5px;\n   }\n \n-  .system-system dt {\n-    float: left;\n-  }\n-\n-  .system-system dd {\n-    margin-left: 75px;\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2ODY0MA==", "bodyText": "Me too \ud83d\ude09", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r542168640", "createdAt": "2020-12-14T07:38:17Z", "author": {"login": "ousmaneo"}, "path": "graylog2-web-interface/src/theme/GlobalThemeStyles.jsx", "diffHunk": "@@ -345,14 +325,6 @@ const GlobalThemeStyles = createGlobalStyle(({ theme }) => css`\n     margin-top: 5px;\n   }\n \n-  .system-system dt {\n-    float: left;\n-  }\n-\n-  .system-system dd {\n-    margin-left: 75px;\n-  }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NjkyMQ=="}, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU4MjgyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/indices/StyledIndexSetDetailsRow.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozNjoyOFrOIEFFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozNjoyOFrOIEFFfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0ODU0MQ==", "bodyText": "Something we should all discuss as a team, I don't mind having all the styles in their own specific file, but I want to make sure the whole team is onboard and we have a specific naming structure and some defined \"conventions\" (IndexSetDetails.styles.tsx maybe so related styles stay with their component)\nCurrently, styles have just been defined within the component file itself.", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541148541", "createdAt": "2020-12-11T18:36:28Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/indices/StyledIndexSetDetailsRow.tsx", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import styled from 'styled-components';\n+\n+import { Row } from 'components/graylog';\n+\n+const StyledIndexSetDetailsRow = styled(Row)`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU4NzcwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/metrics/MetricDetails.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozNzo0MFrOIEFIRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozNzo0MFrOIEFIRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0OTI1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // @flow strict", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541149254", "createdAt": "2020-12-11T18:37:40Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/metrics/MetricDetails.jsx", "diffHunk": "@@ -14,67 +14,106 @@\n  * along with this program. If not, see\n  * <http://www.mongodb.com/licensing/server-side-public-license>.\n  */\n+// @flow strict", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODYwNjgyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/metrics/MetricDetails.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0MzowMVrOIEFTdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzozNzo0NlrOIFDVeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MjExNw==", "bodyText": "I know this was there when you got here, but do you think there is a clearer way to write this conditional?\nMaybe this would work?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               const currentMetric = metrics && metrics[nodeId] && metrics[nodeId][metricName]\n          \n          \n            \n                 ? metrics[nodeId][metricName] : metric;\n          \n          \n            \n               const currentMetric = metrics?.[nodeId]?.[metricName] ?? metric;", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541152117", "createdAt": "2020-12-11T18:43:01Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/metrics/MetricDetails.jsx", "diffHunk": "@@ -14,67 +14,106 @@\n  * along with this program. If not, see\n  * <http://www.mongodb.com/licensing/server-side-public-license>.\n  */\n+// @flow strict\n import PropTypes from 'prop-types';\n import React from 'react';\n-import createReactClass from 'create-react-class';\n-import Reflux from 'reflux';\n import lodash from 'lodash';\n+import styled from 'styled-components';\n \n import { CounterDetails, GaugeDetails, HistogramDetails, MeterDetails, TimerDetails } from 'components/metrics';\n import CombinedProvider from 'injection/CombinedProvider';\n+import connect from 'stores/connect';\n \n const { MetricsStore, MetricsActions } = CombinedProvider.get('Metrics');\n+const StyledMetricDetail = styled.div`\n+  dl {\n+    > dt {\n+      float: left;\n+    }\n \n-const MetricDetails = createReactClass({\n-  displayName: 'MetricDetails',\n-\n-  propTypes: {\n-    metric: PropTypes.object.isRequired,\n-  },\n+    &.metric-timer > dd {\n+      margin-left: 145px;\n+    }\n \n-  mixins: [Reflux.connect(MetricsStore)],\n+    &.metric-meter > dd {\n+      margin-left: 115px;\n+    }\n \n-  componentDidMount() {\n-    MetricsActions.add(this.props.nodeId, this.props.metric.full_name);\n-  },\n+    &.metric-gauge > dd {\n+      margin-left: 90px;\n+    }\n \n-  componentWillUnmount() {\n-    MetricsActions.remove(this.props.nodeId, this.props.metric.full_name);\n-  },\n+    &.metric-counter > dd {\n+      margin-left: 90px;\n+    }\n \n-  _formatDetailsForType(type, metric) {\n-    switch (type) {\n-      case 'Counter':\n-        return <CounterDetails metric={metric} />;\n-      case 'Gauge':\n-        return <GaugeDetails metric={metric} />;\n-      case 'Histogram':\n-        return <HistogramDetails metric={metric} />;\n-      case 'Meter':\n-        return <MeterDetails metric={metric} />;\n-      case 'Timer':\n-        return <TimerDetails metric={metric} />;\n-      default:\n-        return <i>Invalid metric type: {type}</i>;\n+    &.metric-histogram > dd {\n+      margin-left: 145px;\n     }\n-  },\n+  }\n+`;\n+\n+class MetricDetails extends React.Component {\n+ static propTypes = {\n+   metrics: PropTypes.object,\n+   metric: PropTypes.object.isRequired,\n+   nodeId: PropTypes.string.isRequired,\n+ };\n+\n+ static defaultProps = {\n+   metrics: undefined,\n+ }\n+\n+ componentDidMount() {\n+   const { nodeId, metric: { full_name: fullName } } = this.props;\n+   MetricsActions.add(nodeId, fullName);\n+ }\n+\n+ componentWillUnmount() {\n+   const { nodeId, metric: { full_name: fullName } } = this.props;\n+   MetricsActions.remove(nodeId, fullName);\n+ }\n \n-  render() {\n-    const metricName = this.props.metric.full_name;\n-    const { nodeId } = this.props;\n-    const metric = this.state.metrics && this.state.metrics[nodeId] && this.state.metrics[nodeId][metricName]\n-      ? this.state.metrics[nodeId][metricName] : this.props.metric;\n-    const type = lodash.capitalize(metric.type);\n-    const details = this._formatDetailsForType(type, metric);\n+ _formatDetailsForType = (type, metric) => {\n+   switch (type) {\n+     case 'Counter':\n+       return <CounterDetails metric={metric} />;\n+     case 'Gauge':\n+       return <GaugeDetails metric={metric} />;\n+     case 'Histogram':\n+       return <HistogramDetails metric={metric} />;\n+     case 'Meter':\n+       return <MeterDetails metric={metric} />;\n+     case 'Timer':\n+       return <TimerDetails metric={metric} />;\n+     default:\n+       return <i>Invalid metric type: {type}</i>;\n+   }\n+ }\n \n-    return (\n-      <div className=\"metric\">\n-        <h3>{type}</h3>\n+ render() {\n+   const { nodeId, metric, metric: { full_name: metricName }, metrics } = this.props;\n+   const currentMetric = metrics && metrics[nodeId] && metrics[nodeId][metricName]\n+     ? metrics[nodeId][metricName] : metric;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2ODQ0Mg==", "bodyText": "This works ! Thanks", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r542168442", "createdAt": "2020-12-14T07:37:46Z", "author": {"login": "ousmaneo"}, "path": "graylog2-web-interface/src/components/metrics/MetricDetails.jsx", "diffHunk": "@@ -14,67 +14,106 @@\n  * along with this program. If not, see\n  * <http://www.mongodb.com/licensing/server-side-public-license>.\n  */\n+// @flow strict\n import PropTypes from 'prop-types';\n import React from 'react';\n-import createReactClass from 'create-react-class';\n-import Reflux from 'reflux';\n import lodash from 'lodash';\n+import styled from 'styled-components';\n \n import { CounterDetails, GaugeDetails, HistogramDetails, MeterDetails, TimerDetails } from 'components/metrics';\n import CombinedProvider from 'injection/CombinedProvider';\n+import connect from 'stores/connect';\n \n const { MetricsStore, MetricsActions } = CombinedProvider.get('Metrics');\n+const StyledMetricDetail = styled.div`\n+  dl {\n+    > dt {\n+      float: left;\n+    }\n \n-const MetricDetails = createReactClass({\n-  displayName: 'MetricDetails',\n-\n-  propTypes: {\n-    metric: PropTypes.object.isRequired,\n-  },\n+    &.metric-timer > dd {\n+      margin-left: 145px;\n+    }\n \n-  mixins: [Reflux.connect(MetricsStore)],\n+    &.metric-meter > dd {\n+      margin-left: 115px;\n+    }\n \n-  componentDidMount() {\n-    MetricsActions.add(this.props.nodeId, this.props.metric.full_name);\n-  },\n+    &.metric-gauge > dd {\n+      margin-left: 90px;\n+    }\n \n-  componentWillUnmount() {\n-    MetricsActions.remove(this.props.nodeId, this.props.metric.full_name);\n-  },\n+    &.metric-counter > dd {\n+      margin-left: 90px;\n+    }\n \n-  _formatDetailsForType(type, metric) {\n-    switch (type) {\n-      case 'Counter':\n-        return <CounterDetails metric={metric} />;\n-      case 'Gauge':\n-        return <GaugeDetails metric={metric} />;\n-      case 'Histogram':\n-        return <HistogramDetails metric={metric} />;\n-      case 'Meter':\n-        return <MeterDetails metric={metric} />;\n-      case 'Timer':\n-        return <TimerDetails metric={metric} />;\n-      default:\n-        return <i>Invalid metric type: {type}</i>;\n+    &.metric-histogram > dd {\n+      margin-left: 145px;\n     }\n-  },\n+  }\n+`;\n+\n+class MetricDetails extends React.Component {\n+ static propTypes = {\n+   metrics: PropTypes.object,\n+   metric: PropTypes.object.isRequired,\n+   nodeId: PropTypes.string.isRequired,\n+ };\n+\n+ static defaultProps = {\n+   metrics: undefined,\n+ }\n+\n+ componentDidMount() {\n+   const { nodeId, metric: { full_name: fullName } } = this.props;\n+   MetricsActions.add(nodeId, fullName);\n+ }\n+\n+ componentWillUnmount() {\n+   const { nodeId, metric: { full_name: fullName } } = this.props;\n+   MetricsActions.remove(nodeId, fullName);\n+ }\n \n-  render() {\n-    const metricName = this.props.metric.full_name;\n-    const { nodeId } = this.props;\n-    const metric = this.state.metrics && this.state.metrics[nodeId] && this.state.metrics[nodeId][metricName]\n-      ? this.state.metrics[nodeId][metricName] : this.props.metric;\n-    const type = lodash.capitalize(metric.type);\n-    const details = this._formatDetailsForType(type, metric);\n+ _formatDetailsForType = (type, metric) => {\n+   switch (type) {\n+     case 'Counter':\n+       return <CounterDetails metric={metric} />;\n+     case 'Gauge':\n+       return <GaugeDetails metric={metric} />;\n+     case 'Histogram':\n+       return <HistogramDetails metric={metric} />;\n+     case 'Meter':\n+       return <MeterDetails metric={metric} />;\n+     case 'Timer':\n+       return <TimerDetails metric={metric} />;\n+     default:\n+       return <i>Invalid metric type: {type}</i>;\n+   }\n+ }\n \n-    return (\n-      <div className=\"metric\">\n-        <h3>{type}</h3>\n+ render() {\n+   const { nodeId, metric, metric: { full_name: metricName }, metrics } = this.props;\n+   const currentMetric = metrics && metrics[nodeId] && metrics[nodeId][metricName]\n+     ? metrics[nodeId][metricName] : metric;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MjExNw=="}, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODYxMTQ4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/lookup-tables/ConfigSummaryDefinitionListWrapper.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0NDoxN1rOIEFWMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwNzozNjo1NlrOIFDT5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MjgxNw==", "bodyText": "Ampersand isn't necessary in this instance.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  &:not(:last-child) {\n          \n          \n            \n                  :not(:last-child) {", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r541152817", "createdAt": "2020-12-11T18:44:17Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/lookup-tables/ConfigSummaryDefinitionListWrapper.tsx", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import styled from 'styled-components';\n+\n+const ConfigSummaryDefinitionListWrapper = styled.div`\n+  dl {\n+    margin-top: 10px;\n+\n+    dt {\n+      float: left;\n+      clear: left;\n+    }\n+\n+    dd {\n+      margin-left: 185px;\n+      word-wrap: break-word;\n+\n+      &:not(:last-child) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjE2ODAzNg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/9761#discussion_r542168036", "createdAt": "2020-12-14T07:36:56Z", "author": {"login": "ousmaneo"}, "path": "graylog2-web-interface/src/components/lookup-tables/ConfigSummaryDefinitionListWrapper.tsx", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import styled from 'styled-components';\n+\n+const ConfigSummaryDefinitionListWrapper = styled.div`\n+  dl {\n+    margin-top: 10px;\n+\n+    dt {\n+      float: left;\n+      clear: left;\n+    }\n+\n+    dd {\n+      margin-left: 185px;\n+      word-wrap: break-word;\n+\n+      &:not(:last-child) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MjgxNw=="}, "originalCommit": {"oid": "35938d1dcbbb8007d4f550f7d21c85836f215592"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4359, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}