{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzMzg4NTc5", "number": 8469, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1MzowOFrOEM9LFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1Nzo0M1rOEM9SbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDIwNjI5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/event/EventImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1MzowOFrOGvXcVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1MzowOFrOGvXcVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMDM0Mg==", "bodyText": "Passing ObjectMapper here is certainly not ideal, because it becomes part of the Indexable interface although it's only needed for this implementation, but I don't have a straightforward alternative and am certainly fine with improving the mapping in a later PR.", "url": "https://github.com/Graylog2/graylog2-server/pull/8469#discussion_r452320342", "createdAt": "2020-07-09T15:53:08Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/events/event/EventImpl.java", "diffHunk": "@@ -272,6 +290,29 @@ public EventDto toDto() {\n                 .build();\n     }\n \n+    @Override\n+    public Map<String, Object> toElasticSearchObject(ObjectMapper objectMapper, @Nonnull Meter invalidTimestampMeter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2072f65cf7df27f1f7b29761daf2621fd413fe"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDIyNTA5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/indices/EventIndexer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1Nzo0M1rOGvXoMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTo1Nzo0M1rOGvXoMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzM3OA==", "bodyText": "The method should be renamed to indexSetsForStreams", "url": "https://github.com/Graylog2/graylog2-server/pull/8469#discussion_r452323378", "createdAt": "2020-07-09T15:57:43Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/events/indices/EventIndexer.java", "diffHunk": "@@ -56,19 +59,20 @@ public void write(List<EventWithContext> eventsWithContext) {\n \n         // Pre-load all write index targets of all events to avoid looking them up for every event when building the bulk request\n         final Set<String> streamIds = streamIdsForEvents(eventsWithContext);\n-        final Map<String, String> streamIndices = indexAliasesForStreams(streamIds);\n-        final List<Map.Entry<String, Event>> requests = eventsWithContext.stream()\n+        final Map<String, IndexSet> streamIndices = indexAliasesForStreams(streamIds);\n+        final List<IndexingRequest> requests = eventsWithContext.stream()\n                 .map(EventWithContext::event)\n                 // Collect a set of indices for the event to avoid writing to the same index set twice if\n                 // multiple streams use the same index set.\n                 .flatMap(event -> assignEventsToTargetIndices(event, streamIndices))\n+                .map(event -> IndexingRequest.create(event.getKey(), event.getValue()))\n                 .collect(Collectors.toList());\n-        eventIndexerAdapter.write(requests);\n+        messages.bulkIndexRequests(requests, true);\n     }\n \n-    private Map<String, String> indexAliasesForStreams(Set<String> streamIds) {\n+    private Map<String, IndexSet> indexAliasesForStreams(Set<String> streamIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2072f65cf7df27f1f7b29761daf2621fd413fe"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4099, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}