{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0ODQzNjQ3", "number": 9569, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo0MDo0MFrOFWliXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo0MDo0MFrOFWliXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MjI3OTk5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/EditWidgetFrame.test.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo0MDo0MFrOIfq2SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo0MDo0MFrOIfq2SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3ODc5Mw==", "bodyText": "What is the problem with this?", "url": "https://github.com/Graylog2/graylog2-server/pull/9569#discussion_r570078793", "createdAt": "2021-02-04T09:40:40Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/widgets/EditWidgetFrame.test.tsx", "diffHunk": "@@ -75,46 +75,46 @@ describe('EditWidgetFrame', () => {\n       </ViewTypeContext.Provider>\n     ));\n \n-    it('changes the widget\\'s timerange when time range input is used', async () => {\n-      const { getByDisplayValue, getByText, getByTitle } = renderSUT();\n-      const timeRangeSelect = getByDisplayValue('Search in last day');\n-\n-      expect(timeRangeSelect).not.toBeNull();\n-\n-      const optionForAllMessages = asElement(getByText('Search in all messages'), HTMLOptionElement);\n-\n-      fireEvent.change(timeRangeSelect, { target: { value: optionForAllMessages.value } });\n-\n-      const searchButton = getByTitle(/Perform search/);\n-\n-      fireEvent.click(searchButton);\n-\n-      await waitFor(() => expect(WidgetActions.update).toHaveBeenCalledWith('deadbeef', expect.objectContaining({\n-        timerange: { type: 'relative', range: 0 },\n-      })));\n-    });\n-\n-    it('changes the widget\\'s timerange type when switching to absolute time range', async () => {\n-      const { getByText, getByTitle } = renderSUT();\n-      const absoluteTimeRangeSelect = getByText('Absolute');\n-\n-      expect(absoluteTimeRangeSelect).not.toBeNull();\n-\n-      fireEvent.click(absoluteTimeRangeSelect);\n-\n-      const searchButton = getByTitle(/Perform search/);\n-\n-      fireEvent.click(searchButton);\n-\n-      await waitFor(() => expect(WidgetActions.update)\n-        .toHaveBeenLastCalledWith('deadbeef', expect.objectContaining({\n-          timerange: {\n-            type: 'absolute',\n-            from: '2019-10-10T12:21:31.146Z',\n-            to: '2019-10-10T12:26:31.146Z',\n-          },\n-        })));\n-    });\n+    // it('changes the widget\\'s timerange when time range input is used', async () => {\n+    //   const { getByDisplayValue, getByText, getByTitle } = renderSUT();\n+    //   const timeRangeSelect = getByDisplayValue('Search in last day');\n+    //\n+    //   expect(timeRangeSelect).not.toBeNull();\n+    //\n+    //   const optionForAllMessages = asElement(getByText('Search in all messages'), HTMLOptionElement);\n+    //\n+    //   fireEvent.change(timeRangeSelect, { target: { value: optionForAllMessages.value } });\n+    //\n+    //   const searchButton = getByTitle(/Perform search/);\n+    //\n+    //   fireEvent.click(searchButton);\n+    //\n+    //   await waitFor(() => expect(WidgetActions.update).toHaveBeenCalledWith('deadbeef', expect.objectContaining({\n+    //     timerange: { type: 'relative', range: 0 },\n+    //   })));\n+    // });\n+\n+    // it('changes the widget\\'s timerange type when switching to absolute time range', async () => {\n+    //   const { getByText, getByTitle } = renderSUT();\n+    //   const absoluteTimeRangeSelect = getByText('Absolute');\n+    //\n+    //   expect(absoluteTimeRangeSelect).not.toBeNull();\n+    //\n+    //   fireEvent.click(absoluteTimeRangeSelect);\n+    //\n+    //   const searchButton = getByTitle(/Perform search/);\n+    //\n+    //   fireEvent.click(searchButton);\n+    //\n+    //   await waitFor(() => expect(WidgetActions.update)\n+    //     .toHaveBeenLastCalledWith('deadbeef', expect.objectContaining({\n+    //       timerange: {\n+    //         type: 'absolute',\n+    //         from: '2019-10-10T12:21:31.146Z',\n+    //         to: '2019-10-10T12:26:31.146Z',\n+    //       },\n+    //     })));\n+    // });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a50f68ebf40798804403c5060b3092d773a18e59"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4393, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}