{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTYzMzcz", "number": 7342, "title": "Add more tests for search page components", "bodyText": "This PR adds more tests for the NewSearchPage, NewDashboardPage, ShowDashboardInBigDisplayMode, StreamSearchPage and SearchResult\nIt's mainly in draft mode to clarify some remaining questions.\nTypes of changes\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Refactoring (non-breaking change)\n Breaking change (fix or feature that would cause existing functionality to change)\n\nChecklist:\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n I have read the CONTRIBUTING document.\n I have added tests to cover my changes.", "createdAt": "2020-01-31T12:40:22Z", "url": "https://github.com/Graylog2/graylog2-server/pull/7342", "merged": true, "mergeCommit": {"oid": "149b51493b3fcf9b64d2a1444c822fa0abb7eda8"}, "closed": true, "closedAt": "2020-02-24T14:18:29Z", "author": {"login": "linuspahl"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_uhMjgFqTM1MTQ4MDYyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcB8s_RgBqjMwMTcxMjgwODE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDgwNjI1", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-351480625", "createdAt": "2020-01-31T12:44:03Z", "commit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0NDowM1rOFkKSIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0NDowM1rOFkKSIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2MTUzNg==", "bodyText": "This throwed a PropType error. I removed the isRequired and added undefined as a default props, because it's the state, before the store got connected.", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#discussion_r373461536", "createdAt": "2020-01-31T12:44:03Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/dashboard/BigDisplayModeHeader.jsx", "diffHunk": "@@ -36,8 +36,14 @@ const BigDisplayModeHeader = ({ view: { activeQuery, view } = {} }: Props) => {\n \n BigDisplayModeHeader.propTypes = {\n   view: PropTypes.shape({\n-    title: PropTypes.string.isRequired,\n-  }).isRequired,\n+    view: PropTypes.shape({\n+      title: PropTypes.string.isRequired,\n+    }),\n+  }),\n+};\n+\n+BigDisplayModeHeader.defaultProps = {\n+  view: undefined,\n };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDgxMDY2", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-351481066", "createdAt": "2020-01-31T12:45:02Z", "commit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0NTowM1rOFkKTXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo0NTowM1rOFkKTXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2MTg1Mg==", "bodyText": "When I go it right processHooks expects the query object instead of the full location.", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#discussion_r373461852", "createdAt": "2020-01-31T12:45:03Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/NewDashboardPage.jsx", "diffHunk": "@@ -31,7 +32,7 @@ const NewDashboardPage = ({ route, location, loadingViewHooks, executingViewHook\n     const { state = {} } = location;\n     const { view: searchView } = state;\n     if (searchView && searchView.search) {\n-      const query = location;\n+      const { query } = location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDg3MjU4", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-351487258", "createdAt": "2020-01-31T12:57:45Z", "commit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo1Nzo0NVrOFkKl_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMjo1Nzo0NVrOFkKl_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2NjYyMQ==", "bodyText": "Question: At first I was not aware of the connect mock we are using for several other tests. The above tests are working without the connect mock, but at some point I needed to add the cleanup method in afterEach.\nImplementing the cleanup method without the conntect mock throws the following error: TypeError: desub is not a function\nBut with the connect mock, the view returned from ViewStore.getInitialState is no longer available in e.g. the BigDisplayModeHeader\nMy question is, how to deal with this scenario?", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#discussion_r373466621", "createdAt": "2020-01-31T12:57:45Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/ShowDashboardInBigDisplayMode.test.jsx", "diffHunk": "@@ -0,0 +1,98 @@\n+// @flow strict\n+import * as React from 'react';\n+import { render, cleanup, wait } from '@testing-library/react';\n+\n+import { StoreMock as MockStore } from 'helpers/mocking';\n+import MockQuery from 'views/logic/queries/Query';\n+import { RefreshActions } from 'views/stores/RefreshStore';\n+import View from 'views/logic/views/View';\n+\n+import ShowDashboardInBigDisplayMode from 'views/pages/ShowDashboardInBigDisplayMode';\n+\n+const mockView = View.builder()\n+  .type(View.Type.Dashboard)\n+  .id('view-id')\n+  .title('view title')\n+  .build();\n+\n+jest.mock('stores/connect', () => x => x);\n+jest.mock('react-router', () => ({ withRouter: x => x }));\n+jest.mock('views/stores/RefreshStore', () => ({\n+  RefreshActions: {\n+    setInterval: jest.fn(),\n+    enable: jest.fn(),\n+    disable: jest.fn(),\n+  },\n+}));\n+jest.mock('views/stores/ViewStore', () => ({\n+  ViewStore: MockStore(\n+    'listen',\n+    ['getInitialState', () => ({ activeQuery: 'somequery', view: mockView })],\n+  ),\n+}));\n+jest.mock('views/stores/SearchExecutionStateStore', () => ({\n+  SearchExecutionStateStore: { listen: jest.fn() },\n+}));\n+jest.mock('views/stores/CurrentQueryStore', () => ({\n+  CurrentQueryStore: MockStore(['getInitialState', () => MockQuery.builder().build()], 'listen'),\n+}));\n+\n+describe('ShowDashboardInBigDisplayMode', () => {\n+  const mockLocation = {\n+    query: {\n+      interval: '30', refresh: '10',\n+    },\n+  };\n+\n+  afterEach(() => {\n+    cleanup();\n+    jest.clearAllMocks();\n+  });\n+\n+  it('sets refresh interval correctly based on location query', async () => {\n+    render(<ShowDashboardInBigDisplayMode route={{}}\n+                                          params={{ viewId: mockView.id }}\n+                                          location={mockLocation} />);\n+    await wait(() => expect(RefreshActions.setInterval).toHaveBeenCalledTimes(1));\n+    await wait(() => expect(RefreshActions.setInterval).toHaveBeenCalledWith(10000));\n+  });\n+\n+  it('should enable refresh actions', async () => {\n+    render(<ShowDashboardInBigDisplayMode route={{}}\n+                                          params={{ viewId: mockView.id }}\n+                                          location={mockLocation} />);\n+    await wait(() => expect(RefreshActions.enable).toHaveBeenCalledTimes(1));\n+  });\n+\n+  it('should set new refresh interval when location query refresh param changes', async () => {\n+    const { rerender } = render(<ShowDashboardInBigDisplayMode route={{}}\n+                                                               params={{ viewId: mockView.id }}\n+                                                               location={mockLocation} />);\n+    rerender(<ShowDashboardInBigDisplayMode route={{}}\n+                                            params={{ viewId: mockView.id }}\n+                                            location={{ query: { ...mockLocation.query, refresh: '20' } }} />);\n+\n+    await wait(() => expect(RefreshActions.setInterval).toHaveBeenCalledTimes(2));\n+    await wait(() => expect(RefreshActions.setInterval).toHaveBeenCalledWith(20000));\n+  });\n+\n+  it('should not change RefreshActions when query refresh param did not changes', async () => {\n+    const { rerender } = render(<ShowDashboardInBigDisplayMode route={{}}\n+                                                               params={{ viewId: mockView.id }}\n+                                                               location={mockLocation} />);\n+    rerender(<ShowDashboardInBigDisplayMode route={{}}\n+                                            params={{ viewId: mockView.id }}\n+                                            location={mockLocation} />);\n+\n+    await wait(() => expect(RefreshActions.setInterval).toHaveBeenCalledTimes(1));\n+    await wait(() => expect(RefreshActions.enable).toHaveBeenCalledTimes(1));\n+  });\n+\n+  // it('should display view title', async () => {\n+  //   const { getByText } = render(<ShowDashboardInBigDisplayMode route={{}}\n+  //                                                               params={{ viewId: mockView.id }}\n+  //                                                               location={mockLocation} />);\n+\n+  //   await waitForElement(() => getByText('view title'));\n+  // });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDk0NjE0", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-351494614", "createdAt": "2020-01-31T13:11:58Z", "commit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoxMTo1OFrOFkK6rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoxMTo1OFrOFkK6rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3MTkxNg==", "bodyText": "Question: So far we are not using requireActual. it looked like the best solution for me, in the context of the following case:\nThis is the related import import ViewLoader, { processHooks } from 'views/logic/views/ViewLoader';\nWe need to mock processHooks, to test if it got called correctly. But I don't want to mock the ViewLoader, because I need to trigger e.g. the onError function we are passing to the ViewLoader. This is the main reason for the above implementation.\nHaving a look at e.g. the the ShowViewPage, I saw a different usage of the ViewLoader regarding the import. The ViewLoader and processHooks are getting imported the same way, but we are not using the ViewLoader directly. We are defining it as a default prop.\nMy question is, should we unify the usage of the ViewLoader for NewDashboardPage, NewSearchPage, ShowViewPage and StreamSearchPage?\nThe Implementation with the default prop would simplify the described test case.", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#discussion_r373471916", "createdAt": "2020-01-31T13:11:58Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/NewSearchPage.test.jsx", "diffHunk": "@@ -0,0 +1,194 @@\n+// @flow strict\n+import * as React from 'react';\n+import { render, cleanup, wait, waitForElement, fireEvent } from 'wrappedTestingLibrary';\n+\n+import { StoreMock as MockStore } from 'helpers/mocking';\n+import asMock from 'helpers/mocking/AsMock';\n+\n+import { processHooks } from 'views/logic/views/ViewLoader';\n+import { syncWithQueryParameters } from 'views/hooks/SyncWithQueryParameters';\n+import { ViewActions } from 'views/stores/ViewStore';\n+import { ViewManagementActions } from 'views/stores/ViewManagementStore';\n+import NewViewLoaderContext from 'views/logic/NewViewLoaderContext';\n+import Search from 'views/logic/search/Search';\n+import View from 'views/logic/views/View';\n+import ViewLoaderContext from 'views/logic/ViewLoaderContext';\n+\n+import NewSearchPage from './NewSearchPage';\n+\n+const mockExtendedSearchPage = jest.fn(() => <div>Extended search page</div>);\n+const mockView = View.create()\n+  .toBuilder()\n+  .type(View.Type.Search)\n+  .search(Search.builder().build())\n+  .build();\n+\n+jest.mock('react-router', () => ({ withRouter: x => x }));\n+jest.mock('./ExtendedSearchPage', () => mockExtendedSearchPage);\n+jest.mock('views/stores/SearchStore', () => MockStore());\n+jest.mock('views/stores/ViewStore', () => ({\n+  ViewActions: { create: jest.fn(() => Promise.resolve({ view: mockView })) },\n+}));\n+jest.mock('views/hooks/SyncWithQueryParameters', () => ({\n+  syncWithQueryParameters: jest.fn(),\n+}));\n+jest.mock('views/stores/ViewManagementStore', () => ({\n+  ViewManagementActions: {\n+    get: jest.fn(() => Promise.resolve()),\n+  },\n+}));\n+jest.mock('views/logic/views/ViewLoader', () => {\n+  const originalModule = jest.requireActual('views/logic/views/ViewLoader');\n+  return {\n+    __esModule: true,\n+    ...originalModule,\n+    processHooks: jest.fn((promise, loadHooks, executeHooks, query, onSuccess) => Promise.resolve().then(onSuccess)),\n+  };\n+});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTAxNTc1", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-351501575", "createdAt": "2020-01-31T13:25:21Z", "commit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNToyMVrOFkLOoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNToyMVrOFkLOoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NzAyNQ==", "bodyText": "Question: Having a look at the implementation of processHooks, I realized we should unify the usage, especially in the context of the error case. Sometimes we are catching the error and creating a UserNotification:\n return processHooks(\n      ...\n ).catch(\n     error => UserNotification.error(`Executing search failed with error: ${error}`, 'Could not execute search'),\n);\n\nsometimes we are using the processHooks onError argument, to set the hookComponent state\nreturn viewLoader(\n      ...\n      (e) => {\n        if (e instanceof Error) {\n          throw e;\n        }\n        this.setState({ hookComponent: e });\n      },\n\nand sometimes we are doing the same, but without checking the error instance.\nMy main question is related to the hookComponent. It looks like we are defining a hookComponent when processHooks errors. When the hookComponent is defined we'll display it instead of the ExtendedSearchPage. I want to test tis case, but looking at the code I don't understand when the hookComponent (e.g. in the last code snippet) gets defined. because when it is an error, setState will not get called. When it is not an error, the onError function passed to processHooks will not getCalled.", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#discussion_r373477025", "createdAt": "2020-01-31T13:25:21Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/NewSearchPage.test.jsx", "diffHunk": "@@ -0,0 +1,194 @@\n+// @flow strict\n+import * as React from 'react';\n+import { render, cleanup, wait, waitForElement, fireEvent } from 'wrappedTestingLibrary';\n+\n+import { StoreMock as MockStore } from 'helpers/mocking';\n+import asMock from 'helpers/mocking/AsMock';\n+\n+import { processHooks } from 'views/logic/views/ViewLoader';\n+import { syncWithQueryParameters } from 'views/hooks/SyncWithQueryParameters';\n+import { ViewActions } from 'views/stores/ViewStore';\n+import { ViewManagementActions } from 'views/stores/ViewManagementStore';\n+import NewViewLoaderContext from 'views/logic/NewViewLoaderContext';\n+import Search from 'views/logic/search/Search';\n+import View from 'views/logic/views/View';\n+import ViewLoaderContext from 'views/logic/ViewLoaderContext';\n+\n+import NewSearchPage from './NewSearchPage';\n+\n+const mockExtendedSearchPage = jest.fn(() => <div>Extended search page</div>);\n+const mockView = View.create()\n+  .toBuilder()\n+  .type(View.Type.Search)\n+  .search(Search.builder().build())\n+  .build();\n+\n+jest.mock('react-router', () => ({ withRouter: x => x }));\n+jest.mock('./ExtendedSearchPage', () => mockExtendedSearchPage);\n+jest.mock('views/stores/SearchStore', () => MockStore());\n+jest.mock('views/stores/ViewStore', () => ({\n+  ViewActions: { create: jest.fn(() => Promise.resolve({ view: mockView })) },\n+}));\n+jest.mock('views/hooks/SyncWithQueryParameters', () => ({\n+  syncWithQueryParameters: jest.fn(),\n+}));\n+jest.mock('views/stores/ViewManagementStore', () => ({\n+  ViewManagementActions: {\n+    get: jest.fn(() => Promise.resolve()),\n+  },\n+}));\n+jest.mock('views/logic/views/ViewLoader', () => {\n+  const originalModule = jest.requireActual('views/logic/views/ViewLoader');\n+  return {\n+    __esModule: true,\n+    ...originalModule,\n+    processHooks: jest.fn((promise, loadHooks, executeHooks, query, onSuccess) => Promise.resolve().then(onSuccess)),\n+  };\n+});\n+\n+describe('NewSearchPage', () => {\n+  const mockRouter = {\n+    getCurrentLocation: jest.fn(() => ({ pathname: '/search', search: '?q=&rangetype=relative&relative=300' })),\n+  };\n+  const mockLocation = {\n+    pathname: '/search',\n+    query: {\n+      q: '',\n+      rangetype: 'relative',\n+      relative: '300',\n+    },\n+  };\n+  afterEach(() => {\n+    cleanup();\n+    jest.clearAllMocks();\n+  });\n+\n+  it('should render minimal', async () => {\n+    const { getByText } = render(<NewSearchPage route={{}} router={mockRouter} location={{}} />);\n+    await waitForElement(() => getByText('Extended search page'));\n+  });\n+\n+  it('should show spinner while loading view', () => {\n+    const { getByText } = render(<NewSearchPage route={{}} router={mockRouter} location={{}} />);\n+    expect(getByText('Loading...')).not.toBeNull();\n+  });\n+\n+  describe('mounting', () => {\n+    it('should create new view with type search', async () => {\n+      const createViewAction = asMock(ViewActions.create);\n+\n+      render(<NewSearchPage route={{}}\n+                            router={mockRouter}\n+                            location={{}} />);\n+\n+      await wait(() => expect(createViewAction).toBeCalledTimes(1));\n+      await wait(() => expect(createViewAction).toHaveBeenCalledWith(View.Type.Search));\n+    });\n+\n+    it('should process hooks with provided location query', async () => {\n+      const processHooksAction = asMock(processHooks);\n+\n+      render(<NewSearchPage route={{}}\n+                            router={mockRouter}\n+                            location={mockLocation} />);\n+\n+      await wait(() => expect(processHooksAction).toBeCalledTimes(1));\n+      await wait(() => expect(processHooksAction.mock.calls[0][3]).toStrictEqual({ q: '', rangetype: 'relative', relative: '300' }));\n+    });\n+  });\n+\n+  describe('loading another view', () => {\n+    it('should be possible with specific view id', async () => {\n+      mockExtendedSearchPage.mockImplementation(() => (\n+        <ViewLoaderContext.Consumer>\n+          {loadView => <button type=\"button\" onClick={() => loadView && loadView('special-view-id')}>Load view</button>}\n+        </ViewLoaderContext.Consumer>\n+      ));\n+      const viewGetAction = asMock(ViewManagementActions.get);\n+\n+      const { getByText } = render(<NewSearchPage route={{}}\n+                                                  router={mockRouter}\n+                                                  location={{}} />);\n+      const viewLoadButton = await waitForElement(() => getByText('Load view'));\n+      fireEvent.click(viewLoadButton);\n+\n+      await wait(() => expect(viewGetAction).toHaveBeenCalledTimes(1));\n+      await wait(() => expect(viewGetAction).toHaveBeenCalledWith('special-view-id'));\n+    });\n+\n+    // it('should show error message when loading fails', async () => {\n+    //   const hookComponent = <div>The hook component</div>;\n+    //   ViewManagementActions.get = mockAction(jest.fn(() => Promise.reject(hookComponent)));\n+    //   mockExtendedSearchPage.mockImplementation(() => (\n+    //     <ViewLoaderContext.Consumer>\n+    //       {loadView => loadView && <button type=\"button\" onClick={() => loadView('special-view-id')}>Load view</button>}\n+    //     </ViewLoaderContext.Consumer>\n+    //   ));\n+\n+    //   const { getByText } = render(<NewSearchPage route={{}}\n+    //                                               router={mockRouter}\n+    //                                               location={{}} />);\n+    //   const viewLoadButton = await waitForElement(() => getByText('Load view'));\n+    //   fireEvent.click(viewLoadButton);\n+\n+    //   await waitForElement(() => getByText('The hook component'));\n+    // });\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTAyNTg0", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-351502584", "createdAt": "2020-01-31T13:27:14Z", "commit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNzoxNVrOFkLRjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyNzoxNVrOFkLRjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3Nzc3NA==", "bodyText": "I removed  the ViewMetadataStore and CurrentQueryStore  usage, because it looks like we are not using viewMetadata and query.", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#discussion_r373477774", "createdAt": "2020-01-31T13:27:15Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/ShowDashboardInBigDisplayMode.jsx", "diffHunk": "@@ -64,4 +62,4 @@ const ShowDashboardInBigDisplayMode = ({ location, params, route, view: { view,\n   );\n };\n \n-export default withRouter(connect(ShowDashboardInBigDisplayMode, { view: ViewStore, viewMetadata: ViewMetadataStore, query: CurrentQueryStore }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b45a5564e4232f0f404aa43166c5ce900fe737"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8ad3484e7b0051d5857980c6699bd3b6614a3dc", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a8ad3484e7b0051d5857980c6699bd3b6614a3dc", "committedDate": "2020-02-03T13:58:57Z", "message": "Remove not needed mock in ShowDashboardInBigDisplayMode test"}, "afterCommit": {"oid": "bc88c9c089a79d54ce4a6fd91fc203b506f1f001", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/bc88c9c089a79d54ce4a6fd91fc203b506f1f001", "committedDate": "2020-02-03T16:00:57Z", "message": "Refactor StreamSearchPage test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b967aa422c5db417f3267fe2491f9948a66c37e", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6b967aa422c5db417f3267fe2491f9948a66c37e", "committedDate": "2020-02-03T16:18:22Z", "message": "Refactor NewDashboardPage tests"}, "afterCommit": {"oid": "2dafd56d787340a73652b01162659114bb9ea78f", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/2dafd56d787340a73652b01162659114bb9ea78f", "committedDate": "2020-02-03T16:20:06Z", "message": "Refactor NewDashboardPage tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8496b480971ce5e8c230187e046d554adc4218b1", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/8496b480971ce5e8c230187e046d554adc4218b1", "committedDate": "2020-02-04T09:16:29Z", "message": "Remove auto generated yarn.lock"}, "afterCommit": {"oid": "bebd49c46bc5147f8f3dfa25ba33ce12482eaa0a", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/bebd49c46bc5147f8f3dfa25ba33ce12482eaa0a", "committedDate": "2020-02-04T09:16:40Z", "message": "Remove auto generated yarn.lock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDMyOTY5", "url": "https://github.com/Graylog2/graylog2-server/pull/7342#pullrequestreview-355032969", "createdAt": "2020-02-07T09:38:14Z", "commit": {"oid": "bebd49c46bc5147f8f3dfa25ba33ce12482eaa0a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a1d278c1e5d91a6ea1d7873a325c4dc25b6c6e", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/02a1d278c1e5d91a6ea1d7873a325c4dc25b6c6e", "committedDate": "2020-02-07T10:23:15Z", "message": "Add tests for NewSearchPage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6075abaca9a143ffcb53b15184d0888ed1d430e3", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6075abaca9a143ffcb53b15184d0888ed1d430e3", "committedDate": "2020-02-07T10:23:15Z", "message": "Remove not needed mocks for NewSearchPAge test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b40ad7f6a167c547e97d2afd02141bd2bdd9302", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/0b40ad7f6a167c547e97d2afd02141bd2bdd9302", "committedDate": "2020-02-07T10:23:15Z", "message": "Add tests for NewDashboard page\n\n* only pass location query instead of full location to processHooks when transforming search to dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89767ec8d3ca25336a8824345efc5204a8f387ef", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/89767ec8d3ca25336a8824345efc5204a8f387ef", "committedDate": "2020-02-07T10:23:15Z", "message": "Remove empty lines and renamse test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74cd3dec53a503aa3188ef3f425f5e258fc64f0", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a74cd3dec53a503aa3188ef3f425f5e258fc64f0", "committedDate": "2020-02-07T10:23:15Z", "message": "Fix ShowDashboardInBigDisplayMode PropType definition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ef8ce31d15a58960263592ccad15327d4348d8c", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/0ef8ce31d15a58960263592ccad15327d4348d8c", "committedDate": "2020-02-07T10:23:15Z", "message": "Remove not needed stores from BigDisplayModeHeader connect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9210627ea30d26e71f6bad5a30be9830fd74102f", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/9210627ea30d26e71f6bad5a30be9830fd74102f", "committedDate": "2020-02-07T10:23:15Z", "message": "Prevent cannot read view of undefined error in ShowDashboardInBigDisplayMode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf3540dacef1ccb96623509ec55bc1afb947045", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/0bf3540dacef1ccb96623509ec55bc1afb947045", "committedDate": "2020-02-07T10:23:16Z", "message": "Add tests for ShowDashboardInBigDisplayMode page"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccb588c57d25497d904e7ebb633114677ee1407c", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/ccb588c57d25497d904e7ebb633114677ee1407c", "committedDate": "2020-02-07T10:23:16Z", "message": "Test ShowDashboardInBigDisplayMode behaviour on unmount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0d95806bdff0b71deab411ef23a112d376fb02", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/df0d95806bdff0b71deab411ef23a112d376fb02", "committedDate": "2020-02-07T10:23:16Z", "message": "Add tests for StreamSearchPage\n\n* migrate existing enzyme tests to @testing-library/react"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bfedc8e68e1ca4b03e5654b8ade5479f4f134f3", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3bfedc8e68e1ca4b03e5654b8ade5479f4f134f3", "committedDate": "2020-02-07T10:23:16Z", "message": "Remove not needed eslint-disable-next-line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba40a8906de3b6bbe9a4de467485bf3a89df69a", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/8ba40a8906de3b6bbe9a4de467485bf3a89df69a", "committedDate": "2020-02-07T10:23:16Z", "message": "Add comment to clearify syncWithQueryParameters usage when resetting a view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33db4d1e649de7195ebc84e3de9b36c2bf2cf5eb", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/33db4d1e649de7195ebc84e3de9b36c2bf2cf5eb", "committedDate": "2020-02-07T10:23:16Z", "message": "Add more basic test for StreamSearchPage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2a64a17946eb0cb84940926544b3b7513eefa6", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/1a2a64a17946eb0cb84940926544b3b7513eefa6", "committedDate": "2020-02-07T10:23:16Z", "message": "Import test utils from wrappedTestingLibrary instead of @testing-library/react in ShowDashboardInBigDisplayMode test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "defd7d09def0c2a01052a19dc7bd0242975c4678", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/defd7d09def0c2a01052a19dc7bd0242975c4678", "committedDate": "2020-02-07T10:23:16Z", "message": "Improve ShowDashboaardInBigDisplayMode tests by adding mock for store listen functions and removing connect mock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "367cb3fb1e325aca1aa5c987f26409c0f75a67db", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/367cb3fb1e325aca1aa5c987f26409c0f75a67db", "committedDate": "2020-02-07T10:23:16Z", "message": "Remove not working view loader test for NewSearchPage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fe46eeaef1c596d5f9005367a7b0e67f95af9e1", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/2fe46eeaef1c596d5f9005367a7b0e67f95af9e1", "committedDate": "2020-02-07T10:23:16Z", "message": "Remove not needed mock in ShowDashboardInBigDisplayMode test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c79138992b217faff3aad23f04267671da2b4da1", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c79138992b217faff3aad23f04267671da2b4da1", "committedDate": "2020-02-07T10:23:16Z", "message": "Add tests for SearchResult component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "179ebe9adefb96ae451d458e5dc6377addfe4ab3", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/179ebe9adefb96ae451d458e5dc6377addfe4ab3", "committedDate": "2020-02-07T10:23:16Z", "message": "Refactor NewSearchPage tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4875ea571c16d477cf3c8405c7205ec4ec580abd", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/4875ea571c16d477cf3c8405c7205ec4ec580abd", "committedDate": "2020-02-07T10:23:16Z", "message": "Refactor StreamSearchPage test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845e8618bab1d778c5f97e31679d5b24b0006c90", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/845e8618bab1d778c5f97e31679d5b24b0006c90", "committedDate": "2020-02-07T10:23:16Z", "message": "Refactor NewDashboardPage tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f6fb09e08e969ffa564977ed3f8cad7b3752ba", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c7f6fb09e08e969ffa564977ed3f8cad7b3752ba", "committedDate": "2020-02-07T10:23:16Z", "message": "Remove not needed import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9a8a0e2d25bdb990d10a71afcb67b3f0d907248", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e9a8a0e2d25bdb990d10a71afcb67b3f0d907248", "committedDate": "2020-02-07T10:23:16Z", "message": "Remove auto generated yarn.lock"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bebd49c46bc5147f8f3dfa25ba33ce12482eaa0a", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/bebd49c46bc5147f8f3dfa25ba33ce12482eaa0a", "committedDate": "2020-02-04T09:16:40Z", "message": "Remove auto generated yarn.lock"}, "afterCommit": {"oid": "e9a8a0e2d25bdb990d10a71afcb67b3f0d907248", "author": {"user": {"login": "linuspahl", "name": "Linus Pahl"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e9a8a0e2d25bdb990d10a71afcb67b3f0d907248", "committedDate": "2020-02-07T10:23:16Z", "message": "Remove auto generated yarn.lock"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2750, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}