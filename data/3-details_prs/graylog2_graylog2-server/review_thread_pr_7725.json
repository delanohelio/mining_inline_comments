{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTQyMDcx", "number": 7725, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo1NDoyOVrODpynSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo1NDoyOVrODpynSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQ3NDY0OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/elasticsearch/IndexLookupTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo1NDoyOVrOF5LoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTowMzo0MVrOF5L4ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMzcwNA==", "bodyText": "just a nitpick, but wouldn't it be more readable if the private function comes after the test?", "url": "https://github.com/Graylog2/graylog2-server/pull/7725#discussion_r395503704", "createdAt": "2020-03-20T08:54:29Z", "author": {"login": "kmerz"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/elasticsearch/IndexLookupTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.elasticsearch;\n+\n+import org.graylog2.indexer.ranges.IndexRange;\n+import org.graylog2.indexer.ranges.IndexRangeService;\n+import org.graylog2.plugin.database.Persisted;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.streams.Stream;\n+import org.graylog2.streams.StreamService;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptySet;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class IndexLookupTest {\n+\n+    private IndexRangeService indexRangeService;\n+    private StreamService streamService;\n+    private IndexLookup sut;\n+\n+    @BeforeEach\n+    void setUp() {\n+        indexRangeService = mock(IndexRangeService.class);\n+        streamService = mock(StreamService.class);\n+        sut = new IndexLookup(indexRangeService, streamService);\n+    }\n+\n+    @Test\n+    void findsIndicesBelongingToStreamsInTimeRange() {\n+\n+        Set<String> streamIds = mockStreams(\"s-1\", \"s-2\");\n+\n+        List<IndexRange> indexRanges = mockSomeIndexRanges();\n+\n+        IndexRange matchingIndexRange = indexRanges.get(0);\n+\n+        sut.indexRangeContainsOneOfStreams = (i, s) -> i.equals(matchingIndexRange);\n+\n+        Set<String> result = sut.indexNamesForStreamsInTimeRange(streamIds, someTimeRange());\n+\n+        assertThat(result).containsExactly(matchingIndexRange.indexName());\n+    }\n+\n+    private RelativeRange someTimeRange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5488d174283656f8694bb9aabf2f8c1f1a2c83f8"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzgxOA==", "bodyText": "\ud83d\udc4d Yup, moved it down. I placed it after the first usage in the first test, but I agree that it should go with the other helpers to the bottom of the file.", "url": "https://github.com/Graylog2/graylog2-server/pull/7725#discussion_r395507818", "createdAt": "2020-03-20T09:03:41Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/elasticsearch/IndexLookupTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.elasticsearch;\n+\n+import org.graylog2.indexer.ranges.IndexRange;\n+import org.graylog2.indexer.ranges.IndexRangeService;\n+import org.graylog2.plugin.database.Persisted;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.streams.Stream;\n+import org.graylog2.streams.StreamService;\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptySet;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class IndexLookupTest {\n+\n+    private IndexRangeService indexRangeService;\n+    private StreamService streamService;\n+    private IndexLookup sut;\n+\n+    @BeforeEach\n+    void setUp() {\n+        indexRangeService = mock(IndexRangeService.class);\n+        streamService = mock(StreamService.class);\n+        sut = new IndexLookup(indexRangeService, streamService);\n+    }\n+\n+    @Test\n+    void findsIndicesBelongingToStreamsInTimeRange() {\n+\n+        Set<String> streamIds = mockStreams(\"s-1\", \"s-2\");\n+\n+        List<IndexRange> indexRanges = mockSomeIndexRanges();\n+\n+        IndexRange matchingIndexRange = indexRanges.get(0);\n+\n+        sut.indexRangeContainsOneOfStreams = (i, s) -> i.equals(matchingIndexRange);\n+\n+        Set<String> result = sut.indexNamesForStreamsInTimeRange(streamIds, someTimeRange());\n+\n+        assertThat(result).containsExactly(matchingIndexRange.indexName());\n+    }\n+\n+    private RelativeRange someTimeRange() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMzcwNA=="}, "originalCommit": {"oid": "5488d174283656f8694bb9aabf2f8c1f1a2c83f8"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3850, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}