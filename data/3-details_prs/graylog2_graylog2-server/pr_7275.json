{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2ODc2Mjc4", "number": 7275, "title": "UrlWhitelist Contextual UI", "bodyText": "This PR add a functionality that wrap a normal component to allow having a button to show UrlWhiteListForm in modal on validation error.\nBefore this change to add a URL to the whitelist, the user had to go back to the configuration page.\nWith these change a user will be able to add a URL to the whitelist on the context of the form that has a URL field that needs to be validated.\n\nImplement URLWhitelistInput\nImplement URLWhitelistFormModal\n\nFixes #7169\n\nDescription\n\nMotivation and Context\n\n\nHow Has This Been Tested?\n\n\n\nScreenshots (if appropriate):\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Refactoring (non-breaking change)\n Breaking change (fix or feature that would cause existing functionality to change)\n\nChecklist:\n\n\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n I have read the CONTRIBUTING document.\n I have added tests to cover my changes.", "createdAt": "2020-01-24T14:58:58Z", "url": "https://github.com/Graylog2/graylog2-server/pull/7275", "merged": true, "mergeCommit": {"oid": "5827b8e2aa41c04873d5470464a53d0d25ab5a20"}, "closed": true, "closedAt": "2020-03-10T16:12:56Z", "author": {"login": "ousmaneo"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_vfaAAFqTM1MTUxNjUyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMU0orAFqTM3MjEwMTE4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTE2NTIx", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-351516521", "createdAt": "2020-01-31T13:52:00Z", "commit": {"oid": "8e183da34c1fdf6ba88649998d086223bbad9f22"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTMwMzY2", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-351530366", "createdAt": "2020-01-31T14:14:09Z", "commit": {"oid": "8e183da34c1fdf6ba88649998d086223bbad9f22"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTg4NjQz", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-351588643", "createdAt": "2020-01-31T15:38:13Z", "commit": {"oid": "8e183da34c1fdf6ba88649998d086223bbad9f22"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTc1Mzcz", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-352175373", "createdAt": "2020-02-03T11:06:01Z", "commit": {"oid": "8e183da34c1fdf6ba88649998d086223bbad9f22"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NzczODk0", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-359773894", "createdAt": "2020-02-17T14:28:49Z", "commit": {"oid": "67ff2ecb909b6937cab45897d4c167f41feddcdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODo1MFrOFqmVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDoyODo1MFrOFqmVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjY3Nw==", "bodyText": "Should we use createRef here?", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380212677", "createdAt": "2020-02-17T14:28:50Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,157 @@\n+// @flow\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  formType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm;\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      formType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },\n+        isValid: false,\n+      };\n+    }\n+\n+    componentDidMount() {\n+      const { currentUser: { permissions } } = this.props;\n+      if (PermissionsMixin.isPermitted(permissions, ['urlwhitelist:read'])) {\n+        ConfigurationsActions.listWhiteListConfig(URL_WHITELIST_CONFIG);\n+      }\n+    }\n+\n+\n+  _getConfig = (configType: string) => {\n+    const { configuration } = this.props;\n+    if (configuration && configuration[configType]) {\n+      return configuration[configType];\n+    }\n+    return null;\n+  }\n+\n+  _openModal = () => {\n+    if (this.configModal) {\n+      this.configModal.open();\n+    }\n+  }\n+\n+  _closeModal = () => {\n+    if (this.configModal) {\n+      this.configModal.close();\n+    }\n+  }\n+\n+  _saveConfig = (event) => {\n+    if (event) {\n+      event.preventDefault();\n+      event.stopPropagation();\n+    }\n+    const { onUpdate } = this.props;\n+    const { config, isValid } = this.state;\n+    if (isValid) {\n+      this._updateConfig(URL_WHITELIST_CONFIG, config).then(() => {\n+        onUpdate();\n+        this._closeModal();\n+      });\n+    }\n+  }\n+\n+  _update = (config, isValid) => {\n+    const updatedState = { config, isValid };\n+    this.setState(updatedState);\n+  }\n+\n+\n+  _resetConfig = () => {\n+\n+  }\n+\n+  _updateConfig = (configType, config) => {\n+    switch (configType) {\n+      case URL_WHITELIST_CONFIG:\n+        return ConfigurationsActions.updateWhitelist(configType, config);\n+      default:\n+        return ConfigurationsActions.update(configType, config);\n+    }\n+  };\n+\n+\n+  render() {\n+    const urlwhitelistConfig = this._getConfig(URL_WHITELIST_CONFIG);\n+    if (urlwhitelistConfig) {\n+      const { newUrlEntry, formType } = this.props;\n+      const initialConfig = { entries: [...urlwhitelistConfig.entries, { id: uuid(), title: '', value: newUrlEntry, type: formType || 'literal' }], disabled: urlwhitelistConfig.disabled };\n+      const { entries, disabled } = initialConfig;\n+      const { isValid } = this.state;\n+      return (\n+        <>\n+          <IfPermitted permissions=\"urlwhitelist:write\">\n+            <Button bsStyle=\"info\" bsSize=\"xs\" onClick={this._openModal}>Add to URL Whitelist</Button>\n+          </IfPermitted>\n+          <BootstrapModalForm ref={(configModal) => { this.configModal = configModal; }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ff2ecb909b6937cab45897d4c167f41feddcdb"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5Nzc4OTI3", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-359778927", "createdAt": "2020-02-17T14:36:07Z", "commit": {"oid": "67ff2ecb909b6937cab45897d4c167f41feddcdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDozNjowN1rOFqmk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNDozNjowN1rOFqmk8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNjU2MQ==", "bodyText": "Appears to be a floating semicolon", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380216561", "createdAt": "2020-02-17T14:36:07Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/event-notifications/event-notification-types/HttpNotificationForm.jsx", "diffHunk": "@@ -12,9 +11,7 @@ class HttpNotificationForm extends React.Component {\n     onChange: PropTypes.func.isRequired,\n   };\n \n-  static defaultConfig = {\n-    url: '',\n-  };\n+  ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67ff2ecb909b6937cab45897d4c167f41feddcdb"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDQzMDk1", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-360443095", "createdAt": "2020-02-18T15:39:53Z", "commit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTozOTo1M1rOFrHU-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMDoyODoxOVrOFri3gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1MzE0Ng==", "bodyText": "Since we don't use the result of new URL(), I guess we can remove the const.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380753146", "createdAt": "2020-02-18T15:39:53Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/util/URLUtils.js", "diffHunk": "@@ -41,17 +41,29 @@ const URLUtils = {\n   },\n   concatURLPath(...allArgs) {\n     const args = Array(allArgs.length);\n+    // eslint-disable-next-line no-plusplus\n     for (let i = 0; i < allArgs.length; i++) {\n       args[i] = allArgs[i];\n     }\n \n     const joinedPath = `/${args.join('/')}`;\n+    // eslint-disable-next-line no-useless-escape\n     return joinedPath.replace(/[\\/]+/g, '/');\n   },\n   areCredentialsInURLSupported() {\n     const browser = this.parser.getBrowser();\n     return browser.name !== 'IE' && browser.name !== 'Edge';\n   },\n-};\n+  isValidURL(str) {\n+    let isValid = true;\n+    try {\n+      // eslint-disable-next-line no-unused-vars\n+      const test = new URL(str);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NTcwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                UrlWhitelistCheck: () => { return { url: '/system/urlwhitelist/check' }; },\n          \n          \n            \n                urlWhitelistCheck: () => { return { url: '/system/urlwhitelist/check' }; },", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380755703", "createdAt": "2020-02-18T15:43:37Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/routing/ApiRoutes.js", "diffHunk": "@@ -227,6 +227,8 @@ const ApiRoutes = {\n     substringTest: () => { return { url: '/tools/substring_tester' }; },\n     containsStringTest: () => { return { url: '/tools/contains_string_tester' }; },\n     lookupTableTest: () => { return { url: '/tools/lookup_table_tester' }; },\n+    UrlWhitelistCheck: () => { return { url: '/system/urlwhitelist/check' }; },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1ODY3MQ==", "bodyText": "We should use flow strict in the header\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // @flow\n          \n          \n            \n            // @flow strict", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380758671", "createdAt": "2020-02-18T15:47:41Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1ODgyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // @flow\n          \n          \n            \n            // @flow strict", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380758829", "createdAt": "2020-02-18T15:47:54Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NTE5Ng==", "bodyText": "As far as I can see this method is not needed, we could use handleFormEvent directly.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380775196", "createdAt": "2020-02-18T16:11:26Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, formType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    UIUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  const handleChange = (event: SyntheticInputEvent<EventTarget>) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NjI0Mw==", "bodyText": "I think handleFormEvent is not descriptive of what the prop does. Since other inputs use onChange for this, I think it would be better to also use that name.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380776243", "createdAt": "2020-02-18T16:13:03Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NDU5MA==", "bodyText": "I have some troubles understanding parts of this code. I think we should try to use the callback directly with a fake event or make the callback support non-event values.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380794590", "createdAt": "2020-02-18T16:40:48Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/util/UIUtils.js", "diffHunk": "@@ -22,6 +22,16 @@ const UIUtils = {\n \n     return rect.top > 0 && rect.bottom > 0;\n   },\n+  triggerInput(urlInput) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NjM4Nw==", "bodyText": "This message is using an old URL when I'm editing the input:", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380796387", "createdAt": "2020-02-18T16:43:38Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODc1NA==", "bodyText": "I think we should restrict the actual values that are accepted for this prop. I also think that the name could be more descriptive, something like urlType is clearer to me than formType.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381188754", "createdAt": "2020-02-19T10:00:35Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, formType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    UIUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  const handleChange = (event: SyntheticInputEvent<EventTarget>) => {\n+    handleFormEvent(event);\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);\n+\n+\n+  const addButton = isError() && !isWhitelisted ? <URLWhitelistFormModal newUrlEntry={suggestedUrl} onUpdate={onUpdate} formType={formType} /> : '';\n+  const helpMessage = <>{ownValidationMessage} {addButton}</>;\n+  return (\n+    <Input type=\"text\"\n+           id=\"url\"\n+           name=\"url\"\n+           label={label}\n+           ref={ref}\n+           autoFocus\n+           required\n+           onChange={handleChange}\n+           help={helpMessage}\n+           bsStyle={currentValidationState}\n+           value={url}\n+           labelClassName={labelClassName}\n+           wrapperClassName={wrapperClassName} />\n+  );\n+};\n+\n+URLWhitelistInput.propTypes = {\n+  label: PropTypes.string.isRequired,\n+  handleFormEvent: PropTypes.func.isRequired,\n+  validationState: PropTypes.string,\n+  validationMessage: PropTypes.oneOfType([\n+    PropTypes.object,\n+    PropTypes.string,\n+  ]),\n+  url: PropTypes.string,\n+  labelClassName: PropTypes.string,\n+  wrapperClassName: PropTypes.string,\n+  formType: PropTypes.string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDM1NA==", "bodyText": "The inline button there looks odd to me, maybe @kyleknighted has an idea to improve that a bit? Also I think we should treat differently the case when a URL is not in the whitelist, and when the URL is not valid.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381190354", "createdAt": "2020-02-19T10:03:23Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, formType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    UIUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  const handleChange = (event: SyntheticInputEvent<EventTarget>) => {\n+    handleFormEvent(event);\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);\n+\n+\n+  const addButton = isError() && !isWhitelisted ? <URLWhitelistFormModal newUrlEntry={suggestedUrl} onUpdate={onUpdate} formType={formType} /> : '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NDUzNw==", "bodyText": "Since the URLWhitelistInput will be used in many different forms across the product, I think it should live somewhere else. Since some shared inputs are already in components/common, I would suggest moving it there.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381194537", "createdAt": "2020-02-19T10:10:39Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjA4NQ==", "bodyText": "I'm not sure why we need to return true in here, could you please explain it? :)", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381196085", "createdAt": "2020-02-19T10:13:25Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/UrlWhiteListForm.jsx", "diffHunk": "@@ -132,7 +134,7 @@ const UrlWhiteListForm = ({ urls, onUpdate, disabled }: Props) => {\n           <td>\n             <Input type=\"text\"\n                    id={`title-input${idx}`}\n-                   ref={(elem) => { inputs[`title${idx}`] = elem; }}\n+                   ref={(elem) => { inputs[`title${idx}`] = elem; return true; }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjE3OA==", "bodyText": "Same as above.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381196178", "createdAt": "2020-02-19T10:13:33Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/UrlWhiteListForm.jsx", "diffHunk": "@@ -143,7 +145,7 @@ const UrlWhiteListForm = ({ urls, onUpdate, disabled }: Props) => {\n           <td>\n             <Input type=\"text\"\n                    id={`value-input${idx}`}\n-                   ref={(elem) => { inputs[`value${idx}`] = elem; }}\n+                   ref={(elem) => { inputs[`value${idx}`] = elem; return true; }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5OTgwNQ==", "bodyText": "Most of the code in this component should be very similar to parts of what we have in UrlWhiteListConfig.jsx, I think we should try and make a single component doing this, so we can reuse it better whenever is needed.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381199805", "createdAt": "2020-02-19T10:20:09Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  formType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDQ1NQ==", "bodyText": "This prop is marked as unused, do we really use it in the component or can we delete it?", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381200455", "createdAt": "2020-02-19T10:21:17Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/lookup-tables/adapters/DSVHTTPAdapterFieldSet.jsx", "diffHunk": "@@ -107,4 +103,13 @@ const DSVHTTPAdapterFieldSet = ({ handleFormEvent, validationState, validationMe\n   );\n };\n \n+DSVHTTPAdapterFieldSet.propTypes = {\n+  config: PropTypes.object.isRequired,\n+  // eslint-disable-next-line react/no-unused-prop-types\n+  updateConfig: PropTypes.func.isRequired,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDM1Mg==", "bodyText": "When creating a new Data Adapter the whitelist check is returning errors before the field is set, but I think that should not happen.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381204352", "createdAt": "2020-02-19T10:28:19Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/lookup-tables/adapters/HTTPJSONPathAdapterFieldSet.jsx", "diffHunk": "@@ -17,46 +18,43 @@ class HTTPJSONPathAdapterFieldSet extends React.Component {\n   state = {};\n \n   onHTTPHeaderUpdate = (headers) => {\n-    const config = ObjectUtils.clone(this.props.config);\n-    config.headers = headers;\n-    this.props.updateConfig(config);\n+    const { config, updateConfig } = this.props;\n+    const configChange = ObjectUtils.clone(config);\n+    configChange.headers = headers;\n+    updateConfig(config);\n   };\n \n   render() {\n-    const { config } = this.props;\n+    const { config, handleFormEvent, validationMessage, validationState } = this.props;\n \n     return (\n       <fieldset>\n-        <Input type=\"text\"\n-               id=\"url\"\n-               name=\"url\"\n-               label=\"Lookup URL\"\n-               autoFocus\n-               required\n-               onChange={this.props.handleFormEvent}\n-               help={this.props.validationMessage('url', 'The URL for the lookup. (this is a template - see documentation)')}\n-               bsStyle={this.props.validationState('url')}\n-               value={config.url}\n-               labelClassName=\"col-sm-3\"\n-               wrapperClassName=\"col-sm-9\" />\n+        <URLWhitelistInput label=\"Lookup URL\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e07b4633d280f60f1db8803d8f465ad3f5edbe", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/b0e07b4633d280f60f1db8803d8f465ad3f5edbe", "committedDate": "2020-02-25T14:38:58Z", "message": "URLWhitelistInput component\n\nThis commit add a functionality that wrap a normal component to allow having a button to show UrlWhiteListForm in modal on validation error.\n\n* Implement URLWhitelistInput\n* Implement URLWhitelistFormModal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62a7f00ad26c70b6a3b17ef43102c4b7b723243", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c62a7f00ad26c70b6a3b17ef43102c4b7b723243", "committedDate": "2020-02-25T14:38:58Z", "message": "Trigger validate on url added to whitelist"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e84e610041d2a78fe9fb0b54d8aaf0904dfbd06c", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e84e610041d2a78fe9fb0b54d8aaf0904dfbd06c", "committedDate": "2020-02-25T14:38:58Z", "message": "Add check urlwhitelist to component on url change.\n\n* Add check whitelist url to ApiRoutes\n* Add checkIsWhitelisted to ToolsStore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f9d7ca34d05b3fd6a6dc1422a810081baa401e", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/56f9d7ca34d05b3fd6a6dc1422a810081baa401e", "committedDate": "2020-02-25T14:38:58Z", "message": "Replace Url Input with URLWhitelistInput\n\n* Use URLWhitelistInput in form that need url whitelist validation.\n* fix linter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e56adcec14f6ea7ff77fd4198e0466b785644d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/b0e56adcec14f6ea7ff77fd4198e0466b785644d", "committedDate": "2020-02-25T14:38:59Z", "message": "Remove unused variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81dbacbe5611f86198ffd2e8dfc418047b785649", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/81dbacbe5611f86198ffd2e8dfc418047b785649", "committedDate": "2020-02-25T14:38:59Z", "message": "Fix error Message on load"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eef4bf0343abbc0d045242c7b335749f45e8a3e", "author": {"user": {"login": "thll", "name": "Othello Maurer"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/9eef4bf0343abbc0d045242c7b335749f45e8a3e", "committedDate": "2020-02-25T14:38:59Z", "message": "Add API to generate a whitelist regex for a template URL\n\nExposes the regex generation logic previously only used in a migration\nto be used by the frontend to propose a regex for a URL template."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "640540156216d234502a5ab6de0dcf3dbc74278e", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/640540156216d234502a5ab6de0dcf3dbc74278e", "committedDate": "2020-02-25T14:38:59Z", "message": "Integrate regex suggestion for HTTPJSONPathAdapter\nThis commit will add Url suggestion for HTTP JSON Adpter using the\nURLWhitelist field.\n* Use generate_regex endpoint to suggest url whitelist entry for a url\ncontaining ${key}.\n* Validate entry on modal loaded.\n* Move triggerInput to utils."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97c19b1eb97b07fc7181c068cd4c1aa8e35ecfaf", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/97c19b1eb97b07fc7181c068cd4c1aa8e35ecfaf", "committedDate": "2020-02-25T14:38:59Z", "message": "Add flow typing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad96d726c075abd6078ab253faf9debccc71cb89", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/ad96d726c075abd6078ab253faf9debccc71cb89", "committedDate": "2020-02-25T14:39:00Z", "message": "fix linter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "690cad27efab2e82647e9cbd7fb6556116ed8099", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/690cad27efab2e82647e9cbd7fb6556116ed8099", "committedDate": "2020-02-25T14:39:00Z", "message": "Fix propTypes validation and validate state update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94ae6239bfbf2e19deb0feb63fbb3b0342c7451d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/94ae6239bfbf2e19deb0feb63fbb3b0342c7451d", "committedDate": "2020-02-25T14:39:00Z", "message": "Fix newUrlEntry propType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36c25b4b1326289e16579ea93405546c8cae8f87", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/36c25b4b1326289e16579ea93405546c8cae8f87", "committedDate": "2020-02-25T14:39:00Z", "message": "update snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b295684460c3e040075c48b0daedf07305e7a7cd", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/b295684460c3e040075c48b0daedf07305e7a7cd", "committedDate": "2020-02-25T14:39:00Z", "message": "use createRef instead of callback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8039ada66dd60bfcdf75e55b3754c083fbe17eae", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/8039ada66dd60bfcdf75e55b3754c083fbe17eae", "committedDate": "2020-02-25T14:39:01Z", "message": "Refactoring and small fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "136f7880fdc9efbe4384d9d7e1e56b7ea3506c1f", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/136f7880fdc9efbe4384d9d7e1e56b7ea3506c1f", "committedDate": "2020-02-25T14:39:01Z", "message": "Update graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx\r\n\r\nlegit\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceddc5c9ff342d9e12cd5db54884af06cdb5c757", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/ceddc5c9ff342d9e12cd5db54884af06cdb5c757", "committedDate": "2020-02-25T14:39:01Z", "message": "Update graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48d1555ffacad2f79af0f6714385a71e0dc3ab4c", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/48d1555ffacad2f79af0f6714385a71e0dc3ab4c", "committedDate": "2020-02-25T14:39:01Z", "message": "Update graylog2-web-interface/src/routing/ApiRoutes.js\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27e43f3eb85e1b161259edb2d8cffc0a38eca97d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/27e43f3eb85e1b161259edb2d8cffc0a38eca97d", "committedDate": "2020-02-25T14:39:01Z", "message": "Move URLWhitelistInput to common folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/906ff88951652cfd84ddef6ef72975ffb82267ad", "committedDate": "2020-02-25T14:39:02Z", "message": "Add URL validation\n\n* check url validation and adjust message\n* Move UrlWhiteListModalForm to common"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82431d5f8d16aae6ed732a179732eb13c7680d09", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/82431d5f8d16aae6ed732a179732eb13c7680d09", "committedDate": "2020-02-25T12:28:20Z", "message": "Merge branch 'url-whitelist-contextual-ui' of github.com:Graylog2/graylog2-server into url-whitelist-contextual-ui"}, "afterCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/906ff88951652cfd84ddef6ef72975ffb82267ad", "committedDate": "2020-02-25T14:39:02Z", "message": "Add URL validation\n\n* check url validation and adjust message\n* Move UrlWhiteListModalForm to common"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzkwMjk0", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-364790294", "createdAt": "2020-02-26T10:37:29Z", "commit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDozNzoyOVrOFumbNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNToyNDo0NVrOFuv9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwODM3NQ==", "bodyText": "We should add this component into components/common/index.jsx, so we can import it using the package, like other common components.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384408375", "createdAt": "2020-02-26T10:37:29Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxNDQ5NQ==", "bodyText": "I think this should not allow any string but list some options. I suggest using probably regex and literal.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384414495", "createdAt": "2020-02-26T10:48:31Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+        setOwnValidationMessage(message);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);\n+\n+\n+  const addButton = isWhitelistError() && !isWhitelisted ? <URLWhitelistFormModal newUrlEntry={suggestedUrl} onUpdate={onUpdate} urlType={urlType} /> : '';\n+  const helpMessage = <>{validationState === null ? ownValidationMessage : validationMessage} {addButton}</>;\n+  return (\n+    <Input type=\"text\"\n+           id=\"url\"\n+           name=\"url\"\n+           label={label}\n+           ref={ref}\n+           autoFocus\n+           required\n+           onChange={onChange}\n+           help={helpMessage}\n+           bsStyle={currentValidationState}\n+           value={url}\n+           labelClassName={labelClassName}\n+           wrapperClassName={wrapperClassName} />\n+  );\n+};\n+\n+URLWhitelistInput.propTypes = {\n+  label: PropTypes.string.isRequired,\n+  onChange: PropTypes.func.isRequired,\n+  validationState: PropTypes.string,\n+  validationMessage: PropTypes.oneOfType([\n+    PropTypes.object,\n+    PropTypes.string,\n+  ]),\n+  url: PropTypes.string,\n+  labelClassName: PropTypes.string,\n+  wrapperClassName: PropTypes.string,\n+  urlType: PropTypes.string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NDY1OQ==", "bodyText": "After looking at this effect again, I think it should actually be split into two different effects: one computing the suggestedUrl, one doing the whitelist check.\nThat way I think it will be clearer what each effect does, and will also let us do the whitelist check before the suggested URL is computed, since right now it doesn't seem to depend on its result.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384484659", "createdAt": "2020-02-26T13:17:04Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+        setOwnValidationMessage(message);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NjYyMg==", "bodyText": "I think the checkIsWhitelisted function should be added as dependency of the effect: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384496622", "createdAt": "2020-02-26T13:39:28Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+        setOwnValidationMessage(message);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1MjgwOQ==", "bodyText": "I guess we can remove this empty method.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384552809", "createdAt": "2020-02-26T15:08:04Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm = React.createRef();\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      urlType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },\n+        isValid: false,\n+      };\n+      this.configModal = React.createRef();\n+    }\n+\n+    componentDidMount() {\n+      const { currentUser: { permissions } } = this.props;\n+      if (PermissionsMixin.isPermitted(permissions, ['urlwhitelist:read'])) {\n+        ConfigurationsActions.listWhiteListConfig(URL_WHITELIST_CONFIG);\n+      }\n+    }\n+\n+\n+  _getConfig = (configType: string) => {\n+    const { configuration } = this.props;\n+    if (configuration && configuration[configType]) {\n+      return configuration[configType];\n+    }\n+    return null;\n+  }\n+\n+  _openModal = () => {\n+    if (this.configModal) {\n+      this.configModal.current.open();\n+    }\n+  }\n+\n+  _closeModal = () => {\n+    if (this.configModal) {\n+      this.configModal.current.close();\n+    }\n+  }\n+\n+  _saveConfig = (event) => {\n+    if (event) {\n+      event.preventDefault();\n+      event.stopPropagation();\n+    }\n+    const { onUpdate } = this.props;\n+    const { config, isValid } = this.state;\n+    if (isValid) {\n+      this._updateConfig(URL_WHITELIST_CONFIG, config).then(() => {\n+        onUpdate();\n+        this._closeModal();\n+      });\n+    }\n+  }\n+\n+  _update = (config, isValid) => {\n+    const updatedState = { config, isValid };\n+    this.setState(updatedState);\n+  }\n+\n+\n+  _resetConfig = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NDU3Mw==", "bodyText": "For what I could understand about this component, URLWhitelistFormModal is holding the current state of the whitelist entries, but those are generated from props on render time and they only come into the state when URLWhitelistForm's onUpdate is called.\nThat works, but I think it goes against the React way of using a one-way data flow in your component hierarchy. I think initializing and keeping an up-to-date config state here would help us not relying on a child component updating to get the right state in this component.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384564573", "createdAt": "2020-02-26T15:24:45Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm = React.createRef();\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      urlType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3c045983812b0dec86c8196670c0fb5e4e8b5ee", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a3c045983812b0dec86c8196670c0fb5e4e8b5ee", "committedDate": "2020-02-27T13:19:35Z", "message": "Refactoring and bug fixes\n\n* Add UrlWhitelistInput and URLWhitelistFormModal to index.js\n* remove unused function\n* Separate whitelischeck and regex suggestion effect hooks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ac5b5356cd5c395ae2993174e64ef80d16092bc", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/0ac5b5356cd5c395ae2993174e64ef80d16092bc", "committedDate": "2020-02-28T12:48:11Z", "message": "Merge branch 'master' into url-whitelist-contextual-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa81c140e4302a47c37c605be4509bc0c019e4d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/afa81c140e4302a47c37c605be4509bc0c019e4d", "committedDate": "2020-02-28T12:55:32Z", "message": "Refactoring and use state in UrlWhiteListFormModal\n\n* use state instead of props to get the urlwhitelist\n* add UrlWhitelistInput and URLWhitelistFormModal to index.js in\ncomponent/common\n* Fix linter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22bb56a5ef83f2172a2e75849b785a665fafaeec", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/22bb56a5ef83f2172a2e75849b785a665fafaeec", "committedDate": "2020-02-28T13:58:05Z", "message": " Rename files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e46276de685d52c5e9de8d7a64130b9b2b0bcbea", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e46276de685d52c5e9de8d7a64130b9b2b0bcbea", "committedDate": "2020-02-28T15:23:29Z", "message": " add placholder for select and update snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3865669d30b157a61a1a376fd171f38beb147751", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3865669d30b157a61a1a376fd171f38beb147751", "committedDate": "2020-03-02T13:29:20Z", "message": " Add timeout to debounce url check in Effect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/be9c5553ba3682b76158c891d40e6f223e129bbc", "committedDate": "2020-03-02T13:31:05Z", "message": " remove unsuded lodash debounce"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjQ2MTIz", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-368646123", "createdAt": "2020-03-04T10:05:16Z", "commit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDowNToxNlrOFxm_Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTowODozN1rOFxpFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MzI5MQ==", "bodyText": "This should also reflect the more strict values for urlType.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              urlType: string,\n          \n          \n            \n              urlType: 'regex' | 'literal',", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387563291", "createdAt": "2020-03-04T10:05:16Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListFormModal.jsx", "diffHunk": "@@ -0,0 +1,172 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+import IfPermitted from 'components/common/IfPermitted';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDkwNQ==", "bodyText": "I would personally use lodash' debounce function to make clearer what we do here (and also removes the need for a clean-up function). This is a personal preference, though, so feel free to ignore it.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387574905", "createdAt": "2020-03-04T10:25:42Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,124 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+          setOwnValidationMessage(message);\n+        } else {\n+          setOwnValidationMessage(validationMessage);\n+          setCurrentValidationState(validationState);\n+        }\n+        setIsWhitelisted(result.is_whitelisted);\n+      });\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    const checkSuggestion = () => {\n+      if (url) {\n+        const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+        if (typeof suggestion === 'object') {\n+          suggestion.then((result) => {\n+            setSuggestedUrl(result.regex);\n+          });\n+        } else {\n+          setSuggestedUrl(url);\n+        }\n+      }\n+    };\n+    const timer = setTimeout(() => checkSuggestion(), 500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDk1Ng==", "bodyText": "I think we should make the timeout a bit shorter, in other places we set it to 200 or 250 milliseconds, so the results appear a bit faster and we still don't fire on every change.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387574956", "createdAt": "2020-03-04T10:25:47Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,124 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+          setOwnValidationMessage(message);\n+        } else {\n+          setOwnValidationMessage(validationMessage);\n+          setCurrentValidationState(validationState);\n+        }\n+        setIsWhitelisted(result.is_whitelisted);\n+      });\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    const checkSuggestion = () => {\n+      if (url) {\n+        const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+        if (typeof suggestion === 'object') {\n+          suggestion.then((result) => {\n+            setSuggestedUrl(result.regex);\n+          });\n+        } else {\n+          setSuggestedUrl(url);\n+        }\n+      }\n+    };\n+    const timer = setTimeout(() => checkSuggestion(), 500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDkwNQ=="}, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTA0Mg==", "bodyText": "Same as above", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387575042", "createdAt": "2020-03-04T10:25:54Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,124 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+          setOwnValidationMessage(message);\n+        } else {\n+          setOwnValidationMessage(validationMessage);\n+          setCurrentValidationState(validationState);\n+        }\n+        setIsWhitelisted(result.is_whitelisted);\n+      });\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    const checkSuggestion = () => {\n+      if (url) {\n+        const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+        if (typeof suggestion === 'object') {\n+          suggestion.then((result) => {\n+            setSuggestedUrl(result.regex);\n+          });\n+        } else {\n+          setSuggestedUrl(url);\n+        }\n+      }\n+    };\n+    const timer = setTimeout(() => checkSuggestion(), 500);\n+    return () => clearTimeout(timer);\n+  }, [url]);\n+\n+  useEffect(() => {\n+    const timer = setTimeout(() => checkIsWhitelisted(), 500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3Njg2OQ==", "bodyText": "We usually do module imports from components/common, so I would prefer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import IfPermitted from 'components/common/IfPermitted';\n          \n          \n            \n            import { IfPermitted } from 'components/common';", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387576869", "createdAt": "2020-03-04T10:29:08Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListFormModal.jsx", "diffHunk": "@@ -0,0 +1,172 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+import IfPermitted from 'components/common/IfPermitted';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODk4Mw==", "bodyText": "There's an extra empty line here :)", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387578983", "createdAt": "2020-03-04T10:32:59Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListFormModal.jsx", "diffHunk": "@@ -0,0 +1,172 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+import IfPermitted from 'components/common/IfPermitted';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,\n+};\n+\n+\n+class URLWhiteListFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm = React.createRef();\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      urlType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },\n+        isValid: false,\n+      };\n+      this.configModal = React.createRef();\n+    }\n+\n+    componentDidMount() {\n+      const { currentUser: { permissions } } = this.props;\n+      if (PermissionsMixin.isPermitted(permissions, ['urlwhitelist:read'])) {\n+        ConfigurationsActions.listWhiteListConfig(URL_WHITELIST_CONFIG);\n+      }\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5MjE3MQ==", "bodyText": "We usually do module imports from components/common, which would let us write these two imports in a more concise way.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387592171", "createdAt": "2020-03-04T10:57:34Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/configurations/UrlWhiteListForm.jsx", "diffHunk": "@@ -4,7 +4,8 @@ import PropTypes from 'prop-types';\n import uuid from 'uuid/v4';\n import { cloneDeep, debounce } from 'lodash';\n import Input from 'components/bootstrap/Input';\n-import { Select, Icon } from 'components/common';\n+import Select from 'components/common/Select';\n+import Icon from 'components/common/Icon';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5NzY0OA==", "bodyText": "I still think this function (or a strip down version of it) should be called from the constructor, so the initial state comes from the given props and it's not empty.", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387597648", "createdAt": "2020-03-04T11:08:37Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhitelistFormModal.jsx", "diffHunk": "@@ -59,7 +59,22 @@ class URLWhiteListFormModal extends React.Component<Props, State> {\n     }\n \n \n-  _getConfig = (configType: string) => {\n+    componentDidUpdate() {\n+      const { config: { entries } } = this.state;\n+      const urlwhitelistConfig = this._getConfig(URL_WHITELIST_CONFIG);\n+      if (urlwhitelistConfig && entries.length === 0) {\n+        this._setDefaultWhiteListState(urlwhitelistConfig);\n+      }\n+    }\n+\n+  _setDefaultWhiteListState =(urlwhitelistConfig) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa81c140e4302a47c37c605be4509bc0c019e4d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1913455cc245193261d117d55c21769ac3c559cd", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/1913455cc245193261d117d55c21769ac3c559cd", "committedDate": "2020-03-05T08:19:48Z", "message": "Merge branch 'master' into url-whitelist-contextual-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d968347c1b9ebbbad97b7e92a759a14eb2d596c", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6d968347c1b9ebbbad97b7e92a759a14eb2d596c", "committedDate": "2020-03-05T13:54:03Z", "message": "Refactoring\n\n* Use named import for qualifyUrl and other"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "487f39c2f44a1687aec13da9c451428accbb4b59", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/487f39c2f44a1687aec13da9c451428accbb4b59", "committedDate": "2020-03-05T15:13:59Z", "message": "Use named import for qualifyUrl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1df0eb40eb4397b75f65ab1c182bb5ef4b0ccdf5", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/1df0eb40eb4397b75f65ab1c182bb5ef4b0ccdf5", "committedDate": "2020-03-05T15:15:18Z", "message": "Merge remote-tracking branch 'origin/master' into url-whitelist-contextual-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3368d7e4a17936165e37e564c6f98ec523e8a9d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e3368d7e4a17936165e37e564c6f98ec523e8a9d", "committedDate": "2020-03-05T15:45:15Z", "message": "Add marginTop to table\n\n* remove margin-top class and replace it with styled_component\n* update snapshot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf824cce8321d1af3d79df20802082e9666125d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/acf824cce8321d1af3d79df20802082e9666125d", "committedDate": "2020-03-06T08:35:15Z", "message": "Fix cycle dependency and remove unused variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c80d8bd2119a3d5e2800b9ec45e1ecf92f231d", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a1c80d8bd2119a3d5e2800b9ec45e1ecf92f231d", "committedDate": "2020-03-06T08:39:29Z", "message": "Merge remote-tracking branch 'origin/master' into url-whitelist-contextual-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a4dc108104f0bf5a612c56d598753284228648", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e5a4dc108104f0bf5a612c56d598753284228648", "committedDate": "2020-03-06T09:33:03Z", "message": " fix linter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd0038de776c60a049d778092210f97f463c2045", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/cd0038de776c60a049d778092210f97f463c2045", "committedDate": "2020-03-06T13:56:34Z", "message": " Add comments for eslint fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTkyNzg3", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-371992787", "createdAt": "2020-03-10T14:17:29Z", "commit": {"oid": "cd0038de776c60a049d778092210f97f463c2045"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNzoyOVrOF0Qzfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNzoyOVrOF0Qzfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NTU5OQ==", "bodyText": "Nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      const message = isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n          \n          \n            \n                      const message = isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not a valid URL.`;", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r390345599", "createdAt": "2020-03-10T14:17:29Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,125 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import { isValidURL } from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+// Explicit import to fix eslint import/no-cycle\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd0038de776c60a049d778092210f97f463c2045"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "354ad9d087a2867c2e323273df4777f3491650a9", "author": {"user": {"login": "ousmaneo", "name": "Ousmane SAMBA"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/354ad9d087a2867c2e323273df4777f3491650a9", "committedDate": "2020-03-10T14:20:55Z", "message": "Update graylog2-web-interface/src/components/common/URLWhiteListInput.jsx\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDAzODM4", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-372003838", "createdAt": "2020-03-10T14:28:30Z", "commit": {"oid": "354ad9d087a2867c2e323273df4777f3491650a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTAxMTg2", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#pullrequestreview-372101186", "createdAt": "2020-03-10T16:08:46Z", "commit": {"oid": "354ad9d087a2867c2e323273df4777f3491650a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2728, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}