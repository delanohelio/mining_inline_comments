{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTY5NTQ1", "number": 8712, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowOTo0M1rOEV0iBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoyMjoyMlrOEV02Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE2MjMwOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowOTo0M1rOG8ywsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowOTo0M1rOG8ywsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5OTQwOQ==", "bodyText": "I think we can use PUT <role-id>/assignee/<username> here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Path(\"{roleId}/assignee/add/{username}\")\n          \n          \n            \n                @Path(\"{roleId}/assignee/{username}\")", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466399409", "createdAt": "2020-08-06T13:09:43Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60170571ae8690a6d0eccd07e098dd0e3ac07123"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE2ODc5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxMToxNVrOG8y0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxMToxNVrOG8y0mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMDQxMQ==", "bodyText": "And DELETE <role-id>/assignee/<username> here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @PUT\n          \n          \n            \n                @ApiOperation(\"Remove a member to a team\")\n          \n          \n            \n                @Path(\"{roleId}/assignee/remove/{username}\")\n          \n          \n            \n                @DELETE\n          \n          \n            \n                @ApiOperation(\"Remove a member to a team\")\n          \n          \n            \n                @Path(\"{roleId}/assignee/{username}\")", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466400411", "createdAt": "2020-08-06T13:11:15Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();\n+    }\n+\n+    @PUT\n+    @ApiOperation(\"Remove a member to a team\")\n+    @Path(\"{roleId}/assignee/remove/{username}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60170571ae8690a6d0eccd07e098dd0e3ac07123"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE4MjAyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxNDo0MFrOG8y8_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxNDo0MFrOG8y8_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjU1Ng==", "bodyText": "I think we should return a 204 if we don't want to return anything. (or make the method void instead of returning Response, that's the same)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Response.ok().build();\n          \n          \n            \n                    return Response.noContent().build();", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466402556", "createdAt": "2020-08-06T13:14:40Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60170571ae8690a6d0eccd07e098dd0e3ac07123"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzE4MzYxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxNTowMVrOG8y97g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxNTowMVrOG8y97g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjc5OA==", "bodyText": "See comment above.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Response.ok().build();\n          \n          \n            \n                    return Response.noContent().build();", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466402798", "createdAt": "2020-08-06T13:15:01Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();\n+    }\n+\n+    @PUT\n+    @ApiOperation(\"Remove a member to a team\")\n+    @Path(\"{roleId}/assignee/remove/{username}\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    public Response removeUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.remove(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60170571ae8690a6d0eccd07e098dd0e3ac07123"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzIxMzk4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoyMjoyMlrOG8zQUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoyMjoyMlrOG8zQUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNzUwNA==", "bodyText": "We have quite some duplication in #addUser and #removeUser. How about creating a private method to avoid the duplication? \ud83d\ude42 (e.g. updateUserRoles(username, roles -> roles.remove(roleId)) or something similar)", "url": "https://github.com/Graylog2/graylog2-server/pull/8712#discussion_r466407504", "createdAt": "2020-08-06T13:22:22Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authzroles/AuthzRolesResource.java", "diffHunk": "@@ -126,7 +180,53 @@ public AuthzRoleDTO get(@ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlan\n             throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n         }\n \n-        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(searchQuery, page, perPage,sort, order, username);\n+        final PaginatedList<AuthzRoleDTO> result = authzRolesService.findPaginatedForUser(\n+                searchQuery, page, perPage,sort, order, username);\n         return PaginatedResponse.create(\"roles\", result, query);\n     }\n+\n+    @PUT\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @ApiOperation(\"Add a user to a role\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    @Path(\"{roleId}/assignee/add/{username}\")\n+    public Response addUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.add(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);\n+\n+        return Response.ok().build();\n+    }\n+\n+    @PUT\n+    @ApiOperation(\"Remove a member to a team\")\n+    @Path(\"{roleId}/assignee/remove/{username}\")\n+    @AuditEvent(type = AuditEventTypes.USER_UPDATE)\n+    public Response removeUser(\n+            @ApiParam(name = \"roleId\") @PathParam(\"roleId\") @NotBlank String roleId,\n+            @ApiParam(name = \"username\") @PathParam(\"username\") @NotBlank String username) throws ValidationException {\n+        checkPermission(USERS_EDIT, username);\n+\n+        final User user = userService.load(username);\n+        if (user == null) {\n+            throw new NotFoundException(\"Cannot find user with name: \" + username);\n+        }\n+        authzRolesService.get(roleId).orElseThrow(() -> new NotFoundException(\"Cannot find role with id: \" + roleId));\n+        Set<String> roles = user.getRoleIds();\n+        roles.remove(roleId);\n+        user.setRoleIds(roles);\n+        userService.save(user);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60170571ae8690a6d0eccd07e098dd0e3ac07123"}, "originalPosition": 203}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}