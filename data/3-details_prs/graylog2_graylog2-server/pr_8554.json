{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTkxNDAz", "number": 8554, "title": "type check unary NOT operator", "bodyText": "Description\nThe type checker did not properly check the subexpression type for the NOT operator, which could lead to runtime errors\nNOT binds closer than comparison (==), which is a common source of mistakes\nin this case a string-valued function as being put into NOT to_string($message.field) == \"content\" which parses as (NOT to_string($message.field)) == \"content\"\nthe type checker did not pick up that to_string($message.field) wasn't boolean-valued and the interpreter failed at runtime due to a class cast exception.\nAfter this change, the type checker requires the expression passed to NOT to be of boolean type and makes this a parse-time error\nthis should not have any incompatibility issues, because it never executed successfully (unless the expression was short-circuited). in any case, rules like this are severely broken and need to be fixed by the user\nMotivation and Context\nThe parser erroneously allowed an invalid operation to go through, which would always fail at runtime, leading to dropped messages.\nThe correct way to express NOT to_string($message.field) == \"content\" is to write NOT (to_string($message.field) == \"content\") or to use the != operator instead of NOT x == y.\nHow Has This Been Tested?\nAdded a test case rule that fails with a runtime exception before the fix, and properly returns a parse exception after the fix.\nScreenshots (if appropriate):\nTypes of changes\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Refactoring (non-breaking change)\n Breaking change (fix or feature that would cause existing functionality to change)\n\nChecklist:\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n I have read the CONTRIBUTING document.\n I have added tests to cover my changes.", "createdAt": "2020-07-15T16:22:49Z", "url": "https://github.com/Graylog2/graylog2-server/pull/8554", "merged": true, "mergeCommit": {"oid": "298099f258c56ae34fa4246b543dcae53dcad7ff"}, "closed": true, "closedAt": "2020-11-10T13:39:05Z", "author": {"login": "kroepke"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1gFwVgFqTQ0OTkwMzA1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbJhFCAFqTUyNzIwNzg5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTAzMDUz", "url": "https://github.com/Graylog2/graylog2-server/pull/8554#pullrequestreview-449903053", "createdAt": "2020-07-16T14:27:18Z", "commit": {"oid": "6c23ac8d93a2fcf136dde5ff75482b37ea9f4774"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyNzoxOFrOGytj0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDoyNzoxOFrOGytj0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyODQzMg==", "bodyText": "I might be nitpicking here, but wouldn't it be more correct to use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (!Boolean.class.equals(type)) {\n          \n          \n            \n                        if (!Boolean.class.isAssignableFrom(type)) {", "url": "https://github.com/Graylog2/graylog2-server/pull/8554#discussion_r455828432", "createdAt": "2020-07-16T14:27:18Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/pipelineprocessor/parser/PipelineRuleParser.java", "diffHunk": "@@ -758,6 +758,15 @@ public void exitOr(RuleLangParser.OrContext ctx) {\n             checkBinaryExpression(ctx);\n         }\n \n+        @Override\n+        public void exitNot(RuleLangParser.NotContext ctx) {\n+            final Expression expression = parseContext.expressions().get(ctx.expression());\n+            Class type = expression.getType();\n+            if (!Boolean.class.equals(type)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c23ac8d93a2fcf136dde5ff75482b37ea9f4774"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92dcbc92e25bb93d69f185b5af51ebc68b558a76", "author": {"user": {"login": "kroepke", "name": "Kay Roepke"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/92dcbc92e25bb93d69f185b5af51ebc68b558a76", "committedDate": "2020-10-09T11:51:55Z", "message": "type check unary NOT operator\n\nthe type checker did not properly check the sub expression type for the NOT operator, which could lead to runtime errors\nNOT binds closer than comparison (==), which is a common source of mistakes\nin this case a string valued function as being put into `NOT func() == \"string\"` which parses as `(NOT func()) == \"string\"`\nthe type checker did not pick up that `func()` wasn't boolean valued and the interpreter failed at runtime due to a classcast exception.\n\nafter this change the type checker requires the expression passed to NOT to be of boolean type and makes this a parse-time error\n\nthis should not have any incompatibility issues, because it never executed successfully (unless the expression was short-circuited). in any case, rules like this are severely broken and need to be fixed by the user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7a21a734f60ba8a495e61f8da5e874553ca2134", "author": {"user": {"login": "mpfz0r", "name": "Marco Pfatschbacher"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e7a21a734f60ba8a495e61f8da5e874553ca2134", "committedDate": "2020-10-09T11:51:55Z", "message": "Fix forbidden-apis warning"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c23ac8d93a2fcf136dde5ff75482b37ea9f4774", "author": {"user": {"login": "mpfz0r", "name": "Marco Pfatschbacher"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6c23ac8d93a2fcf136dde5ff75482b37ea9f4774", "committedDate": "2020-07-16T12:36:42Z", "message": "Fix forbidden-apis warning"}, "afterCommit": {"oid": "e7a21a734f60ba8a495e61f8da5e874553ca2134", "author": {"user": {"login": "mpfz0r", "name": "Marco Pfatschbacher"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e7a21a734f60ba8a495e61f8da5e874553ca2134", "committedDate": "2020-10-09T11:51:55Z", "message": "Fix forbidden-apis warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3826221f0ecc2d7ba4ac649ac33dc5b3bef682", "author": {"user": {"login": "kroepke", "name": "Kay Roepke"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3a3826221f0ecc2d7ba4ac649ac33dc5b3bef682", "committedDate": "2020-10-09T12:21:33Z", "message": "use isAssignableFrom instead of equals\r\n\r\nfunctionally identical, but using isAssignableFrom makes the intent clear\n\nCo-authored-by: Marco Pfatschbacher <marco@graylog.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3014b1c3b0a4d2bb0cf4fcf039511816ade84a90", "author": {"user": {"login": "mpfz0r", "name": "Marco Pfatschbacher"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3014b1c3b0a4d2bb0cf4fcf039511816ade84a90", "committedDate": "2020-11-09T14:57:38Z", "message": "Merge remote-tracking branch 'origin/master' into unary-not-typecheck"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d38858a6aae33cf16c4b02f649f618aeedbfa82", "author": {"user": {"login": "mpfz0r", "name": "Marco Pfatschbacher"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/2d38858a6aae33cf16c4b02f649f618aeedbfa82", "committedDate": "2020-11-09T15:08:37Z", "message": "Log unparseable pipeline rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjA3ODkz", "url": "https://github.com/Graylog2/graylog2-server/pull/8554#pullrequestreview-527207893", "createdAt": "2020-11-10T13:38:28Z", "commit": {"oid": "2d38858a6aae33cf16c4b02f649f618aeedbfa82"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3030, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}