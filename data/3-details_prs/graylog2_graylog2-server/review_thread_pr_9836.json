{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzMzU4MTY1", "number": 9836, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozMTo1N1rOFKFajQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMTowOVrOFLSqLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTE4Nzk3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/aggregationbuilder/HeatmapVisualizationConfiguration.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozMTo1N1rOIMtTTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozMTo1N1rOIMtTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5NjA0NA==", "bodyText": "We could clean this up a bit by introducing something like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const _onColorScaleChange = useCallback(({ value }) => onChange(config.toBuilder().colorScale(value).build()), [config, onChange]);\n          \n          \n            \n              const modifyConfig = useCallback((fn: (builder: HeatmapVisualizationConfigBuilder) => HeatmapVisualizationConfigBuilder) => {\n          \n          \n            \n                onChange(fn(config.toBuilder()).build());\n          \n          \n            \n              }, [onChange, config]);\n          \n          \n            \n              const _onColorScaleChange = useCallback(({ value }) => modifyConfig((builder) => builder.colorScale(value)), [modifyConfig]);\n          \n      \n    \n    \n  \n\nThe next five callbacks could then reuse modifyConfig as well. It would require exporting the type from the Builder class in HeatmapVisualizationConfig as HeatmapVisualizationConfigBuilder though.", "url": "https://github.com/Graylog2/graylog2-server/pull/9836#discussion_r550196044", "createdAt": "2020-12-30T13:31:57Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/aggregationbuilder/HeatmapVisualizationConfiguration.tsx", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import React, { useCallback, useState } from 'react';\n+import styled from 'styled-components';\n+\n+import { Checkbox } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import HeatmapVisualizationConfig, { COLORSCALES } from 'views/logic/aggregationbuilder/visualizations/HeatmapVisualizationConfig';\n+\n+import Select from '../Select';\n+\n+const StyledInput = styled(Input)`\n+  > label {\n+    font-weight: normal;\n+  }\n+`;\n+\n+type Props = {\n+  onChange: (config: HeatmapVisualizationConfig) => void,\n+  config: HeatmapVisualizationConfig,\n+};\n+\n+const _makeOption = (value) => ({ label: value, value });\n+const colorScalesOptions = COLORSCALES.map(_makeOption);\n+\n+type Error = {\n+  zmin?: string,\n+  zmax?: string,\n+  defaultValue?: string,\n+}\n+\n+const _validateConfig = (config: HeatmapVisualizationConfig, setErrors): boolean => {\n+  const { zMax, zMin, defaultValue } = config;\n+  const errors = {} as Error;\n+\n+  if (zMin || zMax) {\n+    if (zMin >= zMax) {\n+      errors.zmin = 'Min is bigger than Max';\n+    }\n+\n+    if (zMax <= zMin) {\n+      errors.zmin = 'Max is smaller than Min';\n+    }\n+\n+    if (defaultValue) {\n+      if (defaultValue > zMax || defaultValue < zMin) {\n+        errors.defaultValue = 'Default Value is out of range from Min and Max';\n+      }\n+    }\n+  }\n+\n+  setErrors(errors);\n+\n+  return Object.keys(errors).length <= 0;\n+};\n+\n+const _parseEvent = (event) => {\n+  const { value } = event.target;\n+\n+  if (value === undefined) {\n+    return undefined;\n+  }\n+\n+  return parseFloat(value);\n+};\n+\n+const HeatmapVisualizationConfiguration = ({ config = HeatmapVisualizationConfig.empty(), onChange: onChangeFunc }: Props) => {\n+  const [errors, setErrors] = useState<Error>({});\n+  const onChange = useCallback((newConfig) => {\n+    if (_validateConfig(newConfig, setErrors)) {\n+      onChangeFunc(newConfig);\n+    }\n+  }, [onChangeFunc]);\n+  const _onColorScaleChange = useCallback(({ value }) => onChange(config.toBuilder().colorScale(value).build()), [config, onChange]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347dcc3e2cf8820263e4bfd2c6787f6f83a8a467"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTE5MDg1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/visualizations/heatmap/HeatmapVisualization.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozMzoxN1rOIMtUyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQwODozNjoyOFrOINpLJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5NjQyNg==", "bodyText": "Why is this commented out?", "url": "https://github.com/Graylog2/graylog2-server/pull/9836#discussion_r550196426", "createdAt": "2020-12-30T13:33:17Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/visualizations/heatmap/HeatmapVisualization.tsx", "diffHunk": "@@ -134,7 +120,7 @@ const _chartLayout = (heatmapData) => {\n   return {\n     yaxis: axisConfig,\n     xaxis: axisConfig,\n-    plot_bgcolor: hasContent ? BG_COLOR : 'transparent',\n+    // plot_bgcolor: hasContent ? BG_COLOR : 'transparent',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347dcc3e2cf8820263e4bfd2c6787f6f83a8a467"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE3Njk5Ng==", "bodyText": "It must be deleted, we can't set the BG_COLOR anymore, since we do not have it, with the themes.", "url": "https://github.com/Graylog2/graylog2-server/pull/9836#discussion_r551176996", "createdAt": "2021-01-04T08:36:28Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/visualizations/heatmap/HeatmapVisualization.tsx", "diffHunk": "@@ -134,7 +120,7 @@ const _chartLayout = (heatmapData) => {\n   return {\n     yaxis: axisConfig,\n     xaxis: axisConfig,\n-    plot_bgcolor: hasContent ? BG_COLOR : 'transparent',\n+    // plot_bgcolor: hasContent ? BG_COLOR : 'transparent',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5NjQyNg=="}, "originalCommit": {"oid": "347dcc3e2cf8820263e4bfd2c6787f6f83a8a467"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTE5MTg0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/visualizations/heatmap/HeatmapVisualization.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozMzo0NlrOIMtVUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzozMzo0NlrOIMtVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5NjU2MA==", "bodyText": "This could use some braces to make the operator precedence clearer.", "url": "https://github.com/Graylog2/graylog2-server/pull/9836#discussion_r550196560", "createdAt": "2020-12-30T13:33:46Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/visualizations/heatmap/HeatmapVisualization.tsx", "diffHunk": "@@ -98,11 +78,17 @@ const _transposeMatrix = (z: Array<Array<any>> = []) => {\n   return z[0].map((_, c) => { return z.map((r) => { return r[c]; }); });\n };\n \n-const _formatSeries = ({ valuesBySeries, xLabels }: {valuesBySeries: ValuesBySeries, xLabels: Array<any>}): ExtractedSeries => {\n+const _findSmallestValue = (valuesFound: Array<Array<number>>) => valuesFound.reduce((result, valueArray) => valueArray.reduce((acc, value) => (acc > value ? value : acc), result), valuesFound[0][0]);\n+\n+const _formatSeries = (visualizationConfig) => ({ valuesBySeries, xLabels }: {valuesBySeries: ValuesBySeries, xLabels: Array<any>}): ExtractedSeries => {\n+  const valuesFoundBySeries = values(valuesBySeries);\n   // When using the hovertemplate, we need to provie a value for empty z values.\n   // Otherwise plotly would throw errors when hovering over a field.\n   // We need to transpose the z matrix, because we are changing the x and y label in the generator function\n-  const z = _transposeMatrix(_fillUpMatrix(values(valuesBySeries), xLabels));\n+  const defaultValue = visualizationConfig.useSmallestAsDefault\n+    ? _findSmallestValue(valuesFoundBySeries)\n+    : visualizationConfig.defaultValue ?? 'None';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347dcc3e2cf8820263e4bfd2c6787f6f83a8a467"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTIwODg5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/aggregationbuilder/visualizations/HeatmapVisualizationConfig.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo0MjoxN1rOIMte2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzo0MjoxN1rOIMte2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5OTAwMQ==", "bodyText": "To avoid duplicating all values in the type, we can do:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            export const COLORSCALES = ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis'];\n          \n          \n            \n            export const COLORSCALES = ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis'];\n          \n          \n            \n            \n          \n          \n            \n            type ColorScale = typeof COLORSCALES[number];", "url": "https://github.com/Graylog2/graylog2-server/pull/9836#discussion_r550199001", "createdAt": "2020-12-30T13:42:17Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/aggregationbuilder/visualizations/HeatmapVisualizationConfig.ts", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as Immutable from 'immutable';\n+\n+import VisualizationConfig from 'views/logic/aggregationbuilder/visualizations/VisualizationConfig';\n+\n+type ColorScale =\n+    'Greys'\n+  | 'YlGnBu'\n+  | 'Greens'\n+  | 'YlOrRd'\n+  | 'Bluered'\n+  | 'RdBu'\n+  | 'Reds'\n+  | 'Blues'\n+  | 'Picnic'\n+  | 'Rainbow'\n+  | 'Portland'\n+  | 'Jet'\n+  | 'Hot'\n+  | 'Blackbody'\n+  | 'Earth'\n+  | 'Electric'\n+  | 'Viridis'\n+  | 'Cividis';\n+\n+export const COLORSCALES = ['Greys', 'YlGnBu', 'Greens', 'YlOrRd', 'Bluered', 'RdBu', 'Reds', 'Blues', 'Picnic', 'Rainbow', 'Portland', 'Jet', 'Hot', 'Blackbody', 'Earth', 'Electric', 'Viridis', 'Cividis'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347dcc3e2cf8820263e4bfd2c6787f6f83a8a467"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mzg0MzY0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/aggregationbuilder/HeatmapVisualizationConfiguration.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMTowOVrOIOYTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDowMTowOVrOIOYTSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk0OTEyOQ==", "bodyText": "Can we add isClearable={false} here? IMO it does not make sense to show the clear icon in here.", "url": "https://github.com/Graylog2/graylog2-server/pull/9836#discussion_r551949129", "createdAt": "2021-01-05T14:01:09Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/aggregationbuilder/HeatmapVisualizationConfiguration.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import React, { useCallback, useState } from 'react';\n+import styled from 'styled-components';\n+\n+import { Checkbox } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import HeatmapVisualizationConfig, { COLORSCALES, Builder as HeatmapConfigBuilder } from 'views/logic/aggregationbuilder/visualizations/HeatmapVisualizationConfig';\n+\n+import Select from '../Select';\n+\n+const StyledInput = styled(Input)`\n+  > label {\n+    font-weight: normal;\n+  }\n+`;\n+\n+type Props = {\n+  onChange: (config: HeatmapVisualizationConfig) => void,\n+  config: HeatmapVisualizationConfig,\n+};\n+\n+const _makeOption = (value) => ({ label: value, value });\n+const colorScalesOptions = COLORSCALES.map(_makeOption);\n+\n+type Error = {\n+  zmin?: string,\n+  zmax?: string,\n+  defaultValue?: string,\n+}\n+\n+const _validateConfig = (config: HeatmapVisualizationConfig, setErrors): boolean => {\n+  const { zMax, zMin, defaultValue } = config;\n+  const errors = {} as Error;\n+\n+  if (zMin || zMax) {\n+    if (zMin >= zMax) {\n+      errors.zmin = 'Min is bigger than Max';\n+    }\n+\n+    if (zMax <= zMin) {\n+      errors.zmin = 'Max is smaller than Min';\n+    }\n+\n+    if (defaultValue) {\n+      if (defaultValue > zMax || defaultValue < zMin) {\n+        errors.defaultValue = 'Default Value is out of range from Min and Max';\n+      }\n+    }\n+  }\n+\n+  setErrors(errors);\n+\n+  return Object.keys(errors).length <= 0;\n+};\n+\n+const _parseEvent = (event) => {\n+  const { value } = event.target;\n+\n+  if (value === undefined) {\n+    return undefined;\n+  }\n+\n+  return parseFloat(value);\n+};\n+\n+const HeatmapVisualizationConfiguration = ({ config = HeatmapVisualizationConfig.empty(), onChange: onChangeFunc }: Props) => {\n+  const [errors, setErrors] = useState<Error>({});\n+  const onChange = useCallback((newConfig) => {\n+    if (_validateConfig(newConfig, setErrors)) {\n+      onChangeFunc(newConfig);\n+    }\n+  }, [onChangeFunc]);\n+  const modifyConfig = useCallback((fn: (HeatmapConfigBuilder) => HeatmapConfigBuilder) => {\n+    onChange(fn(config.toBuilder()).build());\n+  }, [config, onChange]);\n+\n+  const _onColorScaleChange = useCallback(({ value }) => modifyConfig((builder: HeatmapConfigBuilder) => builder.colorScale(value)), [modifyConfig]);\n+  const _onReverseScaleChange = useCallback((e) => modifyConfig((builder: HeatmapConfigBuilder) => builder.reverseScale(e.target.checked)), [modifyConfig]);\n+  const _onAutoScaleChange = useCallback((e) => modifyConfig((builder: HeatmapConfigBuilder) => builder.autoScale(e.target.checked)), [modifyConfig]);\n+  const _onZminChange = useCallback((e) => modifyConfig((builder: HeatmapConfigBuilder) => builder.zMin(_parseEvent(e))), [modifyConfig]);\n+  const _onZmaxChange = useCallback((e) => modifyConfig((builder: HeatmapConfigBuilder) => builder.zMax(_parseEvent(e))), [modifyConfig]);\n+  const _onUseSmallestAsDefaultChange = useCallback((e) => modifyConfig((builder: HeatmapConfigBuilder) => builder.useSmallestAsDefault(e.target.checked)), [modifyConfig]);\n+  const _onDefaultValueChange = useCallback((e) => modifyConfig((builder: HeatmapConfigBuilder) => builder.defaultValue(_parseEvent(e))), [modifyConfig]);\n+\n+  return (\n+    <>\n+      <span>Color Scheme</span>\n+      <Select placeholder=\"Select Color Scheme\"\n+              onChange={_onColorScaleChange}\n+              options={colorScalesOptions}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fbf8a70fe0cf69e5d0edaf20a49932239389500"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4309, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}