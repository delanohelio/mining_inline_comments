{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NjMyODU4", "number": 7782, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoxNDoyMlrODsqomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMzo0N1rOD1KMwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTYyNDU5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.test.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoxNDoyMlrOF9pFGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1Mjo0OFrOGB3Tgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE4MDUwNA==", "bodyText": "I received an act() warning because of the update triggered by throwing the error. How do we deal with this case normally when using enzyme? There has to be a more elegant way.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r400180504", "createdAt": "2020-03-30T13:14:22Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.test.jsx", "diffHunk": "@@ -261,4 +262,17 @@ describe('ExtendedSearchPage', () => {\n         expect(SearchActions.execute).not.toHaveBeenCalled();\n       });\n   });\n+\n+  it('information about execution error will be displayed', async () => {\n+    asMock(SearchActions.execute).mockImplementationOnce(() => Promise.reject(new Error('The error message.')));\n+    let wrapper;\n+    await act(async () => {\n+      wrapper = mount(<SimpleExtendedSearchPage />);\n+    });\n+\n+    if (wrapper) {\n+      wrapper.update();\n+      expect(wrapper.contains('The error message.')).not.toBeNull();\n+    }\n+  });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "663b8240279ed0812ce426997671bde80cc8a059"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNzg3NA==", "bodyText": "This comment is no longer relevant, because we've adjusted the error handling.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r404607874", "createdAt": "2020-04-07T07:52:48Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.test.jsx", "diffHunk": "@@ -261,4 +262,17 @@ describe('ExtendedSearchPage', () => {\n         expect(SearchActions.execute).not.toHaveBeenCalled();\n       });\n   });\n+\n+  it('information about execution error will be displayed', async () => {\n+    asMock(SearchActions.execute).mockImplementationOnce(() => Promise.reject(new Error('The error message.')));\n+    let wrapper;\n+    await act(async () => {\n+      wrapper = mount(<SimpleExtendedSearchPage />);\n+    });\n+\n+    if (wrapper) {\n+      wrapper.update();\n+      expect(wrapper.contains('The error message.')).not.toBeNull();\n+    }\n+  });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE4MDUwNA=="}, "originalCommit": {"oid": "663b8240279ed0812ce426997671bde80cc8a059"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTY3Njc0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyNjozMVrOF9plrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyNjozMVrOF9plrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE4ODg0Ng==", "bodyText": "I wrote the SearchExectuionErrors component in a way it can handle all types of errors. initially I've tried to add the .catch() to SearchActions.execute(executionState) but I prefer catching and informing the user about all possible errors (which are not part of a 403 / 404 request).\nI've also tried to add the .catch() before the .finally(). but this results in some test failures I couldn't fix easily.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r400188846", "createdAt": "2020-03-30T13:26:31Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.jsx", "diffHunk": "@@ -154,14 +155,22 @@ const ExtendedSearchPage = ({ route, location = { query: {} }, router, searchRef\n         .push(SearchActions.refresh.listen(refreshIfNotUndeclared))\n         .push(ViewActions.search.completed.listen(refreshIfNotUndeclared));\n       return null;\n-    });\n+    }).catch((error) => setErrors([error]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "663b8240279ed0812ce426997671bde80cc8a059"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTc4MDA2OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0OTo1OVrOF_xxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNTo0OTo1OVrOF_xxgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQyMDA5Nw==", "bodyText": "@dennisoelkers A few questions regarding these changes:\nWould you add e.g. logoutIfUnauthorized  as a Builder method? And would you allow a customisation of the whole part or only the condition check? (in the context of logoutIfUnauthorized and redirectIfForbidden )", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r402420097", "createdAt": "2020-04-02T15:49:59Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "diffHunk": "@@ -152,29 +149,29 @@ function queuePromiseIfNotLoggedin(promise) {\n   return promise;\n }\n \n-export default function fetch(method, url, body) {\n+export default function fetch(method, url, body, handleForbidden, handleUnauthorized) {\n   const promise = () => new Builder(method, url)\n     .authenticated()\n-    .json(body)\n+    .json(body, handleForbidden, handleUnauthorized)\n     .build();\n \n   return queuePromiseIfNotLoggedin(promise)();\n }\n \n-export function fetchPlainText(method, url, body) {\n+export function fetchPlainText(method, url, body, handleForbidden, handleUnauthorized) {\n   const promise = () => new Builder(method, url)\n     .authenticated()\n-    .plaintext(body)\n+    .plaintext(body, handleForbidden, handleUnauthorized)\n     .build();\n \n   return queuePromiseIfNotLoggedin(promise)();\n }\n \n-export function fetchPeriodically(method, url, body) {\n+export function fetchPeriodically(method, url, body, handleForbidden, handleUnauthorized) {\n   const promise = () => new Builder(method, url)\n     .authenticated()\n     .noSessionExtension()\n-    .json(body)\n+    .json(body, handleForbidden, handleUnauthorized)\n     .build();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625eedd6710e45863b54a5d38f249d5c0a430596"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTk4NjY2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/SearchExecutionGuardTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowNTowMFrOGCqMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowNTowMFrOGCqMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MTY1OQ==", "bodyText": "We should also check if the exception contains the missing streams.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r405441659", "createdAt": "2020-04-08T11:05:00Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/SearchExecutionGuardTest.java", "diffHunk": "@@ -60,7 +61,7 @@ public void setUp() throws Exception {\n     public void failsForNonPermittedStreams() {\n         final Search search = searchWithStreamIds(\"ok\", \"not-ok\");\n \n-        assertThatExceptionOfType(ForbiddenException.class)\n+        assertThatExceptionOfType(MissingStreamPermissionException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcaeeae6b0845cb7a97bfe22d09d8b45e88aeace"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTk5Nzk4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowODoyN1rOGCqTIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMTowODoyN1rOGCqTIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0MzM2Mw==", "bodyText": "Instead of having to pass handleForbidden/handleUnauthorized to every method, we should introduce two builder methods for these, which allows consumers to set these. Creating a new FetchBuilder would default to redirectIfForbidden respectively logoutIfUnauthorized.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r405443363", "createdAt": "2020-04-08T11:08:27Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "diffHunk": "@@ -54,7 +74,7 @@ export class Builder {\n     return this;\n   }\n \n-  json(body) {\n+  json(body, handleForbidden = redirectIfForbidden, handleUnauthorized = logoutIfUnauthorized) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcaeeae6b0845cb7a97bfe22d09d8b45e88aeace"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjAxMTg2OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToxMzowMVrOGCqb0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMToxMzowMVrOGCqb0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ0NTU4Nw==", "bodyText": "I think this should be either Array<Error> or Array<mixed>. Object is not recommended for use, ever:\n\nObject is an alias to any and will be deprecated and removed in a future version of Flow.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r405445587", "createdAt": "2020-04-08T11:13:01Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.jsx", "diffHunk": "@@ -86,6 +87,7 @@ const ConnectedFieldList = connect(FieldList, { fieldTypes: FieldTypesStore, vie\n   }));\n \n type Props = {\n+  errors: Object[],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcaeeae6b0845cb7a97bfe22d09d8b45e88aeace"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDgzOTA5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/errors/ReportedErrors.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyMDo1N1rOGJnRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyMDo1N1rOGJnRkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczMzg0Mw==", "bodyText": "This part is also the base to display the error message for 404 api requests, instead of redirecting to /notfound.\nE.g. for the dashboard and saved search page, we just need to adjust the ViewLoader, once we have a custom ReportedError.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412733843", "createdAt": "2020-04-22T07:20:57Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/logic/errors/ReportedErrors.js", "diffHunk": "@@ -23,8 +28,20 @@ export const createReactError = (error: $PropertyType<ReactError, 'error'>, info\n   info,\n   type: ReactErrorType,\n });\n-\n export const createUnauthorizedError = (error: $PropertyType<UnauthorizedError, 'error'>): UnauthorizedError => ({\n   error,\n   type: UnauthorizedErrorType,\n });\n+export const createStreamPermissionError = (error: $PropertyType<StreamPermissionError, 'error'>): StreamPermissionError => ({\n+  error,\n+  type: StreamPermissionErrorType,\n+});\n+\n+export const createFromFetchError = (error: FetchError) => {\n+  switch (error.status) {\n+    case 403:\n+      return error?.additional?.body?.type === 'MissingStreamPermission' ? createStreamPermissionError(error) : createUnauthorizedError(error);\n+    default:\n+      throw Error(`Provided FetchError is not a valid ReportedError because status code ${error.status} is not supported`);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDg2NzIxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoyNzoxNFrOGJnhew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzozMDoxM1rOGJnpMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczNzkxNQ==", "bodyText": "While having another look, I realised we were not providing a real FetchError when creating a ReportedError.\nI've decided to create a FetchError instead of using the SuperagentPromiseError, because the checks we are doing when we create a FetchError are still useful and it is easier to work with our own interface.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412737915", "createdAt": "2020-04-22T07:27:14Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "diffHunk": "@@ -78,15 +80,15 @@ export class Builder {\n \n         // Redirect to the start page if a user is logged in but not allowed to access a certain HTTP API.\n         if (SessionStore.isLoggedIn() && error.status === 403) {\n-          ErrorsActions.report(createUnauthorizedError(error));\n+          ErrorsActions.report(createFromFetchError(fetchError));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczOTg4OQ==", "bodyText": "One side note regarding the FetchProvider, during the development we've discussed the unification of redundant code. I did not implemented these changes inside this PR, because they are also part of the CSV export PR #7709", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412739889", "createdAt": "2020-04-22T07:30:13Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "diffHunk": "@@ -78,15 +80,15 @@ export class Builder {\n \n         // Redirect to the start page if a user is logged in but not allowed to access a certain HTTP API.\n         if (SessionStore.isLoggedIn() && error.status === 403) {\n-          ErrorsActions.report(createUnauthorizedError(error));\n+          ErrorsActions.report(createFromFetchError(fetchError));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjczNzkxNQ=="}, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE1MjQ3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMDo0MlrOGJqLWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMDo0MlrOGJqLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTQwMA==", "bodyText": "Typo: indlude -> include", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412781400", "createdAt": "2020-04-22T08:30:42Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>\n+      <p>Please contact your administrator and provide the error details which indlude a list of streams you need access to.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE1MzkyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMDo1OVrOGJqMKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo0MDo0NVrOGKbNlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTYwOQ==", "bodyText": "Not 100% sure, but I think it should be you do not have permissions _for_", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412781609", "createdAt": "2020-04-22T08:30:59Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NTQ5Nw==", "bodyText": "I thought about this as well and found examples for both cases, but having a look at the oxford dictionary it is \"permissions for somebody/something\" / \"permissions to do something\".", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413045497", "createdAt": "2020-04-22T14:44:02Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTYwOQ=="}, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU3NjUyMQ==", "bodyText": "But then, it is permissions for (streams), right?", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413576521", "createdAt": "2020-04-23T07:28:07Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTYwOQ=="}, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4NDc4OQ==", "bodyText": "It is and I've changed it accordingly.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413584789", "createdAt": "2020-04-23T07:40:45Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTYwOQ=="}, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE2MDYwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMjoxNFrOGJqP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo0ODo0M1rOGJ6jEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MjU3Ng==", "bodyText": "Is additional always present if error is, or do we want to make it optional too?", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412782576", "createdAt": "2020-04-22T08:32:14Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>\n+      <p>Please contact your administrator and provide the error details which indlude a list of streams you need access to.</p>\n+    </>\n+  );\n+  const streamIds = error?.additional.body?.streams;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0OTYxNg==", "bodyText": "Good catch, the FetchError should always have additional, but we are handling errors with an unknown format e.g. in the UnauthorizedErrorPage as well, just in case,  so I added the another check.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413049616", "createdAt": "2020-04-22T14:48:43Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/pages/StreamPermissionErrorPage.jsx", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import UnauthorizedErrorPage from './UnauthorizedErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+};\n+\n+const StreamPermissionErrorPage = ({ error }: Props) => {\n+  const description = (\n+    <>\n+      <p>This resource includes streams you do not have permissions to.</p>\n+      <p>Please contact your administrator and provide the error details which indlude a list of streams you need access to.</p>\n+    </>\n+  );\n+  const streamIds = error?.additional.body?.streams;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MjU3Ng=="}, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTE3MDYxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/pages/UnauthorizedErrorPage.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNDoxM1rOGJqVzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNDoxM1rOGJqVzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NDA3OA==", "bodyText": "Whenever we do not want the result of a boolean expression, we should now use ?? instead of ||. (As long as in this case we do not want to support setting the description prop to null to explicitly disable showing a description)", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r412784078", "createdAt": "2020-04-22T08:34:13Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/UnauthorizedErrorPage.jsx", "diffHunk": "@@ -8,37 +8,56 @@ import { FetchError } from 'logic/rest/FetchProvider';\n import { Icon, ClipboardButton } from 'components/common';\n import ErrorPage from 'components/errors/ErrorPage';\n \n+const createErrorMessageString = (errorDetails: ?string, pageDetails: string, errorMessage: string) => {\n+  const defaultText = `${pageDetails}\\n${errorMessage}`;\n+  if (errorDetails) {\n+    return `${errorDetails}\\n${defaultText}`;\n+  }\n+  return defaultText;\n+};\n+\n type Props = {\n+  description?: React.Node,\n   error: FetchError,\n+  errorDetails?: string,\n   location: {\n     pathname: string,\n   },\n+  title: string,\n };\n \n-const UnauthorizedErrorPage = ({ error, location: { pathname } }: Props) => {\n+const UnauthorizedErrorPage = ({ error, errorDetails, title, description, location: { pathname } }: Props) => {\n   const errorMessage = error?.message || JSON.stringify(error);\n   const pageDetails = `The permissions check for the following request failed,\\nwhile trying to access ${pathname}.`;\n-  const description = (\n+  const defaultDescription = (\n     <>\n       <p>You do not have the required permissions to view this resource.</p>\n       <p>Please contact your administrator and provide the error details.</p>\n     </>\n   );\n+  const errorMessageString = createErrorMessageString(errorDetails, pageDetails, errorMessage);\n   return (\n-    <ErrorPage title=\"Missing Permissions\" description={description}>\n+    <ErrorPage title={title} description={description || defaultDescription}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e39cd548e951d213fcfa990faa4c0370946e30c8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDQ5NTMwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/errors/ReportedError.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNzo0MTo1OVrOGKbRKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowOTo0OVrOGKcaUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4NTcwNQ==", "bodyText": "This component needs a better name, imo. Maybe something like ReportedErrorBoundary? It is not a react error boundary, nevertheless that's what it is doing: Rendering its children or an error if present. Renaming the component also removes the need to rename the ReportedError type import.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413585705", "createdAt": "2020-04-23T07:41:59Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/components/errors/ReportedError.jsx", "diffHunk": "@@ -4,10 +4,11 @@ import { useState, useEffect } from 'react';\n import { withRouter } from 'react-router';\n \n import ErrorsActions from 'actions/errors/ErrorsActions';\n-import { type ReportedError as ReportedErrorType, ReactErrorType, UnauthorizedErrorType } from 'logic/errors/ReportedErrors';\n+import { type ReportedError as ReportedErrorType, ReactErrorType, UnauthorizedErrorType, StreamPermissionErrorType } from 'logic/errors/ReportedErrors';\n \n import RuntimeErrorPage from 'pages/RuntimeErrorPage';\n import UnauthorizedErrorPage from 'pages/UnauthorizedErrorPage';\n+import StreamPermissionErrorPage from 'pages/StreamPermissionErrorPage';\n \n const ReportedError = ({ children, router }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa7112f3f30866d0f4b89431a71b3432fdcfe84"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDQzNQ==", "bodyText": "I agree, my only problem was I connect \"ErrorBoundary\" in React with componentDidCatch, but of course it is a more meaningful name.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413604435", "createdAt": "2020-04-23T08:09:49Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/errors/ReportedError.jsx", "diffHunk": "@@ -4,10 +4,11 @@ import { useState, useEffect } from 'react';\n import { withRouter } from 'react-router';\n \n import ErrorsActions from 'actions/errors/ErrorsActions';\n-import { type ReportedError as ReportedErrorType, ReactErrorType, UnauthorizedErrorType } from 'logic/errors/ReportedErrors';\n+import { type ReportedError as ReportedErrorType, ReactErrorType, UnauthorizedErrorType, StreamPermissionErrorType } from 'logic/errors/ReportedErrors';\n \n import RuntimeErrorPage from 'pages/RuntimeErrorPage';\n import UnauthorizedErrorPage from 'pages/UnauthorizedErrorPage';\n+import StreamPermissionErrorPage from 'pages/StreamPermissionErrorPage';\n \n const ReportedError = ({ children, router }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzU4NTcwNQ=="}, "originalCommit": {"oid": "cfa7112f3f30866d0f4b89431a71b3432fdcfe84"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDY4MjI1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/errors/ReportedErrors.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMzo0N1rOGKc_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyMzo0N1rOGKc_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNDA0Nw==", "bodyText": "This constant is not used, from what I can see. I guess we will introduce it later, but let's remove it for now if it's not used yet.", "url": "https://github.com/Graylog2/graylog2-server/pull/7782#discussion_r413614047", "createdAt": "2020-04-23T08:23:47Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/logic/errors/ReportedErrors.js", "diffHunk": "@@ -3,18 +3,23 @@\n import { FetchError } from 'logic/rest/FetchProvider';\n \n export const ReactErrorType = 'ReactError';\n+export const NotFoundErrorType = 'NotFoundError';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc19e3d1affb518b37d2cfb5ac6ce26b5befde3e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3776, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}