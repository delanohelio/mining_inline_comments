{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTYyNjkw", "number": 9634, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjoxMlrOFVqqvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMzoyNDoxNlrOFWrBUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjYzNDg2OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjoxMlrOIePutQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjoxMlrOIePutQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU4NTkwOQ==", "bodyText": "We should match the arguments it is called with here.", "url": "https://github.com/Graylog2/graylog2-server/pull/9634#discussion_r568585909", "createdAt": "2021-02-02T13:06:12Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.test.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import React from 'react';\n+import { render, fireEvent, waitFor } from 'wrappedTestingLibrary';\n+\n+import HighlightForm from 'views/components/sidebar/highlighting/HighlightForm';\n+import HighlightingRule from 'views/logic/views/formatting/highlighting/HighlightingRule';\n+import { HighlightingRulesActions } from 'views/stores/HighlightingRulesStore';\n+\n+jest.mock('views/stores/HighlightingRulesStore', () => ({\n+  HighlightingRulesActions: {\n+    add: jest.fn(() => Promise.resolve()),\n+    remove: jest.fn(() => Promise.resolve()),\n+  },\n+}));\n+\n+const rule = HighlightingRule.builder()\n+  .color('#333333')\n+  .condition('!=')\n+  .field('foob')\n+  .value('noob')\n+  .build();\n+\n+describe('HighlightForm', () => {\n+  it('should render for edit', async () => {\n+    const { findByText } = render(<HighlightForm onClose={() => {}} rule={rule} />);\n+\n+    const elem = await findByText('Edit Highlighting Rule');\n+\n+    expect(elem).not.toBeEmptyDOMElement();\n+  });\n+\n+  it('should render for new', async () => {\n+    const { findByText } = render(<HighlightForm onClose={() => {}} />);\n+\n+    const elem = await findByText('New Highlighting Rule');\n+\n+    expect(elem).not.toBeEmptyDOMElement();\n+  });\n+\n+  it('should fire onClose on cancel', async () => {\n+    const onClose = jest.fn();\n+    const { findByText } = render(<HighlightForm onClose={onClose} />);\n+\n+    const elem = await findByText('Cancel');\n+\n+    fireEvent.click(elem);\n+\n+    expect(onClose).toBeCalledTimes(1);\n+  });\n+\n+  it('should fire remove action when saving a existing rule', async () => {\n+    const { findByText } = render(<HighlightForm onClose={() => {}} rule={rule} />);\n+\n+    const elem = await findByText('Save');\n+\n+    fireEvent.click(elem);\n+\n+    await waitFor(() => expect(HighlightingRulesActions.remove).toBeCalledTimes(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784311e47c39d3223ae8836d60e67b9b061ac558"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjYzNTEzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.test.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjoxOVrOIePu5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjoxOVrOIePu5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU4NTk1Ng==", "bodyText": "We should match the arguments it is called with here.", "url": "https://github.com/Graylog2/graylog2-server/pull/9634#discussion_r568585956", "createdAt": "2021-02-02T13:06:19Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.test.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import React from 'react';\n+import { render, fireEvent, waitFor } from 'wrappedTestingLibrary';\n+\n+import HighlightForm from 'views/components/sidebar/highlighting/HighlightForm';\n+import HighlightingRule from 'views/logic/views/formatting/highlighting/HighlightingRule';\n+import { HighlightingRulesActions } from 'views/stores/HighlightingRulesStore';\n+\n+jest.mock('views/stores/HighlightingRulesStore', () => ({\n+  HighlightingRulesActions: {\n+    add: jest.fn(() => Promise.resolve()),\n+    remove: jest.fn(() => Promise.resolve()),\n+  },\n+}));\n+\n+const rule = HighlightingRule.builder()\n+  .color('#333333')\n+  .condition('!=')\n+  .field('foob')\n+  .value('noob')\n+  .build();\n+\n+describe('HighlightForm', () => {\n+  it('should render for edit', async () => {\n+    const { findByText } = render(<HighlightForm onClose={() => {}} rule={rule} />);\n+\n+    const elem = await findByText('Edit Highlighting Rule');\n+\n+    expect(elem).not.toBeEmptyDOMElement();\n+  });\n+\n+  it('should render for new', async () => {\n+    const { findByText } = render(<HighlightForm onClose={() => {}} />);\n+\n+    const elem = await findByText('New Highlighting Rule');\n+\n+    expect(elem).not.toBeEmptyDOMElement();\n+  });\n+\n+  it('should fire onClose on cancel', async () => {\n+    const onClose = jest.fn();\n+    const { findByText } = render(<HighlightForm onClose={onClose} />);\n+\n+    const elem = await findByText('Cancel');\n+\n+    fireEvent.click(elem);\n+\n+    expect(onClose).toBeCalledTimes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784311e47c39d3223ae8836d60e67b9b061ac558"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjYzNjc1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjo0NlrOIePv7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowNjo0NlrOIePv7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU4NjIyMg==", "bodyText": "We should check if the form is populated with values here.", "url": "https://github.com/Graylog2/graylog2-server/pull/9634#discussion_r568586222", "createdAt": "2021-02-02T13:06:46Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.test.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import React from 'react';\n+import { render, fireEvent, waitFor } from 'wrappedTestingLibrary';\n+\n+import HighlightForm from 'views/components/sidebar/highlighting/HighlightForm';\n+import HighlightingRule from 'views/logic/views/formatting/highlighting/HighlightingRule';\n+import { HighlightingRulesActions } from 'views/stores/HighlightingRulesStore';\n+\n+jest.mock('views/stores/HighlightingRulesStore', () => ({\n+  HighlightingRulesActions: {\n+    add: jest.fn(() => Promise.resolve()),\n+    remove: jest.fn(() => Promise.resolve()),\n+  },\n+}));\n+\n+const rule = HighlightingRule.builder()\n+  .color('#333333')\n+  .condition('!=')\n+  .field('foob')\n+  .value('noob')\n+  .build();\n+\n+describe('HighlightForm', () => {\n+  it('should render for edit', async () => {\n+    const { findByText } = render(<HighlightForm onClose={() => {}} rule={rule} />);\n+\n+    const elem = await findByText('Edit Highlighting Rule');\n+\n+    expect(elem).not.toBeEmptyDOMElement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784311e47c39d3223ae8836d60e67b9b061ac558"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjY0MzI5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowODoxNlrOIePzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMzowODoxNlrOIePzzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODU4NzIxNQ==", "bodyText": "This is too much logic in the component, imo. We could either:\n\ncreate a domain action wrapping these actions\ncreate an update store action that actually does the update in place", "url": "https://github.com/Graylog2/graylog2-server/pull/9634#discussion_r568587215", "createdAt": "2021-02-02T13:08:16Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.tsx", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import { useContext } from 'react';\n+import PropTypes from 'prop-types';\n+import * as Immutable from 'immutable';\n+import { Formik, Form, Field } from 'formik';\n+\n+import { Input, BootstrapModalWrapper } from 'components/bootstrap';\n+import { Button, Modal } from 'components/graylog';\n+import FieldTypesContext from 'views/components/contexts/FieldTypesContext';\n+import FieldTypeMapping from 'views/logic/fieldtypes/FieldTypeMapping';\n+import Select from 'components/common/Select';\n+import { ColorPickerPopover } from 'components/common';\n+import { DEFAULT_CUSTOM_HIGHLIGHT_RANGE } from 'views/Constants';\n+import ColorPreview from 'views/components/sidebar/highlighting/ColorPreview';\n+import { HighlightingRulesActions } from 'views/stores/HighlightingRulesStore';\n+import HighlightingRule from 'views/logic/views/formatting/highlighting/HighlightingRule';\n+\n+type Props = {\n+  onClose: () => void,\n+  rule: HighlightingRule | null | undefined,\n+};\n+\n+const _isRequired = (field) => (value) => {\n+  if (!value || value === '') {\n+    return `${field} is required`;\n+  }\n+\n+  return undefined;\n+};\n+\n+const numberConditionOptions = ['==', '!=', '<=', '>=', '<', '>'].map((cond) => ({ value: cond, label: cond }));\n+const otherConditionOptions = ['==', '!='].map((cond) => ({ value: cond, label: cond }));\n+\n+const HighlightForm = ({ onClose, rule }: Props) => {\n+  const fieldTypes = useContext(FieldTypesContext);\n+  const fields = fieldTypes?.all\n+    ? fieldTypes.all\n+    : Immutable.List<FieldTypeMapping>();\n+  const fieldOptions = fields.map(({ name }) => ({ value: name, label: name })).toArray();\n+\n+  const onSubmit = ({ field, value, color, condition }) => {\n+    if (rule) {\n+      HighlightingRulesActions.remove(rule).then(() => HighlightingRulesActions.add(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784311e47c39d3223ae8836d60e67b9b061ac558"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5MzE3ODQyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMzoyNDoxNlrOIfzasg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQxMzoyNDoxNlrOIfzasg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDIxOTE4Ng==", "bodyText": "We should sort the field names lexicographically using defaultCompare here.", "url": "https://github.com/Graylog2/graylog2-server/pull/9634#discussion_r570219186", "createdAt": "2021-02-04T13:24:16Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/highlighting/HighlightForm.tsx", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import { useContext } from 'react';\n+import PropTypes from 'prop-types';\n+import * as Immutable from 'immutable';\n+import { Formik, Form, Field } from 'formik';\n+\n+import { Input, BootstrapModalWrapper } from 'components/bootstrap';\n+import { Button, Modal } from 'components/graylog';\n+import FieldTypesContext from 'views/components/contexts/FieldTypesContext';\n+import FieldTypeMapping from 'views/logic/fieldtypes/FieldTypeMapping';\n+import Select from 'components/common/Select';\n+import { ColorPickerPopover } from 'components/common';\n+import { DEFAULT_CUSTOM_HIGHLIGHT_RANGE } from 'views/Constants';\n+import ColorPreview from 'views/components/sidebar/highlighting/ColorPreview';\n+import { HighlightingRulesActions } from 'views/stores/HighlightingRulesStore';\n+import HighlightingRule, { ConditionLabelMap, StringConditionLabelMap } from 'views/logic/views/formatting/highlighting/HighlightingRule';\n+\n+type Props = {\n+  onClose: () => void,\n+  rule: HighlightingRule | null | undefined,\n+};\n+\n+const _isRequired = (field) => (value) => {\n+  if (!value || value === '') {\n+    return `${field} is required`;\n+  }\n+\n+  return undefined;\n+};\n+\n+const numberConditionOptions = Object.entries(ConditionLabelMap).map(([value, label]) => ({ value, label }));\n+const otherConditionOptions = Object.entries(StringConditionLabelMap).map(([value, label]) => ({ value, label }));\n+\n+const HighlightForm = ({ onClose, rule }: Props) => {\n+  const fieldTypes = useContext(FieldTypesContext);\n+  const fields = fieldTypes?.all\n+    ? fieldTypes.all\n+    : Immutable.List<FieldTypeMapping>();\n+  const fieldOptions = fields.map(({ name }) => ({ value: name, label: name })).toArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752d799ede09776fa8f08d91c6d3b2a4bb8e1865"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4322, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}