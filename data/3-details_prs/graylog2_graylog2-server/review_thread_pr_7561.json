{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzQ0MjEx", "number": 7561, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1NToyOVrODp7GxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowNzo1NlrODq3L7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjg2NTk3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1NToyOVrOF5Ziqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1NToyOVrOF5Ziqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTYyNg==", "bodyText": "This assumption is not correct, unfortunately. On some occasions the Graylog node will stop when MongoDB is not available.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r395731626", "createdAt": "2020-03-20T15:55:29Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackend.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.graylog.testing.elasticsearch.ElasticsearchInstance;\n+import org.graylog.testing.graylognode.NodeInstance;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+\n+public class GraylogBackend {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GraylogBackend.class);\n+    private final ElasticsearchInstance es;\n+    private final MongoDBInstance mongodb;\n+    private final NodeInstance node;\n+\n+    private static GraylogBackend instance;\n+\n+    public static GraylogBackend createStarted() {\n+        if (instance == null)\n+            instance = createStartedBackend();\n+        else {\n+            instance.fullReset();\n+            LOG.info(\"Reusing running backend\");\n+        }\n+\n+        return instance;\n+    }\n+\n+    // Assuming that parallel start works, because\n+    // - mongodb and es are independent\n+    // - node will retry connections to mongodb and es until they are there", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mjg3MTQyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackendExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1Njo1MlrOF5ZmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1Njo1MlrOF5ZmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjUzOA==", "bodyText": "We usually use {} around if statements.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r395732538", "createdAt": "2020-03-20T15:56:52Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackendExtension.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import com.google.common.base.Stopwatch;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+\n+public class GraylogBackendExtension implements AfterEachCallback, BeforeAllCallback, ParameterResolver {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GraylogBackendExtension.class);\n+    private static final Namespace NAMESPACE = Namespace.create(GraylogBackendExtension.class);\n+\n+    private GraylogBackend backend;\n+    private Lifecycle lifecycle;\n+\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        lifecycle = Lifecycle.from(context);\n+\n+        backend = GraylogBackend.createStarted();\n+\n+        context.getStore(NAMESPACE).put(context.getRequiredTestClass().getName(), backend);\n+\n+        sw.stop();\n+\n+        LOG.info(\"Backend started after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+    }\n+\n+    @Override\n+    public void afterEach(ExtensionContext context) {\n+        if (context.getExecutionException().isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjkwNTUzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjowNTozM1rOF5Z7_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjowNTozM1rOF5Z7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczODEwOA==", "bodyText": "We usually add {} around all if statements.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r395738108", "createdAt": "2020-03-20T16:05:33Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDk0ODM2OnYy", "diffSide": "RIGHT", "path": "integration-tests/src/test/java/integration/system/bundles/ContentPackStreamsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MTozMVrOF6mNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MTozMVrOF6mNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzY2Mg==", "bodyText": "This file is completly outdated and can be deleted!", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r396987662", "createdAt": "2020-03-24T08:51:31Z", "author": {"login": "kmerz"}, "path": "integration-tests/src/test/java/integration/system/bundles/ContentPackStreamsTest.java", "diffHunk": "@@ -17,18 +17,20 @@\n package integration.system.bundles;\n \n import com.google.common.net.HttpHeaders;\n-import com.jayway.restassured.response.ValidatableResponse;\n import integration.BaseRestTest;\n import integration.RequiresAuthentication;\n import integration.RequiresVersion;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.net.URI;\n \n-import static com.jayway.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.given;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.hamcrest.CoreMatchers.notNullValue;\n \n+@Ignore(\"legacy test that should be converted or deleted\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjQ0MDI4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxMTo1OFrOF60-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxMTo1OFrOF60-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyOTY4NA==", "bodyText": "Please use braces {} in conditional statements, thanks! \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397229684", "createdAt": "2020-03-24T15:11:58Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackend.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.graylog.testing.elasticsearch.ElasticsearchInstance;\n+import org.graylog.testing.graylognode.NodeInstance;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+\n+public class GraylogBackend {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GraylogBackend.class);\n+    private final ElasticsearchInstance es;\n+    private final MongoDBInstance mongodb;\n+    private final NodeInstance node;\n+\n+    private static GraylogBackend instance;\n+\n+    public static GraylogBackend createStarted() {\n+        if (instance == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjQ1NTgyOnYy", "diffSide": "RIGHT", "path": "full-backend-tests/src/test/java/org/graylog/testing/fullbackend/BackendStartupIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxNToxMVrOF61IYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0NTowMVrOF7ZSkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjIyNw==", "bodyText": "How about using .basePath() and .baseUri() here? That would allow us to use .get(\"/system/plugins\") in the test without having to use string concatenation all the time.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397232227", "createdAt": "2020-03-24T15:15:11Z", "author": {"login": "bernd"}, "path": "full-backend-tests/src/test/java/org/graylog/testing/fullbackend/BackendStartupIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.fullbackend;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.common.collect.ImmutableSet;\n+import io.restassured.RestAssured;\n+import io.restassured.builder.RequestSpecBuilder;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.testing.completebackend.ApiIntegrationTest;\n+import org.graylog.testing.completebackend.GraylogBackend;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static io.restassured.http.ContentType.JSON;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.testing.completebackend.Lifecycle.CLASS;\n+\n+\n+@ApiIntegrationTest(serverLifecycle = CLASS)\n+class BackendStartupIT {\n+\n+    private final GraylogBackend sut;\n+\n+    public BackendStartupIT(GraylogBackend sut) {\n+        this.sut = sut;\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+        RestAssured.requestSpecification =\n+                new RequestSpecBuilder().build()\n+                        .accept(JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNDY1OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397824659", "createdAt": "2020-03-25T12:45:01Z", "author": {"login": "alex-konn"}, "path": "full-backend-tests/src/test/java/org/graylog/testing/fullbackend/BackendStartupIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.fullbackend;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.common.collect.ImmutableSet;\n+import io.restassured.RestAssured;\n+import io.restassured.builder.RequestSpecBuilder;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.testing.completebackend.ApiIntegrationTest;\n+import org.graylog.testing.completebackend.GraylogBackend;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static io.restassured.http.ContentType.JSON;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.testing.completebackend.Lifecycle.CLASS;\n+\n+\n+@ApiIntegrationTest(serverLifecycle = CLASS)\n+class BackendStartupIT {\n+\n+    private final GraylogBackend sut;\n+\n+    public BackendStartupIT(GraylogBackend sut) {\n+        this.sut = sut;\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+        RestAssured.requestSpecification =\n+                new RequestSpecBuilder().build()\n+                        .accept(JSON)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjIyNw=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjQ5Mjk0OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/ApiIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyMzowM1rOF61gmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzowMjo0NFrOF7Z7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzODQyNg==", "bodyText": "I think this could use some javadoc. \ud83d\ude04 I guess this is one of the classes/annontations that test writers will lookup a lot.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397238426", "createdAt": "2020-03-24T15:23:03Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/ApiIntegrationTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Target({TYPE, METHOD})\n+@ExtendWith(GraylogBackendExtension.class)\n+@Retention(RUNTIME)\n+@Tag(\"integration\")\n+public @interface ApiIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgzNTE1Nw==", "bodyText": "Ok, I'm adding something. I'm unsure how much detail is necessary, but we can clarify that in the next review round.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397835157", "createdAt": "2020-03-25T13:02:44Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/ApiIntegrationTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Target({TYPE, METHOD})\n+@ExtendWith(GraylogBackendExtension.class)\n+@Retention(RUNTIME)\n+@Tag(\"integration\")\n+public @interface ApiIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzODQyNg=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUwMjE1OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/Lifecycle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNTowMFrOF61muA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzoxNTo1N1rOF7acdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzOTk5Mg==", "bodyText": "Same as for the ApiIntegrationTest class, I think we should document the different enum values here and describe what they are doing.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397239992", "createdAt": "2020-03-24T15:25:00Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/Lifecycle.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Optional;\n+\n+public enum Lifecycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg0MzU3NQ==", "bodyText": ":+1", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397843575", "createdAt": "2020-03-25T13:15:57Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/Lifecycle.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Optional;\n+\n+public enum Lifecycle {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzOTk5Mg=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUxNjcyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyNzo1N1rOF61v_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1NTo0MVrOF7cMTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjM2Ng==", "bodyText": "Excluding the javadoc build might improve performance a tiny bit: (not tested yet)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n          \n          \n            \n                private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true -Dmaven.javadoc.skip=true\";", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397242366", "createdAt": "2020-03-24T15:27:57Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MjIwNg==", "bodyText": "Well, at least it doesn't hurt! \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397872206", "createdAt": "2020-03-25T13:55:41Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjM2Ng=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUxOTUzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToyODozNlrOF61xzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1Njo1NVrOF7cQGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjgyOA==", "bodyText": "Can you please add a small comment why this indicates that we are running from maven? Thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397242828", "createdAt": "2020-03-24T15:28:36Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MzE3OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397873178", "createdAt": "2020-03-25T13:56:55Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjgyOA=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUyNzA4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMDowNFrOF612dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1NjowOVrOF7cNug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NDAyMg==", "bodyText": "Nitpick: you could use value placeholder to avoid string concatenation\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n          \n          \n            \n                    LOG.info(\"Finished packaging after {} seconds\", sw.elapsed(TimeUnit.SECONDS));", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397244022", "createdAt": "2020-03-24T15:30:04Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MjU3MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397872570", "createdAt": "2020-03-25T13:56:09Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NDAyMg=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUzMzA5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMToxOFrOF616RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzoyOToyM1rOF7bBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NDk5Nw==", "bodyText": "What do you think about adding the MVN_COMMAND to the error message? Could be useful for debugging.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397244997", "createdAt": "2020-03-24T15:31:18Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+\n+        ensureZeroExitCode(p, exitCode);\n+    }\n+\n+    private static int waitForExit(Process p) {\n+        try {\n+            return p.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process for mvn package was interrupted\", e);\n+        }\n+    }\n+\n+    private static Process startProcess(String pomDir) {\n+        try {\n+            return new ProcessBuilder().command(\"sh\", \"-c\", MVN_COMMAND).directory(new File(pomDir)).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to start process for mvn package\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg1MjkzMA==", "bodyText": "Good idea! \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397852930", "createdAt": "2020-03-25T13:29:23Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+\n+        ensureZeroExitCode(p, exitCode);\n+    }\n+\n+    private static int waitForExit(Process p) {\n+        try {\n+            return p.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process for mvn package was interrupted\", e);\n+        }\n+    }\n+\n+    private static Process startProcess(String pomDir) {\n+        try {\n+            return new ProcessBuilder().command(\"sh\", \"-c\", MVN_COMMAND).directory(new File(pomDir)).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to start process for mvn package\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NDk5Nw=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUzNTM3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMTo0OVrOF617pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzoyOTozMFrOF7bBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NTM0OA==", "bodyText": "What do you think about adding the MVN_COMMAND to the error message? Could be useful for debugging.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397245348", "createdAt": "2020-03-24T15:31:49Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+\n+        ensureZeroExitCode(p, exitCode);\n+    }\n+\n+    private static int waitForExit(Process p) {\n+        try {\n+            return p.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process for mvn package was interrupted\", e);\n+        }\n+    }\n+\n+    private static Process startProcess(String pomDir) {\n+        try {\n+            return new ProcessBuilder().command(\"sh\", \"-c\", MVN_COMMAND).directory(new File(pomDir)).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to start process for mvn package\", e);\n+        }\n+    }\n+\n+    private static void ensureZeroExitCode(Process p, int exitCode) {\n+        if (exitCode > 0) {\n+            new BufferedReader(new InputStreamReader(p.getInputStream(), Charset.defaultCharset())).lines()\n+                    .forEach(System.out::println);\n+\n+            throw new RuntimeException(\"mvn package exited with \" + exitCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg1MzAwOA==", "bodyText": "Good idea! \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397853008", "createdAt": "2020-03-25T13:29:30Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+\n+        ensureZeroExitCode(p, exitCode);\n+    }\n+\n+    private static int waitForExit(Process p) {\n+        try {\n+            return p.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process for mvn package was interrupted\", e);\n+        }\n+    }\n+\n+    private static Process startProcess(String pomDir) {\n+        try {\n+            return new ProcessBuilder().command(\"sh\", \"-c\", MVN_COMMAND).directory(new File(pomDir)).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to start process for mvn package\", e);\n+        }\n+    }\n+\n+    private static void ensureZeroExitCode(Process p, int exitCode) {\n+        if (exitCode > 0) {\n+            new BufferedReader(new InputStreamReader(p.getInputStream(), Charset.defaultCharset())).lines()\n+                    .forEach(System.out::println);\n+\n+            throw new RuntimeException(\"mvn package exited with \" + exitCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NTM0OA=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU0MzMyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMzoyMlrOF62Ayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMzoyMlrOF62Ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NjY2Ng==", "bodyText": "We usually use braces {} around conditionals.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397246666", "createdAt": "2020-03-24T15:33:22Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU1MjUyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNToxNFrOF62Gmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1MjozNlrOF7Zjeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODE1NQ==", "bodyText": "Do we want to use API_PORT here instead of hardcoding the port?", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397248155", "createdAt": "2020-03-24T15:35:14Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)\n+                .withEnv(\"GRAYLOG_ELASTICSEARCH_HOSTS\", config.elasticsearchUri)\n+                .withEnv(\"GRAYLOG_PASSWORD_SECRET\", \"M4lteserKreuzHerrStrack?\")\n+                .withEnv(\"GRAYLOG_NODE_ID_FILE\", \"data/config/node-id\")\n+                .withEnv(\"GRAYLOG_HTTP_BIND_ADDRESS\", \"0.0.0.0:9000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyODk4Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397828986", "createdAt": "2020-03-25T12:52:36Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)\n+                .withEnv(\"GRAYLOG_ELASTICSEARCH_HOSTS\", config.elasticsearchUri)\n+                .withEnv(\"GRAYLOG_PASSWORD_SECRET\", \"M4lteserKreuzHerrStrack?\")\n+                .withEnv(\"GRAYLOG_NODE_ID_FILE\", \"data/config/node-id\")\n+                .withEnv(\"GRAYLOG_HTTP_BIND_ADDRESS\", \"0.0.0.0:9000\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODE1NQ=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjYzMzA2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1MTozNlrOF6250Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo0NjoxNFrOF7ZVMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTI2NQ==", "bodyText": "Can you please write down the plain text password in a comment? Could be useful for debugging.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397261265", "createdAt": "2020-03-24T15:51:36Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyNTMyOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397825329", "createdAt": "2020-03-25T12:46:14Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTI2NQ=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY1MzE4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1NTo0OFrOF63HDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjo1MTo0M1rOF7Zhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NDY1Mw==", "bodyText": "We can add GRAYLOG_LB_RECOGNITION_PERIOD_SECONDS=0 here. That saves 3 seconds on each server shutdown. \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397264653", "createdAt": "2020-03-24T15:55:48Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NTE3OQ==", "bodyText": "We should also add GRAYLOG_VERSIONCHECKS=false to make sure the test server doesn't call out to our versioncheck API service.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397265179", "createdAt": "2020-03-24T15:56:28Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NDY1Mw=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyODQ5OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397828499", "createdAt": "2020-03-25T12:51:43Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NDY1Mw=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY3MTM3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1OTozMVrOF63S2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo1OTozMVrOF63S2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NzY3NQ==", "bodyText": "Please use braces {} around conditionals. Thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397267675", "createdAt": "2020-03-24T15:59:31Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+public class ResourceUtil {\n+    static File resourceToTmpFile(@SuppressWarnings(\"SameParameterValue\") String resourceName) {\n+\n+        InputStream resource = ResourceUtil.class.getClassLoader().getResourceAsStream(resourceName);\n+\n+        if (resource == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY5MjAzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMzo1N1rOF63gqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1MTo1OFrOF7cBLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MTIxMQ==", "bodyText": "Let's use File.createTempFile() here and File#deleteOnExit() to make sure we clean it up afterwards.\nLet's also use a descriptive name for the tempfile so people know what it is when seeing strange files in /tmp. \ud83d\ude09", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397271211", "createdAt": "2020-03-24T16:03:57Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+public class ResourceUtil {\n+    static File resourceToTmpFile(@SuppressWarnings(\"SameParameterValue\") String resourceName) {\n+\n+        InputStream resource = ResourceUtil.class.getClassLoader().getResourceAsStream(resourceName);\n+\n+        if (resource == null)\n+            throw new RuntimeException(\"Couldn't load resource \" + resourceName);\n+\n+        File f = new File(\"/tmp/\" + UUID.randomUUID().toString() + \"-\" + Paths.get(resourceName).getFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg2OTM1OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397869358", "createdAt": "2020-03-25T13:51:58Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+public class ResourceUtil {\n+    static File resourceToTmpFile(@SuppressWarnings(\"SameParameterValue\") String resourceName) {\n+\n+        InputStream resource = ResourceUtil.class.getClassLoader().getResourceAsStream(resourceName);\n+\n+        if (resource == null)\n+            throw new RuntimeException(\"Couldn't load resource \" + resourceName);\n+\n+        File f = new File(\"/tmp/\" + UUID.randomUUID().toString() + \"-\" + Paths.get(resourceName).getFileName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MTIxMQ=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjcwOTU5OnYy", "diffSide": "RIGHT", "path": "integration-tests/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowNzo1NlrOF63scA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMzo1NTowMlrOF7cKSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NDIyNA==", "bodyText": "Do we want to run these now? I thought the old integration tests are going away soon?", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397274224", "createdAt": "2020-03-24T16:07:56Z", "author": {"login": "bernd"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -37,10 +37,25 @@\n         <maven.javadoc.skip>true</maven.javadoc.skip>\n         <maven.install.skip>true</maven.install.skip>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <skip.integration.tests>true</skip.integration.tests>\n+        <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NTgzNw==", "bodyText": "Okay, you @Ignore all tests now. What's the reason for enabling the tests and then ignoring every test? \ud83d\ude03", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397275837", "createdAt": "2020-03-24T16:09:53Z", "author": {"login": "bernd"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -37,10 +37,25 @@\n         <maven.javadoc.skip>true</maven.javadoc.skip>\n         <maven.install.skip>true</maven.install.skip>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <skip.integration.tests>true</skip.integration.tests>\n+        <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NDIyNA=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3MTY5MA==", "bodyText": "\ud83d\ude06 The reason was that I investigated, if it would make sense (and how hard it would be) to port the new tests to the new solution. I obviously forgot to switch them back off.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397871690", "createdAt": "2020-03-25T13:55:02Z", "author": {"login": "alex-konn"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -37,10 +37,25 @@\n         <maven.javadoc.skip>true</maven.javadoc.skip>\n         <maven.install.skip>true</maven.install.skip>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <skip.integration.tests>true</skip.integration.tests>\n+        <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NDIyNA=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3889, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}