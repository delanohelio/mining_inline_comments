{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNDM4MjYz", "number": 9007, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyMzowNFrOEl_3Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyMzowNFrOEl_3Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mjc5MDcwOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authservice/AuthServiceAuthenticator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToyMzowNFrOHVxfeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTowMjozMVrOHV-otQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5MzAxNg==", "bodyText": "My thoughts to this:\n\nLDAP server logs to graylog\nLDAP server is \"broken\"\nYou want to look at the problem but you can't log in to graylog since LDAP is \"broken\"\nA fallback user with reader rights (so other than admin) would be helpful", "url": "https://github.com/Graylog2/graylog2-server/pull/9007#discussion_r492593016", "createdAt": "2020-09-22T09:23:04Z", "author": {"login": "kmerz"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/AuthServiceAuthenticator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.security.authservice;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Optional;\n+\n+public class AuthServiceAuthenticator {\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthServiceAuthenticator.class);\n+\n+    private final GlobalAuthServiceConfig authServiceConfig;\n+    private final ProvisionerService provisionerService;\n+\n+    @Inject\n+    public AuthServiceAuthenticator(GlobalAuthServiceConfig authServiceConfig,\n+                                    ProvisionerService provisionerService) {\n+        this.authServiceConfig = authServiceConfig;\n+        this.provisionerService = provisionerService;\n+    }\n+\n+    /**\n+     * Tries to authenticate the username with the given password and returns the authenticated username if successful.\n+     *\n+     * @param authCredentials the authentication credentials\n+     * @return the authenticated username\n+     */\n+    public AuthServiceResult authenticate(AuthServiceCredentials authCredentials) {\n+        final Optional<AuthServiceBackend> activeBackend = authServiceConfig.getActiveBackend();\n+\n+        if (activeBackend.isPresent()) {\n+            final AuthServiceResult result = authenticate(authCredentials, activeBackend.get());\n+            if (result.isSuccess()) {\n+                return result;\n+            }\n+            // TODO: Do we want the fallback to the default backend here? Maybe it should be configurable?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "579545f40602081c83358b5a9ec850cf8a309b6a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgwODM3Mw==", "bodyText": "@kmerz One fallback user that is always there (at least at the moment) is the root user account. People can also still add users to MongoDB as fallback admin accounts if the external provider breaks.\nThis comment was more about if we always want the fallback to the MongoDB backend or are there reasons to not do that. To make you use case work, we need the fallback. (and it's also that way at the moment)", "url": "https://github.com/Graylog2/graylog2-server/pull/9007#discussion_r492808373", "createdAt": "2020-09-22T15:02:31Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/AuthServiceAuthenticator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.security.authservice;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.Optional;\n+\n+public class AuthServiceAuthenticator {\n+    private static final Logger LOG = LoggerFactory.getLogger(AuthServiceAuthenticator.class);\n+\n+    private final GlobalAuthServiceConfig authServiceConfig;\n+    private final ProvisionerService provisionerService;\n+\n+    @Inject\n+    public AuthServiceAuthenticator(GlobalAuthServiceConfig authServiceConfig,\n+                                    ProvisionerService provisionerService) {\n+        this.authServiceConfig = authServiceConfig;\n+        this.provisionerService = provisionerService;\n+    }\n+\n+    /**\n+     * Tries to authenticate the username with the given password and returns the authenticated username if successful.\n+     *\n+     * @param authCredentials the authentication credentials\n+     * @return the authenticated username\n+     */\n+    public AuthServiceResult authenticate(AuthServiceCredentials authCredentials) {\n+        final Optional<AuthServiceBackend> activeBackend = authServiceConfig.getActiveBackend();\n+\n+        if (activeBackend.isPresent()) {\n+            final AuthServiceResult result = authenticate(authCredentials, activeBackend.get());\n+            if (result.isSuccess()) {\n+                return result;\n+            }\n+            // TODO: Do we want the fallback to the default backend here? Maybe it should be configurable?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5MzAxNg=="}, "originalCommit": {"oid": "579545f40602081c83358b5a9ec850cf8a309b6a"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4494, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}