{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNjE5OTgy", "number": 7206, "title": "Add mapping of stream ids in view content packs", "bodyText": "Description\nThis change adds this mapping to the Widget and WidgetEntit\nfor the DashboardWidget.\nFor the search types there are now Entities so we can easily\nmap the streams during creation and installation of the\ncontent pack.\nFor the query we needed to add a generic Builder access\nfor the Filter so we could change the Stream id for\na StreamFilter and rebuild the Filter refered in the\nQueryEntity and Query.\n\nMotivation and Context\nPrior this change, when creating a content pack containing\nviews with streams the stream was collected as an dependency\ninto the content pack but the StreamEntity got a new id.\nThis id needs to be used in all references of the stream.\nTherefore also in the ViewEntity where a streamid is persisted.\nAlso when installing this content pack the installed\nstream has a new ID yet again and the view needs to know\nthis as well.\n\nFixes #7180\nHow Has This Been Tested?\n\nCreated a search and dashboard view with refering streams content pack.\nRemoved Stream and View.\nInstalled Content Pack\n\nTypes of changes\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Refactoring (non-breaking change)\n Breaking change (fix or feature that would cause existing functionality to change)\n\nChecklist:\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n I have read the CONTRIBUTING document.\n I have added tests to cover my changes.", "createdAt": "2020-01-16T12:28:05Z", "url": "https://github.com/Graylog2/graylog2-server/pull/7206", "merged": true, "mergeCommit": {"oid": "7f5046f80ad984f553d4ef4b8b1f6cd824caa986"}, "closed": true, "closedAt": "2020-01-22T09:48:49Z", "author": {"login": "kmerz"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb63mFlgH2gAyMzYzNjE5OTgyOmQzYmJhNDQwMjIwY2Y5MjdmYjA2ODdjMDNmNzU4MDZjYzU3NThjZjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8ySmIgFqTM0NjQ0MzA2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3bba440220cf927fb0687c03f75806cc5758cf4", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/d3bba440220cf927fb0687c03f75806cc5758cf4", "committedDate": "2020-01-16T10:28:55Z", "message": "Add mapping of stream ids in view content packs\n\nPrior this change, when creating a content pack containing\nviews with streams the stream was collected as an dependency\ninto the content pack but the StreamEntity got a new id.\nThis id needs to be used in all references of the stream.\nTherefore also in the ViewEntity where a streamid is persisted.\nAlso when installing this content pack the installed\nstream has a new ID yet again and the view needs to know\nthis as well.\n\nThis change adds this mapping to the Widget and WidgetEntit\nfor the DashboardWidget.\nFor the search types there are now Entities so we can easily\nmap the streams during creation and installation of the\ncontent pack.\nFor the query we needed to add a generic Builder access\nfor the Filter so we could change the Stream id for\na StreamFilter and rebuild the Filter refered in the\nQueryEntity and Query."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9770ed39276877e3348a5b7b08e72748fefdca", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/5b9770ed39276877e3348a5b7b08e72748fefdca", "committedDate": "2020-01-16T12:23:58Z", "message": "Add Test for stream mapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf78d28a418e85f24cc2344c8ebafd2e3ddcccbe", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/bf78d28a418e85f24cc2344c8ebafd2e3ddcccbe", "committedDate": "2020-01-16T12:30:03Z", "message": "Add missing licenses headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a3447fbd55e057b8559a50e1fa0eb202bb41f0a1", "committedDate": "2020-01-17T08:21:12Z", "message": "Small improvement found be @alexkonn"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1OTUzMjI3", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#pullrequestreview-345953227", "createdAt": "2020-01-21T15:13:15Z", "commit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNToxMzoxNVrOFf9lzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNToxMzoxNVrOFf9lzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1OTI3OA==", "bodyText": "why not .equals(StreamFilter.NAME)?", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#discussion_r369059278", "createdAt": "2020-01-21T15:13:15Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/Query.java", "diffHunk": "@@ -242,4 +247,36 @@ public Query build() {\n             return autoBuild();\n         }\n     }\n+\n+    // This code assumes that we only add streams via gui shallow.\n+    private Filter shallowMappedFilter(EntityDescriptorIds entityDescriptorIds) {\n+        return Optional.ofNullable(filter())\n+                .map(optFilter -> {\n+                    Set<Filter> newFilters = optFilter.filters().stream()\n+                            .map(filter -> {\n+                                if (filter.type().matches(StreamFilter.NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTU5MDA3", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#pullrequestreview-346159007", "createdAt": "2020-01-21T20:10:13Z", "commit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxMDoxNFrOFgHTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMDoxMDoxNFrOFgHTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIxODMwNA==", "bodyText": "This isn't used", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#discussion_r369218304", "createdAt": "2020-01-21T20:10:14Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/test/java/org/graylog2/contentpacks/facades/ViewFacadeTest.java", "diffHunk": "@@ -62,15 +70,18 @@\n import org.graylog2.plugin.cluster.ClusterConfigService;\n import org.graylog2.plugin.indexer.searches.timeranges.KeywordRange;\n import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.graylog2.streams.StreamImpl;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n \n+import javax.swing.text.html.Option;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTYyNDM2", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#pullrequestreview-346162436", "createdAt": "2020-01-21T20:16:11Z", "commit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDI0NDg0", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#pullrequestreview-346424484", "createdAt": "2020-01-22T08:54:35Z", "commit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODo1NDozNVrOFgUb_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODo1NDozNVrOFgUb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzMzU5OQ==", "bodyText": "I'd make this a TODO:\nSuggestion:\n// TODO This code assumes that we only use shallow filters for streams. If this ever changes, we need to implement a mapper that can handle filter trees.", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#discussion_r369433599", "createdAt": "2020-01-22T08:54:35Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/Query.java", "diffHunk": "@@ -242,4 +247,36 @@ public Query build() {\n             return autoBuild();\n         }\n     }\n+\n+    // This code assumes that we only add streams via gui shallow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDI0Njk0", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#pullrequestreview-346424694", "createdAt": "2020-01-22T08:54:57Z", "commit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODo1NDo1OFrOFgUcsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODo1NDo1OFrOFgUcsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzMzc3Nw==", "bodyText": "Same as above", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#discussion_r369433777", "createdAt": "2020-01-22T08:54:58Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog2/contentpacks/model/entities/QueryEntity.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.contentpacks.model.entities;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.graph.Traverser;\n+import org.graylog.plugins.views.search.Filter;\n+import org.graylog.plugins.views.search.GlobalOverride;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.engine.BackendQuery;\n+import org.graylog.plugins.views.search.filter.StreamFilter;\n+import org.graylog2.contentpacks.NativeEntityConverter;\n+import org.graylog2.contentpacks.exceptions.ContentPackException;\n+import org.graylog2.contentpacks.model.ModelTypes;\n+import org.graylog2.contentpacks.model.entities.references.ValueReference;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.graylog2.plugin.streams.Stream;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static com.google.common.collect.ImmutableSortedSet.of;\n+import static java.util.stream.Collectors.toSet;\n+\n+@AutoValue\n+@JsonAutoDetect\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonDeserialize(builder = QueryEntity.Builder.class)\n+public abstract class QueryEntity implements NativeEntityConverter<Query> {\n+\n+    @JsonProperty\n+    public abstract String id();\n+\n+    @JsonProperty\n+    public abstract TimeRange timerange();\n+\n+    @Nullable\n+    @JsonProperty\n+    public abstract Filter filter();\n+\n+    @Nonnull\n+    @JsonProperty\n+    public abstract BackendQuery query();\n+\n+    @JsonIgnore\n+    public abstract Optional<GlobalOverride> globalOverride();\n+\n+    @Nonnull\n+    @JsonProperty(\"search_types\")\n+    public abstract ImmutableSet<SearchTypeEntity> searchTypes();\n+\n+    public Set<String> usedStreamIds() {\n+        return Optional.ofNullable(filter())\n+                .map(optFilter -> {\n+                    @SuppressWarnings(\"UnstableApiUsage\") final Traverser<Filter> filterTraverser = Traverser.forTree(filter -> firstNonNull(filter.filters(), Collections.emptySet()));\n+                    return StreamSupport.stream(filterTraverser.breadthFirst(optFilter).spliterator(), false)\n+                            .filter(filter -> filter instanceof StreamFilter)\n+                            .map(streamFilter -> ((StreamFilter) streamFilter).streamId())\n+                            .filter(Objects::nonNull)\n+                            .collect(toSet());\n+                })\n+                .orElse(Collections.emptySet());\n+    }\n+\n+    public abstract Builder toBuilder();\n+\n+    public static Builder builder() {\n+        return Builder.createWithDefaults();\n+    }\n+\n+    @AutoValue.Builder\n+    @JsonPOJOBuilder(withPrefix = \"\")\n+    public abstract static class Builder {\n+        @JsonProperty\n+        public abstract Builder id(String id);\n+\n+        @JsonProperty\n+        public abstract Builder timerange(TimeRange timerange);\n+\n+        @JsonProperty\n+        public abstract Builder filter(Filter filter);\n+\n+        @JsonProperty\n+        public abstract Builder query(BackendQuery query);\n+\n+        public abstract Builder globalOverride(@Nullable GlobalOverride globalOverride);\n+\n+        @JsonProperty(\"search_types\")\n+        public abstract Builder searchTypes(@Nullable Set<SearchTypeEntity> searchTypes);\n+\n+        abstract QueryEntity autoBuild();\n+\n+        @JsonCreator\n+        static Builder createWithDefaults() {\n+            return new AutoValue_QueryEntity.Builder().searchTypes(of());\n+        }\n+\n+        public QueryEntity build() {\n+            return autoBuild();\n+        }\n+    }\n+\n+    // This code assumes that we only add streams via gui shallow.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3447fbd55e057b8559a50e1fa0eb202bb41f0a1"}, "originalPosition": 133}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e689df44c3f7b284af433a642773ed8c957c403f", "author": {"user": {"login": "kmerz", "name": "Konrad Merz"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/e689df44c3f7b284af433a642773ed8c957c403f", "committedDate": "2020-01-22T09:17:53Z", "message": "Fix annotations from @mpfz0r"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2NDQzMDYw", "url": "https://github.com/Graylog2/graylog2-server/pull/7206#pullrequestreview-346443060", "createdAt": "2020-01-22T09:25:57Z", "commit": {"oid": "e689df44c3f7b284af433a642773ed8c957c403f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2689, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}