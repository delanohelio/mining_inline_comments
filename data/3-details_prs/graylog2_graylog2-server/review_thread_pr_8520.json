{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODc0NjIw", "number": 8520, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozNTo0NlrOENIucA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTozMDozMlrOENJO6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjA5OTA0OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/users/UserDTO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozNTo0NlrOGvpkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozNTo0NlrOGvpkhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNzM0OA==", "bodyText": "I am getting an error when fetching the list of users on my machine because the field is external_user and not external.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452617348", "createdAt": "2020-07-10T04:35:46Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/users/UserDTO.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.users;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.google.auto.value.AutoValue;\n+import org.graylog2.rest.models.users.requests.Startpage;\n+import org.graylog2.security.MongoDbSession;\n+import org.joda.time.DateTimeZone;\n+import org.mongojack.Id;\n+import org.mongojack.ObjectId;\n+\n+import javax.annotation.Nullable;\n+import java.util.Date;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+@AutoValue\n+@JsonDeserialize(builder = UserDTO.Builder.class)\n+public abstract class UserDTO {\n+\n+    private static final String FIELD_ID = \"id\";\n+    public static final String FIELD_USERNAME = \"username\";\n+    public static final String FIELD_EMAIL = \"email\";\n+    public static final String FIELD_FULL_NAME = \"full_name\";\n+    private static final String FIELD_PERMISSIONS = \"permissions\";\n+    private static final String FIELD_PREFERENCES = \"preferences\";\n+    private static final String FIELD_TIMEZONE = \"timezone\";\n+    private static final String FIELD_EXTERNAL = \"external\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjEwMTc1OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozNzozN1rOGvpmHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozNzozN1rOGvpmHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNzc1Nw==", "bodyText": "I am getting the following on my setup because I am running with deactivated_builtin_authentication_providers = root-user in my graylog.conf. The default admin user can be deactivated so we need to handle that in the paginated endpoint.\n$ http :9000/api/users/paginated\nHTTP/1.1 404 Not Found\nContent-Length: 57\nContent-Type: application/json\nX-Graylog-Node-ID: 28164cbe-4ad9-4c9c-a76e-088655aa7889\nX-Runtime-Microseconds: 85318\n\n{\n    \"message\": \"Could not find admin user\",\n    \"type\": \"ApiError\"\n}", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452617757", "createdAt": "2020-07-10T04:37:37Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -556,4 +645,37 @@ private UserSummary toUserResponse(User user,\n         effectivePermissions.removeAll(userService.getUserPermissionsFromRoles(user));\n         return effectivePermissions;\n     }\n+\n+    private Map<String, Optional<MongoDbSession>> getLastSessionForUser(Collection<MongoDbSession> sessions) {\n+        return sessions.stream()\n+                .filter(s -> s.getUsernameAttribute().isPresent())\n+                .collect(groupingBy(s -> s.getUsernameAttribute().get(),\n+                        maxBy(Comparator.comparing(MongoDbSession::getLastAccessTime))));\n+    }\n+\n+    private Map<String, String> getRoleNameMap(Set<String> roleIds) throws org.graylog2.database.NotFoundException {\n+        final Map<String, Role> roleMap = roleService.findIdMap(roleIds);\n+        final Map<String, String> result = new HashMap<>(roleMap.size());\n+        roleMap.forEach((key, value) -> result.put(key, value.getName()));\n+        return result;\n+    }\n+\n+    private UserDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap, Map<String, String> roleNameMap) {\n+        final User admin = userService.getRootUser()\n+                .orElseThrow(() -> new NotFoundException(\"Could not find admin user\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjEwMjQzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozODowMVrOGvpmgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDozODowMVrOGvpmgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxNzg1OA==", "bodyText": "The roleNameMap is unused, so I guess we can remove it from the method signature?", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452617858", "createdAt": "2020-07-10T04:38:01Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -556,4 +645,37 @@ private UserSummary toUserResponse(User user,\n         effectivePermissions.removeAll(userService.getUserPermissionsFromRoles(user));\n         return effectivePermissions;\n     }\n+\n+    private Map<String, Optional<MongoDbSession>> getLastSessionForUser(Collection<MongoDbSession> sessions) {\n+        return sessions.stream()\n+                .filter(s -> s.getUsernameAttribute().isPresent())\n+                .collect(groupingBy(s -> s.getUsernameAttribute().get(),\n+                        maxBy(Comparator.comparing(MongoDbSession::getLastAccessTime))));\n+    }\n+\n+    private Map<String, String> getRoleNameMap(Set<String> roleIds) throws org.graylog2.database.NotFoundException {\n+        final Map<String, Role> roleMap = roleService.findIdMap(roleIds);\n+        final Map<String, String> result = new HashMap<>(roleMap.size());\n+        roleMap.forEach((key, value) -> result.put(key, value.getName()));\n+        return result;\n+    }\n+\n+    private UserDTO getAdminUserDTO(Map<String, Optional<MongoDbSession>> lastSessionMap, Map<String, String> roleNameMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjEwNTYwOnYy", "diffSide": "RIGHT", "path": "UPGRADING.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDo0MDozNVrOGvpoXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0NDowMFrOGv14tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxODMzMw==", "bodyText": "I am not sure about the deprecation of the non-paginated endpoint. I don't see a reason why we shouldn't keep it. Having to use pagination in scripting is always really annoying, especially since we don't offer API SDKs that can handle it.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452618333", "createdAt": "2020-07-10T04:40:35Z", "author": {"login": "bernd"}, "path": "UPGRADING.rst", "diffHunk": "@@ -13,6 +13,15 @@ We therefore mark '/streams' as deprecated. Users who use this endpoint for scri\n their scripts to the format of the new endpoint, so they only need to to change the URL when '/streams/paginated' will become\n '/streams'.\n \n+Deprecation of API endpoint for unpaginated listing of users", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxOTEyNw==", "bodyText": "We decided to keep the deprecation warning. If we deprecate all non-paginated endpoints in the future is a different discussion.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452819127", "createdAt": "2020-07-10T12:44:00Z", "author": {"login": "bernd"}, "path": "UPGRADING.rst", "diffHunk": "@@ -13,6 +13,15 @@ We therefore mark '/streams' as deprecated. Users who use this endpoint for scri\n their scripts to the format of the new endpoint, so they only need to to change the URL when '/streams/paginated' will become\n '/streams'.\n \n+Deprecation of API endpoint for unpaginated listing of users", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxODMzMw=="}, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjEwNjAyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDo0MDo1M1rOGvpomQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDo0MDo1M1rOGvpomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxODM5Mw==", "bodyText": "See comment for UPGRADING.rst above.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452618393", "createdAt": "2020-07-10T04:40:53Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -144,6 +170,7 @@ public UserSummary get(@ApiParam(name = \"username\", value = \"The username to ret\n     }\n \n     @GET\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjExODkyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDo1MDowOVrOGvpwSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0NTo1NVrOGv18rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDM2Mw==", "bodyText": "This should use a UserDTO field instead of the StreamImpl.FIELD_TITLE and I think we should set a @DefaultValue as well.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452620363", "createdAt": "2020-07-10T04:50:09Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMDE0Mw==", "bodyText": "Lol, that wrong field was on the @DefaultValue. \ud83d\ude02", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452820143", "createdAt": "2020-07-10T12:45:55Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMDM2Mw=="}, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjEzMTE3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDo1ODoxNFrOGvp3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNDo1ODoxNFrOGvp3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMjE5OQ==", "bodyText": "The service doesn't return complete UserDTO objects. The UserServiceImpl is doing some more stuff than just loading the database contents.\nHow about returning a reduced set of attributes for the paginated endpoint for now? I think we don't need all attributes for a user overview page. We can fix this once we refactor the UserService to use mongojack.\nReturned by this service\n   {\n      \"id\": \"59552b9faefa8d40ffb2c4e6\",\n      \"username\": \"katze\",\n      \"email\": \"katze@localhost\",\n      \"full_name\": \"katze\",\n      \"permissions\": [],\n      \"preferences\": null,\n      \"timezone\": null,\n      \"session_timeout_ms\": null,\n      \"external_user\": true,\n      \"startpage\": null,\n      \"roles\": [\n        \"Reader\"\n      ],\n      \"read_only\": null,\n      \"session_active\": null,\n      \"last_activity\": null,\n      \"client_address\": null\n    }\nReturned by UserServiceImpl\n    {\n      \"id\": \"59552b9faefa8d40ffb2c4e6\",\n      \"username\": \"katze\",\n      \"email\": \"katze@localhost\",\n      \"full_name\": \"katze\",\n      \"permissions\": [\n        \"users:tokencreate:katze\",\n        \"users:tokenremove:katze\",\n        \"users:passwordchange:katze\",\n        \"users:tokenlist:katze\",\n        \"users:edit:katze\",\n        \"clusterconfigentry:read\",\n        \"indexercluster:read\",\n        \"messagecount:read\",\n        \"journal:read\",\n        \"messages:analyze\",\n        \"inputs:read\",\n        \"metrics:read\",\n        \"savedsearches:edit\",\n        \"fieldnames:read\",\n        \"buffers:read\",\n        \"system:read\",\n        \"savedsearches:create\",\n        \"jvmstats:read\",\n        \"decorators:read\",\n        \"throughput:read\",\n        \"savedsearches:read\",\n        \"messages:read\"\n      ],\n      \"preferences\": {\n        \"updateUnfocussed\": false,\n        \"enableSmartSearch\": true\n      },\n      \"timezone\": null,\n      \"session_timeout_ms\": 28800000,\n      \"external\": true,\n      \"startpage\": null,\n      \"roles\": [\n        \"Reader\"\n      ],\n      \"read_only\": false,\n      \"session_active\": false,\n      \"last_activity\": null,\n      \"client_address\": null\n    }", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452622199", "createdAt": "2020-07-10T04:58:14Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/users/PaginatedUserService.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.users;\n+\n+import org.graylog2.bindings.providers.MongoJackObjectMapperProvider;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.database.PaginatedDbService;\n+import org.graylog2.database.PaginatedList;\n+import org.graylog2.search.SearchQuery;\n+import org.mongojack.DBQuery;\n+import org.mongojack.DBSort;\n+\n+import javax.inject.Inject;\n+\n+public class PaginatedUserService extends PaginatedDbService<UserDTO> {\n+    private static final String COLLECTION_NAME = \"users\";\n+\n+    @Inject\n+    public PaginatedUserService(MongoConnection mongoConnection,\n+                                MongoJackObjectMapperProvider mapper) {\n+        super(mongoConnection, mapper, UserDTO.class, COLLECTION_NAME);\n+    }\n+\n+    public long count() {\n+        return db.count();\n+    }\n+\n+    public PaginatedList<UserDTO> findPaginated(SearchQuery searchQuery, int page,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjEzOTMxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowMzo0MVrOGvp8aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowMzo0MVrOGvp8aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMzQ2Nw==", "bodyText": "This noinspection comment should be moved to the getLastSessionForUser() method.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452623467", "createdAt": "2020-07-10T05:03:41Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -152,11 +179,7 @@ public UserList listUsers() {\n \n         // among all active sessions, find the last recently used for each user\n         //noinspection OptionalGetWithoutIsPresent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE0MTQ5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowNTowMlrOGvp9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowNTowMlrOGvp9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyMzc3NA==", "bodyText": "This variable is unused. The users variable is put into the UserPageListResponse. Is that correct?", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452623774", "createdAt": "2020-07-10T05:05:02Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n+                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n+\n+        SearchQuery searchQuery;\n+        final Collection<MongoDbSession> sessions = sessionService.loadAll();\n+        final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n+        try {\n+            searchQuery = searchQueryParser.parse(query);\n+        } catch (IllegalArgumentException e) {\n+            throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n+        }\n+\n+        final PaginatedList<UserDTO> result = paginatedUserService\n+                .findPaginated(searchQuery, page, perPage, sort, order);\n+        final Set<String> allRoleIds = result.stream().flatMap(userDTO -> {\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                return userDTO.roles().stream();\n+            }\n+            return Stream.empty();\n+        }).collect(Collectors.toSet());\n+\n+        Map<String, String> roleNameMap;\n+        try {\n+            roleNameMap = getRoleNameMap(allRoleIds);\n+        } catch (org.graylog2.database.NotFoundException e) {\n+            throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n+        }\n+\n+        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+\n+        List<UserDTO> users = result.stream().map(userDTO -> {\n+            UserDTO.Builder builder = userDTO.toBuilder()\n+                    .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n+            }\n+            return builder.build();\n+        }).collect(Collectors.toList());\n+\n+        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE0NTExOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowNzowOVrOGvp_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTowNzowOVrOGvp_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNDI4NQ==", "bodyText": "UserDTO#roles() is not marked as nullable so it should always have a value. Why are you using the Optional.ofNullable().isPresent() construct here?", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452624285", "createdAt": "2020-07-10T05:07:09Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n+                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n+\n+        SearchQuery searchQuery;\n+        final Collection<MongoDbSession> sessions = sessionService.loadAll();\n+        final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n+        try {\n+            searchQuery = searchQueryParser.parse(query);\n+        } catch (IllegalArgumentException e) {\n+            throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n+        }\n+\n+        final PaginatedList<UserDTO> result = paginatedUserService\n+                .findPaginated(searchQuery, page, perPage, sort, order);\n+        final Set<String> allRoleIds = result.stream().flatMap(userDTO -> {\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                return userDTO.roles().stream();\n+            }\n+            return Stream.empty();\n+        }).collect(Collectors.toSet());\n+\n+        Map<String, String> roleNameMap;\n+        try {\n+            roleNameMap = getRoleNameMap(allRoleIds);\n+        } catch (org.graylog2.database.NotFoundException e) {\n+            throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n+        }\n+\n+        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+\n+        List<UserDTO> users = result.stream().map(userDTO -> {\n+            UserDTO.Builder builder = userDTO.toBuilder()\n+                    .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE1NjM4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToxNTowOVrOGvqGdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNToxNTowOVrOGvqGdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyNjAzOA==", "bodyText": "I think we can use the PaginatedResponse return value here. That would make the response similar to what we return from other paginated endpoints. (with the custom UserPageListResponse we have a pagination key inside the response, PaginatedResponse doesn't have that) The admin_user will move to under the context key in the response, but I think that's okay.\nreturn PaginatedResponse.create(\"users\", userDTOS, query, Collections.singletonMap(\"admin_user\", adminUser));", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452626038", "createdAt": "2020-07-10T05:15:09Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/resources/users/UsersResource.java", "diffHunk": "@@ -171,6 +194,72 @@ public UserList listUsers() {\n         return UserList.create(resultUsers);\n     }\n \n+    @GET\n+    @Timed\n+    @Path(\"/paginated\")\n+    @ApiOperation(value = \"Get paginated list of users\")\n+    @RequiresPermissions(RestPermissions.USERS_LIST)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public UserPageListResponse getPage(@ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+                                        @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+                                        @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+                                        @ApiParam(name = \"sort\",\n+                                                value = \"The field to sort the result on\",\n+                                                required = true,\n+                                                allowableValues = \"title,description\")\n+                                            @DefaultValue(StreamImpl.FIELD_TITLE) @QueryParam(\"sort\") String sort,\n+                                        @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+                                            @DefaultValue(\"asc\") @QueryParam(\"order\") String order) {\n+\n+        SearchQuery searchQuery;\n+        final Collection<MongoDbSession> sessions = sessionService.loadAll();\n+        final Map<String, Optional<MongoDbSession>> lastSessionForUser = getLastSessionForUser(sessions);\n+        try {\n+            searchQuery = searchQueryParser.parse(query);\n+        } catch (IllegalArgumentException e) {\n+            throw new BadRequestException(\"Invalid argument in search query: \" + e.getMessage());\n+        }\n+\n+        final PaginatedList<UserDTO> result = paginatedUserService\n+                .findPaginated(searchQuery, page, perPage, sort, order);\n+        final Set<String> allRoleIds = result.stream().flatMap(userDTO -> {\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                return userDTO.roles().stream();\n+            }\n+            return Stream.empty();\n+        }).collect(Collectors.toSet());\n+\n+        Map<String, String> roleNameMap;\n+        try {\n+            roleNameMap = getRoleNameMap(allRoleIds);\n+        } catch (org.graylog2.database.NotFoundException e) {\n+            throw new NotFoundException(\"Couldn't find roles: \" + e.getMessage());\n+        }\n+\n+        final UserDTO adminUser = getAdminUserDTO(lastSessionForUser, roleNameMap);\n+\n+        List<UserDTO> users = result.stream().map(userDTO -> {\n+            UserDTO.Builder builder = userDTO.toBuilder()\n+                    .fillSession(lastSessionForUser.getOrDefault(userDTO.username(), Optional.empty()));\n+            if (Optional.ofNullable(userDTO.roles()).isPresent()) {\n+                builder.roles(userDTO.roles().stream().map(roleNameMap::get).collect(Collectors.toSet()));\n+            }\n+            return builder.build();\n+        }).collect(Collectors.toList());\n+\n+        final PaginatedList<UserDTO> userDTOS = new PaginatedList<>(users, result.pagination().total(),\n+                result.pagination().page(), result.pagination().perPage());\n+        return UserPageListResponse.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjE4MjE5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTozMDozMlrOGvqVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNTozMDozMlrOGvqVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYyOTg3Ng==", "bodyText": "You can use the DBQuery.in() helper here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final DBObject query = BasicDBObjectBuilder.start()\n          \n          \n            \n                            .push(ID)\n          \n          \n            \n                            .append(\"$in\", roleIds.stream().map(ObjectId::new).collect(Collectors.toSet()))\n          \n          \n            \n                            .get();\n          \n          \n            \n                    final DBQuery.Query query = DBQuery.in(ID, roleIds);\n          \n      \n    \n    \n  \n\nMongojack also takes care of the ObjectId conversion.", "url": "https://github.com/Graylog2/graylog2-server/pull/8520#discussion_r452629876", "createdAt": "2020-07-10T05:30:32Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/users/RoleServiceImpl.java", "diffHunk": "@@ -159,6 +163,24 @@ public boolean exists(String roleName) {\n         }\n     }\n \n+    @Override\n+    public Map<String, Role> findIdMap(Set<String> roleIds) throws NotFoundException {\n+        final DBObject query = BasicDBObjectBuilder.start()\n+                .push(ID)\n+                .append(\"$in\", roleIds.stream().map(ObjectId::new).collect(Collectors.toSet()))\n+                .get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f802e82a789856ea59fe22a365e776b9c36d6034"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4128, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}