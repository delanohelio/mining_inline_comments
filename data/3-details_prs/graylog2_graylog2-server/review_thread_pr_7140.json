{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzgxMjY3", "number": 7140, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMToxODowNlrODXH8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMTozMzoyNFrODXILoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTc0MDM0OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitInterval.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMToxODowNlrOFcRSNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjowNDoyNFrOFcSQtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NzYzNg==", "bodyText": "What's the benefit of specifying a radix of 10 here explicitly? I would find it clearer, if we omitted it.", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365187636", "createdAt": "2020-01-10T11:18:06Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitInterval.java", "diffHunk": "@@ -24,21 +24,45 @@\n import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n @AutoValue\n @JsonTypeName(TimeUnitInterval.type)\n @JsonDeserialize(builder = TimeUnitInterval.Builder.class)\n public abstract class TimeUnitInterval implements Interval {\n     public static final String type = \"timeunit\";\n+    public static final Pattern TIMEUNIT_PATTERN = Pattern.compile(\"(?<quantity>\\\\d+)(?<unit>[smhdwM])\");\n \n     @JsonProperty\n     public abstract String type();\n \n     @JsonProperty\n     public abstract String timeunit();\n \n+    private String adjustUnitsLongerThanDays(String timeunit) {\n+        final Matcher matcher = TIMEUNIT_PATTERN.matcher(timeunit());\n+        checkArgument(matcher.matches(),\n+                \"Time unit must be {quantity}{unit}, where quantity is a positive number and unit [smhdwM].\");\n+        final int quantity = Integer.parseInt(matcher.group(\"quantity\"), 10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIwMzYzNw==", "bodyText": "No other reason besides being as explicit as possible. If it's too explicit, I will remove it :)", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365203637", "createdAt": "2020-01-10T12:04:24Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitInterval.java", "diffHunk": "@@ -24,21 +24,45 @@\n import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n @AutoValue\n @JsonTypeName(TimeUnitInterval.type)\n @JsonDeserialize(builder = TimeUnitInterval.Builder.class)\n public abstract class TimeUnitInterval implements Interval {\n     public static final String type = \"timeunit\";\n+    public static final Pattern TIMEUNIT_PATTERN = Pattern.compile(\"(?<quantity>\\\\d+)(?<unit>[smhdwM])\");\n \n     @JsonProperty\n     public abstract String type();\n \n     @JsonProperty\n     public abstract String timeunit();\n \n+    private String adjustUnitsLongerThanDays(String timeunit) {\n+        final Matcher matcher = TIMEUNIT_PATTERN.matcher(timeunit());\n+        checkArgument(matcher.matches(),\n+                \"Time unit must be {quantity}{unit}, where quantity is a positive number and unit [smhdwM].\");\n+        final int quantity = Integer.parseInt(matcher.group(\"quantity\"), 10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NzYzNg=="}, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTc1MTQ2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitInterval.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMToyMzowOFrOFcRZDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMToyMzowOFrOFcRZDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4OTM5MQ==", "bodyText": "Can we move the method below toDateHistogramInterval where it's first used?", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365189391", "createdAt": "2020-01-10T11:23:08Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitInterval.java", "diffHunk": "@@ -24,21 +24,45 @@\n import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n \n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n @AutoValue\n @JsonTypeName(TimeUnitInterval.type)\n @JsonDeserialize(builder = TimeUnitInterval.Builder.class)\n public abstract class TimeUnitInterval implements Interval {\n     public static final String type = \"timeunit\";\n+    public static final Pattern TIMEUNIT_PATTERN = Pattern.compile(\"(?<quantity>\\\\d+)(?<unit>[smhdwM])\");\n \n     @JsonProperty\n     public abstract String type();\n \n     @JsonProperty\n     public abstract String timeunit();\n \n+    private String adjustUnitsLongerThanDays(String timeunit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTc3MDIzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMTozMDowMFrOFcRjaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjowNTo0NVrOFcSScA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MjA0Mw==", "bodyText": "\ud83d\udc4d for validating the exception message! I usually put the message in a static field on the class and reference it in the test to avoid having it to change it in two places when the time comes.", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365192043", "createdAt": "2020-01-10T11:30:00Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.searchtypes.pivot.buckets;\n+\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+public class TimeUnitIntervalTest {\n+    private TimeUnitInterval.Builder builder() {\n+        return TimeUnitInterval.Builder.builder();\n+    }\n+\n+    @Test\n+    public void doesNotAllowInvalidTimeUnit() {\n+        assertThatExceptionOfType(RuntimeException.class)\n+                .isThrownBy(() -> builder().timeunit(\"foobar\").build())\n+                .withMessage(\"Time unit must be {quantity}{unit}, where quantity is a positive number and unit [smhdwM].\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIwNDA4MA==", "bodyText": "I do understand that, but I usually prefer to have literals in tests, because it is harder for me to overlook mismatching expectations because I think I know what the variable is.", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365204080", "createdAt": "2020-01-10T12:05:45Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.searchtypes.pivot.buckets;\n+\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+public class TimeUnitIntervalTest {\n+    private TimeUnitInterval.Builder builder() {\n+        return TimeUnitInterval.Builder.builder();\n+    }\n+\n+    @Test\n+    public void doesNotAllowInvalidTimeUnit() {\n+        assertThatExceptionOfType(RuntimeException.class)\n+                .isThrownBy(() -> builder().timeunit(\"foobar\").build())\n+                .withMessage(\"Time unit must be {quantity}{unit}, where quantity is a positive number and unit [smhdwM].\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MjA0Mw=="}, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTc3ODg4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMTozMzoyNFrOFcRoUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMjoyMDo1MVrOFcSlXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MzI5OQ==", "bodyText": "Nice and clean tests! I think they could be further improved by using parameterized tests. That would make them even more compact and facilitate adding more cases. Totally optional though. The tests are fine as they are now.", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365193299", "createdAt": "2020-01-10T11:33:24Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.searchtypes.pivot.buckets;\n+\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIwNTEzNQ==", "bodyText": "I was also thinking about that, but I hesitated doing it, because afaik it requires all methods of a test class to be parameterized, so the test class would have to be split up into one for the validation tests and one for the valid inputs. I can still do it though, I just preferred to have a single test class right now, because it makes it easier to spot corner cases which are not covered.", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365205135", "createdAt": "2020-01-10T12:09:07Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.searchtypes.pivot.buckets;\n+\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MzI5OQ=="}, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIwNjQ1Mg==", "bodyText": "Well no, I can just wrap those in an inner class. Will do!", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365206452", "createdAt": "2020-01-10T12:13:17Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.searchtypes.pivot.buckets;\n+\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MzI5OQ=="}, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTIwODkyNg==", "bodyText": "Right. Forgot that we're on JUnit 4. JUnit 5 has much better support for parameterized tests. For the short term we should consider using https://github.com/Pragmatists/JUnitParams then.", "url": "https://github.com/Graylog2/graylog2-server/pull/7140#discussion_r365208926", "createdAt": "2020-01-10T12:20:51Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/search/searchtypes/pivot/buckets/TimeUnitIntervalTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.searchtypes.pivot.buckets;\n+\n+import org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramInterval;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MzI5OQ=="}, "originalCommit": {"oid": "44f38fa4433cd5e12145c820f4b6db819fa3a09d"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4004, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}