{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNjExMDcz", "number": 7867, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0NDoyOFrODxm0qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0NDoyOFrODxm0qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzQyODg5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/streams/StreamServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTo0NDoyOFrOGFKvhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoyMDowOVrOGFL6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MjA2OA==", "bodyText": "Maybe we shouldn't call this streamsQuery?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, IndexSet> indexSetsForStreams(List<DBObject> streamsQuery) {\n          \n          \n            \n                    final Set<String> indexSetIds = streamsQuery.stream()\n          \n          \n            \n                            .map(stream -> (String)stream.get(StreamImpl.FIELD_INDEX_SET_ID))\n          \n          \n            \n                            .filter(s -> !isNullOrEmpty(s))\n          \n          \n            \n                            .collect(Collectors.toSet());\n          \n          \n            \n                private Map<String, IndexSet> indexSetsForStreams(List<DBObject> streams) {\n          \n          \n            \n                    final Set<String> indexSetIds = streams.stream()\n          \n          \n            \n                            .map(stream -> (String)stream.get(StreamImpl.FIELD_INDEX_SET_ID))\n          \n          \n            \n                            .filter(s -> !isNullOrEmpty(s))\n          \n          \n            \n                            .collect(Collectors.toSet());", "url": "https://github.com/Graylog2/graylog2-server/pull/7867#discussion_r408072068", "createdAt": "2020-04-14T11:44:28Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog2/streams/StreamServiceImpl.java", "diffHunk": "@@ -194,23 +195,57 @@ public Stream load(String id) throws NotFoundException {\n         final Map<String, List<StreamRule>> allStreamRules = streamRuleService.loadForStreamIds(streamIds);\n \n         final ImmutableList.Builder<Stream> streams = ImmutableList.builder();\n+\n+        final Map<String, IndexSet> indexSets = indexSetsForStreams(results);\n+\n+        final Set<String> outputIds = results.stream()\n+                .map(this::outputIdsForRawStream)\n+                .flatMap(outputs -> outputs.stream().map(ObjectId::toHexString))\n+                .collect(Collectors.toSet());\n+\n+        final Map<String, Output> outputsById = outputService.loadByIds(outputIds)\n+                .stream()\n+                .collect(Collectors.toMap(Output::getId, Function.identity()));\n+\n+\n         for (DBObject o : results) {\n             final ObjectId objectId = (ObjectId) o.get(\"_id\");\n             final String id = objectId.toHexString();\n             final List<StreamRule> streamRules = allStreamRules.getOrDefault(id, Collections.emptyList());\n             LOG.debug(\"Found {} rules for stream <{}>\", streamRules.size(), id);\n \n-            final Set<Output> outputs = loadOutputsForRawStream(o);\n+            final Set<Output> outputs = outputIdsForRawStream(o)\n+                    .stream()\n+                    .map(ObjectId::toHexString)\n+                    .map(outputsById::get)\n+                    .collect(Collectors.toSet());\n \n             @SuppressWarnings(\"unchecked\")\n             final Map<String, Object> fields = o.toMap();\n \n-            streams.add(new StreamImpl(objectId, fields, streamRules, outputs, getIndexSet(o)));\n+            final String indexSetId = (String)fields.get(StreamImpl.FIELD_INDEX_SET_ID);\n+\n+            streams.add(new StreamImpl(objectId, fields, streamRules, outputs, indexSets.get(indexSetId)));\n         }\n \n         return streams.build();\n     }\n \n+    private List<ObjectId> outputIdsForRawStream(DBObject o) {\n+        final List<ObjectId> objectIds = (List<ObjectId>) o.get(StreamImpl.FIELD_OUTPUTS);\n+        return objectIds == null ? Collections.emptyList() : objectIds;\n+    }\n+\n+    private Map<String, IndexSet> indexSetsForStreams(List<DBObject> streamsQuery) {\n+        final Set<String> indexSetIds = streamsQuery.stream()\n+                .map(stream -> (String)stream.get(StreamImpl.FIELD_INDEX_SET_ID))\n+                .filter(s -> !isNullOrEmpty(s))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a41888a1c43c8254ef538d142eeb1b248ac2ec11"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA5MTE1OA==", "bodyText": "Absolutely! \u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/7867#discussion_r408091158", "createdAt": "2020-04-14T12:20:09Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/streams/StreamServiceImpl.java", "diffHunk": "@@ -194,23 +195,57 @@ public Stream load(String id) throws NotFoundException {\n         final Map<String, List<StreamRule>> allStreamRules = streamRuleService.loadForStreamIds(streamIds);\n \n         final ImmutableList.Builder<Stream> streams = ImmutableList.builder();\n+\n+        final Map<String, IndexSet> indexSets = indexSetsForStreams(results);\n+\n+        final Set<String> outputIds = results.stream()\n+                .map(this::outputIdsForRawStream)\n+                .flatMap(outputs -> outputs.stream().map(ObjectId::toHexString))\n+                .collect(Collectors.toSet());\n+\n+        final Map<String, Output> outputsById = outputService.loadByIds(outputIds)\n+                .stream()\n+                .collect(Collectors.toMap(Output::getId, Function.identity()));\n+\n+\n         for (DBObject o : results) {\n             final ObjectId objectId = (ObjectId) o.get(\"_id\");\n             final String id = objectId.toHexString();\n             final List<StreamRule> streamRules = allStreamRules.getOrDefault(id, Collections.emptyList());\n             LOG.debug(\"Found {} rules for stream <{}>\", streamRules.size(), id);\n \n-            final Set<Output> outputs = loadOutputsForRawStream(o);\n+            final Set<Output> outputs = outputIdsForRawStream(o)\n+                    .stream()\n+                    .map(ObjectId::toHexString)\n+                    .map(outputsById::get)\n+                    .collect(Collectors.toSet());\n \n             @SuppressWarnings(\"unchecked\")\n             final Map<String, Object> fields = o.toMap();\n \n-            streams.add(new StreamImpl(objectId, fields, streamRules, outputs, getIndexSet(o)));\n+            final String indexSetId = (String)fields.get(StreamImpl.FIELD_INDEX_SET_ID);\n+\n+            streams.add(new StreamImpl(objectId, fields, streamRules, outputs, indexSets.get(indexSetId)));\n         }\n \n         return streams.build();\n     }\n \n+    private List<ObjectId> outputIdsForRawStream(DBObject o) {\n+        final List<ObjectId> objectIds = (List<ObjectId>) o.get(StreamImpl.FIELD_OUTPUTS);\n+        return objectIds == null ? Collections.emptyList() : objectIds;\n+    }\n+\n+    private Map<String, IndexSet> indexSetsForStreams(List<DBObject> streamsQuery) {\n+        final Set<String> indexSetIds = streamsQuery.stream()\n+                .map(stream -> (String)stream.get(StreamImpl.FIELD_INDEX_SET_ID))\n+                .filter(s -> !isNullOrEmpty(s))\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3MjA2OA=="}, "originalCommit": {"oid": "a41888a1c43c8254ef538d142eeb1b248ac2ec11"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3803, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}