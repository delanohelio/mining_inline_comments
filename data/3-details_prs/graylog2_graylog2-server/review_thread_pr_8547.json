{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDI1MDkx", "number": 8547, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNToyNVrOEQk4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToyMzowNVrOERwbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODE2ODQ0OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToxNToyNVrOG0zTpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTo1N1rOG2qPpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxOTc1MA==", "bodyText": "Unused. Can be deleted.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458019750", "createdAt": "2020-07-21T11:15:25Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.assistedinject.FactoryModuleBuilder;\n+import com.google.inject.binder.LinkedBindingBuilder;\n+import com.google.inject.binder.ScopedBindingBuilder;\n+import com.google.inject.multibindings.MapBinder;\n+import org.graylog.plugins.views.ViewsModule;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.engine.GeneratedQueryContext;\n+import org.graylog.plugins.views.search.engine.QueryBackend;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.DateRangeBucket;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Time;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Values;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Cardinality;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Min;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Percentile;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.StdDev;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Sum;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.SumOfSquares;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Variance;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.ElasticsearchBackend;\n+import org.graylog.storage.elasticsearch7.views.export.ElasticsearchExportBackend;\n+import org.graylog.storage.elasticsearch7.views.export.RequestStrategy;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESEventList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESMessageList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESDateRangeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESTimeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESValuesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCardinalityHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCountHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMinHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESPercentilesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESStdDevHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumOfSquaresHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESVarianceHandler;\n+\n+import static org.graylog.storage.elasticsearch7.Elasticsearch7Plugin.SUPPORTED_ES_VERSION;\n+\n+public class ViewsESBackendModule extends ViewsModule {\n+    @Override\n+    protected void configure() {\n+        install(new FactoryModuleBuilder().build(ESGeneratedQueryContext.Factory.class));\n+\n+        bindForVersion(SUPPORTED_ES_VERSION, new TypeLiteral<QueryBackend<? extends GeneratedQueryContext>>() {})\n+                .to(ElasticsearchBackend.class);\n+\n+        registerESSearchTypeHandler(MessageList.NAME, ESMessageList.class);\n+        registerESSearchTypeHandler(EventList.NAME, ESEventList.class);\n+        registerESSearchTypeHandler(Pivot.NAME, ESPivot.class).in(Scopes.SINGLETON);\n+\n+        registerPivotSeriesHandler(Average.NAME, ESAverageHandler.class);\n+        registerPivotSeriesHandler(Cardinality.NAME, ESCardinalityHandler.class);\n+        registerPivotSeriesHandler(Count.NAME, ESCountHandler.class);\n+        registerPivotSeriesHandler(Max.NAME, ESMaxHandler.class);\n+        registerPivotSeriesHandler(Min.NAME, ESMinHandler.class);\n+        registerPivotSeriesHandler(StdDev.NAME, ESStdDevHandler.class);\n+        registerPivotSeriesHandler(Sum.NAME, ESSumHandler.class);\n+        registerPivotSeriesHandler(SumOfSquares.NAME, ESSumOfSquaresHandler.class);\n+        registerPivotSeriesHandler(Variance.NAME, ESVarianceHandler.class);\n+        registerPivotSeriesHandler(Percentile.NAME, ESPercentilesHandler.class);\n+\n+        registerPivotBucketHandler(Values.NAME, ESValuesHandler.class);\n+        registerPivotBucketHandler(Time.NAME, ESTimeHandler.class);\n+        registerPivotBucketHandler(DateRangeBucket.NAME, ESDateRangeHandler.class);\n+\n+        bindExportBackend().to(ElasticsearchExportBackend.class);\n+        bindRequestStrategy().to(org.graylog.storage.elasticsearch7.views.export.Scroll.class);\n+    }\n+\n+    private LinkedBindingBuilder<RequestStrategy> bindRequestStrategy() {\n+        return bind(RequestStrategy.class);\n+    }\n+\n+    private LinkedBindingBuilder<ExportBackend> bindExportBackend() {\n+        return bindExportBackend(SUPPORTED_ES_VERSION);\n+    }\n+\n+    private void registerQueryBackend() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578db06e4b01c7987d08ef762916208e4c6e75cf"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODQyMw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968423", "createdAt": "2020-07-24T10:15:57Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.assistedinject.FactoryModuleBuilder;\n+import com.google.inject.binder.LinkedBindingBuilder;\n+import com.google.inject.binder.ScopedBindingBuilder;\n+import com.google.inject.multibindings.MapBinder;\n+import org.graylog.plugins.views.ViewsModule;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.engine.GeneratedQueryContext;\n+import org.graylog.plugins.views.search.engine.QueryBackend;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.DateRangeBucket;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Time;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Values;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Cardinality;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Min;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Percentile;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.StdDev;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Sum;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.SumOfSquares;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Variance;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.ElasticsearchBackend;\n+import org.graylog.storage.elasticsearch7.views.export.ElasticsearchExportBackend;\n+import org.graylog.storage.elasticsearch7.views.export.RequestStrategy;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESEventList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESMessageList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESDateRangeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESTimeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESValuesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCardinalityHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCountHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMinHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESPercentilesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESStdDevHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumOfSquaresHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESVarianceHandler;\n+\n+import static org.graylog.storage.elasticsearch7.Elasticsearch7Plugin.SUPPORTED_ES_VERSION;\n+\n+public class ViewsESBackendModule extends ViewsModule {\n+    @Override\n+    protected void configure() {\n+        install(new FactoryModuleBuilder().build(ESGeneratedQueryContext.Factory.class));\n+\n+        bindForVersion(SUPPORTED_ES_VERSION, new TypeLiteral<QueryBackend<? extends GeneratedQueryContext>>() {})\n+                .to(ElasticsearchBackend.class);\n+\n+        registerESSearchTypeHandler(MessageList.NAME, ESMessageList.class);\n+        registerESSearchTypeHandler(EventList.NAME, ESEventList.class);\n+        registerESSearchTypeHandler(Pivot.NAME, ESPivot.class).in(Scopes.SINGLETON);\n+\n+        registerPivotSeriesHandler(Average.NAME, ESAverageHandler.class);\n+        registerPivotSeriesHandler(Cardinality.NAME, ESCardinalityHandler.class);\n+        registerPivotSeriesHandler(Count.NAME, ESCountHandler.class);\n+        registerPivotSeriesHandler(Max.NAME, ESMaxHandler.class);\n+        registerPivotSeriesHandler(Min.NAME, ESMinHandler.class);\n+        registerPivotSeriesHandler(StdDev.NAME, ESStdDevHandler.class);\n+        registerPivotSeriesHandler(Sum.NAME, ESSumHandler.class);\n+        registerPivotSeriesHandler(SumOfSquares.NAME, ESSumOfSquaresHandler.class);\n+        registerPivotSeriesHandler(Variance.NAME, ESVarianceHandler.class);\n+        registerPivotSeriesHandler(Percentile.NAME, ESPercentilesHandler.class);\n+\n+        registerPivotBucketHandler(Values.NAME, ESValuesHandler.class);\n+        registerPivotBucketHandler(Time.NAME, ESTimeHandler.class);\n+        registerPivotBucketHandler(DateRangeBucket.NAME, ESDateRangeHandler.class);\n+\n+        bindExportBackend().to(ElasticsearchExportBackend.class);\n+        bindRequestStrategy().to(org.graylog.storage.elasticsearch7.views.export.Scroll.class);\n+    }\n+\n+    private LinkedBindingBuilder<RequestStrategy> bindRequestStrategy() {\n+        return bind(RequestStrategy.class);\n+    }\n+\n+    private LinkedBindingBuilder<ExportBackend> bindExportBackend() {\n+        return bindExportBackend(SUPPORTED_ES_VERSION);\n+    }\n+\n+    private void registerQueryBackend() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAxOTc1MA=="}, "originalCommit": {"oid": "578db06e4b01c7987d08ef762916208e4c6e75cf"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODU4NDM2OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoxMjoxNFrOG03PfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTo1NlrOG2qPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NDIyMQ==", "bodyText": "Unused return value. Let's make this void to get rid of the warning.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458084221", "createdAt": "2020-07-21T13:12:14Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.assistedinject.FactoryModuleBuilder;\n+import com.google.inject.binder.LinkedBindingBuilder;\n+import com.google.inject.binder.ScopedBindingBuilder;\n+import com.google.inject.multibindings.MapBinder;\n+import org.graylog.plugins.views.ViewsModule;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.engine.GeneratedQueryContext;\n+import org.graylog.plugins.views.search.engine.QueryBackend;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.DateRangeBucket;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Time;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Values;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Cardinality;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Min;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Percentile;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.StdDev;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Sum;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.SumOfSquares;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Variance;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.ElasticsearchBackend;\n+import org.graylog.storage.elasticsearch7.views.export.ElasticsearchExportBackend;\n+import org.graylog.storage.elasticsearch7.views.export.RequestStrategy;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESEventList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESMessageList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESDateRangeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESTimeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESValuesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCardinalityHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCountHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMinHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESPercentilesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESStdDevHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumOfSquaresHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESVarianceHandler;\n+\n+import static org.graylog.storage.elasticsearch7.Elasticsearch7Plugin.SUPPORTED_ES_VERSION;\n+\n+public class ViewsESBackendModule extends ViewsModule {\n+    @Override\n+    protected void configure() {\n+        install(new FactoryModuleBuilder().build(ESGeneratedQueryContext.Factory.class));\n+\n+        bindForVersion(SUPPORTED_ES_VERSION, new TypeLiteral<QueryBackend<? extends GeneratedQueryContext>>() {})\n+                .to(ElasticsearchBackend.class);\n+\n+        registerESSearchTypeHandler(MessageList.NAME, ESMessageList.class);\n+        registerESSearchTypeHandler(EventList.NAME, ESEventList.class);\n+        registerESSearchTypeHandler(Pivot.NAME, ESPivot.class).in(Scopes.SINGLETON);\n+\n+        registerPivotSeriesHandler(Average.NAME, ESAverageHandler.class);\n+        registerPivotSeriesHandler(Cardinality.NAME, ESCardinalityHandler.class);\n+        registerPivotSeriesHandler(Count.NAME, ESCountHandler.class);\n+        registerPivotSeriesHandler(Max.NAME, ESMaxHandler.class);\n+        registerPivotSeriesHandler(Min.NAME, ESMinHandler.class);\n+        registerPivotSeriesHandler(StdDev.NAME, ESStdDevHandler.class);\n+        registerPivotSeriesHandler(Sum.NAME, ESSumHandler.class);\n+        registerPivotSeriesHandler(SumOfSquares.NAME, ESSumOfSquaresHandler.class);\n+        registerPivotSeriesHandler(Variance.NAME, ESVarianceHandler.class);\n+        registerPivotSeriesHandler(Percentile.NAME, ESPercentilesHandler.class);\n+\n+        registerPivotBucketHandler(Values.NAME, ESValuesHandler.class);\n+        registerPivotBucketHandler(Time.NAME, ESTimeHandler.class);\n+        registerPivotBucketHandler(DateRangeBucket.NAME, ESDateRangeHandler.class);\n+\n+        bindExportBackend().to(ElasticsearchExportBackend.class);\n+        bindRequestStrategy().to(org.graylog.storage.elasticsearch7.views.export.Scroll.class);\n+    }\n+\n+    private LinkedBindingBuilder<RequestStrategy> bindRequestStrategy() {\n+        return bind(RequestStrategy.class);\n+    }\n+\n+    private LinkedBindingBuilder<ExportBackend> bindExportBackend() {\n+        return bindExportBackend(SUPPORTED_ES_VERSION);\n+    }\n+\n+    private void registerQueryBackend() {\n+        registerQueryBackend(SUPPORTED_ES_VERSION, ElasticsearchQueryString.NAME, ElasticsearchBackend.class);\n+    }\n+\n+    private MapBinder<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> pivotBucketHandlerBinder() {\n+        return MapBinder.newMapBinder(binder(),\n+                TypeLiteral.get(String.class),\n+                new TypeLiteral<ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>>() {});\n+\n+    }\n+\n+    private ScopedBindingBuilder registerPivotBucketHandler(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578db06e4b01c7987d08ef762916208e4c6e75cf"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODQxMg==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968412", "createdAt": "2020-07-24T10:15:56Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.assistedinject.FactoryModuleBuilder;\n+import com.google.inject.binder.LinkedBindingBuilder;\n+import com.google.inject.binder.ScopedBindingBuilder;\n+import com.google.inject.multibindings.MapBinder;\n+import org.graylog.plugins.views.ViewsModule;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.engine.GeneratedQueryContext;\n+import org.graylog.plugins.views.search.engine.QueryBackend;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.DateRangeBucket;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Time;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Values;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Cardinality;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Min;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Percentile;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.StdDev;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Sum;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.SumOfSquares;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Variance;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.ElasticsearchBackend;\n+import org.graylog.storage.elasticsearch7.views.export.ElasticsearchExportBackend;\n+import org.graylog.storage.elasticsearch7.views.export.RequestStrategy;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESEventList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESMessageList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESDateRangeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESTimeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESValuesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCardinalityHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCountHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMinHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESPercentilesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESStdDevHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumOfSquaresHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESVarianceHandler;\n+\n+import static org.graylog.storage.elasticsearch7.Elasticsearch7Plugin.SUPPORTED_ES_VERSION;\n+\n+public class ViewsESBackendModule extends ViewsModule {\n+    @Override\n+    protected void configure() {\n+        install(new FactoryModuleBuilder().build(ESGeneratedQueryContext.Factory.class));\n+\n+        bindForVersion(SUPPORTED_ES_VERSION, new TypeLiteral<QueryBackend<? extends GeneratedQueryContext>>() {})\n+                .to(ElasticsearchBackend.class);\n+\n+        registerESSearchTypeHandler(MessageList.NAME, ESMessageList.class);\n+        registerESSearchTypeHandler(EventList.NAME, ESEventList.class);\n+        registerESSearchTypeHandler(Pivot.NAME, ESPivot.class).in(Scopes.SINGLETON);\n+\n+        registerPivotSeriesHandler(Average.NAME, ESAverageHandler.class);\n+        registerPivotSeriesHandler(Cardinality.NAME, ESCardinalityHandler.class);\n+        registerPivotSeriesHandler(Count.NAME, ESCountHandler.class);\n+        registerPivotSeriesHandler(Max.NAME, ESMaxHandler.class);\n+        registerPivotSeriesHandler(Min.NAME, ESMinHandler.class);\n+        registerPivotSeriesHandler(StdDev.NAME, ESStdDevHandler.class);\n+        registerPivotSeriesHandler(Sum.NAME, ESSumHandler.class);\n+        registerPivotSeriesHandler(SumOfSquares.NAME, ESSumOfSquaresHandler.class);\n+        registerPivotSeriesHandler(Variance.NAME, ESVarianceHandler.class);\n+        registerPivotSeriesHandler(Percentile.NAME, ESPercentilesHandler.class);\n+\n+        registerPivotBucketHandler(Values.NAME, ESValuesHandler.class);\n+        registerPivotBucketHandler(Time.NAME, ESTimeHandler.class);\n+        registerPivotBucketHandler(DateRangeBucket.NAME, ESDateRangeHandler.class);\n+\n+        bindExportBackend().to(ElasticsearchExportBackend.class);\n+        bindRequestStrategy().to(org.graylog.storage.elasticsearch7.views.export.Scroll.class);\n+    }\n+\n+    private LinkedBindingBuilder<RequestStrategy> bindRequestStrategy() {\n+        return bind(RequestStrategy.class);\n+    }\n+\n+    private LinkedBindingBuilder<ExportBackend> bindExportBackend() {\n+        return bindExportBackend(SUPPORTED_ES_VERSION);\n+    }\n+\n+    private void registerQueryBackend() {\n+        registerQueryBackend(SUPPORTED_ES_VERSION, ElasticsearchQueryString.NAME, ElasticsearchBackend.class);\n+    }\n+\n+    private MapBinder<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> pivotBucketHandlerBinder() {\n+        return MapBinder.newMapBinder(binder(),\n+                TypeLiteral.get(String.class),\n+                new TypeLiteral<ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>>() {});\n+\n+    }\n+\n+    private ScopedBindingBuilder registerPivotBucketHandler(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NDIyMQ=="}, "originalCommit": {"oid": "578db06e4b01c7987d08ef762916208e4c6e75cf"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODU4NDg1OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoxMjoyMFrOG03PzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTo1NFrOG2qPlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NDMwMA==", "bodyText": "Unused return value. Let's make this void to get rid of the warning.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458084300", "createdAt": "2020-07-21T13:12:20Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.assistedinject.FactoryModuleBuilder;\n+import com.google.inject.binder.LinkedBindingBuilder;\n+import com.google.inject.binder.ScopedBindingBuilder;\n+import com.google.inject.multibindings.MapBinder;\n+import org.graylog.plugins.views.ViewsModule;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.engine.GeneratedQueryContext;\n+import org.graylog.plugins.views.search.engine.QueryBackend;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.DateRangeBucket;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Time;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Values;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Cardinality;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Min;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Percentile;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.StdDev;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Sum;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.SumOfSquares;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Variance;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.ElasticsearchBackend;\n+import org.graylog.storage.elasticsearch7.views.export.ElasticsearchExportBackend;\n+import org.graylog.storage.elasticsearch7.views.export.RequestStrategy;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESEventList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESMessageList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESDateRangeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESTimeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESValuesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCardinalityHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCountHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMinHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESPercentilesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESStdDevHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumOfSquaresHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESVarianceHandler;\n+\n+import static org.graylog.storage.elasticsearch7.Elasticsearch7Plugin.SUPPORTED_ES_VERSION;\n+\n+public class ViewsESBackendModule extends ViewsModule {\n+    @Override\n+    protected void configure() {\n+        install(new FactoryModuleBuilder().build(ESGeneratedQueryContext.Factory.class));\n+\n+        bindForVersion(SUPPORTED_ES_VERSION, new TypeLiteral<QueryBackend<? extends GeneratedQueryContext>>() {})\n+                .to(ElasticsearchBackend.class);\n+\n+        registerESSearchTypeHandler(MessageList.NAME, ESMessageList.class);\n+        registerESSearchTypeHandler(EventList.NAME, ESEventList.class);\n+        registerESSearchTypeHandler(Pivot.NAME, ESPivot.class).in(Scopes.SINGLETON);\n+\n+        registerPivotSeriesHandler(Average.NAME, ESAverageHandler.class);\n+        registerPivotSeriesHandler(Cardinality.NAME, ESCardinalityHandler.class);\n+        registerPivotSeriesHandler(Count.NAME, ESCountHandler.class);\n+        registerPivotSeriesHandler(Max.NAME, ESMaxHandler.class);\n+        registerPivotSeriesHandler(Min.NAME, ESMinHandler.class);\n+        registerPivotSeriesHandler(StdDev.NAME, ESStdDevHandler.class);\n+        registerPivotSeriesHandler(Sum.NAME, ESSumHandler.class);\n+        registerPivotSeriesHandler(SumOfSquares.NAME, ESSumOfSquaresHandler.class);\n+        registerPivotSeriesHandler(Variance.NAME, ESVarianceHandler.class);\n+        registerPivotSeriesHandler(Percentile.NAME, ESPercentilesHandler.class);\n+\n+        registerPivotBucketHandler(Values.NAME, ESValuesHandler.class);\n+        registerPivotBucketHandler(Time.NAME, ESTimeHandler.class);\n+        registerPivotBucketHandler(DateRangeBucket.NAME, ESDateRangeHandler.class);\n+\n+        bindExportBackend().to(ElasticsearchExportBackend.class);\n+        bindRequestStrategy().to(org.graylog.storage.elasticsearch7.views.export.Scroll.class);\n+    }\n+\n+    private LinkedBindingBuilder<RequestStrategy> bindRequestStrategy() {\n+        return bind(RequestStrategy.class);\n+    }\n+\n+    private LinkedBindingBuilder<ExportBackend> bindExportBackend() {\n+        return bindExportBackend(SUPPORTED_ES_VERSION);\n+    }\n+\n+    private void registerQueryBackend() {\n+        registerQueryBackend(SUPPORTED_ES_VERSION, ElasticsearchQueryString.NAME, ElasticsearchBackend.class);\n+    }\n+\n+    private MapBinder<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> pivotBucketHandlerBinder() {\n+        return MapBinder.newMapBinder(binder(),\n+                TypeLiteral.get(String.class),\n+                new TypeLiteral<ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>>() {});\n+\n+    }\n+\n+    private ScopedBindingBuilder registerPivotBucketHandler(\n+            String name,\n+            Class<? extends ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> implementation\n+    ) {\n+        return pivotBucketHandlerBinder().addBinding(name).to(implementation);\n+    }\n+\n+    protected MapBinder<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> pivotSeriesHandlerBinder() {\n+        return MapBinder.newMapBinder(binder(),\n+                TypeLiteral.get(String.class),\n+                new TypeLiteral<ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>>() {});\n+\n+    }\n+\n+    private ScopedBindingBuilder registerPivotSeriesHandler(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578db06e4b01c7987d08ef762916208e4c6e75cf"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODQwNA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968404", "createdAt": "2020-07-24T10:15:54Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ViewsESBackendModule.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.google.inject.Scopes;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.assistedinject.FactoryModuleBuilder;\n+import com.google.inject.binder.LinkedBindingBuilder;\n+import com.google.inject.binder.ScopedBindingBuilder;\n+import com.google.inject.multibindings.MapBinder;\n+import org.graylog.plugins.views.ViewsModule;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.engine.GeneratedQueryContext;\n+import org.graylog.plugins.views.search.engine.QueryBackend;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.DateRangeBucket;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Time;\n+import org.graylog.plugins.views.search.searchtypes.pivot.buckets.Values;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Cardinality;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Min;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Percentile;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.StdDev;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Sum;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.SumOfSquares;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Variance;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.ElasticsearchBackend;\n+import org.graylog.storage.elasticsearch7.views.export.ElasticsearchExportBackend;\n+import org.graylog.storage.elasticsearch7.views.export.RequestStrategy;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESEventList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESMessageList;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESDateRangeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESTimeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.buckets.ESValuesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCardinalityHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESCountHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMinHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESPercentilesHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESStdDevHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESSumOfSquaresHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESVarianceHandler;\n+\n+import static org.graylog.storage.elasticsearch7.Elasticsearch7Plugin.SUPPORTED_ES_VERSION;\n+\n+public class ViewsESBackendModule extends ViewsModule {\n+    @Override\n+    protected void configure() {\n+        install(new FactoryModuleBuilder().build(ESGeneratedQueryContext.Factory.class));\n+\n+        bindForVersion(SUPPORTED_ES_VERSION, new TypeLiteral<QueryBackend<? extends GeneratedQueryContext>>() {})\n+                .to(ElasticsearchBackend.class);\n+\n+        registerESSearchTypeHandler(MessageList.NAME, ESMessageList.class);\n+        registerESSearchTypeHandler(EventList.NAME, ESEventList.class);\n+        registerESSearchTypeHandler(Pivot.NAME, ESPivot.class).in(Scopes.SINGLETON);\n+\n+        registerPivotSeriesHandler(Average.NAME, ESAverageHandler.class);\n+        registerPivotSeriesHandler(Cardinality.NAME, ESCardinalityHandler.class);\n+        registerPivotSeriesHandler(Count.NAME, ESCountHandler.class);\n+        registerPivotSeriesHandler(Max.NAME, ESMaxHandler.class);\n+        registerPivotSeriesHandler(Min.NAME, ESMinHandler.class);\n+        registerPivotSeriesHandler(StdDev.NAME, ESStdDevHandler.class);\n+        registerPivotSeriesHandler(Sum.NAME, ESSumHandler.class);\n+        registerPivotSeriesHandler(SumOfSquares.NAME, ESSumOfSquaresHandler.class);\n+        registerPivotSeriesHandler(Variance.NAME, ESVarianceHandler.class);\n+        registerPivotSeriesHandler(Percentile.NAME, ESPercentilesHandler.class);\n+\n+        registerPivotBucketHandler(Values.NAME, ESValuesHandler.class);\n+        registerPivotBucketHandler(Time.NAME, ESTimeHandler.class);\n+        registerPivotBucketHandler(DateRangeBucket.NAME, ESDateRangeHandler.class);\n+\n+        bindExportBackend().to(ElasticsearchExportBackend.class);\n+        bindRequestStrategy().to(org.graylog.storage.elasticsearch7.views.export.Scroll.class);\n+    }\n+\n+    private LinkedBindingBuilder<RequestStrategy> bindRequestStrategy() {\n+        return bind(RequestStrategy.class);\n+    }\n+\n+    private LinkedBindingBuilder<ExportBackend> bindExportBackend() {\n+        return bindExportBackend(SUPPORTED_ES_VERSION);\n+    }\n+\n+    private void registerQueryBackend() {\n+        registerQueryBackend(SUPPORTED_ES_VERSION, ElasticsearchQueryString.NAME, ElasticsearchBackend.class);\n+    }\n+\n+    private MapBinder<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> pivotBucketHandlerBinder() {\n+        return MapBinder.newMapBinder(binder(),\n+                TypeLiteral.get(String.class),\n+                new TypeLiteral<ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>>() {});\n+\n+    }\n+\n+    private ScopedBindingBuilder registerPivotBucketHandler(\n+            String name,\n+            Class<? extends ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> implementation\n+    ) {\n+        return pivotBucketHandlerBinder().addBinding(name).to(implementation);\n+    }\n+\n+    protected MapBinder<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> pivotSeriesHandlerBinder() {\n+        return MapBinder.newMapBinder(binder(),\n+                TypeLiteral.get(String.class),\n+                new TypeLiteral<ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>>() {});\n+\n+    }\n+\n+    private ScopedBindingBuilder registerPivotSeriesHandler(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NDMwMA=="}, "originalCommit": {"oid": "578db06e4b01c7987d08ef762916208e4c6e75cf"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjk0ODc4OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo1Mzo1M1rOG1hB6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjoxNjoyMFrOG2tKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2ODg3NA==", "bodyText": "Can be private", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458768874", "createdAt": "2020-07-22T12:53:53Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes;\n+\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventSummary;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.SearchHit;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ESEventList implements ESSearchTypeHandler<EventList> {\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, EventList eventList,\n+                                    ESGeneratedQueryContext queryContext) {\n+        queryContext.searchSourceBuilder(eventList)\n+                .size(10000);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected List<Map<String, Object>> extractResult(SearchResponse result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NTU0MA==", "bodyText": "ESEventListTest is overriding this method.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459965540", "createdAt": "2020-07-24T10:08:49Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes;\n+\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventSummary;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.SearchHit;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ESEventList implements ESSearchTypeHandler<EventList> {\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, EventList eventList,\n+                                    ESGeneratedQueryContext queryContext) {\n+        queryContext.searchSourceBuilder(eventList)\n+                .size(10000);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected List<Map<String, Object>> extractResult(SearchResponse result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2ODg3NA=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAxNjIwNg==", "bodyText": "Oops. Right. Sorry I overlooked that.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r460016206", "createdAt": "2020-07-24T12:16:20Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes;\n+\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventSummary;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.SearchHit;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ESEventList implements ESSearchTypeHandler<EventList> {\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, EventList eventList,\n+                                    ESGeneratedQueryContext queryContext) {\n+        queryContext.searchSourceBuilder(eventList)\n+                .size(10000);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected List<Map<String, Object>> extractResult(SearchResponse result) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2ODg3NA=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjk0OTEyOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo1NDowMlrOG1hCMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTo1MlrOG2qPiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2ODk0NA==", "bodyText": "Unnecessary suppression", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458768944", "createdAt": "2020-07-22T12:54:02Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes;\n+\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventSummary;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.SearchHit;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ESEventList implements ESSearchTypeHandler<EventList> {\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, EventList eventList,\n+                                    ESGeneratedQueryContext queryContext) {\n+        queryContext.searchSourceBuilder(eventList)\n+                .size(10000);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODM5Mw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968393", "createdAt": "2020-07-24T10:15:52Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/ESEventList.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes;\n+\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.events.EventList;\n+import org.graylog.plugins.views.search.searchtypes.events.EventSummary;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.SearchHit;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ESEventList implements ESSearchTypeHandler<EventList> {\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, EventList eventList,\n+                                    ESGeneratedQueryContext queryContext) {\n+        queryContext.searchSourceBuilder(eventList)\n+                .size(10000);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc2ODk0NA=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mjk1ODM5OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMjo1NjoyOVrOG1hH8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTo0N1rOG2qPaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3MDQxNg==", "bodyText": "previousAggregation can only be null here", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458770416", "createdAt": "2020-07-22T12:56:29Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODM2MA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968360", "createdAt": "2020-07-24T10:15:47Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc3MDQxNg=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzI5NTc5OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoxNDowM1rOG1kZxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDowODozNlrOG2qECg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNDEzMw==", "bodyText": "I don't understand why we need the InitialBucket class here, if all we are interested in subsequently is SearchResponse#getAggregations.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458824133", "createdAt": "2020-07-22T14:14:03Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);\n+        }\n+\n+        final Iterator<BucketSpec> rowBuckets = pivot.rowGroups().iterator();\n+        while (rowBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = rowBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating row group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown row_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                if (topLevelAggregation == null) {\n+                    topLevelAggregation = aggregationBuilder;\n+                }\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!rowBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !rowBuckets.hasNext() ? \"leaf row\" : \"row rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+        final Iterator<BucketSpec> colBuckets = pivot.columnGroups().iterator();\n+        while (colBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = colBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating column group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown column_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!colBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !colBuckets.hasNext() ? \"leaf column\" : \"column rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+\n+        final MinAggregationBuilder startTimestamp = AggregationBuilders.min(\"timestamp-min\").field(\"timestamp\");\n+        final MaxAggregationBuilder endTimestamp = AggregationBuilders.max(\"timestamp-max\").field(\"timestamp\");\n+\n+        searchSourceBuilder.aggregation(startTimestamp);\n+        searchSourceBuilder.aggregation(endTimestamp);\n+\n+        if (topLevelAggregation == null) {\n+            LOG.debug(\"No aggregations generated for {}\", pivot);\n+        }\n+    }\n+\n+    private Stream<AggregationBuilder> seriesStream(Pivot pivot, ESGeneratedQueryContext queryContext, String reason) {\n+        return EntryStream.of(pivot.series())\n+                .mapKeyValue((integer, seriesSpec) -> {\n+                    final String seriesName = queryContext.seriesName(seriesSpec, pivot);\n+                    LOG.debug(\"Adding {} series '{}' with name '{}'\", reason, seriesSpec.type(), seriesName);\n+                    final ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation> esPivotSeriesSpecHandler = seriesHandlers.get(seriesSpec.type());\n+                    if (esPivotSeriesSpecHandler == null) {\n+                        throw new IllegalArgumentException(\"No series handler registered for: \" + seriesSpec.type());\n+                    }\n+                    return esPivotSeriesSpecHandler.createAggregation(seriesName, pivot, seriesSpec, this, queryContext);\n+                })\n+                .filter(Optional::isPresent)\n+                .map(Optional::get);\n+    }\n+\n+    private boolean isAllMessagesTimeRange(TimeRange timeRange) {\n+        return ALL_MESSAGES_TIMERANGE.equals(timeRange);\n+    }\n+\n+    private AbsoluteRange extractEffectiveTimeRange(SearchResponse queryResult, Query query, Pivot pivot) {\n+        final Min min = queryResult.getAggregations().get(\"timestamp-min\");\n+        final Double from = min.getValue();\n+        final Max max = queryResult.getAggregations().get(\"timestamp-max\");\n+        final Double to = max.getValue();\n+        final TimeRange pivotRange = query.effectiveTimeRange(pivot);\n+        return AbsoluteRange.create(\n+                isAllMessagesTimeRange(pivotRange) && from != 0\n+                        ? new DateTime(from.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getFrom(),\n+                isAllMessagesTimeRange(pivotRange) && to != 0\n+                        ? new DateTime(to.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getTo()\n+        );\n+    }\n+\n+    @Override\n+    public SearchType.Result doExtractResult(SearchJob job, Query query, Pivot pivot, SearchResponse queryResult, Aggregations aggregations, ESGeneratedQueryContext queryContext) {\n+        final AbsoluteRange effectiveTimerange = extractEffectiveTimeRange(queryResult, query, pivot);\n+\n+        final PivotResult.Builder resultBuilder = PivotResult.builder()\n+                .id(pivot.id())\n+                .effectiveTimerange(effectiveTimerange)\n+                .total(extractDocumentCount(queryResult, pivot, queryContext));\n+\n+        // pivot results are a table where cells can contain multiple \"values\" and not only scalars:\n+        // each combination of row and column groups can contain all series (if rollup is true)\n+        // if rollup is false, only the \"leaf\" components contain the series\n+        // in the elasticsearch result, rows and columns are simply nested aggregations (first aggregations from rows, then from columns)\n+        // with metric aggregations on the corresponding levels.\n+        // first we iterate over all row groups (whose values generate a \"key array\", corresponding to the nesting level)\n+        // once we exhaust the row groups, we descend into the columns, which get added as values to their corresponding rows\n+        // on each nesting level and combination we have to check for series which we also add as values to the containing row\n+        final HasAggregations initialResult = createInitialResult(queryResult);\n+\n+        processRows(resultBuilder, queryResult, queryContext, pivot, pivot.rowGroups(), new ArrayDeque<>(), initialResult);\n+\n+        return pivot.name().map(resultBuilder::name).orElse(resultBuilder).build();\n+    }\n+\n+    private HasAggregations createInitialResult(SearchResponse queryResult) {\n+        return InitialBucket.create(queryResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MjI4Nw==", "bodyText": "We do need getDocCount() in one case, so the best way seemed to be an implementation of MultiBucketsAggregation.Bucket which combines both getDocCount() and HasAggregations.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459952287", "createdAt": "2020-07-24T09:39:07Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);\n+        }\n+\n+        final Iterator<BucketSpec> rowBuckets = pivot.rowGroups().iterator();\n+        while (rowBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = rowBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating row group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown row_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                if (topLevelAggregation == null) {\n+                    topLevelAggregation = aggregationBuilder;\n+                }\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!rowBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !rowBuckets.hasNext() ? \"leaf row\" : \"row rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+        final Iterator<BucketSpec> colBuckets = pivot.columnGroups().iterator();\n+        while (colBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = colBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating column group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown column_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!colBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !colBuckets.hasNext() ? \"leaf column\" : \"column rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+\n+        final MinAggregationBuilder startTimestamp = AggregationBuilders.min(\"timestamp-min\").field(\"timestamp\");\n+        final MaxAggregationBuilder endTimestamp = AggregationBuilders.max(\"timestamp-max\").field(\"timestamp\");\n+\n+        searchSourceBuilder.aggregation(startTimestamp);\n+        searchSourceBuilder.aggregation(endTimestamp);\n+\n+        if (topLevelAggregation == null) {\n+            LOG.debug(\"No aggregations generated for {}\", pivot);\n+        }\n+    }\n+\n+    private Stream<AggregationBuilder> seriesStream(Pivot pivot, ESGeneratedQueryContext queryContext, String reason) {\n+        return EntryStream.of(pivot.series())\n+                .mapKeyValue((integer, seriesSpec) -> {\n+                    final String seriesName = queryContext.seriesName(seriesSpec, pivot);\n+                    LOG.debug(\"Adding {} series '{}' with name '{}'\", reason, seriesSpec.type(), seriesName);\n+                    final ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation> esPivotSeriesSpecHandler = seriesHandlers.get(seriesSpec.type());\n+                    if (esPivotSeriesSpecHandler == null) {\n+                        throw new IllegalArgumentException(\"No series handler registered for: \" + seriesSpec.type());\n+                    }\n+                    return esPivotSeriesSpecHandler.createAggregation(seriesName, pivot, seriesSpec, this, queryContext);\n+                })\n+                .filter(Optional::isPresent)\n+                .map(Optional::get);\n+    }\n+\n+    private boolean isAllMessagesTimeRange(TimeRange timeRange) {\n+        return ALL_MESSAGES_TIMERANGE.equals(timeRange);\n+    }\n+\n+    private AbsoluteRange extractEffectiveTimeRange(SearchResponse queryResult, Query query, Pivot pivot) {\n+        final Min min = queryResult.getAggregations().get(\"timestamp-min\");\n+        final Double from = min.getValue();\n+        final Max max = queryResult.getAggregations().get(\"timestamp-max\");\n+        final Double to = max.getValue();\n+        final TimeRange pivotRange = query.effectiveTimeRange(pivot);\n+        return AbsoluteRange.create(\n+                isAllMessagesTimeRange(pivotRange) && from != 0\n+                        ? new DateTime(from.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getFrom(),\n+                isAllMessagesTimeRange(pivotRange) && to != 0\n+                        ? new DateTime(to.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getTo()\n+        );\n+    }\n+\n+    @Override\n+    public SearchType.Result doExtractResult(SearchJob job, Query query, Pivot pivot, SearchResponse queryResult, Aggregations aggregations, ESGeneratedQueryContext queryContext) {\n+        final AbsoluteRange effectiveTimerange = extractEffectiveTimeRange(queryResult, query, pivot);\n+\n+        final PivotResult.Builder resultBuilder = PivotResult.builder()\n+                .id(pivot.id())\n+                .effectiveTimerange(effectiveTimerange)\n+                .total(extractDocumentCount(queryResult, pivot, queryContext));\n+\n+        // pivot results are a table where cells can contain multiple \"values\" and not only scalars:\n+        // each combination of row and column groups can contain all series (if rollup is true)\n+        // if rollup is false, only the \"leaf\" components contain the series\n+        // in the elasticsearch result, rows and columns are simply nested aggregations (first aggregations from rows, then from columns)\n+        // with metric aggregations on the corresponding levels.\n+        // first we iterate over all row groups (whose values generate a \"key array\", corresponding to the nesting level)\n+        // once we exhaust the row groups, we descend into the columns, which get added as values to their corresponding rows\n+        // on each nesting level and combination we have to check for series which we also add as values to the containing row\n+        final HasAggregations initialResult = createInitialResult(queryResult);\n+\n+        processRows(resultBuilder, queryResult, queryContext, pivot, pivot.rowGroups(), new ArrayDeque<>(), initialResult);\n+\n+        return pivot.name().map(resultBuilder::name).orElse(resultBuilder).build();\n+    }\n+\n+    private HasAggregations createInitialResult(SearchResponse queryResult) {\n+        return InitialBucket.create(queryResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNDEzMw=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NTQ1MA==", "bodyText": "OK, got it. Sorry for missing that.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459965450", "createdAt": "2020-07-24T10:08:36Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);\n+        }\n+\n+        final Iterator<BucketSpec> rowBuckets = pivot.rowGroups().iterator();\n+        while (rowBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = rowBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating row group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown row_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                if (topLevelAggregation == null) {\n+                    topLevelAggregation = aggregationBuilder;\n+                }\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!rowBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !rowBuckets.hasNext() ? \"leaf row\" : \"row rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+        final Iterator<BucketSpec> colBuckets = pivot.columnGroups().iterator();\n+        while (colBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = colBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating column group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown column_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!colBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !colBuckets.hasNext() ? \"leaf column\" : \"column rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+\n+        final MinAggregationBuilder startTimestamp = AggregationBuilders.min(\"timestamp-min\").field(\"timestamp\");\n+        final MaxAggregationBuilder endTimestamp = AggregationBuilders.max(\"timestamp-max\").field(\"timestamp\");\n+\n+        searchSourceBuilder.aggregation(startTimestamp);\n+        searchSourceBuilder.aggregation(endTimestamp);\n+\n+        if (topLevelAggregation == null) {\n+            LOG.debug(\"No aggregations generated for {}\", pivot);\n+        }\n+    }\n+\n+    private Stream<AggregationBuilder> seriesStream(Pivot pivot, ESGeneratedQueryContext queryContext, String reason) {\n+        return EntryStream.of(pivot.series())\n+                .mapKeyValue((integer, seriesSpec) -> {\n+                    final String seriesName = queryContext.seriesName(seriesSpec, pivot);\n+                    LOG.debug(\"Adding {} series '{}' with name '{}'\", reason, seriesSpec.type(), seriesName);\n+                    final ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation> esPivotSeriesSpecHandler = seriesHandlers.get(seriesSpec.type());\n+                    if (esPivotSeriesSpecHandler == null) {\n+                        throw new IllegalArgumentException(\"No series handler registered for: \" + seriesSpec.type());\n+                    }\n+                    return esPivotSeriesSpecHandler.createAggregation(seriesName, pivot, seriesSpec, this, queryContext);\n+                })\n+                .filter(Optional::isPresent)\n+                .map(Optional::get);\n+    }\n+\n+    private boolean isAllMessagesTimeRange(TimeRange timeRange) {\n+        return ALL_MESSAGES_TIMERANGE.equals(timeRange);\n+    }\n+\n+    private AbsoluteRange extractEffectiveTimeRange(SearchResponse queryResult, Query query, Pivot pivot) {\n+        final Min min = queryResult.getAggregations().get(\"timestamp-min\");\n+        final Double from = min.getValue();\n+        final Max max = queryResult.getAggregations().get(\"timestamp-max\");\n+        final Double to = max.getValue();\n+        final TimeRange pivotRange = query.effectiveTimeRange(pivot);\n+        return AbsoluteRange.create(\n+                isAllMessagesTimeRange(pivotRange) && from != 0\n+                        ? new DateTime(from.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getFrom(),\n+                isAllMessagesTimeRange(pivotRange) && to != 0\n+                        ? new DateTime(to.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getTo()\n+        );\n+    }\n+\n+    @Override\n+    public SearchType.Result doExtractResult(SearchJob job, Query query, Pivot pivot, SearchResponse queryResult, Aggregations aggregations, ESGeneratedQueryContext queryContext) {\n+        final AbsoluteRange effectiveTimerange = extractEffectiveTimeRange(queryResult, query, pivot);\n+\n+        final PivotResult.Builder resultBuilder = PivotResult.builder()\n+                .id(pivot.id())\n+                .effectiveTimerange(effectiveTimerange)\n+                .total(extractDocumentCount(queryResult, pivot, queryContext));\n+\n+        // pivot results are a table where cells can contain multiple \"values\" and not only scalars:\n+        // each combination of row and column groups can contain all series (if rollup is true)\n+        // if rollup is false, only the \"leaf\" components contain the series\n+        // in the elasticsearch result, rows and columns are simply nested aggregations (first aggregations from rows, then from columns)\n+        // with metric aggregations on the corresponding levels.\n+        // first we iterate over all row groups (whose values generate a \"key array\", corresponding to the nesting level)\n+        // once we exhaust the row groups, we descend into the columns, which get added as values to their corresponding rows\n+        // on each nesting level and combination we have to check for series which we also add as values to the containing row\n+        final HasAggregations initialResult = createInitialResult(queryResult);\n+\n+        processRows(resultBuilder, queryResult, queryContext, pivot, pivot.rowGroups(), new ArrayDeque<>(), initialResult);\n+\n+        return pivot.name().map(resultBuilder::name).orElse(resultBuilder).build();\n+    }\n+\n+    private HasAggregations createInitialResult(SearchResponse queryResult) {\n+        return InitialBucket.create(queryResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgyNDEzMw=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzMzODM3OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyMzowMlrOG1kz0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOTozOToxNVrOG2pQ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMDgwMg==", "bodyText": "Wouldn't it be enough to pass queryResult::getAggregations instead of initialResult?", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458830802", "createdAt": "2020-07-22T14:23:02Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);\n+        }\n+\n+        final Iterator<BucketSpec> rowBuckets = pivot.rowGroups().iterator();\n+        while (rowBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = rowBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating row group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown row_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                if (topLevelAggregation == null) {\n+                    topLevelAggregation = aggregationBuilder;\n+                }\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!rowBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !rowBuckets.hasNext() ? \"leaf row\" : \"row rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+        final Iterator<BucketSpec> colBuckets = pivot.columnGroups().iterator();\n+        while (colBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = colBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating column group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown column_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!colBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !colBuckets.hasNext() ? \"leaf column\" : \"column rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+\n+        final MinAggregationBuilder startTimestamp = AggregationBuilders.min(\"timestamp-min\").field(\"timestamp\");\n+        final MaxAggregationBuilder endTimestamp = AggregationBuilders.max(\"timestamp-max\").field(\"timestamp\");\n+\n+        searchSourceBuilder.aggregation(startTimestamp);\n+        searchSourceBuilder.aggregation(endTimestamp);\n+\n+        if (topLevelAggregation == null) {\n+            LOG.debug(\"No aggregations generated for {}\", pivot);\n+        }\n+    }\n+\n+    private Stream<AggregationBuilder> seriesStream(Pivot pivot, ESGeneratedQueryContext queryContext, String reason) {\n+        return EntryStream.of(pivot.series())\n+                .mapKeyValue((integer, seriesSpec) -> {\n+                    final String seriesName = queryContext.seriesName(seriesSpec, pivot);\n+                    LOG.debug(\"Adding {} series '{}' with name '{}'\", reason, seriesSpec.type(), seriesName);\n+                    final ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation> esPivotSeriesSpecHandler = seriesHandlers.get(seriesSpec.type());\n+                    if (esPivotSeriesSpecHandler == null) {\n+                        throw new IllegalArgumentException(\"No series handler registered for: \" + seriesSpec.type());\n+                    }\n+                    return esPivotSeriesSpecHandler.createAggregation(seriesName, pivot, seriesSpec, this, queryContext);\n+                })\n+                .filter(Optional::isPresent)\n+                .map(Optional::get);\n+    }\n+\n+    private boolean isAllMessagesTimeRange(TimeRange timeRange) {\n+        return ALL_MESSAGES_TIMERANGE.equals(timeRange);\n+    }\n+\n+    private AbsoluteRange extractEffectiveTimeRange(SearchResponse queryResult, Query query, Pivot pivot) {\n+        final Min min = queryResult.getAggregations().get(\"timestamp-min\");\n+        final Double from = min.getValue();\n+        final Max max = queryResult.getAggregations().get(\"timestamp-max\");\n+        final Double to = max.getValue();\n+        final TimeRange pivotRange = query.effectiveTimeRange(pivot);\n+        return AbsoluteRange.create(\n+                isAllMessagesTimeRange(pivotRange) && from != 0\n+                        ? new DateTime(from.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getFrom(),\n+                isAllMessagesTimeRange(pivotRange) && to != 0\n+                        ? new DateTime(to.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getTo()\n+        );\n+    }\n+\n+    @Override\n+    public SearchType.Result doExtractResult(SearchJob job, Query query, Pivot pivot, SearchResponse queryResult, Aggregations aggregations, ESGeneratedQueryContext queryContext) {\n+        final AbsoluteRange effectiveTimerange = extractEffectiveTimeRange(queryResult, query, pivot);\n+\n+        final PivotResult.Builder resultBuilder = PivotResult.builder()\n+                .id(pivot.id())\n+                .effectiveTimerange(effectiveTimerange)\n+                .total(extractDocumentCount(queryResult, pivot, queryContext));\n+\n+        // pivot results are a table where cells can contain multiple \"values\" and not only scalars:\n+        // each combination of row and column groups can contain all series (if rollup is true)\n+        // if rollup is false, only the \"leaf\" components contain the series\n+        // in the elasticsearch result, rows and columns are simply nested aggregations (first aggregations from rows, then from columns)\n+        // with metric aggregations on the corresponding levels.\n+        // first we iterate over all row groups (whose values generate a \"key array\", corresponding to the nesting level)\n+        // once we exhaust the row groups, we descend into the columns, which get added as values to their corresponding rows\n+        // on each nesting level and combination we have to check for series which we also add as values to the containing row\n+        final HasAggregations initialResult = createInitialResult(queryResult);\n+\n+        processRows(resultBuilder, queryResult, queryContext, pivot, pivot.rowGroups(), new ArrayDeque<>(), initialResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MjM1Nw==", "bodyText": "See #8547 (comment).", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459952357", "createdAt": "2020-07-24T09:39:15Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/ESPivot.java", "diffHunk": "@@ -0,0 +1,385 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import one.util.streamex.EntryStream;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotResult;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MaxAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.Min;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.MinAggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.RelativeRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.jooq.lambda.tuple.Tuple;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESPivot implements ESSearchTypeHandler<Pivot> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESPivot.class);\n+    private final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers;\n+    private final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers;\n+    private static final TimeRange ALL_MESSAGES_TIMERANGE = allMessagesTimeRange();\n+\n+    private static TimeRange allMessagesTimeRange() {\n+        try {\n+            return RelativeRange.create(0);\n+        } catch (InvalidRangeParametersException e){\n+            LOG.error(\"Unable to instantiate all messages timerange: \", e);\n+        }\n+        return null;\n+    }\n+\n+    @Inject\n+    public ESPivot(Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers,\n+                   Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers) {\n+        this.bucketHandlers = bucketHandlers;\n+        this.seriesHandlers = seriesHandlers;\n+    }\n+\n+    @Override\n+    public void doGenerateQueryPart(SearchJob job, Query query, Pivot pivot, ESGeneratedQueryContext queryContext) {\n+        LOG.debug(\"Generating aggregation for {}\", pivot);\n+        final SearchSourceBuilder searchSourceBuilder = queryContext.searchSourceBuilder(pivot);\n+\n+        final Map<Object, Object> contextMap = queryContext.contextMap();\n+        final AggTypes aggTypes = new AggTypes();\n+        contextMap.put(pivot.id(), aggTypes);\n+\n+        // holds the initial level aggregation to be added to the query\n+        AggregationBuilder topLevelAggregation = null;\n+        // holds the last complete bucket aggregation into which subsequent buckets get added\n+        AggregationBuilder previousAggregation = null;\n+\n+        // add global rollup series if those were requested\n+        if (pivot.rollup()) {\n+            seriesStream(pivot, queryContext, \"global rollup\")\n+                    .forEach(previousAggregation != null ? previousAggregation::subAggregation : searchSourceBuilder::aggregation);\n+        }\n+\n+        final Iterator<BucketSpec> rowBuckets = pivot.rowGroups().iterator();\n+        while (rowBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = rowBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating row group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown row_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                if (topLevelAggregation == null) {\n+                    topLevelAggregation = aggregationBuilder;\n+                }\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!rowBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !rowBuckets.hasNext() ? \"leaf row\" : \"row rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+        final Iterator<BucketSpec> colBuckets = pivot.columnGroups().iterator();\n+        while (colBuckets.hasNext()) {\n+            final BucketSpec bucketSpec = colBuckets.next();\n+\n+            final String name = queryContext.nextName();\n+            LOG.debug(\"Creating column group aggregation '{}' as {}\", bucketSpec.type(), name);\n+            final ESPivotBucketSpecHandler<? extends PivotSpec, ? extends Aggregation> handler = bucketHandlers.get(bucketSpec.type());\n+            if (handler == null) {\n+                throw new IllegalArgumentException(\"Unknown column_group type \" + bucketSpec.type());\n+            }\n+            final Optional<AggregationBuilder> generatedAggregation = handler.createAggregation(name, pivot, bucketSpec, this, queryContext, query);\n+            if (generatedAggregation.isPresent()) {\n+                final AggregationBuilder aggregationBuilder = generatedAggregation.get();\n+                // always insert the series for the final row group, or for each one if explicit rollup was requested\n+                if (!colBuckets.hasNext() || pivot.rollup()) {\n+                    seriesStream(pivot, queryContext, !colBuckets.hasNext() ? \"leaf column\" : \"column rollup\")\n+                            .forEach(aggregationBuilder::subAggregation);\n+                }\n+                if (previousAggregation != null) {\n+                    previousAggregation.subAggregation(aggregationBuilder);\n+                } else {\n+                    searchSourceBuilder.aggregation(aggregationBuilder);\n+                }\n+                previousAggregation = aggregationBuilder;\n+            }\n+        }\n+\n+        final MinAggregationBuilder startTimestamp = AggregationBuilders.min(\"timestamp-min\").field(\"timestamp\");\n+        final MaxAggregationBuilder endTimestamp = AggregationBuilders.max(\"timestamp-max\").field(\"timestamp\");\n+\n+        searchSourceBuilder.aggregation(startTimestamp);\n+        searchSourceBuilder.aggregation(endTimestamp);\n+\n+        if (topLevelAggregation == null) {\n+            LOG.debug(\"No aggregations generated for {}\", pivot);\n+        }\n+    }\n+\n+    private Stream<AggregationBuilder> seriesStream(Pivot pivot, ESGeneratedQueryContext queryContext, String reason) {\n+        return EntryStream.of(pivot.series())\n+                .mapKeyValue((integer, seriesSpec) -> {\n+                    final String seriesName = queryContext.seriesName(seriesSpec, pivot);\n+                    LOG.debug(\"Adding {} series '{}' with name '{}'\", reason, seriesSpec.type(), seriesName);\n+                    final ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation> esPivotSeriesSpecHandler = seriesHandlers.get(seriesSpec.type());\n+                    if (esPivotSeriesSpecHandler == null) {\n+                        throw new IllegalArgumentException(\"No series handler registered for: \" + seriesSpec.type());\n+                    }\n+                    return esPivotSeriesSpecHandler.createAggregation(seriesName, pivot, seriesSpec, this, queryContext);\n+                })\n+                .filter(Optional::isPresent)\n+                .map(Optional::get);\n+    }\n+\n+    private boolean isAllMessagesTimeRange(TimeRange timeRange) {\n+        return ALL_MESSAGES_TIMERANGE.equals(timeRange);\n+    }\n+\n+    private AbsoluteRange extractEffectiveTimeRange(SearchResponse queryResult, Query query, Pivot pivot) {\n+        final Min min = queryResult.getAggregations().get(\"timestamp-min\");\n+        final Double from = min.getValue();\n+        final Max max = queryResult.getAggregations().get(\"timestamp-max\");\n+        final Double to = max.getValue();\n+        final TimeRange pivotRange = query.effectiveTimeRange(pivot);\n+        return AbsoluteRange.create(\n+                isAllMessagesTimeRange(pivotRange) && from != 0\n+                        ? new DateTime(from.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getFrom(),\n+                isAllMessagesTimeRange(pivotRange) && to != 0\n+                        ? new DateTime(to.longValue(), DateTimeZone.UTC)\n+                        : query.effectiveTimeRange(pivot).getTo()\n+        );\n+    }\n+\n+    @Override\n+    public SearchType.Result doExtractResult(SearchJob job, Query query, Pivot pivot, SearchResponse queryResult, Aggregations aggregations, ESGeneratedQueryContext queryContext) {\n+        final AbsoluteRange effectiveTimerange = extractEffectiveTimeRange(queryResult, query, pivot);\n+\n+        final PivotResult.Builder resultBuilder = PivotResult.builder()\n+                .id(pivot.id())\n+                .effectiveTimerange(effectiveTimerange)\n+                .total(extractDocumentCount(queryResult, pivot, queryContext));\n+\n+        // pivot results are a table where cells can contain multiple \"values\" and not only scalars:\n+        // each combination of row and column groups can contain all series (if rollup is true)\n+        // if rollup is false, only the \"leaf\" components contain the series\n+        // in the elasticsearch result, rows and columns are simply nested aggregations (first aggregations from rows, then from columns)\n+        // with metric aggregations on the corresponding levels.\n+        // first we iterate over all row groups (whose values generate a \"key array\", corresponding to the nesting level)\n+        // once we exhaust the row groups, we descend into the columns, which get added as values to their corresponding rows\n+        // on each nesting level and combination we have to check for series which we also add as values to the containing row\n+        final HasAggregations initialResult = createInitialResult(queryResult);\n+\n+        processRows(resultBuilder, queryResult, queryContext, pivot, pivot.rowGroups(), new ArrayDeque<>(), initialResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMDgwMg=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzM0Njc2OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/InitialBucket.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyNDozN1rOG1k4xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDowODowNVrOG2qDKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMjA3MQ==", "bodyText": "I'm not sure we need this class (see comments on ESPivot above).", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458832071", "createdAt": "2020-07-22T14:24:37Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/InitialBucket.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+\n+import java.io.IOException;\n+\n+public class InitialBucket implements MultiBucketsAggregation.Bucket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk1MjM4OA==", "bodyText": "See #8547 (comment).", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459952388", "createdAt": "2020-07-24T09:39:19Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/InitialBucket.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+\n+import java.io.IOException;\n+\n+public class InitialBucket implements MultiBucketsAggregation.Bucket {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMjA3MQ=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2NTIyNA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459965224", "createdAt": "2020-07-24T10:08:05Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/InitialBucket.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot;\n+\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+\n+import java.io.IOException;\n+\n+public class InitialBucket implements MultiBucketsAggregation.Bucket {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMjA3MQ=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzUyNDE0OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/series/ESCountHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTowMTo0NlrOG1mnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTo0MVrOG2qPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MDI4OQ==", "bodyText": "If value is null, metricAggregation will also be null, because otherwise value will have been set in the else if clause above.\nI think we can log an error in the else if block instead and get rid of this block.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458860289", "createdAt": "2020-07-22T15:01:46Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/series/ESCountHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series;\n+\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCount;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCountAggregationBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESCountHandler extends ESPivotSeriesSpecHandler<Count, ValueCount> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESCountHandler.class);\n+\n+    @Nonnull\n+    @Override\n+    public Optional<AggregationBuilder> doCreateAggregation(String name, Pivot pivot, Count count, ESPivot searchTypeHandler, ESGeneratedQueryContext queryContext) {\n+        final String field = count.field();\n+        if (field == null) {\n+            // doc_count is always present in elasticsearch's bucket aggregations, no need to add it\n+            return Optional.empty();\n+        } else {\n+            // the request was for a field count, we have to add a value_count sub aggregation\n+            final ValueCountAggregationBuilder value = AggregationBuilders.count(name).field(field);\n+            record(queryContext, pivot, count, name, ValueCount.class);\n+            return Optional.of(value);\n+        }\n+    }\n+\n+    @Override\n+    public Stream<Value> doHandleResult(Pivot pivot,\n+                                        Count count,\n+                                        SearchResponse searchResult,\n+                                        ValueCount metricAggregation,\n+                                        ESPivot searchTypeHandler,\n+                                        ESGeneratedQueryContext esGeneratedQueryContext) {\n+        Object value = null;\n+        if (metricAggregation instanceof MultiBucketsAggregation.Bucket) {\n+            value = ((MultiBucketsAggregation.Bucket) metricAggregation).getDocCount();\n+        } else if (metricAggregation instanceof Aggregations) {\n+            value = searchResult.getHits().getTotalHits().value;\n+        } else if (metricAggregation != null) {\n+            value = metricAggregation.getValue();\n+        }\n+        if (value == null) {\n+            LOG.error(\"Unexpected aggregation type {}, returning 0 for the count. This is a bug.\", metricAggregation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODMwMw==", "bodyText": "I restructured it a bit and made the check for valueCount/metricAggregation == null more explicit.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968303", "createdAt": "2020-07-24T10:15:41Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/series/ESCountHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series;\n+\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCount;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCountAggregationBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESCountHandler extends ESPivotSeriesSpecHandler<Count, ValueCount> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESCountHandler.class);\n+\n+    @Nonnull\n+    @Override\n+    public Optional<AggregationBuilder> doCreateAggregation(String name, Pivot pivot, Count count, ESPivot searchTypeHandler, ESGeneratedQueryContext queryContext) {\n+        final String field = count.field();\n+        if (field == null) {\n+            // doc_count is always present in elasticsearch's bucket aggregations, no need to add it\n+            return Optional.empty();\n+        } else {\n+            // the request was for a field count, we have to add a value_count sub aggregation\n+            final ValueCountAggregationBuilder value = AggregationBuilders.count(name).field(field);\n+            record(queryContext, pivot, count, name, ValueCount.class);\n+            return Optional.of(value);\n+        }\n+    }\n+\n+    @Override\n+    public Stream<Value> doHandleResult(Pivot pivot,\n+                                        Count count,\n+                                        SearchResponse searchResult,\n+                                        ValueCount metricAggregation,\n+                                        ESPivot searchTypeHandler,\n+                                        ESGeneratedQueryContext esGeneratedQueryContext) {\n+        Object value = null;\n+        if (metricAggregation instanceof MultiBucketsAggregation.Bucket) {\n+            value = ((MultiBucketsAggregation.Bucket) metricAggregation).getDocCount();\n+        } else if (metricAggregation instanceof Aggregations) {\n+            value = searchResult.getHits().getTotalHits().value;\n+        } else if (metricAggregation != null) {\n+            value = metricAggregation.getValue();\n+        }\n+        if (value == null) {\n+            LOG.error(\"Unexpected aggregation type {}, returning 0 for the count. This is a bug.\", metricAggregation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MDI4OQ=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzUyOTE3OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/series/ESCountHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTowMjo1NFrOG1mqUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTozOFrOG2qPIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MTEzNw==", "bodyText": "Let's rename this to ValueCount.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458861137", "createdAt": "2020-07-22T15:02:54Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/series/ESCountHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series;\n+\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCount;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCountAggregationBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESCountHandler extends ESPivotSeriesSpecHandler<Count, ValueCount> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESCountHandler.class);\n+\n+    @Nonnull\n+    @Override\n+    public Optional<AggregationBuilder> doCreateAggregation(String name, Pivot pivot, Count count, ESPivot searchTypeHandler, ESGeneratedQueryContext queryContext) {\n+        final String field = count.field();\n+        if (field == null) {\n+            // doc_count is always present in elasticsearch's bucket aggregations, no need to add it\n+            return Optional.empty();\n+        } else {\n+            // the request was for a field count, we have to add a value_count sub aggregation\n+            final ValueCountAggregationBuilder value = AggregationBuilders.count(name).field(field);\n+            record(queryContext, pivot, count, name, ValueCount.class);\n+            return Optional.of(value);\n+        }\n+    }\n+\n+    @Override\n+    public Stream<Value> doHandleResult(Pivot pivot,\n+                                        Count count,\n+                                        SearchResponse searchResult,\n+                                        ValueCount metricAggregation,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODI4OA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968288", "createdAt": "2020-07-24T10:15:38Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/views/searchtypes/pivot/series/ESCountHandler.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series;\n+\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.PivotSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Count;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilder;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.AggregationBuilders;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.HasAggregations;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCount;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ValueCountAggregationBuilder;\n+import org.graylog.storage.elasticsearch7.views.ESGeneratedQueryContext;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.jooq.lambda.tuple.Tuple2;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+public class ESCountHandler extends ESPivotSeriesSpecHandler<Count, ValueCount> {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESCountHandler.class);\n+\n+    @Nonnull\n+    @Override\n+    public Optional<AggregationBuilder> doCreateAggregation(String name, Pivot pivot, Count count, ESPivot searchTypeHandler, ESGeneratedQueryContext queryContext) {\n+        final String field = count.field();\n+        if (field == null) {\n+            // doc_count is always present in elasticsearch's bucket aggregations, no need to add it\n+            return Optional.empty();\n+        } else {\n+            // the request was for a field count, we have to add a value_count sub aggregation\n+            final ValueCountAggregationBuilder value = AggregationBuilders.count(name).field(field);\n+            record(queryContext, pivot, count, name, ValueCount.class);\n+            return Optional.of(value);\n+        }\n+    }\n+\n+    @Override\n+    public Stream<Value> doHandleResult(Pivot pivot,\n+                                        Count count,\n+                                        SearchResponse searchResult,\n+                                        ValueCount metricAggregation,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg2MTEzNw=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzY3MzczOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozNDozMlrOG1oFuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTozNVrOG2qPDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NDUzNw==", "bodyText": "Unused. Can be deleted.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458884537", "createdAt": "2020-07-22T15:34:32Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.QueryResult;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.FieldTypesLookup;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringDecorators;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringParser;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.ElasticsearchClient;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class ElasticsearchBackendGeneratedRequestTestBase extends ElasticsearchBackendTestBase {\n+    protected static final QueryStringParser queryStringParser = new QueryStringParser();\n+\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    ElasticsearchBackend elasticsearchBackend;\n+\n+    @Mock\n+    protected ElasticsearchClient client;\n+\n+    @Mock\n+    protected IndexLookup indexLookup;\n+\n+    @Mock\n+    protected FieldTypesLookup fieldTypesLookup;\n+\n+    protected Map<String, Provider<ESSearchTypeHandler<? extends SearchType>>> elasticSearchTypeHandlers;\n+\n+    @Captor\n+    protected ArgumentCaptor<List<SearchRequest>> clientRequestCaptor;\n+\n+    @Before\n+    public void setUpSUT() {\n+        this.elasticSearchTypeHandlers = new HashMap<>();\n+        final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers = Collections.emptyMap();\n+        final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers = new HashMap<>();\n+        seriesHandlers.put(Average.NAME, new ESAverageHandler());\n+        seriesHandlers.put(Max.NAME, new ESMaxHandler());\n+        elasticSearchTypeHandlers.put(Pivot.NAME, () -> new ESPivot(bucketHandlers, seriesHandlers));\n+\n+        this.elasticsearchBackend = new ElasticsearchBackend(elasticSearchTypeHandlers,\n+                queryStringParser,\n+                client,\n+                indexLookup,\n+                new QueryStringDecorators.Fake(),\n+                (elasticsearchBackend, ssb, job, query, results) -> new ESGeneratedQueryContext(elasticsearchBackend, ssb, job, query, results, fieldTypesLookup),\n+                false);\n+    }\n+\n+    SearchJob searchJobForQuery(Query query) {\n+        final Search search = Search.builder()\n+                .id(\"search1\")\n+                .queries(ImmutableSet.of(query))\n+                .build();\n+        return new SearchJob(\"job1\", search, \"admin\");\n+    }\n+\n+    TimeRange timeRangeForTest() {\n+        try {\n+            return AbsoluteRange.create(\"2018-08-23T10:02:00.247+02:00\", \"2018-08-23T10:07:00.252+02:00\");\n+        } catch (InvalidRangeParametersException ignored) {\n+        }\n+        return null;\n+    }\n+\n+    List<SearchRequest> run(SearchJob searchJob, Query query, ESGeneratedQueryContext queryContext, Set<QueryResult> predecessorResults) throws IOException {\n+        this.elasticsearchBackend.doRun(searchJob, query, queryContext, predecessorResults);\n+\n+        verify(client, times(1)).msearch(clientRequestCaptor.capture(), any());\n+\n+        final List<SearchRequest> generatedSearch = clientRequestCaptor.getValue();\n+        return generatedSearch;\n+    }\n+\n+    String resourceFile(String filename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODI2OQ==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968269", "createdAt": "2020-07-24T10:15:35Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.QueryResult;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.FieldTypesLookup;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringDecorators;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringParser;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.ElasticsearchClient;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class ElasticsearchBackendGeneratedRequestTestBase extends ElasticsearchBackendTestBase {\n+    protected static final QueryStringParser queryStringParser = new QueryStringParser();\n+\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    ElasticsearchBackend elasticsearchBackend;\n+\n+    @Mock\n+    protected ElasticsearchClient client;\n+\n+    @Mock\n+    protected IndexLookup indexLookup;\n+\n+    @Mock\n+    protected FieldTypesLookup fieldTypesLookup;\n+\n+    protected Map<String, Provider<ESSearchTypeHandler<? extends SearchType>>> elasticSearchTypeHandlers;\n+\n+    @Captor\n+    protected ArgumentCaptor<List<SearchRequest>> clientRequestCaptor;\n+\n+    @Before\n+    public void setUpSUT() {\n+        this.elasticSearchTypeHandlers = new HashMap<>();\n+        final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers = Collections.emptyMap();\n+        final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers = new HashMap<>();\n+        seriesHandlers.put(Average.NAME, new ESAverageHandler());\n+        seriesHandlers.put(Max.NAME, new ESMaxHandler());\n+        elasticSearchTypeHandlers.put(Pivot.NAME, () -> new ESPivot(bucketHandlers, seriesHandlers));\n+\n+        this.elasticsearchBackend = new ElasticsearchBackend(elasticSearchTypeHandlers,\n+                queryStringParser,\n+                client,\n+                indexLookup,\n+                new QueryStringDecorators.Fake(),\n+                (elasticsearchBackend, ssb, job, query, results) -> new ESGeneratedQueryContext(elasticsearchBackend, ssb, job, query, results, fieldTypesLookup),\n+                false);\n+    }\n+\n+    SearchJob searchJobForQuery(Query query) {\n+        final Search search = Search.builder()\n+                .id(\"search1\")\n+                .queries(ImmutableSet.of(query))\n+                .build();\n+        return new SearchJob(\"job1\", search, \"admin\");\n+    }\n+\n+    TimeRange timeRangeForTest() {\n+        try {\n+            return AbsoluteRange.create(\"2018-08-23T10:02:00.247+02:00\", \"2018-08-23T10:07:00.252+02:00\");\n+        } catch (InvalidRangeParametersException ignored) {\n+        }\n+        return null;\n+    }\n+\n+    List<SearchRequest> run(SearchJob searchJob, Query query, ESGeneratedQueryContext queryContext, Set<QueryResult> predecessorResults) throws IOException {\n+        this.elasticsearchBackend.doRun(searchJob, query, queryContext, predecessorResults);\n+\n+        verify(client, times(1)).msearch(clientRequestCaptor.capture(), any());\n+\n+        final List<SearchRequest> generatedSearch = clientRequestCaptor.getValue();\n+        return generatedSearch;\n+    }\n+\n+    String resourceFile(String filename) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NDUzNw=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzY3ODQyOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozNTozNFrOG1oImg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTozNFrOG2qPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTI3NA==", "bodyText": "Variable is redundant. We can return clientRequestCaptor.getValue(); directly.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458885274", "createdAt": "2020-07-22T15:35:34Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.QueryResult;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.FieldTypesLookup;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringDecorators;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringParser;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.ElasticsearchClient;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class ElasticsearchBackendGeneratedRequestTestBase extends ElasticsearchBackendTestBase {\n+    protected static final QueryStringParser queryStringParser = new QueryStringParser();\n+\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    ElasticsearchBackend elasticsearchBackend;\n+\n+    @Mock\n+    protected ElasticsearchClient client;\n+\n+    @Mock\n+    protected IndexLookup indexLookup;\n+\n+    @Mock\n+    protected FieldTypesLookup fieldTypesLookup;\n+\n+    protected Map<String, Provider<ESSearchTypeHandler<? extends SearchType>>> elasticSearchTypeHandlers;\n+\n+    @Captor\n+    protected ArgumentCaptor<List<SearchRequest>> clientRequestCaptor;\n+\n+    @Before\n+    public void setUpSUT() {\n+        this.elasticSearchTypeHandlers = new HashMap<>();\n+        final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers = Collections.emptyMap();\n+        final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers = new HashMap<>();\n+        seriesHandlers.put(Average.NAME, new ESAverageHandler());\n+        seriesHandlers.put(Max.NAME, new ESMaxHandler());\n+        elasticSearchTypeHandlers.put(Pivot.NAME, () -> new ESPivot(bucketHandlers, seriesHandlers));\n+\n+        this.elasticsearchBackend = new ElasticsearchBackend(elasticSearchTypeHandlers,\n+                queryStringParser,\n+                client,\n+                indexLookup,\n+                new QueryStringDecorators.Fake(),\n+                (elasticsearchBackend, ssb, job, query, results) -> new ESGeneratedQueryContext(elasticsearchBackend, ssb, job, query, results, fieldTypesLookup),\n+                false);\n+    }\n+\n+    SearchJob searchJobForQuery(Query query) {\n+        final Search search = Search.builder()\n+                .id(\"search1\")\n+                .queries(ImmutableSet.of(query))\n+                .build();\n+        return new SearchJob(\"job1\", search, \"admin\");\n+    }\n+\n+    TimeRange timeRangeForTest() {\n+        try {\n+            return AbsoluteRange.create(\"2018-08-23T10:02:00.247+02:00\", \"2018-08-23T10:07:00.252+02:00\");\n+        } catch (InvalidRangeParametersException ignored) {\n+        }\n+        return null;\n+    }\n+\n+    List<SearchRequest> run(SearchJob searchJob, Query query, ESGeneratedQueryContext queryContext, Set<QueryResult> predecessorResults) throws IOException {\n+        this.elasticsearchBackend.doRun(searchJob, query, queryContext, predecessorResults);\n+\n+        verify(client, times(1)).msearch(clientRequestCaptor.capture(), any());\n+\n+        final List<SearchRequest> generatedSearch = clientRequestCaptor.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODI1Nw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968257", "createdAt": "2020-07-24T10:15:34Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.QueryResult;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.FieldTypesLookup;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringDecorators;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringParser;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.ElasticsearchClient;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class ElasticsearchBackendGeneratedRequestTestBase extends ElasticsearchBackendTestBase {\n+    protected static final QueryStringParser queryStringParser = new QueryStringParser();\n+\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    ElasticsearchBackend elasticsearchBackend;\n+\n+    @Mock\n+    protected ElasticsearchClient client;\n+\n+    @Mock\n+    protected IndexLookup indexLookup;\n+\n+    @Mock\n+    protected FieldTypesLookup fieldTypesLookup;\n+\n+    protected Map<String, Provider<ESSearchTypeHandler<? extends SearchType>>> elasticSearchTypeHandlers;\n+\n+    @Captor\n+    protected ArgumentCaptor<List<SearchRequest>> clientRequestCaptor;\n+\n+    @Before\n+    public void setUpSUT() {\n+        this.elasticSearchTypeHandlers = new HashMap<>();\n+        final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers = Collections.emptyMap();\n+        final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers = new HashMap<>();\n+        seriesHandlers.put(Average.NAME, new ESAverageHandler());\n+        seriesHandlers.put(Max.NAME, new ESMaxHandler());\n+        elasticSearchTypeHandlers.put(Pivot.NAME, () -> new ESPivot(bucketHandlers, seriesHandlers));\n+\n+        this.elasticsearchBackend = new ElasticsearchBackend(elasticSearchTypeHandlers,\n+                queryStringParser,\n+                client,\n+                indexLookup,\n+                new QueryStringDecorators.Fake(),\n+                (elasticsearchBackend, ssb, job, query, results) -> new ESGeneratedQueryContext(elasticsearchBackend, ssb, job, query, results, fieldTypesLookup),\n+                false);\n+    }\n+\n+    SearchJob searchJobForQuery(Query query) {\n+        final Search search = Search.builder()\n+                .id(\"search1\")\n+                .queries(ImmutableSet.of(query))\n+                .build();\n+        return new SearchJob(\"job1\", search, \"admin\");\n+    }\n+\n+    TimeRange timeRangeForTest() {\n+        try {\n+            return AbsoluteRange.create(\"2018-08-23T10:02:00.247+02:00\", \"2018-08-23T10:07:00.252+02:00\");\n+        } catch (InvalidRangeParametersException ignored) {\n+        }\n+        return null;\n+    }\n+\n+    List<SearchRequest> run(SearchJob searchJob, Query query, ESGeneratedQueryContext queryContext, Set<QueryResult> predecessorResults) throws IOException {\n+        this.elasticsearchBackend.doRun(searchJob, query, queryContext, predecessorResults);\n+\n+        verify(client, times(1)).msearch(clientRequestCaptor.capture(), any());\n+\n+        final List<SearchRequest> generatedSearch = clientRequestCaptor.getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NTI3NA=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzY4Njc5OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNTozNzoyN1rOG1oN5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTozMlrOG2qO9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NjYzMQ==", "bodyText": "IOException is never thrown.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r458886631", "createdAt": "2020-07-22T15:37:27Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.QueryResult;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.FieldTypesLookup;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringDecorators;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringParser;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.ElasticsearchClient;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class ElasticsearchBackendGeneratedRequestTestBase extends ElasticsearchBackendTestBase {\n+    protected static final QueryStringParser queryStringParser = new QueryStringParser();\n+\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    ElasticsearchBackend elasticsearchBackend;\n+\n+    @Mock\n+    protected ElasticsearchClient client;\n+\n+    @Mock\n+    protected IndexLookup indexLookup;\n+\n+    @Mock\n+    protected FieldTypesLookup fieldTypesLookup;\n+\n+    protected Map<String, Provider<ESSearchTypeHandler<? extends SearchType>>> elasticSearchTypeHandlers;\n+\n+    @Captor\n+    protected ArgumentCaptor<List<SearchRequest>> clientRequestCaptor;\n+\n+    @Before\n+    public void setUpSUT() {\n+        this.elasticSearchTypeHandlers = new HashMap<>();\n+        final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers = Collections.emptyMap();\n+        final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers = new HashMap<>();\n+        seriesHandlers.put(Average.NAME, new ESAverageHandler());\n+        seriesHandlers.put(Max.NAME, new ESMaxHandler());\n+        elasticSearchTypeHandlers.put(Pivot.NAME, () -> new ESPivot(bucketHandlers, seriesHandlers));\n+\n+        this.elasticsearchBackend = new ElasticsearchBackend(elasticSearchTypeHandlers,\n+                queryStringParser,\n+                client,\n+                indexLookup,\n+                new QueryStringDecorators.Fake(),\n+                (elasticsearchBackend, ssb, job, query, results) -> new ESGeneratedQueryContext(elasticsearchBackend, ssb, job, query, results, fieldTypesLookup),\n+                false);\n+    }\n+\n+    SearchJob searchJobForQuery(Query query) {\n+        final Search search = Search.builder()\n+                .id(\"search1\")\n+                .queries(ImmutableSet.of(query))\n+                .build();\n+        return new SearchJob(\"job1\", search, \"admin\");\n+    }\n+\n+    TimeRange timeRangeForTest() {\n+        try {\n+            return AbsoluteRange.create(\"2018-08-23T10:02:00.247+02:00\", \"2018-08-23T10:07:00.252+02:00\");\n+        } catch (InvalidRangeParametersException ignored) {\n+        }\n+        return null;\n+    }\n+\n+    List<SearchRequest> run(SearchJob searchJob, Query query, ESGeneratedQueryContext queryContext, Set<QueryResult> predecessorResults) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODI0NQ==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968245", "createdAt": "2020-07-24T10:15:32Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendGeneratedRequestTestBase.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.QueryResult;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.FieldTypesLookup;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringDecorators;\n+import org.graylog.plugins.views.search.elasticsearch.QueryStringParser;\n+import org.graylog.plugins.views.search.searchtypes.pivot.BucketSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.SeriesSpec;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.storage.elasticsearch7.ElasticsearchClient;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.ESSearchTypeHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivot;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotBucketSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.ESPivotSeriesSpecHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESAverageHandler;\n+import org.graylog.storage.elasticsearch7.views.searchtypes.pivot.series.ESMaxHandler;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import javax.inject.Provider;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+public class ElasticsearchBackendGeneratedRequestTestBase extends ElasticsearchBackendTestBase {\n+    protected static final QueryStringParser queryStringParser = new QueryStringParser();\n+\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    ElasticsearchBackend elasticsearchBackend;\n+\n+    @Mock\n+    protected ElasticsearchClient client;\n+\n+    @Mock\n+    protected IndexLookup indexLookup;\n+\n+    @Mock\n+    protected FieldTypesLookup fieldTypesLookup;\n+\n+    protected Map<String, Provider<ESSearchTypeHandler<? extends SearchType>>> elasticSearchTypeHandlers;\n+\n+    @Captor\n+    protected ArgumentCaptor<List<SearchRequest>> clientRequestCaptor;\n+\n+    @Before\n+    public void setUpSUT() {\n+        this.elasticSearchTypeHandlers = new HashMap<>();\n+        final Map<String, ESPivotBucketSpecHandler<? extends BucketSpec, ? extends Aggregation>> bucketHandlers = Collections.emptyMap();\n+        final Map<String, ESPivotSeriesSpecHandler<? extends SeriesSpec, ? extends Aggregation>> seriesHandlers = new HashMap<>();\n+        seriesHandlers.put(Average.NAME, new ESAverageHandler());\n+        seriesHandlers.put(Max.NAME, new ESMaxHandler());\n+        elasticSearchTypeHandlers.put(Pivot.NAME, () -> new ESPivot(bucketHandlers, seriesHandlers));\n+\n+        this.elasticsearchBackend = new ElasticsearchBackend(elasticSearchTypeHandlers,\n+                queryStringParser,\n+                client,\n+                indexLookup,\n+                new QueryStringDecorators.Fake(),\n+                (elasticsearchBackend, ssb, job, query, results) -> new ESGeneratedQueryContext(elasticsearchBackend, ssb, job, query, results, fieldTypesLookup),\n+                false);\n+    }\n+\n+    SearchJob searchJobForQuery(Query query) {\n+        final Search search = Search.builder()\n+                .id(\"search1\")\n+                .queries(ImmutableSet.of(query))\n+                .build();\n+        return new SearchJob(\"job1\", search, \"admin\");\n+    }\n+\n+    TimeRange timeRangeForTest() {\n+        try {\n+            return AbsoluteRange.create(\"2018-08-23T10:02:00.247+02:00\", \"2018-08-23T10:07:00.252+02:00\");\n+        } catch (InvalidRangeParametersException ignored) {\n+        }\n+        return null;\n+    }\n+\n+    List<SearchRequest> run(SearchJob searchJob, Query query, ESGeneratedQueryContext queryContext, Set<QueryResult> predecessorResults) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4NjYzMQ=="}, "originalCommit": {"oid": "353b51fc70dc7e8ae28c94ee641cbad0d6f543d9"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjcxNDUwOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendSearchTypeOverridesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDoyNjo0MFrOG2Evjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDoxNTozMFrOG2qO6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1Mzk5OQ==", "bodyText": "Unused", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459353999", "createdAt": "2020-07-23T10:26:40Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendSearchTypeOverridesTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.jayway.jsonpath.Configuration;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import com.jayway.jsonpath.TypeRef;\n+import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;\n+import com.revinate.assertj.json.JsonPathAssert;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.filter.StreamFilter;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.timeranges.DerivedTimeRange;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.storage.elasticsearch7.testing.TestMultisearchResponse;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+public class ElasticsearchBackendSearchTypeOverridesTest extends ElasticsearchBackendGeneratedRequestTestBase {\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    private SearchJob searchJob;\n+    private Query query;\n+\n+    @Before\n+    public void setUpFixtures() throws InvalidRangeParametersException {\n+        final Set<SearchType> searchTypes = new HashSet<SearchType>() {{\n+            add(\n+                    Pivot.builder()\n+                            .id(\"pivot1\")\n+                            .series(Collections.singletonList(Average.builder().field(\"field1\").build()))\n+                            .rollup(true)\n+                            .timerange(DerivedTimeRange.of(AbsoluteRange.create(\"2019-09-11T10:31:52.819Z\", \"2019-09-11T10:36:52.823Z\")))\n+                            .build()\n+            );\n+            add(\n+                    Pivot.builder()\n+                            .id(\"pivot2\")\n+                            .series(Collections.singletonList(Max.builder().field(\"field2\").build()))\n+                            .rollup(true)\n+                            .query(ElasticsearchQueryString.builder().queryString(\"source:babbage\").build())\n+                            .build()\n+            );\n+        }};\n+        this.query = Query.builder()\n+                .id(\"query1\")\n+                .searchTypes(searchTypes)\n+                .query(ElasticsearchQueryString.builder().queryString(\"production:true\").build())\n+                .filter(StreamFilter.ofId(\"stream1\"))\n+                .timerange(timeRangeForTest())\n+                .build();\n+\n+        this.searchJob = searchJobForQuery(this.query);\n+    }\n+\n+    @Test\n+    public void overridesInSearchTypeAreIncorporatedIntoGeneratedQueries() throws IOException {\n+        final ESGeneratedQueryContext queryContext = this.elasticsearchBackend.generate(searchJob, query, Collections.emptySet());\n+        final MultiSearchResponse response = TestMultisearchResponse.fromFixture(\"successfulMultiSearchResponse.json\");\n+        final List<MultiSearchResponse.Item> items = Arrays.stream(response.getResponses())\n+                .collect(Collectors.toList());\n+        when(client.msearch(any(), any())).thenReturn(items);\n+\n+        final List<SearchRequest> generatedRequest = run(searchJob, query, queryContext, Collections.emptySet());\n+\n+        final DocumentContext pivot1 = parse(generatedRequest.get(0).source().toString());\n+        final DocumentContext pivot2 = parse(generatedRequest.get(1).source().toString());\n+\n+        assertThat(queryStrings(pivot1)).containsExactly(\"production:true\");\n+        assertThat(timerangeFrom(pivot1)).containsExactly(\"2019-09-11 10:31:52.819\");\n+        assertThat(timerangeTo(pivot1)).containsExactly(\"2019-09-11 10:36:52.823\");\n+        assertThat(streams(pivot1)).containsExactly(Collections.singletonList(\"stream1\"));\n+\n+        assertThat(queryStrings(pivot2)).containsExactly(\"production:true\", \"source:babbage\");\n+        assertThat(timerangeFrom(pivot2)).containsExactly(\"2018-08-23 08:02:00.247\");\n+        assertThat(timerangeTo(pivot2)).containsExactly(\"2018-08-23 08:07:00.252\");\n+        assertThat(streams(pivot2)).containsExactly(Collections.singletonList(\"stream1\"));\n+    }\n+\n+    private DocumentContext parse(String json) {\n+        return JsonPath\n+                .using(Configuration.builder()\n+                        .mappingProvider(new JacksonMappingProvider())\n+                        .build())\n+                .parse(json);\n+    }\n+\n+    private List<String> queryStrings(DocumentContext pivot) {\n+        return pivot.read(\"$..query_string.query\", new TypeRef<List<String>>() {});\n+    }\n+\n+    private List<List<String>> streams(DocumentContext pivot) {\n+        return pivot.read(\"$..terms.streams\", new TypeRef<List<List<String>>>() {});\n+    }\n+\n+    private List<String> timerangeFrom(DocumentContext pivot) {\n+        return pivot.read(\"$..timestamp.from\", new TypeRef<List<String>>() {});\n+    }\n+\n+    private List<String> timerangeTo(DocumentContext pivot) {\n+        return pivot.read(\"$..timestamp.to\", new TypeRef<List<String>>() {});\n+    }\n+\n+    @Test\n+    public void timerangeOverridesAffectIndicesSelection() throws IOException, InvalidRangeParametersException {\n+        when(indexLookup.indexNamesForStreamsInTimeRange(ImmutableSet.of(\"stream1\"), timeRangeForTest()))\n+                .thenReturn(ImmutableSet.of(\"queryIndex\"));\n+\n+        TimeRange tr = AbsoluteRange.create(\"2019-09-11T10:31:52.819Z\", \"2019-09-11T10:36:52.823Z\");\n+        when(indexLookup.indexNamesForStreamsInTimeRange(ImmutableSet.of(\"stream1\"), tr))\n+                .thenReturn(ImmutableSet.of(\"searchTypeIndex\"));\n+\n+        final ESGeneratedQueryContext queryContext = this.elasticsearchBackend.generate(searchJob, query, Collections.emptySet());\n+        final MultiSearchResponse response = TestMultisearchResponse.fromFixture(\"successfulMultiSearchResponse.json\");\n+        final List<MultiSearchResponse.Item> items = Arrays.stream(response.getResponses())\n+                .collect(Collectors.toList());\n+        when(client.msearch(any(), any())).thenReturn(items);\n+\n+        final List<SearchRequest> generatedRequest = run(searchJob, query, queryContext, Collections.emptySet());\n+\n+        assertThat(indicesOf(generatedRequest))\n+                .hasSize(2)\n+                .containsExactly(\n+                        \"searchTypeIndex\",\n+                        \"queryIndex\"\n+                );\n+    }\n+\n+    private JsonPathAssert jsonAssertThat(DocumentContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e06354447723de4e186ca8fdea3318f49f15e835"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk2ODIzMg==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459968232", "createdAt": "2020-07-24T10:15:30Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendSearchTypeOverridesTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.jayway.jsonpath.Configuration;\n+import com.jayway.jsonpath.DocumentContext;\n+import com.jayway.jsonpath.JsonPath;\n+import com.jayway.jsonpath.TypeRef;\n+import com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;\n+import com.revinate.assertj.json.JsonPathAssert;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.SearchJob;\n+import org.graylog.plugins.views.search.SearchType;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.filter.StreamFilter;\n+import org.graylog.plugins.views.search.searchtypes.pivot.Pivot;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Average;\n+import org.graylog.plugins.views.search.searchtypes.pivot.series.Max;\n+import org.graylog.plugins.views.search.timeranges.DerivedTimeRange;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.storage.elasticsearch7.testing.TestMultisearchResponse;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+public class ElasticsearchBackendSearchTypeOverridesTest extends ElasticsearchBackendGeneratedRequestTestBase {\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    private SearchJob searchJob;\n+    private Query query;\n+\n+    @Before\n+    public void setUpFixtures() throws InvalidRangeParametersException {\n+        final Set<SearchType> searchTypes = new HashSet<SearchType>() {{\n+            add(\n+                    Pivot.builder()\n+                            .id(\"pivot1\")\n+                            .series(Collections.singletonList(Average.builder().field(\"field1\").build()))\n+                            .rollup(true)\n+                            .timerange(DerivedTimeRange.of(AbsoluteRange.create(\"2019-09-11T10:31:52.819Z\", \"2019-09-11T10:36:52.823Z\")))\n+                            .build()\n+            );\n+            add(\n+                    Pivot.builder()\n+                            .id(\"pivot2\")\n+                            .series(Collections.singletonList(Max.builder().field(\"field2\").build()))\n+                            .rollup(true)\n+                            .query(ElasticsearchQueryString.builder().queryString(\"source:babbage\").build())\n+                            .build()\n+            );\n+        }};\n+        this.query = Query.builder()\n+                .id(\"query1\")\n+                .searchTypes(searchTypes)\n+                .query(ElasticsearchQueryString.builder().queryString(\"production:true\").build())\n+                .filter(StreamFilter.ofId(\"stream1\"))\n+                .timerange(timeRangeForTest())\n+                .build();\n+\n+        this.searchJob = searchJobForQuery(this.query);\n+    }\n+\n+    @Test\n+    public void overridesInSearchTypeAreIncorporatedIntoGeneratedQueries() throws IOException {\n+        final ESGeneratedQueryContext queryContext = this.elasticsearchBackend.generate(searchJob, query, Collections.emptySet());\n+        final MultiSearchResponse response = TestMultisearchResponse.fromFixture(\"successfulMultiSearchResponse.json\");\n+        final List<MultiSearchResponse.Item> items = Arrays.stream(response.getResponses())\n+                .collect(Collectors.toList());\n+        when(client.msearch(any(), any())).thenReturn(items);\n+\n+        final List<SearchRequest> generatedRequest = run(searchJob, query, queryContext, Collections.emptySet());\n+\n+        final DocumentContext pivot1 = parse(generatedRequest.get(0).source().toString());\n+        final DocumentContext pivot2 = parse(generatedRequest.get(1).source().toString());\n+\n+        assertThat(queryStrings(pivot1)).containsExactly(\"production:true\");\n+        assertThat(timerangeFrom(pivot1)).containsExactly(\"2019-09-11 10:31:52.819\");\n+        assertThat(timerangeTo(pivot1)).containsExactly(\"2019-09-11 10:36:52.823\");\n+        assertThat(streams(pivot1)).containsExactly(Collections.singletonList(\"stream1\"));\n+\n+        assertThat(queryStrings(pivot2)).containsExactly(\"production:true\", \"source:babbage\");\n+        assertThat(timerangeFrom(pivot2)).containsExactly(\"2018-08-23 08:02:00.247\");\n+        assertThat(timerangeTo(pivot2)).containsExactly(\"2018-08-23 08:07:00.252\");\n+        assertThat(streams(pivot2)).containsExactly(Collections.singletonList(\"stream1\"));\n+    }\n+\n+    private DocumentContext parse(String json) {\n+        return JsonPath\n+                .using(Configuration.builder()\n+                        .mappingProvider(new JacksonMappingProvider())\n+                        .build())\n+                .parse(json);\n+    }\n+\n+    private List<String> queryStrings(DocumentContext pivot) {\n+        return pivot.read(\"$..query_string.query\", new TypeRef<List<String>>() {});\n+    }\n+\n+    private List<List<String>> streams(DocumentContext pivot) {\n+        return pivot.read(\"$..terms.streams\", new TypeRef<List<List<String>>>() {});\n+    }\n+\n+    private List<String> timerangeFrom(DocumentContext pivot) {\n+        return pivot.read(\"$..timestamp.from\", new TypeRef<List<String>>() {});\n+    }\n+\n+    private List<String> timerangeTo(DocumentContext pivot) {\n+        return pivot.read(\"$..timestamp.to\", new TypeRef<List<String>>() {});\n+    }\n+\n+    @Test\n+    public void timerangeOverridesAffectIndicesSelection() throws IOException, InvalidRangeParametersException {\n+        when(indexLookup.indexNamesForStreamsInTimeRange(ImmutableSet.of(\"stream1\"), timeRangeForTest()))\n+                .thenReturn(ImmutableSet.of(\"queryIndex\"));\n+\n+        TimeRange tr = AbsoluteRange.create(\"2019-09-11T10:31:52.819Z\", \"2019-09-11T10:36:52.823Z\");\n+        when(indexLookup.indexNamesForStreamsInTimeRange(ImmutableSet.of(\"stream1\"), tr))\n+                .thenReturn(ImmutableSet.of(\"searchTypeIndex\"));\n+\n+        final ESGeneratedQueryContext queryContext = this.elasticsearchBackend.generate(searchJob, query, Collections.emptySet());\n+        final MultiSearchResponse response = TestMultisearchResponse.fromFixture(\"successfulMultiSearchResponse.json\");\n+        final List<MultiSearchResponse.Item> items = Arrays.stream(response.getResponses())\n+                .collect(Collectors.toList());\n+        when(client.msearch(any(), any())).thenReturn(items);\n+\n+        final List<SearchRequest> generatedRequest = run(searchJob, query, queryContext, Collections.emptySet());\n+\n+        assertThat(indicesOf(generatedRequest))\n+                .hasSize(2)\n+                .containsExactly(\n+                        \"searchTypeIndex\",\n+                        \"queryIndex\"\n+                );\n+    }\n+\n+    private JsonPathAssert jsonAssertThat(DocumentContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1Mzk5OQ=="}, "originalCommit": {"oid": "e06354447723de4e186ca8fdea3318f49f15e835"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Njc1MzU0OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDozOTozMVrOG2FHCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NTowMFrOG2rMKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MDAwOQ==", "bodyText": "I don't think it's worth having a base class for one method (objectMapperProvider is unused). At this point I'd prefer making indicesOf static and throw it into a utility class in org.graylog.storage.elasticsearch.testing", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459360009", "createdAt": "2020-07-23T10:39:31Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendTestBase.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+abstract class ElasticsearchBackendTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e06354447723de4e186ca8fdea3318f49f15e835"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MzkxNQ==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459983915", "createdAt": "2020-07-24T10:55:00Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/views/ElasticsearchBackendTestBase.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch7.views;\n+\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+abstract class ElasticsearchBackendTestBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2MDAwOQ=="}, "originalCommit": {"oid": "e06354447723de4e186ca8fdea3318f49f15e835"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDQ0MTkyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/indexer/EventsIndexMappingBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODo1MTozMFrOG2n3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NzoxMVrOG2rPoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyOTQ5Ng==", "bodyText": "I don't think we should use a base class for a few utility methods. They could become static methods in a utility class instead.\nThey only one that is extensively used is map anyway. list is used once in each subclass, and set is completely unused.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459929496", "createdAt": "2020-07-24T08:51:30Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/indexer/EventsIndexMappingBase.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.indexer;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+abstract class EventsIndexMappingBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296206f46b7dc7957e00b46614440937670fa9e3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDgwMQ==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459984801", "createdAt": "2020-07-24T10:57:11Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/indexer/EventsIndexMappingBase.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.indexer;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+\n+abstract class EventsIndexMappingBase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkyOTQ5Ng=="}, "originalCommit": {"oid": "296206f46b7dc7957e00b46614440937670fa9e3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDU0NTkzOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/testing/TestMultisearchResponse.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwOToyMzowNVrOG2o0zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1NzoxNVrOG2rPwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NTE2Nw==", "bodyText": "All methods except fromFixture can be private. fromFixture should consequently be moved to the top of the class.", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459945167", "createdAt": "2020-07-24T09:23:05Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/testing/TestMultisearchResponse.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.graylog.storage.elasticsearch7.testing;\n+\n+import com.google.common.io.Resources;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.ParseField;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.ContextParser;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentParser;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.composite.ParsedComposite;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.filter.ParsedFilter;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.filter.ParsedFilters;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.global.ParsedGlobal;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.histogram.ParsedAutoDateHistogram;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.histogram.ParsedDateHistogram;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.histogram.ParsedHistogram;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.missing.ParsedMissing;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.nested.ParsedNested;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.nested.ParsedReverseNested;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.range.ParsedDateRange;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.range.ParsedRange;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.sampler.ParsedSampler;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.terms.ParsedDoubleTerms;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.terms.ParsedLongTerms;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.terms.ParsedStringTerms;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedAvg;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedCardinality;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedExtendedStats;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedMax;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedMedianAbsoluteDeviation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedMin;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedStats;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedSum;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedTopHits;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedValueCount;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedWeightedAvg;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedBucketMetricValue;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedDerivative;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedExtendedStatsBucket;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedPercentilesBucket;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedSimpleValue;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedStatsBucket;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.Suggest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.completion.CompletionSuggestion;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.phrase.PhraseSuggestion;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.term.TermSuggestion;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TestMultisearchResponse {\n+    static List<NamedXContentRegistry.Entry> getDefaultNamedXContents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296206f46b7dc7957e00b46614440937670fa9e3"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4NDgzMw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8547#discussion_r459984833", "createdAt": "2020-07-24T10:57:15Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/test/java/org/graylog/storage/elasticsearch7/testing/TestMultisearchResponse.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.graylog.storage.elasticsearch7.testing;\n+\n+import com.google.common.io.Resources;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.ParseField;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.ContextParser;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.LoggingDeprecationHandler;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.NamedXContentRegistry;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.XContentParser;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.common.xcontent.json.JsonXContent;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.Aggregation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.composite.ParsedComposite;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.filter.ParsedFilter;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.filter.ParsedFilters;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.global.ParsedGlobal;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.histogram.ParsedAutoDateHistogram;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.histogram.ParsedDateHistogram;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.histogram.ParsedHistogram;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.missing.ParsedMissing;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.nested.ParsedNested;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.nested.ParsedReverseNested;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.range.ParsedDateRange;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.range.ParsedRange;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.sampler.ParsedSampler;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.terms.ParsedDoubleTerms;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.terms.ParsedLongTerms;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.bucket.terms.ParsedStringTerms;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedAvg;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedCardinality;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedExtendedStats;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedMax;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedMedianAbsoluteDeviation;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedMin;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedStats;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedSum;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedTopHits;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedValueCount;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.metrics.ParsedWeightedAvg;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedBucketMetricValue;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedDerivative;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedExtendedStatsBucket;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedPercentilesBucket;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedSimpleValue;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.aggregations.pipeline.ParsedStatsBucket;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.Suggest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.completion.CompletionSuggestion;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.phrase.PhraseSuggestion;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.search.suggest.term.TermSuggestion;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class TestMultisearchResponse {\n+    static List<NamedXContentRegistry.Entry> getDefaultNamedXContents() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk0NTE2Nw=="}, "originalCommit": {"oid": "296206f46b7dc7957e00b46614440937670fa9e3"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4148, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}