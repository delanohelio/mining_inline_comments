{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTk1MTg5", "number": 9097, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1NjozNFrOErv7kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowODoyN1rOEshOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzA5NTIyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/TimeRangeDisplay.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1NjozNFrOHesQhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo1NjozNFrOHesQhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NDQ1NQ==", "bodyText": "Happy to discuss if there better options for this!", "url": "https://github.com/Graylog2/graylog2-server/pull/9097#discussion_r501944455", "createdAt": "2020-10-08T18:56:34Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/views/components/searchbar/TimeRangeDisplay.jsx", "diffHunk": "@@ -0,0 +1,101 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useEffect, useRef, useState } from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import moment from 'moment';\n+\n+import { type ThemeInterface } from 'theme';\n+import { type TimeRange } from 'views/logic/queries/Query';\n+import StoreProvider from 'injection/StoreProvider';\n+\n+type Props = {|\n+  timerange: ?TimeRange,\n+|};\n+\n+const EMPTY_RANGE = '----/--/-- --:--:--.---';\n+const EMPTY_OUTPUT = { from: EMPTY_RANGE, until: EMPTY_RANGE };\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+\n+const TimeRangeWrapper: StyledComponent<{}, ThemeInterface, HTMLParagraphElement> = styled.p(({ theme }) => css`\n+  width: 100%;\n+  padding: 3px 9px;\n+  margin: 0 12px;\n+  display: flex;\n+  justify-content: space-around;\n+  background-color: ${theme.colors.variant.lightest.primary};\n+  align-items: center;\n+  border-radius: 4px;\n+  \n+  > span {\n+    flex: 1;\n+  }\n+  \n+  code {\n+    color: ${theme.colors.variant.dark.primary};\n+    background: transparent;\n+    font-size: ${theme.fonts.size.body};\n+  }\n+`);\n+\n+const dateOutput = (timerange: TimeRange) => {\n+  let from = EMPTY_RANGE;\n+\n+  switch (timerange.type) {\n+    case 'relative':\n+      from = !timerange.range ? 'All Time' : moment()\n+        .subtract(timerange.range * 1000)\n+        .fromNow();\n+\n+      return {\n+        from,\n+        until: 'Now',\n+      };\n+\n+    case 'absolute':\n+    case 'keyword':\n+      return { from: timerange.from, until: timerange.to };\n+    default:\n+      return { from, until: from };\n+  }\n+};\n+\n+const TimeRangeDisplay = ({ timerange }: Props) => {\n+  const [{ from, until }, setTimeOutput] = useState(EMPTY_OUTPUT);\n+  const dateTested = useRef(false);\n+\n+  useEffect(() => {\n+    if (timerange?.type === 'keyword' && !timerange.from) {\n+      if (!dateTested.current) {\n+        ToolsStore.testNaturalDate(timerange.keyword)\n+          .then((response) => {\n+            dateTested.current = true;\n+\n+            setTimeOutput({\n+              from: response.from,\n+              until: response.to,\n+            });\n+          }, () => {\n+            setTimeOutput(EMPTY_OUTPUT);\n+          });\n+      }\n+    } else if (timerange?.type) {\n+      setTimeOutput(dateOutput(timerange));\n+    }\n+  }, [dateTested, timerange]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88496adc607b21685a37b7d67f054078aa94b640"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTE3MTYzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/TimeRangeDisplay.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODowODoyN1rOHfzhMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToyMDo0MFrOHhhnaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTk4Ng==", "bodyText": "If I am not mistaken default should throw an error. If someone is adding a new timerange type he would be thankful if the code is leading him to the places where he needs to insert the new type. And the current default should never occur otherwise.", "url": "https://github.com/Graylog2/graylog2-server/pull/9097#discussion_r503111986", "createdAt": "2020-10-12T08:08:27Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/searchbar/TimeRangeDisplay.jsx", "diffHunk": "@@ -0,0 +1,101 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useEffect, useRef, useState } from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import moment from 'moment';\n+\n+import { type ThemeInterface } from 'theme';\n+import { type TimeRange } from 'views/logic/queries/Query';\n+import StoreProvider from 'injection/StoreProvider';\n+\n+type Props = {|\n+  timerange: ?TimeRange,\n+|};\n+\n+const EMPTY_RANGE = '----/--/-- --:--:--.---';\n+const EMPTY_OUTPUT = { from: EMPTY_RANGE, until: EMPTY_RANGE };\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+\n+const TimeRangeWrapper: StyledComponent<{}, ThemeInterface, HTMLParagraphElement> = styled.p(({ theme }) => css`\n+  width: 100%;\n+  padding: 3px 9px;\n+  margin: 0 12px;\n+  display: flex;\n+  justify-content: space-around;\n+  background-color: ${theme.colors.variant.lightest.primary};\n+  align-items: center;\n+  border-radius: 4px;\n+  \n+  > span {\n+    flex: 1;\n+  }\n+  \n+  code {\n+    color: ${theme.colors.variant.dark.primary};\n+    background: transparent;\n+    font-size: ${theme.fonts.size.body};\n+  }\n+`);\n+\n+const dateOutput = (timerange: TimeRange) => {\n+  let from = EMPTY_RANGE;\n+\n+  switch (timerange.type) {\n+    case 'relative':\n+      from = !timerange.range ? 'All Time' : moment()\n+        .subtract(timerange.range * 1000)\n+        .fromNow();\n+\n+      return {\n+        from,\n+        until: 'Now',\n+      };\n+\n+    case 'absolute':\n+    case 'keyword':\n+      return { from: timerange.from, until: timerange.to };\n+    default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88496adc607b21685a37b7d67f054078aa94b640"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNTgxNw==", "bodyText": "Updated!", "url": "https://github.com/Graylog2/graylog2-server/pull/9097#discussion_r504915817", "createdAt": "2020-10-14T19:20:40Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/views/components/searchbar/TimeRangeDisplay.jsx", "diffHunk": "@@ -0,0 +1,101 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useEffect, useRef, useState } from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import moment from 'moment';\n+\n+import { type ThemeInterface } from 'theme';\n+import { type TimeRange } from 'views/logic/queries/Query';\n+import StoreProvider from 'injection/StoreProvider';\n+\n+type Props = {|\n+  timerange: ?TimeRange,\n+|};\n+\n+const EMPTY_RANGE = '----/--/-- --:--:--.---';\n+const EMPTY_OUTPUT = { from: EMPTY_RANGE, until: EMPTY_RANGE };\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+\n+const TimeRangeWrapper: StyledComponent<{}, ThemeInterface, HTMLParagraphElement> = styled.p(({ theme }) => css`\n+  width: 100%;\n+  padding: 3px 9px;\n+  margin: 0 12px;\n+  display: flex;\n+  justify-content: space-around;\n+  background-color: ${theme.colors.variant.lightest.primary};\n+  align-items: center;\n+  border-radius: 4px;\n+  \n+  > span {\n+    flex: 1;\n+  }\n+  \n+  code {\n+    color: ${theme.colors.variant.dark.primary};\n+    background: transparent;\n+    font-size: ${theme.fonts.size.body};\n+  }\n+`);\n+\n+const dateOutput = (timerange: TimeRange) => {\n+  let from = EMPTY_RANGE;\n+\n+  switch (timerange.type) {\n+    case 'relative':\n+      from = !timerange.range ? 'All Time' : moment()\n+        .subtract(timerange.range * 1000)\n+        .fromNow();\n+\n+      return {\n+        from,\n+        until: 'Now',\n+      };\n+\n+    case 'absolute':\n+    case 'keyword':\n+      return { from: timerange.from, until: timerange.to };\n+    default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzExMTk4Ng=="}, "originalCommit": {"oid": "88496adc607b21685a37b7d67f054078aa94b640"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4473, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}