{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNTM1OTEx", "number": 9838, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzowMDoyMFrOFKFCHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzoxMzoyNFrOFKFLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTEyNTQwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/contexts/WidgetFocusProvider.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzowMDoyMFrOIMswQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzowMDoyMFrOIMswQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4NzA3NQ==", "bodyText": "You can use this instead:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const { search, pathname } = useLocation();\n          \n          \n            \n              const { focused } = useQuery();\n          \n      \n    \n    \n  \n\nuseQuery should be imported from routing/useQuery.\nThis already does the query string parsing and returns an object containing the query parameters.", "url": "https://github.com/Graylog2/graylog2-server/pull/9838#discussion_r550187075", "createdAt": "2020-12-30T13:00:20Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/contexts/WidgetFocusProvider.tsx", "diffHunk": "@@ -15,27 +15,63 @@\n  * <http://www.mongodb.com/licensing/server-side-public-license>.\n  */\n import * as React from 'react';\n-import { useState, useEffect } from 'react';\n+import { useState, useEffect, useCallback } from 'react';\n+import { useLocation, useHistory } from 'react-router-dom';\n import PropTypes from 'prop-types';\n+import URI from 'urijs';\n \n import { useStore } from 'stores/connect';\n import { WidgetStore } from 'views/stores/WidgetStore';\n import WidgetFocusContext from 'views/components/contexts/WidgetFocusContext';\n \n+const _syncWithQuery = (query: string, focusedWidget: string) => {\n+  const baseUri = new URI(query)\n+    .removeSearch('focused');\n+\n+  if (focusedWidget) {\n+    return baseUri.setSearch('focused', focusedWidget).toString();\n+  }\n+\n+  return baseUri.toString();\n+};\n+\n+const getFocusedWidgetFromSearch = (search: string) => {\n+  const uri = new URI(search);\n+  const { focused } = uri.search(true);\n+\n+  return focused;\n+};\n+\n const WidgetFocusProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n-  const [focusedWidget, setFocusedWidget] = useState(undefined);\n+  const { search, pathname } = useLocation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7270e56ce76b4e034984b5f080748602e7f6bff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTEyNzQzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/contexts/WidgetFocusProvider.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzowMTo0MVrOIMsxcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzowMTo0MVrOIMsxcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4NzM3OQ==", "bodyText": "We could extract this into a useFocusedWidgetIdFromURL() hook to improve readability.", "url": "https://github.com/Graylog2/graylog2-server/pull/9838#discussion_r550187379", "createdAt": "2020-12-30T13:01:41Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/contexts/WidgetFocusProvider.tsx", "diffHunk": "@@ -15,27 +15,63 @@\n  * <http://www.mongodb.com/licensing/server-side-public-license>.\n  */\n import * as React from 'react';\n-import { useState, useEffect } from 'react';\n+import { useState, useEffect, useCallback } from 'react';\n+import { useLocation, useHistory } from 'react-router-dom';\n import PropTypes from 'prop-types';\n+import URI from 'urijs';\n \n import { useStore } from 'stores/connect';\n import { WidgetStore } from 'views/stores/WidgetStore';\n import WidgetFocusContext from 'views/components/contexts/WidgetFocusContext';\n \n+const _syncWithQuery = (query: string, focusedWidget: string) => {\n+  const baseUri = new URI(query)\n+    .removeSearch('focused');\n+\n+  if (focusedWidget) {\n+    return baseUri.setSearch('focused', focusedWidget).toString();\n+  }\n+\n+  return baseUri.toString();\n+};\n+\n+const getFocusedWidgetFromSearch = (search: string) => {\n+  const uri = new URI(search);\n+  const { focused } = uri.search(true);\n+\n+  return focused;\n+};\n+\n const WidgetFocusProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n-  const [focusedWidget, setFocusedWidget] = useState(undefined);\n+  const { search, pathname } = useLocation();\n+  const query = pathname + search;\n+  const history = useHistory();\n+  const [focusedWidget, setFocusedWidget] = useState<string | undefined>();\n   const widgets = useStore(WidgetStore);\n \n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7270e56ce76b4e034984b5f080748602e7f6bff"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2MTE1MDAxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/contexts/WidgetFocusProvider.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzoxMzoyNFrOIMs-Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQxMzoxMzoyNFrOIMs-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE5MDYyMw==", "bodyText": "I do not understand this part. If the updateFocus function is called with the widget id of the currently focused widget, _syncWithQuery would be called with undefined and would remove the focused query parameter. Or am I misreading something?\nMaybe we should simplify the functionality of the updateFocus function. We could let it set:\n\nthe URL only (which would then be synced with the state in WidgetContextProvider)\nthe state only (through setFocusedWidget) and synchronize with the URL in WidgetContextProvider", "url": "https://github.com/Graylog2/graylog2-server/pull/9838#discussion_r550190623", "createdAt": "2020-12-30T13:13:24Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/contexts/WidgetFocusProvider.tsx", "diffHunk": "@@ -15,27 +15,63 @@\n  * <http://www.mongodb.com/licensing/server-side-public-license>.\n  */\n import * as React from 'react';\n-import { useState, useEffect } from 'react';\n+import { useState, useEffect, useCallback } from 'react';\n+import { useLocation, useHistory } from 'react-router-dom';\n import PropTypes from 'prop-types';\n+import URI from 'urijs';\n \n import { useStore } from 'stores/connect';\n import { WidgetStore } from 'views/stores/WidgetStore';\n import WidgetFocusContext from 'views/components/contexts/WidgetFocusContext';\n \n+const _syncWithQuery = (query: string, focusedWidget: string) => {\n+  const baseUri = new URI(query)\n+    .removeSearch('focused');\n+\n+  if (focusedWidget) {\n+    return baseUri.setSearch('focused', focusedWidget).toString();\n+  }\n+\n+  return baseUri.toString();\n+};\n+\n+const getFocusedWidgetFromSearch = (search: string) => {\n+  const uri = new URI(search);\n+  const { focused } = uri.search(true);\n+\n+  return focused;\n+};\n+\n const WidgetFocusProvider = ({ children }: { children: React.ReactNode }): React.ReactElement => {\n-  const [focusedWidget, setFocusedWidget] = useState(undefined);\n+  const { search, pathname } = useLocation();\n+  const query = pathname + search;\n+  const history = useHistory();\n+  const [focusedWidget, setFocusedWidget] = useState<string | undefined>();\n   const widgets = useStore(WidgetStore);\n \n+  useEffect(() => {\n+    const paramFocusedWidget = getFocusedWidgetFromSearch(search);\n+\n+    if (paramFocusedWidget && focusedWidget !== paramFocusedWidget) {\n+      setFocusedWidget(paramFocusedWidget);\n+    }\n+  }, [focusedWidget, search]);\n+\n   useEffect(() => {\n     if (focusedWidget && !widgets.has(focusedWidget)) {\n       setFocusedWidget(undefined);\n     }\n   }, [focusedWidget, widgets]);\n \n-  const updateFocus = (widgetId: string | undefined | null) => (\n-    widgetId === focusedWidget\n-      ? setFocusedWidget(undefined)\n-      : setFocusedWidget(widgetId));\n+  const updateFocus = useCallback((widgetId: string | undefined | null) => {\n+    const newFocus = widgetId === focusedWidget", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7270e56ce76b4e034984b5f080748602e7f6bff"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4312, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}