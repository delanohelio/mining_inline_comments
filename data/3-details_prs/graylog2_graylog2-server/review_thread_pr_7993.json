{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMjMwMjYy", "number": 7993, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDowOTo1NVrOD3XITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDowOTo1NVrOD3XITg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mzc3MjMwOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog2/inputs/persistence/MongoInputStatusServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDowOTo1NVrOGNk-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoxOToyMlrOGNyjnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5MDYxMw==", "bodyText": "This should be split into two separate tests to make it easier to see if a change breaks one but not the other.", "url": "https://github.com/Graylog2/graylog2-server/pull/7993#discussion_r416890613", "createdAt": "2020-04-28T20:09:55Z", "author": {"login": "waab76"}, "path": "graylog2-server/src/test/java/org/graylog2/inputs/persistence/MongoInputStatusServiceTest.java", "diffHunk": "@@ -182,24 +188,25 @@ public void delete_ReturnsZero_WhenDeletingNonExistantRecord() {\n \n     @Test\n     @MongoDBFixtures(\"input-status.json\")\n-    public void handleDeleteEvent_DoesNothing() {\n-        /*\n-        Currently, the InputDeleted event is propagated both when an input is stopped and when an input is deleted. We\n-        would like to clean up the DB when an input is deleted, but not when it is stopped.  This method is in place to\n-        be used once there are separate events for input deleted and input stopped.  For now, it should do nothing.\n-         */\n-\n-        cut.handleInputDeleted(new InputDeleted(){\n+    public void handleDeleteEvent_DoesNothing() throws Exception {\n+        final String deletedInput = \"54e3deadbeefdeadbeef0001\";\n+        final InputDeleted inputDeletedEvent = new InputDeleted() {\n             @Override\n             public String id() {\n-                return \"54e3deadbeefdeadbeef0001\";\n+                return deletedInput;\n             }\n-        });\n+        };\n \n+        cut.handleInputDeleted(inputDeletedEvent);\n         // The record should not be removed from the DB\n-        Optional<InputStatusRecord> optDbRecord = cut.get(\"54e3deadbeefdeadbeef0001\");\n+        assertThat(cut.get(deletedInput).isPresent(), is(true));\n \n-        assertThat(optDbRecord, notNullValue());\n-        assertThat(optDbRecord.isPresent(), is(true));\n+        // Simulate that the input has actually been deleted\n+        // TODO: This will change once we fix https://github.com/Graylog2/graylog2-server/issues/7812\n+        when(inputService.find(deletedInput)).thenThrow(new NotFoundException());\n+\n+        cut.handleInputDeleted(inputDeletedEvent);\n+        // The record should be removed from the DB\n+        assertThat(cut.get(deletedInput).isPresent(), is(false));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e75cc09691a2576e67255c8e8cad8f1d1ec64ea"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzExMjk4OQ==", "bodyText": "Good point! \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7993#discussion_r417112989", "createdAt": "2020-04-29T07:19:22Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog2/inputs/persistence/MongoInputStatusServiceTest.java", "diffHunk": "@@ -182,24 +188,25 @@ public void delete_ReturnsZero_WhenDeletingNonExistantRecord() {\n \n     @Test\n     @MongoDBFixtures(\"input-status.json\")\n-    public void handleDeleteEvent_DoesNothing() {\n-        /*\n-        Currently, the InputDeleted event is propagated both when an input is stopped and when an input is deleted. We\n-        would like to clean up the DB when an input is deleted, but not when it is stopped.  This method is in place to\n-        be used once there are separate events for input deleted and input stopped.  For now, it should do nothing.\n-         */\n-\n-        cut.handleInputDeleted(new InputDeleted(){\n+    public void handleDeleteEvent_DoesNothing() throws Exception {\n+        final String deletedInput = \"54e3deadbeefdeadbeef0001\";\n+        final InputDeleted inputDeletedEvent = new InputDeleted() {\n             @Override\n             public String id() {\n-                return \"54e3deadbeefdeadbeef0001\";\n+                return deletedInput;\n             }\n-        });\n+        };\n \n+        cut.handleInputDeleted(inputDeletedEvent);\n         // The record should not be removed from the DB\n-        Optional<InputStatusRecord> optDbRecord = cut.get(\"54e3deadbeefdeadbeef0001\");\n+        assertThat(cut.get(deletedInput).isPresent(), is(true));\n \n-        assertThat(optDbRecord, notNullValue());\n-        assertThat(optDbRecord.isPresent(), is(true));\n+        // Simulate that the input has actually been deleted\n+        // TODO: This will change once we fix https://github.com/Graylog2/graylog2-server/issues/7812\n+        when(inputService.find(deletedInput)).thenThrow(new NotFoundException());\n+\n+        cut.handleInputDeleted(inputDeletedEvent);\n+        // The record should be removed from the DB\n+        assertThat(cut.get(deletedInput).isPresent(), is(false));\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5MDYxMw=="}, "originalCommit": {"oid": "3e75cc09691a2576e67255c8e8cad8f1d1ec64ea"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3755, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}