{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjg5NTE1", "number": 7393, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo0NDo1MVrODeAoew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoyNDoxOVrODeBN7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk0MjM1OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboards/Widget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjo0NDo1MVrOFm76Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo1MTowNVrOFm9l9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3MTgxMA==", "bodyText": "You can reuse the mergeQueryString method here.", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376371810", "createdAt": "2020-02-07T12:44:51Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboards/Widget.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards;\n+\n+import org.bson.Document;\n+import org.elasticsearch.common.util.set.Sets;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+class Widget {\n+    private static final String FIELD_FILTER = \"filter\";\n+    private static final String FIELD_QUERY = \"query\";\n+    private static final String FIELD_QUERY_STRING = \"query_string\";\n+    private static final String FIELD_TIMERANGE = \"timerange\";\n+    private static final String FIELD_STREAMS = \"streams\";\n+    private static final String FIELD_ID = \"id\";\n+\n+    private final Document widgetDocument;\n+\n+    Widget(Document widgetDocument) {\n+        this.widgetDocument = widgetDocument;\n+    }\n+\n+    void mergeFilterIntoQueryIfPresent() {\n+        filter().ifPresent(filter -> {\n+            widgetDocument.remove(FIELD_FILTER);\n+            final String newWidgetQuery = concatenateQueryIfExists(filter);\n+            setQueryString(newWidgetQuery);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5OTM1MQ==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376399351", "createdAt": "2020-02-07T13:51:05Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboards/Widget.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards;\n+\n+import org.bson.Document;\n+import org.elasticsearch.common.util.set.Sets;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+class Widget {\n+    private static final String FIELD_FILTER = \"filter\";\n+    private static final String FIELD_QUERY = \"query\";\n+    private static final String FIELD_QUERY_STRING = \"query_string\";\n+    private static final String FIELD_TIMERANGE = \"timerange\";\n+    private static final String FIELD_STREAMS = \"streams\";\n+    private static final String FIELD_ID = \"id\";\n+\n+    private final Document widgetDocument;\n+\n+    Widget(Document widgetDocument) {\n+        this.widgetDocument = widgetDocument;\n+    }\n+\n+    void mergeFilterIntoQueryIfPresent() {\n+        filter().ifPresent(filter -> {\n+            widgetDocument.remove(FIELD_FILTER);\n+            final String newWidgetQuery = concatenateQueryIfExists(filter);\n+            setQueryString(newWidgetQuery);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3MTgxMA=="}, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzk5MTI2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboardsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowNjowNVrOFm8ZBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo1NTozN1rOFm9uBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3OTY1Mw==", "bodyText": "I think it would be even better to verify that nothing was even read. Not writing anything could result from either the migration having been completed before OR not finding any views in need of migration.\nNot crucial though.", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376379653", "createdAt": "2020-02-07T13:06:05Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboardsTest.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards;\n+import org.graylog.testing.mongodb.MongoDBFixtures;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.migrations.Migration;\n+import org.graylog2.plugin.cluster.ClusterConfigService;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards.MigrationCompleted;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+public class V20200204122000_MigrateUntypedViewsToDashboardsTest {\n+    private static final String COLLECTION_VIEWS = \"views\";\n+    private static final String COLLECTION_SEARCHES = \"searches\";\n+\n+    @Rule\n+    public final MongoDBInstance mongodb = MongoDBInstance.createForClass();\n+    @Rule\n+    public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private ClusterConfigService clusterConfigService;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+\n+    private Migration migration;\n+    private MongoCollection<Document> viewsCollection;\n+    private MongoCollection<Document> searchesCollection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.viewsCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_VIEWS));\n+        this.searchesCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_SEARCHES));\n+        final MongoConnection mongoConnection = mock(MongoConnection.class);\n+        when(mongoConnection.getMongoDatabase()).thenReturn(mock(MongoDatabase.class));\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_VIEWS)).thenReturn(viewsCollection);\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_SEARCHES)).thenReturn(searchesCollection);\n+        this.migration = new V20200204122000_MigrateUntypedViewsToDashboards(mongoConnection, clusterConfigService);\n+    }\n+\n+    @Test\n+    public void runsIfNoViewsArePresent() {\n+        this.migration.upgrade();\n+    }\n+\n+    @Test\n+    public void writesMigrationCompletedAfterSuccess() {\n+        this.migration.upgrade();\n+\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).isEmpty();\n+    }\n+\n+    @Test\n+    public void doesNotRunAgainIfMigrationHadCompletedBefore() {\n+        when(clusterConfigService.get(MigrationCompleted.class)).thenReturn(MigrationCompleted.create(Collections.emptyList()));\n+\n+        this.migration.upgrade();\n+\n+        verify(clusterConfigService, never()).write(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMTQxMg==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376401412", "createdAt": "2020-02-07T13:55:37Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboardsTest.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards;\n+import org.graylog.testing.mongodb.MongoDBFixtures;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.migrations.Migration;\n+import org.graylog2.plugin.cluster.ClusterConfigService;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards.MigrationCompleted;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+public class V20200204122000_MigrateUntypedViewsToDashboardsTest {\n+    private static final String COLLECTION_VIEWS = \"views\";\n+    private static final String COLLECTION_SEARCHES = \"searches\";\n+\n+    @Rule\n+    public final MongoDBInstance mongodb = MongoDBInstance.createForClass();\n+    @Rule\n+    public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private ClusterConfigService clusterConfigService;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+\n+    private Migration migration;\n+    private MongoCollection<Document> viewsCollection;\n+    private MongoCollection<Document> searchesCollection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.viewsCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_VIEWS));\n+        this.searchesCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_SEARCHES));\n+        final MongoConnection mongoConnection = mock(MongoConnection.class);\n+        when(mongoConnection.getMongoDatabase()).thenReturn(mock(MongoDatabase.class));\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_VIEWS)).thenReturn(viewsCollection);\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_SEARCHES)).thenReturn(searchesCollection);\n+        this.migration = new V20200204122000_MigrateUntypedViewsToDashboards(mongoConnection, clusterConfigService);\n+    }\n+\n+    @Test\n+    public void runsIfNoViewsArePresent() {\n+        this.migration.upgrade();\n+    }\n+\n+    @Test\n+    public void writesMigrationCompletedAfterSuccess() {\n+        this.migration.upgrade();\n+\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).isEmpty();\n+    }\n+\n+    @Test\n+    public void doesNotRunAgainIfMigrationHadCompletedBefore() {\n+        when(clusterConfigService.get(MigrationCompleted.class)).thenReturn(MigrationCompleted.create(Collections.emptyList()));\n+\n+        this.migration.upgrade();\n+\n+        verify(clusterConfigService, never()).write(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3OTY1Mw=="}, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODAyNzQzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboardsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoyMDo0OVrOFm8vhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowMDoyN1rOFm93rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NTQxNQ==", "bodyText": "I think it would make sense to extract the assertion into another private method and convert checked exceptions into RuntimeExceptions there to get rid of all the throws declarations.", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376385415", "createdAt": "2020-02-07T13:20:49Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboardsTest.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards;\n+import org.graylog.testing.mongodb.MongoDBFixtures;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.migrations.Migration;\n+import org.graylog2.plugin.cluster.ClusterConfigService;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards.MigrationCompleted;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+public class V20200204122000_MigrateUntypedViewsToDashboardsTest {\n+    private static final String COLLECTION_VIEWS = \"views\";\n+    private static final String COLLECTION_SEARCHES = \"searches\";\n+\n+    @Rule\n+    public final MongoDBInstance mongodb = MongoDBInstance.createForClass();\n+    @Rule\n+    public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private ClusterConfigService clusterConfigService;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+\n+    private Migration migration;\n+    private MongoCollection<Document> viewsCollection;\n+    private MongoCollection<Document> searchesCollection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.viewsCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_VIEWS));\n+        this.searchesCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_SEARCHES));\n+        final MongoConnection mongoConnection = mock(MongoConnection.class);\n+        when(mongoConnection.getMongoDatabase()).thenReturn(mock(MongoDatabase.class));\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_VIEWS)).thenReturn(viewsCollection);\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_SEARCHES)).thenReturn(searchesCollection);\n+        this.migration = new V20200204122000_MigrateUntypedViewsToDashboards(mongoConnection, clusterConfigService);\n+    }\n+\n+    @Test\n+    public void runsIfNoViewsArePresent() {\n+        this.migration.upgrade();\n+    }\n+\n+    @Test\n+    public void writesMigrationCompletedAfterSuccess() {\n+        this.migration.upgrade();\n+\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).isEmpty();\n+    }\n+\n+    @Test\n+    public void doesNotRunAgainIfMigrationHadCompletedBefore() {\n+        when(clusterConfigService.get(MigrationCompleted.class)).thenReturn(MigrationCompleted.create(Collections.emptyList()));\n+\n+        this.migration.upgrade();\n+\n+        verify(clusterConfigService, never()).write(any());\n+        verify(this.viewsCollection, never()).updateOne(any(), any());\n+        verify(this.searchesCollection, never()).updateOne(any(), any());\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter.json\")\n+    public void migratesWidgetFiltersToWidgetQueries() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter_and_query.json\")\n+    public void migratesWidgetFiltersToWidgetQueriesAndConcatenatesToExistingQuery() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter_and_query-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter_and_query-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_no_widgets.json\")\n+    public void migratesUntypedViewWithNoWidgets() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_no_widgets-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_no_widgets-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/typed_views.json\")\n+    public void doesNotChangeTypedViews() throws Exception {\n+        this.migration.upgrade();\n+\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).isEmpty();\n+\n+        verify(this.viewsCollection, never()).updateOne(any(), any());\n+        verify(this.searchesCollection, never()).updateOne(any(), any());\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/mixed_typed_and_untyped_views.json\")\n+    public void migratesOnlyUntypedViewsIfMixedOnesArePresent() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/mixed_typed_and_untyped_views-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/mixed_typed_and_untyped_views-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/query_with_query_string.json\")\n+    public void migratesQueryStringFromQueryIntoWidgetsAndSearchTypes() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/query_with_query_string-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/query_with_query_string-searches_after.json\"));\n+    }\n+\n+    private void assertViewsMigrated(String... viewId) {\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).containsExactlyInAnyOrder(viewId);\n+    }\n+\n+    private void assertSavedViews(int count, String viewsCollection) throws Exception {\n+        assertEntityCollection(count, viewsCollection, this.viewsCollection);\n+    }\n+\n+    private void assertSavedSearches(int count, String searchesCollection) throws Exception {\n+        assertEntityCollection(count, searchesCollection, this.searchesCollection);\n+    }\n+\n+    private void assertEntityCollection(int count, String expectedCollection, MongoCollection<Document> actualCollection) throws Exception {\n+        final ArgumentCaptor<Document> newEntitiesCaptor = ArgumentCaptor.forClass(Document.class);\n+        verify(actualCollection, times(count)).updateOne(any(), newEntitiesCaptor.capture());\n+        final List<Document> newEntities = newEntitiesCaptor.getAllValues();\n+        assertThat(newEntities).hasSize(count);\n+\n+        JSONAssert.assertEquals(expectedCollection, toJSON(newEntities), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMzg4NA==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376403884", "createdAt": "2020-02-07T14:00:27Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboardsTest.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.mongodb.client.MongoCollection;\n+import com.mongodb.client.MongoDatabase;\n+import org.bson.Document;\n+import org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards;\n+import org.graylog.testing.mongodb.MongoDBFixtures;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.graylog2.database.MongoConnection;\n+import org.graylog2.migrations.Migration;\n+import org.graylog2.plugin.cluster.ClusterConfigService;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards.V20200204122000_MigrateUntypedViewsToDashboards.MigrationCompleted;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.internal.verification.VerificationModeFactory.times;\n+\n+public class V20200204122000_MigrateUntypedViewsToDashboardsTest {\n+    private static final String COLLECTION_VIEWS = \"views\";\n+    private static final String COLLECTION_SEARCHES = \"searches\";\n+\n+    @Rule\n+    public final MongoDBInstance mongodb = MongoDBInstance.createForClass();\n+    @Rule\n+    public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+    @Mock\n+    private ClusterConfigService clusterConfigService;\n+\n+    private final ObjectMapper objectMapper = new ObjectMapperProvider().get();\n+\n+    private Migration migration;\n+    private MongoCollection<Document> viewsCollection;\n+    private MongoCollection<Document> searchesCollection;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        this.viewsCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_VIEWS));\n+        this.searchesCollection = spy(mongodb.mongoConnection().getMongoDatabase().getCollection(COLLECTION_SEARCHES));\n+        final MongoConnection mongoConnection = mock(MongoConnection.class);\n+        when(mongoConnection.getMongoDatabase()).thenReturn(mock(MongoDatabase.class));\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_VIEWS)).thenReturn(viewsCollection);\n+        when(mongoConnection.getMongoDatabase().getCollection(COLLECTION_SEARCHES)).thenReturn(searchesCollection);\n+        this.migration = new V20200204122000_MigrateUntypedViewsToDashboards(mongoConnection, clusterConfigService);\n+    }\n+\n+    @Test\n+    public void runsIfNoViewsArePresent() {\n+        this.migration.upgrade();\n+    }\n+\n+    @Test\n+    public void writesMigrationCompletedAfterSuccess() {\n+        this.migration.upgrade();\n+\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).isEmpty();\n+    }\n+\n+    @Test\n+    public void doesNotRunAgainIfMigrationHadCompletedBefore() {\n+        when(clusterConfigService.get(MigrationCompleted.class)).thenReturn(MigrationCompleted.create(Collections.emptyList()));\n+\n+        this.migration.upgrade();\n+\n+        verify(clusterConfigService, never()).write(any());\n+        verify(this.viewsCollection, never()).updateOne(any(), any());\n+        verify(this.searchesCollection, never()).updateOne(any(), any());\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter.json\")\n+    public void migratesWidgetFiltersToWidgetQueries() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter_and_query.json\")\n+    public void migratesWidgetFiltersToWidgetQueriesAndConcatenatesToExistingQuery() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter_and_query-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_widgets_with_filter_and_query-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_no_widgets.json\")\n+    public void migratesUntypedViewWithNoWidgets() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_no_widgets-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/untyped_view_with_no_widgets-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/typed_views.json\")\n+    public void doesNotChangeTypedViews() throws Exception {\n+        this.migration.upgrade();\n+\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).isEmpty();\n+\n+        verify(this.viewsCollection, never()).updateOne(any(), any());\n+        verify(this.searchesCollection, never()).updateOne(any(), any());\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/mixed_typed_and_untyped_views.json\")\n+    public void migratesOnlyUntypedViewsIfMixedOnesArePresent() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/mixed_typed_and_untyped_views-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/mixed_typed_and_untyped_views-searches_after.json\"));\n+    }\n+\n+    @Test\n+    @MongoDBFixtures(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/query_with_query_string.json\")\n+    public void migratesQueryStringFromQueryIntoWidgetsAndSearchTypes() throws Exception {\n+        this.migration.upgrade();\n+\n+        assertViewsMigrated(\"5c8a613a844d02001a1fd2f4\");\n+\n+        assertSavedViews(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/query_with_query_string-views_after.json\"));\n+        assertSavedSearches(1, resourceFile(\"V20200204122000_MigrateUntypedViewsToDashboardsTest/query_with_query_string-searches_after.json\"));\n+    }\n+\n+    private void assertViewsMigrated(String... viewId) {\n+        final MigrationCompleted migrationCompleted = captureMigrationCompleted();\n+        assertThat(migrationCompleted.viewIds()).containsExactlyInAnyOrder(viewId);\n+    }\n+\n+    private void assertSavedViews(int count, String viewsCollection) throws Exception {\n+        assertEntityCollection(count, viewsCollection, this.viewsCollection);\n+    }\n+\n+    private void assertSavedSearches(int count, String searchesCollection) throws Exception {\n+        assertEntityCollection(count, searchesCollection, this.searchesCollection);\n+    }\n+\n+    private void assertEntityCollection(int count, String expectedCollection, MongoCollection<Document> actualCollection) throws Exception {\n+        final ArgumentCaptor<Document> newEntitiesCaptor = ArgumentCaptor.forClass(Document.class);\n+        verify(actualCollection, times(count)).updateOne(any(), newEntitiesCaptor.capture());\n+        final List<Document> newEntities = newEntitiesCaptor.getAllValues();\n+        assertThat(newEntities).hasSize(count);\n+\n+        JSONAssert.assertEquals(expectedCollection, toJSON(newEntities), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4NTQxNQ=="}, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODAzODIyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboards/Query.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzoyNDoxOVrOFm81pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowMToyNVrOFm95dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4Njk4Mw==", "bodyText": "Maybe it's just me, but I think searchTypesByIds implies a map keyed by ID and would prefer the name searchTypesForIds.", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376386983", "createdAt": "2020-02-07T13:24:19Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboards/Query.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.Traverser;\n+import org.bson.Document;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.util.stream.Collectors.toSet;\n+\n+class Query {\n+    private static final String FIELD_ID = \"id\";\n+    private static final String FIELD_FILTER = \"filter\";\n+    private static final String FIELD_SEARCH_TYPE_ID = \"id\";\n+    private static final String FIELD_SEARCH_TYPES = \"search_types\";\n+    private static final String FIELD_QUERY = \"query\";\n+    private static final String FIELD_QUERY_STRING = \"query_string\";\n+    private static final String FIELD_TIMERANGE = \"timerange\";\n+    private static final String FIELD_SUB_FILTERS = \"filters\";\n+    private static final String FIELD_FILTER_TYPE = \"type\";\n+    private static final String TYPE_STREAM_FILTER = \"stream\";\n+    private static final String FIELD_STREAM_ID = \"id\";\n+\n+    private final Document queryDocument;\n+\n+    Query(Document queryDocument) {\n+        this.queryDocument = queryDocument;\n+    }\n+\n+    String id() {\n+        return this.queryDocument.getString(FIELD_ID);\n+    }\n+\n+    private Set<SearchType> searchTypesByIds(Set<String> searchTypeIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNDM0Mw==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/7393#discussion_r376404343", "createdAt": "2020-02-07T14:01:25Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/migrations/V20200204122000_MigrateUntypedViewsToDashboards/Query.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.migrations.V20200204122000_MigrateUntypedViewsToDashboards;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.graph.Traverser;\n+import org.bson.Document;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import static com.google.common.base.MoreObjects.firstNonNull;\n+import static java.util.stream.Collectors.toSet;\n+\n+class Query {\n+    private static final String FIELD_ID = \"id\";\n+    private static final String FIELD_FILTER = \"filter\";\n+    private static final String FIELD_SEARCH_TYPE_ID = \"id\";\n+    private static final String FIELD_SEARCH_TYPES = \"search_types\";\n+    private static final String FIELD_QUERY = \"query\";\n+    private static final String FIELD_QUERY_STRING = \"query_string\";\n+    private static final String FIELD_TIMERANGE = \"timerange\";\n+    private static final String FIELD_SUB_FILTERS = \"filters\";\n+    private static final String FIELD_FILTER_TYPE = \"type\";\n+    private static final String TYPE_STREAM_FILTER = \"stream\";\n+    private static final String FIELD_STREAM_ID = \"id\";\n+\n+    private final Document queryDocument;\n+\n+    Query(Document queryDocument) {\n+        this.queryDocument = queryDocument;\n+    }\n+\n+    String id() {\n+        return this.queryDocument.getString(FIELD_ID);\n+    }\n+\n+    private Set<SearchType> searchTypesByIds(Set<String> searchTypeIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM4Njk4Mw=="}, "originalCommit": {"oid": "6600fffbfb91977f4cb71d3c311bd47e4256a14a"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3856, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}