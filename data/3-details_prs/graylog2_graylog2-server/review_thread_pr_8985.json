{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NTEzODY5", "number": 8985, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDoxMjoxMFrOEmGs1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0NjowNVrOEmHwHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzkxMTI1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/EditWidgetFrame.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDoxMjoxMFrOHV8ISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo1NjowM1rOHX7Cug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2NzMwNA==", "bodyText": "widget={widget} can be removed", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r492767304", "createdAt": "2020-09-22T14:12:10Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/EditWidgetFrame.jsx", "diffHunk": "@@ -40,51 +44,69 @@ type Props = {\n   children: Array<React.Node>,\n };\n \n-export default class EditWidgetFrame extends React.Component<Props> {\n-  static propTypes = {\n-    children: PropTypes.node.isRequired,\n-  };\n+const onSubmit = (values, widget: Widget) => {\n+  const { timerange, streams, queryString } = values;\n+  const newWidget = widget.toBuilder()\n+    .timerange(timerange)\n+    .query(createElasticsearchQueryString(queryString))\n+    .streams(streams)\n+    .build();\n+\n+  return WidgetActions.update(widget.id, newWidget);\n+};\n \n-  // eslint-disable-next-line camelcase\n-  UNSAFE_componentWillMount() {\n+const EditWidgetFrame = ({ children }: Props) => {\n+  useEffect(() => {\n     globalStyles.use();\n-  }\n \n-  componentWillUnmount() {\n-    globalStyles.unuse();\n-  }\n+    return globalStyles.unuse;\n+  }, []);\n+\n+  const widget = useContext(WidgetContext);\n \n-  render() {\n-    const { children } = this.props;\n-\n-    return (\n-      <Modal show\n-             animation={false}\n-             dialogComponentClass={EditWidgetDialog}\n-             enforceFocus={false}>\n-        <IfDashboard>\n-          <Modal.Header className={styles.QueryControls}>\n-            <QueryEditModeContext.Provider value=\"widget\">\n-              <HeaderElements />\n-              <WidgetContext.Consumer>\n-                {(widget) => (\n-                  <WidgetQueryControls widget={widget} />\n-                )}\n-              </WidgetContext.Consumer>\n-            </QueryEditModeContext.Provider>\n-          </Modal.Header>\n-        </IfDashboard>\n-        <Modal.Body className={styles.Visualization}>\n-          <div role=\"presentation\" style={{ height: '100%' }}>\n-            <WidgetOverrideElements>\n-              {children[0]}\n-            </WidgetOverrideElements>\n-          </div>\n-        </Modal.Body>\n-        <Modal.Footer className={styles.Footer}>\n-          {children[1]}\n-        </Modal.Footer>\n-      </Modal>\n-    );\n+  if (!widget) {\n+    return <Spinner text=\"Loading widget ...\" />;\n   }\n-}\n+\n+  const { streams } = widget;\n+  const timerange = widget.timerange ?? DEFAULT_TIMERANGE;\n+  const { query_string: queryString } = widget.query ?? createElasticsearchQueryString('');\n+  const _onSubmit = useCallback((values) => onSubmit(values, widget), [widget]);\n+\n+  return (\n+    <Modal show\n+           animation={false}\n+           dialogComponentClass={EditWidgetDialog}\n+           enforceFocus={false}>\n+      <SearchBarForm initialValues={{ timerange, streams, queryString }}\n+                     onSubmit={_onSubmit}>\n+        <div className={styles.gridContainer}>\n+          <IfDashboard>\n+            <Modal.Header className={styles.QueryControls}>\n+              <QueryEditModeContext.Provider value=\"widget\">\n+                <HeaderElements />\n+                <WidgetQueryControls widget={widget} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NjY1MA==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r494846650", "createdAt": "2020-09-25T08:56:03Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/EditWidgetFrame.jsx", "diffHunk": "@@ -40,51 +44,69 @@ type Props = {\n   children: Array<React.Node>,\n };\n \n-export default class EditWidgetFrame extends React.Component<Props> {\n-  static propTypes = {\n-    children: PropTypes.node.isRequired,\n-  };\n+const onSubmit = (values, widget: Widget) => {\n+  const { timerange, streams, queryString } = values;\n+  const newWidget = widget.toBuilder()\n+    .timerange(timerange)\n+    .query(createElasticsearchQueryString(queryString))\n+    .streams(streams)\n+    .build();\n+\n+  return WidgetActions.update(widget.id, newWidget);\n+};\n \n-  // eslint-disable-next-line camelcase\n-  UNSAFE_componentWillMount() {\n+const EditWidgetFrame = ({ children }: Props) => {\n+  useEffect(() => {\n     globalStyles.use();\n-  }\n \n-  componentWillUnmount() {\n-    globalStyles.unuse();\n-  }\n+    return globalStyles.unuse;\n+  }, []);\n+\n+  const widget = useContext(WidgetContext);\n \n-  render() {\n-    const { children } = this.props;\n-\n-    return (\n-      <Modal show\n-             animation={false}\n-             dialogComponentClass={EditWidgetDialog}\n-             enforceFocus={false}>\n-        <IfDashboard>\n-          <Modal.Header className={styles.QueryControls}>\n-            <QueryEditModeContext.Provider value=\"widget\">\n-              <HeaderElements />\n-              <WidgetContext.Consumer>\n-                {(widget) => (\n-                  <WidgetQueryControls widget={widget} />\n-                )}\n-              </WidgetContext.Consumer>\n-            </QueryEditModeContext.Provider>\n-          </Modal.Header>\n-        </IfDashboard>\n-        <Modal.Body className={styles.Visualization}>\n-          <div role=\"presentation\" style={{ height: '100%' }}>\n-            <WidgetOverrideElements>\n-              {children[0]}\n-            </WidgetOverrideElements>\n-          </div>\n-        </Modal.Body>\n-        <Modal.Footer className={styles.Footer}>\n-          {children[1]}\n-        </Modal.Footer>\n-      </Modal>\n-    );\n+  if (!widget) {\n+    return <Spinner text=\"Loading widget ...\" />;\n   }\n-}\n+\n+  const { streams } = widget;\n+  const timerange = widget.timerange ?? DEFAULT_TIMERANGE;\n+  const { query_string: queryString } = widget.query ?? createElasticsearchQueryString('');\n+  const _onSubmit = useCallback((values) => onSubmit(values, widget), [widget]);\n+\n+  return (\n+    <Modal show\n+           animation={false}\n+           dialogComponentClass={EditWidgetDialog}\n+           enforceFocus={false}>\n+      <SearchBarForm initialValues={{ timerange, streams, queryString }}\n+                     onSubmit={_onSubmit}>\n+        <div className={styles.gridContainer}>\n+          <IfDashboard>\n+            <Modal.Header className={styles.QueryControls}>\n+              <QueryEditModeContext.Provider value=\"widget\">\n+                <HeaderElements />\n+                <WidgetQueryControls widget={widget} />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2NzMwNA=="}, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzkyMjA1OnYy", "diffSide": "LEFT", "path": "graylog2-web-interface/src/views/components/WidgetQueryControls.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDoxNDoyM1rOHV8PEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo1NjowOVrOHX7DBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2OTA0MA==", "bodyText": "The widget prop can also be removed in WidgetQueryControls.test.jsx", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r492769040", "createdAt": "2020-09-22T14:14:23Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/WidgetQueryControls.jsx", "diffHunk": "@@ -11,29 +10,22 @@ import DocumentationLink from 'components/support/DocumentationLink';\n import DocsHelper from 'util/DocsHelper';\n import Button from 'components/graylog/Button';\n import TopRow from 'views/components/searchbar/TopRow';\n-import Widget from 'views/logic/widgets/Widget';\n import { StreamsStore } from 'views/stores/StreamsStore';\n import { SearchConfigStore } from 'views/stores/SearchConfigStore';\n-import { WidgetActions } from 'views/stores/WidgetStore';\n import { GlobalOverrideActions, GlobalOverrideStore } from 'views/stores/GlobalOverrideStore';\n import GlobalOverride from 'views/logic/search/GlobalOverride';\n import SearchActions from 'views/actions/SearchActions';\n-import { createElasticsearchQueryString } from 'views/logic/queries/Query';\n \n import TimeRangeTypeSelector from './searchbar/TimeRangeTypeSelector';\n import TimeRangeInput from './searchbar/TimeRangeInput';\n import StreamsFilter from './searchbar/StreamsFilter';\n import SearchButton from './searchbar/SearchButton';\n import QueryInput from './searchbar/AsyncQueryInput';\n-import SearchBarForm from './searchbar/SearchBarForm';\n-\n-import { DEFAULT_TIMERANGE } from '../Constants';\n \n type Props = {\n   availableStreams: Array<any>,\n   config: any,\n   globalOverride: ?GlobalOverride,\n-  widget: Widget,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NjcyNQ==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r494846725", "createdAt": "2020-09-25T08:56:09Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/WidgetQueryControls.jsx", "diffHunk": "@@ -11,29 +10,22 @@ import DocumentationLink from 'components/support/DocumentationLink';\n import DocsHelper from 'util/DocsHelper';\n import Button from 'components/graylog/Button';\n import TopRow from 'views/components/searchbar/TopRow';\n-import Widget from 'views/logic/widgets/Widget';\n import { StreamsStore } from 'views/stores/StreamsStore';\n import { SearchConfigStore } from 'views/stores/SearchConfigStore';\n-import { WidgetActions } from 'views/stores/WidgetStore';\n import { GlobalOverrideActions, GlobalOverrideStore } from 'views/stores/GlobalOverrideStore';\n import GlobalOverride from 'views/logic/search/GlobalOverride';\n import SearchActions from 'views/actions/SearchActions';\n-import { createElasticsearchQueryString } from 'views/logic/queries/Query';\n \n import TimeRangeTypeSelector from './searchbar/TimeRangeTypeSelector';\n import TimeRangeInput from './searchbar/TimeRangeInput';\n import StreamsFilter from './searchbar/StreamsFilter';\n import SearchButton from './searchbar/SearchButton';\n import QueryInput from './searchbar/AsyncQueryInput';\n-import SearchBarForm from './searchbar/SearchBarForm';\n-\n-import { DEFAULT_TIMERANGE } from '../Constants';\n \n type Props = {\n   availableStreams: Array<any>,\n   config: any,\n   globalOverride: ?GlobalOverride,\n-  widget: Widget,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc2OTA0MA=="}, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mzk5MTY3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/SaveOrCancelButtons.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDoyODowN1rOHV86aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOTowNjoxNlrOHX7Yzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc4MDEzOQ==", "bodyText": "The current implementation does not work as expected (the behaviour on save did not changed), looks the reason is that dirty is missing in this array.", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r492780139", "createdAt": "2020-09-22T14:28:07Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/SaveOrCancelButtons.jsx", "diffHunk": "@@ -8,11 +10,22 @@ type Props = {\n   onFinish: () => void,\n };\n \n-const SaveOrCancelButtons = ({ onFinish, onCancel }: Props) => (\n-  <>\n-    <Button onClick={onFinish} bsStyle=\"primary\">Save</Button>\n-    <Button onClick={onCancel}>Cancel</Button>\n-  </>\n-);\n+const SaveOrCancelButtons = ({ onFinish, onCancel }: Props) => {\n+  const { handleSubmit, dirty } = useFormikContext();\n+  const _onFinish = useCallback((...args) => {\n+    if (handleSubmit && dirty) {\n+      handleSubmit();\n+    }\n+\n+    return onFinish(...args);\n+  }, [onFinish, handleSubmit]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg1MjMwMw==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r494852303", "createdAt": "2020-09-25T09:06:16Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/SaveOrCancelButtons.jsx", "diffHunk": "@@ -8,11 +10,22 @@ type Props = {\n   onFinish: () => void,\n };\n \n-const SaveOrCancelButtons = ({ onFinish, onCancel }: Props) => (\n-  <>\n-    <Button onClick={onFinish} bsStyle=\"primary\">Save</Button>\n-    <Button onClick={onCancel}>Cancel</Button>\n-  </>\n-);\n+const SaveOrCancelButtons = ({ onFinish, onCancel }: Props) => {\n+  const { handleSubmit, dirty } = useFormikContext();\n+  const _onFinish = useCallback((...args) => {\n+    if (handleSubmit && dirty) {\n+      handleSubmit();\n+    }\n+\n+    return onFinish(...args);\n+  }, [onFinish, handleSubmit]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc4MDEzOQ=="}, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDA4MzQ4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/WidgetQueryControls.test.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNDo0NjowNVrOHV9z_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODo1Nzo1OVrOHX7G7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5NDg3Nw==", "bodyText": "You can use DEFAULT_TIMERANGE from views/Contsants here.", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r492794877", "createdAt": "2020-09-22T14:46:05Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/WidgetQueryControls.test.jsx", "diffHunk": "@@ -58,11 +56,19 @@ describe('WidgetQueryControls', () => {\n   const emptyGlobalOverride = {};\n   const globalOverrideWithQuery = { query: { type: 'elasticsearch', query_string: 'source:foo' } };\n \n-  const renderSUT = (props = {}) => render(\n+  const Wrapper = ({ children }: { children: React.Node }) => (\n     <WrappingContainer>\n+      <SearchBarForm initialValues={{ timerange: { type: 'relative', range: 300 }, queryString: '', streams: [] }} onSubmit={() => {}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg0NzcyNQ==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/8985#discussion_r494847725", "createdAt": "2020-09-25T08:57:59Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/WidgetQueryControls.test.jsx", "diffHunk": "@@ -58,11 +56,19 @@ describe('WidgetQueryControls', () => {\n   const emptyGlobalOverride = {};\n   const globalOverrideWithQuery = { query: { type: 'elasticsearch', query_string: 'source:foo' } };\n \n-  const renderSUT = (props = {}) => render(\n+  const Wrapper = ({ children }: { children: React.Node }) => (\n     <WrappingContainer>\n+      <SearchBarForm initialValues={{ timerange: { type: 'relative', range: 300 }, queryString: '', streams: [] }} onSubmit={() => {}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjc5NDg3Nw=="}, "originalCommit": {"oid": "8392ba543e1388023177e4e2ff6ea5b65f6f64b6"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4491, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}