{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTE2Mjcy", "number": 8930, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyMDoyN1rOEpY2xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyNzo0NFrOEqw2ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODM0MzA5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/BackendCreate/GettingStarted.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyMDoyN1rOHbBwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyMzowOFrOHbB3Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMjQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      Beside the builtin authentication mechanisms like its internal user database or LDAP/Active Directory,\n          \n          \n            \n                      Beside the built-in authentication mechanisms like its internal user database or LDAP/Active Directory,", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498102473", "createdAt": "2020-10-01T09:20:27Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendCreate/GettingStarted.jsx", "diffHunk": "@@ -0,0 +1,32 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import { Row, Col } from 'components/graylog';\n+import { EmptyEntity } from 'components/common';\n+\n+import ServiceSelect from './ServiceSelect';\n+\n+type Props = {\n+  title?: string,\n+};\n+\n+const GettingStarted = ({ title }: Props) => (\n+  <Row className=\"content\">\n+    <Col md={6} mdOffset={3}>\n+      <EmptyEntity title={title}>\n+        <p>\n+          Beside the builtin authentication mechanisms like its internal user database or LDAP/Active Directory,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwNDA3NA==", "bodyText": "or built in. I am only sure that there is no builtin at least in my dictionaries \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498104074", "createdAt": "2020-10-01T09:23:08Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendCreate/GettingStarted.jsx", "diffHunk": "@@ -0,0 +1,32 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import { Row, Col } from 'components/graylog';\n+import { EmptyEntity } from 'components/common';\n+\n+import ServiceSelect from './ServiceSelect';\n+\n+type Props = {\n+  title?: string,\n+};\n+\n+const GettingStarted = ({ title }: Props) => (\n+  <Row className=\"content\">\n+    <Col md={6} mdOffset={3}>\n+      <EmptyEntity title={title}>\n+        <p>\n+          Beside the builtin authentication mechanisms like its internal user database or LDAP/Active Directory,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwMjQ3Mw=="}, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODM5ODU5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ServerConnectionTest.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTozNDoyOVrOHbCSpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODoxMjoxOFrOHc62Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODExMTE0MA==", "bodyText": "For some reason I do not know the catch did not catch my 404 (because there was no working backend). Which lead into an ever rotating spinner button. It is a minor issue but I wanted to mention it.", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498111140", "createdAt": "2020-10-01T09:34:29Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ServerConnectionTest.jsx", "diffHunk": "@@ -0,0 +1,68 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useState, useContext } from 'react';\n+\n+import type { LdapCreate } from 'logic/authentication/ldap/types';\n+import AuthenticationDomain from 'domainActions/authentication/AuthenticationDomain';\n+import { Button } from 'components/graylog';\n+import { Spinner } from 'components/common';\n+\n+import ConnectionErrors, { NotificationContainer } from './ConnectionErrors';\n+import BackendWizardContext from './contexts/BackendWizardContext';\n+\n+const _addRequiredRequestPayload = (formValues) => {\n+  const neccessaryAttributes = { ...formValues };\n+\n+  if (!neccessaryAttributes.config.user_search_base) {\n+    neccessaryAttributes.config.user_search_base = '';\n+  }\n+\n+  if (!neccessaryAttributes.config.user_search_pattern) {\n+    neccessaryAttributes.config.user_search_pattern = '';\n+  }\n+\n+  return neccessaryAttributes;\n+};\n+\n+type Props = {\n+  prepareSubmitPayload: () => LdapCreate,\n+};\n+\n+const ServerConnectionTest = ({ prepareSubmitPayload }: Props) => {\n+  const { authBackendMeta } = useContext(BackendWizardContext);\n+  const [{ loading, success, message, errors }, setConnectionStatus] = useState({ loading: false, success: false, message: undefined, errors: undefined });\n+\n+  const _handleConnectionCheck = () => {\n+    const payload = _addRequiredRequestPayload(prepareSubmitPayload());\n+\n+    setConnectionStatus({ loading: true, message: undefined, errors: undefined, success: false });\n+\n+    AuthenticationDomain.testConnection({ backend_configuration: payload, backend_id: authBackendMeta.backendId }).then((response) => {\n+      setConnectionStatus({ loading: false, message: response?.message, success: response?.success, errors: response?.errors });\n+    }).catch((error) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA4NjM0Ng==", "bodyText": "Maybe we can have a look together at this problem together? If it is reproducible. When I get a 404 it looks like this:", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r500086346", "createdAt": "2020-10-06T08:12:18Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ServerConnectionTest.jsx", "diffHunk": "@@ -0,0 +1,68 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useState, useContext } from 'react';\n+\n+import type { LdapCreate } from 'logic/authentication/ldap/types';\n+import AuthenticationDomain from 'domainActions/authentication/AuthenticationDomain';\n+import { Button } from 'components/graylog';\n+import { Spinner } from 'components/common';\n+\n+import ConnectionErrors, { NotificationContainer } from './ConnectionErrors';\n+import BackendWizardContext from './contexts/BackendWizardContext';\n+\n+const _addRequiredRequestPayload = (formValues) => {\n+  const neccessaryAttributes = { ...formValues };\n+\n+  if (!neccessaryAttributes.config.user_search_base) {\n+    neccessaryAttributes.config.user_search_base = '';\n+  }\n+\n+  if (!neccessaryAttributes.config.user_search_pattern) {\n+    neccessaryAttributes.config.user_search_pattern = '';\n+  }\n+\n+  return neccessaryAttributes;\n+};\n+\n+type Props = {\n+  prepareSubmitPayload: () => LdapCreate,\n+};\n+\n+const ServerConnectionTest = ({ prepareSubmitPayload }: Props) => {\n+  const { authBackendMeta } = useContext(BackendWizardContext);\n+  const [{ loading, success, message, errors }, setConnectionStatus] = useState({ loading: false, success: false, message: undefined, errors: undefined });\n+\n+  const _handleConnectionCheck = () => {\n+    const payload = _addRequiredRequestPayload(prepareSubmitPayload());\n+\n+    setConnectionStatus({ loading: true, message: undefined, errors: undefined, success: false });\n+\n+    AuthenticationDomain.testConnection({ backend_configuration: payload, backend_id: authBackendMeta.backendId }).then((response) => {\n+      setConnectionStatus({ loading: false, message: response?.message, success: response?.success, errors: response?.errors });\n+    }).catch((error) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODExMTE0MA=="}, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODQ0NTc5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ConnectionErrors.jsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOTo0NzowMVrOHbCvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDozMTo0M1rOHdKGog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODExODU3NA==", "bodyText": "I do not know how it look right now, since I am not that advanced in testing, but I would recommend to do the error message in a mono font.", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498118574", "createdAt": "2020-10-01T09:47:01Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ConnectionErrors.jsx", "diffHunk": "@@ -0,0 +1,48 @@\n+// @flow strict\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import styled, { type StyledComponent } from 'styled-components';\n+\n+import type { ThemeInterface } from 'theme';\n+import { Alert } from 'components/graylog';\n+\n+export const NotificationContainer: StyledComponent<{}, ThemeInterface, Alert> = styled(Alert)`\n+  margin-top: 10px;\n+`;\n+\n+const ErrorsTitle = styled.div`\n+  font-weight: bold;\n+  margin-bottom: 5px;\n+`;\n+\n+const ErrorsList = styled.ul`\n+  list-style: initial;\n+  padding-left: 20px;\n+`;\n+\n+type Props = {\n+  errors: Array<string>,\n+  message: string,\n+};\n+\n+const ConnectionErrors = ({ errors, message }: Props) => (\n+  <NotificationContainer bsStyle=\"danger\">\n+    <ErrorsTitle>{message}</ErrorsTitle>\n+    <ErrorsList>\n+      {errors.map((error) => {\n+        return <li key={error}>{error}</li>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3MTAyOA==", "bodyText": "I am not against using a mono font, but in all other error cases I found we are using the default font.", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r500071028", "createdAt": "2020-10-06T07:46:21Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ConnectionErrors.jsx", "diffHunk": "@@ -0,0 +1,48 @@\n+// @flow strict\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import styled, { type StyledComponent } from 'styled-components';\n+\n+import type { ThemeInterface } from 'theme';\n+import { Alert } from 'components/graylog';\n+\n+export const NotificationContainer: StyledComponent<{}, ThemeInterface, Alert> = styled(Alert)`\n+  margin-top: 10px;\n+`;\n+\n+const ErrorsTitle = styled.div`\n+  font-weight: bold;\n+  margin-bottom: 5px;\n+`;\n+\n+const ErrorsList = styled.ul`\n+  list-style: initial;\n+  padding-left: 20px;\n+`;\n+\n+type Props = {\n+  errors: Array<string>,\n+  message: string,\n+};\n+\n+const ConnectionErrors = ({ errors, message }: Props) => (\n+  <NotificationContainer bsStyle=\"danger\">\n+    <ErrorsTitle>{message}</ErrorsTitle>\n+    <ErrorsList>\n+      {errors.map((error) => {\n+        return <li key={error}>{error}</li>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODExODU3NA=="}, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzNjI5MA==", "bodyText": "As it might be, here we are displaying raw data. It is not created in the frontend but in the backend. We might not even know how it looks, because it might be different depending on our authentication server we try to test again:\nSo I prefer:\n\nover this:", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r500336290", "createdAt": "2020-10-06T14:31:43Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/ConnectionErrors.jsx", "diffHunk": "@@ -0,0 +1,48 @@\n+// @flow strict\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import styled, { type StyledComponent } from 'styled-components';\n+\n+import type { ThemeInterface } from 'theme';\n+import { Alert } from 'components/graylog';\n+\n+export const NotificationContainer: StyledComponent<{}, ThemeInterface, Alert> = styled(Alert)`\n+  margin-top: 10px;\n+`;\n+\n+const ErrorsTitle = styled.div`\n+  font-weight: bold;\n+  margin-bottom: 5px;\n+`;\n+\n+const ErrorsList = styled.ul`\n+  list-style: initial;\n+  padding-left: 20px;\n+`;\n+\n+type Props = {\n+  errors: Array<string>,\n+  message: string,\n+};\n+\n+const ConnectionErrors = ({ errors, message }: Props) => (\n+  <NotificationContainer bsStyle=\"danger\">\n+    <ErrorsTitle>{message}</ErrorsTitle>\n+    <ErrorsList>\n+      {errors.map((error) => {\n+        return <li key={error}>{error}</li>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODExODU3NA=="}, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODY1MzU3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/activeDirectory/BackendCreate.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDo0NDoyNlrOHbEtOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzo0NzoxNVrOHc58Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MDcxMg==", "bodyText": "This is a bit awkward, that you define it here but never use it in this component. Perhaps move it to its own file. What do you think?", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498150712", "createdAt": "2020-10-01T10:44:26Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/activeDirectory/BackendCreate.jsx", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import { DocumentTitle } from 'components/common';\n+import BackendWizard from 'components/authentication/BackendWizard';\n+import AuthenticationDomain from 'domainActions/authentication/AuthenticationDomain';\n+\n+import WizardPageHeader from './WizardPageHeader';\n+\n+export const HELP = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3MTQ5MQ==", "bodyText": "I missed this one, thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r500071491", "createdAt": "2020-10-06T07:47:15Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/authentication/activeDirectory/BackendCreate.jsx", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import { DocumentTitle } from 'components/common';\n+import BackendWizard from 'components/authentication/BackendWizard';\n+import AuthenticationDomain from 'domainActions/authentication/AuthenticationDomain';\n+\n+import WizardPageHeader from './WizardPageHeader';\n+\n+export const HELP = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MDcxMg=="}, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODY2MTg5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/hooks.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMDo0NzowNVrOHbEyNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzo1MTo0MlrOHc6GWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MTk4OQ==", "bodyText": "Love it \ud83d\udc9f . But avoid having a hooks file. Do for every hook its own file. But perhaps a hooks folder?", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498151989", "createdAt": "2020-10-01T10:47:05Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/hooks.js", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA3NDA3Mg==", "bodyText": "Good point, having a look at comparable cases, I named the file useActiveBackend.js. I would create a hooks directory if we need to add more hooks.", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r500074072", "createdAt": "2020-10-06T07:51:42Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/authentication/hooks.js", "diffHunk": "@@ -0,0 +1,34 @@\n+// @flow strict", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODE1MTk4OQ=="}, "originalCommit": {"oid": "87b949ce8b3ffc25ae7d0b47ab9bebb1da620aca"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTk2ODI2OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/BackendWizard/BackendWizard.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODozNDoyOVrOHbldHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODozNDoyOVrOHbldHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4NzI2MA==", "bodyText": "Please do not document compact if someone does not know what compact does he should google it and learn something.", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498687260", "createdAt": "2020-10-02T08:34:29Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/BackendWizard.jsx", "diffHunk": "@@ -0,0 +1,235 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useState, useRef } from 'react';\n+import { compact } from 'lodash';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+\n+import Routes from 'routing/Routes';\n+import { validateField } from 'util/FormsUtils';\n+import history from 'util/History';\n+import type { LdapCreate } from 'logic/authentication/ldap/types';\n+import { Row, Col, Alert } from 'components/graylog';\n+import Wizard, { type Step } from 'components/common/Wizard';\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import BackendWizardContext, { type WizardStepsState, type WizardFormValues, type AuthBackendMeta } from './contexts/BackendWizardContext';\n+import { FORM_VALIDATION as SERVER_CONFIG_VALIDATION, STEP_KEY as SERVER_CONFIG_KEY } from './ServerConfigStep';\n+import { FORM_VALIDATION as USER_SYNC_VALIDATION, STEP_KEY as USER_SYNC_KEY } from './UserSyncStep';\n+import { STEP_KEY as GROUP_SYNC_KEY } from './GroupSyncStep';\n+import wizardSteps from './wizardSteps';\n+import Sidebar from './Sidebar';\n+\n+const FORMS_VALIDATION = {\n+  [SERVER_CONFIG_KEY]: SERVER_CONFIG_VALIDATION,\n+  [USER_SYNC_KEY]: USER_SYNC_VALIDATION,\n+};\n+\n+const SubmitAllError = ({ error, backendId }: { error: FetchError, backendId: ?string }) => (\n+  <Row>\n+    <Col xs={9} xsOffset={3}>\n+      <Alert bsStyle=\"danger\" style={{ wordBreak: 'break-word' }}>\n+        <b>Failed to {backendId ? 'edit' : 'create'} authentication service</b><br />\n+        {error?.message && <>{error.message}<br /><br /></>}\n+        {error?.additional?.res?.text}\n+      </Alert>\n+    </Col>\n+  </Row>\n+);\n+\n+const _prepareSubmitPayload = (stepsState, getUpdatedFormsValues) => (overrideFormValues) => {\n+  // We need to ensure that we are using the actual form values\n+  // It is possible to provide already updated form values, so we do not need to get them twice\n+  const formValues = overrideFormValues ?? getUpdatedFormsValues();\n+  const {\n+    defaultRoles = '',\n+    serverUrlHost,\n+    serverUrlPort,\n+    systemUserDn,\n+    systemUserPassword,\n+    transportSecurity,\n+    userFullNameAttribute,\n+    userNameAttribute,\n+    userSearchBase,\n+    userSearchPattern,\n+    verifyCertificates,\n+  } = formValues;\n+  const {\n+    serviceTitle,\n+    serviceType,\n+    urlScheme,\n+  } = stepsState.authBackendMeta;\n+  const serverUrl = `${new URI('').host(serverUrlHost).port(serverUrlPort).scheme(urlScheme)}`;\n+\n+  return {\n+    default_roles: defaultRoles.split(','),\n+    description: '',\n+    title: `${serviceTitle} ${serverUrl}`,\n+    config: {\n+      server_urls: [serverUrl],\n+      system_user_dn: systemUserDn,\n+      system_user_password: systemUserPassword,\n+      transport_security: transportSecurity,\n+      type: serviceType,\n+      user_full_name_attribute: userFullNameAttribute,\n+      user_name_attribute: userNameAttribute,\n+      user_search_base: userSearchBase,\n+      user_search_pattern: userSearchPattern,\n+      verify_certificates: verifyCertificates,\n+    },\n+  };\n+};\n+\n+const _getInvalidStepKeys = (formValues) => {\n+  const invalidStepKeys = Object.entries(FORMS_VALIDATION).map(([stepKey, formValidation]) => {\n+    // $FlowFixMe formValidation is valid input for Object.entries\n+    const stepHasError = Object.entries(formValidation).some(([fieldName, fieldValidation]) => {\n+      return !!validateField(fieldValidation)(formValues?.[fieldName]);\n+    });\n+\n+    return stepHasError ? stepKey : undefined;\n+  });\n+\n+  // Remove undefined values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e33089ad75474ceed84f77638b0c5ea2b5d75e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjAxOTgxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/common/Section/SectionComponent.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo1MDoyOFrOHbl9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODo1MDoyOFrOHbl9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY5NTUyNg==", "bodyText": "*:not(:first-child)\nyour suggestion \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r498695526", "createdAt": "2020-10-02T08:50:28Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/common/Section/SectionComponent.jsx", "diffHunk": "@@ -10,28 +10,47 @@ type Props = {\n   children: React.Node,\n   title: string,\n   showLoading?: boolean,\n+  headerActions?: React.Node,\n };\n \n+const Header = styled.div`\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: flex-start;\n+\n+  * + * {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14e33089ad75474ceed84f77638b0c5ea2b5d75e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc2MDkwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/authentication/BackendWizard/UserLoginTest.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyNzo0NFrOHdJ3wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyNzo0NFrOHdJ3wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMjQ4MA==", "bodyText": "This should be from type password to hide the users password in the browser!", "url": "https://github.com/Graylog2/graylog2-server/pull/8930#discussion_r500332480", "createdAt": "2020-10-06T14:27:44Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/authentication/BackendWizard/UserLoginTest.jsx", "diffHunk": "@@ -0,0 +1,115 @@\n+// @flow strict\n+import * as React from 'react';\n+import { useState, useContext } from 'react';\n+import { Formik, Form } from 'formik';\n+\n+import type { LdapCreate } from 'logic/authentication/ldap/types';\n+import AuthenticationDomain from 'domainActions/authentication/AuthenticationDomain';\n+import { FormikInput, Spinner } from 'components/common';\n+import { Button, Row, Col } from 'components/graylog';\n+\n+import ConnectionErrors, { NotificationContainer } from './ConnectionErrors';\n+import BackendWizardContext from './contexts/BackendWizardContext';\n+\n+type Props = {\n+  prepareSubmitPayload: () => LdapCreate,\n+};\n+\n+const UserLoginTest = ({ prepareSubmitPayload }: Props) => {\n+  const { authBackendMeta } = useContext(BackendWizardContext);\n+  const initialLoginStatus = { loading: false, success: false, testFinished: false, result: {}, message: undefined, errors: [] };\n+  const [{ loading, testFinished, success, message, errors, result }, setLoginStatus] = useState(initialLoginStatus);\n+  const hasErrors = (errors && errors.length >= 1);\n+\n+  const _handleLoginTest = ({ username, password }) => {\n+    setLoginStatus({ ...initialLoginStatus, loading: true });\n+\n+    return AuthenticationDomain.testLogin({\n+      backend_configuration: prepareSubmitPayload(),\n+      user_login: { username, password },\n+      backend_id: authBackendMeta.backendId,\n+    }).then((response) => {\n+      if (response) {\n+        setLoginStatus({\n+          loading: false,\n+          testFinished: true,\n+          message: response.message,\n+          result: response.result,\n+          errors: response.errors,\n+          success: response.success,\n+        });\n+      }\n+    }).catch((error) => {\n+      const requestErrors = [error?.message, error?.additional?.res?.text];\n+      setLoginStatus({ loading: false, success: false, testFinished: true, result: {}, message: undefined, errors: requestErrors });\n+    });\n+  };\n+\n+  return (\n+    <>\n+      <p>\n+        Verify the settings by loading the entry for the given user name. If you omit the password, no authentication attempt will be made.\n+      </p>\n+      <Formik onSubmit={_handleLoginTest} initialValues={{ password: '', username: '' }}>\n+        <Form className=\"form\">\n+          <Row className=\"no-bm\">\n+            <Col sm={6}>\n+              <FormikInput label=\"Username\"\n+                           name=\"username\"\n+                           required />\n+            </Col>\n+            <Col sm={6}>\n+              <FormikInput label=\"Password\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4bd4823723d8bb7c0cb28b5ae9acd0bcd75785b"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4482, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}