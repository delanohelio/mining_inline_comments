{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjkxMDA4", "number": 7933, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1Mjo1N1rOD0SebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1Mjo1N1rOD0SebA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTU1MjQ0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/errors/ReportedError.test.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1Mjo1N1rOGJKHCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDo1Mjo1N1rOGJKHCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NjAwOA==", "bodyText": "After talking with @linuspahl, he chose queryByText because\n\nI had to use queryByText  because getByText  would throw \u201cUnable to find an element with the text:\u201d\n\nAfter looking into queryBy and getBy it appears to me we should be using queryBy in these other tests as well since getBy will never return null, so the test will always succeed in not.toBeNull()", "url": "https://github.com/Graylog2/graylog2-server/pull/7933#discussion_r412256008", "createdAt": "2020-04-21T14:52:57Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/errors/ReportedError.test.jsx", "diffHunk": "@@ -50,25 +50,24 @@ describe('ReportedError', () => {\n   });\n \n   it('displays runtime error page when react error got reported', async () => {\n-    const { getByText } = render(<ReportedError router={router}>Hello World!</ReportedError>);\n+    const { getByText, queryByText } = render(<ReportedError router={router}>Hello World!</ReportedError>);\n \n     suppressConsole(() => {\n       ErrorsActions.report(createReactError(new Error('The error message'), { componentStack: 'The component stack' }));\n     });\n-\n-    await waitForElementToBeRemoved(() => getByText('Hello World!'));\n+    await wait(() => expect(queryByText('Hello World!')).toBeNull());\n     await wait(() => expect(getByText('Something went wrong.')).not.toBeNull());\n     await wait(() => expect(getByText('The error message')).not.toBeNull());\n   });\n \n   it('displays unauthorized error page when unauthorized error got reported', async () => {\n-    const { getByText } = render(<ReportedError router={router}>Hello World!</ReportedError>);\n+    const { getByText, queryByText } = render(<ReportedError router={router}>Hello World!</ReportedError>);\n \n     suppressConsole(() => {\n       ErrorsActions.report(createUnauthorizedError(new FetchError('The request error message', new Error('The request error message'))));\n     });\n \n-    await waitForElementToBeRemoved(() => getByText('Hello World!'));\n+    await wait(() => expect(queryByText('Hello World!')).toBeNull());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90d713ea41a9ba8451fe1c03fd8f14bfa8aafcda"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3728, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}