{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMzQ0MjEx", "number": 7561, "title": "Add API integration tests", "bodyText": "This PR enables API integration tests by leveraging our existing testcontainers for MongoDB and Elasticsearch and adding one for the graylog server.\n\n Add Dockerfile for server by copying and adapting the one defined in https://github.com/Graylog2/graylog-docker/blob/3.2/Dockerfile\n Allow start as single node (multi node cluster is out of scope here, but can be added later)\n Load default plugins\n Integrate with Elasticsearch\n Integrate with MongoDB\n Load Sigar lib from project files\n mount jars into container instead of baking them into the image\n Run from Maven as extra step after package\n Build jars just in time when running single test from IDE\n Use existing graylog.conf project file instead of a copy\n Use existing log4j2.xml instead of a copy\n Use current version of restassured instead of the same one used in old integration tests\n Clarify if we can use an official Dockerfile instead of maintaining a copy just for the tests\n Allow use of Elasticsearch fixtures\n Allow debugging of server in container\n Write Readme\n Create issue for removing old integration tests\n Create issue for refactoring MongoDb and Elasticsearch test classes to separate the JUnit 4 & 5 integration from container lifecycle management\n\nFixes #7461", "createdAt": "2020-02-26T15:21:19Z", "url": "https://github.com/Graylog2/graylog2-server/pull/7561", "merged": true, "mergeCommit": {"oid": "d34c124d7a6f7d38c482c0924503e4868288df55"}, "closed": true, "closedAt": "2020-03-26T11:45:38Z", "author": {"login": "alex-konn"}, "timelineItems": {"totalCount": 64, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIwPdGABqjMwODIwMDk0NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRanTDgFqTM4MTkyODM5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a664c9e7844ac390db0f21159c4e1cc308b905ef", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a664c9e7844ac390db0f21159c4e1cc308b905ef", "committedDate": "2020-02-27T18:15:27Z", "message": "Mvn package server when executing tests from Intellij"}, "afterCommit": {"oid": "eb54fd26a490ae6dd2e860064248b5accc9e9abc", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/eb54fd26a490ae6dd2e860064248b5accc9e9abc", "committedDate": "2020-02-28T13:47:19Z", "message": "Add explanatory comments for permissions workarounds"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb54fd26a490ae6dd2e860064248b5accc9e9abc", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/eb54fd26a490ae6dd2e860064248b5accc9e9abc", "committedDate": "2020-02-28T13:47:19Z", "message": "Add explanatory comments for permissions workarounds"}, "afterCommit": {"oid": "fce2eb3ed5ed848f78abc454db895c170a30a17c", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/fce2eb3ed5ed848f78abc454db895c170a30a17c", "committedDate": "2020-03-03T11:48:42Z", "message": "Move full backend test to separate module\n\n- Created new module full-backend-tests\n- Run all tests in module with failsafe, not surefire,\n  to ensure that they only run on `mvn verify`.\n  This allows running `mvn package` without running\n  these slow tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4fc5b845c7a5794b379edd8857b2dd551325956", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f4fc5b845c7a5794b379edd8857b2dd551325956", "committedDate": "2020-03-03T15:55:51Z", "message": "Disable failsafe integration tests on travis explicitly\n\n`-Dmaven.test.skip=true` was not enough in the second `after_success`\nstep."}, "afterCommit": {"oid": "94c8149430077297f6cecdf3c8fe1f4cf22fd023", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/94c8149430077297f6cecdf3c8fe1f4cf22fd023", "committedDate": "2020-03-03T16:15:43Z", "message": "Disable failsafe integration tests on travis explicitly\n\n`-Dmaven.test.skip=true` was not enough in the second `after_success` step."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94c8149430077297f6cecdf3c8fe1f4cf22fd023", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/94c8149430077297f6cecdf3c8fe1f4cf22fd023", "committedDate": "2020-03-03T16:15:43Z", "message": "Disable failsafe integration tests on travis explicitly\n\n`-Dmaven.test.skip=true` was not enough in the second `after_success` step."}, "afterCommit": {"oid": "432ed5d89a81356a84f5d4c5018a29b8b452ecc2", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/432ed5d89a81356a84f5d4c5018a29b8b452ecc2", "committedDate": "2020-03-04T14:52:37Z", "message": "Avoid recreating containers for GraylogBackend per test class\n\nConverted GraylogBackend to singleton. This ensures that images\nand containers can reused globally."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1fb1f650733c622309ac9c1a6ee555f8a4a9151", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a1fb1f650733c622309ac9c1a6ee555f8a4a9151", "committedDate": "2020-03-05T13:17:22Z", "message": "Upgrade rest-assured to 4.2.0"}, "afterCommit": {"oid": "41ddabab41031bb117d02e0c9a43668df10a681d", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/41ddabab41031bb117d02e0c9a43668df10a681d", "committedDate": "2020-03-06T15:36:43Z", "message": "Allow remote debugging of graylog server\n\nThis allows to attach a remote debugger to the server container.\nThe biggest caveat is that the dynamic port to which the debugger can be\nattached is only known after starting the container. Hence one would\nhave to set a breakpoint after the container start to pause execution,\nidentify the debug port and start the remote debugger with it.\n\n- Added debug toggle via env var GRAYLOG_IT_DEBUG_SERVER\n- Added optional debug build arg to container\n- Added logging of debug port, if debugging is enabled\n- Extracted building the container to NodeContainerFactory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c1732c2eb699d4a05ecd87decfea5bbeb41d24e", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7c1732c2eb699d4a05ecd87decfea5bbeb41d24e", "committedDate": "2020-03-06T17:33:04Z", "message": "Enable Elasticsearch fixtures"}, "afterCommit": {"oid": "3e83b02aeb2488aeb1d3badd359d3cd0f7eac41b", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3e83b02aeb2488aeb1d3badd359d3cd0f7eac41b", "committedDate": "2020-03-09T13:32:36Z", "message": "Added param object NodeContainerConfig"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NjA2OTky", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#pullrequestreview-378606992", "createdAt": "2020-03-20T15:55:29Z", "commit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNTo1NToyOVrOF5Ziqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowOTo1M1rOF63yvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMTYyNg==", "bodyText": "This assumption is not correct, unfortunately. On some occasions the Graylog node will stop when MongoDB is not available.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r395731626", "createdAt": "2020-03-20T15:55:29Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackend.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.graylog.testing.elasticsearch.ElasticsearchInstance;\n+import org.graylog.testing.graylognode.NodeInstance;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+\n+public class GraylogBackend {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GraylogBackend.class);\n+    private final ElasticsearchInstance es;\n+    private final MongoDBInstance mongodb;\n+    private final NodeInstance node;\n+\n+    private static GraylogBackend instance;\n+\n+    public static GraylogBackend createStarted() {\n+        if (instance == null)\n+            instance = createStartedBackend();\n+        else {\n+            instance.fullReset();\n+            LOG.info(\"Reusing running backend\");\n+        }\n+\n+        return instance;\n+    }\n+\n+    // Assuming that parallel start works, because\n+    // - mongodb and es are independent\n+    // - node will retry connections to mongodb and es until they are there", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczMjUzOA==", "bodyText": "We usually use {} around if statements.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r395732538", "createdAt": "2020-03-20T15:56:52Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackendExtension.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import com.google.common.base.Stopwatch;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ParameterContext;\n+import org.junit.jupiter.api.extension.ParameterResolutionException;\n+import org.junit.jupiter.api.extension.ParameterResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.junit.jupiter.api.extension.ExtensionContext.Namespace;\n+\n+\n+public class GraylogBackendExtension implements AfterEachCallback, BeforeAllCallback, ParameterResolver {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GraylogBackendExtension.class);\n+    private static final Namespace NAMESPACE = Namespace.create(GraylogBackendExtension.class);\n+\n+    private GraylogBackend backend;\n+    private Lifecycle lifecycle;\n+\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        lifecycle = Lifecycle.from(context);\n+\n+        backend = GraylogBackend.createStarted();\n+\n+        context.getStore(NAMESPACE).put(context.getRequiredTestClass().getName(), backend);\n+\n+        sw.stop();\n+\n+        LOG.info(\"Backend started after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+    }\n+\n+    @Override\n+    public void afterEach(ExtensionContext context) {\n+        if (context.getExecutionException().isPresent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTczODEwOA==", "bodyText": "We usually add {} around all if statements.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r395738108", "createdAt": "2020-03-20T16:05:33Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyOTY4NA==", "bodyText": "Please use braces {} in conditional statements, thanks! \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397229684", "createdAt": "2020-03-24T15:11:58Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/GraylogBackend.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.graylog.testing.elasticsearch.ElasticsearchInstance;\n+import org.graylog.testing.graylognode.NodeInstance;\n+import org.graylog.testing.mongodb.MongoDBInstance;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.Network;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.FutureTask;\n+\n+public class GraylogBackend {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GraylogBackend.class);\n+    private final ElasticsearchInstance es;\n+    private final MongoDBInstance mongodb;\n+    private final NodeInstance node;\n+\n+    private static GraylogBackend instance;\n+\n+    public static GraylogBackend createStarted() {\n+        if (instance == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjIyNw==", "bodyText": "How about using .basePath() and .baseUri() here? That would allow us to use .get(\"/system/plugins\") in the test without having to use string concatenation all the time.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397232227", "createdAt": "2020-03-24T15:15:11Z", "author": {"login": "bernd"}, "path": "full-backend-tests/src/test/java/org/graylog/testing/fullbackend/BackendStartupIT.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.fullbackend;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.google.common.collect.ImmutableSet;\n+import io.restassured.RestAssured;\n+import io.restassured.builder.RequestSpecBuilder;\n+import org.graylog.plugins.views.search.Query;\n+import org.graylog.plugins.views.search.Search;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.searchtypes.MessageList;\n+import org.graylog.testing.completebackend.ApiIntegrationTest;\n+import org.graylog.testing.completebackend.GraylogBackend;\n+import org.graylog2.plugin.indexer.searches.timeranges.AbsoluteRange;\n+import org.graylog2.plugin.indexer.searches.timeranges.InvalidRangeParametersException;\n+import org.graylog2.shared.bindings.providers.ObjectMapperProvider;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.List;\n+\n+import static io.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.when;\n+import static io.restassured.http.ContentType.JSON;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.graylog.testing.completebackend.Lifecycle.CLASS;\n+\n+\n+@ApiIntegrationTest(serverLifecycle = CLASS)\n+class BackendStartupIT {\n+\n+    private final GraylogBackend sut;\n+\n+    public BackendStartupIT(GraylogBackend sut) {\n+        this.sut = sut;\n+    }\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();\n+        RestAssured.requestSpecification =\n+                new RequestSpecBuilder().build()\n+                        .accept(JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzODQyNg==", "bodyText": "I think this could use some javadoc. \ud83d\ude04 I guess this is one of the classes/annontations that test writers will lookup a lot.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397238426", "createdAt": "2020-03-24T15:23:03Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/ApiIntegrationTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import org.junit.jupiter.api.Tag;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+@Target({TYPE, METHOD})\n+@ExtendWith(GraylogBackendExtension.class)\n+@Retention(RUNTIME)\n+@Tag(\"integration\")\n+public @interface ApiIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzOTk5Mg==", "bodyText": "Same as for the ApiIntegrationTest class, I think we should document the different enum values here and describe what they are doing.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397239992", "createdAt": "2020-03-24T15:25:00Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/completebackend/Lifecycle.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.completebackend;\n+\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+\n+import java.util.Optional;\n+\n+public enum Lifecycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjM2Ng==", "bodyText": "Excluding the javadoc build might improve performance a tiny bit: (not tested yet)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n          \n          \n            \n                private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true -Dmaven.javadoc.skip=true\";", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397242366", "createdAt": "2020-03-24T15:27:57Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MjgyOA==", "bodyText": "Can you please add a small comment why this indicates that we are running from maven? Thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397242828", "createdAt": "2020-03-24T15:28:36Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NDAyMg==", "bodyText": "Nitpick: you could use value placeholder to avoid string concatenation\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n          \n          \n            \n                    LOG.info(\"Finished packaging after {} seconds\", sw.elapsed(TimeUnit.SECONDS));", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397244022", "createdAt": "2020-03-24T15:30:04Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NDk5Nw==", "bodyText": "What do you think about adding the MVN_COMMAND to the error message? Could be useful for debugging.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397244997", "createdAt": "2020-03-24T15:31:18Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+\n+        ensureZeroExitCode(p, exitCode);\n+    }\n+\n+    private static int waitForExit(Process p) {\n+        try {\n+            return p.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process for mvn package was interrupted\", e);\n+        }\n+    }\n+\n+    private static Process startProcess(String pomDir) {\n+        try {\n+            return new ProcessBuilder().command(\"sh\", \"-c\", MVN_COMMAND).directory(new File(pomDir)).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to start process for mvn package\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NTM0OA==", "bodyText": "What do you think about adding the MVN_COMMAND to the error message? Could be useful for debugging.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397245348", "createdAt": "2020-03-24T15:31:49Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/MavenPackager.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import com.google.common.base.Stopwatch;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MavenPackager {\n+    private static final Logger LOG = LoggerFactory.getLogger(MavenPackager.class);\n+    private static final String MVN_COMMAND = \"mvn package -DskipTests -Dskip.web.build -Dforbiddenapis.skip=true\";\n+\n+    static void packageJarIfNecessary(String projectDir) {\n+        if (isRunFromMaven()) {\n+            LOG.info(\"Running from Maven. Assuming jars are current.\");\n+        } else {\n+            LOG.info(\"Running from outside Maven. Packaging server jar now...\");\n+            MavenPackager.packageJar(projectDir);\n+        }\n+    }\n+\n+    private static boolean isRunFromMaven() {\n+        return System.getProperty(\"surefire.test.class.path\") != null;\n+    }\n+\n+    static void packageJar(String pomDir) {\n+        Process p = startProcess(pomDir);\n+\n+        Stopwatch sw = Stopwatch.createStarted();\n+\n+        int exitCode = waitForExit(p);\n+\n+        sw.stop();\n+        LOG.info(\"Finished packaging after \" + sw.elapsed(TimeUnit.SECONDS) + \" seconds\");\n+\n+        ensureZeroExitCode(p, exitCode);\n+    }\n+\n+    private static int waitForExit(Process p) {\n+        try {\n+            return p.waitFor();\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Process for mvn package was interrupted\", e);\n+        }\n+    }\n+\n+    private static Process startProcess(String pomDir) {\n+        try {\n+            return new ProcessBuilder().command(\"sh\", \"-c\", MVN_COMMAND).directory(new File(pomDir)).start();\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to start process for mvn package\", e);\n+        }\n+    }\n+\n+    private static void ensureZeroExitCode(Process p, int exitCode) {\n+        if (exitCode > 0) {\n+            new BufferedReader(new InputStreamReader(p.getInputStream(), Charset.defaultCharset())).lines()\n+                    .forEach(System.out::println);\n+\n+            throw new RuntimeException(\"mvn package exited with \" + exitCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NjY2Ng==", "bodyText": "We usually use braces {} around conditionals.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397246666", "createdAt": "2020-03-24T15:33:22Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODE1NQ==", "bodyText": "Do we want to use API_PORT here instead of hardcoding the port?", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397248155", "createdAt": "2020-03-24T15:35:14Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)\n+                .withEnv(\"GRAYLOG_ELASTICSEARCH_HOSTS\", config.elasticsearchUri)\n+                .withEnv(\"GRAYLOG_PASSWORD_SECRET\", \"M4lteserKreuzHerrStrack?\")\n+                .withEnv(\"GRAYLOG_NODE_ID_FILE\", \"data/config/node-id\")\n+                .withEnv(\"GRAYLOG_HTTP_BIND_ADDRESS\", \"0.0.0.0:9000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2MTI2NQ==", "bodyText": "Can you please write down the plain text password in a comment? Could be useful for debugging.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397261265", "createdAt": "2020-03-24T15:51:36Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NDY1Mw==", "bodyText": "We can add GRAYLOG_LB_RECOGNITION_PERIOD_SECONDS=0 here. That saves 3 seconds on each server shutdown. \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397264653", "createdAt": "2020-03-24T15:55:48Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NTE3OQ==", "bodyText": "We should also add GRAYLOG_VERSIONCHECKS=false to make sure the test server doesn't call out to our versioncheck API service.", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397265179", "createdAt": "2020-03-24T15:56:28Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/NodeContainerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.graylog.testing.PropertyLoader;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import static org.graylog.testing.graylognode.ResourceUtil.resourceToTmpFile;\n+\n+public class NodeContainerFactory {\n+    private static final Logger LOG = LoggerFactory.getLogger(NodeContainerFactory.class);\n+\n+    @SuppressWarnings(\"OctalInteger\")\n+    private static final int EXECUTABLE_MODE = 0100755;\n+    private static final String ADMIN_PW_SHA2 = \"8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918\";\n+    private static final int API_PORT = 9000;\n+    private static final int DEBUG_PORT = 5005;\n+\n+    public static GenericContainer<?> buildContainer(NodeContainerConfig config) {\n+        if (!config.skipPackaging)\n+            MavenPackager.packageJarIfNecessary(property(\"server_project_dir\"));\n+        else\n+            LOG.info(\"Skipping packaging\");\n+\n+        ImageFromDockerfile image = createImage(config);\n+\n+        return createRunningContainer(config, image);\n+    }\n+\n+    private static ImageFromDockerfile createImage(NodeContainerConfig config) {\n+        // testcontainers only allows passing permissions if you pass a `File`\n+        File entrypointScript = resourceToTmpFile(\"org/graylog/testing/graylognode/docker-entrypoint.sh\");\n+\n+        ImageFromDockerfile image = new ImageFromDockerfile()\n+                .withFileFromClasspath(\"Dockerfile\", \"org/graylog/testing/graylognode/Dockerfile\")\n+                // set mode here explicitly, because file system permissions can get lost when executing from maven\n+                .withFileFromFile(\"docker-entrypoint.sh\", entrypointScript, EXECUTABLE_MODE)\n+                .withFileFromPath(\"graylog.conf\", pathTo(\"graylog_config\"))\n+                .withFileFromClasspath(\"log4j2.xml\", \"log4j2.xml\")\n+                .withFileFromPath(\"sigar\", pathTo(\"sigar_dir\"));\n+        if (config.enableDebugging)\n+            image.withBuildArg(\"DEBUG_OPTS\", \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005\");\n+\n+        return image;\n+    }\n+\n+    private static GenericContainer<?> createRunningContainer(NodeContainerConfig config, ImageFromDockerfile image) {\n+        String graylogHome = \"/usr/share/graylog\";\n+\n+        GenericContainer<?> container = new GenericContainer<>(image)\n+                .withFileSystemBind(property(\"server_jar\"), graylogHome + \"/graylog.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"aws_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-aws.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"threatintel_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-threatintel.jar\", BindMode.READ_ONLY)\n+                .withFileSystemBind(property(\"collector_plugin_jar\"), graylogHome + \"/plugin/graylog-plugin-collector.jar\", BindMode.READ_ONLY)\n+                .withNetwork(config.network)\n+                .withEnv(\"GRAYLOG_MONGODB_URI\", config.mongoDbUri)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NDY1Mw=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI2NzY3NQ==", "bodyText": "Please use braces {} around conditionals. Thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397267675", "createdAt": "2020-03-24T15:59:31Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+public class ResourceUtil {\n+    static File resourceToTmpFile(@SuppressWarnings(\"SameParameterValue\") String resourceName) {\n+\n+        InputStream resource = ResourceUtil.class.getClassLoader().getResourceAsStream(resourceName);\n+\n+        if (resource == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MTIxMQ==", "bodyText": "Let's use File.createTempFile() here and File#deleteOnExit() to make sure we clean it up afterwards.\nLet's also use a descriptive name for the tempfile so people know what it is when seeing strange files in /tmp. \ud83d\ude09", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397271211", "createdAt": "2020-03-24T16:03:57Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog/testing/graylognode/ResourceUtil.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.testing.graylognode;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Paths;\n+import java.util.UUID;\n+\n+public class ResourceUtil {\n+    static File resourceToTmpFile(@SuppressWarnings(\"SameParameterValue\") String resourceName) {\n+\n+        InputStream resource = ResourceUtil.class.getClassLoader().getResourceAsStream(resourceName);\n+\n+        if (resource == null)\n+            throw new RuntimeException(\"Couldn't load resource \" + resourceName);\n+\n+        File f = new File(\"/tmp/\" + UUID.randomUUID().toString() + \"-\" + Paths.get(resourceName).getFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NDIyNA==", "bodyText": "Do we want to run these now? I thought the old integration tests are going away soon?", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397274224", "createdAt": "2020-03-24T16:07:56Z", "author": {"login": "bernd"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -37,10 +37,25 @@\n         <maven.javadoc.skip>true</maven.javadoc.skip>\n         <maven.install.skip>true</maven.install.skip>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <skip.integration.tests>true</skip.integration.tests>\n+        <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NTgzNw==", "bodyText": "Okay, you @Ignore all tests now. What's the reason for enabling the tests and then ignoring every test? \ud83d\ude03", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r397275837", "createdAt": "2020-03-24T16:09:53Z", "author": {"login": "bernd"}, "path": "integration-tests/pom.xml", "diffHunk": "@@ -37,10 +37,25 @@\n         <maven.javadoc.skip>true</maven.javadoc.skip>\n         <maven.install.skip>true</maven.install.skip>\n         <maven.deploy.skip>true</maven.deploy.skip>\n-        <skip.integration.tests>true</skip.integration.tests>\n+        <skip.integration.tests>false</skip.integration.tests>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NDIyNA=="}, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "197c9ba78d2b6c6f5e0bab54b58a9e44224bcb59", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/197c9ba78d2b6c6f5e0bab54b58a9e44224bcb59", "committedDate": "2020-03-25T15:04:39Z", "message": "Adding first spike with ngnix dummy\n\n`GraylogBackendExtension` should later control all involved containers,\nincluding graylog node(s), mongodb, and elasticsearch.\nFor now it controls only a dummy container as a placeholder for the a\ngraylog node."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a38e53907b4a42d59420aea966103b6ceee1c69e", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a38e53907b4a42d59420aea966103b6ceee1c69e", "committedDate": "2020-03-25T15:04:40Z", "message": "Copied Dockerfile from https://github.com/Graylog2/graylog-docker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "192c926109cd43b7acbd713f281410ea330a9b5e", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/192c926109cd43b7acbd713f281410ea330a9b5e", "committedDate": "2020-03-25T15:04:40Z", "message": "Start actual server in container\n\n- Manually unpacked tarball to local directory. This is a workaround to\n  enable focussing on container orchestration in JUnit for now. Will be\n  fixed later\n- Copied graylog.conf and log4j2.xml from\n  https://github.com/Graylog2/graylog-docker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "732f51d4b172ad714d8f00c90097ec939b16154f", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/732f51d4b172ad714d8f00c90097ec939b16154f", "committedDate": "2020-03-25T15:04:41Z", "message": "Add MongoDB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "553c6108a587f86bb55c011b9ef62c3bc4a25a32", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/553c6108a587f86bb55c011b9ef62c3bc4a25a32", "committedDate": "2020-03-25T15:04:41Z", "message": "Add ElasticSearch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e8fdc8e33e5d7225e045ade275789091cd83d4d", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/2e8fdc8e33e5d7225e045ade275789091cd83d4d", "committedDate": "2020-03-25T15:04:41Z", "message": "Fix ElasticsearchInstance so that existing IT still work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4966ccd005a1f992cd23fc0da75937c358e44be", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/d4966ccd005a1f992cd23fc0da75937c358e44be", "committedDate": "2020-03-25T15:04:42Z", "message": "Start containers in parallel to reduce startup time\n\nStartup time is now limited by the time it takes the server container to start. That can be optimized later."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef374226b0ab37b69f8dcb281724ed3992b660ee", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/ef374226b0ab37b69f8dcb281724ed3992b660ee", "committedDate": "2020-03-25T15:04:42Z", "message": "Moved container instances into GraylogBackend\n\nThis leads to a clean separation between managing containers (GraylogBackend)\nand junit integration (GraylogBackendExtension)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf9304c70de8faf2c54f9c5a3a0935e1e221d942", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/cf9304c70de8faf2c54f9c5a3a0935e1e221d942", "committedDate": "2020-03-25T15:04:42Z", "message": "Use real artifacts instead of relying on manually created ones\n\n- Take server jar from target folder\n- Take sigar lib from lib folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b19900e8827aae5014305d7634f1dc551cb097", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f7b19900e8827aae5014305d7634f1dc551cb097", "committedDate": "2020-03-25T15:04:43Z", "message": "Load default plugins\n\nThe definition of plugin jars in api-it-tests.properties is a bit verbose,\nbut I decided to leave it like this, because I think it's easier to understand\nthan dynamic generation of jar file locations in code.\nWe might still decide to make it more dynamic when enabling additional plugins."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb7b0b9aca1fae5f794560e658d581da821034d", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/dfb7b0b9aca1fae5f794560e658d581da821034d", "committedDate": "2020-03-25T15:04:43Z", "message": "Fix forbiddenapis errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da3e791595f228a9fa88eaa76fc38a1762d5389d", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/da3e791595f228a9fa88eaa76fc38a1762d5389d", "committedDate": "2020-03-25T15:04:43Z", "message": "Set permissions for docker-entrypoint.sh explicitly\n\nLocal filesystem permissions don't seem to be retained reliably"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636b66667b2e16a4dcfd945b338b56c1e2824b86", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/636b66667b2e16a4dcfd945b338b56c1e2824b86", "committedDate": "2020-03-25T15:04:43Z", "message": "Fix dumb mistake in NodeInstance#getApiAddress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f93203230375147714ef9cfc864106bf8d0a22f", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3f93203230375147714ef9cfc864106bf8d0a22f", "committedDate": "2020-03-25T15:04:44Z", "message": "Use URI instead of filename\n\n...because forbiddenapis says so."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b353eca3e77fd1f95409bb049e7ff7a281266316", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/b353eca3e77fd1f95409bb049e7ff7a281266316", "committedDate": "2020-03-25T15:04:44Z", "message": "Mvn package server when executing tests from Intellij"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e4fae25662c808e1d7dc03d32a405cea1cbe56", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/97e4fae25662c808e1d7dc03d32a405cea1cbe56", "committedDate": "2020-03-25T15:04:44Z", "message": "Move new integration tests to existing module\n\n- Moved the test class\n- Deactivated all old tests\n- Changed how docker-entrypoint.sh resource is converted to file\n  Before it went via URI, which doesn't work when executing tests\n  from a different module. Write resource to temp file instead,"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4df569f35218ac912d5ddbbe789b39c1e06c2f70", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/4df569f35218ac912d5ddbbe789b39c1e06c2f70", "committedDate": "2020-03-25T15:04:45Z", "message": "Add explanatory comments for permissions workarounds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b93e87d97fedeb5f41d810c229680880cdecd9", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f7b93e87d97fedeb5f41d810c229680880cdecd9", "committedDate": "2020-03-25T15:04:45Z", "message": "Mount jars into container instead of building into image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7029b3fcc87cf7f1e32979da8b9d301afefaa72f", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7029b3fcc87cf7f1e32979da8b9d301afefaa72f", "committedDate": "2020-03-25T15:04:45Z", "message": "Move full backend test to separate module\n\n- Created new module full-backend-tests\n- Run all tests in module with failsafe, not surefire,\n  to ensure that they only run on `mvn verify`.\n  This allows running `mvn package` without running\n  these slow tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2633a62394f03342b33e8beb30dfabe523287304", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/2633a62394f03342b33e8beb30dfabe523287304", "committedDate": "2020-03-25T15:04:46Z", "message": "Run only mvn package on travis\n\nTravis doesn't package plugins, so extra steps would  be needed to\nrun full backend tests.\nIt should be sufficient to run these tests only in the jenkins build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49eb1d1757e1bcabdde367c05a229d7cd7b9afff", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/49eb1d1757e1bcabdde367c05a229d7cd7b9afff", "committedDate": "2020-03-25T15:04:46Z", "message": "Disable failsafe integration tests on travis explicitly\n\n`-Dmaven.test.skip=true` was not enough in the second `after_success` step."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f1a211882042f2e93fdd63129911a88d161be43", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7f1a211882042f2e93fdd63129911a88d161be43", "committedDate": "2020-03-25T15:04:46Z", "message": "Add CLASS and METHOD lifecycle for backend\n\n- Added serverLifecycle property to ApiIntegrationTest annotation\n- default to METHOD where server is restarted after each test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c35eca8151b7367e3e3a590b5aab04f3dfd01a", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/93c35eca8151b7367e3e3a590b5aab04f3dfd01a", "committedDate": "2020-03-25T15:04:47Z", "message": "Avoid recreating containers for GraylogBackend per test class\n\nConverted GraylogBackend to singleton. This ensures that images\nand containers can reused globally."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5aa46c79f195d6d637fe91138d8129f89284ba8", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c5aa46c79f195d6d637fe91138d8129f89284ba8", "committedDate": "2020-03-25T15:04:47Z", "message": "Add license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ef0b0485cdcf85ecbf78e805f915957f1854cf8", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/9ef0b0485cdcf85ecbf78e805f915957f1854cf8", "committedDate": "2020-03-25T15:04:47Z", "message": "Use project graylog.conf instead of copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d423e7017dd8783642f2cec8b30914e7ec2e96a", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3d423e7017dd8783642f2cec8b30914e7ec2e96a", "committedDate": "2020-03-25T15:04:48Z", "message": "Use project log4j2.xml instead of copy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b003683534a8afccddea7e5c768ad00578550a3", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/4b003683534a8afccddea7e5c768ad00578550a3", "committedDate": "2020-03-25T15:04:48Z", "message": "Package jars when not running in Maven\n\n...instead of when running in Intellij explicitly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ec25197946a728701064ef2a9532d267afd0f0", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/40ec25197946a728701064ef2a9532d267afd0f0", "committedDate": "2020-03-25T15:04:48Z", "message": "Extract tmp file creation from NodeInstance\n\n- Added separate class ResourceUtil to extract this\n  detail from NodeInstance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a727ed213cfb86ece26c28e8a7c657d1ecdda685", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/a727ed213cfb86ece26c28e8a7c657d1ecdda685", "committedDate": "2020-03-25T15:04:49Z", "message": "Allow setting env var to skip packaging\n\n- Use existing jars, if env var GRAYLOG_IT_SKIP_PACKAGING\n  is set to \"true\" (ignoring case)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d8ba38f8c3c6e2f57e90769bf4631ca58d8e70b", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/1d8ba38f8c3c6e2f57e90769bf4631ca58d8e70b", "committedDate": "2020-03-25T15:04:49Z", "message": "Upgrade rest-assured to 4.2.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "845644f75d94af8dc9b6bd806e8db08c552bfc56", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/845644f75d94af8dc9b6bd806e8db08c552bfc56", "committedDate": "2020-03-25T15:04:49Z", "message": "Allow remote debugging of graylog server\n\nThis allows to attach a remote debugger to the server container.\nThe biggest caveat is that the dynamic port to which the debugger can be\nattached is only known after starting the container. Hence one would\nhave to set a breakpoint after the container start to pause execution,\nidentify the debug port and start the remote debugger with it.\n\n- Added debug toggle via env var GRAYLOG_IT_DEBUG_SERVER\n- Added optional debug build arg to container\n- Added logging of debug port, if debugging is enabled\n- Extracted building the container to NodeContainerFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45cb5b52661cbf0930d9b54c6891ec1e13e5cb11", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/45cb5b52661cbf0930d9b54c6891ec1e13e5cb11", "committedDate": "2020-03-25T15:04:50Z", "message": "Add license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c45df27f456d3911ec77fde7f2312605df709a6e", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c45df27f456d3911ec77fde7f2312605df709a6e", "committedDate": "2020-03-25T15:04:50Z", "message": "Disable purging data for Lifecycle.CLASS\n\nDoesn't work, because you can't wipe the mongodb from underneath a running server.\nTests failed, because all permissions were gone. But there would probably have been\neven more issues like that.\nSo when Lifecycle.CLASS is chosen, all data remains in the DBs across tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59dedf5850b1aaf43a1e20fc73759cf6eeba6eb", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c59dedf5850b1aaf43a1e20fc73759cf6eeba6eb", "committedDate": "2020-03-25T15:04:50Z", "message": "Enable Elasticsearch fixtures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "421b514ab2faafa26ed9c2c7cda8ba87dd2ba8b0", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/421b514ab2faafa26ed9c2c7cda8ba87dd2ba8b0", "committedDate": "2020-03-25T15:04:51Z", "message": "Refactored BackendStartupIT#importsElasticsearchFixtures\n\n... tomake it easier to understand"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c977af8044c1b9ef573b0d768afc72e26d353b49", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c977af8044c1b9ef573b0d768afc72e26d353b49", "committedDate": "2020-03-25T15:04:51Z", "message": "Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e40c2bc2b22a126380f800d16aea23398aff090", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7e40c2bc2b22a126380f800d16aea23398aff090", "committedDate": "2020-03-25T15:04:51Z", "message": "Added param object NodeContainerConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccaf2f66705d673d62e66e78d681e1a3ac07335e", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/ccaf2f66705d673d62e66e78d681e1a3ac07335e", "committedDate": "2020-03-25T15:04:51Z", "message": "Added README explaining local config options\n\nPlaced it in the `testing.completebackend` package in lack of a better\nidea where to put it. Can be moved somewhere else after the contents\nhave been reviewed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b48e5a8dbe241a39855ff1a4d7a7be5cafe03df1", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/b48e5a8dbe241a39855ff1a4d7a7be5cafe03df1", "committedDate": "2020-03-25T15:04:52Z", "message": "Reduce docker-entrypoint.sh to necessary parts\n\n- Deleted unnecessary code from docker-entrypoint.sh\n  (was originally copied from https://github.com/Graylog2/graylog-docker)\n- Created contentpacks dir also in Dockerfile\n  Dir creation was actually redundant in Dockerfile and docker-entrypoint.sh.\n  The contentpacks dur was the only one missing in Dockerfile."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9299ccef56a9582d3b9dc4127f3273f29c632734", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/9299ccef56a9582d3b9dc4127f3273f29c632734", "committedDate": "2020-03-25T15:04:52Z", "message": "Skip forbiddenapis check in MavenPackager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07194b398d92276aa836f562bcd93a633305c008", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/07194b398d92276aa836f562bcd93a633305c008", "committedDate": "2020-03-25T15:04:53Z", "message": "Add braces around one-line conditional blocks\n\n...to comply with coding standards."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1c9fa7daa9f382ca19c858007bd051725e22699", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/d1c9fa7daa9f382ca19c858007bd051725e22699", "committedDate": "2020-03-25T15:04:53Z", "message": "Start mongodb and node in sequence\n\n...because starting them in parallel is not safe, as @bernd\npointed out in a review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02f6e1e35d6ca0974d840d6a5f9d1b81349fbd52", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/02f6e1e35d6ca0974d840d6a5f9d1b81349fbd52", "committedDate": "2020-03-25T15:04:53Z", "message": "Move configuration of RequestSpecification to GraylogBackendExtension\n\n- Make RestAssured RequestSpecification injectable to allow reuse\n- Configure baseUri, port, and basePath to avoid having to concat\n  the api path in every test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0232fa0a86c604178cec5fb6678fc77c670c91b5", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/0232fa0a86c604178cec5fb6678fc77c670c91b5", "committedDate": "2020-03-25T15:04:54Z", "message": "Set additional env vars in NodeContainerFactory\n\n- GRAYLOG_LB_RECOGNITION_PERIOD_SECONDS: save time on server shutdown\n- GRAYLOG_VERSIONCHECKS: avoid contacting version check service\n- add explanatory comment for ADMIN_PW_SHA2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae681503d003da8775b7b7c51215351343a375d9", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/ae681503d003da8775b7b7c51215351343a375d9", "committedDate": "2020-03-25T15:04:54Z", "message": "Use constant for GRAYLOG_HTTP_BIND_ADDRESS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5572e2c0372c48db0eef1699f61e8d6de45b22e", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/b5572e2c0372c48db0eef1699f61e8d6de45b22e", "committedDate": "2020-03-25T15:04:55Z", "message": "Add JavaDocs to explain the ApiIntegrationTest annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344d5da1c210fee9e099b14bad1cbdb52170d3e9", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/344d5da1c210fee9e099b14bad1cbdb52170d3e9", "committedDate": "2020-03-25T15:04:55Z", "message": "Log Maven command when packaging fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd9c795c0b579e146748b194293a70ab9b68880d", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/cd9c795c0b579e146748b194293a70ab9b68880d", "committedDate": "2020-03-25T15:04:56Z", "message": "Improve temp file creation\n\n- More descriptive filename\n- Use `File.createTempFile` explicitly\n- Delete on exit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be0ee18d93263d7efbbd166f5ccadd0d7be79be", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/9be0ee18d93263d7efbbd166f5ccadd0d7be79be", "committedDate": "2020-03-25T15:04:56Z", "message": "Reset skip flag for old integration tests to \"true\"\n\nSetting it to \"false\" slipped in when investigating how difficult it would\nbe to port them to the new solution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3794b9be5ae8a466d7dd5a1ab671f04889448313", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3794b9be5ae8a466d7dd5a1ab671f04889448313", "committedDate": "2020-03-25T15:04:56Z", "message": "Use explicit Locale for String.format\n\n...as required by our forbiddenapis check"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6485ae64c28a55ca4d4deff716305ebd05a20cfb", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6485ae64c28a55ca4d4deff716305ebd05a20cfb", "committedDate": "2020-03-25T14:22:40Z", "message": "Use explicit Locale for String.format\n\n...as required by our forbiddenapis check"}, "afterCommit": {"oid": "3794b9be5ae8a466d7dd5a1ab671f04889448313", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3794b9be5ae8a466d7dd5a1ab671f04889448313", "committedDate": "2020-03-25T15:04:56Z", "message": "Use explicit Locale for String.format\n\n...as required by our forbiddenapis check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c3b14608d49727f778142029ee6fcc24fba4c4d", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7c3b14608d49727f778142029ee6fcc24fba4c4d", "committedDate": "2020-03-25T15:53:24Z", "message": "Add check for Maven executable\n\nDuring his review @kmerz had the issue that the Maven executable\ncouldn't be found and the resulting error message was not very\nhelpful for him.\nThis should make that error more explicit for the user."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8798fea9f696ae6d6788cd550624928938e2d19b", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/8798fea9f696ae6d6788cd550624928938e2d19b", "committedDate": "2020-03-25T16:55:38Z", "message": "Fix maven command\n\nAccidentally left in \"echo $PATH\" after debugging. :/"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6a9fb6d3d2c9363ad1338ed45ef29a12dd51fc", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/3f6a9fb6d3d2c9363ad1338ed45ef29a12dd51fc", "committedDate": "2020-03-25T16:56:42Z", "message": "Added alternative check for failing maven command\n\n...to see which one triggers on @kmerz's system.\nWill remove one of them afterwards."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "701983a742f6ccfdcf7b3936ff27d4b68b3a5c31", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/701983a742f6ccfdcf7b3936ff27d4b68b3a5c31", "committedDate": "2020-03-26T10:00:00Z", "message": "Warn about ~ in PATH when mvn executable not found\n\n- Extracted check for executable to own class\n- Added explicit warning about ~ in PATH to exception message\n- Added a note to the Readme, pointing out the directory for mvn in PATH\n  must not contain a ~"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTAzMzM5", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#pullrequestreview-380103339", "createdAt": "2020-03-24T08:51:30Z", "commit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MTozMVrOF6mNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo1MTozMVrOF6mNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4NzY2Mg==", "bodyText": "This file is completly outdated and can be deleted!", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#discussion_r396987662", "createdAt": "2020-03-24T08:51:31Z", "author": {"login": "kmerz"}, "path": "integration-tests/src/test/java/integration/system/bundles/ContentPackStreamsTest.java", "diffHunk": "@@ -17,18 +17,20 @@\n package integration.system.bundles;\n \n import com.google.common.net.HttpHeaders;\n-import com.jayway.restassured.response.ValidatableResponse;\n import integration.BaseRestTest;\n import integration.RequiresAuthentication;\n import integration.RequiresVersion;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.net.URI;\n \n-import static com.jayway.restassured.RestAssured.given;\n+import static io.restassured.RestAssured.given;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.hamcrest.CoreMatchers.notNullValue;\n \n+@Ignore(\"legacy test that should be converted or deleted\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87bc2b6011cbb7bbd0f185e4ebd093c7152f8104"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxOTI4Mzk3", "url": "https://github.com/Graylog2/graylog2-server/pull/7561#pullrequestreview-381928397", "createdAt": "2020-03-26T11:43:15Z", "commit": {"oid": "701983a742f6ccfdcf7b3936ff27d4b68b3a5c31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2662, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}