{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTE0Mzkz", "number": 7929, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoyMTowMFrOD0HTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1NToyMVrOD0IU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTcyMTQzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/FieldList.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoyMTowMFrOGI5BRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1NzoxM1rOGI6rKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NjAwNA==", "bodyText": "Because we need viewMetadata for this component independently of the fields, I removed  the ViewMetadataStore connect from the ExtendedSearchPage FieldList and implemented it as a part of the component.", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r411976004", "createdAt": "2020-04-21T08:21:00Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/sidebar/FieldList.jsx", "diffHunk": "@@ -175,10 +179,29 @@ const FieldList = createReactClass({\n           {this.showFieldsByLink('allreserved', 'all including reserved', 'This shows all fields, including reserved (gl2_*) fields.')} fields.\n         </div>\n         <hr />\n-        {this._renderFieldList({ fields, allFields, showFieldsBy })}\n+        {this._renderFieldList({ activeQueryFields, allFields, showFieldsBy })}\n       </div>\n     );\n   },\n });\n \n-export default FieldList;\n+const FieldListWithContext = (props) => (\n+  <FieldTypesContext.Consumer>\n+    {({ all, queryFields } = {}) => {\n+      const { viewMetadata: { activeQuery } } = props;\n+      const activeQueryFields = queryFields?.get(activeQuery, all);\n+      return <FieldList {...props} allFields={all} activeQueryFields={activeQueryFields} />;\n+    }}\n+  </FieldTypesContext.Consumer>\n+);\n+\n+FieldListWithContext.propTypes = {\n+  viewMetadata: PropTypes.object.isRequired,\n+  listHeight: PropTypes.number,\n+};\n+\n+FieldListWithContext.defaultProps = {\n+  listHeight: 50,\n+};\n+\n+export default connect(FieldListWithContext, { viewMetadata: ViewMetadataStore });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwMzExNQ==", "bodyText": "The ViewMetadataStore is probably the next target that could be provided with a context instead.", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r412003115", "createdAt": "2020-04-21T08:57:13Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/FieldList.jsx", "diffHunk": "@@ -175,10 +179,29 @@ const FieldList = createReactClass({\n           {this.showFieldsByLink('allreserved', 'all including reserved', 'This shows all fields, including reserved (gl2_*) fields.')} fields.\n         </div>\n         <hr />\n-        {this._renderFieldList({ fields, allFields, showFieldsBy })}\n+        {this._renderFieldList({ activeQueryFields, allFields, showFieldsBy })}\n       </div>\n     );\n   },\n });\n \n-export default FieldList;\n+const FieldListWithContext = (props) => (\n+  <FieldTypesContext.Consumer>\n+    {({ all, queryFields } = {}) => {\n+      const { viewMetadata: { activeQuery } } = props;\n+      const activeQueryFields = queryFields?.get(activeQuery, all);\n+      return <FieldList {...props} allFields={all} activeQueryFields={activeQueryFields} />;\n+    }}\n+  </FieldTypesContext.Consumer>\n+);\n+\n+FieldListWithContext.propTypes = {\n+  viewMetadata: PropTypes.object.isRequired,\n+  listHeight: PropTypes.number,\n+};\n+\n+FieldListWithContext.defaultProps = {\n+  listHeight: 50,\n+};\n+\n+export default connect(FieldListWithContext, { viewMetadata: ViewMetadataStore });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3NjAwNA=="}, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTczNTU0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/contexts/FieldTypesProvider.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoyMzo1NlrOGI5J0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODoyMzo1NlrOGI5J0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk3ODE5NQ==", "bodyText": "We had this discussion for e.g. the CurrentUserProvider: Right now I am expecting fieldTypes to be undefined initially, which means we need to test / check the undefined case in every component where we are using the FieldTypesContext.", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r411978195", "createdAt": "2020-04-21T08:23:56Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/contexts/FieldTypesProvider.jsx", "diffHunk": "@@ -0,0 +1,26 @@\n+// @flow strict\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+\n+import { useStore } from 'stores/connect';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import FieldTypesContext from './FieldTypesContext';\n+\n+const FieldTypesProvider = ({ children }: { children: React.Node }) => {\n+  const fieldTypes = useStore(FieldTypesStore);\n+  return (\n+    fieldTypes\n+      ? (\n+        <FieldTypesContext.Provider value={fieldTypes}>\n+          {children}\n+        </FieldTypesContext.Provider>\n+      )\n+      : children\n+  );\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTg1Mzc4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/SearchResult.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo0ODoyN1rOGI6QTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTowOTowN1rOGJABWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5NjIzNw==", "bodyText": "We should split this up into:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import React, { useContext } from 'react';\n          \n          \n            \n            import * as React from 'react';\n          \n          \n            \n            import { useContext } from 'react';\n          \n      \n    \n    \n  \n\nThis way we really do have React containing all exports and not just default.", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r411996237", "createdAt": "2020-04-21T08:48:27Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/SearchResult.jsx", "diffHunk": "@@ -1,12 +1,11 @@\n // @flow strict\n-import * as React from 'react';\n+import React, { useContext } from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5MDcxMw==", "bodyText": "So far I've used * as React only when needed, but I see the benefit in always exporting not just default", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r412090713", "createdAt": "2020-04-21T11:09:07Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/SearchResult.jsx", "diffHunk": "@@ -1,12 +1,11 @@\n // @flow strict\n-import * as React from 'react';\n+import React, { useContext } from 'react';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5NjIzNw=="}, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTg2MjU4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/contexts/FieldTypesContext.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1MDoxMFrOGI6VkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1MDoxMFrOGI6VkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5NzU4NQ==", "bodyText": "Instead of reusing the store state, we should create an own type in the context that we are populating. If it is structurally identical to FieldTypesStoreState, we do not even need a conversion. This helps us decouple the context from any component that is providing it.", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r411997585", "createdAt": "2020-04-21T08:50:10Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/contexts/FieldTypesContext.jsx", "diffHunk": "@@ -0,0 +1,8 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import { singleton } from 'views/logic/singleton';\n+import type { FieldTypesStoreState } from 'views/stores/FieldTypesStore';\n+\n+const FieldTypesContext = React.createContext<?FieldTypesStoreState>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTg3MDEzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/contexts/FieldTypesProvider.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1MToyMFrOGI6Zww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1MToyMFrOGI6Zww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk5ODY1OQ==", "bodyText": "We should name this either DefaultFieldTypesProvider or StoreBackedFieldTypesProvider or something like this, so it's clear that it is actually a specific implementation for the provider and not just the \"interface\".", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r411998659", "createdAt": "2020-04-21T08:51:20Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/contexts/FieldTypesProvider.jsx", "diffHunk": "@@ -0,0 +1,26 @@\n+// @flow strict\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+\n+import { useStore } from 'stores/connect';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import FieldTypesContext from './FieldTypesContext';\n+\n+const FieldTypesProvider = ({ children }: { children: React.Node }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTg4OTYwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/sidebar/FieldList.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODo1NToyMVrOGI6lUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMToxMjoxN1rOGJAIow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwMTYxOA==", "bodyText": "Now that the mixins are gone, can we turn this into a class-based or functional component?", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r412001618", "createdAt": "2020-04-21T08:55:21Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/sidebar/FieldList.jsx", "diffHunk": "@@ -18,16 +20,16 @@ const isReservedField = (fieldName) => MessageFieldsFilter.FILTERED_FIELDS.inclu\n \n const FieldList = createReactClass({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA5MjU3OQ==", "bodyText": "I thought about it as well, but I prefer doing this in another PR, otherwise reviewing the FieldList changes would have been more complicated.", "url": "https://github.com/Graylog2/graylog2-server/pull/7929#discussion_r412092579", "createdAt": "2020-04-21T11:12:17Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/sidebar/FieldList.jsx", "diffHunk": "@@ -18,16 +20,16 @@ const isReservedField = (fieldName) => MessageFieldsFilter.FILTERED_FIELDS.inclu\n \n const FieldList = createReactClass({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAwMTYxOA=="}, "originalCommit": {"oid": "17fb73e61af2003564128d3972caec2f22dc5d94"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3725, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}