{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1Mzc3NDk5", "number": 7237, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTowNzoyNlrODZwbbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDozODoyMFrODZyOqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzM0NDQ0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOTowNzoyNlrOFgUxmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoxODowM1rOFg8MjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzOTEyOQ==", "bodyText": "When opening the modal, I am receiving the following PropType warning:\nWarning: Failed prop type: Invalid prop `availableFields` of type `object` supplied to `CSVExport`, expected `array`", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369439129", "createdAt": "2020-01-22T09:07:26Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NTAwNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370085005", "createdAt": "2020-01-23T12:18:03Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzOTEyOQ=="}, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzM2MTMwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOToxMzoyOFrOFgU8Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMDo0N1rOFg8RSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MTgyNg==", "bodyText": "Could you implement the BootstrapModalWrapper? We mainly use the component to handle the modal state, but it also unifies the modal behaviour / settings.", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369441826", "createdAt": "2020-01-22T09:13:28Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {\n+  const [selectedStream, setSelectedStream] = useState();\n+  const [selectedFields, setSelectedFields] = useState(defaultFieldOptions);\n+\n+  const link = selectedFields.length > 0\n+    ? (\n+      /* eslint-disable-next-line react/jsx-no-target-blank */\n+      <a href={getURLForExportAsCSV((selectedStream || {}).value, selectedFields.map(f => f.value))} target=\"_blank\">\n+        <Icon name=\"cloud-download\" />&nbsp;\n+        Download\n+      </a>\n+    )\n+    : <p>Select at least on field to export messages as CSV.</p>;\n+\n+  const infoText = (URLUtils.areCredentialsInURLSupported()\n+    ? 'Please right click the download link below and choose \"Save Link As...\" to download the CSV file.'\n+    : 'Please click the download link below. Your browser may ask for your username and password to '\n+    + 'download the CSV file.');\n+\n+  const Content = styled.div`\n+    margin-left: 10px;\n+    margin-right: 10px;\n+  `;\n+  return (\n+    <Modal show>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjIxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370086217", "createdAt": "2020-01-23T12:20:47Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {\n+  const [selectedStream, setSelectedStream] = useState();\n+  const [selectedFields, setSelectedFields] = useState(defaultFieldOptions);\n+\n+  const link = selectedFields.length > 0\n+    ? (\n+      /* eslint-disable-next-line react/jsx-no-target-blank */\n+      <a href={getURLForExportAsCSV((selectedStream || {}).value, selectedFields.map(f => f.value))} target=\"_blank\">\n+        <Icon name=\"cloud-download\" />&nbsp;\n+        Download\n+      </a>\n+    )\n+    : <p>Select at least on field to export messages as CSV.</p>;\n+\n+  const infoText = (URLUtils.areCredentialsInURLSupported()\n+    ? 'Please right click the download link below and choose \"Save Link As...\" to download the CSV file.'\n+    : 'Please click the download link below. Your browser may ask for your username and password to '\n+    + 'download the CSV file.');\n+\n+  const Content = styled.div`\n+    margin-left: 10px;\n+    margin-right: 10px;\n+  `;\n+  return (\n+    <Modal show>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MTgyNg=="}, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzM3Mjg0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOToxNzoxNFrOFgVC7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMDo1OFrOFg8RkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MzU2NA==", "bodyText": "Because the component is a Modal, I would prefer the component name CSVExportModal. Comparable components have a similar name.", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369443564", "createdAt": "2020-01-22T09:17:14Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjI4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370086289", "createdAt": "2020-01-23T12:20:58Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MzU2NA=="}, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzM5NzY4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwOToyNToyMFrOFgVR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyNDo1MFrOFg8XXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0NzQxNQ==", "bodyText": "We could also use target=\"_parent\" to start the download in the same browser tab. When it comes to downloads, I would still use target=\"_blank\" for PDF's, because of PDF readers, but not for CSV files.", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369447415", "createdAt": "2020-01-22T09:25:20Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {\n+  const [selectedStream, setSelectedStream] = useState();\n+  const [selectedFields, setSelectedFields] = useState(defaultFieldOptions);\n+\n+  const link = selectedFields.length > 0\n+    ? (\n+      /* eslint-disable-next-line react/jsx-no-target-blank */\n+      <a href={getURLForExportAsCSV((selectedStream || {}).value, selectedFields.map(f => f.value))} target=\"_blank\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Nzc3NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370087774", "createdAt": "2020-01-23T12:24:50Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {\n+  const [selectedStream, setSelectedStream] = useState();\n+  const [selectedFields, setSelectedFields] = useState(defaultFieldOptions);\n+\n+  const link = selectedFields.length > 0\n+    ? (\n+      /* eslint-disable-next-line react/jsx-no-target-blank */\n+      <a href={getURLForExportAsCSV((selectedStream || {}).value, selectedFields.map(f => f.value))} target=\"_blank\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0NzQxNQ=="}, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzYzOTQ3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxMDozODoyMVrOFgXjSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyNDo1OVrOFg8XlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDYxNg==", "bodyText": "Sorting availableStreams and availableFields would really improve the usability.", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369484616", "createdAt": "2020-01-22T10:38:21Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NzgyOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370087828", "createdAt": "2020-01-23T12:24:59Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDYxNg=="}, "originalCommit": {"oid": "a05a2eb99299962e4b381c2d9f624a18c9621407"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3922, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}