{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDQ1Nzky", "number": 9063, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNDoyMlrOEqv92w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyODo0M1rOEqw5KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYxNTMxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/views/Actions.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNDoyMlrOHdIeGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozMDoxOVrOHdoVwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwOTUyOA==", "bodyText": "There is still a history.push in SavedSearchControls:162 which does the same and is no longer needed. I found it because I got the warning Saving view failed: TypeError: Cannot read property 'then' of undefined after creating a new saved search.\nloadView returned a Promise before these changes, but I could not find another case where this could be a problem.", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500309528", "createdAt": "2020-10-06T14:04:22Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/logic/views/Actions.js", "diffHunk": "@@ -0,0 +1,15 @@\n+// @flow strict\n+import history from 'util/History';\n+import Routes from 'routing/Routes';\n+\n+export const loadNewView = () => {\n+  return history.push(`${Routes.SEARCH}/new`);\n+};\n+\n+export const loadNewViewForStream = (streamId: string) => {\n+  return history.push(`${Routes.stream_search(streamId)}/new`);\n+};\n+\n+export const loadView = (viewId: string) => {\n+  return history.push(`${Routes.SEARCH}/${viewId}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMTY4Mg==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500831682", "createdAt": "2020-10-07T08:30:19Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/views/Actions.js", "diffHunk": "@@ -0,0 +1,15 @@\n+// @flow strict\n+import history from 'util/History';\n+import Routes from 'routing/Routes';\n+\n+export const loadNewView = () => {\n+  return history.push(`${Routes.SEARCH}/new`);\n+};\n+\n+export const loadNewViewForStream = (streamId: string) => {\n+  return history.push(`${Routes.stream_search(streamId)}/new`);\n+};\n+\n+export const loadView = (viewId: string) => {\n+  return history.push(`${Routes.SEARCH}/${viewId}`);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwOTUyOA=="}, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjYyMzQ5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/pages/SavedSearchPage.jsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowNTozN1rOHdIi_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyMDowOVrOHdn7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMDc4Mg==", "bodyText": "It was a little bit confusing, that the SavedSearchPage component is being used for the NewSearchPage and StreamSearchPage what about the name SearchPage?", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500310782", "createdAt": "2020-10-06T14:05:37Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/SavedSearchPage.jsx", "diffHunk": "@@ -0,0 +1,31 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import ViewLoaderContext from 'views/logic/ViewLoaderContext';\n+import NewViewLoaderContext from 'views/logic/NewViewLoaderContext';\n+import { ExtendedSearchPage } from 'views/pages';\n+import { loadNewView as defaultLoadNewView, loadView as defaultLoadView } from 'views/logic/views/Actions';\n+import IfUserHasAccessToAnyStream from 'views/components/IfUserHasAccessToAnyStream';\n+\n+type Props = {\n+  loadNewView?: () => mixed,\n+  loadView?: (string) => mixed,\n+  route: any,\n+};\n+\n+const SavedSearchPage = ({ loadNewView = defaultLoadNewView, loadView = defaultLoadView, route }: Props) => (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1ODA4OQ==", "bodyText": "Having a look at the code I had the following idea. This is a summary of all suggestions. We could:\n\nrename this component to SearchPage\nimplement the SearchPage for the NewDashboardPage. In this case we would use the SearchPage for every search page. A side effect would be, that the ExtendedSearchPage is only being used inside the SearchPage.\nrename ExtendedSearchPage to e.g. just Search and move it from pages to components/search\n\nThis way the relation between the search pages and the search would be easier to understand, imo.", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500358089", "createdAt": "2020-10-06T14:54:20Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/SavedSearchPage.jsx", "diffHunk": "@@ -0,0 +1,31 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import ViewLoaderContext from 'views/logic/ViewLoaderContext';\n+import NewViewLoaderContext from 'views/logic/NewViewLoaderContext';\n+import { ExtendedSearchPage } from 'views/pages';\n+import { loadNewView as defaultLoadNewView, loadView as defaultLoadView } from 'views/logic/views/Actions';\n+import IfUserHasAccessToAnyStream from 'views/components/IfUserHasAccessToAnyStream';\n+\n+type Props = {\n+  loadNewView?: () => mixed,\n+  loadView?: (string) => mixed,\n+  route: any,\n+};\n+\n+const SavedSearchPage = ({ loadNewView = defaultLoadNewView, loadView = defaultLoadView, route }: Props) => (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMDc4Mg=="}, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyNDk4MQ==", "bodyText": "Excellent idea, thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500824981", "createdAt": "2020-10-07T08:20:09Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/pages/SavedSearchPage.jsx", "diffHunk": "@@ -0,0 +1,31 @@\n+// @flow strict\n+import * as React from 'react';\n+\n+import ViewLoaderContext from 'views/logic/ViewLoaderContext';\n+import NewViewLoaderContext from 'views/logic/NewViewLoaderContext';\n+import { ExtendedSearchPage } from 'views/pages';\n+import { loadNewView as defaultLoadNewView, loadView as defaultLoadView } from 'views/logic/views/Actions';\n+import IfUserHasAccessToAnyStream from 'views/components/IfUserHasAccessToAnyStream';\n+\n+type Props = {\n+  loadNewView?: () => mixed,\n+  loadView?: (string) => mixed,\n+  route: any,\n+};\n+\n+const SavedSearchPage = ({ loadNewView = defaultLoadNewView, loadView = defaultLoadView, route }: Props) => (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMDc4Mg=="}, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjY0NjQ3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/views/Actions.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDowOToxOFrOHdIxAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODo0NToxOVrOHdo70A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNDM3MQ==", "bodyText": "When I reset a saved search, I get redirected to /search/new.", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500314371", "createdAt": "2020-10-06T14:09:18Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/logic/views/Actions.js", "diffHunk": "@@ -0,0 +1,15 @@\n+// @flow strict\n+import history from 'util/History';\n+import Routes from 'routing/Routes';\n+\n+export const loadNewView = () => {\n+  return history.push(`${Routes.SEARCH}/new`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg0MTQyNA==", "bodyText": "I just realised this is the desired behaviour, please ignore this comment.", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500841424", "createdAt": "2020-10-07T08:45:19Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/logic/views/Actions.js", "diffHunk": "@@ -0,0 +1,15 @@\n+// @flow strict\n+import history from 'util/History';\n+import Routes from 'routing/Routes';\n+\n+export const loadNewView = () => {\n+  return history.push(`${Routes.SEARCH}/new`);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNDM3MQ=="}, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjc2NzEyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/pages/NewDashboardPage.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNDoyODo0M1rOHdJ7qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODozMDo0NlrOHdoW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzQ4MQ==", "bodyText": "For the ShowViewPage, which is being used for saved dashboards, we are using the SavedSearchPage.\nI am wondering if we should implement the SavedSearchPage for this component as well.\nWe do not need the ViewLoaderContext and NewViewLoaderContext, but we would use IfUserHasAccessToAnyStream here as well. Or am I missing a reason why we should not use IfUserHasAccessToAnyStream here?", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500333481", "createdAt": "2020-10-06T14:28:43Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/NewDashboardPage.jsx", "diffHunk": "@@ -1,63 +1,44 @@\n // @flow strict\n-import React, { useEffect, useState } from 'react';\n+import * as React from 'react';\n+import { useMemo } from 'react';\n import PropTypes from 'prop-types';\n \n import Spinner from 'components/common/Spinner';\n-import type { ViewHook } from 'views/logic/hooks/ViewHook';\n-import { processHooks } from 'views/logic/views/ViewLoader';\n import withPluginEntities from 'views/logic/withPluginEntities';\n import viewTransformer from 'views/logic/views/ViewTransformer';\n import { ViewActions } from 'views/stores/ViewStore';\n import View from 'views/logic/views/View';\n-import type { ViewJson } from 'views/logic/views/View';\n import { ExtendedSearchPage } from 'views/pages';\n import { IfPermitted } from 'components/common';\n+import useLoadView from 'views/logic/views/UseLoadView';\n \n type Props = {\n   route: {},\n   location: {\n     state?: {\n-      view?: View | ViewJson,\n+      view?: View,\n     },\n     query: { [string]: any },\n-  };\n-  loadingViewHooks: Array<ViewHook>,\n-  executingViewHooks: Array<ViewHook>,\n+  },\n };\n-const NewDashboardPage = ({ route, location, loadingViewHooks, executingViewHooks }: Props) => {\n-  const [loaded, setLoaded] = useState(false);\n-  const [hookComponent, setHookComponent] = useState(undefined);\n \n-  useEffect(() => {\n-    let mounted = true;\n-    const { state = {} } = location;\n-    const { view: searchView } = state;\n-\n-    if (searchView && searchView.search) {\n-      const { query } = location;\n-      /* $FlowFixMe the searchView.search is guard enough and instanceof does not work here */\n+const NewDashboardPage = ({ route, location }: Props) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgzMTk3Mw==", "bodyText": "\u2705", "url": "https://github.com/Graylog2/graylog2-server/pull/9063#discussion_r500831973", "createdAt": "2020-10-07T08:30:46Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/pages/NewDashboardPage.jsx", "diffHunk": "@@ -1,63 +1,44 @@\n // @flow strict\n-import React, { useEffect, useState } from 'react';\n+import * as React from 'react';\n+import { useMemo } from 'react';\n import PropTypes from 'prop-types';\n \n import Spinner from 'components/common/Spinner';\n-import type { ViewHook } from 'views/logic/hooks/ViewHook';\n-import { processHooks } from 'views/logic/views/ViewLoader';\n import withPluginEntities from 'views/logic/withPluginEntities';\n import viewTransformer from 'views/logic/views/ViewTransformer';\n import { ViewActions } from 'views/stores/ViewStore';\n import View from 'views/logic/views/View';\n-import type { ViewJson } from 'views/logic/views/View';\n import { ExtendedSearchPage } from 'views/pages';\n import { IfPermitted } from 'components/common';\n+import useLoadView from 'views/logic/views/UseLoadView';\n \n type Props = {\n   route: {},\n   location: {\n     state?: {\n-      view?: View | ViewJson,\n+      view?: View,\n     },\n     query: { [string]: any },\n-  };\n-  loadingViewHooks: Array<ViewHook>,\n-  executingViewHooks: Array<ViewHook>,\n+  },\n };\n-const NewDashboardPage = ({ route, location, loadingViewHooks, executingViewHooks }: Props) => {\n-  const [loaded, setLoaded] = useState(false);\n-  const [hookComponent, setHookComponent] = useState(undefined);\n \n-  useEffect(() => {\n-    let mounted = true;\n-    const { state = {} } = location;\n-    const { view: searchView } = state;\n-\n-    if (searchView && searchView.search) {\n-      const { query } = location;\n-      /* $FlowFixMe the searchView.search is guard enough and instanceof does not work here */\n+const NewDashboardPage = ({ route, location }: Props) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMzQ4MQ=="}, "originalCommit": {"oid": "336c8f3f6c559127e9c906014cc6d84ca096f513"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4465, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}