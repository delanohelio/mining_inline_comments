{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTM0NjY1", "number": 7281, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDo1NzozNVrODbLaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDozMTo1N1rODclewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODI1MDMxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDo1NzozNVrOFig35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzoxMzoxNlrOFikcjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDUwMA==", "bodyText": "I'm wondering: why do we use inline styles here instead of a styled component?", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371734500", "createdAt": "2020-01-28T10:57:35Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,39 +94,45 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <Icon name=\"check\" style={{ color: '#00AE42', marginRight: 3 }} /> This message would be routed to this stream!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a41ab2a2b939699550454c2fbd26dab341e4a5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MTk2NQ==", "bodyText": "Was just using what was already there, i can easily convert them to SC", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371791965", "createdAt": "2020-01-28T13:11:02Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,39 +94,45 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <Icon name=\"check\" style={{ color: '#00AE42', marginRight: 3 }} /> This message would be routed to this stream!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDUwMA=="}, "originalCommit": {"oid": "68a41ab2a2b939699550454c2fbd26dab341e4a5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MzAzNg==", "bodyText": "It's fine, I was wondering if there was any other reason :)", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371793036", "createdAt": "2020-01-28T13:13:16Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,39 +94,45 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <Icon name=\"check\" style={{ color: '#00AE42', marginRight: 3 }} /> This message would be routed to this stream!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDUwMA=="}, "originalCommit": {"oid": "68a41ab2a2b939699550454c2fbd26dab341e4a5"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODI3MjM0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streamrules/StreamRuleList.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTowNTowMlrOFihFKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMTowNTowMlrOFihFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNzg5OQ==", "bodyText": "matchData is passed down, but never used.", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371737899", "createdAt": "2020-01-28T11:05:02Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRuleList.jsx", "diffHunk": "@@ -14,36 +14,51 @@ class StreamRuleList extends React.Component {\n     streamRuleTypes: PropTypes.array.isRequired,\n   };\n \n+  static defaultProps = {\n+    matchData: {},\n+    onSubmit: () => {},\n+    onDelete: () => {},\n+  }\n+\n   _formatStreamRules = (streamRules) => {\n     if (streamRules && streamRules.length > 0) {\n-      return streamRules.map((streamRule) => {\n-        return (\n-          <StreamRule key={streamRule.id}\n-                      permissions={this.props.permissions}\n-                      matchData={this.props.matchData}\n-                      onSubmit={this.props.onSubmit}\n-                      onDelete={this.props.onDelete}\n-                      stream={this.props.stream}\n-                      streamRule={streamRule}\n-                      streamRuleTypes={this.props.streamRuleTypes} />\n-        );\n-      });\n+      const {\n+        matchData,\n+        onDelete,\n+        onSubmit,\n+        permissions,\n+        stream,\n+        streamRuleTypes,\n+      } = this.props;\n+\n+      return streamRules.map(streamRule => (\n+        <StreamRule key={streamRule.id}\n+                    permissions={permissions}\n+                    matchData={matchData}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a41ab2a2b939699550454c2fbd26dab341e4a5"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTQ4MDkzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDozNTo0MVrOFjmWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTozMToyOFrOFkPBAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MjgyNA==", "bodyText": "This will throw a console warning when empty or matches are true, since styled-components passes all props through: styled-components/styled-components#1198 (comment)", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372872824", "createdAt": "2020-01-30T10:35:41Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -17,14 +18,35 @@ import StoreProvider from 'injection/StoreProvider';\n const StreamsStore = StoreProvider.getStore('Streams');\n const StreamRulesStore = StoreProvider.getStore('StreamRules');\n \n+const StreamAlertHeader = styled.h4`\n+  font-weight: bold;\n+  margin: 0 0 12px;\n+`;\n+\n+const MatchIcon = styled(Icon)(({ empty, matches }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b3ba8464a127513157eaad9e04b74bf74cc3cf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUzOTA3NA==", "bodyText": "Good catch!", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r373539074", "createdAt": "2020-01-31T15:31:28Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -17,14 +18,35 @@ import StoreProvider from 'injection/StoreProvider';\n const StreamsStore = StoreProvider.getStore('Streams');\n const StreamRulesStore = StoreProvider.getStore('StreamRules');\n \n+const StreamAlertHeader = styled.h4`\n+  font-weight: bold;\n+  margin: 0 0 12px;\n+`;\n+\n+const MatchIcon = styled(Icon)(({ empty, matches }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MjgyNA=="}, "originalCommit": {"oid": "08b3ba8464a127513157eaad9e04b74bf74cc3cf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTQ4ODExOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streamrules/StreamRule.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDozODoxMFrOFjma2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDozODoxMFrOFjma2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3Mzk0NA==", "bodyText": "This throws a warning because the value of bsStyle can be a boolean and it is not the right prop type. We should replace && with a conditional operator.", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372873944", "createdAt": "2020-01-30T10:38:10Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRule.jsx", "diffHunk": "@@ -1,96 +1,109 @@\n+import React, { useRef } from 'react';\n import PropTypes from 'prop-types';\n-import React from 'react';\n-\n-import createReactClass from 'create-react-class';\n+import { isEmpty } from 'lodash';\n+import styled from 'styled-components';\n \n import { Icon } from 'components/common';\n+import { Button, ListGroupItem } from 'components/graylog';\n import PermissionsMixin from 'util/PermissionsMixin';\n import StreamRuleForm from 'components/streamrules/StreamRuleForm';\n-import HumanReadableStreamRule from 'components/streamrules//HumanReadableStreamRule';\n+import HumanReadableStreamRule from 'components/streamrules/HumanReadableStreamRule';\n \n import StoreProvider from 'injection/StoreProvider';\n \n import UserNotification from 'util/UserNotification';\n \n const StreamRulesStore = StoreProvider.getStore('StreamRules');\n+const { isPermitted } = PermissionsMixin;\n \n-const StreamRule = createReactClass({\n-  displayName: 'StreamRule',\n-\n-  propTypes: {\n-    matchData: PropTypes.array,\n-    onDelete: PropTypes.func,\n-    onSubmit: PropTypes.func,\n-    permissions: PropTypes.array.isRequired,\n-    stream: PropTypes.object.isRequired,\n-    streamRule: PropTypes.object.isRequired,\n-    streamRuleTypes: PropTypes.array.isRequired,\n-  },\n+const ActionButtonsWrap = styled.span`\n+  margin-right: 6px;\n+`;\n \n-  mixins: [PermissionsMixin],\n+const StreamRule = ({ matchData, permissions, stream, streamRule, streamRuleTypes, onSubmit, onDelete }) => {\n+  const streamRuleFormRef = useRef();\n \n-  _onEdit(event) {\n+  const _onEdit = (event) => {\n     event.preventDefault();\n-    this.streamRuleForm.open();\n-  },\n+    streamRuleFormRef.current.open();\n+  };\n \n-  _onDelete(event) {\n+  const _onDelete = (event) => {\n     event.preventDefault();\n+\n+    /* TODO: Replace with custom confirmation dialog */\n+    // eslint-disable-next-line no-alert\n     if (window.confirm('Do you really want to delete this stream rule?')) {\n-      StreamRulesStore.remove(this.props.stream.id, this.props.streamRule.id, () => {\n-        if (this.props.onDelete) {\n-          this.props.onDelete(this.props.streamRule.id);\n+      StreamRulesStore.remove(stream.id, streamRule.id, () => {\n+        if (onDelete) {\n+          onDelete(streamRule.id);\n         }\n         UserNotification.success('Stream rule has been successfully deleted.', 'Success');\n       });\n     }\n-  },\n+  };\n \n-  _onSubmit(streamRuleId, data) {\n-    StreamRulesStore.update(this.props.stream.id, streamRuleId, data, () => {\n-      if (this.props.onSubmit) {\n-        this.props.onSubmit(streamRuleId, data);\n+  const _onSubmit = (streamRuleId, data) => {\n+    StreamRulesStore.update(stream.id, streamRuleId, data, () => {\n+      if (onSubmit) {\n+        onSubmit(streamRuleId, data);\n       }\n       UserNotification.success('Stream rule has been successfully updated.', 'Success');\n     });\n-  },\n+  };\n \n-  _formatActionItems() {\n+  const _formatActionItems = () => {\n     return (\n-      <span>\n-        <a href=\"#\" onClick={this._onDelete} style={{ marginRight: 5 }}>\n+      <ActionButtonsWrap>\n+        <Button bsStyle=\"link\"\n+                bsSize=\"xsmall\"\n+                onClick={_onDelete}>\n           <Icon name=\"trash-o\" />\n-        </a>\n-        <a href=\"#\" onClick={this._onEdit} style={{ marginRight: 5 }}>\n+        </Button>\n+        <Button bsStyle=\"link\"\n+                bsSize=\"xsmall\"\n+                onClick={_onEdit}>\n           <Icon name=\"edit\" />\n-        </a>\n-      </span>\n-    );\n-  },\n-\n-  _getMatchDataClassNames() {\n-    return (this.props.matchData.rules[this.props.streamRule.id] ? 'alert-success' : 'alert-danger');\n-  },\n-\n-  render() {\n-    const { streamRule } = this.props;\n-    const { streamRuleTypes } = this.props;\n-    const actionItems = (this.isPermitted(this.props.permissions, [`streams:edit:${this.props.stream.id}`]) ? this._formatActionItems() : null);\n-    const className = (this.props.matchData ? this._getMatchDataClassNames() : null);\n-    const description = this.props.streamRule.description ? <small>{' '}({this.props.streamRule.description})</small> : null;\n-    return (\n-      <li className={className}>\n-        {actionItems}\n-        <HumanReadableStreamRule streamRule={streamRule} streamRuleTypes={streamRuleTypes} />\n-        <StreamRuleForm ref={(streamRuleForm) => { this.streamRuleForm = streamRuleForm; }}\n-                        streamRule={streamRule}\n-                        streamRuleTypes={streamRuleTypes}\n-                        title=\"Edit Stream Rule\"\n-                        onSubmit={this._onSubmit} />\n-        {description}\n-      </li>\n+        </Button>\n+      </ActionButtonsWrap>\n     );\n-  },\n-});\n+  };\n+\n+  const matchDataStyle = () => (matchData.rules[streamRule.id] ? 'success' : 'danger');\n+  const actionItems = isPermitted(permissions, [`streams:edit:${stream.id}`]) ? _formatActionItems() : null;\n+  const description = streamRule.description ? <small>{' '}({streamRule.description})</small> : null;\n+\n+  return (\n+    <ListGroupItem bsStyle={!isEmpty(matchData) && matchDataStyle()}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b3ba8464a127513157eaad9e04b74bf74cc3cf"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTQ5OTY3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MjowOFrOFjmh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0MjowOFrOFjmh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTc1Ng==", "bodyText": "Stream IDs should be strings instead of numbers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                id: PropTypes.number,\n          \n          \n            \n                id: PropTypes.string,", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372875756", "createdAt": "2020-01-30T10:42:08Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  const _formatNumberOfStreamRules = () => {\n+    if (stream.is_default) {\n+      return 'The default stream contains all messages.';\n+    }\n+    if (stream.rules.length === 0) {\n+      return 'No configured rules.';\n+    }\n+\n+    let verbalMatchingType;\n+    switch (stream.matching_type) {\n+      case 'OR': verbalMatchingType = 'at least one'; break;\n+      default:\n+      case 'AND': verbalMatchingType = 'all'; break;\n+    }\n+\n+    return (\n+      <span>\n+        Must match {verbalMatchingType} of the {stream.rules.length} configured stream{' '}\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+    );\n+  };\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <div className=\"stream-metadata\">\n+      <StreamThroughput streamId={stream.id} />. {_formatNumberOfStreamRules()}\n+\n+      {!isDefaultStream && (\n+        <>\n+          <span className=\"stream-rules-link\">\n+            <Button bsStyle=\"link\"\n+                    bsSize=\"xsmall\"\n+                    onClick={_onHandleToggle}>\n+              {toggleText} stream rules\n+            </Button>\n+          </span>\n+\n+          <CollapsibleStreamRuleList key={`streamRules-${stream.id}`}\n+                                     stream={stream}\n+                                     streamRuleTypes={streamRuleTypes}\n+                                     permissions={permissions}\n+                                     expanded={expanded} />\n+        </>\n+      )}\n+    </div>\n+  );\n+};\n+\n+StreamMetaData.propTypes = {\n+  isDefaultStream: PropTypes.bool,\n+  stream: PropTypes.shape({\n+    id: PropTypes.number,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b3ba8464a127513157eaad9e04b74bf74cc3cf"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTUyMjAxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMDo0OToyOVrOFjmvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNjo1NzoyOVrOFkRpvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3OTI3OA==", "bodyText": "Small thing: using an actual button here makes sense, but breaks the link alignment with text, since the browser will render it differently as a regular anchor:", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372879278", "createdAt": "2020-01-30T10:49:29Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  const _formatNumberOfStreamRules = () => {\n+    if (stream.is_default) {\n+      return 'The default stream contains all messages.';\n+    }\n+    if (stream.rules.length === 0) {\n+      return 'No configured rules.';\n+    }\n+\n+    let verbalMatchingType;\n+    switch (stream.matching_type) {\n+      case 'OR': verbalMatchingType = 'at least one'; break;\n+      default:\n+      case 'AND': verbalMatchingType = 'all'; break;\n+    }\n+\n+    return (\n+      <span>\n+        Must match {verbalMatchingType} of the {stream.rules.length} configured stream{' '}\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+    );\n+  };\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <div className=\"stream-metadata\">\n+      <StreamThroughput streamId={stream.id} />. {_formatNumberOfStreamRules()}\n+\n+      {!isDefaultStream && (\n+        <>\n+          <span className=\"stream-rules-link\">\n+            <Button bsStyle=\"link\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08b3ba8464a127513157eaad9e04b74bf74cc3cf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MjI2OQ==", "bodyText": "Got it fixed up!", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r373582269", "createdAt": "2020-01-31T16:57:29Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  const _formatNumberOfStreamRules = () => {\n+    if (stream.is_default) {\n+      return 'The default stream contains all messages.';\n+    }\n+    if (stream.rules.length === 0) {\n+      return 'No configured rules.';\n+    }\n+\n+    let verbalMatchingType;\n+    switch (stream.matching_type) {\n+      case 'OR': verbalMatchingType = 'at least one'; break;\n+      default:\n+      case 'AND': verbalMatchingType = 'all'; break;\n+    }\n+\n+    return (\n+      <span>\n+        Must match {verbalMatchingType} of the {stream.rules.length} configured stream{' '}\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+    );\n+  };\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <div className=\"stream-metadata\">\n+      <StreamThroughput streamId={stream.id} />. {_formatNumberOfStreamRules()}\n+\n+      {!isDefaultStream && (\n+        <>\n+          <span className=\"stream-rules-link\">\n+            <Button bsStyle=\"link\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3OTI3OA=="}, "originalCommit": {"oid": "08b3ba8464a127513157eaad9e04b74bf74cc3cf"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzAwNTkwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDozMToxNVrOFksyXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzo0Nzo0M1rOFkx3kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNjg0Nw==", "bodyText": "It looks like when trying to load the \"Manage rules\" page there's an error:\nObjects are not valid as a React child (found: object with keys {$$typeof, render, displayName, attrs, componentStyle, foldedComponentIds, styledComponentId, target, withComponent, warnTooManyClasses, toString}). If you meant to render a collection of children, use an array instead.\n    in templateFunction (created by StreamRulesEditor)\n    in h4 (created by Context.Consumer)\n    in StyledComponent (created by StreamRulesEditor__StreamAlertHeader)\n    in StreamRulesEditor__StreamAlertHeader (created by StreamRulesEditor)\n    in div (created by Panel)\n    in div (created by Panel)\n    in Panel (created by Context.Consumer)\n    in StyledComponent (created by Panel__StyledPanel)\n    in Panel__StyledPanel (created by StreamRulesEditor)\n    in div (created by Col)\n    in Col (created by StreamRulesEditor)\n    in div (created by Row)\n    in Row (created by StreamRulesEditor)\n    in StreamRulesEditor (created by StreamEditPage)", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374026847", "createdAt": "2020-02-03T10:31:15Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,83 +107,87 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <MatchIcon matches name=\"check\" /> This message would be routed to this stream!\n+          </>\n         );\n       }\n       return (\n-        <span>\n-          <Icon name=\"remove\" style={{ color: 'red' }} /> This message would not be routed to this stream.\n-        </span>\n+        <>\n+          <MatchIcon name=\"remove\" /> This message would not be routed to this stream.\n+        </>\n       );\n     }\n-    return ('Please load a message to check if it would match against these rules and therefore be routed into this stream.');\n+\n+    return (\n+      <>\n+        <MatchIcon empty name=\"exclamation-circle\" /> Please load a message in Step 1 above to check if it would match against these rules.\n+      </>\n+    );\n   };\n \n   render() {\n-    const styles = (this.state.matchData ? this._getListClassName(this.state.matchData) : 'info');\n-    if (this.state.stream && this.state.streamRuleTypes) {\n+    const { matchData, stream, streamRuleTypes } = this.state;\n+    const { currentUser, messageId, index } = this.props;\n+    const styles = (matchData ? this._getListClassName(matchData) : 'info');\n+\n+    if (stream && streamRuleTypes) {\n       return (\n-        <div className=\"row content\">\n-          <div className=\"col-md-12 streamrule-sample-message\">\n-            <h2>\n-              1. Load a message to test rules\n-            </h2>\n+        <Row className=\"content\">\n+          <Col md={12} className=\"streamrule-sample-message\">\n+            <h2>1. Load a message to test rules</h2>\n \n             <div className=\"stream-loader\">\n-              <LoaderTabs messageId={this.props.messageId} index={this.props.index} onMessageLoaded={this.onMessageLoaded} />\n-            </div>\n-\n-            <div className=\"spinner\" style={{ display: 'none' }}><h2><Icon name=\"spinner\" spin /> &nbsp;Loading message\n-            </h2>\n-            </div>\n-\n-            <div className=\"sample-message-display\" style={{ display: 'none', marginTop: '5px' }}>\n-              <strong>Next step:</strong>\n-              Add/delete/modify stream rules in step 2 and see if the example message would have been\n-              routed into the stream or not. Use the button on the right to add a stream rule.\n+              <LoaderTabs messageId={messageId}\n+                          index={index}\n+                          onMessageLoaded={this.onMessageLoaded} />\n             </div>\n \n             <hr />\n \n             <div className=\"buttons pull-right\">\n-              <button className=\"btn btn-success show-stream-rule\" onClick={this._onAddStreamRule}>\n+              <Button bsStyle=\"success\"\n+                      className=\"show-stream-rule\"\n+                      onClick={this._onAddStreamRule}>\n                 Add stream rule\n-              </button>\n+              </Button>\n               <StreamRuleForm ref={(newStreamRuleForm) => { this.newStreamRuleForm = newStreamRuleForm; }}\n                               title=\"New Stream Rule\"\n-                              streamRuleTypes={this.state.streamRuleTypes}\n+                              streamRuleTypes={streamRuleTypes}\n                               onSubmit={this._onStreamRuleFormSubmit} />\n             </div>\n \n-            <h2>\n-              2. Manage stream rules\n-            </h2>\n+            <h2>2. Manage stream rules</h2>\n \n-            {this._explainMatchResult()}\n+            <MatchingTypeSwitcher stream={stream} onChange={this.loadData} />\n+            <Panel bsStyle={styles}>\n+              <StreamAlertHeader>{this._explainMatchResult()}</StreamAlertHeader>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7607724bcc0501e937f8110f6fac4bc9a54de438"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExMDA5OQ==", "bodyText": "Bad parenthesis wrap in a styled-component \ud83d\ude29", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374110099", "createdAt": "2020-02-03T13:47:43Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,83 +107,87 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <MatchIcon matches name=\"check\" /> This message would be routed to this stream!\n+          </>\n         );\n       }\n       return (\n-        <span>\n-          <Icon name=\"remove\" style={{ color: 'red' }} /> This message would not be routed to this stream.\n-        </span>\n+        <>\n+          <MatchIcon name=\"remove\" /> This message would not be routed to this stream.\n+        </>\n       );\n     }\n-    return ('Please load a message to check if it would match against these rules and therefore be routed into this stream.');\n+\n+    return (\n+      <>\n+        <MatchIcon empty name=\"exclamation-circle\" /> Please load a message in Step 1 above to check if it would match against these rules.\n+      </>\n+    );\n   };\n \n   render() {\n-    const styles = (this.state.matchData ? this._getListClassName(this.state.matchData) : 'info');\n-    if (this.state.stream && this.state.streamRuleTypes) {\n+    const { matchData, stream, streamRuleTypes } = this.state;\n+    const { currentUser, messageId, index } = this.props;\n+    const styles = (matchData ? this._getListClassName(matchData) : 'info');\n+\n+    if (stream && streamRuleTypes) {\n       return (\n-        <div className=\"row content\">\n-          <div className=\"col-md-12 streamrule-sample-message\">\n-            <h2>\n-              1. Load a message to test rules\n-            </h2>\n+        <Row className=\"content\">\n+          <Col md={12} className=\"streamrule-sample-message\">\n+            <h2>1. Load a message to test rules</h2>\n \n             <div className=\"stream-loader\">\n-              <LoaderTabs messageId={this.props.messageId} index={this.props.index} onMessageLoaded={this.onMessageLoaded} />\n-            </div>\n-\n-            <div className=\"spinner\" style={{ display: 'none' }}><h2><Icon name=\"spinner\" spin /> &nbsp;Loading message\n-            </h2>\n-            </div>\n-\n-            <div className=\"sample-message-display\" style={{ display: 'none', marginTop: '5px' }}>\n-              <strong>Next step:</strong>\n-              Add/delete/modify stream rules in step 2 and see if the example message would have been\n-              routed into the stream or not. Use the button on the right to add a stream rule.\n+              <LoaderTabs messageId={messageId}\n+                          index={index}\n+                          onMessageLoaded={this.onMessageLoaded} />\n             </div>\n \n             <hr />\n \n             <div className=\"buttons pull-right\">\n-              <button className=\"btn btn-success show-stream-rule\" onClick={this._onAddStreamRule}>\n+              <Button bsStyle=\"success\"\n+                      className=\"show-stream-rule\"\n+                      onClick={this._onAddStreamRule}>\n                 Add stream rule\n-              </button>\n+              </Button>\n               <StreamRuleForm ref={(newStreamRuleForm) => { this.newStreamRuleForm = newStreamRuleForm; }}\n                               title=\"New Stream Rule\"\n-                              streamRuleTypes={this.state.streamRuleTypes}\n+                              streamRuleTypes={streamRuleTypes}\n                               onSubmit={this._onStreamRuleFormSubmit} />\n             </div>\n \n-            <h2>\n-              2. Manage stream rules\n-            </h2>\n+            <h2>2. Manage stream rules</h2>\n \n-            {this._explainMatchResult()}\n+            <MatchingTypeSwitcher stream={stream} onChange={this.loadData} />\n+            <Panel bsStyle={styles}>\n+              <StreamAlertHeader>{this._explainMatchResult()}</StreamAlertHeader>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNjg0Nw=="}, "originalCommit": {"oid": "7607724bcc0501e937f8110f6fac4bc9a54de438"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzAwODAyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDozMTo1N1rOFkszoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzozNzowNVrOFkxizw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNzE2OA==", "bodyText": "With the last changes this doesn't look right:", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374027168", "createdAt": "2020-02-03T10:31:57Z", "author": {"login": "edmundoa"}, "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import styled from 'styled-components';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaDataWrapper = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  let verbalMatchingType;\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  if (stream.is_default) {\n+    return 'The default stream contains all messages.';\n+  }\n+  if (stream.rules.length === 0) {\n+    return 'No configured rules.';\n+  }\n+\n+  switch (stream.matching_type) {\n+    case 'OR': verbalMatchingType = 'at least one'; break;\n+    default:\n+    case 'AND': verbalMatchingType = 'all'; break;\n+  }\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <StreamMetaDataWrapper>\n+      <StreamThroughput streamId={stream.id} />.\n+\n+      <span>\n+        &nbsp;Must match {verbalMatchingType} of the {stream.rules.length} configured stream&nbsp;\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+\n+      {!isDefaultStream && (\n+        <>\n+          <Button bsStyle=\"link\"\n+                  bsSize=\"xsmall\"\n+                  onClick={_onHandleToggle}>\n+            {toggleText} stream rules\n+          </Button>\n+\n+          <CollapsibleStreamRuleList key={`streamRules-${stream.id}`}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7607724bcc0501e937f8110f6fac4bc9a54de438"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDc4Mw==", "bodyText": "", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374104783", "createdAt": "2020-02-03T13:37:05Z", "author": {"login": "kyleknighted"}, "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import styled from 'styled-components';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaDataWrapper = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  let verbalMatchingType;\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  if (stream.is_default) {\n+    return 'The default stream contains all messages.';\n+  }\n+  if (stream.rules.length === 0) {\n+    return 'No configured rules.';\n+  }\n+\n+  switch (stream.matching_type) {\n+    case 'OR': verbalMatchingType = 'at least one'; break;\n+    default:\n+    case 'AND': verbalMatchingType = 'all'; break;\n+  }\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <StreamMetaDataWrapper>\n+      <StreamThroughput streamId={stream.id} />.\n+\n+      <span>\n+        &nbsp;Must match {verbalMatchingType} of the {stream.rules.length} configured stream&nbsp;\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+\n+      {!isDefaultStream && (\n+        <>\n+          <Button bsStyle=\"link\"\n+                  bsSize=\"xsmall\"\n+                  onClick={_onHandleToggle}>\n+            {toggleText} stream rules\n+          </Button>\n+\n+          <CollapsibleStreamRuleList key={`streamRules-${stream.id}`}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNzE2OA=="}, "originalCommit": {"oid": "7607724bcc0501e937f8110f6fac4bc9a54de438"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3945, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}