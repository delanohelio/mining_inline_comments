{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDQ4MTI0", "number": 7259, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1ODowNVrODaPl8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NjozNFrODaQfvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ1MDQxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1ODowNVrOFhFpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNjo1ODowNVrOFhFpGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDIzOTc2OQ==", "bodyText": "How about adding LOG statements to the catch blocks? Might help debugging this in the future.", "url": "https://github.com/Graylog2/graylog2-server/pull/7259#discussion_r370239769", "createdAt": "2020-01-23T16:58:05Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.graylog2.database;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.RetryerBuilder;\n+import com.github.rholder.retry.StopStrategies;\n+import com.mongodb.DuplicateKeyException;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+public class MongoDBUpsertRetryer {\n+    public static <T> T run(Callable<T> c) {\n+        final Retryer<T> retryer = RetryerBuilder.<T>newBuilder()\n+                .retryIfException(t -> t instanceof DuplicateKeyException && ((DuplicateKeyException) t).getErrorCode() == 11000)\n+                .withStopStrategy(StopStrategies.stopAfterAttempt(1))\n+                .build();\n+        try {\n+            return retryer.call(c);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe43ed29120d87803da8a8ecc9c76d1d8896d59"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODQ5OTg2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNDowNFrOFhGIfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzoxNDowNFrOFhGIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI0NzgwNA==", "bodyText": "Can you please add a comment to this class that explains why we built this? (including relevant links) Thank you!", "url": "https://github.com/Graylog2/graylog2-server/pull/7259#discussion_r370247804", "createdAt": "2020-01-23T17:14:04Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.graylog2.database;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.RetryerBuilder;\n+import com.github.rholder.retry.StopStrategies;\n+import com.mongodb.DuplicateKeyException;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+public class MongoDBUpsertRetryer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe43ed29120d87803da8a8ecc9c76d1d8896d59"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODU5NTAxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NToyNVrOFhHD1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NToyNVrOFhHD1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2Mjk5Ng==", "bodyText": "Should we use e.getCause() here as well? Otherwise we will put the RetryException as cause into the RuntimeException.", "url": "https://github.com/Graylog2/graylog2-server/pull/7259#discussion_r370262996", "createdAt": "2020-01-23T17:45:25Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.graylog2.database;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.RetryerBuilder;\n+import com.github.rholder.retry.StopStrategies;\n+import com.mongodb.DuplicateKeyException;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+public class MongoDBUpsertRetryer {\n+    public static <T> T run(Callable<T> c) {\n+        final Retryer<T> retryer = RetryerBuilder.<T>newBuilder()\n+                .retryIfException(t -> t instanceof DuplicateKeyException && ((DuplicateKeyException) t).getErrorCode() == 11000)\n+                .withStopStrategy(StopStrategies.stopAfterAttempt(1))\n+                .build();\n+        try {\n+            return retryer.call(c);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(e);\n+        } catch (RetryException e) {\n+            if (e.getCause() instanceof DuplicateKeyException) {\n+                throw (DuplicateKeyException) e.getCause();\n+            }\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe43ed29120d87803da8a8ecc9c76d1d8896d59"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODU5ODM3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NjozNFrOFhHF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0NjozNFrOFhHF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MzUxOQ==", "bodyText": "Should we use e.getCause() here to make sure we don't put the ExecutionException as cause into the RuntimeException?", "url": "https://github.com/Graylog2/graylog2-server/pull/7259#discussion_r370263519", "createdAt": "2020-01-23T17:46:34Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/database/MongoDBUpsertRetryer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package org.graylog2.database;\n+\n+import com.github.rholder.retry.RetryException;\n+import com.github.rholder.retry.Retryer;\n+import com.github.rholder.retry.RetryerBuilder;\n+import com.github.rholder.retry.StopStrategies;\n+import com.mongodb.DuplicateKeyException;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+\n+public class MongoDBUpsertRetryer {\n+    public static <T> T run(Callable<T> c) {\n+        final Retryer<T> retryer = RetryerBuilder.<T>newBuilder()\n+                .retryIfException(t -> t instanceof DuplicateKeyException && ((DuplicateKeyException) t).getErrorCode() == 11000)\n+                .withStopStrategy(StopStrategies.stopAfterAttempt(1))\n+                .build();\n+        try {\n+            return retryer.call(c);\n+        } catch (ExecutionException e) {\n+            throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe43ed29120d87803da8a8ecc9c76d1d8896d59"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3933, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}