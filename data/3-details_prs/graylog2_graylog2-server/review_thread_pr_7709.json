{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDg2MDk5", "number": 7709, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxODo1MVrODyHu5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToyMDoyNlrOD1L0AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgyMDg2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/MessagesRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxODo1MVrOGF-0oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMToxNlrOGGBjfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTM0NQ==", "bodyText": "This could be replaced by using the LinkedHashSetUtil#linkedHashSetOf() method. I think I saw a few more places where you could use the newly introduced util class.", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408925345", "createdAt": "2020-04-15T15:18:51Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/MessagesRequest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.google.auto.value.AutoValue;\n+import org.graylog.plugins.views.search.engine.BackendQuery;\n+import org.graylog.plugins.views.search.searchtypes.Sort;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+\n+import javax.validation.ValidationException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AutoValue\n+@JsonDeserialize(builder = MessagesRequest.Builder.class)\n+public abstract class MessagesRequest {\n+    public abstract Optional<TimeRange> timeRange();\n+\n+    public abstract Optional<BackendQuery> queryString();\n+\n+    public abstract Optional<BackendQuery> additionalQueryString();\n+\n+    public abstract Optional<Set<String>> streams();\n+\n+    public abstract Optional<LinkedHashSet<String>> fieldsInOrder();\n+\n+    public abstract Optional<LinkedHashSet<Sort>> sort();\n+\n+    public abstract Optional<Integer> chunkSize();\n+\n+    public static MessagesRequest empty() {\n+        return builder().build();\n+    }\n+\n+    public static Builder builder() {\n+        return Builder.create();\n+    }\n+\n+    public abstract Builder toBuilder();\n+\n+    public void ensureCompleteness() {\n+        List<String> missingFields = new ArrayList<>();\n+        if (!timeRange().isPresent())\n+            missingFields.add(\"timeRange\");\n+        if (!queryString().isPresent())\n+            missingFields.add(\"queryString\");\n+        if (!streams().isPresent() || streams().get().isEmpty())\n+            missingFields.add(\"streams\");\n+        if (!fieldsInOrder().isPresent() || fieldsInOrder().get().isEmpty())\n+            missingFields.add(\"fieldsInOrder\");\n+        if (!sort().isPresent())\n+            missingFields.add(\"sort\");\n+\n+        if (!missingFields.isEmpty()) {\n+            String message = \"Missing fields: \" + missingFields;\n+            throw new ValidationException(message);\n+        }\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+        @JsonProperty(\"timerange\")\n+        public abstract Builder timeRange(TimeRange timeRange);\n+\n+        @JsonProperty\n+        public abstract Builder streams(Set<String> streams);\n+\n+        @JsonProperty(\"query_string\")\n+        public abstract Builder queryString(BackendQuery queryString);\n+\n+        public abstract Builder additionalQueryString(BackendQuery queryString);\n+\n+        @JsonProperty(\"fields_in_order\")\n+        public abstract Builder fieldsInOrder(LinkedHashSet<String> fieldsInOrder);\n+\n+        public Builder fieldsInOrder(String... fieldsInOrder) {\n+            LinkedHashSet<String> fields = Arrays.stream(fieldsInOrder).collect(Collectors.toCollection(LinkedHashSet::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDEwOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408970108", "createdAt": "2020-04-15T16:21:16Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/MessagesRequest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.google.auto.value.AutoValue;\n+import org.graylog.plugins.views.search.engine.BackendQuery;\n+import org.graylog.plugins.views.search.searchtypes.Sort;\n+import org.graylog2.plugin.indexer.searches.timeranges.TimeRange;\n+\n+import javax.validation.ValidationException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+@AutoValue\n+@JsonDeserialize(builder = MessagesRequest.Builder.class)\n+public abstract class MessagesRequest {\n+    public abstract Optional<TimeRange> timeRange();\n+\n+    public abstract Optional<BackendQuery> queryString();\n+\n+    public abstract Optional<BackendQuery> additionalQueryString();\n+\n+    public abstract Optional<Set<String>> streams();\n+\n+    public abstract Optional<LinkedHashSet<String>> fieldsInOrder();\n+\n+    public abstract Optional<LinkedHashSet<Sort>> sort();\n+\n+    public abstract Optional<Integer> chunkSize();\n+\n+    public static MessagesRequest empty() {\n+        return builder().build();\n+    }\n+\n+    public static Builder builder() {\n+        return Builder.create();\n+    }\n+\n+    public abstract Builder toBuilder();\n+\n+    public void ensureCompleteness() {\n+        List<String> missingFields = new ArrayList<>();\n+        if (!timeRange().isPresent())\n+            missingFields.add(\"timeRange\");\n+        if (!queryString().isPresent())\n+            missingFields.add(\"queryString\");\n+        if (!streams().isPresent() || streams().get().isEmpty())\n+            missingFields.add(\"streams\");\n+        if (!fieldsInOrder().isPresent() || fieldsInOrder().get().isEmpty())\n+            missingFields.add(\"fieldsInOrder\");\n+        if (!sort().isPresent())\n+            missingFields.add(\"sort\");\n+\n+        if (!missingFields.isEmpty()) {\n+            String message = \"Missing fields: \" + missingFields;\n+            throw new ValidationException(message);\n+        }\n+    }\n+\n+    @AutoValue.Builder\n+    public abstract static class Builder {\n+        @JsonProperty(\"timerange\")\n+        public abstract Builder timeRange(TimeRange timeRange);\n+\n+        @JsonProperty\n+        public abstract Builder streams(Set<String> streams);\n+\n+        @JsonProperty(\"query_string\")\n+        public abstract Builder queryString(BackendQuery queryString);\n+\n+        public abstract Builder additionalQueryString(BackendQuery queryString);\n+\n+        @JsonProperty(\"fields_in_order\")\n+        public abstract Builder fieldsInOrder(LinkedHashSet<String> fieldsInOrder);\n+\n+        public Builder fieldsInOrder(String... fieldsInOrder) {\n+            LinkedHashSet<String> fields = Arrays.stream(fieldsInOrder).collect(Collectors.toCollection(LinkedHashSet::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNTM0NQ=="}, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgyNTY4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/es/ElasticsearchExportBackend.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToxOTo0MVrOGF-3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMToyM1rOGGBjyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjA5Ng==", "bodyText": "How about using Message.FIELD_GL2_MESSAGE_ID here instead of hardcoding the field name here?", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408926096", "createdAt": "2020-04-15T15:19:41Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/es/ElasticsearchExportBackend.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export.es;\n+\n+import io.searchbox.client.JestClient;\n+import io.searchbox.core.Search;\n+import io.searchbox.core.SearchResult;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortBuilders;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.export.MessagesRequest;\n+import org.graylog.plugins.views.search.export.SimpleMessage;\n+import org.graylog.plugins.views.search.export.SimpleMessageChunk;\n+import org.graylog.plugins.views.search.searchtypes.Sort;\n+import org.graylog2.indexer.IndexHelper;\n+import org.graylog2.indexer.IndexMapping;\n+import org.graylog2.indexer.cluster.jest.JestUtils;\n+import org.graylog2.plugin.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Consumer;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toCollection;\n+import static org.elasticsearch.index.query.QueryBuilders.boolQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.termsQuery;\n+\n+public class ElasticsearchExportBackend implements ExportBackend {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchExportBackend.class);\n+\n+    private static final int DEFAULT_CHUNK_SIZE = 1000;\n+    private static final String TIEBREAKER_FIELD = \"gl2_message_id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDE4Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408970186", "createdAt": "2020-04-15T16:21:23Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/es/ElasticsearchExportBackend.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export.es;\n+\n+import io.searchbox.client.JestClient;\n+import io.searchbox.core.Search;\n+import io.searchbox.core.SearchResult;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortBuilders;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.export.MessagesRequest;\n+import org.graylog.plugins.views.search.export.SimpleMessage;\n+import org.graylog.plugins.views.search.export.SimpleMessageChunk;\n+import org.graylog.plugins.views.search.searchtypes.Sort;\n+import org.graylog2.indexer.IndexHelper;\n+import org.graylog2.indexer.IndexMapping;\n+import org.graylog2.indexer.cluster.jest.JestUtils;\n+import org.graylog2.plugin.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Consumer;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toCollection;\n+import static org.elasticsearch.index.query.QueryBuilders.boolQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.termsQuery;\n+\n+public class ElasticsearchExportBackend implements ExportBackend {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchExportBackend.class);\n+\n+    private static final int DEFAULT_CHUNK_SIZE = 1000;\n+    private static final String TIEBREAKER_FIELD = \"gl2_message_id\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjA5Ng=="}, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODgyOTc3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/ChunkedRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMDozMVrOGF-6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMjowNFrOGGBlgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjc2MQ==", "bodyText": "Is this a typo or intentional? runAsyncc with a double c", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408926761", "createdAt": "2020-04-15T15:20:31Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/ChunkedRunner.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.glassfish.jersey.server.ChunkedOutput;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Consumer;\n+\n+public class ChunkedRunner {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ChunkedRunner.class);\n+\n+    private final ChunkedOutput<SimpleMessageChunk> output = new ChunkedOutput<>(SimpleMessageChunk.class);\n+\n+    public static ChunkedOutput<SimpleMessageChunk> runAsyncc(Consumer<Consumer<SimpleMessageChunk>> call) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDYyNQ==", "bodyText": "HOW DARE YOU DOUBT MY SPELLING!\nwill fix...", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408970625", "createdAt": "2020-04-15T16:22:04Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/ChunkedRunner.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import org.glassfish.jersey.server.ChunkedOutput;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Consumer;\n+\n+public class ChunkedRunner {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ChunkedRunner.class);\n+\n+    private final ChunkedOutput<SimpleMessageChunk> output = new ChunkedOutput<>(SimpleMessageChunk.class);\n+\n+    public static ChunkedOutput<SimpleMessageChunk> runAsyncc(Consumer<Consumer<SimpleMessageChunk>> call) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyNjc2MQ=="}, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODg3MzM5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/elasticsearch/ElasticsearchQueryString.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyOTozMVrOGF_VcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMjoxNFrOGGBl9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMzc0NA==", "bodyText": "How about trimming the queryString() here to handle typos like \" *\" and similar?", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408933744", "createdAt": "2020-04-15T15:29:31Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/elasticsearch/ElasticsearchQueryString.java", "diffHunk": "@@ -30,12 +31,21 @@\n \n     public static final String NAME = \"elasticsearch\";\n \n+    public static ElasticsearchQueryString empty() {\n+        return ElasticsearchQueryString.builder().queryString(\"\").build();\n+    }\n+\n     @Override\n     public abstract String type();\n \n     @JsonProperty\n     public abstract String queryString();\n \n+    @JsonIgnore\n+    public boolean isEmpty() {\n+        return queryString().isEmpty() || queryString().equals(\"*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDc0MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408970740", "createdAt": "2020-04-15T16:22:14Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/elasticsearch/ElasticsearchQueryString.java", "diffHunk": "@@ -30,12 +31,21 @@\n \n     public static final String NAME = \"elasticsearch\";\n \n+    public static ElasticsearchQueryString empty() {\n+        return ElasticsearchQueryString.builder().queryString(\"\").build();\n+    }\n+\n     @Override\n     public abstract String type();\n \n     @JsonProperty\n     public abstract String queryString();\n \n+    @JsonIgnore\n+    public boolean isEmpty() {\n+        return queryString().isEmpty() || queryString().equals(\"*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzMzc0NA=="}, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODkyMzkyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/MessagesResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0MDoyMFrOGF_1DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMjozM1rOGGBm1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MTgzNw==", "bodyText": "This class seems to be unused.", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408941837", "createdAt": "2020-04-15T15:40:20Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/MessagesResult.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@AutoValue\n+public abstract class MessagesResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MDk2Nw==", "bodyText": "Holy shit. All this time..", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408970967", "createdAt": "2020-04-15T16:22:33Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/MessagesResult.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export;\n+\n+import com.google.auto.value.AutoValue;\n+\n+@AutoValue\n+public abstract class MessagesResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MTgzNw=="}, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODk1MzgwOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/es/ElasticsearchExportBackend.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0NzowNFrOGGAHtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyMzoxM1rOGGBorA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NjYxMw==", "bodyText": "The leading wildcard handling probably needs to be enabled.", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408946613", "createdAt": "2020-04-15T15:47:04Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/es/ElasticsearchExportBackend.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export.es;\n+\n+import io.searchbox.client.JestClient;\n+import io.searchbox.core.Search;\n+import io.searchbox.core.SearchResult;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortBuilders;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.export.MessagesRequest;\n+import org.graylog.plugins.views.search.export.SimpleMessage;\n+import org.graylog.plugins.views.search.export.SimpleMessageChunk;\n+import org.graylog.plugins.views.search.searchtypes.Sort;\n+import org.graylog2.indexer.IndexHelper;\n+import org.graylog2.indexer.IndexMapping;\n+import org.graylog2.indexer.cluster.jest.JestUtils;\n+import org.graylog2.plugin.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Consumer;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toCollection;\n+import static org.elasticsearch.index.query.QueryBuilders.boolQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.termsQuery;\n+\n+public class ElasticsearchExportBackend implements ExportBackend {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchExportBackend.class);\n+\n+    private static final int DEFAULT_CHUNK_SIZE = 1000;\n+    private static final String TIEBREAKER_FIELD = \"gl2_message_id\";\n+\n+    private final JestClient jestClient;\n+    private final IndexLookup indexLookup;\n+\n+    @Inject\n+    public ElasticsearchExportBackend(JestClient jestClient, IndexLookup indexLookup) {\n+        this.jestClient = jestClient;\n+        this.indexLookup = indexLookup;\n+    }\n+\n+    @Override\n+    public void run(MessagesRequest request, Consumer<SimpleMessageChunk> chunkCollector) {\n+        request.ensureCompleteness();\n+\n+        fetchResults(request, chunkCollector);\n+    }\n+\n+    private void fetchResults(MessagesRequest request, Consumer<SimpleMessageChunk> chunkCollector) {\n+        Object[] searchAfterValues = null;\n+        boolean isFirstChunk = true;\n+\n+        while (true) {\n+            List<SearchResult.Hit<Map, Void>> hits = search(request, searchAfterValues);\n+\n+            if (hits.isEmpty()) {\n+                return;\n+            }\n+\n+            boolean success = publishChunk(chunkCollector, hits, request.fieldsInOrder().get(), isFirstChunk);\n+            if (!success) {\n+                return;\n+            }\n+\n+            searchAfterValues = lastHitSortFrom(hits);\n+            isFirstChunk = false;\n+        }\n+    }\n+\n+    private List<SearchResult.Hit<Map, Void>> search(MessagesRequest request, Object[] searchAfterValues) {\n+        Search search = buildSearchRequest(request, searchAfterValues);\n+\n+        SearchResult result = JestUtils.execute(jestClient, search, () -> \"Failed to execute Search After request\");\n+\n+        return result.getHits(Map.class, false);\n+    }\n+\n+    private Search buildSearchRequest(MessagesRequest request, Object[] searchAfterValues) {\n+        SearchSourceBuilder ssb = searchSourceBuilderFrom(request, searchAfterValues);\n+\n+        Set<String> indices = indicesFor(request);\n+\n+        return new Search.Builder(ssb.toString())\n+                .addType(IndexMapping.TYPE_MESSAGE)\n+                .allowNoIndices(false)\n+                .ignoreUnavailable(false)\n+                .addIndex(indices)\n+                .build();\n+    }\n+\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    private SearchSourceBuilder searchSourceBuilderFrom(MessagesRequest request, Object[] searchAfterValues) {\n+        QueryBuilder query = queryFrom(request);\n+\n+        SearchSourceBuilder ssb = new SearchSourceBuilder()\n+                .query(query)\n+                .size(request.chunkSize().orElse(DEFAULT_CHUNK_SIZE));\n+\n+        addSort(ssb, request.sort().get());\n+\n+        if (searchAfterValues != null) {\n+            ssb.searchAfter(searchAfterValues);\n+        }\n+        return ssb;\n+    }\n+\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    private QueryBuilder queryFrom(MessagesRequest request) {\n+        ElasticsearchQueryString backendQuery = (ElasticsearchQueryString) request.queryString().get();\n+\n+        QueryBuilder query = backendQuery.isEmpty() ?\n+                matchAllQuery() :\n+                queryStringQuery(backendQuery.queryString());//.allowLeadingWildcard(allowLeadingWildcardSearches);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3MTQzNg==", "bodyText": "\ud83d\ude2c", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r408971436", "createdAt": "2020-04-15T16:23:13Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog/plugins/views/search/export/es/ElasticsearchExportBackend.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.plugins.views.search.export.es;\n+\n+import io.searchbox.client.JestClient;\n+import io.searchbox.core.Search;\n+import io.searchbox.core.SearchResult;\n+import org.elasticsearch.index.query.BoolQueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.search.builder.SearchSourceBuilder;\n+import org.elasticsearch.search.sort.SortBuilders;\n+import org.elasticsearch.search.sort.SortOrder;\n+import org.graylog.plugins.views.search.elasticsearch.ElasticsearchQueryString;\n+import org.graylog.plugins.views.search.elasticsearch.IndexLookup;\n+import org.graylog.plugins.views.search.export.ExportBackend;\n+import org.graylog.plugins.views.search.export.MessagesRequest;\n+import org.graylog.plugins.views.search.export.SimpleMessage;\n+import org.graylog.plugins.views.search.export.SimpleMessageChunk;\n+import org.graylog.plugins.views.search.searchtypes.Sort;\n+import org.graylog2.indexer.IndexHelper;\n+import org.graylog2.indexer.IndexMapping;\n+import org.graylog2.indexer.cluster.jest.JestUtils;\n+import org.graylog2.plugin.Message;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.inject.Inject;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Consumer;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toCollection;\n+import static org.elasticsearch.index.query.QueryBuilders.boolQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.queryStringQuery;\n+import static org.elasticsearch.index.query.QueryBuilders.termsQuery;\n+\n+public class ElasticsearchExportBackend implements ExportBackend {\n+    private static final Logger LOG = LoggerFactory.getLogger(ElasticsearchExportBackend.class);\n+\n+    private static final int DEFAULT_CHUNK_SIZE = 1000;\n+    private static final String TIEBREAKER_FIELD = \"gl2_message_id\";\n+\n+    private final JestClient jestClient;\n+    private final IndexLookup indexLookup;\n+\n+    @Inject\n+    public ElasticsearchExportBackend(JestClient jestClient, IndexLookup indexLookup) {\n+        this.jestClient = jestClient;\n+        this.indexLookup = indexLookup;\n+    }\n+\n+    @Override\n+    public void run(MessagesRequest request, Consumer<SimpleMessageChunk> chunkCollector) {\n+        request.ensureCompleteness();\n+\n+        fetchResults(request, chunkCollector);\n+    }\n+\n+    private void fetchResults(MessagesRequest request, Consumer<SimpleMessageChunk> chunkCollector) {\n+        Object[] searchAfterValues = null;\n+        boolean isFirstChunk = true;\n+\n+        while (true) {\n+            List<SearchResult.Hit<Map, Void>> hits = search(request, searchAfterValues);\n+\n+            if (hits.isEmpty()) {\n+                return;\n+            }\n+\n+            boolean success = publishChunk(chunkCollector, hits, request.fieldsInOrder().get(), isFirstChunk);\n+            if (!success) {\n+                return;\n+            }\n+\n+            searchAfterValues = lastHitSortFrom(hits);\n+            isFirstChunk = false;\n+        }\n+    }\n+\n+    private List<SearchResult.Hit<Map, Void>> search(MessagesRequest request, Object[] searchAfterValues) {\n+        Search search = buildSearchRequest(request, searchAfterValues);\n+\n+        SearchResult result = JestUtils.execute(jestClient, search, () -> \"Failed to execute Search After request\");\n+\n+        return result.getHits(Map.class, false);\n+    }\n+\n+    private Search buildSearchRequest(MessagesRequest request, Object[] searchAfterValues) {\n+        SearchSourceBuilder ssb = searchSourceBuilderFrom(request, searchAfterValues);\n+\n+        Set<String> indices = indicesFor(request);\n+\n+        return new Search.Builder(ssb.toString())\n+                .addType(IndexMapping.TYPE_MESSAGE)\n+                .allowNoIndices(false)\n+                .ignoreUnavailable(false)\n+                .addIndex(indices)\n+                .build();\n+    }\n+\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    private SearchSourceBuilder searchSourceBuilderFrom(MessagesRequest request, Object[] searchAfterValues) {\n+        QueryBuilder query = queryFrom(request);\n+\n+        SearchSourceBuilder ssb = new SearchSourceBuilder()\n+                .query(query)\n+                .size(request.chunkSize().orElse(DEFAULT_CHUNK_SIZE));\n+\n+        addSort(ssb, request.sort().get());\n+\n+        if (searchAfterValues != null) {\n+            ssb.searchAfter(searchAfterValues);\n+        }\n+        return ssb;\n+    }\n+\n+    @SuppressWarnings(\"OptionalGetWithoutIsPresent\")\n+    private QueryBuilder queryFrom(MessagesRequest request) {\n+        ElasticsearchQueryString backendQuery = (ElasticsearchQueryString) request.queryString().get();\n+\n+        QueryBuilder query = backendQuery.isEmpty() ?\n+                matchAllQuery() :\n+                queryStringQuery(backendQuery.queryString());//.allowLeadingWildcard(allowLeadingWildcardSearches);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NjYxMw=="}, "originalCommit": {"oid": "41ca176aee268d0432b6fd8e03c88a66ccf98c33"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDkwNjYzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/Select.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxMToxMlrOGKfFqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyMTo0MVrOGKkOSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODI5OQ==", "bodyText": "Extracting the props makes it harder to see how the effective props look like. Instead we could leave the structure as before (with inline props next to the component) and do something like: const Component = allowOptionCreation ? CreatableSelect : ReactSelect; and render <Component ... later.", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r413648299", "createdAt": "2020-04-23T09:11:12Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/Select.jsx", "diffHunk": "@@ -115,24 +121,34 @@ const Select = ({ components, styles, ignoreCase = true, ignoreAccents = false,\n     valueContainer,\n   };\n   const filterOption = createFilter({ ignoreCase, ignoreAccents });\n+  const selectProps = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ae146dca6ac09747e2fe8148d11e5447ac9693a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMjQyNA==", "bodyText": "Thanks, this is a very good suggestion.", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r413732424", "createdAt": "2020-04-23T11:21:41Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/Select.jsx", "diffHunk": "@@ -115,24 +121,34 @@ const Select = ({ components, styles, ignoreCase = true, ignoreAccents = false,\n     valueContainer,\n   };\n   const filterOption = createFilter({ ignoreCase, ignoreAccents });\n+  const selectProps = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0ODI5OQ=="}, "originalCommit": {"oid": "0ae146dca6ac09747e2fe8148d11e5447ac9693a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDk0MTQ4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/csvexport/startDownload.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxOToxMVrOGKfbRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToxOToxMVrOGKfbRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY1MzgzMQ==", "bodyText": "Should we move this and the corresponding call for a search to the strategies as well?", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r413653831", "createdAt": "2020-04-23T09:19:11Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/searchbar/csvexport/startDownload.js", "diffHunk": "@@ -0,0 +1,64 @@\n+// @flow strict\n+import { Set } from 'immutable';\n+\n+import { exportSearchMessages, exportSearchTypeMessages, type ExportPayload } from 'util/MessagesExportUtils';\n+import StringUtils from 'util/StringUtils';\n+\n+import MessageSortConfig from 'views/logic/searchtypes/messages/MessageSortConfig';\n+import Query from 'views/logic/queries/Query';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+import View from 'views/logic/views/View';\n+import Widget from 'views/logic/widgets/Widget';\n+import ViewTypeLabel from 'views/components/ViewTypeLabel';\n+import SearchExecutionState from 'views/logic/search/SearchExecutionState';\n+\n+const _exportOnDashboard = (defaultExportPayload: ExportPayload, searchType: any, searchId: string, filename: string) => {\n+  if (!searchType) {\n+    throw new Error('CSV exports on a dashboard require a selected widget!');\n+  }\n+  return exportSearchTypeMessages(defaultExportPayload, searchId, searchType.id, filename);\n+};\n+\n+const _exportOnSearchPage = (defaultExportPayload: ExportPayload, searchQueries: Set<Query>, searchType: ?any, searchId: string, filename: string) => {\n+  if (searchQueries.size !== 1) {\n+    throw new Error('Searches must only have a single query!');\n+  }\n+  if (searchType) {\n+    return exportSearchTypeMessages(defaultExportPayload, searchId, searchType.id, filename);\n+  }\n+  return exportSearchMessages(defaultExportPayload, searchId, filename);\n+};\n+\n+const startDownload = (view: View, executionState: SearchExecutionState, selectedWidget: ?Widget, selectedFields: { field: string }[], selectedSort: SortConfig[], limit: ?number) => {\n+  const defaultExportPayload = {\n+    execution_state: executionState,\n+    fields_in_order: selectedFields.map((field) => field.field),\n+    sort: selectedSort.map((sortConfig) => new MessageSortConfig(sortConfig.field, sortConfig.direction)),\n+    limit,\n+  };\n+  let filename = 'search-result';\n+  let searchType;\n+\n+  if (selectedWidget) {\n+    const widgetTitle = view.getWidgetTitleByWidget(selectedWidget);\n+    filename = `${widgetTitle}-${filename}`;\n+    searchType = view.getSearchTypeByWidgetId(selectedWidget.id);\n+  } else {\n+    const viewTitle = view.title || `Untitled ${ViewTypeLabel({ type: view.type, capitalize: true })}`;\n+    filename = `${viewTitle}-${filename}`;\n+  }\n+\n+  const filenameWithoutSpaces = StringUtils.replaceSpaces(filename, '-');\n+\n+  if (view.type === View.Type.Dashboard) {\n+    return _exportOnDashboard(defaultExportPayload, searchType, view.search.id, filenameWithoutSpaces);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129f0cad1811bf36655af50b23adbe3f3027585a"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDk0NjU2OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/searchbar/csvexport/CSVExportSettings.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToyMDoyNlrOGKfepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOToyMDoyNlrOGKfepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY1NDY5Mw==", "bodyText": "We should import this as\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import React from 'react';\n          \n          \n            \n            import * as React from 'react';\n          \n      \n    \n    \n  \n\nSo we do not get only the default export.", "url": "https://github.com/Graylog2/graylog2-server/pull/7709#discussion_r413654693", "createdAt": "2020-04-23T09:20:26Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/searchbar/csvexport/CSVExportSettings.jsx", "diffHunk": "@@ -0,0 +1,107 @@\n+// @flow strict\n+import React from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129f0cad1811bf36655af50b23adbe3f3027585a"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3845, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}