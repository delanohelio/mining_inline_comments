{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MjQ2MzYz", "number": 8498, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDoxNTowNlrOEMGO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo0NDo0M1rOEMZDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTIwNDk2OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDoxNTowNlrOGuAmwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToyODozMVrOGuf0CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5NzYwMA==", "bodyText": "I would suggest to extract RestClientBuilder to a variable. That would make it easier to see that all the configuration happens on the low level client builder.", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r450897600", "createdAt": "2020-07-07T14:15:06Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.apache.http.HttpHost;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RequestOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog2.indexer.IndexNotFoundException;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class ElasticsearchClient {\n+    private final RestHighLevelClient client;\n+\n+    @Inject\n+    public ElasticsearchClient(@Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                               @Named(\"elasticsearch_connect_timeout\") Duration elasticsearchConnectTimeout,\n+                               @Named(\"elasticsearch_socket_timeout\") Duration elasticsearchSocketTimeout,\n+                               @Named(\"elasticsearch_idle_timeout\") Duration elasticsearchIdleTimeout,\n+                               @Named(\"elasticsearch_max_total_connections\") int elasticsearchMaxTotalConnections,\n+                               @Named(\"elasticsearch_max_total_connections_per_route\") int elasticsearchMaxTotalConnectionsPerRoute,\n+                               @Named(\"elasticsearch_max_retries\") int elasticsearchMaxRetries,\n+                               @Named(\"elasticsearch_discovery_enabled\") boolean discoveryEnabled,\n+                               @Named(\"elasticsearch_discovery_filter\") @Nullable String discoveryFilter,\n+                               @Named(\"elasticsearch_discovery_frequency\") Duration discoveryFrequency,\n+                               @Named(\"elasticsearch_discovery_default_scheme\") String defaultSchemeForDiscoveredNodes,\n+                               @Named(\"elasticsearch_compression_enabled\") boolean compressionEnabled) {\n+        this.client = new RestHighLevelClient(RestClient.builder(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwODkwNA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r451408904", "createdAt": "2020-07-08T09:28:31Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.apache.http.HttpHost;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RequestOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog2.indexer.IndexNotFoundException;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class ElasticsearchClient {\n+    private final RestHighLevelClient client;\n+\n+    @Inject\n+    public ElasticsearchClient(@Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                               @Named(\"elasticsearch_connect_timeout\") Duration elasticsearchConnectTimeout,\n+                               @Named(\"elasticsearch_socket_timeout\") Duration elasticsearchSocketTimeout,\n+                               @Named(\"elasticsearch_idle_timeout\") Duration elasticsearchIdleTimeout,\n+                               @Named(\"elasticsearch_max_total_connections\") int elasticsearchMaxTotalConnections,\n+                               @Named(\"elasticsearch_max_total_connections_per_route\") int elasticsearchMaxTotalConnectionsPerRoute,\n+                               @Named(\"elasticsearch_max_retries\") int elasticsearchMaxRetries,\n+                               @Named(\"elasticsearch_discovery_enabled\") boolean discoveryEnabled,\n+                               @Named(\"elasticsearch_discovery_filter\") @Nullable String discoveryFilter,\n+                               @Named(\"elasticsearch_discovery_frequency\") Duration discoveryFrequency,\n+                               @Named(\"elasticsearch_discovery_default_scheme\") String defaultSchemeForDiscoveredNodes,\n+                               @Named(\"elasticsearch_compression_enabled\") boolean compressionEnabled) {\n+        this.client = new RestHighLevelClient(RestClient.builder(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5NzYwMA=="}, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMzNzI2OnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0Mjo0N1rOGuB5dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToyOTo0M1rOGuf2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODc3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (result.getResponses()[0].getResponse() == null) {\n          \n          \n            \n                        throw exceptionFrom(result.getResponses()[0].getFailure(), errorMessage);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return result.getResponses()[0].getResponse();\n          \n          \n            \n                   final MultiSearchResponse.Item firstResponseItem = result.getResponses()[0];\n          \n          \n            \n                    \n          \n          \n            \n                    if (firstResponseItem.getResponse() == null) {\n          \n          \n            \n                        throw exceptionFrom(firstResponseItem.getFailure(), errorMessage);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return firstResponseItem.getResponse();", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r450918775", "createdAt": "2020-07-07T14:42:47Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.apache.http.HttpHost;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RequestOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog2.indexer.IndexNotFoundException;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class ElasticsearchClient {\n+    private final RestHighLevelClient client;\n+\n+    @Inject\n+    public ElasticsearchClient(@Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                               @Named(\"elasticsearch_connect_timeout\") Duration elasticsearchConnectTimeout,\n+                               @Named(\"elasticsearch_socket_timeout\") Duration elasticsearchSocketTimeout,\n+                               @Named(\"elasticsearch_idle_timeout\") Duration elasticsearchIdleTimeout,\n+                               @Named(\"elasticsearch_max_total_connections\") int elasticsearchMaxTotalConnections,\n+                               @Named(\"elasticsearch_max_total_connections_per_route\") int elasticsearchMaxTotalConnectionsPerRoute,\n+                               @Named(\"elasticsearch_max_retries\") int elasticsearchMaxRetries,\n+                               @Named(\"elasticsearch_discovery_enabled\") boolean discoveryEnabled,\n+                               @Named(\"elasticsearch_discovery_filter\") @Nullable String discoveryFilter,\n+                               @Named(\"elasticsearch_discovery_frequency\") Duration discoveryFrequency,\n+                               @Named(\"elasticsearch_discovery_default_scheme\") String defaultSchemeForDiscoveredNodes,\n+                               @Named(\"elasticsearch_compression_enabled\") boolean compressionEnabled) {\n+        this.client = new RestHighLevelClient(RestClient.builder(\n+                elasticsearchHosts.stream().map(uri -> new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme())).toArray(HttpHost[]::new)\n+        ).setRequestConfigCallback(requestConfig -> requestConfig\n+                .setConnectTimeout(Math.toIntExact(elasticsearchConnectTimeout.toMilliseconds()))\n+                .setSocketTimeout(Math.toIntExact(elasticsearchSocketTimeout.toMilliseconds()))\n+        ).setHttpClientConfigCallback(httpClientConfig -> httpClientConfig\n+                .setMaxConnTotal(elasticsearchMaxTotalConnections)\n+                .setMaxConnPerRoute(elasticsearchMaxTotalConnectionsPerRoute)\n+        ));\n+    }\n+\n+    public SearchResponse search(SearchRequest searchRequest, String errorMessage) {\n+        final MultiSearchRequest multiSearchRequest = new MultiSearchRequest()\n+                .add(searchRequest);\n+\n+        final MultiSearchResponse result = this.execute((c, requestOptions) -> c.msearch(multiSearchRequest, requestOptions), errorMessage);\n+\n+        return firstResponseFrom(result, errorMessage);\n+    }\n+\n+    private SearchResponse firstResponseFrom(MultiSearchResponse result, String errorMessage) {\n+        checkArgument(result != null);\n+        checkArgument(result.getResponses().length == 1);\n+\n+        if (result.getResponses()[0].getResponse() == null) {\n+            throw exceptionFrom(result.getResponses()[0].getFailure(), errorMessage);\n+        }\n+\n+        return result.getResponses()[0].getResponse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwOTU3Ng==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r451409576", "createdAt": "2020-07-08T09:29:43Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.apache.http.HttpHost;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RequestOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog2.indexer.IndexNotFoundException;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class ElasticsearchClient {\n+    private final RestHighLevelClient client;\n+\n+    @Inject\n+    public ElasticsearchClient(@Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                               @Named(\"elasticsearch_connect_timeout\") Duration elasticsearchConnectTimeout,\n+                               @Named(\"elasticsearch_socket_timeout\") Duration elasticsearchSocketTimeout,\n+                               @Named(\"elasticsearch_idle_timeout\") Duration elasticsearchIdleTimeout,\n+                               @Named(\"elasticsearch_max_total_connections\") int elasticsearchMaxTotalConnections,\n+                               @Named(\"elasticsearch_max_total_connections_per_route\") int elasticsearchMaxTotalConnectionsPerRoute,\n+                               @Named(\"elasticsearch_max_retries\") int elasticsearchMaxRetries,\n+                               @Named(\"elasticsearch_discovery_enabled\") boolean discoveryEnabled,\n+                               @Named(\"elasticsearch_discovery_filter\") @Nullable String discoveryFilter,\n+                               @Named(\"elasticsearch_discovery_frequency\") Duration discoveryFrequency,\n+                               @Named(\"elasticsearch_discovery_default_scheme\") String defaultSchemeForDiscoveredNodes,\n+                               @Named(\"elasticsearch_compression_enabled\") boolean compressionEnabled) {\n+        this.client = new RestHighLevelClient(RestClient.builder(\n+                elasticsearchHosts.stream().map(uri -> new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme())).toArray(HttpHost[]::new)\n+        ).setRequestConfigCallback(requestConfig -> requestConfig\n+                .setConnectTimeout(Math.toIntExact(elasticsearchConnectTimeout.toMilliseconds()))\n+                .setSocketTimeout(Math.toIntExact(elasticsearchSocketTimeout.toMilliseconds()))\n+        ).setHttpClientConfigCallback(httpClientConfig -> httpClientConfig\n+                .setMaxConnTotal(elasticsearchMaxTotalConnections)\n+                .setMaxConnPerRoute(elasticsearchMaxTotalConnectionsPerRoute)\n+        ));\n+    }\n+\n+    public SearchResponse search(SearchRequest searchRequest, String errorMessage) {\n+        final MultiSearchRequest multiSearchRequest = new MultiSearchRequest()\n+                .add(searchRequest);\n+\n+        final MultiSearchResponse result = this.execute((c, requestOptions) -> c.msearch(multiSearchRequest, requestOptions), errorMessage);\n+\n+        return firstResponseFrom(result, errorMessage);\n+    }\n+\n+    private SearchResponse firstResponseFrom(MultiSearchResponse result, String errorMessage) {\n+        checkArgument(result != null);\n+        checkArgument(result.getResponses().length == 1);\n+\n+        if (result.getResponses()[0].getResponse() == null) {\n+            throw exceptionFrom(result.getResponses()[0].getFailure(), errorMessage);\n+        }\n+\n+        return result.getResponses()[0].getResponse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxODc3NQ=="}, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTM4MTIxOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo1MTo0NlrOGuCUpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozMDozNlrOGuf4wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyNTczNQ==", "bodyText": "I would prefer using our own runtime exception here instead of org.elasticsearch.ElasticsearchException. The old JestUtils used org.graylog2.indexer.ElasticsearchException. Maybe a new one with a more generic name? StorageException?", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r450925735", "createdAt": "2020-07-07T14:51:46Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.apache.http.HttpHost;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RequestOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog2.indexer.IndexNotFoundException;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class ElasticsearchClient {\n+    private final RestHighLevelClient client;\n+\n+    @Inject\n+    public ElasticsearchClient(@Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                               @Named(\"elasticsearch_connect_timeout\") Duration elasticsearchConnectTimeout,\n+                               @Named(\"elasticsearch_socket_timeout\") Duration elasticsearchSocketTimeout,\n+                               @Named(\"elasticsearch_idle_timeout\") Duration elasticsearchIdleTimeout,\n+                               @Named(\"elasticsearch_max_total_connections\") int elasticsearchMaxTotalConnections,\n+                               @Named(\"elasticsearch_max_total_connections_per_route\") int elasticsearchMaxTotalConnectionsPerRoute,\n+                               @Named(\"elasticsearch_max_retries\") int elasticsearchMaxRetries,\n+                               @Named(\"elasticsearch_discovery_enabled\") boolean discoveryEnabled,\n+                               @Named(\"elasticsearch_discovery_filter\") @Nullable String discoveryFilter,\n+                               @Named(\"elasticsearch_discovery_frequency\") Duration discoveryFrequency,\n+                               @Named(\"elasticsearch_discovery_default_scheme\") String defaultSchemeForDiscoveredNodes,\n+                               @Named(\"elasticsearch_compression_enabled\") boolean compressionEnabled) {\n+        this.client = new RestHighLevelClient(RestClient.builder(\n+                elasticsearchHosts.stream().map(uri -> new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme())).toArray(HttpHost[]::new)\n+        ).setRequestConfigCallback(requestConfig -> requestConfig\n+                .setConnectTimeout(Math.toIntExact(elasticsearchConnectTimeout.toMilliseconds()))\n+                .setSocketTimeout(Math.toIntExact(elasticsearchSocketTimeout.toMilliseconds()))\n+        ).setHttpClientConfigCallback(httpClientConfig -> httpClientConfig\n+                .setMaxConnTotal(elasticsearchMaxTotalConnections)\n+                .setMaxConnPerRoute(elasticsearchMaxTotalConnectionsPerRoute)\n+        ));\n+    }\n+\n+    public SearchResponse search(SearchRequest searchRequest, String errorMessage) {\n+        final MultiSearchRequest multiSearchRequest = new MultiSearchRequest()\n+                .add(searchRequest);\n+\n+        final MultiSearchResponse result = this.execute((c, requestOptions) -> c.msearch(multiSearchRequest, requestOptions), errorMessage);\n+\n+        return firstResponseFrom(result, errorMessage);\n+    }\n+\n+    private SearchResponse firstResponseFrom(MultiSearchResponse result, String errorMessage) {\n+        checkArgument(result != null);\n+        checkArgument(result.getResponses().length == 1);\n+\n+        if (result.getResponses()[0].getResponse() == null) {\n+            throw exceptionFrom(result.getResponses()[0].getFailure(), errorMessage);\n+        }\n+\n+        return result.getResponses()[0].getResponse();\n+    }\n+\n+    public <R> R execute(ThrowingBiFunction<RestHighLevelClient, RequestOptions, R, IOException> fn) {\n+        return execute(fn, \"An error occurred: \");\n+    }\n+\n+    public <R> R execute(ThrowingBiFunction<RestHighLevelClient, RequestOptions, R, IOException> fn, String errorMessage) {\n+        try {\n+            return fn.apply(client, requestOptions());\n+        } catch (Exception e) {\n+            throw exceptionFrom(e, errorMessage);\n+        }\n+    }\n+\n+    private RequestOptions requestOptions() {\n+        return RequestOptions.DEFAULT;\n+    }\n+\n+    private ElasticsearchException exceptionFrom(Exception e, String errorMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMDExMw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r451410113", "createdAt": "2020-07-08T09:30:36Z", "author": {"login": "dennisoelkers"}, "path": "graylog-storage-elasticsearch7/src/main/java/org/graylog/storage/elasticsearch7/ElasticsearchClient.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.graylog.storage.elasticsearch7;\n+\n+import com.github.joschi.jadconfig.util.Duration;\n+import org.graylog.shaded.elasticsearch7.org.apache.http.HttpHost;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.ElasticsearchException;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.MultiSearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchRequest;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.action.search.SearchResponse;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RequestOptions;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestClient;\n+import org.graylog.shaded.elasticsearch7.org.elasticsearch.client.RestHighLevelClient;\n+import org.graylog2.indexer.IndexNotFoundException;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+public class ElasticsearchClient {\n+    private final RestHighLevelClient client;\n+\n+    @Inject\n+    public ElasticsearchClient(@Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                               @Named(\"elasticsearch_connect_timeout\") Duration elasticsearchConnectTimeout,\n+                               @Named(\"elasticsearch_socket_timeout\") Duration elasticsearchSocketTimeout,\n+                               @Named(\"elasticsearch_idle_timeout\") Duration elasticsearchIdleTimeout,\n+                               @Named(\"elasticsearch_max_total_connections\") int elasticsearchMaxTotalConnections,\n+                               @Named(\"elasticsearch_max_total_connections_per_route\") int elasticsearchMaxTotalConnectionsPerRoute,\n+                               @Named(\"elasticsearch_max_retries\") int elasticsearchMaxRetries,\n+                               @Named(\"elasticsearch_discovery_enabled\") boolean discoveryEnabled,\n+                               @Named(\"elasticsearch_discovery_filter\") @Nullable String discoveryFilter,\n+                               @Named(\"elasticsearch_discovery_frequency\") Duration discoveryFrequency,\n+                               @Named(\"elasticsearch_discovery_default_scheme\") String defaultSchemeForDiscoveredNodes,\n+                               @Named(\"elasticsearch_compression_enabled\") boolean compressionEnabled) {\n+        this.client = new RestHighLevelClient(RestClient.builder(\n+                elasticsearchHosts.stream().map(uri -> new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme())).toArray(HttpHost[]::new)\n+        ).setRequestConfigCallback(requestConfig -> requestConfig\n+                .setConnectTimeout(Math.toIntExact(elasticsearchConnectTimeout.toMilliseconds()))\n+                .setSocketTimeout(Math.toIntExact(elasticsearchSocketTimeout.toMilliseconds()))\n+        ).setHttpClientConfigCallback(httpClientConfig -> httpClientConfig\n+                .setMaxConnTotal(elasticsearchMaxTotalConnections)\n+                .setMaxConnPerRoute(elasticsearchMaxTotalConnectionsPerRoute)\n+        ));\n+    }\n+\n+    public SearchResponse search(SearchRequest searchRequest, String errorMessage) {\n+        final MultiSearchRequest multiSearchRequest = new MultiSearchRequest()\n+                .add(searchRequest);\n+\n+        final MultiSearchResponse result = this.execute((c, requestOptions) -> c.msearch(multiSearchRequest, requestOptions), errorMessage);\n+\n+        return firstResponseFrom(result, errorMessage);\n+    }\n+\n+    private SearchResponse firstResponseFrom(MultiSearchResponse result, String errorMessage) {\n+        checkArgument(result != null);\n+        checkArgument(result.getResponses().length == 1);\n+\n+        if (result.getResponses()[0].getResponse() == null) {\n+            throw exceptionFrom(result.getResponses()[0].getFailure(), errorMessage);\n+        }\n+\n+        return result.getResponses()[0].getResponse();\n+    }\n+\n+    public <R> R execute(ThrowingBiFunction<RestHighLevelClient, RequestOptions, R, IOException> fn) {\n+        return execute(fn, \"An error occurred: \");\n+    }\n+\n+    public <R> R execute(ThrowingBiFunction<RestHighLevelClient, RequestOptions, R, IOException> fn, String errorMessage) {\n+        try {\n+            return fn.apply(client, requestOptions());\n+        } catch (Exception e) {\n+            throw exceptionFrom(e, errorMessage);\n+        }\n+    }\n+\n+    private RequestOptions requestOptions() {\n+        return RequestOptions.DEFAULT;\n+    }\n+\n+    private ElasticsearchException exceptionFrom(Exception e, String errorMessage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkyNTczNQ=="}, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDI4ODcxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/storage/VersionAwareProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo0NDo0M1rOGueMbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOTozMzoxOVrOGuf_WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MjM4MQ==", "bodyText": "Wouldn't it be enough to only use elasticsearchMajorVersion and drop elasticsearchVersion?", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r451382381", "createdAt": "2020-07-08T08:44:43Z", "author": {"login": "alex-konn"}, "path": "graylog2-server/src/main/java/org/graylog2/storage/VersionAwareProvider.java", "diffHunk": "@@ -25,11 +25,13 @@\n \n public class VersionAwareProvider<T> implements Provider<T> {\n     private final Version elasticsearchVersion;\n+    private final String elasticsearchMajorVersion;\n     private final Map<Version, Provider<T>> pluginBindings;\n \n     @Inject\n     public VersionAwareProvider(@Named(\"elasticsearch_version\") String elasticsearchMajorVersion, Map<Version, Provider<T>> pluginBindings) {\n         this.elasticsearchVersion = constructElasticsearchVersion(elasticsearchMajorVersion);\n+        this.elasticsearchMajorVersion = elasticsearchMajorVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQxMTgwMA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/8498#discussion_r451411800", "createdAt": "2020-07-08T09:33:19Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/storage/VersionAwareProvider.java", "diffHunk": "@@ -25,11 +25,13 @@\n \n public class VersionAwareProvider<T> implements Provider<T> {\n     private final Version elasticsearchVersion;\n+    private final String elasticsearchMajorVersion;\n     private final Map<Version, Provider<T>> pluginBindings;\n \n     @Inject\n     public VersionAwareProvider(@Named(\"elasticsearch_version\") String elasticsearchMajorVersion, Map<Version, Provider<T>> pluginBindings) {\n         this.elasticsearchVersion = constructElasticsearchVersion(elasticsearchMajorVersion);\n+        this.elasticsearchMajorVersion = elasticsearchMajorVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MjM4MQ=="}, "originalCommit": {"oid": "161a9662a985555be71ef9ae05878df179166051"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4117, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}