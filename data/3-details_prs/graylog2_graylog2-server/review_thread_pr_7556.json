{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5Njg4NzY3", "number": 7556, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo0NjoxNlrODjeAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MjozN1rODjklEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTE4MzkzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo0NjoxNlrOFvSv6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1MzoyNVrOFvsMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNDU2OA==", "bodyText": "I think we don't need @Nullable for id() (also in Token#create).", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385134568", "createdAt": "2020-02-27T13:46:16Z", "author": {"login": "thll"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java", "diffHunk": "@@ -23,10 +23,16 @@\n import org.graylog.autovalue.WithBeanGetter;\n import org.joda.time.DateTime;\n \n+import javax.annotation.Nullable;\n+\n @JsonAutoDetect\n @AutoValue\n @WithBeanGetter\n public abstract class Token {\n+    @JsonProperty\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTQ0NQ==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385551445", "createdAt": "2020-02-28T07:53:25Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/rest/models/users/responses/Token.java", "diffHunk": "@@ -23,10 +23,16 @@\n import org.graylog.autovalue.WithBeanGetter;\n import org.joda.time.DateTime;\n \n+import javax.annotation.Nullable;\n+\n @JsonAutoDetect\n @AutoValue\n @WithBeanGetter\n public abstract class Token {\n+    @JsonProperty\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNDU2OA=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTMwNDQyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoxNzozN1rOFvT6Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1MzozNFrOFvsMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1MzU2Nw==", "bodyText": "This will throw a NPE in #fromDBObject when there is no a match for the given ID in the DB.", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385153567", "createdAt": "2020-02-27T14:17:37Z", "author": {"login": "thll"}, "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "diffHunk": "@@ -60,9 +67,19 @@ public AccessToken load(String token) {\n             LOG.error(\"Multiple access tokens found, this is a serious bug.\");\n             throw new IllegalStateException(\"Access tokens collection has no unique index!\");\n         }\n-        final DBObject tokenObject = objects.get(0);\n-        final Object id = tokenObject.get(\"_id\");\n-        return new AccessTokenImpl((ObjectId) id, tokenObject.toMap());\n+        return fromDBObject(objects.get(0));\n+    }\n+\n+    @Nullable\n+    @Override\n+    public AccessToken loadById(String id) {\n+        try {\n+            return fromDBObject(get(AccessTokenImpl.class, id));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTUxNw==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385551517", "createdAt": "2020-02-28T07:53:34Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "diffHunk": "@@ -60,9 +67,19 @@ public AccessToken load(String token) {\n             LOG.error(\"Multiple access tokens found, this is a serious bug.\");\n             throw new IllegalStateException(\"Access tokens collection has no unique index!\");\n         }\n-        final DBObject tokenObject = objects.get(0);\n-        final Object id = tokenObject.get(\"_id\");\n-        return new AccessTokenImpl((ObjectId) id, tokenObject.toMap());\n+        return fromDBObject(objects.get(0));\n+    }\n+\n+    @Nullable\n+    @Override\n+    public AccessToken loadById(String id) {\n+        try {\n+            return fromDBObject(get(AccessTokenImpl.class, id));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1MzU2Nw=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTMzNjQ1OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/security/AESTools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyNToxNVrOFvUNng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1NDozM1rOFvvSpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1ODU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static void validateTextAndEntryptionKey(String text, byte[] encryptionKey) {\n          \n          \n            \n                private static void validateTextAndEncryptionKey(String text, byte[] encryptionKey) {", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385158558", "createdAt": "2020-02-27T14:25:15Z", "author": {"login": "thll"}, "path": "graylog2-server/src/main/java/org/graylog2/security/AESTools.java", "diffHunk": "@@ -55,4 +61,61 @@ public static String decrypt(String cipherText, String encryptionKey, String sal\n         }\n         return null;\n     }\n+\n+    /**\n+     * Encrypt the given plain text value with the given encryption key using AES SIV. (RFC 5297)\n+     *\n+     * @param plainText     the plain text value to encrypt\n+     * @param encryptionKey the encryption key (must be at least 32 bytes)\n+     * @return the encrypted cipher text or null if encryption failed\n+     * @throws IllegalArgumentException if the encryption key is smaller than 32 bytes\n+     */\n+    @Nullable\n+    public static String encryptSiv(String plainText, byte[] encryptionKey) {\n+        validateTextAndEntryptionKey(plainText, encryptionKey);\n+        try {\n+            final byte[] cipherBytes = SIV_MODE.encrypt(\n+                    Arrays.copyOf(encryptionKey, 16),\n+                    Arrays.copyOfRange(encryptionKey, 16, 32),\n+                    plainText.getBytes(UTF_8)\n+            );\n+            return Hex.encodeToString(cipherBytes);\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't encrypt value\", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Decrypt the given cipher text value with the given encryption key using AES SIV. (RFC 5297)\n+     *\n+     * @param cipherText    the cipher text value to decrypt\n+     * @param encryptionKey the encryption key (must be at least 32 bytes)\n+     * @return the decrypted cipher text or null if decryption failed\n+     * @throws IllegalArgumentException if the encryption key is smaller than 32 bytes\n+     */\n+    @Nullable\n+    public static String decryptSiv(String cipherText, byte[] encryptionKey) {\n+        validateTextAndEntryptionKey(cipherText, encryptionKey);\n+        try {\n+            final byte[] plainBytes = SIV_MODE.decrypt(\n+                    Arrays.copyOf(encryptionKey, 16),\n+                    Arrays.copyOfRange(encryptionKey, 16, 32),\n+                    Hex.decode(cipherText.getBytes(UTF_8))\n+            );\n+            return new String(plainBytes, UTF_8);\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't decrypt value\", e);\n+        }\n+        return null;\n+    }\n+\n+    private static void validateTextAndEntryptionKey(String text, byte[] encryptionKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjIxNA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385602214", "createdAt": "2020-02-28T09:54:33Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/security/AESTools.java", "diffHunk": "@@ -55,4 +61,61 @@ public static String decrypt(String cipherText, String encryptionKey, String sal\n         }\n         return null;\n     }\n+\n+    /**\n+     * Encrypt the given plain text value with the given encryption key using AES SIV. (RFC 5297)\n+     *\n+     * @param plainText     the plain text value to encrypt\n+     * @param encryptionKey the encryption key (must be at least 32 bytes)\n+     * @return the encrypted cipher text or null if encryption failed\n+     * @throws IllegalArgumentException if the encryption key is smaller than 32 bytes\n+     */\n+    @Nullable\n+    public static String encryptSiv(String plainText, byte[] encryptionKey) {\n+        validateTextAndEntryptionKey(plainText, encryptionKey);\n+        try {\n+            final byte[] cipherBytes = SIV_MODE.encrypt(\n+                    Arrays.copyOf(encryptionKey, 16),\n+                    Arrays.copyOfRange(encryptionKey, 16, 32),\n+                    plainText.getBytes(UTF_8)\n+            );\n+            return Hex.encodeToString(cipherBytes);\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't encrypt value\", e);\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Decrypt the given cipher text value with the given encryption key using AES SIV. (RFC 5297)\n+     *\n+     * @param cipherText    the cipher text value to decrypt\n+     * @param encryptionKey the encryption key (must be at least 32 bytes)\n+     * @return the decrypted cipher text or null if decryption failed\n+     * @throws IllegalArgumentException if the encryption key is smaller than 32 bytes\n+     */\n+    @Nullable\n+    public static String decryptSiv(String cipherText, byte[] encryptionKey) {\n+        validateTextAndEntryptionKey(cipherText, encryptionKey);\n+        try {\n+            final byte[] plainBytes = SIV_MODE.decrypt(\n+                    Arrays.copyOf(encryptionKey, 16),\n+                    Arrays.copyOfRange(encryptionKey, 16, 32),\n+                    Hex.decode(cipherText.getBytes(UTF_8))\n+            );\n+            return new String(plainBytes, UTF_8);\n+        } catch (Exception e) {\n+            LOG.error(\"Couldn't decrypt value\", e);\n+        }\n+        return null;\n+    }\n+\n+    private static void validateTextAndEntryptionKey(String text, byte[] encryptionKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1ODU1OA=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjE2ODgxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODoyNDo0MlrOFvcNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1Mzo1OFrOFvsNHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4OTYyMg==", "bodyText": "I think we should add a few more tests:\n\none that loads by ID\none that loads by ID which doesn't exist in the DB\none that generates a token, then loads it from the DB as well and compares it (because there was a bug where we\nwouldn't encrypt it when generating it)", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385289622", "createdAt": "2020-02-27T18:24:42Z", "author": {"login": "thll"}, "path": "graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java", "diffHunk": "@@ -30,6 +33,9 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class AccessTokenServiceImplTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MTY0NA==", "bodyText": "Agreed, tests have been added. \u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385551644", "createdAt": "2020-02-28T07:53:58Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/test/java/org/graylog2/security/AccessTokenServiceImplTest.java", "diffHunk": "@@ -30,6 +33,9 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n public class AccessTokenServiceImplTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4OTYyMg=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjIzODk2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/security/AccessToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo0NTo1NVrOFvc5-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1NjoyN1rOFvvWnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDk4NQ==", "bodyText": "I'm wondering if this is an implementation detail that should live in AccessTokenImpl.java instead. The type is not accessible via interface methods so it might be confusing that the enum is here.", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385300985", "createdAt": "2020-02-27T18:45:55Z", "author": {"login": "thll"}, "path": "graylog2-server/src/main/java/org/graylog2/security/AccessToken.java", "diffHunk": "@@ -23,6 +23,24 @@\n  * @author Dennis Oelkers <dennis@torch.sh>\n  */\n public interface AccessToken extends Persisted {\n+    enum Type {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMzIyOQ==", "bodyText": "Agreed! \u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385603229", "createdAt": "2020-02-28T09:56:27Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/security/AccessToken.java", "diffHunk": "@@ -23,6 +23,24 @@\n  * @author Dennis Oelkers <dennis@torch.sh>\n  */\n public interface AccessToken extends Persisted {\n+    enum Type {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMDk4NQ=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjI1MTM5OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo0OTo1NVrOFvdCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDowOTo1N1rOFvvxIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMzA5NQ==", "bodyText": "I think this deserves a comment, explaining that the type is used to state the encryption algorithm in the database.", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385303095", "createdAt": "2020-02-27T18:49:55Z", "author": {"login": "thll"}, "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java", "diffHunk": "@@ -81,6 +83,7 @@ public String getToken() {\n     @Override\n     public void setToken(String token) {\n         fields.put(TOKEN, token);\n+        fields.put(TOKEN_TYPE, Type.defaultType().getIntValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYxMDAxNg==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385610016", "createdAt": "2020-02-28T10:09:57Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenImpl.java", "diffHunk": "@@ -81,6 +83,7 @@ public String getToken() {\n     @Override\n     public void setToken(String token) {\n         fields.put(TOKEN, token);\n+        fields.put(TOKEN_TYPE, Type.defaultType().getIntValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwMzA5NQ=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjI2MDY3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1MjozN1rOFvdIDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjoyMTowMlrOFvzLXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU4OA==", "bodyText": "I guess we should add minimal documentation, explaining that we are encrypting the token on storage and decrypting on reading and that we always have them encrypted so we don't have too look at the token type.", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385304588", "createdAt": "2020-02-27T18:52:37Z", "author": {"login": "thll"}, "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "diffHunk": "@@ -14,43 +14,50 @@\n  * You should have received a copy of the GNU General Public License\n  * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n  */\n-package org.graylog2.security;\n+package org.graylog2.security.token;\n \n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.mongodb.BasicDBObject;\n import com.mongodb.BasicDBObjectBuilder;\n import com.mongodb.DBObject;\n import com.mongodb.DuplicateKeyException;\n+import org.apache.commons.lang3.StringUtils;\n import org.bson.types.ObjectId;\n import org.graylog2.database.MongoConnection;\n import org.graylog2.database.PersistedServiceImpl;\n import org.graylog2.plugin.Tools;\n import org.graylog2.plugin.database.ValidationException;\n+import org.graylog2.security.AccessToken;\n+import org.graylog2.security.AccessTokenService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nullable;\n import javax.inject.Inject;\n import java.math.BigInteger;\n import java.security.SecureRandom;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class AccessTokenServiceImpl extends PersistedServiceImpl implements AccessTokenService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NTg4NA==", "bodyText": "\u2714\ufe0f", "url": "https://github.com/Graylog2/graylog2-server/pull/7556#discussion_r385665884", "createdAt": "2020-02-28T12:21:02Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/security/token/AccessTokenServiceImpl.java", "diffHunk": "@@ -14,43 +14,50 @@\n  * You should have received a copy of the GNU General Public License\n  * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n  */\n-package org.graylog2.security;\n+package org.graylog2.security.token;\n \n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.mongodb.BasicDBObject;\n import com.mongodb.BasicDBObjectBuilder;\n import com.mongodb.DBObject;\n import com.mongodb.DuplicateKeyException;\n+import org.apache.commons.lang3.StringUtils;\n import org.bson.types.ObjectId;\n import org.graylog2.database.MongoConnection;\n import org.graylog2.database.PersistedServiceImpl;\n import org.graylog2.plugin.Tools;\n import org.graylog2.plugin.database.ValidationException;\n+import org.graylog2.security.AccessToken;\n+import org.graylog2.security.AccessTokenService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.annotation.Nullable;\n import javax.inject.Inject;\n import java.math.BigInteger;\n import java.security.SecureRandom;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n public class AccessTokenServiceImpl extends PersistedServiceImpl implements AccessTokenService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNDU4OA=="}, "originalCommit": {"oid": "296cbbf50068132ae6327e082681857c2c58bab9"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3883, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}