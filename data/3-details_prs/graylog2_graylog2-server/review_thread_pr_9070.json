{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDc4MDE5", "number": 9070, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNTo0NVrOErqLwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNTo0NVrOErqLwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjE1MzYyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/DBGrantService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTowNTo0NVrOHejMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzoxMDowOVrOHeoR3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTg2Ng==", "bodyText": "I am not sure if using the #ordinal method of the enum will bite us at one point in the future. The value will change if the enums are reordered at some point. (e.g. someone wants them to be sorted alphabetically and refactors the order) How about adding an explicit priority value to each enum instead?", "url": "https://github.com/Graylog2/graylog2-server/pull/9070#discussion_r501795866", "createdAt": "2020-10-08T15:05:45Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/DBGrantService.java", "diffHunk": "@@ -136,6 +141,27 @@ public GrantDTO create(GRN grantee, Capability capability, GRN target, String cr\n         return create(GrantDTO.of(grantee, capability, target), creatorUsername);\n     }\n \n+    /**\n+     * Ensure that a grant with the requested or a higher capability exists.\n+     * @return the created, updated or existing grant\n+     */\n+    public GrantDTO ensure(GRN grantee, Capability capability, GRN target, String creatorUsername) {\n+        final List<GrantDTO> existingGrants = getForTargetAndGrantee(target, grantee);\n+        if (existingGrants.isEmpty()) {\n+            return create(grantee, capability, target, creatorUsername);\n+        }\n+        // This should never happen\n+        Preconditions.checkState(existingGrants.size() == 1);\n+\n+        final GrantDTO grantDTO = existingGrants.get(0);\n+        // Only upgrade capabilities: VIEW < MANAGE < OWNER\n+        if (capability.ordinal() > grantDTO.capability().ordinal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9d0977b75c98869c38b4bb1562e41ad37fa5b71"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3OTI2Mg==", "bodyText": "fair enough. \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/9070#discussion_r501879262", "createdAt": "2020-10-08T17:10:09Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/security/DBGrantService.java", "diffHunk": "@@ -136,6 +141,27 @@ public GrantDTO create(GRN grantee, Capability capability, GRN target, String cr\n         return create(GrantDTO.of(grantee, capability, target), creatorUsername);\n     }\n \n+    /**\n+     * Ensure that a grant with the requested or a higher capability exists.\n+     * @return the created, updated or existing grant\n+     */\n+    public GrantDTO ensure(GRN grantee, Capability capability, GRN target, String creatorUsername) {\n+        final List<GrantDTO> existingGrants = getForTargetAndGrantee(target, grantee);\n+        if (existingGrants.isEmpty()) {\n+            return create(grantee, capability, target, creatorUsername);\n+        }\n+        // This should never happen\n+        Preconditions.checkState(existingGrants.size() == 1);\n+\n+        final GrantDTO grantDTO = existingGrants.get(0);\n+        // Only upgrade capabilities: VIEW < MANAGE < OWNER\n+        if (capability.ordinal() > grantDTO.capability().ordinal()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc5NTg2Ng=="}, "originalCommit": {"oid": "a9d0977b75c98869c38b4bb1562e41ad37fa5b71"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4468, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}