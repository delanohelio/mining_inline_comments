{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTAwMDY0", "number": 7902, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0Nzo1MlrOD3iIpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNjo0OFrOD3s32A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU3NTQzOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0Nzo1MlrOGN1akQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo1MDo0MVrOGN_y6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1OTgyNQ==", "bodyText": "A short javadoc about what this class does would be nice", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417159825", "createdAt": "2020-04-29T08:47:52Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTg5OA==", "bodyText": "Aye \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417329898", "createdAt": "2020-04-29T13:50:41Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1OTgyNQ=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU4ODQwOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1MToxMFrOGN1iSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozNDowM1rOGOHRRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTgwMg==", "bodyText": "Just an idea. If we use Serializable instead, it would be clearer that this is meant to\nbe sent out as a response..\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {\n          \n          \n            \n                public ImmutableMap<String, Serializable> contextFor(List<EventDefinitionDto> eventDefinitions) {", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417161802", "createdAt": "2020-04-29T08:51:10Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMDQ2NQ==", "bodyText": "I would keep it as it is. We use Map<String, Object> for these types of return values all over the place. \ud83d\ude04", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417330465", "createdAt": "2020-04-29T13:51:28Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTgwMg=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MjM1Nw==", "bodyText": "Fair enough", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417452357", "createdAt": "2020-04-29T16:34:03Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTgwMg=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTYwMDI4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo1NDoxN1rOGN1pig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NDoxMlrOGOIFRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MzY1OA==", "bodyText": "If we want to be extra correct, we would also query for the type being EventProcessorExecutionJob.TYPE_NAME", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417163658", "createdAt": "2020-04-29T08:54:17Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {\n+        return ImmutableMap.of(\"scheduler\", schedulerContext(eventDefinitions));\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(EventDefinitionDto eventDefinition) {\n+        final ImmutableMap<String, SchedulerCtx> schedulerContext = schedulerContext(Collections.singletonList(eventDefinition));\n+        return ImmutableMap.of(\"scheduler\", schedulerContext.get(eventDefinition.id()));\n+    }\n+\n+    private Map<String, List<JobDefinitionDto>> getJobDefinitions(List<EventDefinitionDto> eventDefinitions) {\n+        final Set<String> eventDefinitionIds = eventDefinitions.stream().map(EventDefinitionDto::id).collect(Collectors.toSet());\n+        return jobDefinitionService.getAllByConfigField(EventProcessorExecutionJob.Config.FIELD_EVENT_DEFINITION_ID, eventDefinitionIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMzMjYyMg==", "bodyText": "We this in several other places as well without the type. I think it wouldn't be possible that we have two event definitions with the same _id but different types. Since the _id has a unique index.", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417332622", "createdAt": "2020-04-29T13:54:15Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {\n+        return ImmutableMap.of(\"scheduler\", schedulerContext(eventDefinitions));\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(EventDefinitionDto eventDefinition) {\n+        final ImmutableMap<String, SchedulerCtx> schedulerContext = schedulerContext(Collections.singletonList(eventDefinition));\n+        return ImmutableMap.of(\"scheduler\", schedulerContext.get(eventDefinition.id()));\n+    }\n+\n+    private Map<String, List<JobDefinitionDto>> getJobDefinitions(List<EventDefinitionDto> eventDefinitions) {\n+        final Set<String> eventDefinitionIds = eventDefinitions.stream().map(EventDefinitionDto::id).collect(Collectors.toSet());\n+        return jobDefinitionService.getAllByConfigField(EventProcessorExecutionJob.Config.FIELD_EVENT_DEFINITION_ID, eventDefinitionIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MzY1OA=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NDM3OA==", "bodyText": "My concern was not duplicates, but the fact that we are the config document from other types doesn't have the field we are querying.\nBut I guess it's fine.", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417454378", "createdAt": "2020-04-29T16:37:13Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {\n+        return ImmutableMap.of(\"scheduler\", schedulerContext(eventDefinitions));\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(EventDefinitionDto eventDefinition) {\n+        final ImmutableMap<String, SchedulerCtx> schedulerContext = schedulerContext(Collections.singletonList(eventDefinition));\n+        return ImmutableMap.of(\"scheduler\", schedulerContext.get(eventDefinition.id()));\n+    }\n+\n+    private Map<String, List<JobDefinitionDto>> getJobDefinitions(List<EventDefinitionDto> eventDefinitions) {\n+        final Set<String> eventDefinitionIds = eventDefinitions.stream().map(EventDefinitionDto::id).collect(Collectors.toSet());\n+        return jobDefinitionService.getAllByConfigField(EventProcessorExecutionJob.Config.FIELD_EVENT_DEFINITION_ID, eventDefinitionIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MzY1OA=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NTkzNA==", "bodyText": "Hmm. But then we would just get no result from the query, no?", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417455934", "createdAt": "2020-04-29T16:39:38Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {\n+        return ImmutableMap.of(\"scheduler\", schedulerContext(eventDefinitions));\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(EventDefinitionDto eventDefinition) {\n+        final ImmutableMap<String, SchedulerCtx> schedulerContext = schedulerContext(Collections.singletonList(eventDefinition));\n+        return ImmutableMap.of(\"scheduler\", schedulerContext.get(eventDefinition.id()));\n+    }\n+\n+    private Map<String, List<JobDefinitionDto>> getJobDefinitions(List<EventDefinitionDto> eventDefinitions) {\n+        final Set<String> eventDefinitionIds = eventDefinitions.stream().map(EventDefinitionDto::id).collect(Collectors.toSet());\n+        return jobDefinitionService.getAllByConfigField(EventProcessorExecutionJob.Config.FIELD_EVENT_DEFINITION_ID, eventDefinitionIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MzY1OA=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTY3MA==", "bodyText": "yeah, unless someone creates a plugin that uses the same field name in its config, which is quite unlikely :-D", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417465670", "createdAt": "2020-04-29T16:54:12Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/context/EventDefinitionContextService.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.events.context;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.auto.value.AutoValue;\n+import com.google.common.collect.ImmutableMap;\n+import org.graylog.events.processor.EventDefinitionDto;\n+import org.graylog.events.processor.EventProcessorExecutionJob;\n+import org.graylog.scheduler.DBJobDefinitionService;\n+import org.graylog.scheduler.DBJobTriggerService;\n+import org.graylog.scheduler.JobDefinitionDto;\n+import org.graylog.scheduler.JobTriggerData;\n+import org.graylog.scheduler.JobTriggerDto;\n+import org.graylog.scheduler.JobTriggerStatus;\n+import org.joda.time.DateTime;\n+\n+import javax.inject.Inject;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class EventDefinitionContextService {\n+    private final DBJobDefinitionService jobDefinitionService;\n+    private final DBJobTriggerService jobTriggerService;\n+\n+    @Inject\n+    public EventDefinitionContextService(DBJobDefinitionService jobDefinitionService, DBJobTriggerService jobTriggerService) {\n+        this.jobDefinitionService = jobDefinitionService;\n+        this.jobTriggerService = jobTriggerService;\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(List<EventDefinitionDto> eventDefinitions) {\n+        return ImmutableMap.of(\"scheduler\", schedulerContext(eventDefinitions));\n+    }\n+\n+    public ImmutableMap<String, Object> contextFor(EventDefinitionDto eventDefinition) {\n+        final ImmutableMap<String, SchedulerCtx> schedulerContext = schedulerContext(Collections.singletonList(eventDefinition));\n+        return ImmutableMap.of(\"scheduler\", schedulerContext.get(eventDefinition.id()));\n+    }\n+\n+    private Map<String, List<JobDefinitionDto>> getJobDefinitions(List<EventDefinitionDto> eventDefinitions) {\n+        final Set<String> eventDefinitionIds = eventDefinitions.stream().map(EventDefinitionDto::id).collect(Collectors.toSet());\n+        return jobDefinitionService.getAllByConfigField(EventProcessorExecutionJob.Config.FIELD_EVENT_DEFINITION_ID, eventDefinitionIds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MzY1OA=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg5MjI4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/rest/EventDefinitionsResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxOToyMFrOGN4fDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxOToyMFrOGN4fDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMDEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ApiOperation(\"Delete event definition\")\n          \n          \n            \n                @ApiOperation(\"Enable event definition\")", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417210126", "createdAt": "2020-04-29T10:19:20Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/rest/EventDefinitionsResource.java", "diffHunk": "@@ -164,6 +186,24 @@ public void delete(@ApiParam(name = \"definitionId\") @PathParam(\"definitionId\") @\n         eventDefinitionHandler.delete(definitionId);\n     }\n \n+    @PUT\n+    @Path(\"{definitionId}/schedule\")\n+    @ApiOperation(\"Delete event definition\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTg5NDE0OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/events/rest/EventDefinitionsResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxOTo1OVrOGN4gOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMDoxOTo1OVrOGN4gOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzIxMDQyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ApiOperation(\"Delete event definition\")\n          \n          \n            \n                @ApiOperation(\"Disable event definition\")", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417210425", "createdAt": "2020-04-29T10:19:59Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/events/rest/EventDefinitionsResource.java", "diffHunk": "@@ -164,6 +186,24 @@ public void delete(@ApiParam(name = \"definitionId\") @PathParam(\"definitionId\") @\n         eventDefinitionHandler.delete(definitionId);\n     }\n \n+    @PUT\n+    @Path(\"{definitionId}/schedule\")\n+    @ApiOperation(\"Delete event definition\")\n+    @AuditEvent(type = EventsAuditEventTypes.EVENT_DEFINITION_UPDATE)\n+    public void schedule(@ApiParam(name = \"definitionId\") @PathParam(\"definitionId\") @NotBlank String definitionId) {\n+        checkPermission(RestPermissions.EVENT_DEFINITIONS_EDIT, definitionId);\n+        eventDefinitionHandler.schedule(definitionId);\n+    }\n+\n+    @PUT\n+    @Path(\"{definitionId}/unschedule\")\n+    @ApiOperation(\"Delete event definition\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzE2OTM4OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/scheduler/DBJobDefinitionService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozODo0OFrOGOE7Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzoxOToyNFrOGOJEBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMzk0Nw==", "bodyText": "Couldn't' this also be done with StreamEx like in DBJobTriggerService?\nSeems simpler", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417413947", "createdAt": "2020-04-29T15:38:48Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/scheduler/DBJobDefinitionService.java", "diffHunk": "@@ -50,4 +58,52 @@ public DBJobDefinitionService(MongoConnection mongoConnection, MongoJackObjectMa\n         final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n         return Optional.ofNullable(db.findOne(DBQuery.is(field, value)));\n     }\n+\n+    /**\n+     * Returns all job definitions that have the given config field values, grouped by config field value.\n+     *\n+     * @param configField the config field\n+     * @param values      the values of the config field\n+     * @return the job definitions grouped by the given values\n+     */\n+    public Map<String, List<JobDefinitionDto>> getAllByConfigField(String configField, Collection<? extends Object> values) {\n+        final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n+\n+        // Use aggregation to group job definitions by each config field value\n+        // Example aggregation output:\n+        //   {\n+        //     \"config-field-value-1\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ],\n+        //     \"config-field-value-2\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ]\n+        //   }\n+        final Aggregation.Pipeline<Void> pipeline = Aggregation.match(DBQuery.in(field, values))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2ODAyNQ==", "bodyText": "No, unfortunately not. The \"config\" structure in JobDefinitionDto is pluggable so there is no method that I could use for the grouping key. (without converting the object to a map or JsonNode and access the key again)", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417468025", "createdAt": "2020-04-29T16:57:34Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/scheduler/DBJobDefinitionService.java", "diffHunk": "@@ -50,4 +58,52 @@ public DBJobDefinitionService(MongoConnection mongoConnection, MongoJackObjectMa\n         final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n         return Optional.ofNullable(db.findOne(DBQuery.is(field, value)));\n     }\n+\n+    /**\n+     * Returns all job definitions that have the given config field values, grouped by config field value.\n+     *\n+     * @param configField the config field\n+     * @param values      the values of the config field\n+     * @return the job definitions grouped by the given values\n+     */\n+    public Map<String, List<JobDefinitionDto>> getAllByConfigField(String configField, Collection<? extends Object> values) {\n+        final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n+\n+        // Use aggregation to group job definitions by each config field value\n+        // Example aggregation output:\n+        //   {\n+        //     \"config-field-value-1\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ],\n+        //     \"config-field-value-2\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ]\n+        //   }\n+        final Aggregation.Pipeline<Void> pipeline = Aggregation.match(DBQuery.in(field, values))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMzk0Nw=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ3NDQ3Mg==", "bodyText": "Okay, I tested this. Using the object mapper to deserialize the value and pick the config field isn't that hard. Less code than the aggregation.", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417474472", "createdAt": "2020-04-29T17:07:46Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/scheduler/DBJobDefinitionService.java", "diffHunk": "@@ -50,4 +58,52 @@ public DBJobDefinitionService(MongoConnection mongoConnection, MongoJackObjectMa\n         final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n         return Optional.ofNullable(db.findOne(DBQuery.is(field, value)));\n     }\n+\n+    /**\n+     * Returns all job definitions that have the given config field values, grouped by config field value.\n+     *\n+     * @param configField the config field\n+     * @param values      the values of the config field\n+     * @return the job definitions grouped by the given values\n+     */\n+    public Map<String, List<JobDefinitionDto>> getAllByConfigField(String configField, Collection<? extends Object> values) {\n+        final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n+\n+        // Use aggregation to group job definitions by each config field value\n+        // Example aggregation output:\n+        //   {\n+        //     \"config-field-value-1\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ],\n+        //     \"config-field-value-2\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ]\n+        //   }\n+        final Aggregation.Pipeline<Void> pipeline = Aggregation.match(DBQuery.in(field, values))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMzk0Nw=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ4MTczMw==", "bodyText": "@mpfz0r I implemented it with StreamEx. Good catch!", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417481733", "createdAt": "2020-04-29T17:19:24Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/scheduler/DBJobDefinitionService.java", "diffHunk": "@@ -50,4 +58,52 @@ public DBJobDefinitionService(MongoConnection mongoConnection, MongoJackObjectMa\n         final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n         return Optional.ofNullable(db.findOne(DBQuery.is(field, value)));\n     }\n+\n+    /**\n+     * Returns all job definitions that have the given config field values, grouped by config field value.\n+     *\n+     * @param configField the config field\n+     * @param values      the values of the config field\n+     * @return the job definitions grouped by the given values\n+     */\n+    public Map<String, List<JobDefinitionDto>> getAllByConfigField(String configField, Collection<? extends Object> values) {\n+        final String field = String.format(Locale.US, \"%s.%s\", JobDefinitionDto.FIELD_CONFIG, configField);\n+\n+        // Use aggregation to group job definitions by each config field value\n+        // Example aggregation output:\n+        //   {\n+        //     \"config-field-value-1\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ],\n+        //     \"config-field-value-2\": [\n+        //       {JobDefinitionDto}, {JobDefinitionDto}\n+        //      ]\n+        //   }\n+        final Aggregation.Pipeline<Void> pipeline = Aggregation.match(DBQuery.in(field, values))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMzk0Nw=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzMzNDY0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/event-definitions/event-definition-types/FilterForm.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjoxNjo0OFrOGOGk3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzo0MTowMFrOGOJ3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MDk4OA==", "bodyText": "How about:\n\"Should this event definition be executed?\"\nOr maybe don't use the word scheduling at all, and just call it enable/disable?", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417440988", "createdAt": "2020-04-29T16:16:48Z", "author": {"login": "mpfz0r"}, "path": "graylog2-web-interface/src/components/event-definitions/event-definition-types/FilterForm.jsx", "diffHunk": "@@ -295,6 +295,13 @@ class FilterForm extends React.Component {\n             <HelpBlock>{lodash.get(validation, 'errors.execute_every_ms[0]')}</HelpBlock>\n           )}\n         </FormGroup>\n+        <Input id=\"schedule-checkbox\"\n+               type=\"checkbox\"\n+               name=\"_is_scheduled\"\n+               label=\"Enable scheduling\"\n+               help=\"Whether scheduling for this event definition should be enabled?\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NDkyNw==", "bodyText": "Changed.", "url": "https://github.com/Graylog2/graylog2-server/pull/7902#discussion_r417494927", "createdAt": "2020-04-29T17:41:00Z", "author": {"login": "bernd"}, "path": "graylog2-web-interface/src/components/event-definitions/event-definition-types/FilterForm.jsx", "diffHunk": "@@ -295,6 +295,13 @@ class FilterForm extends React.Component {\n             <HelpBlock>{lodash.get(validation, 'errors.execute_every_ms[0]')}</HelpBlock>\n           )}\n         </FormGroup>\n+        <Input id=\"schedule-checkbox\"\n+               type=\"checkbox\"\n+               name=\"_is_scheduled\"\n+               label=\"Enable scheduling\"\n+               help=\"Whether scheduling for this event definition should be enabled?\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ0MDk4OA=="}, "originalCommit": {"oid": "92b1135d27c02e52b27f8d63b91dda7dd238b18e"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3710, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}