{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzA0MjQ4", "number": 8336, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTo1ODoxMlrOEGUWEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjowNDo0N1rOEGUd7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDYwMjQwOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ScrollResultES6.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTo1ODoxMlrOGlCbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTo1ODoxMlrOGlCbYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5MDI3Mw==", "bodyText": "Annotations on the same line? Blasphemy!", "url": "https://github.com/Graylog2/graylog2-server/pull/8336#discussion_r441490273", "createdAt": "2020-06-17T11:58:12Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ScrollResultES6.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch6;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import io.searchbox.client.JestClient;\n+import io.searchbox.client.JestResult;\n+import io.searchbox.core.ClearScroll;\n+import io.searchbox.core.SearchResult;\n+import io.searchbox.core.SearchScroll;\n+import org.apache.shiro.crypto.hash.Md5Hash;\n+import org.graylog2.indexer.results.IndexQueryResult;\n+import org.graylog2.indexer.results.ResultMessage;\n+import org.graylog2.indexer.results.ScrollResult;\n+import org.graylog2.jackson.TypeReferences;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ScrollResultES6 extends IndexQueryResult implements ScrollResult {\n+    private static final Logger LOG = LoggerFactory.getLogger(ScrollResult.class);\n+    private static final String DEFAULT_SCROLL = \"1m\";\n+\n+    private final JestClient jestClient;\n+    private final ObjectMapper objectMapper;\n+    private SearchResult initialResult;\n+    private final String scroll;\n+    private final List<String> fields;\n+    private final String queryHash; // used in log output only\n+    private final long totalHits;\n+\n+    private String scrollId;\n+    private int chunkId = 0;\n+\n+    public interface Factory {\n+        ScrollResultES6 create(SearchResult initialResult, @Assisted(\"query\") String query, @Assisted(\"scroll\") String scroll, List<String> fields);\n+    }\n+\n+\n+    @AssistedInject\n+    public ScrollResultES6(JestClient jestClient, ObjectMapper objectMapper, @Assisted SearchResult initialResult, @Assisted(\"query\") String query, @Assisted List<String> fields) {\n+        this(jestClient, objectMapper, initialResult, query, DEFAULT_SCROLL, fields);\n+    }\n+\n+    @AssistedInject\n+    public ScrollResultES6(JestClient jestClient, ObjectMapper objectMapper, @Assisted SearchResult initialResult, @Assisted(\"query\") String query, @Assisted(\"scroll\") String scroll, @Assisted List<String> fields) {\n+        super(query, null, initialResult.getJsonObject().path(\"took\").asLong());\n+        this.jestClient = jestClient;\n+        this.objectMapper = objectMapper;\n+        this.initialResult = initialResult;\n+        this.scroll = scroll;\n+        this.fields = fields;\n+        totalHits = initialResult.getTotal();\n+        scrollId = getScrollIdFromResult(initialResult);\n+\n+        final Md5Hash md5Hash = new Md5Hash(getOriginalQuery());\n+        queryHash = md5Hash.toHex();\n+\n+        LOG.debug(\"[{}] Starting scroll request for query {}\", queryHash, getOriginalQuery());\n+    }\n+\n+    @Override public ScrollChunk nextChunk() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c638071a35ede3b2614e583211d9f6a94337aa"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MDYyMjUzOnYy", "diffSide": "RIGHT", "path": "graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ScrollResultES6.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjowNDo0N1rOGlCoVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjowNDo0N1rOGlCoVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ5MzU5MQ==", "bodyText": "I know this bug was in here before, but there's a placeholder missing in the format string. I think we should fix that.", "url": "https://github.com/Graylog2/graylog2-server/pull/8336#discussion_r441493591", "createdAt": "2020-06-17T12:04:47Z", "author": {"login": "alex-konn"}, "path": "graylog-storage-elasticsearch6/src/main/java/org/graylog/storage/elasticsearch6/ScrollResultES6.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog.storage.elasticsearch6;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.inject.assistedinject.Assisted;\n+import com.google.inject.assistedinject.AssistedInject;\n+import io.searchbox.client.JestClient;\n+import io.searchbox.client.JestResult;\n+import io.searchbox.core.ClearScroll;\n+import io.searchbox.core.SearchResult;\n+import io.searchbox.core.SearchScroll;\n+import org.apache.shiro.crypto.hash.Md5Hash;\n+import org.graylog2.indexer.results.IndexQueryResult;\n+import org.graylog2.indexer.results.ResultMessage;\n+import org.graylog2.indexer.results.ScrollResult;\n+import org.graylog2.jackson.TypeReferences;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+public class ScrollResultES6 extends IndexQueryResult implements ScrollResult {\n+    private static final Logger LOG = LoggerFactory.getLogger(ScrollResult.class);\n+    private static final String DEFAULT_SCROLL = \"1m\";\n+\n+    private final JestClient jestClient;\n+    private final ObjectMapper objectMapper;\n+    private SearchResult initialResult;\n+    private final String scroll;\n+    private final List<String> fields;\n+    private final String queryHash; // used in log output only\n+    private final long totalHits;\n+\n+    private String scrollId;\n+    private int chunkId = 0;\n+\n+    public interface Factory {\n+        ScrollResultES6 create(SearchResult initialResult, @Assisted(\"query\") String query, @Assisted(\"scroll\") String scroll, List<String> fields);\n+    }\n+\n+\n+    @AssistedInject\n+    public ScrollResultES6(JestClient jestClient, ObjectMapper objectMapper, @Assisted SearchResult initialResult, @Assisted(\"query\") String query, @Assisted List<String> fields) {\n+        this(jestClient, objectMapper, initialResult, query, DEFAULT_SCROLL, fields);\n+    }\n+\n+    @AssistedInject\n+    public ScrollResultES6(JestClient jestClient, ObjectMapper objectMapper, @Assisted SearchResult initialResult, @Assisted(\"query\") String query, @Assisted(\"scroll\") String scroll, @Assisted List<String> fields) {\n+        super(query, null, initialResult.getJsonObject().path(\"took\").asLong());\n+        this.jestClient = jestClient;\n+        this.objectMapper = objectMapper;\n+        this.initialResult = initialResult;\n+        this.scroll = scroll;\n+        this.fields = fields;\n+        totalHits = initialResult.getTotal();\n+        scrollId = getScrollIdFromResult(initialResult);\n+\n+        final Md5Hash md5Hash = new Md5Hash(getOriginalQuery());\n+        queryHash = md5Hash.toHex();\n+\n+        LOG.debug(\"[{}] Starting scroll request for query {}\", queryHash, getOriginalQuery());\n+    }\n+\n+    @Override public ScrollChunk nextChunk() throws IOException {\n+\n+        final JestResult search;\n+        final List<ResultMessage> hits;\n+        if (initialResult == null) {\n+            search = getNextScrollResult();\n+            hits = StreamSupport.stream(search.getJsonObject().path(\"hits\").path(\"hits\").spliterator(), false)\n+                    .map(hit -> ResultMessage.parseFromSource(hit.path(\"_id\").asText(),\n+                            hit.path(\"_index\").asText(),\n+                            objectMapper.convertValue(hit.get(\"_source\"), TypeReferences.MAP_STRING_OBJECT)))\n+                    .collect(Collectors.toList());\n+        } else {\n+            // make sure to return the initial hits, see https://github.com/Graylog2/graylog2-server/issues/2126\n+            search = initialResult;\n+            hits = initialResult.getHits(Map.class, false).stream()\n+                .map(hit -> ResultMessage.parseFromSource(hit.id, hit.index, (Map<String, Object>)hit.source))\n+                .collect(Collectors.toList());\n+            this.initialResult = null;\n+        }\n+\n+        if (hits.size() == 0) {\n+            // scroll exhausted\n+            LOG.debug(\"[{}] Reached end of scroll results.\", queryHash, getOriginalQuery());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c638071a35ede3b2614e583211d9f6a94337aa"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4181, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}