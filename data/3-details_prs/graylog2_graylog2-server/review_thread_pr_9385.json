{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzAyMTM2", "number": 9385, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo0Mzo1MlrOE2xb6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1MjoxNVrOE2xp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODY4NTIyOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo0Mzo1MlrOHvvgAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoyNzo1NFrOHv220Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyMzM2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @ApiOperation(\"Get paginated users for active authentication service backend\")\n          \n          \n            \n                @ApiOperation(\"Get paginated users for an authentication service backend\")", "url": "https://github.com/Graylog2/graylog2-server/pull/9385#discussion_r519823362", "createdAt": "2020-11-09T13:43:52Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "diffHunk": "@@ -138,6 +166,55 @@ public void delete(@ApiParam(name = \"backendId\", required = true) @PathParam(\"ba\n         dbService.delete(config.id());\n     }\n \n+    @GET\n+    @Path(\"{backendId}/users\")\n+    @ApiOperation(\"Get paginated users for active authentication service backend\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed1e604050cf00ac3b8ea78434830e190d1d2ee"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0Mzg4OQ==", "bodyText": "thanks!", "url": "https://github.com/Graylog2/graylog2-server/pull/9385#discussion_r519943889", "createdAt": "2020-11-09T16:27:54Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "diffHunk": "@@ -138,6 +166,55 @@ public void delete(@ApiParam(name = \"backendId\", required = true) @PathParam(\"ba\n         dbService.delete(config.id());\n     }\n \n+    @GET\n+    @Path(\"{backendId}/users\")\n+    @ApiOperation(\"Get paginated users for active authentication service backend\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyMzM2Mg=="}, "originalCommit": {"oid": "4ed1e604050cf00ac3b8ea78434830e190d1d2ee"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODcxODQ2OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1MTozOFrOHvv0JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxNTozMFrOHv2S8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyODUxNg==", "bodyText": "I'd prefer it if we used USERS_READ.\nOr even GranteeService.getVisibleUsers()", "url": "https://github.com/Graylog2/graylog2-server/pull/9385#discussion_r519828516", "createdAt": "2020-11-09T13:51:38Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "diffHunk": "@@ -138,6 +166,55 @@ public void delete(@ApiParam(name = \"backendId\", required = true) @PathParam(\"ba\n         dbService.delete(config.id());\n     }\n \n+    @GET\n+    @Path(\"{backendId}/users\")\n+    @ApiOperation(\"Get paginated users for active authentication service backend\")\n+    @RequiresPermissions({RestPermissions.AUTH_SERVICE_GLOBAL_CONFIG_READ, RestPermissions.USERS_LIST})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed1e604050cf00ac3b8ea78434830e190d1d2ee"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNDcwNQ==", "bodyText": "I opted for USERS_READ. I think we need to have a larger discussion about fine grained permission checks. The UI somehow needs to handle this as well. We probably need placeholder user objects if the requesting user is not allowed to read a user. Otherwise there would be no indicator that there are users for that backend.", "url": "https://github.com/Graylog2/graylog2-server/pull/9385#discussion_r519934705", "createdAt": "2020-11-09T16:15:30Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "diffHunk": "@@ -138,6 +166,55 @@ public void delete(@ApiParam(name = \"backendId\", required = true) @PathParam(\"ba\n         dbService.delete(config.id());\n     }\n \n+    @GET\n+    @Path(\"{backendId}/users\")\n+    @ApiOperation(\"Get paginated users for active authentication service backend\")\n+    @RequiresPermissions({RestPermissions.AUTH_SERVICE_GLOBAL_CONFIG_READ, RestPermissions.USERS_LIST})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyODUxNg=="}, "originalCommit": {"oid": "4ed1e604050cf00ac3b8ea78434830e190d1d2ee"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODcyMTI3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1MjoxNVrOHvv1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxMzoyN1rOHv2NIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyODk0MA==", "bodyText": "should be checking roles:read", "url": "https://github.com/Graylog2/graylog2-server/pull/9385#discussion_r519828940", "createdAt": "2020-11-09T13:52:15Z", "author": {"login": "mpfz0r"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "diffHunk": "@@ -138,6 +166,55 @@ public void delete(@ApiParam(name = \"backendId\", required = true) @PathParam(\"ba\n         dbService.delete(config.id());\n     }\n \n+    @GET\n+    @Path(\"{backendId}/users\")\n+    @ApiOperation(\"Get paginated users for active authentication service backend\")\n+    @RequiresPermissions({RestPermissions.AUTH_SERVICE_GLOBAL_CONFIG_READ, RestPermissions.USERS_LIST})\n+    public PaginatedResponse<UserOverviewDTO> getUsers(\n+            @ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+            @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+            @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+            @ApiParam(name = \"sort\", value = \"The field to sort the result on\", required = true, allowableValues = \"username,full_name,email\")\n+            @DefaultValue(UserOverviewDTO.FIELD_FULL_NAME) @QueryParam(\"sort\") String sort,\n+            @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+            @DefaultValue(\"asc\") @QueryParam(\"order\") String order,\n+            @ApiParam(name = \"backendId\", required = true) @PathParam(\"backendId\") @NotBlank String backendId\n+    ) {\n+        final AuthServiceBackendDTO activeConfig = loadConfig(backendId);\n+\n+        final PaginatedList<UserOverviewDTO> userList = userService.findPaginatedByAuthServiceBackend(\n+                parseSearchQuery(query), page, perPage, sort, order, activeConfig.id());\n+\n+        return PaginatedResponse.create(\n+                \"users\",\n+                userList,\n+                query,\n+                Collections.singletonMap(\"roles\", createRoleContext(userList.delegate()))\n+        );\n+    }\n+\n+    private Map<String, Object> createRoleContext(List<UserOverviewDTO> userList) {\n+        final Set<String> roleIds = userList.stream()\n+                .flatMap(user -> user.roles().stream())\n+                .collect(Collectors.toSet());\n+        try {\n+            return roleService.findIdMap(roleIds).values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ed1e604050cf00ac3b8ea78434830e190d1d2ee"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzMzIxOQ==", "bodyText": "Good catch, thanks! \ud83d\udc4d", "url": "https://github.com/Graylog2/graylog2-server/pull/9385#discussion_r519933219", "createdAt": "2020-11-09T16:13:27Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog/security/authservice/rest/AuthServiceBackendsResource.java", "diffHunk": "@@ -138,6 +166,55 @@ public void delete(@ApiParam(name = \"backendId\", required = true) @PathParam(\"ba\n         dbService.delete(config.id());\n     }\n \n+    @GET\n+    @Path(\"{backendId}/users\")\n+    @ApiOperation(\"Get paginated users for active authentication service backend\")\n+    @RequiresPermissions({RestPermissions.AUTH_SERVICE_GLOBAL_CONFIG_READ, RestPermissions.USERS_LIST})\n+    public PaginatedResponse<UserOverviewDTO> getUsers(\n+            @ApiParam(name = \"page\") @QueryParam(\"page\") @DefaultValue(\"1\") int page,\n+            @ApiParam(name = \"per_page\") @QueryParam(\"per_page\") @DefaultValue(\"50\") int perPage,\n+            @ApiParam(name = \"query\") @QueryParam(\"query\") @DefaultValue(\"\") String query,\n+            @ApiParam(name = \"sort\", value = \"The field to sort the result on\", required = true, allowableValues = \"username,full_name,email\")\n+            @DefaultValue(UserOverviewDTO.FIELD_FULL_NAME) @QueryParam(\"sort\") String sort,\n+            @ApiParam(name = \"order\", value = \"The sort direction\", allowableValues = \"asc, desc\")\n+            @DefaultValue(\"asc\") @QueryParam(\"order\") String order,\n+            @ApiParam(name = \"backendId\", required = true) @PathParam(\"backendId\") @NotBlank String backendId\n+    ) {\n+        final AuthServiceBackendDTO activeConfig = loadConfig(backendId);\n+\n+        final PaginatedList<UserOverviewDTO> userList = userService.findPaginatedByAuthServiceBackend(\n+                parseSearchQuery(query), page, perPage, sort, order, activeConfig.id());\n+\n+        return PaginatedResponse.create(\n+                \"users\",\n+                userList,\n+                query,\n+                Collections.singletonMap(\"roles\", createRoleContext(userList.delegate()))\n+        );\n+    }\n+\n+    private Map<String, Object> createRoleContext(List<UserOverviewDTO> userList) {\n+        final Set<String> roleIds = userList.stream()\n+                .flatMap(user -> user.roles().stream())\n+                .collect(Collectors.toSet());\n+        try {\n+            return roleService.findIdMap(roleIds).values()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyODk0MA=="}, "originalCommit": {"oid": "4ed1e604050cf00ac3b8ea78434830e190d1d2ee"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4406, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}