{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0NzMxMzAw", "number": 7645, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTowNTozNFrODlwmwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNDo1M1rODmsnWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTIwMjU4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortSelect.test.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTowNTozNFrOFy1GQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMTowNTozNFrOFy1GQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0MzA3NA==", "bodyText": "I've tried to add some meaningful tests for the FieldSortSelect, but I could not really find a way to test e.g. the select menu and the selection of an option. It looks like this was also a problem in the SeriesSelect test.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r388843074", "createdAt": "2020-03-06T11:05:34Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortSelect.test.jsx", "diffHunk": "@@ -0,0 +1,40 @@\n+// @flow strict\n+import React from 'react';\n+import { render, cleanup, fireEvent, waitForElement } from 'wrappedTestingLibrary';\n+import { List } from 'immutable';\n+\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import FieldType from 'views/logic/fieldtypes/FieldType';\n+import FieldTypeMapping from 'views/logic/fieldtypes/FieldTypeMapping';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+\n+import FieldSortSelect from './FieldSortSelect';\n+\n+\n+describe('FieldSortSelect', () => {\n+  afterEach(cleanup);\n+\n+  const properties = ['enumerable'];\n+  const fieldType1 = new FieldType('string', properties, []);\n+  const fieldTypeMapping1 = new FieldTypeMapping('date', fieldType1);\n+  const fieldType2 = new FieldType('string', properties, []);\n+  const fieldTypeMapping2 = new FieldTypeMapping('http_method', fieldType2);\n+  const fields = List([fieldTypeMapping1, fieldTypeMapping2]);\n+  const sort = [new SortConfig('pivot', 'http_method', Direction.Ascending)];\n+\n+  it('should render minimal', () => {\n+    const { getByText } = render(<FieldSortSelect fields={fields} onChange={() => {}} sort={sort} />);\n+    expect(getByText('http_method')).not.toBeNull();\n+  });\n+\n+  it('should display current sort as selected option', () => {\n+    const { getByText } = render(<FieldSortSelect fields={fields} onChange={() => {}} sort={sort} />);\n+    expect(getByText('http_method')).not.toBeNull();\n+  });\n+\n+  it('should open menu when focused', async () => {\n+    const { getByText, container } = render(<FieldSortSelect fields={fields} onChange={() => {}} sort={sort} />);\n+    fireEvent.focus(container.getElementsByTagName('input')[0]);\n+    await waitForElement(() => getByText(/2 results available./));\n+  });\n+});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250b4028e8d049d75619949f54b98b812998e518"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTIyMjgwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMToxMzowMVrOFy1SMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjozNDozMFrOFzlObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NjEyOQ==", "bodyText": "Would you implement useMemo for these two functions or are the not complex enough?", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r388846129", "createdAt": "2020-03-06T11:13:01Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "diffHunk": "@@ -0,0 +1,101 @@\n+// @flow strict\n+import React from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import PropTypes from 'prop-types';\n+\n+import MessagesWidgetConfig, { defaultSortDirection } from 'views/logic/widgets/MessagesWidgetConfig';\n+import Direction, { type DirectionJson } from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+import CustomPropTypes from 'views/components/CustomPropTypes';\n+\n+import { Icon } from 'components/common';\n+\n+type Props = {\n+  config: MessagesWidgetConfig,\n+  fieldName: string,\n+  onConfigChange: (MessagesWidgetConfig) => Promise<void>,\n+  setLoadingState: (loading: boolean) => void,\n+}\n+\n+const SortIcon: StyledComponent<{fieldSortActive: boolean}, {}, HTMLButtonElement> = styled.button(({ fieldSortActive }) => {\n+  const color = fieldSortActive ? '#333' : '#bdbdbd';\n+\n+  return css`\n+    border: 0;\n+    background: transparent;\n+    color: ${color};\n+\n+    padding: 5px;\n+\n+    cursor: pointer;\n+  `;\n+});\n+\n+const _newSort = (config, fieldName, currentSortDirectioName) => {\n+  switch (currentSortDirectioName) {\n+    case Direction.Ascending.direction:\n+      return config.sort.map(sort => sort.toBuilder().direction(Direction.Descending).build());\n+    case Direction.Descending.direction:\n+      return config.sort.map(sort => sort.toBuilder().direction(Direction.Ascending).build());\n+    default:\n+      return [new SortConfig(SortConfig.PIVOT_TYPE, fieldName, defaultSortDirection)];\n+  }\n+};\n+\n+const _changeSort = (config: MessagesWidgetConfig, fieldName: string, sortDirectionName: ?DirectionJson, onConfigChange: (MessagesWidgetConfig) => Promise<void>, setLoadingState: (loading: boolean) => void) => {\n+  setLoadingState(true);\n+  const newSort = _newSort(config, fieldName, sortDirectionName);\n+  const newConfig = config.toBuilder().sort(newSort).build();\n+  onConfigChange(newConfig).then(() => {\n+    setLoadingState(false);\n+  });\n+};\n+\n+const _sortDirectionName = (config: MessagesWidgetConfig, fieldName: string) => {\n+  const currentSort = config.sort && config.sort.length > 0 ? config.sort[0] : null;\n+  if (currentSort && currentSort.field === fieldName) {\n+    return currentSort.direction.direction;\n+  }\n+  return null;\n+};\n+\n+const _newSortDescription = (fielName: string, sortDirectionName: ?DirectionJson) => {\n+  let newDirection;\n+  if (sortDirectionName && sortDirectionName === Direction.Ascending) {\n+    newDirection = Direction.Descending.direction;\n+  } else {\n+    newDirection = Direction.Ascending.direction;\n+  }\n+  return `Sort ${fielName} ${newDirection}`;\n+};\n+\n+const _sortIcon = (fieldSortDirection: ?DirectionJson) => {\n+  if (fieldSortDirection && fieldSortDirection === Direction.Ascending.direction) {\n+    return 'sort-amount-asc';\n+  }\n+  return 'sort-amount-desc';\n+};\n+\n+\n+const FieldSortIcon = ({ fieldName, config, onConfigChange, setLoadingState }: Props) => {\n+  const sortDirectionName = _sortDirectionName(config, fieldName);\n+  const newSortDescription = _newSortDescription(fieldName, sortDirectionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2331f2728d5772371db5bd43ac918deab01d72"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzMTU5Nw==", "bodyText": "Answer: These functions are not complex", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389631597", "createdAt": "2020-03-09T12:34:30Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "diffHunk": "@@ -0,0 +1,101 @@\n+// @flow strict\n+import React from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import PropTypes from 'prop-types';\n+\n+import MessagesWidgetConfig, { defaultSortDirection } from 'views/logic/widgets/MessagesWidgetConfig';\n+import Direction, { type DirectionJson } from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+import CustomPropTypes from 'views/components/CustomPropTypes';\n+\n+import { Icon } from 'components/common';\n+\n+type Props = {\n+  config: MessagesWidgetConfig,\n+  fieldName: string,\n+  onConfigChange: (MessagesWidgetConfig) => Promise<void>,\n+  setLoadingState: (loading: boolean) => void,\n+}\n+\n+const SortIcon: StyledComponent<{fieldSortActive: boolean}, {}, HTMLButtonElement> = styled.button(({ fieldSortActive }) => {\n+  const color = fieldSortActive ? '#333' : '#bdbdbd';\n+\n+  return css`\n+    border: 0;\n+    background: transparent;\n+    color: ${color};\n+\n+    padding: 5px;\n+\n+    cursor: pointer;\n+  `;\n+});\n+\n+const _newSort = (config, fieldName, currentSortDirectioName) => {\n+  switch (currentSortDirectioName) {\n+    case Direction.Ascending.direction:\n+      return config.sort.map(sort => sort.toBuilder().direction(Direction.Descending).build());\n+    case Direction.Descending.direction:\n+      return config.sort.map(sort => sort.toBuilder().direction(Direction.Ascending).build());\n+    default:\n+      return [new SortConfig(SortConfig.PIVOT_TYPE, fieldName, defaultSortDirection)];\n+  }\n+};\n+\n+const _changeSort = (config: MessagesWidgetConfig, fieldName: string, sortDirectionName: ?DirectionJson, onConfigChange: (MessagesWidgetConfig) => Promise<void>, setLoadingState: (loading: boolean) => void) => {\n+  setLoadingState(true);\n+  const newSort = _newSort(config, fieldName, sortDirectionName);\n+  const newConfig = config.toBuilder().sort(newSort).build();\n+  onConfigChange(newConfig).then(() => {\n+    setLoadingState(false);\n+  });\n+};\n+\n+const _sortDirectionName = (config: MessagesWidgetConfig, fieldName: string) => {\n+  const currentSort = config.sort && config.sort.length > 0 ? config.sort[0] : null;\n+  if (currentSort && currentSort.field === fieldName) {\n+    return currentSort.direction.direction;\n+  }\n+  return null;\n+};\n+\n+const _newSortDescription = (fielName: string, sortDirectionName: ?DirectionJson) => {\n+  let newDirection;\n+  if (sortDirectionName && sortDirectionName === Direction.Ascending) {\n+    newDirection = Direction.Descending.direction;\n+  } else {\n+    newDirection = Direction.Ascending.direction;\n+  }\n+  return `Sort ${fielName} ${newDirection}`;\n+};\n+\n+const _sortIcon = (fieldSortDirection: ?DirectionJson) => {\n+  if (fieldSortDirection && fieldSortDirection === Direction.Ascending.direction) {\n+    return 'sort-amount-asc';\n+  }\n+  return 'sort-amount-desc';\n+};\n+\n+\n+const FieldSortIcon = ({ fieldName, config, onConfigChange, setLoadingState }: Props) => {\n+  const sortDirectionName = _sortDirectionName(config, fieldName);\n+  const newSortDescription = _newSortDescription(fieldName, sortDirectionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0NjEyOQ=="}, "originalCommit": {"oid": "2e2331f2728d5772371db5bd43ac918deab01d72"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTIyNzYwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMToxNTowMlrOFy1VKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMToxNTowMlrOFy1VKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0Njg4OA==", "bodyText": "I've had some inconsistent behaviour when I tried to compare e.g. Direction.Ascending with the direction of a widget config sort and decided to use the direction name instead of the class.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r388846888", "createdAt": "2020-03-06T11:15:02Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "diffHunk": "@@ -0,0 +1,101 @@\n+// @flow strict\n+import React from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import PropTypes from 'prop-types';\n+\n+import MessagesWidgetConfig, { defaultSortDirection } from 'views/logic/widgets/MessagesWidgetConfig';\n+import Direction, { type DirectionJson } from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+import CustomPropTypes from 'views/components/CustomPropTypes';\n+\n+import { Icon } from 'components/common';\n+\n+type Props = {\n+  config: MessagesWidgetConfig,\n+  fieldName: string,\n+  onConfigChange: (MessagesWidgetConfig) => Promise<void>,\n+  setLoadingState: (loading: boolean) => void,\n+}\n+\n+const SortIcon: StyledComponent<{fieldSortActive: boolean}, {}, HTMLButtonElement> = styled.button(({ fieldSortActive }) => {\n+  const color = fieldSortActive ? '#333' : '#bdbdbd';\n+\n+  return css`\n+    border: 0;\n+    background: transparent;\n+    color: ${color};\n+\n+    padding: 5px;\n+\n+    cursor: pointer;\n+  `;\n+});\n+\n+const _newSort = (config, fieldName, currentSortDirectioName) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e2331f2728d5772371db5bd43ac918deab01d72"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTI0NDE1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConifg.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMToyMTowMlrOFy1fEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToyNTowMlrOFzfv2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0OTQyNQ==", "bodyText": "@dennisoelkers we talked about the usage of an extra class to transform the message sort configs when calling the api. I've tried to create a class which is as simple as possible, but it would be great to hear your opinion on how to define the relation with the SortConfig class. It feels a bit wrong to use e.g. the SortConfig Builder for the fromJSON method.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r388849425", "createdAt": "2020-03-06T11:21:02Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConifg.js", "diffHunk": "@@ -0,0 +1,36 @@\n+// @flow strict\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig, { Builder } from 'views/logic/aggregationbuilder/SortConfig';\n+\n+export type MessageSortConifgJson = {\n+  field: string,\n+  order: 'ASC' | 'DESC',\n+};\n+\n+export default class MessageSortConifg {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU0MTg1MA==", "bodyText": "I think we should extract a common base class that is used by both MessageSortConfig and SortConfig. Maybe it would make sense to rename SortConfig to AggregateSortConfig and use SortConfig as the name for the base class. Shared code would go in there and the two specialized classes would use it internally to hold their state, but customize construction & (de-)serialization.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389541850", "createdAt": "2020-03-09T09:25:02Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConifg.js", "diffHunk": "@@ -0,0 +1,36 @@\n+// @flow strict\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig, { Builder } from 'views/logic/aggregationbuilder/SortConfig';\n+\n+export type MessageSortConifgJson = {\n+  field: string,\n+  order: 'ASC' | 'DESC',\n+};\n+\n+export default class MessageSortConifg {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg0OTQyNQ=="}, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzgxOTQ4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortSelect.test.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo0ODoxMFrOFzesXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwODo0ODoxMFrOFzesXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUyNDU3Mg==", "bodyText": "This test case is identical to the next one, so I think we should remove it.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389524572", "createdAt": "2020-03-09T08:48:10Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortSelect.test.jsx", "diffHunk": "@@ -0,0 +1,39 @@\n+// @flow strict\n+import React from 'react';\n+import { render, cleanup, fireEvent, waitForElement } from 'wrappedTestingLibrary';\n+import { List } from 'immutable';\n+\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import FieldType from 'views/logic/fieldtypes/FieldType';\n+import FieldTypeMapping from 'views/logic/fieldtypes/FieldTypeMapping';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+\n+import FieldSortSelect from './FieldSortSelect';\n+\n+describe('FieldSortSelect', () => {\n+  const properties = ['enumerable'];\n+  const fieldType1 = new FieldType('string', properties, []);\n+  const fieldTypeMapping1 = new FieldTypeMapping('date', fieldType1);\n+  const fieldType2 = new FieldType('string', properties, []);\n+  const fieldTypeMapping2 = new FieldTypeMapping('http_method', fieldType2);\n+  const fields = List([fieldTypeMapping1, fieldTypeMapping2]);\n+  const sort = [new SortConfig('pivot', 'http_method', Direction.Ascending)];\n+\n+  afterEach(cleanup);\n+\n+  it('should render minimal', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzkwNjYzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/MessageTable.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToxNzozN1rOFzfhOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo0ODo0N1rOFzloow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODEwNg==", "bodyText": "I guess we need to wrap that in an <IfInteractive>...</IfInteractive> block?", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389538106", "createdAt": "2020-03-09T09:17:37Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageTable.jsx", "diffHunk": "@@ -220,6 +229,12 @@ class MessageTable extends React.Component<Props, State> {\n                     <Field type={this._fieldTypeFor(selectedFieldName, fields)}\n                            name={selectedFieldName}\n                            queryId={activeQueryId} />\n+                    {editing && (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzODMwNw==", "bodyText": "We are using <IfInteractive> only to differentiate between the big display mode. I could create a wrapper like <IfEditing> but we are using the edit check just a few times.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389638307", "createdAt": "2020-03-09T12:48:47Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageTable.jsx", "diffHunk": "@@ -220,6 +229,12 @@ class MessageTable extends React.Component<Props, State> {\n                     <Field type={this._fieldTypeFor(selectedFieldName, fields)}\n                            name={selectedFieldName}\n                            queryId={activeQueryId} />\n+                    {editing && (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODEwNg=="}, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzkxMDQwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConifg.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOToxODo0NlrOFzfjlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjo1MDo0NlrOFzlsmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODcxMQ==", "bodyText": "There is a typo in the class, file and type names: MessageSortConifg -> MessageSortConfig", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389538711", "createdAt": "2020-03-09T09:18:46Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConifg.js", "diffHunk": "@@ -0,0 +1,36 @@\n+// @flow strict\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig, { Builder } from 'views/logic/aggregationbuilder/SortConfig';\n+\n+export type MessageSortConifgJson = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYzOTMyMA==", "bodyText": "Good catch, thanks.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r389639320", "createdAt": "2020-03-09T12:50:46Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConifg.js", "diffHunk": "@@ -0,0 +1,36 @@\n+// @flow strict\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig, { Builder } from 'views/logic/aggregationbuilder/SortConfig';\n+\n+export type MessageSortConifgJson = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTUzODcxMQ=="}, "originalCommit": {"oid": "9913f2dbb0394998a162229980fb7a4d217b9716"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODcyMzMyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowMDoyMVrOF0Nr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowMDoyMVrOF0Nr6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NDUwNQ==", "bodyText": "Instead of doing this, you could implement equals in the Direction class and use it to compare them. So it would looks like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              icon: defaultSortDirection.direction === Direction.Descending.direction ? StateDesc.icon : StateAsc.icon,\n          \n          \n            \n              icon: Direction.Descending.equals(defaultSortDirection) ? StateDesc.icon : StateAsc.icon,\n          \n      \n    \n    \n  \n\nThe benefit is that we want to find out if they are equal, but do not care about their internal structure.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390294505", "createdAt": "2020-03-10T13:00:21Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "diffHunk": "@@ -31,61 +38,66 @@ const SortIcon: StyledComponent<{fieldSortActive: boolean}, {}, HTMLButtonElemen\n   `;\n });\n \n-const _newSort = (config, fieldName, currentSortDirectioName) => {\n-  switch (currentSortDirectioName) {\n-    case Direction.Ascending.direction:\n-      return config.sort.map(sort => sort.toBuilder().direction(Direction.Descending).build());\n-    case Direction.Descending.direction:\n-      return config.sort.map(sort => sort.toBuilder().direction(Direction.Ascending).build());\n-    default:\n-      return [new SortConfig(SortConfig.PIVOT_TYPE, fieldName, defaultSortDirection)];\n-  }\n+const _tooltip = (fieldName: string, newDirection: Direction) => {\n+  return `Sort ${fieldName} ${newDirection.direction}`;\n };\n \n-const _changeSort = (config: MessagesWidgetConfig, fieldName: string, sortDirectionName: ?DirectionJson, onConfigChange: (MessagesWidgetConfig) => Promise<void>, setLoadingState: (loading: boolean) => void) => {\n+const _changeSort = (nextDirection: Direction, config: MessagesWidgetConfig, fieldName: string, onConfigChange: (MessagesWidgetConfig) => Promise<void>, setLoadingState: (loading: boolean) => void) => {\n+  const nextSort = [new SortConfig(SortConfig.PIVOT_TYPE, fieldName, nextDirection)];\n+  const newConfig = config.toBuilder().sort(nextSort).build();\n   setLoadingState(true);\n-  const newSort = _newSort(config, fieldName, sortDirectionName);\n-  const newConfig = config.toBuilder().sort(newSort).build();\n   onConfigChange(newConfig).then(() => {\n     setLoadingState(false);\n   });\n };\n \n-const _sortDirectionName = (config: MessagesWidgetConfig, fieldName: string) => {\n-  const currentSort = config.sort && config.sort.length > 0 ? config.sort[0] : null;\n-  if (currentSort && currentSort.field === fieldName) {\n-    return currentSort.direction.direction;\n-  }\n-  return null;\n+const _isFieldSortActive = (config: MessagesWidgetConfig, fieldName: string) => {\n+  return config.sort && config.sort.length > 0 && config.sort[0].field === fieldName;\n };\n \n-const _newSortDescription = (fielName: string, sortDirectionName: ?DirectionJson) => {\n-  let newDirection;\n-  if (sortDirectionName && sortDirectionName === Direction.Ascending) {\n-    newDirection = Direction.Descending.direction;\n-  } else {\n-    newDirection = Direction.Ascending.direction;\n-  }\n-  return `Sort ${fielName} ${newDirection}`;\n+const StateAsc: CurrentState = {\n+  icon: 'sort-amount-asc',\n+  tooltip: (fieldName: string) => _tooltip(fieldName, Direction.Descending),\n+  onSortChange: changeSort => changeSort(Direction.Descending),\n+  sortActive: true,\n };\n \n-const _sortIcon = (fieldSortDirection: ?DirectionJson) => {\n-  if (fieldSortDirection && fieldSortDirection === Direction.Ascending.direction) {\n-    return 'sort-amount-asc';\n+const StateDesc: CurrentState = {\n+  icon: 'sort-amount-desc',\n+  tooltip: (fieldName: string) => _tooltip(fieldName, Direction.Ascending),\n+  onSortChange: changeSort => changeSort(Direction.Ascending),\n+  sortActive: true,\n+};\n+\n+const StateNoSort: CurrentState = {\n+  icon: defaultSortDirection.direction === Direction.Descending.direction ? StateDesc.icon : StateAsc.icon,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fa0d4710635ed7ad2ce1439948f813fd59ef1f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODczNDcxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/aggregationbuilder/Direction.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowMzozNVrOF0Ny1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowMzozNVrOF0Ny1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NjI3Ng==", "bodyText": "This should be a non-static instance method that just returns the inversion of the current Direction.\nIt could look like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static invert(direction: Direction) {\n          \n          \n            \n              invert(): Direction {\n          \n          \n            \n                return Descending.equals(this) ? this.Ascending : this.Descending;\n          \n          \n            \n              }", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390296276", "createdAt": "2020-03-10T13:03:35Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/aggregationbuilder/Direction.js", "diffHunk": "@@ -20,6 +20,10 @@ export default class Direction {\n     return this._direction;\n   }\n \n+  static invert(direction: Direction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fa0d4710635ed7ad2ce1439948f813fd59ef1f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODczNzA1OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowNDoxN1rOF0N0Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowNDoxN1rOF0N0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NjY3MA==", "bodyText": "There is a typo: fielSortDirection -> fieldSortDirection", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390296670", "createdAt": "2020-03-10T13:04:17Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "diffHunk": "@@ -31,61 +38,66 @@ const SortIcon: StyledComponent<{fieldSortActive: boolean}, {}, HTMLButtonElemen\n   `;\n });\n \n-const _newSort = (config, fieldName, currentSortDirectioName) => {\n-  switch (currentSortDirectioName) {\n-    case Direction.Ascending.direction:\n-      return config.sort.map(sort => sort.toBuilder().direction(Direction.Descending).build());\n-    case Direction.Descending.direction:\n-      return config.sort.map(sort => sort.toBuilder().direction(Direction.Ascending).build());\n-    default:\n-      return [new SortConfig(SortConfig.PIVOT_TYPE, fieldName, defaultSortDirection)];\n-  }\n+const _tooltip = (fieldName: string, newDirection: Direction) => {\n+  return `Sort ${fieldName} ${newDirection.direction}`;\n };\n \n-const _changeSort = (config: MessagesWidgetConfig, fieldName: string, sortDirectionName: ?DirectionJson, onConfigChange: (MessagesWidgetConfig) => Promise<void>, setLoadingState: (loading: boolean) => void) => {\n+const _changeSort = (nextDirection: Direction, config: MessagesWidgetConfig, fieldName: string, onConfigChange: (MessagesWidgetConfig) => Promise<void>, setLoadingState: (loading: boolean) => void) => {\n+  const nextSort = [new SortConfig(SortConfig.PIVOT_TYPE, fieldName, nextDirection)];\n+  const newConfig = config.toBuilder().sort(nextSort).build();\n   setLoadingState(true);\n-  const newSort = _newSort(config, fieldName, sortDirectionName);\n-  const newConfig = config.toBuilder().sort(newSort).build();\n   onConfigChange(newConfig).then(() => {\n     setLoadingState(false);\n   });\n };\n \n-const _sortDirectionName = (config: MessagesWidgetConfig, fieldName: string) => {\n-  const currentSort = config.sort && config.sort.length > 0 ? config.sort[0] : null;\n-  if (currentSort && currentSort.field === fieldName) {\n-    return currentSort.direction.direction;\n-  }\n-  return null;\n+const _isFieldSortActive = (config: MessagesWidgetConfig, fieldName: string) => {\n+  return config.sort && config.sort.length > 0 && config.sort[0].field === fieldName;\n };\n \n-const _newSortDescription = (fielName: string, sortDirectionName: ?DirectionJson) => {\n-  let newDirection;\n-  if (sortDirectionName && sortDirectionName === Direction.Ascending) {\n-    newDirection = Direction.Descending.direction;\n-  } else {\n-    newDirection = Direction.Ascending.direction;\n-  }\n-  return `Sort ${fielName} ${newDirection}`;\n+const StateAsc: CurrentState = {\n+  icon: 'sort-amount-asc',\n+  tooltip: (fieldName: string) => _tooltip(fieldName, Direction.Descending),\n+  onSortChange: changeSort => changeSort(Direction.Descending),\n+  sortActive: true,\n };\n \n-const _sortIcon = (fieldSortDirection: ?DirectionJson) => {\n-  if (fieldSortDirection && fieldSortDirection === Direction.Ascending.direction) {\n-    return 'sort-amount-asc';\n+const StateDesc: CurrentState = {\n+  icon: 'sort-amount-desc',\n+  tooltip: (fieldName: string) => _tooltip(fieldName, Direction.Ascending),\n+  onSortChange: changeSort => changeSort(Direction.Ascending),\n+  sortActive: true,\n+};\n+\n+const StateNoSort: CurrentState = {\n+  icon: defaultSortDirection.direction === Direction.Descending.direction ? StateDesc.icon : StateAsc.icon,\n+  tooltip: (fieldName: string) => _tooltip(fieldName, defaultSortDirection),\n+  onSortChange: changeSort => changeSort(defaultSortDirection),\n+  sortActive: false,\n+};\n+\n+const _currentState = (config: MessagesWidgetConfig, fieldName: string) => {\n+  const fielSortDirection = _isFieldSortActive(config, fieldName) ? config.sort[0].direction.direction : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01fa0d4710635ed7ad2ce1439948f813fd59ef1f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODg4NTE4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/EditMessageList.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MTozNFrOF0PPbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0MTozNFrOF0PPbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMxOTk4MQ==", "bodyText": "An alternative that avoids using Immutable (which is used only for first() here):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const sortDirection = Immutable.Set(sort.map(s => s.direction)).first();\n          \n          \n            \n              const [sortDirection] = sort.map(s => s.direction);\n          \n      \n    \n    \n  \n\nIf sort could be undefined, it would need to be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const sortDirection = Immutable.Set(sort.map(s => s.direction)).first();\n          \n          \n            \n              const [sortDirection] = (sort || []).map(s => s.direction);\n          \n      \n    \n    \n  \n\nOr we could assign a default in the line above.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390319981", "createdAt": "2020-03-10T13:41:34Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/EditMessageList.jsx", "diffHunk": "@@ -34,14 +38,26 @@ const _onShowMessageRowChanged = (config, onChange) => {\n   return onChange(newConfig);\n };\n \n+const _onSortChange = (sort: $PropertyType<AggregationWidgetConfig, 'sort'>, config, onChange) => {\n+  const newConfig = config.toBuilder().sort(sort).build();\n+  return onChange(newConfig);\n+};\n+\n+const _onSortDirectionChange = (direction: $PropertyType<AggregationWidgetConfig, 'direction'>, config, onChange) => {\n+  const newConfig = config.toBuilder().sort(config.sort.map(sort => sort.toBuilder().direction(direction).build())).build();\n+  return onChange(newConfig);\n+};\n+\n type Props = {\n   children: React.Node,\n   config: MessagesWidgetConfig,\n-  fields: Immutable.Set<FieldTypeMapping>,\n+  fields: Immutable.List<FieldTypeMapping>,\n   onChange: (MessagesWidgetConfig) => void,\n };\n \n const EditMessageList = ({ children, config, fields, onChange }: Props) => {\n+  const { sort } = config;\n+  const sortDirection = Immutable.Set(sort.map(s => s.direction)).first();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODkwMDQ0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0NTowMVrOF0PY4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo0NTowMVrOF0PY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyMjQwMw==", "bodyText": "CurrentState is too generic. Maybe DirectionStrategy is better? Same for the other *State namings in this component.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390322403", "createdAt": "2020-03-10T13:45:01Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/FieldSortIcon.jsx", "diffHunk": "@@ -0,0 +1,112 @@\n+// @flow strict\n+import React from 'react';\n+import styled, { css, type StyledComponent } from 'styled-components';\n+import PropTypes from 'prop-types';\n+\n+import MessagesWidgetConfig, { defaultSortDirection } from 'views/logic/widgets/MessagesWidgetConfig';\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig from 'views/logic/aggregationbuilder/SortConfig';\n+import CustomPropTypes from 'views/components/CustomPropTypes';\n+\n+import { Icon } from 'components/common';\n+\n+type Props = {\n+  config: MessagesWidgetConfig,\n+  fieldName: string,\n+  onConfigChange: (MessagesWidgetConfig) => Promise<void>,\n+  setLoadingState: (loading: boolean) => void,\n+}\n+\n+type CurrentState = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODkyMzY4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/MessageList.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo1MDoyMVrOF0PnNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo1MDoyMVrOF0PnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyNjA2OQ==", "bodyText": "The indentation is off here. I don't know why ESLint does not complain about this, seems like it is  not enforcing it for flow types.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390326069", "createdAt": "2020-03-10T13:50:21Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageList.jsx", "diffHunk": "@@ -42,35 +42,39 @@ type State = {\n }\n \n type Props = {\n-  fields: FieldTypeMappingsList,\n-  pageSize: number,\n   config: MessagesWidgetConfig,\n+    currentView: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODkzNzE4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/MessageList.jsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo1MzoyMVrOF0PvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMToxMDo1MVrOF0yiEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyODIwNA==", "bodyText": "Maybe it makes sense to use a onSortChange function instead, which returns the new set of sort configs? This way the MessageTable widget does not need to know how to change the structure of the message widget config.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390328204", "createdAt": "2020-03-10T13:53:21Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageList.jsx", "diffHunk": "@@ -42,35 +42,39 @@ type State = {\n }\n \n type Props = {\n-  fields: FieldTypeMappingsList,\n-  pageSize: number,\n   config: MessagesWidgetConfig,\n+    currentView: {\n+      activeQuery: string,\n+      view: {\n+        id: number,\n+      },\n+    },\n   data: { messages: Array<Object>, total: number, id: string },\n-  selectedFields?: Immutable.Set<string>,\n+  editing: boolean,\n+  fields: FieldTypeMappingsList,\n+  onConfigChange: (MessagesWidgetConfig) => Promise<void>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5ODE5NQ==", "bodyText": "I've created a onSortChange method inside the MessageList, so FieldSortIcon does not need to know how to change the config. But I did not changed onConfigChange in Widget.jsx because all widgets are receiving this function and I thought onSortChange` would be too specific.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390898195", "createdAt": "2020-03-11T11:10:51Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageList.jsx", "diffHunk": "@@ -42,35 +42,39 @@ type State = {\n }\n \n type Props = {\n-  fields: FieldTypeMappingsList,\n-  pageSize: number,\n   config: MessagesWidgetConfig,\n+    currentView: {\n+      activeQuery: string,\n+      view: {\n+        id: number,\n+      },\n+    },\n   data: { messages: Array<Object>, total: number, id: string },\n-  selectedFields?: Immutable.Set<string>,\n+  editing: boolean,\n+  fields: FieldTypeMappingsList,\n+  onConfigChange: (MessagesWidgetConfig) => Promise<void>,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyODIwNA=="}, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODk0MTA5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/components/widgets/MessageList.test.jsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzo1NDoxMlrOF0Px8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjowMjoxMFrOF00EcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyODgxNg==", "bodyText": "Having to add that in all the tests could have been prevented by using a default value for the prop.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390328816", "createdAt": "2020-03-10T13:54:12Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageList.test.jsx", "diffHunk": "@@ -108,6 +108,7 @@ describe('MessageList', () => {\n     const wrapper1 = mount(<MessageList editing\n                                         data={data}\n                                         config={config}\n+                                        onConfigChange={() => {}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg4Nzc3Ng==", "bodyText": "I've implemented this change, but out of interest: When we define a default prop for onConfigChange we need to remove the .isRequired PropType definition. And is it worth it? Without onConfigChange the component would not work properly and I would expect a PropType error, when using the component without all necessary attributes.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390887776", "createdAt": "2020-03-11T10:51:14Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageList.test.jsx", "diffHunk": "@@ -108,6 +108,7 @@ describe('MessageList', () => {\n     const wrapper1 = mount(<MessageList editing\n                                         data={data}\n                                         config={config}\n+                                        onConfigChange={() => {}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyODgxNg=="}, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDkyMzM3Nw==", "bodyText": "I think it does still work properly. You just cannot change its config, turning it into a read-only component.\nGenerally: If we consider it to be a bigger risk that we are forgetting to add the new prop in a place and therefore want to be warned about it (either by flow or through a prop types warning), then we should not add a default prop. In this case the number of places where we are reusing the component is very small, so chances are small that we are forgetting it.\nAlso, coming back to the original issue of having to add new props in lots of places in a test suite: Another pattern might be to define a central place in the test suite where the component is rendered, something like this:\nconst renderMessageList = (props} => mount(<MessageList editing data={data} .... {...props />);\n\nThis way you can have a central set of default props where you are adding a new one, but you can still override individual ones in the individual tests.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390923377", "createdAt": "2020-03-11T12:02:10Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/components/widgets/MessageList.test.jsx", "diffHunk": "@@ -108,6 +108,7 @@ describe('MessageList', () => {\n     const wrapper1 = mount(<MessageList editing\n                                         data={data}\n                                         config={config}\n+                                        onConfigChange={() => {}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMyODgxNg=="}, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTAzMzIyOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConfig.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNDozNlrOF0QrRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNDozNlrOF0QrRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0MzQ5NQ==", "bodyText": "I think there is no benefit reusing SortConfig here. Instead, we could just store the field/direction values in internal fields (we do not even need getters for them) and just define the JSON (de-)serialization format in here.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390343495", "createdAt": "2020-03-10T14:14:36Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConfig.js", "diffHunk": "@@ -0,0 +1,36 @@\n+// @flow strict\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig, { Builder } from 'views/logic/aggregationbuilder/SortConfig';\n+\n+export type MessageSortConfigJson = {\n+  field: string,\n+  order: 'ASC' | 'DESC',\n+};\n+\n+export default class MessageSortConfig {\n+  _value: SortConfig\n+\n+  constructor(type: string, field: string, direction: Direction) {\n+    this._value = new SortConfig(type, field, direction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTAzNDQ4OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConfig.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNDo1M1rOF0QsGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDoxNDo1M1rOF0QsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0MzcwNA==", "bodyText": "This actually returns a SortConfig instead of a MessageSortConfig.", "url": "https://github.com/Graylog2/graylog2-server/pull/7645#discussion_r390343704", "createdAt": "2020-03-10T14:14:53Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/logic/searchtypes/messages/MessageSortConfig.js", "diffHunk": "@@ -0,0 +1,36 @@\n+// @flow strict\n+import Direction from 'views/logic/aggregationbuilder/Direction';\n+import SortConfig, { Builder } from 'views/logic/aggregationbuilder/SortConfig';\n+\n+export type MessageSortConfigJson = {\n+  field: string,\n+  order: 'ASC' | 'DESC',\n+};\n+\n+export default class MessageSortConfig {\n+  _value: SortConfig\n+\n+  constructor(type: string, field: string, direction: Direction) {\n+    this._value = new SortConfig(type, field, direction);\n+  }\n+\n+  toJSON(): MessageSortConfigJson {\n+    const { field, direction } = this._value;\n+\n+    return {\n+      field,\n+      order: direction === Direction.Ascending ? 'ASC' : 'DESC',\n+    };\n+  }\n+\n+  static fromJSON(value: MessageSortConfigJson) {\n+    const { field, order } = value;\n+\n+    // eslint-disable-next-line no-use-before-define\n+    return new Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90c514bccb38baf5d1d4b6c1d575d7d0795d93ea"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3829, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}