{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MTg4Nzg5", "number": 9444, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOToxMzoxNlrOE4ldQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyODoyM1rOFA2h9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzY5NDEwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/users/UserEdit/UserEdit.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOToxMzoxNlrOHymatA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOToxMzoxNlrOHymatA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgyMDI3Ng==", "bodyText": "console.log", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r522820276", "createdAt": "2020-11-13T09:13:16Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/users/UserEdit/UserEdit.jsx", "diffHunk": "@@ -28,6 +28,7 @@ type Props = {\n };\n \n const _updateUser = (data, currentUser, userId) => {\n+  console.log(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b077d27ea1ac4c5a66b567e5daea0bf0d27d88e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyOTk4MzI3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoyNTozN1rOH6VGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoyNTozN1rOH6VGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNTE2Nw==", "bodyText": "Right now these selects only have the placeholder 'Select...'.  We could display something like Select type and Select entity.", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r530925167", "createdAt": "2020-11-26T10:25:37Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));\n+    }\n+  }, [permissions, userId]);\n+\n+  if (!streams || !dashboards) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <Field name=\"startpage\">\n+      {({ field: { name, value, onChange } }) => {\n+        const type = value?.type ?? 'dashboard';\n+        const options = type === 'dashboard' ? dashboards : streams;\n+\n+        const error = value?.id && options.findIndex(({ value: v }) => v === value.id) < 0\n+          ? <Alert bsStyle=\"warning\">User is missing permission for the configured page</Alert>\n+          : null;\n+\n+        const resetBtn = value?.type\n+          ? (\n+            <ResetBtn onClick={() => onChange({ target: { name, value: {} } })}>\n+              Reset\n+            </ResetBtn>\n+          )\n+          : null;\n+\n+        return (\n+          <>\n+            <Input id=\"startpage\"\n+                   label=\"Start page\"\n+                   help=\"Select the page the user sees right after log in\"\n+                   labelClassName=\"col-sm-3\"\n+                   wrapperClassName=\"col-sm-9\">\n+              <>\n+                <Container>\n+                  <TypeSelect options={typeOptions}\n+                              onChange={(newType) => onChange({ target: { name, value: { type: newType, id: undefined } } })}\n+                              value={value?.type} />\n+                  <ValueSelect options={options}\n+                               onChange={(newId) => onChange({ target: { name, value: { type: type, id: newId } } })}\n+                               value={value?.id} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06555bb0a61f2c22b3427f949cac3399325c5be3"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAyMTA2OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNTozMFrOH6VetQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNTozMFrOH6VetQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTM4MQ==", "bodyText": "We could describe here that only entities which are accessible by a user can be defined as a start page. If you think about it, it is legit, but this way we can avoid confusion, especially when an admin edits the settings of an user.", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r530931381", "createdAt": "2020-11-26T10:35:30Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));\n+    }\n+  }, [permissions, userId]);\n+\n+  if (!streams || !dashboards) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <Field name=\"startpage\">\n+      {({ field: { name, value, onChange } }) => {\n+        const type = value?.type ?? 'dashboard';\n+        const options = type === 'dashboard' ? dashboards : streams;\n+\n+        const error = value?.id && options.findIndex(({ value: v }) => v === value.id) < 0\n+          ? <Alert bsStyle=\"warning\">User is missing permission for the configured page</Alert>\n+          : null;\n+\n+        const resetBtn = value?.type\n+          ? (\n+            <ResetBtn onClick={() => onChange({ target: { name, value: {} } })}>\n+              Reset\n+            </ResetBtn>\n+          )\n+          : null;\n+\n+        return (\n+          <>\n+            <Input id=\"startpage\"\n+                   label=\"Start page\"\n+                   help=\"Select the page the user sees right after log in\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06555bb0a61f2c22b3427f949cac3399325c5be3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAzODQ5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozOTo1OVrOH6VpTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1MjoyN1rOH-crow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNDA5NA==", "bodyText": "Currently it is possible to define only the type without an entity as the start page and submit the settings. We could add a validate prop for the field, to avoid this case.", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r530934094", "createdAt": "2020-11-26T10:39:59Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));\n+    }\n+  }, [permissions, userId]);\n+\n+  if (!streams || !dashboards) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <Field name=\"startpage\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06555bb0a61f2c22b3427f949cac3399325c5be3"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MzY4Mw==", "bodyText": "There is no harm in only selecting a type and I think it is clear that no start page is selected then. So I would not add a validation.", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r535243683", "createdAt": "2020-12-03T13:52:27Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));\n+    }\n+  }, [permissions, userId]);\n+\n+  if (!streams || !dashboards) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <Field name=\"startpage\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNDA5NA=="}, "originalCommit": {"oid": "06555bb0a61f2c22b3427f949cac3399325c5be3"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDA0ODQ0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo0MjoyMlrOH6VvQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1NDowNlrOH-cwJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNTYxOQ==", "bodyText": "Whats the reason to not load dashboards and streams at the same time?", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r530935619", "createdAt": "2020-11-26T10:42:22Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06555bb0a61f2c22b3427f949cac3399325c5be3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NDgzNw==", "bodyText": "On request is overriding the other and we and up only having either streams or dashboards but not both \ud83d\ude15 So we need to synchronize the requests", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r535244837", "createdAt": "2020-12-03T13:54:06Z", "author": {"login": "kmerz"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNTYxOQ=="}, "originalCommit": {"oid": "06555bb0a61f2c22b3427f949cac3399325c5be3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDM3NzQ5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyODoyM1rOH_V3QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNToyODoyM1rOH_V3QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4MDU0NQ==", "bodyText": "When there is no type selected it says Select undefined.\nLet use Select ${value?.type} ?? 'entity' here.", "url": "https://github.com/Graylog2/graylog2-server/pull/9444#discussion_r536180545", "createdAt": "2020-12-04T15:28:23Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/users/StartpageFormGroup.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright (C) 2020 Graylog, Inc.\n+ *\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the Server Side Public License, version 1,\n+ * as published by MongoDB, Inc.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * Server Side Public License for more details.\n+ *\n+ * You should have received a copy of the Server Side Public License\n+ * along with this program. If not, see\n+ * <http://www.mongodb.com/licensing/server-side-public-license>.\n+ */\n+import * as React from 'react';\n+import * as Immutable from 'immutable';\n+import { useState, useEffect } from 'react';\n+import { Field } from 'formik';\n+import styled from 'styled-components';\n+\n+import { getValuesFromGRN } from 'logic/permissions/GRN';\n+import { Button, Alert } from 'components/graylog';\n+import { Input } from 'components/bootstrap';\n+import SharedEntity from 'logic/permissions/SharedEntity';\n+import EntityShareDomain from 'domainActions/permissions/EntityShareDomain';\n+import Spinner from 'components/common/Spinner';\n+import Select from 'components/common/Select';\n+import { DashboardsActions } from 'views/stores/DashboardsStore';\n+import { StreamsActions } from 'stores/streams/StreamsStore';\n+\n+const Container = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const TypeSelect = styled(Select)`\n+  width: 200px;\n+  margin-right: 3px;\n+`;\n+\n+const ValueSelect = styled(Select)`\n+  width: 400px;\n+`;\n+\n+const ResetBtn = styled(Button)`\n+  margin-left: 5px;\n+`;\n+\n+type Props = {\n+  userId: string;\n+  permissions: Immutable.List<string>;\n+}\n+\n+type Option = {\n+  value: string;\n+  label: string;\n+}\n+\n+// We cannot ask for all since the backend did not implement something like this. So for now its 10000.\n+const UNLIMITED_ENTITY_SHARE_REQ = { page: 1, perPage: 10000, query: '' };\n+\n+const grnId = (grn) => getValuesFromGRN(grn).id;\n+const _grnOptionFormatter = ({ id, title }: SharedEntity): Option => ({ value: grnId(id), label: title });\n+const typeOptions = [\n+  { value: 'dashboard', label: 'Dashboard' },\n+  { value: 'stream', label: 'Stream' },\n+];\n+\n+const ADMIN_PERMISSION = '*';\n+\n+const StartpageFormGroup = ({ userId, permissions }: Props) => {\n+  const [dashboards, setDashboards] = useState<Option[] | undefined>();\n+  const [streams, setStreams] = useState<Option[] | undefined>();\n+\n+  useEffect(() => {\n+    if (permissions.includes(ADMIN_PERMISSION)) {\n+      DashboardsActions.search('', 1, 0).then(({ list }) => setDashboards(list.map(({ id, title }) => ({ value: id, label: title }))));\n+\n+      StreamsActions.searchPaginated(1, 0, '').then(({ streams: streamsList }) => setStreams(streamsList.map(({ id, title }) => ({ value: id, label: title }))));\n+    } else {\n+      EntityShareDomain.loadUserSharesPaginated(userId, {\n+        ...UNLIMITED_ENTITY_SHARE_REQ,\n+        additionalQueries: { entity_type: 'dashboard' },\n+      }).then(({ list }) => setDashboards(list.map(_grnOptionFormatter).toArray()))\n+        .then(() => EntityShareDomain.loadUserSharesPaginated(userId, {\n+          ...UNLIMITED_ENTITY_SHARE_REQ,\n+          additionalQueries: { entity_type: 'stream' },\n+        }).then(({ list }) => setStreams(list.map(_grnOptionFormatter).toArray())));\n+    }\n+  }, [permissions, userId]);\n+\n+  if (!streams || !dashboards) {\n+    return <Spinner />;\n+  }\n+\n+  return (\n+    <Field name=\"startpage\">\n+      {({ field: { name, value, onChange } }) => {\n+        const type = value?.type ?? 'dashboard';\n+        const options = type === 'dashboard' ? dashboards : streams;\n+\n+        const error = value?.id && options.findIndex(({ value: v }) => v === value.id) < 0\n+          ? <Alert bsStyle=\"warning\">User is missing permission for the configured page</Alert>\n+          : null;\n+\n+        const resetBtn = value?.type\n+          ? (\n+            <ResetBtn onClick={() => onChange({ target: { name, value: {} } })}>\n+              Reset\n+            </ResetBtn>\n+          )\n+          : null;\n+\n+        return (\n+          <>\n+            <Input id=\"startpage\"\n+                   label=\"Start page\"\n+                   help=\"Select the page the user sees right after log in. Only entities are selectable which the user has permissions for.\"\n+                   labelClassName=\"col-sm-3\"\n+                   wrapperClassName=\"col-sm-9\">\n+              <>\n+                <Container>\n+                  <TypeSelect options={typeOptions}\n+                              placeholder=\"Select type\"\n+                              onChange={(newType) => onChange({ target: { name, value: { type: newType, id: undefined } } })}\n+                              value={value?.type} />\n+                  <ValueSelect options={options}\n+                               placeholder={`Select ${value?.type}`}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99893aa9d8bae5f5d4f4716d3ac4bc437874bc47"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4418, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}