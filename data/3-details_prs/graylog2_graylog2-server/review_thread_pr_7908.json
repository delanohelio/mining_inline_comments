{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjQzMTM5", "number": 7908, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMDoyNFrODzmd6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMTowMlrODzs9zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDM0MjE5OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/errors/ReportedError.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMDoyNFrOGIIXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMDoyNFrOGIIXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3ODkwNA==", "bodyText": "Typo: UnauthoriedErrorType -> `UnauthorizedErrorType", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411178904", "createdAt": "2020-04-20T08:10:24Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/logic/errors/ReportedError.js", "diffHunk": "@@ -0,0 +1,30 @@\n+// @flow strict\n+// eslint-disable-next-line import/no-cycle\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+export const ReactErrorType = 'ReactError';\n+export const UnauthoriedErrorType = 'UnauthorizedError';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b826ed69f93b305e05e70826ddd3e21626fd63c6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDM0NTcxOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/errors/ReportedError.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMToxOFrOGIIZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoxMToxOFrOGIIZuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE3OTQ0OA==", "bodyText": "We can improve the naming a bit by turning this into ReactError and rename the function used to create one to createReactError, same for UnauthorizedErrorInternal.", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411179448", "createdAt": "2020-04-20T08:11:18Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/logic/errors/ReportedError.js", "diffHunk": "@@ -0,0 +1,30 @@\n+// @flow strict\n+// eslint-disable-next-line import/no-cycle\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+export const ReactErrorType = 'ReactError';\n+export const UnauthoriedErrorType = 'UnauthorizedError';\n+\n+type ReactErrorInternal = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b826ed69f93b305e05e70826ddd3e21626fd63c6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDM5MTM3OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/errors/ReportedError.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoyMTozNlrOGIIzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODoyMTozNlrOGIIzog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE4NjA4Mg==", "bodyText": "Although it is not checked yet, we should use the same semicolon-rule for flow code and append one at the end of a statement.", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411186082", "createdAt": "2020-04-20T08:21:36Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/logic/errors/ReportedError.js", "diffHunk": "@@ -0,0 +1,30 @@\n+// @flow strict\n+// eslint-disable-next-line import/no-cycle\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+export const ReactErrorType = 'ReactError';\n+export const UnauthoriedErrorType = 'UnauthorizedError';\n+\n+type ReactErrorInternal = {\n+  error: Error,\n+  info: { componentStack: string },\n+  type: 'ReactError'\n+}\n+\n+type UnauthorizedErrorInternal = {\n+  error: FetchError,\n+  type: 'UnauthorizedError'\n+}\n+\n+export type ReportedError = ReactErrorInternal | UnauthorizedErrorInternal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b826ed69f93b305e05e70826ddd3e21626fd63c6"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTM1MzM0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/pages/UnauthorizedErrorPage.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxNzo1NVrOGIRm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxNzo1NVrOGIRm0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzMDI1OQ==", "bodyText": "Typo: tying -> trying", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411330259", "createdAt": "2020-04-20T12:17:55Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/UnauthorizedErrorPage.jsx", "diffHunk": "@@ -0,0 +1,62 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import { Icon, ClipboardButton } from 'components/common';\n+import ErrorPage from 'components/errors/ErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+  location: {\n+    pathname: string\n+  }\n+}\n+\n+const UnauthorizedErrorPage = ({ error, location: { pathname } }: Props) => {\n+  const errorMessage = error?.message || JSON.stringify(error);\n+  const pageDetails = `The permissions check for the following request failed,\\nwhile tying to access ${pathname}.`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfd7800e947e03ba46df7f143c4d41587d0c93a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTM1NDg0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/pages/UnauthorizedErrorPage.jsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxODoxOFrOGIRnrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoxODoxOFrOGIRnrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzMDQ3Ng==", "bodyText": "Typo: ressource -> resource", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411330476", "createdAt": "2020-04-20T12:18:18Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/pages/UnauthorizedErrorPage.jsx", "diffHunk": "@@ -0,0 +1,62 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import { withRouter } from 'react-router';\n+\n+import { FetchError } from 'logic/rest/FetchProvider';\n+\n+import { Icon, ClipboardButton } from 'components/common';\n+import ErrorPage from 'components/errors/ErrorPage';\n+\n+type Props = {\n+  error: FetchError,\n+  location: {\n+    pathname: string\n+  }\n+}\n+\n+const UnauthorizedErrorPage = ({ error, location: { pathname } }: Props) => {\n+  const errorMessage = error?.message || JSON.stringify(error);\n+  const pageDetails = `The permissions check for the following request failed,\\nwhile tying to access ${pathname}.`;\n+  const description = (\n+    <>\n+      <p>You do not have the required permissions to view this ressource.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfd7800e947e03ba46df7f143c4d41587d0c93a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTM5MjYzOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/components/errors/ReportedError.test.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjoyNzozMlrOGIR9dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDowNToxMVrOGIWMvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzNjA1Mg==", "bodyText": "suppressConsole should wrap the smallest possible scope to prevent suppressing valid console output, so maybe we can narrow it down? Why do we need it here anyway, I think there is not exception raised in here?", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411336052", "createdAt": "2020-04-20T12:27:32Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/components/errors/ReportedError.test.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+// @flow strict\n+import React from 'react';\n+import { render, cleanup, waitForElement, waitForElementToBeRemoved } from 'wrappedTestingLibrary';\n+\n+import suppressConsole from 'helpers/suppressConsole';\n+import ErrorsActions from 'actions/errors/ErrorsActions';\n+import { createReactError, createUnauthorizedError } from 'logic/errors/ReportedErrors';\n+import { FetchError } from 'logic/rest/FetchProvider';\n+import ReportedError from './ReportedError';\n+\n+jest.unmock('logic/rest/FetchProvider');\n+jest.mock('react-router', () => ({ withRouter: (x) => x }));\n+\n+const router = {\n+  listen: () => jest.fn(),\n+};\n+\n+describe('ReportedError', () => {\n+  afterEach(() => {\n+    cleanup();\n+  });\n+\n+  it('registers to router upon mount', () => {\n+    const mockRouter = {\n+      listen: jest.fn(() => jest.fn()),\n+    };\n+    render(<ReportedError router={mockRouter}>Hello World!</ReportedError>);\n+\n+    expect(mockRouter.listen).toHaveBeenCalledTimes(1);\n+  });\n+\n+  it('unregisters from router upon unmount', () => {\n+    const unlisten = jest.fn();\n+    const mockRouter = {\n+      listen: () => unlisten,\n+    };\n+    const { unmount } = render(<ReportedError router={mockRouter}>Hello World!</ReportedError>);\n+\n+    unmount();\n+\n+    expect(unlisten).toHaveBeenCalled();\n+  });\n+\n+\n+  it('displays child component if there is no error', () => {\n+    const { getByText } = render(<ReportedError router={router}>Hello World!</ReportedError>);\n+\n+    expect(getByText('Hello World!')).not.toBeNull();\n+  });\n+\n+  it('displays runtime error page when react error got reported', () => {\n+    suppressConsole(async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfd7800e947e03ba46df7f143c4d41587d0c93a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwNTUwMA==", "bodyText": "Good point. I removed the not needed suppressConsoles and adjusted the scope of the remaining ones, which revealed a broken test.", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411405500", "createdAt": "2020-04-20T14:05:11Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/components/errors/ReportedError.test.jsx", "diffHunk": "@@ -0,0 +1,95 @@\n+// @flow strict\n+import React from 'react';\n+import { render, cleanup, waitForElement, waitForElementToBeRemoved } from 'wrappedTestingLibrary';\n+\n+import suppressConsole from 'helpers/suppressConsole';\n+import ErrorsActions from 'actions/errors/ErrorsActions';\n+import { createReactError, createUnauthorizedError } from 'logic/errors/ReportedErrors';\n+import { FetchError } from 'logic/rest/FetchProvider';\n+import ReportedError from './ReportedError';\n+\n+jest.unmock('logic/rest/FetchProvider');\n+jest.mock('react-router', () => ({ withRouter: (x) => x }));\n+\n+const router = {\n+  listen: () => jest.fn(),\n+};\n+\n+describe('ReportedError', () => {\n+  afterEach(() => {\n+    cleanup();\n+  });\n+\n+  it('registers to router upon mount', () => {\n+    const mockRouter = {\n+      listen: jest.fn(() => jest.fn()),\n+    };\n+    render(<ReportedError router={mockRouter}>Hello World!</ReportedError>);\n+\n+    expect(mockRouter.listen).toHaveBeenCalledTimes(1);\n+  });\n+\n+  it('unregisters from router upon unmount', () => {\n+    const unlisten = jest.fn();\n+    const mockRouter = {\n+      listen: () => unlisten,\n+    };\n+    const { unmount } = render(<ReportedError router={mockRouter}>Hello World!</ReportedError>);\n+\n+    unmount();\n+\n+    expect(unlisten).toHaveBeenCalled();\n+  });\n+\n+\n+  it('displays child component if there is no error', () => {\n+    const { getByText } = render(<ReportedError router={router}>Hello World!</ReportedError>);\n+\n+    expect(getByText('Hello World!')).not.toBeNull();\n+  });\n+\n+  it('displays runtime error page when react error got reported', () => {\n+    suppressConsole(async () => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzNjA1Mg=="}, "originalCommit": {"oid": "0bfd7800e947e03ba46df7f143c4d41587d0c93a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTQwNjg0OnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMTowMlrOGISF_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDowNzowNVrOGIWSdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODIzNg==", "bodyText": "Maybe we could create a factory (createFromFetchError?) in the ReportedErrors module which just takes the error and returns a proper subtype? It could look at the status field to find out which type to return. No need to do it in this PR though.\nOptional: too many parentheses.", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411338236", "createdAt": "2020-04-20T12:31:02Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "diffHunk": "@@ -76,7 +78,7 @@ export class Builder {\n \n         // Redirect to the start page if a user is logged in but not allowed to access a certain HTTP API.\n         if (SessionStore.isLoggedIn() && error.status === 403) {\n-          history.replace(Routes.NOTFOUND);\n+          ErrorsActions.report((createUnauthorizedError(error)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfd7800e947e03ba46df7f143c4d41587d0c93a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQwNjk2NA==", "bodyText": "For now i removed the parentheses. I will add the factory when I take care of the MissingStreamPermissions case.", "url": "https://github.com/Graylog2/graylog2-server/pull/7908#discussion_r411406964", "createdAt": "2020-04-20T14:07:05Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/logic/rest/FetchProvider.js", "diffHunk": "@@ -76,7 +78,7 @@ export class Builder {\n \n         // Redirect to the start page if a user is logged in but not allowed to access a certain HTTP API.\n         if (SessionStore.isLoggedIn() && error.status === 403) {\n-          history.replace(Routes.NOTFOUND);\n+          ErrorsActions.report((createUnauthorizedError(error)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODIzNg=="}, "originalCommit": {"oid": "0bfd7800e947e03ba46df7f143c4d41587d0c93a"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3718, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}