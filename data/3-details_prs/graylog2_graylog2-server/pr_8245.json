{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MTgyODc0", "number": 8245, "title": "Retry messages if target index is read-only", "bodyText": "Description\nWe are discarding messages, if an Elasticsearch index is blocked. This PR adds infinite retries for them. Indexing will practically be blocked until the the index block is resolved by an Elasticsearch administrator.\nMotivation and Context\nFixes #8211\nHow Has This Been Tested?\n\nNew unit tests\nManual tests with local Elasticsearch in Docker\n\nTypes of changes\n\n\n Bug fix (non-breaking change which fixes an issue)\n New feature (non-breaking change which adds functionality)\n Refactoring (non-breaking change)\n Breaking change (fix or feature that would cause existing functionality to change)\n\nChecklist:\n\n\n\n My code follows the code style of this project.\n My change requires a change to the documentation.\n I have updated the documentation accordingly.\n I have read the CONTRIBUTING document.\n I have added tests to cover my changes.", "createdAt": "2020-05-29T15:48:43Z", "url": "https://github.com/Graylog2/graylog2-server/pull/8245", "merged": true, "mergeCommit": {"oid": "e7045448dccfede6f1d7710ab8d29093f1096efe"}, "closed": true, "closedAt": "2020-06-03T13:19:11Z", "author": {"login": "alex-konn"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmCK8VAH2gAyNDI1MTgyODc0Ojg4YmU2ZDIzMjI5ZTYwYzNmYjI2NDkwNzhjMTBjMGI1YmFhYTZkODQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnpV1SgFqTQyMzU0MjYyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88be6d23229e60c3fb2649078c10c0b5baaa6d84", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/88be6d23229e60c3fb2649078c10c0b5baaa6d84", "committedDate": "2020-05-29T13:06:58Z", "message": "Draft solution for retrying index failures due to flood stage reached (WIP)\n\n- Added additional retry loop in `Messages`. While it's not ideal to complicate the indexing code further, this error case can't be included in the existing retry logic, because the we have to modify the next request to only include items that have failed due to this particular error\n- Added a simple test to `MockedMessagesTest`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c76b2aaf987921e8e1471ba4680d68efa857c22", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/7c76b2aaf987921e8e1471ba4680d68efa857c22", "committedDate": "2020-05-29T14:36:30Z", "message": "Add test verifying that other errors occurring in same chunk as index block errors are not retried"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c81b08aaf3907b2104949b20820f4d383268c47a", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/c81b08aaf3907b2104949b20820f4d383268c47a", "committedDate": "2020-05-29T14:57:42Z", "message": "Treat retried index block errors that fail differently as persistent failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98abba5284b06b11995302a09cf680c96329ec99", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/98abba5284b06b11995302a09cf680c96329ec99", "committedDate": "2020-05-29T15:44:18Z", "message": "Reuse `com.github.rholder.retry.WaitStrategy` for index block retries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ce06a2451284d416b717e3bfad730907328618", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f9ce06a2451284d416b717e3bfad730907328618", "committedDate": "2020-05-29T15:54:52Z", "message": "add license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c", "committedDate": "2020-06-02T13:06:42Z", "message": "Keep using milliseconds-based waiting for `BULK_REQUEST_RETRYER`\n\n...but go with seconds-based for index block retries.\n\n- extracted a seconds-based wait strategy to a field in Messages\n- add explanatory comment for why a multiplier of 500 works, which is unintuitive\n- added separate unit tests to document how the waiting strategies actually work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMjg5ODk3", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#pullrequestreview-423289897", "createdAt": "2020-06-03T07:33:04Z", "commit": {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzozMzowNFrOGePkfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwODowMjoxOVrOGeQjUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NTU2Ng==", "bodyText": "I did not understand what the method is supposed to do before reading its body. Maybe we should rename it to waitBeforeRetrying or something along these lines?", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434365566", "createdAt": "2020-06-03T07:33:04Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -218,21 +228,85 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n             if (LOG.isDebugEnabled()) {\n                 String chunkInfo = \"\";\n                 if (chunkSize != messageList.size()) {\n-                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", partitionCount,\n-                            (int) Math.ceil((double)messageList.size() / chunkSize), offset);\n+                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", chunkCount,\n+                            (int) Math.ceil((double) messageList.size() / chunkSize), offset);\n                 }\n                 LOG.debug(\"Index: Bulk indexed {} messages{}, failures: {}\",\n                         result.getItems().size(), chunkInfo, failedItems.size());\n             }\n-            if (!result.getFailedItems().isEmpty()) {\n+            if (!remainingFailures.isEmpty()) {\n                 LOG.error(\"Failed to index [{}] messages. Please check the index error log in your web interface for the reason. Error: {}\",\n-                        result.getFailedItems().size(), result.getErrorMessage());\n+                        remainingFailures.size(), result.getErrorMessage());\n             }\n-            partitionCount++;\n+            chunkCount++;\n         }\n         return failedItems;\n     }\n \n+    private BulkResult bulkIndexChunk(List<Map.Entry<IndexSet, Message>> chunk) {\n+        Bulk.Builder bulk = new Bulk.Builder();\n+\n+        for (Map.Entry<IndexSet, Message> entry : chunk) {\n+            final Message message = entry.getValue();\n+\n+            bulk.addAction(new Index.Builder(message.toElasticSearchObject(invalidTimestampMeter))\n+                    .index(entry.getKey().getWriteIndexAlias())\n+                    .type(IndexMapping.TYPE_MESSAGE)\n+                    .id(message.getId())\n+                    .build());\n+        }\n+\n+        return runBulkRequest(bulk.build(), chunk.size());\n+    }\n+\n+    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+        Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n+        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n+\n+        long attempt = 1;\n+\n+        while (!indexBlocks.isEmpty()) {\n+            blockExecutionForAttempt(attempt++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM2NzE2MA==", "bodyText": "This should be javax.validation.constraints.NotNull instead.", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434367160", "createdAt": "2020-06-03T07:36:07Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/test/java/org/graylog2/indexer/messages/MockedMessagesTest.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.graylog2.indexer.IndexSet;\n import org.graylog2.plugin.Message;\n import org.graylog2.system.processing.InMemoryProcessingStatusRecorder;\n+import org.jetbrains.annotations.NotNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM3MjgxMw==", "bodyText": "This should have a better message, something like sleeping for ... ms before retrying bulk indexing (attempt #n).", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434372813", "createdAt": "2020-06-03T07:46:38Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -218,21 +228,85 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n             if (LOG.isDebugEnabled()) {\n                 String chunkInfo = \"\";\n                 if (chunkSize != messageList.size()) {\n-                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", partitionCount,\n-                            (int) Math.ceil((double)messageList.size() / chunkSize), offset);\n+                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", chunkCount,\n+                            (int) Math.ceil((double) messageList.size() / chunkSize), offset);\n                 }\n                 LOG.debug(\"Index: Bulk indexed {} messages{}, failures: {}\",\n                         result.getItems().size(), chunkInfo, failedItems.size());\n             }\n-            if (!result.getFailedItems().isEmpty()) {\n+            if (!remainingFailures.isEmpty()) {\n                 LOG.error(\"Failed to index [{}] messages. Please check the index error log in your web interface for the reason. Error: {}\",\n-                        result.getFailedItems().size(), result.getErrorMessage());\n+                        remainingFailures.size(), result.getErrorMessage());\n             }\n-            partitionCount++;\n+            chunkCount++;\n         }\n         return failedItems;\n     }\n \n+    private BulkResult bulkIndexChunk(List<Map.Entry<IndexSet, Message>> chunk) {\n+        Bulk.Builder bulk = new Bulk.Builder();\n+\n+        for (Map.Entry<IndexSet, Message> entry : chunk) {\n+            final Message message = entry.getValue();\n+\n+            bulk.addAction(new Index.Builder(message.toElasticSearchObject(invalidTimestampMeter))\n+                    .index(entry.getKey().getWriteIndexAlias())\n+                    .type(IndexMapping.TYPE_MESSAGE)\n+                    .id(message.getId())\n+                    .build());\n+        }\n+\n+        return runBulkRequest(bulk.build(), chunk.size());\n+    }\n+\n+    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+        Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n+        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n+\n+        long attempt = 1;\n+\n+        while (!indexBlocks.isEmpty()) {\n+            blockExecutionForAttempt(attempt++);\n+\n+            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+\n+            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+\n+            indexBlocks = indexBlocksFrom(failedItems);\n+            blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n+\n+            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            otherFailures.addAll(newOtherFailures);\n+        }\n+\n+        return otherFailures;\n+    }\n+\n+    private void blockExecutionForAttempt(long attempt) {\n+        try {\n+            long sleepTime = exponentialWaitSeconds.computeSleepTime(new IndexBlockRetryAttempt(attempt));\n+            LOG.info(\"sleeping \" + sleepTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM4MTY1MA==", "bodyText": "It would be good to have some logging here indicating that the index blocks have been resolved.", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#discussion_r434381650", "createdAt": "2020-06-03T08:02:19Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/indexer/messages/Messages.java", "diffHunk": "@@ -218,21 +228,85 @@ public ResultMessage get(String messageId, String index) throws DocumentNotFound\n             if (LOG.isDebugEnabled()) {\n                 String chunkInfo = \"\";\n                 if (chunkSize != messageList.size()) {\n-                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", partitionCount,\n-                            (int) Math.ceil((double)messageList.size() / chunkSize), offset);\n+                    chunkInfo = String.format(Locale.ROOT, \" (chunk %d/%d offset %d)\", chunkCount,\n+                            (int) Math.ceil((double) messageList.size() / chunkSize), offset);\n                 }\n                 LOG.debug(\"Index: Bulk indexed {} messages{}, failures: {}\",\n                         result.getItems().size(), chunkInfo, failedItems.size());\n             }\n-            if (!result.getFailedItems().isEmpty()) {\n+            if (!remainingFailures.isEmpty()) {\n                 LOG.error(\"Failed to index [{}] messages. Please check the index error log in your web interface for the reason. Error: {}\",\n-                        result.getFailedItems().size(), result.getErrorMessage());\n+                        remainingFailures.size(), result.getErrorMessage());\n             }\n-            partitionCount++;\n+            chunkCount++;\n         }\n         return failedItems;\n     }\n \n+    private BulkResult bulkIndexChunk(List<Map.Entry<IndexSet, Message>> chunk) {\n+        Bulk.Builder bulk = new Bulk.Builder();\n+\n+        for (Map.Entry<IndexSet, Message> entry : chunk) {\n+            final Message message = entry.getValue();\n+\n+            bulk.addAction(new Index.Builder(message.toElasticSearchObject(invalidTimestampMeter))\n+                    .index(entry.getKey().getWriteIndexAlias())\n+                    .type(IndexMapping.TYPE_MESSAGE)\n+                    .id(message.getId())\n+                    .build());\n+        }\n+\n+        return runBulkRequest(bulk.build(), chunk.size());\n+    }\n+\n+    private Set<BulkResult.BulkResultItem> retryOnlyIndexBlockItemsForever(List<Map.Entry<IndexSet, Message>> chunk, List<BulkResult.BulkResultItem> allFailedItems) {\n+        Set<BulkResult.BulkResultItem> indexBlocks = indexBlocksFrom(allFailedItems);\n+        Set<BulkResult.BulkResultItem> otherFailures = new HashSet<>(Sets.difference(new HashSet<>(allFailedItems), indexBlocks));\n+        List<Map.Entry<IndexSet, Message>> blockedMessages = messagesForResultItems(chunk, indexBlocks);\n+\n+        long attempt = 1;\n+\n+        while (!indexBlocks.isEmpty()) {\n+            blockExecutionForAttempt(attempt++);\n+\n+            BulkResult bulkResult = bulkIndexChunk(blockedMessages);\n+\n+            List<BulkResult.BulkResultItem> failedItems = bulkResult.getFailedItems();\n+\n+            indexBlocks = indexBlocksFrom(failedItems);\n+            blockedMessages = messagesForResultItems(blockedMessages, indexBlocks);\n+\n+            Set<BulkResult.BulkResultItem> newOtherFailures = Sets.difference(new HashSet<>(failedItems), indexBlocks);\n+            otherFailures.addAll(newOtherFailures);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4a7164c35c97bce1a3011e7e61fcdbc7cc63f3c"}, "originalPosition": 214}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ef4019396a74ce133fc8f51605930099dc0cac4", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/5ef4019396a74ce133fc8f51605930099dc0cac4", "committedDate": "2020-06-03T08:56:14Z", "message": "Cleaned up code based on @dennisoelkers' feedback\n\n- Mark variables as final where possible\n- Rename method from `retryOnlyIndexBlockItemsForever` to `retryIfIndexBlocksPresent`\n- Log warning, if index blocks present\n- Log info after retries have been successful\n- Removed `org.jetbrains.annotations.NotNull` annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a149188f7ea1624ce8d4972eb37c2997cd4777f", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/6a149188f7ea1624ce8d4972eb37c2997cd4777f", "committedDate": "2020-06-03T10:31:24Z", "message": "Renamed private method `blockExecutionForAttempt` to `waitBeforeRetrying`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5a1b3f1d7e1e195ca595b79f00704033eb1194f", "author": {"user": {"login": "alex-konn", "name": "Alex Konn"}}, "url": "https://github.com/Graylog2/graylog2-server/commit/f5a1b3f1d7e1e195ca595b79f00704033eb1194f", "committedDate": "2020-06-03T10:35:01Z", "message": "Renamed private method `retryIfIndexBlocksPresent` back to `retryOnlyIndexBlockItemsForever`.\n\nIt does indicate more clearly that only index blocks are retied here and that retries will go on \"forever\", if the blocks are not resolved."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTQyNjI5", "url": "https://github.com/Graylog2/graylog2-server/pull/8245#pullrequestreview-423542629", "createdAt": "2020-06-03T13:19:05Z", "commit": {"oid": "f5a1b3f1d7e1e195ca595b79f00704033eb1194f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3146, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}