{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjI3NzMx", "number": 7177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMDo1M1rODX4oVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNjozNlrODX5tPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzcxNjcwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/hooks/SyncWithQueryParameters.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMDo1M1rOFdbPKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNToxMTo1MlrOFd7kqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5OTI3Mg==", "bodyText": "Out of interest, is there a reason you are checking for the first query here, but take it for granted in BindSearchParamsFromQuery.js?", "url": "https://github.com/Graylog2/graylog2-server/pull/7177#discussion_r366399272", "createdAt": "2020-01-14T15:20:53Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/hooks/SyncWithQueryParameters.js", "diffHunk": "@@ -0,0 +1,53 @@\n+// @flow strict\n+import { useEffect } from 'react';\n+import URI from 'urijs';\n+import history from 'util/History';\n+\n+import { ViewStore } from 'views/stores/ViewStore';\n+import View from 'views/logic/views/View';\n+import { QueriesActions } from 'views/actions/QueriesActions';\n+\n+const useActionListeners = (actions, callback, dependencies) => {\n+  useEffect(() => {\n+    const unsubscribes = actions.map(action => action.listen(callback));\n+    return () => unsubscribes.forEach(unsubscribe => unsubscribe());\n+  }, dependencies);\n+};\n+\n+const extractTimerangeParams = (timerange) => {\n+  const { type } = timerange;\n+  const result = { rangetype: type };\n+\n+  switch (type) {\n+    case 'relative': return Object.entries({ ...result, relative: timerange.range });\n+    case 'keyword': return Object.entries({ ...result, keyword: timerange.keyword });\n+    case 'absolute': return Object.entries({ ...result, from: timerange.from, to: timerange.to });\n+    default: return Object.entries(result);\n+  }\n+};\n+\n+export const syncWithQueryParameters = (query: string) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const firstQuery = view.search.queries.first();\n+    if (firstQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b3ca88006f5f4eed196ec07c808b71c5be4957"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkyOTA2NQ==", "bodyText": "Not really. Added the check to SyncWithQueryParameters too.", "url": "https://github.com/Graylog2/graylog2-server/pull/7177#discussion_r366929065", "createdAt": "2020-01-15T15:11:52Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-web-interface/src/views/hooks/SyncWithQueryParameters.js", "diffHunk": "@@ -0,0 +1,53 @@\n+// @flow strict\n+import { useEffect } from 'react';\n+import URI from 'urijs';\n+import history from 'util/History';\n+\n+import { ViewStore } from 'views/stores/ViewStore';\n+import View from 'views/logic/views/View';\n+import { QueriesActions } from 'views/actions/QueriesActions';\n+\n+const useActionListeners = (actions, callback, dependencies) => {\n+  useEffect(() => {\n+    const unsubscribes = actions.map(action => action.listen(callback));\n+    return () => unsubscribes.forEach(unsubscribe => unsubscribe());\n+  }, dependencies);\n+};\n+\n+const extractTimerangeParams = (timerange) => {\n+  const { type } = timerange;\n+  const result = { rangetype: type };\n+\n+  switch (type) {\n+    case 'relative': return Object.entries({ ...result, relative: timerange.range });\n+    case 'keyword': return Object.entries({ ...result, keyword: timerange.keyword });\n+    case 'absolute': return Object.entries({ ...result, from: timerange.from, to: timerange.to });\n+    default: return Object.entries(result);\n+  }\n+};\n+\n+export const syncWithQueryParameters = (query: string) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const firstQuery = view.search.queries.first();\n+    if (firstQuery) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5OTI3Mg=="}, "originalCommit": {"oid": "a1b3ca88006f5f4eed196ec07c808b71c5be4957"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mzg5MzEwOnYy", "diffSide": "RIGHT", "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.jsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNjozNlrOFdc8Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNjozNlrOFdc8Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNzE3MQ==", "bodyText": "One thing I realised while testing these changes:\nChanging e.g. the relative time range, results in a new URL due to useSyncWithQueryParameters. because of the new URL, the query variable is different and bindSearchParamsFromQuery  gets called again.\nbindSearchParamsFromQuery will unnecessarily update the current query and also trigger another, but unnecessary search execution.", "url": "https://github.com/Graylog2/graylog2-server/pull/7177#discussion_r366427171", "createdAt": "2020-01-14T16:06:36Z", "author": {"login": "linuspahl"}, "path": "graylog2-web-interface/src/views/pages/ExtendedSearchPage.jsx", "diffHunk": "@@ -112,14 +122,30 @@ const DashboardSearchBarWithStatus = WithSearchStatus(DashboardSearchBar);\n \n const ViewAdditionalContextProvider = connect(AdditionalContext.Provider, { view: ViewStore }, ({ view }) => ({ value: { view: view.view } }));\n \n-const ExtendedSearchPage = ({ route, searchRefreshHooks }: Props) => {\n+const useStyle = () => {\n+  useEffect(() => {\n+    style.use();\n+    return () => style.unuse();\n+  }, []);\n+};\n+\n+const ExtendedSearchPage = ({ route, location = { query: {} }, router, searchRefreshHooks }: Props) => {\n+  const { pathname, search } = router.getCurrentLocation();\n+  const query = `${pathname}${search}`;\n   const refreshIfNotUndeclared = () => _refreshIfNotUndeclared(searchRefreshHooks, SearchExecutionStateStore.getInitialState());\n \n   useEffect(() => {\n-    style.use();\n+    const { view } = ViewStore.getInitialState();\n \n+    bindSearchParamsFromQuery({ view, query: location.query, retry: () => Promise.resolve() });\n+  }, [query]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b3ca88006f5f4eed196ec07c808b71c5be4957"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3893, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}