{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMDIxMjk5", "number": 9275, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozMjozMVrOEx9T-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozNTozMlrOEx9Z2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODIwMjE3OnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozMjozMVrOHoVR2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxMTo1MFrOHo-SIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzcyMw==", "bodyText": "I think this can run in the daemon thread pool. What do you think?", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512053723", "createdAt": "2020-10-26T15:32:31Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.periodical;\n+\n+import org.graylog2.notifications.Notification;\n+import org.graylog2.notifications.NotificationService;\n+import org.graylog2.plugin.Version;\n+import org.graylog2.plugin.periodical.Periodical;\n+import org.graylog2.storage.ElasticsearchVersion;\n+import org.graylog2.storage.versionprobe.VersionProbe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class ESVersionCheckPeriodical extends Periodical {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n+    private final Version initialElasticsearchVersion;\n+    private final Optional<Version> versionOverride;\n+    private final List<URI> elasticsearchHosts;\n+    private final VersionProbe versionProbe;\n+    private final NotificationService notificationService;\n+\n+    @Inject\n+    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n+                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n+                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                                    VersionProbe versionProbe,\n+                                    NotificationService notificationService) {\n+        this.initialElasticsearchVersion = elasticsearchVersion;\n+        this.versionOverride = Optional.ofNullable(versionOverride);\n+        this.elasticsearchHosts = elasticsearchHosts;\n+        this.versionProbe = versionProbe;\n+        this.notificationService = notificationService;\n+    }\n+\n+    @Override\n+    public boolean runsForever() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean stopOnGracefulShutdown() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean masterOnly() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean startOnThisNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isDaemon() {\n+        return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c087aade3da2ced1f096c7c709f30e88a5814f8e"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNTUzNw==", "bodyText": "Good point!", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512725537", "createdAt": "2020-10-27T14:11:50Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.periodical;\n+\n+import org.graylog2.notifications.Notification;\n+import org.graylog2.notifications.NotificationService;\n+import org.graylog2.plugin.Version;\n+import org.graylog2.plugin.periodical.Periodical;\n+import org.graylog2.storage.ElasticsearchVersion;\n+import org.graylog2.storage.versionprobe.VersionProbe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class ESVersionCheckPeriodical extends Periodical {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n+    private final Version initialElasticsearchVersion;\n+    private final Optional<Version> versionOverride;\n+    private final List<URI> elasticsearchHosts;\n+    private final VersionProbe versionProbe;\n+    private final NotificationService notificationService;\n+\n+    @Inject\n+    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n+                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n+                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                                    VersionProbe versionProbe,\n+                                    NotificationService notificationService) {\n+        this.initialElasticsearchVersion = elasticsearchVersion;\n+        this.versionOverride = Optional.ofNullable(versionOverride);\n+        this.elasticsearchHosts = elasticsearchHosts;\n+        this.versionProbe = versionProbe;\n+        this.notificationService = notificationService;\n+    }\n+\n+    @Override\n+    public boolean runsForever() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean stopOnGracefulShutdown() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean masterOnly() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean startOnThisNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isDaemon() {\n+        return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MzcyMw=="}, "originalCommit": {"oid": "c087aade3da2ced1f096c7c709f30e88a5814f8e"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODIxNzIxOnYy", "diffSide": "RIGHT", "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNTozNTozMlrOHoVbOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDoxMTozNVrOHo-RTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NjEyMQ==", "bodyText": "Tiny nitpick: use placeholder instead of manual string concat makes it a bit more readable. \ud83d\ude04\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n          \n          \n            \n                                    \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n          \n          \n            \n                                    \" - a restart is required!\");\n          \n          \n            \n                            LOG.warn(\"Elasticsearch version currently running ({}) is incompatible with the \" +\n          \n          \n            \n                                    \"one Graylog was started with ({}) - a restart is required!\", version, initialElasticsearchVersion);", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512056121", "createdAt": "2020-10-26T15:35:32Z", "author": {"login": "bernd"}, "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.periodical;\n+\n+import org.graylog2.notifications.Notification;\n+import org.graylog2.notifications.NotificationService;\n+import org.graylog2.plugin.Version;\n+import org.graylog2.plugin.periodical.Periodical;\n+import org.graylog2.storage.ElasticsearchVersion;\n+import org.graylog2.storage.versionprobe.VersionProbe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class ESVersionCheckPeriodical extends Periodical {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n+    private final Version initialElasticsearchVersion;\n+    private final Optional<Version> versionOverride;\n+    private final List<URI> elasticsearchHosts;\n+    private final VersionProbe versionProbe;\n+    private final NotificationService notificationService;\n+\n+    @Inject\n+    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n+                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n+                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                                    VersionProbe versionProbe,\n+                                    NotificationService notificationService) {\n+        this.initialElasticsearchVersion = elasticsearchVersion;\n+        this.versionOverride = Optional.ofNullable(versionOverride);\n+        this.elasticsearchHosts = elasticsearchHosts;\n+        this.versionProbe = versionProbe;\n+        this.notificationService = notificationService;\n+    }\n+\n+    @Override\n+    public boolean runsForever() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean stopOnGracefulShutdown() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean masterOnly() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean startOnThisNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isDaemon() {\n+        return false;\n+    }\n+\n+    @Override\n+    public int getInitialDelaySeconds() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public int getPeriodSeconds() {\n+        return 30;\n+    }\n+\n+    @Override\n+    protected Logger getLogger() {\n+        return LOG;\n+    }\n+\n+    @Override\n+    public void doRun() {\n+        if (versionOverride.isPresent()) {\n+            LOG.debug(\"Elasticsearch version is set manually. Not running check.\");\n+            return;\n+        }\n+\n+        final Optional<Version> probedVersion = this.versionProbe.probe(this.elasticsearchHosts);\n+\n+        probedVersion.ifPresent(version -> {\n+            if (compatible(this.initialElasticsearchVersion, version)) {\n+                notificationService.fixed(Notification.Type.ES_VERSION_MISMATCH);\n+            } else {\n+                LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n+                        \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n+                        \" - a restart is required!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c087aade3da2ced1f096c7c709f30e88a5814f8e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcyNTMyNQ==", "bodyText": "Indeed! :)", "url": "https://github.com/Graylog2/graylog2-server/pull/9275#discussion_r512725325", "createdAt": "2020-10-27T14:11:35Z", "author": {"login": "dennisoelkers"}, "path": "graylog2-server/src/main/java/org/graylog2/periodical/ESVersionCheckPeriodical.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * This file is part of Graylog.\n+ *\n+ * Graylog is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Graylog is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Graylog.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package org.graylog2.periodical;\n+\n+import org.graylog2.notifications.Notification;\n+import org.graylog2.notifications.NotificationService;\n+import org.graylog2.plugin.Version;\n+import org.graylog2.plugin.periodical.Periodical;\n+import org.graylog2.storage.ElasticsearchVersion;\n+import org.graylog2.storage.versionprobe.VersionProbe;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Optional;\n+\n+public class ESVersionCheckPeriodical extends Periodical {\n+    private static final Logger LOG = LoggerFactory.getLogger(ESVersionCheckPeriodical.class);\n+    private final Version initialElasticsearchVersion;\n+    private final Optional<Version> versionOverride;\n+    private final List<URI> elasticsearchHosts;\n+    private final VersionProbe versionProbe;\n+    private final NotificationService notificationService;\n+\n+    @Inject\n+    public ESVersionCheckPeriodical(@ElasticsearchVersion Version elasticsearchVersion,\n+                                    @Named(\"elasticsearch_version\") @Nullable Version versionOverride,\n+                                    @Named(\"elasticsearch_hosts\") List<URI> elasticsearchHosts,\n+                                    VersionProbe versionProbe,\n+                                    NotificationService notificationService) {\n+        this.initialElasticsearchVersion = elasticsearchVersion;\n+        this.versionOverride = Optional.ofNullable(versionOverride);\n+        this.elasticsearchHosts = elasticsearchHosts;\n+        this.versionProbe = versionProbe;\n+        this.notificationService = notificationService;\n+    }\n+\n+    @Override\n+    public boolean runsForever() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean stopOnGracefulShutdown() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean masterOnly() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean startOnThisNode() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isDaemon() {\n+        return false;\n+    }\n+\n+    @Override\n+    public int getInitialDelaySeconds() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public int getPeriodSeconds() {\n+        return 30;\n+    }\n+\n+    @Override\n+    protected Logger getLogger() {\n+        return LOG;\n+    }\n+\n+    @Override\n+    public void doRun() {\n+        if (versionOverride.isPresent()) {\n+            LOG.debug(\"Elasticsearch version is set manually. Not running check.\");\n+            return;\n+        }\n+\n+        final Optional<Version> probedVersion = this.versionProbe.probe(this.elasticsearchHosts);\n+\n+        probedVersion.ifPresent(version -> {\n+            if (compatible(this.initialElasticsearchVersion, version)) {\n+                notificationService.fixed(Notification.Type.ES_VERSION_MISMATCH);\n+            } else {\n+                LOG.warn(\"Elasticsearch version currently running (\" + version.toString() + \") is incompatible with the \" +\n+                        \"one Graylog was started with (\" + initialElasticsearchVersion.toString() + \")\" +\n+                        \" - a restart is required!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1NjEyMQ=="}, "originalCommit": {"oid": "c087aade3da2ced1f096c7c709f30e88a5814f8e"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4444, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}