{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzMyMjQw", "number": 3645, "title": "Define new Widget \"framework\"", "bodyText": "The core motivation here was to make it easier (and encouraged) to define a widget's\n\"answer\" view as declaratively as possible. Previously widgets would build this view procedurally (and often entirely in code rather than XML) using the addAnswerView method. This makes it hard to adjust styles as there isn't a simple way to preview the widget. It also just makes the widget harder to understand as generally reading XML layouts (especially layout constraints etc) is easier than view setup code.\nI've added new docs around the pattern I think we should be adopting and used it in TriggerWidget (and it's tests) as an example.\nThis does make one visual change which is to use the Headline6 text size for answer text. This is slightly smaller than the text was before. The thinking behind this was that the widget felt strange to look at given the question and answer texts were different sizes. If we think this new size is too small I'd suggest we bump them both up.\nWhat has been done to verify that this works as intended?\nRan tests and also manually verified that the TriggerWidget hadn't broken in anyway.\nWhy is this the best possible solution? Were any other approaches considered?\nThe team has had a bunch of discussions around this but I'm definitely interested in feedback around how this new approach feels to folks.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nShouldn't be any regression risks other than to TriggerWidget.\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-02-18T17:02:48Z", "url": "https://github.com/getodk/collect/pull/3645", "merged": true, "mergeCommit": {"oid": "60c7620c192ba94ce34a5a38032ec1978be1caae"}, "closed": true, "closedAt": "2020-03-04T13:25:10Z", "author": {"login": "seadowg"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF0U45gBqjMwNTEyMzI3NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIsUjegBqjMwODExNjg0NTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d92116a5ce28737d95b5db14d6be627f79398297", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/d92116a5ce28737d95b5db14d6be627f79398297", "committedDate": "2020-02-19T10:50:44Z", "message": "Revise TriggerWidgetTest"}, "afterCommit": {"oid": "2be7c8b1a8e375cd9c89c24c45a5dd0821fbebc6", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/2be7c8b1a8e375cd9c89c24c45a5dd0821fbebc6", "committedDate": "2020-02-19T10:53:23Z", "message": "Revise TriggerWidgetTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMDkwNjg0", "url": "https://github.com/getodk/collect/pull/3645#pullrequestreview-361090684", "createdAt": "2020-02-19T13:02:59Z", "commit": {"oid": "d314e5aba5ba6d3eb86acf12203213d4c9da9577"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzowMzowMFrOFrnOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzowMzowMFrOFrnOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3NTc1NQ==", "bodyText": "I've chosen to not extend the QuestionWidgetTest. From looking at a lot of our tests, although this pattern initially makes sense to me, it seems we run into problems with widgets having different behaviours for some of the common methods. I thought trying to build out helpers QuestionWidgetHelpers would be a more flexible approach - make the tests easy to write rather than making the tests hard to change.\nAdditionally it feels like the hierarchical nature of the widgets has only really caused problems (unpicking StringWidget common code for example) and I think using test extension here feeds into that problem as well.\nInterested to see what others think of this however!", "url": "https://github.com/getodk/collect/pull/3645#discussion_r381275755", "createdAt": "2020-02-19T13:03:00Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d314e5aba5ba6d3eb86acf12203213d4c9da9577"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODQ1Mjk0", "url": "https://github.com/getodk/collect/pull/3645#pullrequestreview-365845294", "createdAt": "2020-02-27T17:16:14Z", "commit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxNjoxNFrOFvZ7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMDozM1rOFvaeQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjIyMQ==", "bodyText": "Huh, I didn't know this was possible. I guess this makes the resulting form entry prompt more of a spy.", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385252221", "createdAt": "2020-02-27T17:16:14Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/support/MockFormEntryPromptBuilder.java", "diffHunk": "@@ -91,4 +91,11 @@ public MockFormEntryPromptBuilder withAnswerDisplayText(String text) {\n \n         return this;\n     }\n+\n+    public MockFormEntryPromptBuilder withAnswer(IAnswerData answer) {\n+        when(prompt.getAnswerValue()).thenReturn(answer);\n+        when(prompt.getAnswerText()).thenCallRealMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1ODM5NA==", "bodyText": "On one hand it's too bad that we'll end up with a bunch of trivial duplicated tests. But on the other they're really easy to write and there is value to having each widget considered independently so that they can more easily be refactored to suit their specific needs as you say. We just have to be careful to make sure all the same edge cases are considered.", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385258394", "createdAt": "2020-02-27T17:27:02Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3NTc1NQ=="}, "originalCommit": {"oid": "d314e5aba5ba6d3eb86acf12203213d4c9da9577"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MTEyMw==", "bodyText": "This makes me so angry. Why \"OK\"?! Everything about this trigger widget is objectionable starting from the fact that trigger is a well-defined concept in W3C XForms and that this is something else entirely.\nNo action to take, just venting. \ud83d\ude3e", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385261123", "createdAt": "2020-02-27T17:30:33Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"OK\"));\n+    }\n+\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer(), nullValue());\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(TriggerWidget.OK_TEXT);\n+    @Test\n+    public void clearAnswer_callsValueChangeListeners() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n-    @Override\n-    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n-        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n-        assertTrue(getWidget().getTriggerButton().isChecked());\n+    @Test\n+    public void usingReadOnlyOption_makesAllClickableElementsDisabled() {\n+        TriggerWidget widget = createWidget(promptWithReadOnly());\n+        assertThat(widget.getCheckBox().getVisibility(), equalTo(View.VISIBLE));\n+        assertThat(widget.getCheckBox().isEnabled(), equalTo(Boolean.FALSE));\n     }\n \n     @Test\n-    public void checkingTheTriggerBoxShouldSetTheAnswer() {\n-        TriggerWidget widget = getWidget();\n-        assertNull(widget.getAnswer());\n+    public void whenPromptAnswerDoesNotHaveAnswer_checkboxIsUnchecked() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(widget.getCheckBox().isChecked(), equalTo(false));\n+    }\n \n-        CheckBox triggerButton = widget.getTriggerButton();\n-        assertFalse(triggerButton.isChecked());\n+    @Test\n+    public void whenPromptHasAnswer_checkboxIsChecked() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+        assertThat(widget.getCheckBox().isChecked(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void checkingCheckbox_setsAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        CheckBox triggerButton = widget.getCheckBox();\n \n         triggerButton.setChecked(true);\n-        triggerButton.callOnClick();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"OK\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc860ec31669a129812cf0b8c4b22552025a42bd", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/bc860ec31669a129812cf0b8c4b22552025a42bd", "committedDate": "2020-02-27T17:40:14Z", "message": "Use onCreateAnswerView in trigger widget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9c460337ffb719d65393b1fd7bfa33a086b740b", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/d9c460337ffb719d65393b1fd7bfa33a086b740b", "committedDate": "2020-02-27T17:40:14Z", "message": "Add docs for widgets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e694ab6ca51776c8881dde78fea1445608ae1631", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/e694ab6ca51776c8881dde78fea1445608ae1631", "committedDate": "2020-02-27T17:40:14Z", "message": "Link to widget docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91898b53d03a29b315ffd66554995b52a5a743c9", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/91898b53d03a29b315ffd66554995b52a5a743c9", "committedDate": "2020-02-27T17:40:14Z", "message": "Update comments in QuestionWidget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f4c5daf32775283ce74de8e8d2a405e2185b816", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/9f4c5daf32775283ce74de8e8d2a405e2185b816", "committedDate": "2020-02-27T17:40:14Z", "message": "Add note about questions to STATE.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac110a99e4c0c82714156505bb91bb732c165ea", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/2ac110a99e4c0c82714156505bb91bb732c165ea", "committedDate": "2020-02-27T17:40:14Z", "message": "Correct typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8ef79552dcf1909b4e7505e040d4472fc8cbf8e", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/b8ef79552dcf1909b4e7505e040d4472fc8cbf8e", "committedDate": "2020-02-27T17:40:15Z", "message": "Revise TriggerWidgetTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99660c99a36fa4572ba65f8675ecf42737192a63", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/99660c99a36fa4572ba65f8675ecf42737192a63", "committedDate": "2020-02-27T17:40:15Z", "message": "Add widget testing docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d79f038fb65307bcc19c184f721f5987aa59a46", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/5d79f038fb65307bcc19c184f721f5987aa59a46", "committedDate": "2020-02-27T17:40:15Z", "message": "Correct widget helper name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3f5b64219679d7e46be768de609d80d865727bb", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/a3f5b64219679d7e46be768de609d80d865727bb", "committedDate": "2020-02-28T09:14:30Z", "message": "Fix trigger widget for API 21 min"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/427718ee410a5db4d8b8170b2405c058bb716c04", "committedDate": "2020-02-19T13:03:25Z", "message": "Correct widget helper name"}, "afterCommit": {"oid": "a3f5b64219679d7e46be768de609d80d865727bb", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/a3f5b64219679d7e46be768de609d80d865727bb", "committedDate": "2020-02-28T09:14:30Z", "message": "Fix trigger widget for API 21 min"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2304, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}