{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NTczMTkw", "number": 4016, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxOTozN1rOEZQ-lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxOTozN1rOEZQ-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTI4MDIzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SwipeHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxOTozN1rOHB_CPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDozNTowNVrOHB_SUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzM4OQ==", "bodyText": "I think this is clearer with xdpi and ydpi inline. The comment is very clear and dpi is common for \"dots per inch\".", "url": "https://github.com/getodk/collect/pull/4016#discussion_r471843389", "createdAt": "2020-08-18T00:19:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SwipeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.odk.collect.android.listeners;\n+\n+import android.content.Context;\n+import android.view.GestureDetector;\n+import android.view.MotionEvent;\n+\n+import androidx.core.widget.NestedScrollView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.ODKView;\n+import org.odk.collect.android.preferences.GeneralKeys;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.utilities.FlingRegister;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+\n+import timber.log.Timber;\n+\n+public class SwipeHandler {\n+    private final GestureDetector gestureDetector;\n+    private final OnSwipeListener onSwipe;\n+    private ODKView odkView;\n+    private boolean allowSwiping = true;\n+    private boolean beenSwiped;\n+\n+    public interface OnSwipeListener {\n+        void showPreviousView();\n+        void showNextView();\n+    }\n+\n+    public SwipeHandler(Context context) {\n+        gestureDetector = new GestureDetector(context, new GestureListener());\n+        this.onSwipe = (OnSwipeListener) context;\n+    }\n+\n+    public void setOdkView(ODKView odkView) {\n+        this.odkView = odkView;\n+    }\n+\n+    public void setAllowSwiping(boolean allowSwiping) {\n+        this.allowSwiping = allowSwiping;\n+    }\n+\n+    public void setBeenSwiped(boolean beenSwiped) {\n+        this.beenSwiped = beenSwiped;\n+    }\n+\n+    public boolean beenSwiped() {\n+        return beenSwiped;\n+    }\n+\n+    public GestureDetector getGestureDetector() {\n+        return gestureDetector;\n+    }\n+\n+    public class GestureListener implements GestureDetector.OnGestureListener {\n+\n+        @Override\n+        public boolean onDown(MotionEvent event) {\n+            return false;\n+        }\n+\n+        @Override\n+        public void onShowPress(MotionEvent e) {\n+\n+        }\n+\n+        @Override\n+        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n+            // The onFling() captures the 'up' event so our view thinks it gets long pressed. We don't want that, so cancel it.\n+            if (odkView != null) {\n+                odkView.cancelLongPress();\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public void onLongPress(MotionEvent e) {\n+\n+        }\n+\n+        @Override\n+        public boolean onSingleTapUp(MotionEvent e) {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\n+            FlingRegister.flingDetected();\n+\n+            // only check the swipe if it's enabled in preferences\n+            String navigation = (String) GeneralSharedPreferences.getInstance()\n+                    .get(GeneralKeys.KEY_NAVIGATION);\n+\n+            if (e1 != null && e2 != null\n+                    && navigation.contains(GeneralKeys.NAVIGATION_SWIPE) && allowSwiping) {\n+                // Looks for user swipes. If the user has swiped, move to the appropriate screen.\n+\n+                // For all screens a swipe is left/right of at least .25\" and up/down of less than .25\" OR left/right of > .5\"\n+                int xpixellimit = (int) (ScreenUtils.getXPixelsNumberPerInch() * .25);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0d424411286f88f4ba3b6fabf9364c162f8b888"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0NjMxMw==", "bodyText": "Right but still I think it's good to keep the code in a separate class (ScreenUtils) so I just change naming.", "url": "https://github.com/getodk/collect/pull/4016#discussion_r471846313", "createdAt": "2020-08-18T00:30:39Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SwipeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.odk.collect.android.listeners;\n+\n+import android.content.Context;\n+import android.view.GestureDetector;\n+import android.view.MotionEvent;\n+\n+import androidx.core.widget.NestedScrollView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.ODKView;\n+import org.odk.collect.android.preferences.GeneralKeys;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.utilities.FlingRegister;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+\n+import timber.log.Timber;\n+\n+public class SwipeHandler {\n+    private final GestureDetector gestureDetector;\n+    private final OnSwipeListener onSwipe;\n+    private ODKView odkView;\n+    private boolean allowSwiping = true;\n+    private boolean beenSwiped;\n+\n+    public interface OnSwipeListener {\n+        void showPreviousView();\n+        void showNextView();\n+    }\n+\n+    public SwipeHandler(Context context) {\n+        gestureDetector = new GestureDetector(context, new GestureListener());\n+        this.onSwipe = (OnSwipeListener) context;\n+    }\n+\n+    public void setOdkView(ODKView odkView) {\n+        this.odkView = odkView;\n+    }\n+\n+    public void setAllowSwiping(boolean allowSwiping) {\n+        this.allowSwiping = allowSwiping;\n+    }\n+\n+    public void setBeenSwiped(boolean beenSwiped) {\n+        this.beenSwiped = beenSwiped;\n+    }\n+\n+    public boolean beenSwiped() {\n+        return beenSwiped;\n+    }\n+\n+    public GestureDetector getGestureDetector() {\n+        return gestureDetector;\n+    }\n+\n+    public class GestureListener implements GestureDetector.OnGestureListener {\n+\n+        @Override\n+        public boolean onDown(MotionEvent event) {\n+            return false;\n+        }\n+\n+        @Override\n+        public void onShowPress(MotionEvent e) {\n+\n+        }\n+\n+        @Override\n+        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n+            // The onFling() captures the 'up' event so our view thinks it gets long pressed. We don't want that, so cancel it.\n+            if (odkView != null) {\n+                odkView.cancelLongPress();\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public void onLongPress(MotionEvent e) {\n+\n+        }\n+\n+        @Override\n+        public boolean onSingleTapUp(MotionEvent e) {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\n+            FlingRegister.flingDetected();\n+\n+            // only check the swipe if it's enabled in preferences\n+            String navigation = (String) GeneralSharedPreferences.getInstance()\n+                    .get(GeneralKeys.KEY_NAVIGATION);\n+\n+            if (e1 != null && e2 != null\n+                    && navigation.contains(GeneralKeys.NAVIGATION_SWIPE) && allowSwiping) {\n+                // Looks for user swipes. If the user has swiped, move to the appropriate screen.\n+\n+                // For all screens a swipe is left/right of at least .25\" and up/down of less than .25\" OR left/right of > .5\"\n+                int xpixellimit = (int) (ScreenUtils.getXPixelsNumberPerInch() * .25);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzM4OQ=="}, "originalCommit": {"oid": "b0d424411286f88f4ba3b6fabf9364c162f8b888"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0NzUwNg==", "bodyText": "I guess that by avoiding the direct dependency on the Collect instance it gets things a little closer to being testable. Fine by me.", "url": "https://github.com/getodk/collect/pull/4016#discussion_r471847506", "createdAt": "2020-08-18T00:35:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SwipeHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package org.odk.collect.android.listeners;\n+\n+import android.content.Context;\n+import android.view.GestureDetector;\n+import android.view.MotionEvent;\n+\n+import androidx.core.widget.NestedScrollView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.ODKView;\n+import org.odk.collect.android.preferences.GeneralKeys;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.utilities.FlingRegister;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+\n+import timber.log.Timber;\n+\n+public class SwipeHandler {\n+    private final GestureDetector gestureDetector;\n+    private final OnSwipeListener onSwipe;\n+    private ODKView odkView;\n+    private boolean allowSwiping = true;\n+    private boolean beenSwiped;\n+\n+    public interface OnSwipeListener {\n+        void showPreviousView();\n+        void showNextView();\n+    }\n+\n+    public SwipeHandler(Context context) {\n+        gestureDetector = new GestureDetector(context, new GestureListener());\n+        this.onSwipe = (OnSwipeListener) context;\n+    }\n+\n+    public void setOdkView(ODKView odkView) {\n+        this.odkView = odkView;\n+    }\n+\n+    public void setAllowSwiping(boolean allowSwiping) {\n+        this.allowSwiping = allowSwiping;\n+    }\n+\n+    public void setBeenSwiped(boolean beenSwiped) {\n+        this.beenSwiped = beenSwiped;\n+    }\n+\n+    public boolean beenSwiped() {\n+        return beenSwiped;\n+    }\n+\n+    public GestureDetector getGestureDetector() {\n+        return gestureDetector;\n+    }\n+\n+    public class GestureListener implements GestureDetector.OnGestureListener {\n+\n+        @Override\n+        public boolean onDown(MotionEvent event) {\n+            return false;\n+        }\n+\n+        @Override\n+        public void onShowPress(MotionEvent e) {\n+\n+        }\n+\n+        @Override\n+        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {\n+            // The onFling() captures the 'up' event so our view thinks it gets long pressed. We don't want that, so cancel it.\n+            if (odkView != null) {\n+                odkView.cancelLongPress();\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public void onLongPress(MotionEvent e) {\n+\n+        }\n+\n+        @Override\n+        public boolean onSingleTapUp(MotionEvent e) {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {\n+            FlingRegister.flingDetected();\n+\n+            // only check the swipe if it's enabled in preferences\n+            String navigation = (String) GeneralSharedPreferences.getInstance()\n+                    .get(GeneralKeys.KEY_NAVIGATION);\n+\n+            if (e1 != null && e2 != null\n+                    && navigation.contains(GeneralKeys.NAVIGATION_SWIPE) && allowSwiping) {\n+                // Looks for user swipes. If the user has swiped, move to the appropriate screen.\n+\n+                // For all screens a swipe is left/right of at least .25\" and up/down of less than .25\" OR left/right of > .5\"\n+                int xpixellimit = (int) (ScreenUtils.getXPixelsNumberPerInch() * .25);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzM4OQ=="}, "originalCommit": {"oid": "b0d424411286f88f4ba3b6fabf9364c162f8b888"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3268, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}