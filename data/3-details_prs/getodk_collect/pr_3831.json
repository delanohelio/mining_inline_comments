{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTQ4NTU0", "number": 3831, "title": "Rewriting URL widget", "bodyText": "As part of the project 'Rewriting the widget framework ' described on ODK forum here. This PR includes the new framework for the URL widget.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nNo\nDo we need any specific form for testing your changes? If so, please attach one.\nAll Widgets form, or any form with the URL widget.\nDoes this change require updates to documentation? If so, please file an issue here and include the link below.\nNo\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-05-14T12:00:12Z", "url": "https://github.com/getodk/collect/pull/3831", "merged": true, "mergeCommit": {"oid": "6202145d12f6d5326b08636ef3784d05557d88d4"}, "closed": true, "closedAt": "2020-06-23T08:00:26Z", "author": {"login": "SaumiaSinghal"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchJCbjgH2gAyNDE3OTQ4NTU0OjQ2NDRhMjlkZDI4NzQ1ZWI0MmY1NTQzZTFhZTYyZGRmY2QyOGNkNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsInWJAFqTQzMjMyOTM4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4644a29dd28745eb42f5543e1ae62ddfcd28cd44", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/4644a29dd28745eb42f5543e1ae62ddfcd28cd44", "committedDate": "2020-05-14T08:17:23Z", "message": "added test and verified that it is green"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e2dad0a2c83b19d3924a2aed5d0407754b6165", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a2e2dad0a2c83b19d3924a2aed5d0407754b6165", "committedDate": "2020-05-14T08:51:26Z", "message": "craeted url_widget_answer.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5eee5b061ed1f38f4e9d1e9c14fe434083b21866", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/5eee5b061ed1f38f4e9d1e9c14fe434083b21866", "committedDate": "2020-05-14T09:24:36Z", "message": "updated URL widget java class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b920eaa404271504f94abc23ee051c5a2ffa7f7", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/5b920eaa404271504f94abc23ee051c5a2ffa7f7", "committedDate": "2020-05-14T09:32:30Z", "message": "fixed margin and padding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/f1374418078cb1ec611611b49fed18cf59c07875", "committedDate": "2020-05-29T07:53:58Z", "message": "added tests and code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODA4MDI4", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420808028", "createdAt": "2020-05-29T09:47:56Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0Nzo1NlrOGcWKiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0Nzo1NlrOGcWKiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjQ1Ng==", "bodyText": "I would rename this whenPromptHasAnswer_displaysAnswer and the below one to whenPromptAnswerDoesNotHaveAnswer_displayEmptyString.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432376456", "createdAt": "2020-05-29T09:47:56Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODA4MzI3", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420808327", "createdAt": "2020-05-29T09:48:21Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0ODoyMVrOGcWLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0ODoyMVrOGcWLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjY3NQ==", "bodyText": "This can just be clickingButton... as it's the \"normal\" case!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432376675", "createdAt": "2020-05-29T09:48:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsNotEmpty_callsCorrectMethods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODA5MjA1", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420809205", "createdAt": "2020-05-29T09:49:38Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0OTozOVrOGcWN-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0OTozOVrOGcWN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzMzNw==", "bodyText": "I'd not bother with times here. I'd usually only use it when something happens more than once but I expect a dependency to only get called once in that case (maybe when testing caching or something).", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432377337", "createdAt": "2020-05-29T09:49:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsNotEmpty_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        TextView textView = widget.findViewById(R.id.url_answer_text);\n+        urlButton.performClick();\n+\n+        assertThat(textView.getText().toString(), equalTo(\"blah\"));\n+        verify(customTabHelper, times(1)).bindCustomTabsService(widget.getContext(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODA5NjA3", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420809607", "createdAt": "2020-05-29T09:50:11Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoxMVrOGcWPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoxMVrOGcWPNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzY1Mw==", "bodyText": "Nice change!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432377653", "createdAt": "2020-05-29T09:50:11Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -48,9 +48,9 @@\n     private TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODA5Njk2", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420809696", "createdAt": "2020-05-29T09:50:19Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoyMFrOGcWPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoyMFrOGcWPeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzcyMQ==", "bodyText": "Good catch!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432377721", "createdAt": "2020-05-29T09:50:20Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODExNzA1", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420811705", "createdAt": "2020-05-29T09:53:08Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MzowOVrOGcWVxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MzowOVrOGcWVxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTMzNQ==", "bodyText": "This can move into the XML layout.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432379335", "createdAt": "2020-05-29T09:53:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -42,31 +44,42 @@\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n     private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n+    private Button openUrlButton;\n+    private TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+                    onButtonClick(openUrlButton.getId());\n+                }\n+            });\n+        }\n+\n+        stringAnswer.setTextColor(new ThemeUtils(context).getColorOnSurface());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODEzMTk2", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420813196", "createdAt": "2020-05-29T09:55:18Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NToxOFrOGcWaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NToxOFrOGcWaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MDQxOQ==", "bodyText": "We should try as much as possible to use the @dimen margins so they're consistent in throughout the app. Here you can probably use @dimen/margin_standard for the padding as that is the normal left/right spacing (16dp).", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432380419", "createdAt": "2020-05-29T09:55:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"5dp\"\n+        android:layout_marginBottom=\"5dp\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:gravity=\"center\"\n+        android:paddingStart=\"20dp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODEzNzIy", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-420813722", "createdAt": "2020-05-29T09:56:08Z", "commit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NjowOFrOGcWbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NjowOFrOGcWbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MDgxNg==", "bodyText": "Lets maybe use @dimen/margin_extra_small for this", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432380816", "createdAt": "2020-05-29T09:56:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"5dp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a10f13e7387b31492c8c2430b4c5936e6ca203ba", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a10f13e7387b31492c8c2430b4c5936e6ca203ba", "committedDate": "2020-05-29T13:53:44Z", "message": "change test names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28cc22129b2c634646b2271a1f2eaa156c40903f", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/28cc22129b2c634646b2271a1f2eaa156c40903f", "committedDate": "2020-05-29T14:02:45Z", "message": "update url_widget_answer.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e74b9ca5ba40520744f1534f91f5f130c6b9859b", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e74b9ca5ba40520744f1534f91f5f130c6b9859b", "committedDate": "2020-05-31T19:24:12Z", "message": "added tests for longClick and cancelLongPress"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzQzMTYx", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-421743161", "createdAt": "2020-06-01T10:29:55Z", "commit": {"oid": "e74b9ca5ba40520744f1534f91f5f130c6b9859b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyOTo1NVrOGdF32w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyOTo1NVrOGdF32w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwNw==", "bodyText": "I don't think this or the test below are correct. I think my question around writing tests for setOnLongClickListener and cancelLongPress was confusing though now I look at it. Lets breakdown what we need for each method:\n\nsetOnLongClickListener: usually this needs to call setOnLongClickListener on any child views in the widget so that when I long press on anything in the widget I see the \"Edit Prompt\" pop up menu. Here you'll see that setOnLongClickListener is empty so that long pressing on the URL button won't do anything - it's clickable so it consumes the long press event. We need to write a test that makes sure long pressing on the url button will call any listener passed to the widget's setOnLongClickListener.\ncancelLongPress: this makes sure that any long press cancellation (usually the user scrolling around) works properly. I don't think there is a way to test that, so I think we should just make sure to review this method and make sure any views in the widget have the call propagated to them.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433158107", "createdAt": "2020-06-01T10:29:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,123 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n+import static android.view.KeyEvent.ACTION_UP;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.when;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+    }\n+\n+    @Test\n+    public void onLongPressButton_doesNotCallOpenUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e74b9ca5ba40520744f1534f91f5f130c6b9859b"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1266f50abab2a96918d29988eea255e695603812", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/1266f50abab2a96918d29988eea255e695603812", "committedDate": "2020-06-01T12:20:25Z", "message": "modify test for long click and remove cancel long press test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxODk2MTU4", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-421896158", "createdAt": "2020-06-01T14:36:08Z", "commit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozNjowOFrOGdM1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozNjowOFrOGdM1Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjA3OQ==", "bodyText": "Here's you're extending URLWidget for the test and then using that. That means your test is now of TestURLWidget not URLWidget. We shouldn't use fakes, mocks or stubs of the objects we're testing as this means we're not really testing the object itself!\nI'm not sure why you created this as you could just call setOnLongClickListener on the widget in the test.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433272079", "createdAt": "2020-06-01T14:36:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));\n     }\n \n-    @Test\n-    public void textViewShouldIgnoreLongPress() {\n-        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n-        TextView textView = widget.findViewById(R.id.url_answer_text);\n-\n-        textView.onEditorAction(ACTION_UP);\n-        assertThat(textView.hasFocus(), equalTo(false));\n+    private TestUrlWidget createWidget(FormEntryPrompt prompt) {\n+        return new TestUrlWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), customTabHelper, listener);\n     }\n \n+    private static class TestUrlWidget extends UrlWidget {\n \n-    private UrlWidget createWidget(FormEntryPrompt prompt) {\n-        return new UrlWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), customTabHelper);\n+        public TestUrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper, OnLongClickListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxODk3OTE5", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-421897919", "createdAt": "2020-06-01T14:38:14Z", "commit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozODoxNFrOGdM6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozODoxNFrOGdM6DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw==", "bodyText": "I think a better way to test this is to pass a mock(Listener.class) to the Widget's OnLongClickListener and then check that it is called (using when) after you call urlButton.performLongClick(). Does that make sense? That would make sure the listener the URL button has and the listener the widget has are definitely the same", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433273357", "createdAt": "2020-06-01T14:38:14Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxOTEwOTIx", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-421910921", "createdAt": "2020-06-01T14:54:03Z", "commit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDowM1rOGdNfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDowM1rOGdNfIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4Mjg0OA==", "bodyText": "Just a tiny change while we're here. Often it's nicer to have the margin between two items be on the second item (the MaterialTextView) rather than the first (the MaterialButton) here. This often helps when the first/last items have different margins and also makes it easier when deleting items. I'd probably move the marginBottom here so it's a marginTop on the MaterialTextView.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433282848", "createdAt": "2020-06-01T14:54:03Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        android:layout_marginBottom=\"@dimen/margin_extra_small\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78d2691e85b30059e52c299cb01a99171fa263d2", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/78d2691e85b30059e52c299cb01a99171fa263d2", "committedDate": "2020-06-01T15:34:02Z", "message": "update longClickListener test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8e3880183cb06fce571364d0bd210dc8129117d", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/d8e3880183cb06fce571364d0bd210dc8129117d", "committedDate": "2020-06-01T15:38:57Z", "message": "move marginBottom to the TextView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8f89b975f226a7f6c4f6c9322ff130cd82dedf8", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a8f89b975f226a7f6c4f6c9322ff130cd82dedf8", "committedDate": "2020-06-01T18:16:07Z", "message": "add test for onDetachedFromWindow() and update onLongClick test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1278c50c1b2b79b2595b8cc455e1551ac67ab3e", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e1278c50c1b2b79b2595b8cc455e1551ac67ab3e", "committedDate": "2020-06-02T00:31:24Z", "message": "make longClickListener test pass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c1e24eff5d3467faa945cca70b01660018308a6", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/0c1e24eff5d3467faa945cca70b01660018308a6", "committedDate": "2020-06-02T10:14:55Z", "message": "add cancelLongPressTest and refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjUzMzM1", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-422653335", "createdAt": "2020-06-02T13:04:07Z", "commit": {"oid": "e1278c50c1b2b79b2595b8cc455e1551ac67ab3e"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowNDowN1rOGdwlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowNDowN1rOGdwlgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzkyMA==", "bodyText": "Is this an accidental change? I can't see a reason for it.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433857920", "createdAt": "2020-06-02T13:04:07Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/CustomTabHelper.java", "diffHunk": "@@ -24,7 +24,7 @@\n public class CustomTabHelper {\n     public static final String OPEN_URL = \"url\";\n     private static final String CUSTOM_TAB_PACKAGE_NAME = \"com.android.chrome\";\n-    private CustomTabsClient customTabsClient;\n+    public CustomTabsClient customTabsClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1278c50c1b2b79b2595b8cc455e1551ac67ab3e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/7525a9aeefe3604d0c94c03c4c6d0a19f5248c54", "committedDate": "2020-06-02T14:54:58Z", "message": "revret change in CustomTabHelper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTA4MjQ0", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-424108244", "createdAt": "2020-06-04T05:16:50Z", "commit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToxNjo1MFrOGe2IGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyNDowMVrOGe2Pdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzI3Mw==", "bodyText": "Extra 't' in whenServiceConnectionIstNull", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434997273", "createdAt": "2020-06-04T05:16:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void clickingButtonForLong_callsLongClickListener() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        widget.setOnLongClickListener(listener);\n+        urlButton.performLongClick();\n+        verify(listener).onLongClick(urlButton);\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void cancelLongPress_callsCancelLongPressForButtonAndTextView() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.openUrlButton = mock(Button.class);\n+        widget.stringAnswer = mock(TextView.class);\n+        widget.cancelLongPress();\n+\n+        verify(widget.openUrlButton).cancelLongPress();\n+        verify(widget.stringAnswer).cancelLongPress();\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void detachingFromWindow_disconnectsService_whenServiceConnectionIsNotNull() {\n+        when(customTabHelper.getServiceConnection()).thenReturn(serviceConnection);\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.onDetachedFromWindow();\n+        verify(serviceConnection).onServiceDisconnected(null);\n+    }\n+\n+    @Test\n+    public void detachingFromWindow_doesNotCallOnServiceDisconnected_whenServiceConnectionIstNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ1NQ==", "bodyText": "This test and the following seem to me like they should be part of CustomTabHelper's tests, not the tests for a specific widget.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434997455", "createdAt": "2020-06-04T05:17:31Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void clickingButtonForLong_callsLongClickListener() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        widget.setOnLongClickListener(listener);\n+        urlButton.performLongClick();\n+        verify(listener).onLongClick(urlButton);\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void cancelLongPress_callsCancelLongPressForButtonAndTextView() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.openUrlButton = mock(Button.class);\n+        widget.stringAnswer = mock(TextView.class);\n+        widget.cancelLongPress();\n+\n+        verify(widget.openUrlButton).cancelLongPress();\n+        verify(widget.stringAnswer).cancelLongPress();\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void detachingFromWindow_disconnectsService_whenServiceConnectionIsNotNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzcwNQ==", "bodyText": "I think this could be _opensUri instead of _callsCorrectMethods so that the intended behavior is clear.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434997705", "createdAt": "2020-06-04T05:18:15Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg==", "bodyText": "Since we're going to be touching every widget, should we consider using view binding?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434998262", "createdAt": "2020-06-04T05:20:31Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODk3Nw==", "bodyText": "Could we consider introducing a style that includes all of the options below so that if we want to change the in-form buttons we can do it in one place?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434998977", "createdAt": "2020-06-04T05:23:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTE1OA==", "bodyText": "Can this also be a style so it's easy to make consistent across widget types?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434999158", "createdAt": "2020-06-04T05:24:01Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e622a281b2216aee38d9a9f62a441d73904bc5db", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e622a281b2216aee38d9a9f62a441d73904bc5db", "committedDate": "2020-06-04T08:55:03Z", "message": "add textAppearance for TextView"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a68ff91d562d27d0e12fe4e1c5dc1c946433a4da", "committedDate": "2020-06-04T19:43:17Z", "message": "use view binding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb5410f11e28e068242fddbd6fdd68df0e4fcab0", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/eb5410f11e28e068242fddbd6fdd68df0e4fcab0", "committedDate": "2020-06-04T08:58:21Z", "message": "remove view binding"}, "afterCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a68ff91d562d27d0e12fe4e1c5dc1c946433a4da", "committedDate": "2020-06-04T19:43:17Z", "message": "use view binding"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTc0NDQy", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-426974442", "createdAt": "2020-06-09T09:47:38Z", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0NzozOVrOGhBq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0NzozOVrOGhBq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MzU2OA==", "bodyText": "Does that still make sense to implement ButtonWidget? That was created in order to use WidgetViewUtils.createSimpleButton() - one method used in widgets for generating a button but if we are going to use xml files instead of creating those buttons programmatically we probably can get rid of it right?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437283568", "createdAt": "2020-06-09T09:47:39Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTc1NTkw", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-426975590", "createdAt": "2020-06-09T09:49:05Z", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0OTowNVrOGhBuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0OTowNVrOGhBuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDQyMQ==", "bodyText": "I would move this check to onButtonClick() then this expression will look simpler.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437284421", "createdAt": "2020-06-09T09:49:05Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTc5NTEw", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-426979510", "createdAt": "2020-06-09T09:54:11Z", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NDoxMVrOGhB53A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NDoxMVrOGhB53A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NzM4OA==", "bodyText": "Please change this name we still have such one-char names in our codebase.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437287388", "createdAt": "2020-06-09T09:54:11Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+                    onButtonClick(openUrlButton.getId());\n+                }\n+            });\n+        }\n+\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String s = prompt.getAnswerText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTg2MjY0", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-426986264", "createdAt": "2020-06-09T10:02:48Z", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowMjo0OFrOGhCN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowMjo0OFrOGhCN6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MjUyMg==", "bodyText": "What do you think about such comments? Even on master (before this big change) there is no single line crated by Yaw (every single line has been edited) of course the whole project exists thanks to Yaw but isn't git enough?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437292522", "createdAt": "2020-06-09T10:02:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,22 +17,23 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n-\n /**\n  * Widget that allows user to open URLs from within the form", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTkyOTI2", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-426992926", "createdAt": "2020-06-09T10:11:30Z", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMTozMFrOGhChAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMTozMFrOGhChAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NzQxMQ==", "bodyText": "The same here when it comes to naming.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437297411", "createdAt": "2020-06-09T10:11:30Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+                    onButtonClick(openUrlButton.getId());\n+                }\n+            });\n+        }\n+\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String s = prompt.getAnswerText();\n         if (s != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2OTk0OTg5", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-426994989", "createdAt": "2020-06-09T10:14:20Z", "commit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea089e852cf60dbb6a46fc57d125890027391a40", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/ea089e852cf60dbb6a46fc57d125890027391a40", "committedDate": "2020-06-09T10:19:15Z", "message": "change variable name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33aa0281be2967799d169ec504597d67678c5225", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/33aa0281be2967799d169ec504597d67678c5225", "committedDate": "2020-06-09T10:26:31Z", "message": "remove implementation of the interface ButtonWidget"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDU4MTEy", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427058112", "createdAt": "2020-06-09T11:49:08Z", "commit": {"oid": "33aa0281be2967799d169ec504597d67678c5225"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0OTowOFrOGhFi7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0OTowOFrOGhFi7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0NzA1NA==", "bodyText": "You can simplify this: openUrlButton.setOnClickListener(v ->  onButtonClick());", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437347054", "createdAt": "2020-06-09T11:49:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,56 +17,65 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n+\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33aa0281be2967799d169ec504597d67678c5225"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/1d868a5904497215cfea63a483c386ca036c05f6", "committedDate": "2020-06-09T12:16:16Z", "message": "use spyActivity to verify unbindService() is called on detached from window"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDk0MTkx", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427094191", "createdAt": "2020-06-09T12:34:47Z", "commit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDo0OFrOGhHYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDo0OFrOGhHYUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ==", "bodyText": "This check will be needed in case of every single widget button. If so it would be better to create our own WidgetButton class that will extend com.google.android.material.button.MaterialButton (then you can use it in your layout file). In such a class we can then override:\n    @Override\n    public boolean performClick() {\n        if (MultiClickGuard.allowClick(getClass().getName())) {\n            return super.performClick();\n        } else {\n            return false;\n        }\n    }\n\nwhat do you think about this approach?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437377105", "createdAt": "2020-06-09T12:34:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MDk3MDcx", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427097071", "createdAt": "2020-06-09T12:38:29Z", "commit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozODozMFrOGhHglA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozODozMFrOGhHglA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3OTIyMA==", "bodyText": "I would get rid of this field. this is used in just one place onButtonClick() so it would be better to add a method like:\n    private Uri getUri() {\n        return Uri.parse(stringAnswer.getText().toString());\n    }", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437379220", "createdAt": "2020-06-09T12:38:30Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,56 +17,63 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e245eeacbc776adebdf4b2dff704a99ff8b1605b", "committedDate": "2020-06-09T13:12:09Z", "message": "remove uri variable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTc0NTQx", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427174541", "createdAt": "2020-06-09T13:54:11Z", "commit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NDoxMVrOGhLNCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NDoxMVrOGhLNCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Mg==", "bodyText": "Do we need this check? I'm pretty sure we can call setText(null) and it's safe. Could you check and remove it if not needed?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437439752", "createdAt": "2020-06-09T13:54:11Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTc3NDUz", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427177453", "createdAt": "2020-06-09T13:57:01Z", "commit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NzowMVrOGhLXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NzowMVrOGhLXjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MjQ0Nw==", "bodyText": "Please move this method to the bottom of the class since it's private and used only by onButtonClick().", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437442447", "createdAt": "2020-06-09T13:57:01Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {\n+            stringAnswer.setText(answerText);\n+        }\n \n-        customTabHelper = new CustomTabHelper();\n+        return answerView;\n     }\n \n     private boolean isUrlEmpty(TextView stringAnswer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTgxNjE2", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427181616", "createdAt": "2020-06-09T14:00:58Z", "commit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDo1OFrOGhLlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDo1OFrOGhLlOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTk0NA==", "bodyText": "Please add @OverRide I know it's not required but if we do that for all the other methods let's keep consistency.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437445944", "createdAt": "2020-06-09T14:00:58Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +115,14 @@ protected void onDetachedFromWindow() {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTg0MjUy", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427184252", "createdAt": "2020-06-09T14:03:35Z", "commit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzozNVrOGhLs4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzozNVrOGhLs4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzkwNQ==", "bodyText": "We have ToastUtils class which we use for displaying toast so we should use it here as well.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437447905", "createdAt": "2020-06-09T14:03:35Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +115,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+            if (!isUrlEmpty(stringAnswer)) {\n+                customTabHelper.bindCustomTabsService(getContext(), null);\n+                customTabHelper.openUri(getContext(), getUri());\n+            } else {\n+                Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MTg0NDk0", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427184494", "createdAt": "2020-06-09T14:03:48Z", "commit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzo0OFrOGhLthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzo0OFrOGhLthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODA2OA==", "bodyText": "We have ToastUtils class which we use for displaying toast so we should use it here as well.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437448068", "createdAt": "2020-06-09T14:03:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {\n+            stringAnswer.setText(answerText);\n+        }\n \n-        customTabHelper = new CustomTabHelper();\n+        return answerView;\n     }\n \n     private boolean isUrlEmpty(TextView stringAnswer) {\n         return stringAnswer == null || stringAnswer.getText() == null\n                 || stringAnswer.getText().toString().isEmpty();\n     }\n \n+    private Uri getUri() {\n+        return Uri.parse(stringAnswer.getText().toString());\n+    }\n+\n     @Override\n     public void clearAnswer() {\n         Toast.makeText(getContext(), \"URL is readonly\", Toast.LENGTH_SHORT).show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca22e0ed2d0710b628347b1a0135ed4e1c80cef", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/8ca22e0ed2d0710b628347b1a0135ed4e1c80cef", "committedDate": "2020-06-09T14:14:16Z", "message": "code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjAzODY3", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427203867", "createdAt": "2020-06-09T14:22:44Z", "commit": {"oid": "8ca22e0ed2d0710b628347b1a0135ed4e1c80cef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoyMjo0NFrOGhMl5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoyMjo0NFrOGhMl5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MjUwMQ==", "bodyText": "Even lower please :) both are called only by onButtonClick() so it looks better if we have them below. Sorry for being picky but if you are rebuilding the widget it's good do fix even such small things.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437462501", "createdAt": "2020-06-09T14:22:44Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -108,20 +97,30 @@ public void cancelLongPress() {\n         stringAnswer.cancelLongPress();\n     }\n \n+    @Override\n     protected void onDetachedFromWindow() {\n         super.onDetachedFromWindow();\n         if (customTabHelper.getServiceConnection() != null) {\n             getContext().unbindService(customTabHelper.getServiceConnection());\n         }\n     }\n \n+    private boolean isUrlEmpty(TextView stringAnswer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ca22e0ed2d0710b628347b1a0135ed4e1c80cef"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb24e058e43aad3a382145dd0ebe377b6405094c", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/eb24e058e43aad3a382145dd0ebe377b6405094c", "committedDate": "2020-06-09T14:30:29Z", "message": "code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3ODE0MzU3", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-427814357", "createdAt": "2020-06-10T08:12:16Z", "commit": {"oid": "eb24e058e43aad3a382145dd0ebe377b6405094c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMjoxNlrOGhpzjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMjoxNlrOGhpzjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0MTEzMg==", "bodyText": "I think now you can get rid of this variable and just call stringAnswer.setText(prompt.getAnswerText()); below, it won't be a long or unclear expression.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437941132", "createdAt": "2020-06-10T08:12:16Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,77 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n-import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n+import org.odk.collect.android.utilities.ToastUtils;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb24e058e43aad3a382145dd0ebe377b6405094c"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9388b004f379cf70ae2347759748b5039270ae9", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e9388b004f379cf70ae2347759748b5039270ae9", "committedDate": "2020-06-10T13:42:36Z", "message": "remove answerTest variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33a27cee1a8876e771c0f6f7e7aa2b1dc6b60ae2", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/33a27cee1a8876e771c0f6f7e7aa2b1dc6b60ae2", "committedDate": "2020-06-11T19:12:30Z", "message": "create MultiClickSafeButton class in views"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62b83c135fe9541156393049f7984586fc57cb1", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/c62b83c135fe9541156393049f7984586fc57cb1", "committedDate": "2020-06-11T22:06:25Z", "message": "unit tests refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfa3f6d05e79e8a3154b12a57401bcbb1ef2ee76", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/dfa3f6d05e79e8a3154b12a57401bcbb1ef2ee76", "committedDate": "2020-06-17T00:27:20Z", "message": "use view binding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e7099591b84afbc0b53d9eb0840997fb317f234", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/3e7099591b84afbc0b53d9eb0840997fb317f234", "committedDate": "2020-06-17T09:47:16Z", "message": "fix pmd"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a06037b95a1805335843dc089e59a42983ffa3", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/b0a06037b95a1805335843dc089e59a42983ffa3", "committedDate": "2020-06-17T10:45:36Z", "message": "enable checkGeneratedSources in lintOptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "819b010277a11d886434c9a0a20dac685160790b", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/819b010277a11d886434c9a0a20dac685160790b", "committedDate": "2020-06-17T11:47:52Z", "message": "remove author header comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzI5Mzg5", "url": "https://github.com/getodk/collect/pull/3831#pullrequestreview-432329389", "createdAt": "2020-06-17T12:00:58Z", "commit": {"oid": "819b010277a11d886434c9a0a20dac685160790b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2686, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}