{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1OTQ0OTA5", "number": 3886, "title": "Add tests for QR sharing and import", "bodyText": "This involved a bunch of refactoring to make the QR flows more testable.\nThis also:\n\nAdds testing for adding/removing sensitive details from QR code\nDeletes ignored tests that were partially testing these feature\nRemoves Rx from QR code generation (and updated the STATE.md about this)\nUse Scheduler abstraction (using Coroutiner under the hood) to deal with async work (as a replacement for AsyncTask and Rx)\nIntroduces PreferencesProvider object for grabbing general, admin or meta shared preferences without dealing with the shared preferences abstractions (update to STATE.md about this as well)\nReworks CI to avoid OOM errors that started to block this (but we were seeing occasionally on master). As part of this I've made quality checks and unit tests run in parallel.\n\nWhat has been done to verify that this works as intended?\nRan through test lab and CI a whole bunch of times\nWhy is this the best possible solution? Were any other approaches considered?\nI think for this it would be best to bring up questions and discuss rather than run through the different changes here.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nThere have been changes to both the configure/share QR flow and the audio widget so both would be good to test.\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-06-01T12:20:39Z", "url": "https://github.com/getodk/collect/pull/3886", "merged": true, "mergeCommit": {"oid": "a6189d8822dd7b4c1066fc24316d0a5fa86262c8"}, "closed": true, "closedAt": "2020-06-29T08:00:12Z", "author": {"login": "seadowg"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn-NhqgBqjM0MDY4OTI1ODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcudvw6gH2gAyNDI1OTQ0OTA5OjA1NTNjMzhlYjE1ZDk3NDI5YWM0YTdiOGE5ODkzNDM4ZGI2ZmQ5OTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cf68e3b98cfe99075fdf9919f0938f61dec2695", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/9cf68e3b98cfe99075fdf9919f0938f61dec2695", "committedDate": "2020-06-02T17:29:55Z", "message": "Use Coroutines instead of AsyncTask for Scheduler"}, "afterCommit": {"oid": "047e97ae2d8d82776961e1b0240517b9f27b8eee", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/047e97ae2d8d82776961e1b0240517b9f27b8eee", "committedDate": "2020-06-04T13:37:09Z", "message": "Create CollectTestRuleChain for removing test boilerplate"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "047e97ae2d8d82776961e1b0240517b9f27b8eee", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/047e97ae2d8d82776961e1b0240517b9f27b8eee", "committedDate": "2020-06-04T13:37:09Z", "message": "Create CollectTestRuleChain for removing test boilerplate"}, "afterCommit": {"oid": "d3cb5d0354f8fc0b0eb42c812687b9928779eb5e", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/d3cb5d0354f8fc0b0eb42c812687b9928779eb5e", "committedDate": "2020-06-04T12:57:19Z", "message": "Replace Handler with coroutine"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c99265bc1c3fd2e5640f42476f0f167d27b0db18", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c99265bc1c3fd2e5640f42476f0f167d27b0db18", "committedDate": "2020-06-05T17:08:48Z", "message": "Add idling resource setup for Scheduler"}, "afterCommit": {"oid": "12c5121cdb7286fe18ac6b358513ad7d73d24627", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/12c5121cdb7286fe18ac6b358513ad7d73d24627", "committedDate": "2020-06-07T12:00:27Z", "message": "Add idling resource setup for Scheduler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12c5121cdb7286fe18ac6b358513ad7d73d24627", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/12c5121cdb7286fe18ac6b358513ad7d73d24627", "committedDate": "2020-06-07T12:00:27Z", "message": "Add idling resource setup for Scheduler"}, "afterCommit": {"oid": "6da4ea5cbf1f058fbc56d8f2c66c76ac1d1b96a6", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/6da4ea5cbf1f058fbc56d8f2c66c76ac1d1b96a6", "committedDate": "2020-06-08T11:30:27Z", "message": "Add idling resource setup for Scheduler"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa62c68f0885986cc612e7879c7da677995f53ef", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/fa62c68f0885986cc612e7879c7da677995f53ef", "committedDate": "2020-06-08T15:55:45Z", "message": "Try standard gradle options"}, "afterCommit": {"oid": "c48d9fc102b7ad3b4d11f96948e728ff74e58abd", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c48d9fc102b7ad3b4d11f96948e728ff74e58abd", "committedDate": "2020-06-08T12:41:27Z", "message": "Move async package to submodule"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "add291cf5f4df4a975c2bf13c12c3a213c5286e5", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/add291cf5f4df4a975c2bf13c12c3a213c5286e5", "committedDate": "2020-06-08T20:18:00Z", "message": "WIP"}, "afterCommit": {"oid": "4e839a846ed9f6a02035cc88c1cf62df21a4f8fe", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4e839a846ed9f6a02035cc88c1cf62df21a4f8fe", "committedDate": "2020-06-08T20:28:42Z", "message": "Add links to docs in Circle CI config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6edbc31a9bab8dc40bd0f9ca8cc133808ea3fdf", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/b6edbc31a9bab8dc40bd0f9ca8cc133808ea3fdf", "committedDate": "2020-06-08T22:05:58Z", "message": "Make sure activity uses injected DAO"}, "afterCommit": {"oid": "fc21e3d633d254dc5f4e1ec7523f6a0da47135d7", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/fc21e3d633d254dc5f4e1ec7523f6a0da47135d7", "committedDate": "2020-06-15T08:52:36Z", "message": "Make sure activity uses injected DAO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDkwNzUx", "url": "https://github.com/getodk/collect/pull/3886#pullrequestreview-431090751", "createdAt": "2020-06-16T01:04:29Z", "commit": {"oid": "eff29e195c2cabe38fc9101dcc4d99659c59b104"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTowODozN1rOGkHyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MToxMlrOGkLAVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ==", "bodyText": "Did you try assertThat(messageDigest, is(cachedMessageDigest))? I'm pretty sure that just works.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440529439", "createdAt": "2020-06-16T01:08:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng==", "bodyText": "Ah, you're not going all-in on Hamcrest these days?", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440529586", "createdAt": "2020-06-16T01:09:08Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")\n+    private void assertCachedFileIsCorrect(byte[] data, File file) throws NoSuchAlgorithmException {\n+        byte[] messageDigest = getDigest(data);\n+        byte[] cachedMessageDigest = FileUtils.read(file);\n+        assertTrue(Arrays.equals(messageDigest, cachedMessageDigest));\n+    }\n+\n+    private byte[] getDigest(byte[] data) throws NoSuchAlgorithmException {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(data);\n+        return md.digest();\n+    }\n+\n+    private void assertQRContains(Bitmap bitmap, String data) throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException {\n+        assertNotNull(bitmap);\n+        String result = QRCodeUtils.decodeFromBitmap(bitmap);\n+        assertEquals(data, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTQwOA==", "bodyText": "should be password", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440579408", "createdAt": "2020-06-16T04:29:30Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/MainMenuPage.java", "diffHunk": "@@ -69,6 +69,13 @@ public QRCodeTabsActivityPage clickConfigureQR() {\n         return new QRCodeTabsActivityPage(rule).assertOnPage();\n     }\n \n+    public QRCodeTabsActivityPage clickConfigureQRWithAdminPassword(String password) {\n+        clickOnString(R.string.configure_via_qr_code);\n+        inputText(\"blah\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f090d100ece447c8ae9b53243e45a0ca16ac5d55"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDI3NA==", "bodyText": "Shouldn't this be qrcode_without_passwords?", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440580274", "createdAt": "2020-06-16T04:33:18Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeViewModel.java", "diffHunk": "@@ -85,12 +85,18 @@ protected void onPostExecute(Pair<String, Bitmap> qrCode) {\n                 boolean serverPasswordSet = !generalSharedPreferences.getString(KEY_PASSWORD, \"\").isEmpty();\n                 boolean adminPasswordSet = adminSharedPreferences.contains(KEY_ADMIN_PW);\n \n-                if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n-                    warning.setValue(R.string.qrcode_with_server_password);\n-                } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n-                    warning.setValue(R.string.qrcode_with_admin_password);\n+                if (serverPasswordSet || adminPasswordSet) {\n+                    if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD) && adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_both_passwords);\n+                    } else if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n+                        warning.setValue(R.string.qrcode_with_server_password);\n+                    } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_admin_password);\n+                    } else {\n+                        warning.setValue(R.string.qrcode_without_passwords);\n+                    }\n                 } else {\n-                    warning.setValue(R.string.qrcode_without_passwords);\n+                    warning.setValue(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1baf34345cf46579a9b4360d4e21a4543cbd942c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDU4Ng==", "bodyText": "postition typo", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440580586", "createdAt": "2020-06-16T04:34:38Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "diffHunk": "@@ -29,7 +30,7 @@\n     private final MutableLiveData<Exception> error = new MutableLiveData<>();\n     private final Map<String, MutableLiveData<Integer>> positions = new HashMap<>();\n \n-    private Boolean scheduledDurationUpdates = false;\n+    private Cancellable postitionUpdatesCancellable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec7ad716aee8e72390285b7dae1d3c60ad9873e3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjIyOA==", "bodyText": "Removing -> Replacing", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440582228", "createdAt": "2020-06-16T04:41:12Z", "author": {"login": "lognaturel"}, "path": "docs/STATE.md", "diffHunk": "@@ -44,5 +44,5 @@ and update this document as the code evolves.\n * Moving code to packages based on domain slices (`audio` or `formentry` for instance) to make it easier to work on isolated features and navigate code\n * Refactoring towards an OpenRosa abstraction (`OpenRosaAPIClient`) closer to its [documented API](https://docs.getodk.org/openrosa/) and takes care of all interactions with Aggregate, Central etc (currently some high level work interacts with `OpenRosaHttpInterface` directly)\n * `QuestionWiget` implementations are moving from defining their \"answer\" view programmatically to [implementing `onCreateAnswerView`](WIDGETS.md)\n-* Removing Rx and replacing with LiveData + AsyncTask. The `Scheduler` abstraction for async work to make it easier to switch in future (to Kotlin Coroutines for instance)\n+* Removing Rx (and other async work) with LiveData + Scheduler abstraction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f119ad6f177c84f4c4ba1492ddf8b8d6ae885e"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDMxOTY2", "url": "https://github.com/getodk/collect/pull/3886#pullrequestreview-433431966", "createdAt": "2020-06-18T16:03:30Z", "commit": {"oid": "1806269f161e88d0e0deb678f84dc90257e1234d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a66ed9a90cd975d243f9f773369f01e209a3381b", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/a66ed9a90cd975d243f9f773369f01e209a3381b", "committedDate": "2020-06-22T09:29:26Z", "message": "Move import QR code to unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0f7c7c945087800cce1e98f6c1069db48a3e7d2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/a0f7c7c945087800cce1e98f6c1069db48a3e7d2", "committedDate": "2020-06-22T09:40:53Z", "message": "Use menu delegate for QR share logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7acd5687b4c95fdc724021a0e310077ef1326ca8", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/7acd5687b4c95fdc724021a0e310077ef1326ca8", "committedDate": "2020-06-22T09:40:55Z", "message": "Remove getters from CachingQRCodeGenerator only needed for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6867288b964fb11b97a3397b225390892cf49415", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/6867288b964fb11b97a3397b225390892cf49415", "committedDate": "2020-06-22T09:44:56Z", "message": "Pull out actual QR code bitmap generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1d52344b9395f39c4d2da7ffd0e846560b73004", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/d1d52344b9395f39c4d2da7ffd0e846560b73004", "committedDate": "2020-06-22T09:50:49Z", "message": "Remove Rx from QR code generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cf351ba8a9ee8983cacdf81ad966c937ee85f5f", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/7cf351ba8a9ee8983cacdf81ad966c937ee85f5f", "committedDate": "2020-06-22T09:54:25Z", "message": "Just return filepath from QRCodeGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8cbd7fc353f904611e4a81149240778007229b6", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/b8cbd7fc353f904611e4a81149240778007229b6", "committedDate": "2020-06-22T09:54:27Z", "message": "Use viewmodel for QR code generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "857f18c3298162af338dc651b66196828520f139", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/857f18c3298162af338dc651b66196828520f139", "committedDate": "2020-06-22T09:54:27Z", "message": "Add failing tests for configuring QR code passwords"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14dc8fb7c1e2f72c8ae52a8946b9d40fd69b3567", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/14dc8fb7c1e2f72c8ae52a8946b9d40fd69b3567", "committedDate": "2020-06-22T09:54:27Z", "message": "Show warnings when passwords are in QR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e5ab7dcee2853806b9de18edc3859c431e233d2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/8e5ab7dcee2853806b9de18edc3859c431e233d2", "committedDate": "2020-06-22T09:54:28Z", "message": "Make sure warning not shown when passwords not in QR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbba632c0cc66de2be9c9c3482e4406eb37e4666", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/fbba632c0cc66de2be9c9c3482e4406eb37e4666", "committedDate": "2020-06-22T09:54:28Z", "message": "Update STATE.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b78c683092e3523a2690157ccb935d4bf472574", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/3b78c683092e3523a2690157ccb935d4bf472574", "committedDate": "2020-06-22T09:54:28Z", "message": "Change scheduler cancellation to be on a task level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92faf639095dc0afda6c872cf2d605877453a3b0", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/92faf639095dc0afda6c872cf2d605877453a3b0", "committedDate": "2020-06-22T09:54:28Z", "message": "Add background work to scheduler abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a524a8f4e408b739d237296337db6bec3edea0a", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/3a524a8f4e408b739d237296337db6bec3edea0a", "committedDate": "2020-06-22T09:54:28Z", "message": "Add note about Scheduler to STATE.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e47ea108a38e1d7f1f67b9e58d39422c6da2936", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/9e47ea108a38e1d7f1f67b9e58d39422c6da2936", "committedDate": "2020-06-22T09:59:00Z", "message": "Use Java 8 Supplier/Consumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "241ca57e1fa312f1caadbd2aee307304565d3592", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/241ca57e1fa312f1caadbd2aee307304565d3592", "committedDate": "2020-06-22T09:59:02Z", "message": "Use Coroutines instead of AsyncTask for Scheduler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c8ed9f35f09bb93b1f94eb97098c34f60599e1b", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/8c8ed9f35f09bb93b1f94eb97098c34f60599e1b", "committedDate": "2020-06-22T09:59:02Z", "message": "Replace Handler with coroutine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcd54199da9d20e813a0c9b9a251498c64c2d752", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/dcd54199da9d20e813a0c9b9a251498c64c2d752", "committedDate": "2020-06-22T09:59:02Z", "message": "Create async package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecad15e3cb09a75919ac3f9b95fe171d2f1c05a1", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/ecad15e3cb09a75919ac3f9b95fe171d2f1c05a1", "committedDate": "2020-06-22T09:59:02Z", "message": "Add idling resource setup for Scheduler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e21dba81b8446f946a8ba7e50d17ee5c72168c3", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/7e21dba81b8446f946a8ba7e50d17ee5c72168c3", "committedDate": "2020-06-22T09:59:02Z", "message": "Fix test compilation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a17c4262a112b04debdce808679626dcf6f4660", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4a17c4262a112b04debdce808679626dcf6f4660", "committedDate": "2020-06-22T09:59:02Z", "message": "Add note about Scheduler to STATE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "024da9e6f4dbfe3996a0fee2dd2659d3a4f1d0f5", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/024da9e6f4dbfe3996a0fee2dd2659d3a4f1d0f5", "committedDate": "2020-06-22T09:59:03Z", "message": "Move async package to submodule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3090161ff9e09e7c98a45239cfc8db99e400bca", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/f3090161ff9e09e7c98a45239cfc8db99e400bca", "committedDate": "2020-06-22T09:59:03Z", "message": "Rework CI config to lower chance of OOM errors\n\nBest tactic appeared to be to seperate out separate submodules into\ndifferent steps. Also made quality and test checks run at the same time\nfor faster feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444ac689d69f42a08d2807a12adf1efef337b07f", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/444ac689d69f42a08d2807a12adf1efef337b07f", "committedDate": "2020-06-22T09:59:03Z", "message": "Add links to docs in Circle CI config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7da6dc0581133af5ea5fcb10504d0159f3595a", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/9a7da6dc0581133af5ea5fcb10504d0159f3595a", "committedDate": "2020-06-22T09:59:03Z", "message": "Make sure gradle builds locally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f652d38a6fa7f5ed27101328bc352d7e0abdbdec", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/f652d38a6fa7f5ed27101328bc352d7e0abdbdec", "committedDate": "2020-06-22T09:59:03Z", "message": "Whoooops. Don't show warning background when there are no creds in QR code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de47e9624183821644712e831f2462cfd0904b9", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/2de47e9624183821644712e831f2462cfd0904b9", "committedDate": "2020-06-22T09:59:03Z", "message": "Make sure activity uses injected DAO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb1d3c5515037c803979c7774559c35d08dabf2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/3bb1d3c5515037c803979c7774559c35d08dabf2", "committedDate": "2020-06-22T09:59:03Z", "message": "Fix typos"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1806269f161e88d0e0deb678f84dc90257e1234d", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/1806269f161e88d0e0deb678f84dc90257e1234d", "committedDate": "2020-06-16T08:05:10Z", "message": "Fix typos"}, "afterCommit": {"oid": "3bb1d3c5515037c803979c7774559c35d08dabf2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/3bb1d3c5515037c803979c7774559c35d08dabf2", "committedDate": "2020-06-22T09:59:03Z", "message": "Fix typos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NTI4Nzk5", "url": "https://github.com/getodk/collect/pull/3886#pullrequestreview-436528799", "createdAt": "2020-06-24T10:41:14Z", "commit": {"oid": "3bb1d3c5515037c803979c7774559c35d08dabf2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0553c38eb15d97429ac4a7b8a9893438db6fd994", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/0553c38eb15d97429ac4a7b8a9893438db6fd994", "committedDate": "2020-06-24T17:46:01Z", "message": "Make sure menu delegate is always created"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2726, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}