{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyMzA4NjM3", "number": 4168, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Mjo1MVrOEtC9NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTowNDo0NFrOEursgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjY5ODEyOnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Mjo1MVrOHgnbDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Mjo1MVrOHgnbDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2MjM4MA==", "bodyText": "We ended up having test helpers that weren't specific to our \"app code\" so moved some of that here, so we're not repeating anything.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503962380", "createdAt": "2020-10-13T13:42:51Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -310,6 +311,7 @@ dependencies {\n     testImplementation \"junit:junit:4.13\"\n     testImplementation \"org.mockito:mockito-core:3.5.11\"\n \n+    testImplementation project(path: ':test-shared')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95133fcc205e5f50e83f83f8e0e2cd2b806d117"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjcwMzY5OnYy", "diffSide": "LEFT", "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioControllerView.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Mzo1NFrOHgneYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Mzo1NFrOHgneYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2MzIzNQ==", "bodyText": "Just did a straight replacement of Butterknife with view binding here.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503963235", "createdAt": "2020-10-13T13:43:54Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioControllerView.java", "diffHunk": "@@ -24,64 +26,65 @@\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.odk.collect.android.R;\n-\n-import butterknife.BindView;\n-import butterknife.ButterKnife;\n-import butterknife.OnClick;\n-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import org.odk.collect.android.databinding.AudioControllerLayoutBinding;\n \n import static java.lang.Math.max;\n import static java.lang.Math.min;\n \n public class AudioControllerView extends FrameLayout {\n \n-    @BindView(R.id.currentDuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95133fcc205e5f50e83f83f8e0e2cd2b806d117"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjcxNjU1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/AudioPlayer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0NjozNlrOHgnmhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0NjozNlrOHgnmhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NTMxOQ==", "bodyText": "I wanted to avoid using LiveData inside View components as it means we need to pass them some kind of lifecycle to use for observations. This approach lets us use a more standard listener hook in the View but lets us use LiveData as the implementation so we have lifecycle awareness.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503965319", "createdAt": "2020-10-13T13:46:36Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/AudioPlayer.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import org.odk.collect.audioclips.Clip;\n+\n+import java.util.function.Consumer;\n+\n+public interface AudioPlayer {\n+\n+    void play(Clip clip);\n+\n+    void pause();\n+\n+    void setPosition(String clipId, Integer position);\n+\n+    void onPlayingChanged(String clipID, Consumer<Boolean> playingConsumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95133fcc205e5f50e83f83f8e0e2cd2b806d117"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjcyMzIxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ExternalAppAudioDataRequester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Nzo1MFrOHgnqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo0Nzo1MFrOHgnqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk2NjM0Ng==", "bodyText": "We should be able to swap this implementation with another one for internal recording", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503966346", "createdAt": "2020-10-13T13:47:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ExternalAppAudioDataRequester.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.provider.MediaStore;\n+import android.widget.Toast;\n+\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.ActivityAvailability;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+public class ExternalAppAudioDataRequester implements AudioDataRequester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95133fcc205e5f50e83f83f8e0e2cd2b806d117"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc2NDIxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1NTo0M1rOHgoDdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1NTo0M1rOHgoDdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MjcyNg==", "bodyText": "I definitely could have removed this everywhere but it felt like it would be pretty time intensive and actually pretty isolated from what I was working on. We can come back for this next time we touch anything in the neighbourhood.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503972726", "createdAt": "2020-10-13T13:55:43Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioHelper.java", "diffHunk": "@@ -31,21 +33,26 @@\n  * construct multiple instances (within a {@link android.view.View} or\n  * {@link androidx.fragment.app.Fragment} for instance) if needed within one\n  * {@link android.app.Activity}.\n+ *\n+ * @deprecated wrapping the ViewModel like this doesn't really fit with other ways we've integrated\n+ * widgets with \"external\" services. Instead of this widgets should talk to {@link AudioPlayer}\n+ * and the Activity/Fragment components should talk to the ViewModel itself.\n  */\n \n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc2OTY5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1Njo1MFrOHgoHAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1Njo1MFrOHgoHAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MzYzNQ==", "bodyText": "This now uses a predictable ID for the clip. I think before I wasn't as clued up on the structure of the form. Not quite sure why we went with random IDs", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503973635", "createdAt": "2020-10-13T13:56:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -157,83 +112,116 @@ public IAnswerData getAnswer() {\n     }\n \n     /**\n-     * Set this widget with the actual file returned by OnActivityResult.\n-     * Both of Uri and File are supported.\n-     * If the file is local, a Uri is enough for the copy task below.\n-     * If the chose file is from cloud(such as Google Drive),\n-     * The retrieve and copy task is already executed in the previous step,\n-     * so a File object would be presented.\n-     *\n-     * @param object Uri or File of the chosen file.\n-     * @see org.odk.collect.android.activities.FormEntryActivity#onActivityResult(int, int, Intent)\n+     * @param object file name of media file that will be available in the {@link QuestionMediaManager}\n+     * @see org.odk.collect.android.activities.FormEntryActivity\n      */\n     @Override\n     public void setBinaryData(Object object) {\n-        File newAudio;\n-        // get the file path and create a copy in the instance folder\n-        if (object instanceof Uri) {\n-            String sourcePath = getSourcePathFromUri((Uri) object);\n-            String destinationPath = FileWidgetUtils.getDestinationPathFromSourcePath(sourcePath, getInstanceFolder(), fileUtil);\n-            File source = fileUtil.getFileAtPath(sourcePath);\n-            newAudio = fileUtil.getFileAtPath(destinationPath);\n-            fileUtil.copyFile(source, newAudio);\n-        } else if (object instanceof File) {\n-            // Getting a file indicates we've done the copy in the before step\n-            newAudio = (File) object;\n-        } else {\n-            Timber.w(\"AudioWidget's setBinaryData must receive a File or Uri object.\");\n-            return;\n+        // Support being handed a File as well\n+        if (object instanceof File) {\n+            object = (String) ((File) object).getName();\n         }\n \n-        if (newAudio.exists()) {\n-            // Add the copy to the content provider\n-            ContentValues values = new ContentValues(6);\n-            values.put(Audio.Media.TITLE, newAudio.getName());\n-            values.put(Audio.Media.DISPLAY_NAME, newAudio.getName());\n-            values.put(Audio.Media.DATE_ADDED, System.currentTimeMillis());\n-            values.put(Audio.Media.DATA, newAudio.getAbsolutePath());\n-\n-            questionMediaManager.replaceRecentFileForQuestion(getFormEntryPrompt().getIndex().toString(), newAudio.getAbsolutePath());\n-\n-            Uri audioURI = getContext().getContentResolver().insert(Audio.Media.EXTERNAL_CONTENT_URI, values);\n-\n-            if (audioURI != null) {\n-                Timber.i(\"Inserting AUDIO returned uri = %s\", audioURI.toString());\n-            }\n-\n-            // when replacing an answer. remove the current media.\n-            if (binaryName != null && !binaryName.equals(newAudio.getName())) {\n-                deleteFile();\n+        if (object instanceof String) {\n+            String fileName = (String) object;\n+            File newAudio = questionMediaManager.getAnswerFile(fileName);\n+\n+            if (newAudio != null && newAudio.exists()) {\n+                // Add the copy to the content provider\n+                ContentValues values = new ContentValues(6);\n+                values.put(Audio.Media.TITLE, newAudio.getName());\n+                values.put(Audio.Media.DISPLAY_NAME, newAudio.getName());\n+                values.put(Audio.Media.DATE_ADDED, System.currentTimeMillis());\n+                values.put(Audio.Media.DATA, newAudio.getAbsolutePath());\n+\n+                questionMediaManager.replaceAnswerFile(getFormEntryPrompt().getIndex().toString(), newAudio.getAbsolutePath());\n+                Uri audioURI = getContext().getContentResolver().insert(Audio.Media.EXTERNAL_CONTENT_URI, values);\n+\n+                if (audioURI != null) {\n+                    Timber.i(\"Inserting AUDIO returned uri = %s\", audioURI.toString());\n+                }\n+\n+                // when replacing an answer. remove the current media.\n+                if (binaryName != null && !binaryName.equals(newAudio.getName())) {\n+                    deleteFile();\n+                }\n+\n+                binaryName = newAudio.getName();\n+                Timber.i(\"Setting current answer to %s\", newAudio.getName());\n+\n+                hideButtonsIfNeeded();\n+                updatePlayerMedia();\n+                widgetValueChanged();\n+            } else {\n+                Timber.e(\"Inserting Audio file FAILED\");\n             }\n-\n-            binaryName = newAudio.getName();\n-            Timber.i(\"Setting current answer to %s\", newAudio.getName());\n-\n-            widgetValueChanged();\n-            updatePlayerMedia();\n         } else {\n-            Timber.e(\"Inserting Audio file FAILED\");\n+            Timber.w(\"AudioWidget's setBinaryData must receive a File object.\");\n+            return;\n         }\n     }\n \n     private void hideButtonsIfNeeded() {\n-        if (getFormEntryPrompt().getAppearanceHint() != null\n-                && getFormEntryPrompt().getAppearanceHint().toLowerCase(Locale.ENGLISH).contains(WidgetAppearanceUtils.NEW)) {\n+        if (getAnswer() == null) {\n+            binding.captureButton.setVisibility(View.VISIBLE);\n+            binding.chooseButton.setVisibility(View.VISIBLE);\n+            binding.audioController.setVisibility(View.GONE);\n+        } else {\n+            binding.captureButton.setVisibility(View.GONE);\n+            binding.chooseButton.setVisibility(View.GONE);\n+            binding.audioController.setVisibility(View.VISIBLE);\n+        }\n+\n+        if (getFormEntryPrompt().isReadOnly()) {\n+            binding.captureButton.setVisibility(View.GONE);\n+            binding.chooseButton.setVisibility(View.GONE);\n+        }\n+\n+        if (getFormEntryPrompt().getAppearanceHint() != null && getFormEntryPrompt().getAppearanceHint().toLowerCase(Locale.ENGLISH).contains(WidgetAppearanceUtils.NEW)) {\n             binding.chooseButton.setVisibility(View.GONE);\n         }\n     }\n \n     private void updatePlayerMedia() {\n         if (binaryName != null) {\n-            audioHelper.setAudio(audioController, new Clip(String.valueOf(ViewCompat.generateViewId()), getAudioFile().getAbsolutePath()));\n-            audioController.showPlayer();\n+            Clip clip = new Clip(\"audio:\" + getFormEntryPrompt().getIndex().toString(), getAudioFile().getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc3MTQ2OnYy", "diffSide": "RIGHT", "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeLifecycleOwner.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1NzoxMlrOHgoILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1NzoxMlrOHgoILg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3MzkzNA==", "bodyText": "I have really missed apply", "url": "https://github.com/getodk/collect/pull/4168#discussion_r503973934", "createdAt": "2020-10-13T13:57:12Z", "author": {"login": "seadowg"}, "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeLifecycleOwner.kt", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.odk.collect.testshared\n+\n+import androidx.lifecycle.Lifecycle\n+import androidx.lifecycle.LifecycleOwner\n+import androidx.lifecycle.LifecycleRegistry\n+\n+class FakeLifecycleOwner : LifecycleOwner {\n+\n+    private val lifecycle = LifecycleRegistry(this).apply {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzIzNTcyOnYy", "diffSide": "RIGHT", "path": "test-shared/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzozMzoxMVrOHjJyUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODozMjo1NVrOHkDa6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMjU0Nw==", "bodyText": "Will need to pull in references for these numbers once the string module PR is merged.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r506622547", "createdAt": "2020-10-16T17:33:11Z", "author": {"login": "lognaturel"}, "path": "test-shared/build.gradle", "diffHunk": "@@ -0,0 +1,45 @@\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-android-extensions'\n+\n+android {\n+    compileSdkVersion 30\n+    buildToolsVersion \"30.0.0\"\n+\n+    defaultConfig {\n+        minSdkVersion 21\n+        targetSdkVersion 30", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739c0c20f995300e11bbc36da33f9354a1c6d1b8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2NjgyNw==", "bodyText": "Great shout. Will rebase this on top of that (making it dependent)", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507566827", "createdAt": "2020-10-19T08:32:55Z", "author": {"login": "seadowg"}, "path": "test-shared/build.gradle", "diffHunk": "@@ -0,0 +1,45 @@\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-android-extensions'\n+\n+android {\n+    compileSdkVersion 30\n+    buildToolsVersion \"30.0.0\"\n+\n+    defaultConfig {\n+        minSdkVersion 21\n+        targetSdkVersion 30", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYyMjU0Nw=="}, "originalCommit": {"oid": "739c0c20f995300e11bbc36da33f9354a1c6d1b8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzMzMDUwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/AudioDataRequester.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNzo1ODowMVrOHjKtIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwODozMzoyOVrOHkDcyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNzYwMg==", "bodyText": "Feels like this should be separate? But I suppose that can be discovered later once there are multiple implementations for recording.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r506637602", "createdAt": "2020-10-16T17:58:01Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/AudioDataRequester.java", "diffHunk": "@@ -4,4 +4,6 @@\n \n public interface AudioDataRequester {\n     void requestRecording(FormEntryPrompt prompt);\n+\n+    void requestFile(FormEntryPrompt prompt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca185546c3f5cb7a39187070563cb5fe8aad325"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2NzMwNA==", "bodyText": "Yeah this ends up changing in the next PR so your feeling is correct haha", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507567304", "createdAt": "2020-10-19T08:33:29Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/AudioDataRequester.java", "diffHunk": "@@ -4,4 +4,6 @@\n \n public interface AudioDataRequester {\n     void requestRecording(FormEntryPrompt prompt);\n+\n+    void requestFile(FormEntryPrompt prompt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYzNzYwMg=="}, "originalCommit": {"oid": "3ca185546c3f5cb7a39187070563cb5fe8aad325"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQyMzMwOnYy", "diffSide": "RIGHT", "path": "audioclips/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyODoxMFrOHjLn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODoyODoxMFrOHjLn1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MjYzMQ==", "bodyText": "Note to come back and set these to shared vars once the strings module pr is merged.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r506652631", "createdAt": "2020-10-16T18:28:10Z", "author": {"login": "lognaturel"}, "path": "audioclips/build.gradle", "diffHunk": "@@ -0,0 +1,49 @@\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-android-extensions'\n+\n+android {\n+    compileSdkVersion 29\n+    buildToolsVersion \"30.0.0\"\n+\n+    defaultConfig {\n+        minSdkVersion 21", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQyOTIwOnYy", "diffSide": "RIGHT", "path": "audioclips/src/main/java/org/odk/collect/audioclips/AudioClipViewModel.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODozMDoxMFrOHjLrnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MDozNlrOHkGfNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MzU5OQ==", "bodyText": "We don't allow wildcard imports typically. Is this going through because it's Kotlin or because the style checks aren't applied? I do think explicit imports can avoid errors and are worth it.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r506653599", "createdAt": "2020-10-16T18:30:10Z", "author": {"login": "lognaturel"}, "path": "audioclips/src/main/java/org/odk/collect/audioclips/AudioClipViewModel.kt", "diffHunk": "@@ -0,0 +1,203 @@\n+package org.odk.collect.audioclips\n+\n+import android.media.MediaPlayer\n+import androidx.lifecycle.*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2ODMxMQ==", "bodyText": "Right we're not getting style checks here but I'll rebase on top of master which will give us that setup.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507568311", "createdAt": "2020-10-19T08:35:01Z", "author": {"login": "seadowg"}, "path": "audioclips/src/main/java/org/odk/collect/audioclips/AudioClipViewModel.kt", "diffHunk": "@@ -0,0 +1,203 @@\n+package org.odk.collect.audioclips\n+\n+import android.media.MediaPlayer\n+import androidx.lifecycle.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MzU5OQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzA3OA==", "bodyText": "Nope you're right it also won't work because Kotlin. It looks like PMD support is coming but not quire there yet. I'll have a look at Kotlin specific projects for the moment to see if we can get a few of our rules applied to Kotlin so we're not too far behind when PMD supports both.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507617078", "createdAt": "2020-10-19T09:50:36Z", "author": {"login": "seadowg"}, "path": "audioclips/src/main/java/org/odk/collect/audioclips/AudioClipViewModel.kt", "diffHunk": "@@ -0,0 +1,203 @@\n+package org.odk.collect.audioclips\n+\n+import android.media.MediaPlayer\n+import androidx.lifecycle.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY1MzU5OQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzQ5MDkyOnYy", "diffSide": "RIGHT", "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo1MDo1N1rOHjMRsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjo0ODo0OFrOHkX4rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MzM0NQ==", "bodyText": "It feels weird for the module and package names to be mismatched. Is that intentional? So far all modules have matching package names. Except for collect_app, I suppose.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r506663345", "createdAt": "2020-10-16T18:50:57Z", "author": {"login": "lognaturel"}, "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.odk.collect.testshared", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU2ODk2Nw==", "bodyText": "Er annoyingly no dashes in package names. Maybe we just go with one word for module names then?", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507568967", "createdAt": "2020-10-19T08:36:00Z", "author": {"login": "seadowg"}, "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.odk.collect.testshared", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MzM0NQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4NzAxMw==", "bodyText": "I see. How about a reused module with test and utility packages or something like that? It would all be pure Java so should be no big deal to compile and I can't imagine there would be a ton shared anyway.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507887013", "createdAt": "2020-10-19T16:24:57Z", "author": {"login": "lognaturel"}, "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.odk.collect.testshared", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MzM0NQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg5OTI3Mg==", "bodyText": "Feels like a good idea to keep test and non-test code separate, so we're not bringing both in when we add a dependency to a module. Maybe for the moment we keep it as testshared and work out what we want to do when we have \"shared\" non-test code that doesn't feel like it needs its own module (like async). What do you think?", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507899272", "createdAt": "2020-10-19T16:44:02Z", "author": {"login": "seadowg"}, "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.odk.collect.testshared", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MzM0NQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkwMjEyNw==", "bodyText": "Fair enough.", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507902127", "createdAt": "2020-10-19T16:48:48Z", "author": {"login": "lognaturel"}, "path": "test-shared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.odk.collect.testshared", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2MzM0NQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mzg1ODU2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMTowNDo0NFrOHjPx4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0Mzo0MlrOHkKVlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMDczOQ==", "bodyText": "These tests about deleting/replacing media files are good to have. This behavior is hard to reason about and I don't see any context for what it's for anywhere. Maybe you could put these tests in a region and just say something like \"we want to be able to go back to the exact state we were in at the last save if a user exits an instance without saving. This means keeping track of any media files that were previously attached so they can be restored.\" Alternately something like that could go above the two maps in FormSaveViewModel used for that purpose.\nAlso this save and discard changes behavior would be good for QA to check once the audio rework is complete. Want to keep a list like you did for the match exactly feature?", "url": "https://github.com/getodk/collect/pull/4168#discussion_r506720739", "createdAt": "2020-10-16T21:04:44Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -390,25 +394,50 @@ public void resumeFormEntry_clearsSaveResult() {\n     }\n \n     @Test\n-    public void markOriginalFileOrDelete_whenQuestionIndexHasAnswer_onRecreatingViewModel_deletesFile() {\n-        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+    public void deleteAnswerFile_whenFileHasAlreadyBeenDeleted_actuallyDeletesNewFile() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MDE1MA==", "bodyText": "I'll add regions/comments to try and make this clearer. Yeah I think it's a good idea to have a list of things to check!", "url": "https://github.com/getodk/collect/pull/4168#discussion_r507680150", "createdAt": "2020-10-19T11:43:42Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -390,25 +394,50 @@ public void resumeFormEntry_clearsSaveResult() {\n     }\n \n     @Test\n-    public void markOriginalFileOrDelete_whenQuestionIndexHasAnswer_onRecreatingViewModel_deletesFile() {\n-        viewModel.markOriginalFileOrDelete(\"index\", \"blah\");\n+    public void deleteAnswerFile_whenFileHasAlreadyBeenDeleted_actuallyDeletesNewFile() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcyMDczOQ=="}, "originalCommit": {"oid": "622e0a6a85fc428f94e0b7c325743c20c13a8c7e"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3125, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}