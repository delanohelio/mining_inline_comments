{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTQ4NTU0", "number": 3831, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0Nzo1NlrOEA083w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMjoxNlrOEEME9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAzMDA3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0Nzo1NlrOGcWKiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0Nzo1NlrOGcWKiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjQ1Ng==", "bodyText": "I would rename this whenPromptHasAnswer_displaysAnswer and the below one to whenPromptAnswerDoesNotHaveAnswer_displayEmptyString.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432376456", "createdAt": "2020-05-29T09:47:56Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAzMTM2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0ODoyMVrOGcWLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0ODoyMVrOGcWLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NjY3NQ==", "bodyText": "This can just be clickingButton... as it's the \"normal\" case!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432376675", "createdAt": "2020-05-29T09:48:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsNotEmpty_callsCorrectMethods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAzNTcyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo0OTozOVrOGcWN-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1MToyOVrOGcdeig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzMzNw==", "bodyText": "I'd not bother with times here. I'd usually only use it when something happens more than once but I expect a dependency to only get called once in that case (maybe when testing caching or something).", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432377337", "createdAt": "2020-05-29T09:49:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsNotEmpty_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        TextView textView = widget.findViewById(R.id.url_answer_text);\n+        urlButton.performClick();\n+\n+        assertThat(textView.getText().toString(), equalTo(\"blah\"));\n+        verify(customTabHelper, times(1)).bindCustomTabsService(widget.getContext(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjI2Ng==", "bodyText": "Oh okay thanks. I will keep it in mind.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432496266", "createdAt": "2020-05-29T13:51:29Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsNotEmpty_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        TextView textView = widget.findViewById(R.id.url_answer_text);\n+        urlButton.performClick();\n+\n+        assertThat(textView.getText().toString(), equalTo(\"blah\"));\n+        verify(customTabHelper, times(1)).bindCustomTabsService(widget.getContext(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzMzNw=="}, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAzNzc3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoxMVrOGcWPNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1MjowMFrOGcdf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzY1Mw==", "bodyText": "Nice change!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432377653", "createdAt": "2020-05-29T09:50:11Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -48,9 +48,9 @@\n     private TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjYwMw==", "bodyText": "Thank you!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432496603", "createdAt": "2020-05-29T13:52:00Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -48,9 +48,9 @@\n     private TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzY1Mw=="}, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzAzODIxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoyMFrOGcWPeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MDoyMFrOGcWPeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3NzcyMQ==", "bodyText": "Good catch!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432377721", "createdAt": "2020-05-29T09:50:20Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -22,14 +33,74 @@\n @RunWith(RobolectricTestRunner.class)\n public class UrlWidgetTest {\n \n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n         UrlWidget widget = createWidget(promptWithReadOnly());\n         Button urlButton = widget.findViewById(R.id.url_button);\n         assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_setsCorrectAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_setsNullValue() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA0ODY0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MzowOVrOGcWVxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1MzowOVrOGcWVxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM3OTMzNQ==", "bodyText": "This can move into the XML layout.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432379335", "createdAt": "2020-05-29T09:53:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -42,31 +44,42 @@\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n     private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n+    private Button openUrlButton;\n+    private TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+                    onButtonClick(openUrlButton.getId());\n+                }\n+            });\n+        }\n+\n+        stringAnswer.setTextColor(new ThemeUtils(context).getColorOnSurface());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA1NTU3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NToxOFrOGcWaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NToxOFrOGcWaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MDQxOQ==", "bodyText": "We should try as much as possible to use the @dimen margins so they're consistent in throughout the app. Here you can probably use @dimen/margin_standard for the padding as that is the normal left/right spacing (16dp).", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432380419", "createdAt": "2020-05-29T09:55:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"5dp\"\n+        android:layout_marginBottom=\"5dp\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:gravity=\"center\"\n+        android:paddingStart=\"20dp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA1Nzc3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NjowOFrOGcWbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NjowOFrOGcWbkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MDgxNg==", "bodyText": "Lets maybe use @dimen/margin_extra_small for this", "url": "https://github.com/getodk/collect/pull/3831#discussion_r432380816", "createdAt": "2020-05-29T09:56:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"5dp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1374418078cb1ec611611b49fed18cf59c07875"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODE2MjAyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyOTo1NVrOGdF32w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDozNjozN1rOGdGChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwNw==", "bodyText": "I don't think this or the test below are correct. I think my question around writing tests for setOnLongClickListener and cancelLongPress was confusing though now I look at it. Lets breakdown what we need for each method:\n\nsetOnLongClickListener: usually this needs to call setOnLongClickListener on any child views in the widget so that when I long press on anything in the widget I see the \"Edit Prompt\" pop up menu. Here you'll see that setOnLongClickListener is empty so that long pressing on the URL button won't do anything - it's clickable so it consumes the long press event. We need to write a test that makes sure long pressing on the url button will call any listener passed to the widget's setOnLongClickListener.\ncancelLongPress: this makes sure that any long press cancellation (usually the user scrolling around) works properly. I don't think there is a way to test that, so I think we should just make sure to review this method and make sure any views in the widget have the call propagated to them.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433158107", "createdAt": "2020-06-01T10:29:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,123 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n+import static android.view.KeyEvent.ACTION_UP;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.when;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+    }\n+\n+    @Test\n+    public void onLongPressButton_doesNotCallOpenUri() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e74b9ca5ba40520744f1534f91f5f130c6b9859b"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODg2Nw==", "bodyText": "One tip by the way for checking the coverage you have for an object is to use Android Studio's \"Run with coverage\" feature. If you use the green \u25b6\ufe0f icon to run the test file (in this case URLWidgetTest) and then hit \"Run X with Coverage\" you'll see green and red highligting in the URLWidget file for what lines are covered by tests and what ones aren't.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433158867", "createdAt": "2020-06-01T10:31:38Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,123 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n+import static android.view.KeyEvent.ACTION_UP;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.when;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+    }\n+\n+    @Test\n+    public void onLongPressButton_doesNotCallOpenUri() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwNw=="}, "originalCommit": {"oid": "e74b9ca5ba40520744f1534f91f5f130c6b9859b"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE2MDgzNg==", "bodyText": "Thank you so much for the suggestion. I will modify the tests.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433160836", "createdAt": "2020-06-01T10:36:37Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,123 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n-\n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n+import static android.view.KeyEvent.ACTION_UP;\n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.mockito.Mockito.when;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+    }\n+\n+    @Test\n+    public void onLongPressButton_doesNotCallOpenUri() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1ODEwNw=="}, "originalCommit": {"oid": "e74b9ca5ba40520744f1534f91f5f130c6b9859b"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODg4NDMwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozNjowOFrOGdM1Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozNjowOFrOGdM1Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MjA3OQ==", "bodyText": "Here's you're extending URLWidget for the test and then using that. That means your test is now of TestURLWidget not URLWidget. We shouldn't use fakes, mocks or stubs of the objects we're testing as this means we're not really testing the object itself!\nI'm not sure why you created this as you could just call setOnLongClickListener on the widget in the test.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433272079", "createdAt": "2020-06-01T14:36:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));\n     }\n \n-    @Test\n-    public void textViewShouldIgnoreLongPress() {\n-        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n-        TextView textView = widget.findViewById(R.id.url_answer_text);\n-\n-        textView.onEditorAction(ACTION_UP);\n-        assertThat(textView.hasFocus(), equalTo(false));\n+    private TestUrlWidget createWidget(FormEntryPrompt prompt) {\n+        return new TestUrlWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), customTabHelper, listener);\n     }\n \n+    private static class TestUrlWidget extends UrlWidget {\n \n-    private UrlWidget createWidget(FormEntryPrompt prompt) {\n-        return new UrlWidget(widgetTestActivity(), new QuestionDetails(prompt, \"formAnalyticsID\"), customTabHelper);\n+        public TestUrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper, OnLongClickListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODg5MjA3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDozODoxNFrOGdM6DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODozMDoxN1rOGdVZvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw==", "bodyText": "I think a better way to test this is to pass a mock(Listener.class) to the Widget's OnLongClickListener and then check that it is called (using when) after you call urlButton.performLongClick(). Does that make sense? That would make sure the listener the URL button has and the listener the widget has are definitely the same", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433273357", "createdAt": "2020-06-01T14:38:14Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzOTczMA==", "bodyText": "This is much better! But sorry I lead you down a slightly wrong path there. I think instead of using when to set up a result and then verifying it later (lines 108 and 111) you could just do verify(listener).onLongClick(urlButton). Does that make more sense?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433339730", "createdAt": "2020-06-01T16:13:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1OTQ4Mg==", "bodyText": "I wrote the test like this initially:\n        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n        Button urlButton = widget.findViewById(R.id.url_button);\n        widget.setOnLongClickListener(listener);\n        urlButton.performLongClick();\n        verify(listener).onLongClick(urlButton);\n\nBut this test does not pass.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433359482", "createdAt": "2020-06-01T16:49:58Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MTE2Nw==", "bodyText": "Right but I think that's a correctly failing test: URLWidget#setOnLongClickListener doesn't do anything at the moment so I'd expect that test to be red. If you try long clicking on the URL button in the app at the moment right now you'll see it doesn't show the \"Edit Prompt\" pop up.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433361167", "createdAt": "2020-06-01T16:53:10Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2MjM3Mg==", "bodyText": "It says Wanted but not invoked and Actually, there were zero interactions with this mock. I do not understand.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433362372", "createdAt": "2020-06-01T16:55:33Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2NDQwNQ==", "bodyText": "Right that means that the onLongClick on the listener was never called. It might be worth reading some docs at https://site.mockito.org/ if you're confused by this message. If you look at URLWidget#setOnLongClickListener you'll see it's empty so that test should fail in the way you're seeing. You have a red test that you can now make green!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433364405", "createdAt": "2020-06-01T16:59:06Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQwNjY4Ng==", "bodyText": "Hi! I'm sorry. I didn't refresh the page and so kept adding comments without reading your second last comment. I understand it now.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433406686", "createdAt": "2020-06-01T18:19:08Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMDk2Mw==", "bodyText": "@SaumiaSinghal hah I've made exactly the same mistake before!", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433410963", "createdAt": "2020-06-01T18:27:19Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMjU0MA==", "bodyText": "\ud83d\ude25", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433412540", "createdAt": "2020-06-01T18:30:17Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -98,26 +106,23 @@ public void clickingButton_callsCorrectMethods() {\n     }\n \n     @Test\n-    public void onLongPressButton_doesNotCallOpenUri() {\n+    public void clickingButtonForLong_callsLongClickListener() {\n         UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n         Button urlButton = widget.findViewById(R.id.url_button);\n         urlButton.performLongClick();\n \n-        verify(customTabHelper, never()).bindCustomTabsService(widget.getContext(), null);\n-        verify(customTabHelper, never()).openUri(widget.getContext(), Uri.parse(\"blah\"));\n+        assertThat(listener.onLongClick(urlButton), equalTo(true));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI3MzM1Nw=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODk1MDE0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNDo1NDowM1rOGdNfIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNTozOTo0MFrOGdPbOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4Mjg0OA==", "bodyText": "Just a tiny change while we're here. Often it's nicer to have the margin between two items be on the second item (the MaterialTextView) rather than the first (the MaterialButton) here. This often helps when the first/last items have different margins and also makes it easier when deleting items. I'd probably move the marginBottom here so it's a marginTop on the MaterialTextView.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433282848", "createdAt": "2020-06-01T14:54:03Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        android:layout_marginBottom=\"@dimen/margin_extra_small\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMxNDYxNg==", "bodyText": "Ohh! Thanks for the advice. I will remember that.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433314616", "createdAt": "2020-06-01T15:39:40Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        android:layout_marginBottom=\"@dimen/margin_extra_small\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI4Mjg0OA=="}, "originalCommit": {"oid": "1266f50abab2a96918d29988eea255e695603812"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjU0MTIxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/CustomTabHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzowNDowN1rOGdwlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1MzozMVrOGd1hog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzkyMA==", "bodyText": "Is this an accidental change? I can't see a reason for it.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433857920", "createdAt": "2020-06-02T13:04:07Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/CustomTabHelper.java", "diffHunk": "@@ -24,7 +24,7 @@\n public class CustomTabHelper {\n     public static final String OPEN_URL = \"url\";\n     private static final String CUSTOM_TAB_PACKAGE_NAME = \"com.android.chrome\";\n-    private CustomTabsClient customTabsClient;\n+    public CustomTabsClient customTabsClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1278c50c1b2b79b2595b8cc455e1551ac67ab3e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzODg1MA==", "bodyText": "Oh Sorry, I was trying something in onDetachedFromWindow test.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r433938850", "createdAt": "2020-06-02T14:53:31Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/CustomTabHelper.java", "diffHunk": "@@ -24,7 +24,7 @@\n public class CustomTabHelper {\n     public static final String OPEN_URL = \"url\";\n     private static final String CUSTOM_TAB_PACKAGE_NAME = \"com.android.chrome\";\n-    private CustomTabsClient customTabsClient;\n+    public CustomTabsClient customTabsClient;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NzkyMA=="}, "originalCommit": {"oid": "e1278c50c1b2b79b2595b8cc455e1551ac67ab3e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYwNzQ5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToxNjo1MFrOGe2IGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODo1MzoxOFrOGe8KmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzI3Mw==", "bodyText": "Extra 't' in whenServiceConnectionIstNull", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434997273", "createdAt": "2020-06-04T05:16:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void clickingButtonForLong_callsLongClickListener() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        widget.setOnLongClickListener(listener);\n+        urlButton.performLongClick();\n+        verify(listener).onLongClick(urlButton);\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void cancelLongPress_callsCancelLongPressForButtonAndTextView() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.openUrlButton = mock(Button.class);\n+        widget.stringAnswer = mock(TextView.class);\n+        widget.cancelLongPress();\n+\n+        verify(widget.openUrlButton).cancelLongPress();\n+        verify(widget.stringAnswer).cancelLongPress();\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void detachingFromWindow_disconnectsService_whenServiceConnectionIsNotNull() {\n+        when(customTabHelper.getServiceConnection()).thenReturn(serviceConnection);\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.onDetachedFromWindow();\n+        verify(serviceConnection).onServiceDisconnected(null);\n+    }\n+\n+    @Test\n+    public void detachingFromWindow_doesNotCallOnServiceDisconnected_whenServiceConnectionIstNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NjIxNw==", "bodyText": "Ahh.. sorry for the typo.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435096217", "createdAt": "2020-06-04T08:53:18Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void clickingButtonForLong_callsLongClickListener() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        widget.setOnLongClickListener(listener);\n+        urlButton.performLongClick();\n+        verify(listener).onLongClick(urlButton);\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void cancelLongPress_callsCancelLongPressForButtonAndTextView() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.openUrlButton = mock(Button.class);\n+        widget.stringAnswer = mock(TextView.class);\n+        widget.cancelLongPress();\n+\n+        verify(widget.openUrlButton).cancelLongPress();\n+        verify(widget.stringAnswer).cancelLongPress();\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void detachingFromWindow_disconnectsService_whenServiceConnectionIsNotNull() {\n+        when(customTabHelper.getServiceConnection()).thenReturn(serviceConnection);\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.onDetachedFromWindow();\n+        verify(serviceConnection).onServiceDisconnected(null);\n+    }\n+\n+    @Test\n+    public void detachingFromWindow_doesNotCallOnServiceDisconnected_whenServiceConnectionIstNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzI3Mw=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYwODU4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToxNzozMVrOGe2Izw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxODozMFrOGhGg-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ1NQ==", "bodyText": "This test and the following seem to me like they should be part of CustomTabHelper's tests, not the tests for a specific widget.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434997455", "createdAt": "2020-06-04T05:17:31Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void clickingButtonForLong_callsLongClickListener() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        widget.setOnLongClickListener(listener);\n+        urlButton.performLongClick();\n+        verify(listener).onLongClick(urlButton);\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void cancelLongPress_callsCancelLongPressForButtonAndTextView() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.openUrlButton = mock(Button.class);\n+        widget.stringAnswer = mock(TextView.class);\n+        widget.cancelLongPress();\n+\n+        verify(widget.openUrlButton).cancelLongPress();\n+        verify(widget.stringAnswer).cancelLongPress();\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void detachingFromWindow_disconnectsService_whenServiceConnectionIsNotNull() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM2MjkzNg==", "bodyText": "Hi @lognaturel! I updated the tests and used  spy(widgetTestActicity()) instead to verify unbindService() is called.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437362936", "createdAt": "2020-06-09T12:18:30Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper).bindCustomTabsService(widget.getContext(), null);\n+        verify(customTabHelper).openUri(widget.getContext(), Uri.parse(\"blah\"));\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(RandomString.make());\n+    @Test\n+    public void clickingButtonForLong_callsLongClickListener() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        widget.setOnLongClickListener(listener);\n+        urlButton.performLongClick();\n+        verify(listener).onLongClick(urlButton);\n     }\n \n-    @Override\n-    public void callingClearShouldRemoveTheExistingAnswer() {\n-        // The widget is ReadOnly, clear shouldn't do anything.\n+    @Test\n+    public void cancelLongPress_callsCancelLongPressForButtonAndTextView() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        widget.openUrlButton = mock(Button.class);\n+        widget.stringAnswer = mock(TextView.class);\n+        widget.cancelLongPress();\n+\n+        verify(widget.openUrlButton).cancelLongPress();\n+        verify(widget.stringAnswer).cancelLongPress();\n     }\n \n     @Test\n-    public void usingReadOnlyOptionShouldMakeAllClickableElementsDisabled() {\n-        when(formEntryPrompt.isReadOnly()).thenReturn(true);\n+    public void detachingFromWindow_disconnectsService_whenServiceConnectionIsNotNull() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzQ1NQ=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYxMDI5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToxODoxNVrOGe2JyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToxODoxNVrOGe2JyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NzcwNQ==", "bodyText": "I think this could be _opensUri instead of _callsCorrectMethods so that the intended behavior is clear.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434997705", "createdAt": "2020-06-04T05:18:15Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/UrlWidgetTest.java", "diffHunk": "@@ -1,46 +1,146 @@\n package org.odk.collect.android.widgets;\n \n+import android.net.Uri;\n import android.view.View;\n+import android.view.View.OnLongClickListener;\n+import android.widget.Button;\n+import android.widget.TextView;\n \n-import androidx.annotation.NonNull;\n-\n-import net.bytebuddy.utility.RandomString;\n+import androidx.browser.customtabs.CustomTabsServiceConnection;\n \n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n /**\n  * @author James Knight\n  */\n \n-public class UrlWidgetTest extends QuestionWidgetTest<UrlWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public UrlWidget createWidget() {\n-        return new UrlWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+@RunWith(RobolectricTestRunner.class)\n+public class UrlWidgetTest {\n+\n+    private CustomTabHelper customTabHelper;\n+    private CustomTabsServiceConnection serviceConnection;\n+    private OnLongClickListener listener;\n+\n+    @Before\n+    public void setUp() {\n+        customTabHelper = mock(CustomTabHelper.class);\n+        serviceConnection = mock(CustomTabsServiceConnection.class);\n+        listener = mock(OnLongClickListener.class);\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void usingReadOnlyOption_makeAllClickableElementsDisabled() {\n+        UrlWidget widget = createWidget(promptWithReadOnly());\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        assertThat(urlButton.getVisibility(), equalTo(View.GONE));\n+    }\n+\n+    @Test\n+    public void clearAnswer_doesNotClearWidgetAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptHasAnswer_displaysAnswer() {\n+        UrlWidget widget = createWidget(promptWithAnswer(new StringData(\"blah\")));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void whenPromptAnswerDoesNotHaveAnswer_displayEmptyString() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(((TextView) widget.findViewById(R.id.url_answer_text)).getText().toString(), equalTo(\"\"));\n+    }\n+\n+    @Test\n+    public void clickingButtonWhenUrlIsEmpty_doesNotCallOpenUri() {\n+        UrlWidget widget = createWidget(promptWithAnswer(null));\n+        Button urlButton = widget.findViewById(R.id.url_button);\n+        urlButton.performClick();\n+\n+        verify(customTabHelper, never()).bindCustomTabsService(null, null);\n+        verify(customTabHelper, never()).openUri(null, null);\n+    }\n+\n+    @Test\n+    public void clickingButton_callsCorrectMethods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYxMzcxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyMDozMVrOGe2L9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTowMTo0NVrOGkfr8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg==", "bodyText": "Since we're going to be touching every widget, should we consider using view binding?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434998262", "createdAt": "2020-06-04T05:20:31Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5NDg4OA==", "bodyText": "Yes, actually. I didn't realize I can directly use them without view binding. And as a lot of tests have to be added, this is a better option.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435094888", "createdAt": "2020-06-04T08:50:58Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNzkwOQ==", "bodyText": "Just a small wording correction, you're actually using the view binding feature now rather than explicitly binding your views. I know, it's confusing. Speaking of confusing, where is view binding turned on, @seadowg? I'm confused about not seeing it in the build.gradle file.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435417909", "createdAt": "2020-06-04T17:13:19Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIzNDQxNw==", "bodyText": "I'm also confused. It looks like @SaumiaSinghal is just using findViewById with protected fields. @lognaturel just to be clear are you saying we should move to using the new View Binding feature before we accept this PR? I'd be in favour of that if so.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437234417", "createdAt": "2020-06-09T08:38:12Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NjI1NQ==", "bodyText": "Yes @seadowg :/ I was. I fixed that.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437286255", "createdAt": "2020-06-09T09:52:12Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMTA3Mg==", "bodyText": "Sorry, now I'm really confused, too! Yes, @seadowg, that's what I was requesting. I was expecting not to see any more explicit findViewById in the final code but they're still there.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r440921072", "createdAt": "2020-06-16T15:01:45Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODI2Mg=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYxODMwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyMzoxN1rOGe2OwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowNzo1NFrOGfPmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODk3Nw==", "bodyText": "Could we consider introducing a style that includes all of the options below so that if we want to change the in-form buttons we can do it in one place?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434998977", "createdAt": "2020-06-04T05:23:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NjgxOA==", "bodyText": "I'd be interested to see if we can get rid of the button... We're hitting the geowidgets next so might make sense to introduce button styles there if they're hanging around.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435086818", "createdAt": "2020-06-04T08:37:20Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODk3Nw=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNDczNQ==", "bodyText": "That makes sense, @seadowg. Up to y'all to decide whether you want to add do a style with the next set of widgets or not.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435414735", "createdAt": "2020-06-04T17:07:54Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5ODk3Nw=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTYxOTQ0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToyNDowMVrOGe2Pdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOToyODo1M1rOGfUyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTE1OA==", "bodyText": "Can this also be a style so it's easy to make consistent across widget types?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r434999158", "createdAt": "2020-06-04T05:24:01Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4Nzc1Mg==", "bodyText": "Yeah actually this should have a TextAppearance style. Probably TextAppearance.Collect.Body1.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435087752", "createdAt": "2020-06-04T08:38:46Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTE1OA=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5MzY4OQ==", "bodyText": "Yes, I have seen that style probably in ProgressDialogFragment. I will use that.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435093689", "createdAt": "2020-06-04T08:48:54Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTE1OA=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxODgwMQ==", "bodyText": "What about also including padding, height, color, etc in a style for answer text? I think we will want to change how answers are displayed and it'd be great to be able to do that in a single place for all widgets.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435418801", "createdAt": "2020-06-04T17:15:00Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTE1OA=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5OTUyMA==", "bodyText": "Yes, I think we can do that, for TextView and Buttons that we use, as we have the same style for them for many widgets.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r435499520", "createdAt": "2020-06-04T19:28:53Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/res/layout/url_widget_answer.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\">\n+\n+    <com.google.android.material.button.MaterialButton\n+        android:id=\"@+id/url_button\"\n+        style=\"@style/Widget.Collect.Button.Custom\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:padding=\"@dimen/margin_small\"\n+        android:text=\"@string/open_url\"\n+        android:layout_marginStart=\"@dimen/margin_standard\"\n+        android:layout_marginEnd=\"@dimen/margin_standard\"\n+        android:layout_marginTop=\"@dimen/margin_extra_small\"\n+        />\n+\n+    <com.google.android.material.textview.MaterialTextView\n+        android:id=\"@+id/url_answer_text\"\n+        android:layout_width=\"match_parent\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTE1OA=="}, "originalCommit": {"oid": "7525a9aeefe3604d0c94c03c4c6d0a19f5248c54"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE4MjQ2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0NzozOVrOGhBq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoyMzoyMFrOGhC6AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MzU2OA==", "bodyText": "Does that still make sense to implement ButtonWidget? That was created in order to use WidgetViewUtils.createSimpleButton() - one method used in widgets for generating a button but if we are going to use xml files instead of creating those buttons programmatically we probably can get rid of it right?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437283568", "createdAt": "2020-06-09T09:47:39Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5OTgxNg==", "bodyText": "I do think having a separate method onButtonClick() is redundant. We can have all the functionality in setOnClickListener() instead of explicitly calling onButtonClick() from there. Should I remove it?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437299816", "createdAt": "2020-06-09T10:15:48Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MzU2OA=="}, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMjY0Mg==", "bodyText": "I'm not talking about removing that method you can keep since you call it in https://github.com/getodk/collect/pull/3831/files#diff-a5c152dc7425469015c19b7a29b8da07R69\nbut implementing the interface and using @Override above the method doesn't make sense because this method is no longer called like before (using interface from WidgetViewUtils.createSimpleButton()) you do that directly from the same widget (the line I attached).", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437302642", "createdAt": "2020-06-09T10:21:09Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MzU2OA=="}, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwMzgwOQ==", "bodyText": "Oh okay I understand. Thanks for explaining.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437303809", "createdAt": "2020-06-09T10:23:20Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MzU2OA=="}, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDE4NzUwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0OTowNVrOGhBuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo0OTowNVrOGhBuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NDQyMQ==", "bodyText": "I would move this check to onButtonClick() then this expression will look simpler.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437284421", "createdAt": "2020-06-09T09:49:05Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDIwNTc1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NDoxMVrOGhB53A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NDoxMVrOGhB53A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NzM4OA==", "bodyText": "Please change this name we still have such one-char names in our codebase.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437287388", "createdAt": "2020-06-09T09:54:11Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+                    onButtonClick(openUrlButton.getId());\n+                }\n+            });\n+        }\n+\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String s = prompt.getAnswerText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDIzNzY0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDowMjo0OFrOGhCN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMTowODo1NVrOGlA9OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MjUyMg==", "bodyText": "What do you think about such comments? Even on master (before this big change) there is no single line crated by Yaw (every single line has been edited) of course the whole project exists thanks to Yaw but isn't git enough?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437292522", "createdAt": "2020-06-09T10:02:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,22 +17,23 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n-\n /**\n  * Widget that allows user to open URLs from within the form", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MDY2NA==", "bodyText": "It was a question more to @lognaturel", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437470664", "createdAt": "2020-06-09T14:33:05Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,22 +17,23 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n-\n /**\n  * Widget that allows user to open URLs from within the form", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MjUyMg=="}, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyMjY4OQ==", "bodyText": "I think in this case it makes sense to remove the whole header comment since it doesn't add much. I also know for sure that @yanokwa doesn't like @author tags and is happy for history to be in git.\nFor those who use @author tags, the rule is supposed to be that anyone who touches the file adds their name and names are never removed. For that reason I don't typically remove author tags from people I don't know.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r440922689", "createdAt": "2020-06-16T15:03:57Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,22 +17,23 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n-\n /**\n  * Widget that allows user to open URLs from within the form", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MjUyMg=="}, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQ2NjE2OA==", "bodyText": "Great! so @SaumiaSinghal please remove it.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r441466168", "createdAt": "2020-06-17T11:08:55Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,22 +17,23 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n-\n /**\n  * Widget that allows user to open URLs from within the form", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5MjUyMg=="}, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDI2NzE0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMTozMFrOGhChAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMDoxMTozMFrOGhChAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI5NzQxMQ==", "bodyText": "The same here when it comes to naming.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437297411", "createdAt": "2020-06-09T10:11:30Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -41,32 +42,43 @@\n @SuppressLint(\"ViewConstructor\")\n public class UrlWidget extends QuestionWidget implements ButtonWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {\n+                if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+                    onButtonClick(openUrlButton.getId());\n+                }\n+            });\n+        }\n+\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String s = prompt.getAnswerText();\n         if (s != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68ff91d562d27d0e12fe4e1c5dc1c946433a4da"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDU3NDk2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0OTowOFrOGhFi7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTo0OTowOFrOGhFi7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0NzA1NA==", "bodyText": "You can simplify this: openUrlButton.setOnClickListener(v ->  onButtonClick());", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437347054", "createdAt": "2020-06-09T11:49:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,56 +17,65 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n+\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33aa0281be2967799d169ec504597d67678c5225"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc2OTU2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDo0OFrOGhHYUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozODoxM1rOGiZdpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ==", "bodyText": "This check will be needed in case of every single widget button. If so it would be better to create our own WidgetButton class that will extend com.google.android.material.button.MaterialButton (then you can use it in your layout file). In such a class we can then override:\n    @Override\n    public boolean performClick() {\n        if (MultiClickGuard.allowClick(getClass().getName())) {\n            return super.performClick();\n        } else {\n            return false;\n        }\n    }\n\nwhat do you think about this approach?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437377105", "createdAt": "2020-06-09T12:34:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwMzg0NA==", "bodyText": "Yes, that would be great. I can create WidgetButton class in the material package?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437403844", "createdAt": "2020-06-09T13:10:21Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ=="}, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQwNjE3OA==", "bodyText": "Maybe later, we can shift more common functionality to the WidgetButton class.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437406178", "createdAt": "2020-06-09T13:13:42Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ=="}, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzMTQyNQ==", "bodyText": "I can create WidgetButton class in the material package?\n\nI'm not sure that package contains implementations for elements that don't exist the Material Components framework in this case it's about customizing not implementing so maybe our main dir would be a better choice what do you think @seadowg", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437431425", "createdAt": "2020-06-09T13:46:29Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ=="}, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ1MTA4OQ==", "bodyText": "Yeah the material module is mostly for implementations of Material Components like @grzesiek2010 suggests. I'd say we could make a MulticlickSafeButton that extends MaterialButton and just lives in the org.odk.collect.android.views seeing as it's just a general view. If it seems like like we want one just for widgets it could live in the widgets package.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437451089", "createdAt": "2020-06-09T14:07:40Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ=="}, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzODc0MA==", "bodyText": "@seadowg @grzesiek2010, Should I go ahead and make MulticlickSafeButton in the org.odk.collect.android.views package?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r438638740", "createdAt": "2020-06-11T08:52:18Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ=="}, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMTk1Ng==", "bodyText": "Yes please go ahead you will need it in other widgets either way so I think it's a good idea", "url": "https://github.com/getodk/collect/pull/3831#discussion_r438721956", "createdAt": "2020-06-11T11:38:13Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +113,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEwNQ=="}, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc4Mjg2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozODozMFrOGhHglA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozODozMFrOGhHglA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3OTIyMA==", "bodyText": "I would get rid of this field. this is used in just one place onButtonClick() so it would be better to add a method like:\n    private Uri getUri() {\n        return Uri.parse(stringAnswer.getText().toString());\n    }", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437379220", "createdAt": "2020-06-09T12:38:30Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,56 +17,63 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n+    private Uri uri;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d868a5904497215cfea63a483c386ca036c05f6"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTE2MjcwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NDoxMVrOGhLNCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NDoxMVrOGhLNCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQzOTc1Mg==", "bodyText": "Do we need this check? I'm pretty sure we can call setText(null) and it's safe. Could you check and remove it if not needed?", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437439752", "createdAt": "2020-06-09T13:54:11Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTE3OTQzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1NzowMVrOGhLXjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzo1Nzo0NFrOGhLaWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MjQ0Nw==", "bodyText": "Please move this method to the bottom of the class since it's private and used only by onButtonClick().", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437442447", "createdAt": "2020-06-09T13:57:01Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {\n+            stringAnswer.setText(answerText);\n+        }\n \n-        customTabHelper = new CustomTabHelper();\n+        return answerView;\n     }\n \n     private boolean isUrlEmpty(TextView stringAnswer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MzE2Mw==", "bodyText": "The same with getUri()", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437443163", "createdAt": "2020-06-09T13:57:44Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {\n+            stringAnswer.setText(answerText);\n+        }\n \n-        customTabHelper = new CustomTabHelper();\n+        return answerView;\n     }\n \n     private boolean isUrlEmpty(TextView stringAnswer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0MjQ0Nw=="}, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIwMDIwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDo1OFrOGhLlOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMDo1OFrOGhLlOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NTk0NA==", "bodyText": "Please add @OverRide I know it's not required but if we do that for all the other methods let's keep consistency.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437445944", "createdAt": "2020-06-09T14:00:58Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +115,14 @@ protected void onDetachedFromWindow() {\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIxMjM3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzozNVrOGhLs4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzozNVrOGhLs4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0NzkwNQ==", "bodyText": "We have ToastUtils class which we use for displaying toast so we should use it here as well.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437447905", "createdAt": "2020-06-09T14:03:35Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -105,13 +115,14 @@ protected void onDetachedFromWindow() {\n         }\n     }\n \n-    @Override\n-    public void onButtonClick(int buttonId) {\n-        if (!isUrlEmpty(stringAnswer)) {\n-            customTabHelper.bindCustomTabsService(getContext(), null);\n-            customTabHelper.openUri(getContext(), uri);\n-        } else {\n-            Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();\n+    public void onButtonClick() {\n+        if (MultiClickGuard.allowClick(QuestionWidget.class.getName())) {\n+            if (!isUrlEmpty(stringAnswer)) {\n+                customTabHelper.bindCustomTabsService(getContext(), null);\n+                customTabHelper.openUri(getContext(), getUri());\n+            } else {\n+                Toast.makeText(getContext(), \"No URL set\", Toast.LENGTH_SHORT).show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTIxMzQ4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzo0OFrOGhLthA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDowMzo0OFrOGhLthA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ0ODA2OA==", "bodyText": "We have ToastUtils class which we use for displaying toast so we should use it here as well.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437448068", "createdAt": "2020-06-09T14:03:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,88 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();\n+        if (answerText != null) {\n+            stringAnswer.setText(answerText);\n+        }\n \n-        customTabHelper = new CustomTabHelper();\n+        return answerView;\n     }\n \n     private boolean isUrlEmpty(TextView stringAnswer) {\n         return stringAnswer == null || stringAnswer.getText() == null\n                 || stringAnswer.getText().toString().isEmpty();\n     }\n \n+    private Uri getUri() {\n+        return Uri.parse(stringAnswer.getText().toString());\n+    }\n+\n     @Override\n     public void clearAnswer() {\n         Toast.makeText(getContext(), \"URL is readonly\", Toast.LENGTH_SHORT).show();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e245eeacbc776adebdf4b2dff704a99ff8b1605b"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTMwMTI2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoyMjo0NFrOGhMl5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoyOToxM1rOGhM6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MjUwMQ==", "bodyText": "Even lower please :) both are called only by onButtonClick() so it looks better if we have them below. Sorry for being picky but if you are rebuilding the widget it's good do fix even such small things.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437462501", "createdAt": "2020-06-09T14:22:44Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -108,20 +97,30 @@ public void cancelLongPress() {\n         stringAnswer.cancelLongPress();\n     }\n \n+    @Override\n     protected void onDetachedFromWindow() {\n         super.onDetachedFromWindow();\n         if (customTabHelper.getServiceConnection() != null) {\n             getContext().unbindService(customTabHelper.getServiceConnection());\n         }\n     }\n \n+    private boolean isUrlEmpty(TextView stringAnswer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ca22e0ed2d0710b628347b1a0135ed4e1c80cef"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2NzY1OQ==", "bodyText": "Oh no that's okay! It's good if we have all these things fixed.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437467659", "createdAt": "2020-06-09T14:29:13Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -108,20 +97,30 @@ public void cancelLongPress() {\n         stringAnswer.cancelLongPress();\n     }\n \n+    @Override\n     protected void onDetachedFromWindow() {\n         super.onDetachedFromWindow();\n         if (customTabHelper.getServiceConnection() != null) {\n             getContext().unbindService(customTabHelper.getServiceConnection());\n         }\n     }\n \n+    private boolean isUrlEmpty(TextView stringAnswer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2MjUwMQ=="}, "originalCommit": {"oid": "8ca22e0ed2d0710b628347b1a0135ed4e1c80cef"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODI3NjM4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMjoxNlrOGhpzjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMjoxNlrOGhpzjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0MTEzMg==", "bodyText": "I think now you can get rid of this variable and just call stringAnswer.setText(prompt.getAnswerText()); below, it won't be a long or unclear expression.", "url": "https://github.com/getodk/collect/pull/3831#discussion_r437941132", "createdAt": "2020-06-10T08:12:16Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -17,78 +17,77 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.net.Uri;\n+import android.util.TypedValue;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n import android.widget.Button;\n-import android.widget.LinearLayout;\n import android.widget.TextView;\n-import android.widget.Toast;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.CustomTabHelper;\n-import org.odk.collect.android.widgets.interfaces.ButtonWidget;\n-\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.getCenteredAnswerTextView;\n+import org.odk.collect.android.utilities.MultiClickGuard;\n+import org.odk.collect.android.utilities.ToastUtils;\n \n /**\n  * Widget that allows user to open URLs from within the form\n  *\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class UrlWidget extends QuestionWidget implements ButtonWidget {\n+public class UrlWidget extends QuestionWidget {\n \n-    private Uri uri;\n-    final Button openUrlButton;\n-    final TextView stringAnswer;\n     private final CustomTabHelper customTabHelper;\n \n-    public UrlWidget(Context context, QuestionDetails questionDetails) {\n+    protected Button openUrlButton;\n+    protected TextView stringAnswer;\n+\n+    public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelper customTabHelper) {\n         super(context, questionDetails);\n+        this.customTabHelper = customTabHelper;\n+    }\n \n-        openUrlButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), context.getString(R.string.open_url), getAnswerFontSize(), this);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        ViewGroup answerView = (ViewGroup) LayoutInflater.from(context).inflate(R.layout.url_widget_answer, null);\n \n-        stringAnswer = getCenteredAnswerTextView(getContext(), getAnswerFontSize());\n+        openUrlButton = answerView.findViewById(R.id.url_button);\n+        stringAnswer = answerView.findViewById(R.id.url_answer_text);\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null) {\n-            stringAnswer.setText(s);\n-            uri = Uri.parse(stringAnswer.getText().toString());\n+        if (prompt.isReadOnly()) {\n+            openUrlButton.setVisibility(GONE);\n+        } else {\n+            openUrlButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            openUrlButton.setOnClickListener(v -> onButtonClick());\n         }\n \n-        // finish complex layout\n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-        answerLayout.addView(openUrlButton);\n-        answerLayout.addView(stringAnswer);\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        stringAnswer.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+        String answerText = prompt.getAnswerText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb24e058e43aad3a382145dd0ebe377b6405094c"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3357, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}