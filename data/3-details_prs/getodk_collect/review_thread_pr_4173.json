{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0ODI0MDg4", "number": 4173, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowMTo0OVrOEvrGRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDo0NjoyM1rOEwmBKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDI0NjQ2OnYy", "diffSide": "LEFT", "path": "audioclips/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowMTo0OVrOHkyEuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowMTo0OVrOHkyEuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzMTE5Mw==", "bodyText": "We don't need these for library modules", "url": "https://github.com/getodk/collect/pull/4173#discussion_r508331193", "createdAt": "2020-10-20T09:01:49Z", "author": {"login": "seadowg"}, "path": "audioclips/build.gradle", "diffHunk": "@@ -27,7 +27,6 @@ android {\n     buildTypes {\n         release {\n             minifyEnabled false\n-            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879b9c6c34cb43a153b93ddb5ba8450f5e2544fa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NDI2ODc1OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/AndroidManifest.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowNjo0OVrOHkySMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowNjo0OVrOHkySMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNDY0MA==", "bodyText": "Let's deal with rotation later as, once we have a Foreground Service responsible for recording, it won't be as big a deal.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r508334640", "createdAt": "2020-10-20T09:06:49Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/AndroidManifest.xml", "diffHunk": "@@ -0,0 +1,13 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    package=\"org.odk.collect.audiorecorder\">\n+\n+    <application>\n+        <activity\n+            android:name=\".recording.AudioRecorderActivity\"\n+            android:label=\"Audio Recorder\"\n+            android:screenOrientation=\"portrait\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879b9c6c34cb43a153b93ddb5ba8450f5e2544fa"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjM3NDUyOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/Config.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyODo1NFrOHlG5Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyODo1NFrOHlG5Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3MjI1OA==", "bodyText": "This file provides a pretty minimal (for Dagger) DI setup. We could come up with something more complex to attach the component to the Application object which would mean we wouldn't run into static state problems (see the code comment below) but I don't think we need to go there yet.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r508672258", "createdAt": "2020-10-20T16:28:54Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/Config.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.odk.collect.audiorecorder\n+\n+import android.app.Activity\n+import android.app.Application\n+import android.media.MediaRecorder\n+import dagger.BindsInstance\n+import dagger.Component\n+import dagger.Module\n+import dagger.Provides\n+import org.odk.collect.audiorecorder.recorder.MediaRecorderRecorder\n+import org.odk.collect.audiorecorder.recorder.RealMediaRecorderWrapper\n+import org.odk.collect.audiorecorder.recorder.Recorder\n+import org.odk.collect.audiorecorder.recording.AudioRecorderActivity\n+\n+private var _component: AudioRecorderDependencyComponent? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjM3NzY4OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recorder/MediaRecorderWrapper.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyOTozOFrOHlG7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjoyOTozOFrOHlG7Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3Mjc4Mg==", "bodyText": "This interface brought to you by a slightly funky looking ShadowMediaRecorder and the \"don't mock/fake/stub things you don't own\" rule.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r508672782", "createdAt": "2020-10-20T16:29:38Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recorder/MediaRecorderWrapper.kt", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.odk.collect.audiorecorder.recorder\n+\n+import android.media.MediaRecorder\n+\n+/**\n+ * Allows faking/stubbing/mocking with our interactions with Android's MediaRecorder\n+ */\n+\n+interface MediaRecorderWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjM4NjkyOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/test/java/org/odk/collect/audiorecorder/recording/MediaRecorderRecorderTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozMTo0NFrOHlHAxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozMTo0NFrOHlHAxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3NDI0NQ==", "bodyText": "I went with a fake rather than a mock here as it lets me capture the importance of the method call order (prepare before start for example) without having to specify exactly what order things are called in.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r508674245", "createdAt": "2020-10-20T16:31:44Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/test/java/org/odk/collect/audiorecorder/recording/MediaRecorderRecorderTest.kt", "diffHunk": "@@ -0,0 +1,224 @@\n+package org.odk.collect.audiorecorder.recording\n+\n+import android.media.MediaRecorder\n+import com.google.common.io.Files\n+import org.hamcrest.MatcherAssert.assertThat\n+import org.hamcrest.Matchers.equalTo\n+import org.hamcrest.Matchers.not\n+import org.junit.Test\n+import org.odk.collect.audiorecorder.recorder.MediaRecorderRecorder\n+import org.odk.collect.audiorecorder.recorder.MediaRecorderWrapper\n+import java.io.File\n+\n+class MediaRecorderRecorderTest {\n+\n+    private val cacheDir = Files.createTempDir()\n+    private val mediaRecorder = FakeMediaRecorderWrapper()\n+    private val recorder = MediaRecorderRecorder(cacheDir) { mediaRecorder }\n+\n+    @Test\n+    fun start_startsMediaRecorder() {\n+        recorder.start()\n+        assertThat(mediaRecorder.hasStarted(), equalTo(true))\n+    }\n+\n+    @Test\n+    fun start_setsUpAACRecordingFromMic() {\n+        recorder.start()\n+\n+        assertThat(mediaRecorder.getAudioEncoder(), equalTo(MediaRecorder.AudioEncoder.AAC))\n+        assertThat(mediaRecorder.getAudioEncodingSampleRate(), equalTo(32000))\n+        assertThat(mediaRecorder.getAudioEncodingBitRate(), equalTo(128000))\n+        assertThat(mediaRecorder.getOutputFormat(), equalTo(MediaRecorder.OutputFormat.MPEG_4))\n+\n+        assertThat(mediaRecorder.getAudioSource(), equalTo(MediaRecorder.AudioSource.MIC))\n+    }\n+\n+    @Test\n+    fun start_createsAndRecordsToFileInCacheDir() {\n+        recorder.start()\n+        assertThat(mediaRecorder.getOutputFile()!!.parent, equalTo(cacheDir.absolutePath))\n+    }\n+\n+    @Test\n+    fun recordingTwice_doesntUseSameOutputFile() {\n+        var mediaRecorder = FakeMediaRecorderWrapper()\n+        var recorder = MediaRecorderRecorder(cacheDir) { mediaRecorder }\n+        recorder.start()\n+        val outputFile1 = mediaRecorder.getOutputFile()\n+\n+        mediaRecorder = FakeMediaRecorderWrapper()\n+        recorder = MediaRecorderRecorder(cacheDir) { mediaRecorder }\n+        recorder.start()\n+        val outputFile2 = mediaRecorder.getOutputFile()\n+\n+        assertThat(outputFile1!!.absolutePath, not(equalTo(outputFile2!!.absolutePath)))\n+    }\n+\n+    @Test\n+    fun stop_releasesMediaRecorder() {\n+        recorder.start()\n+        recorder.stop()\n+        assertThat(mediaRecorder.isReleased(), equalTo(true))\n+    }\n+\n+    @Test\n+    fun stop_returnsOutputFile() {\n+        recorder.start()\n+        val file = recorder.stop()\n+        assertThat(file.absolutePath, equalTo(mediaRecorder.getOutputFile()!!.absolutePath))\n+    }\n+\n+    @Test\n+    fun cancel_releasesMediaRecorder() {\n+        recorder.start()\n+        recorder.cancel()\n+        assertThat(mediaRecorder.isReleased(), equalTo(true))\n+    }\n+\n+    @Test\n+    fun cancel_deletesOutputFile() {\n+        recorder.start()\n+        recorder.cancel()\n+        assertThat(mediaRecorder.getOutputFile()!!.exists(), equalTo(false))\n+    }\n+\n+    @Test\n+    fun cancel_beforeStart_works() {\n+        recorder.cancel()\n+    }\n+}\n+\n+private class FakeMediaRecorderWrapper : MediaRecorderWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjM5NjQ3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/PermissionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozNDoyMVrOHlHHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNjozNDoyMVrOHlHHGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3NTg2NQ==", "bodyText": "I didn't end up having to pull this out to its own module but I like the changes I made to it in preparation so kept them in.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r508675865", "createdAt": "2020-10-20T16:34:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/PermissionUtils.java", "diffHunk": "@@ -41,6 +33,12 @@\n \n public class PermissionUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MzgwNzYzOnYy", "diffSide": "RIGHT", "path": "audiorecorder/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzo1MTo0OFrOHmPnsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo1MTozMVrOHmgJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2Mzg1Ng==", "bodyText": "Use var", "url": "https://github.com/getodk/collect/pull/4173#discussion_r509863856", "createdAt": "2020-10-22T03:51:48Z", "author": {"login": "lognaturel"}, "path": "audiorecorder/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-android-extensions'\n+apply plugin: 'kotlin-kapt'\n+\n+android {\n+    compileSdkVersion 30", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7ad39a171f972f9d02ccdf1331450108c4feb30"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNDU1Mg==", "bodyText": "Oops!", "url": "https://github.com/getodk/collect/pull/4173#discussion_r510134552", "createdAt": "2020-10-22T12:51:31Z", "author": {"login": "seadowg"}, "path": "audiorecorder/build.gradle", "diffHunk": "@@ -0,0 +1,54 @@\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-android-extensions'\n+apply plugin: 'kotlin-kapt'\n+\n+android {\n+    compileSdkVersion 30", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2Mzg1Ng=="}, "originalCommit": {"oid": "c7ad39a171f972f9d02ccdf1331450108c4feb30"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzg1MTY4OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/Config.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoxNzoyNVrOHmP_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDoxNzoyNVrOHmP_rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2OTk5Ng==", "bodyText": "I don\u2019t get this. Might be good to talk through it and see if we can clarify.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r509869996", "createdAt": "2020-10-22T04:17:25Z", "author": {"login": "lognaturel"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/Config.kt", "diffHunk": "@@ -14,6 +14,10 @@ import org.odk.collect.audiorecorder.recording.AudioRecorderActivity\n \n private var _component: AudioRecorderDependencyComponent? = null\n \n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mzg5OTkyOnYy", "diffSide": "RIGHT", "path": "strings/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwNDo0NjoyM1rOHmQa3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjo1NDoxOVrOHmgQsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3Njk1OA==", "bodyText": "What do you think about flipping this and going with \"Use external app for audio recording\" (true by default)? That way it most likely won't need to be translated again. We can absolutely change the wording if we find we need to but at least we send something to translators that's likely to stick around.", "url": "https://github.com/getodk/collect/pull/4173#discussion_r509876958", "createdAt": "2020-10-22T04:46:23Z", "author": {"login": "lognaturel"}, "path": "strings/src/main/res/values/strings.xml", "diffHunk": "@@ -705,4 +705,7 @@\n     <string name=\"security_error\">Collect can\\'t connect securely to the server at %s. Did you enter the URL correctly?</string>\n     <string name=\"failure\">Failure</string>\n     <string name=\"form_update_succeeded\">Form update succeeded</string>\n+    <string name=\"in_app_recording\">Use in-app audio recording</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEzNjQ5Nw==", "bodyText": "Good idea!", "url": "https://github.com/getodk/collect/pull/4173#discussion_r510136497", "createdAt": "2020-10-22T12:54:19Z", "author": {"login": "seadowg"}, "path": "strings/src/main/res/values/strings.xml", "diffHunk": "@@ -705,4 +705,7 @@\n     <string name=\"security_error\">Collect can\\'t connect securely to the server at %s. Did you enter the URL correctly?</string>\n     <string name=\"failure\">Failure</string>\n     <string name=\"form_update_succeeded\">Form update succeeded</string>\n+    <string name=\"in_app_recording\">Use in-app audio recording</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg3Njk1OA=="}, "originalCommit": {"oid": "329d2dc2167c2ce2284323e71929493d35122bec"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3131, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}