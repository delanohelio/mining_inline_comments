{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzEzMjE5", "number": 3922, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMToxMFrOERcSmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozOTo0NVrOEfX_4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzI0NzYxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/GeoPointWidget.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoxMToxMFrOG2Jzbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyNDozOFrOG2KWDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzNjkxMQ==", "bodyText": "For all the four GeoWidgets, I call static method onButtonClick, when geoButton is clicked. In the corresponding test, I was thinking just verifying the method call, and checking different cases later on in unit tests for GeoWidgetUtils.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r459436911", "createdAt": "2020-07-23T13:11:10Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/GeoPointWidget.java", "diffHunk": "@@ -17,153 +17,111 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.content.Intent;\n+import android.os.Bundle;\n+import android.util.TypedValue;\n+import android.view.View;\n \n-import org.javarosa.core.model.data.GeoPointData;\n+import org.javarosa.core.model.QuestionDef;\n import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.GeoPointActivity;\n-import org.odk.collect.android.activities.GeoPointMapActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.geo.MapProvider;\n+import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n import org.odk.collect.android.widgets.utilities.GeoWidgetUtils;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.MAPS;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.PLACEMENT_MAP;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.hasAppearance;\n+import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes.LOCATION_CAPTURE;\n \n-/**\n- * GeoPointWidget is the widget that allows the user to get GPS readings.\n- *\n- * @author Carl Hartung (carlhartung@gmail.com)\n- * @author Yaw Anokwa (yanokwa@gmail.com)\n- * @author Jon Nordling (jonnordling@gmail.com)\n- */\n @SuppressLint(\"ViewConstructor\")\n-public class GeoPointWidget extends BaseGeoWidget {\n-    public static final String LOCATION = \"gp\";\n-    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n-    public static final String READ_ONLY = \"readOnly\";\n-    public static final String DRAGGABLE_ONLY = \"draggable\";\n-\n-    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n-    private boolean useMap;\n-    private double accuracyThreshold;\n-    private boolean draggable = true;\n+public class GeoPointWidget extends QuestionWidget implements BinaryDataReceiver {\n+    GeoWidgetAnswerBinding binding;\n+\n+    private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final double accuracyThreshold;\n+\n+    private boolean readOnly;\n     private String stringAnswer;\n \n-    public GeoPointWidget(Context context, QuestionDetails questionDetails) {\n+    public GeoPointWidget(Context context, QuestionDetails questionDetails, QuestionDef questionDef, WaitingForDataRegistry waitingForDataRegistry) {\n         super(context, questionDetails);\n-        determineMapProperties();\n-    }\n+        this.waitingForDataRegistry = waitingForDataRegistry;\n+        accuracyThreshold = GeoWidgetUtils.getAccuracyThreshold(questionDef);\n \n-    private void determineMapProperties() {\n-        // Determine the accuracy threshold to use.\n-        String acc = getFormEntryPrompt().getQuestion().getAdditionalAttribute(null, ACCURACY_THRESHOLD);\n-        accuracyThreshold = acc != null && !acc.isEmpty() ? Double.parseDouble(acc) : DEFAULT_LOCATION_ACCURACY;\n-\n-        // Determine whether to use the map and whether the point should be draggable.\n-        if (MapProvider.getConfigurator().isAvailable(getContext())) {\n-            if (hasAppearance(getFormEntryPrompt(), PLACEMENT_MAP)) {\n-                draggable = true;\n-                useMap = true;\n-            } else if (hasAppearance(getFormEntryPrompt(), MAPS)) {\n-                draggable = false;\n-                useMap = true;\n-            }\n+        stringAnswer = getFormEntryPrompt().getAnswerText();\n+        boolean dataAvailable = false;\n+        if (stringAnswer != null && !stringAnswer.isEmpty()) {\n+            dataAvailable = true;\n+            setBinaryData(stringAnswer);\n         }\n+        updateButtonLabelsAndVisibility(dataAvailable);\n     }\n \n-    public void updateButtonLabelsAndVisibility(boolean dataAvailable) {\n-        if (useMap) {\n-            if (readOnly) {\n-                startGeoButton.setText(R.string.geopoint_view_read_only);\n-            } else {\n-                startGeoButton.setText(\n-                    dataAvailable ? R.string.view_change_location : R.string.get_point);\n-            }\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = GeoWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        binding.geoAnswerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        readOnly = prompt.isReadOnly();\n+        if (readOnly) {\n+            binding.simpleButton.setVisibility(GONE);\n         } else {\n-            if (!readOnly) {\n-                startGeoButton.setText(\n-                    dataAvailable ? R.string.change_location : R.string.get_point);\n-            }\n+            binding.simpleButton.setText(getDefaultButtonLabel());\n+            binding.simpleButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+            binding.simpleButton.setOnClickListener(v -> {\n+                Bundle bundle = GeoWidgetUtils.getGeoPointBundle(stringAnswer, accuracyThreshold, null, null);\n+                GeoWidgetUtils.onButtonClick(context, prompt, getPermissionUtils(), null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbd7696aa59382b1a465ae6cf9916c25fde734d"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0NTc3NQ==", "bodyText": "I think given you want to test the shared behaviour it's good to try and think hard about what the responsibility of onButtonClick really is here. For me what it does is ask for geo data for the widget. It feels to me like there could be an interface called something like GeoDataRequester or GeoDataFetcher with methods like requestPoint, requestShape etc:\nbinding.simpleButton.setOnClickListener(v -> {\n    geoDataRequester.requestPoint(promp);\n});\n\nIn each of the different geo widgets you can have a test that the requestPoint or whatever is called and then those methods can be tested for some implementation of the interface (ActivityGeoDataRequester).\nJust to detail my questions here the though process I'm going through is:\n\nI have shared code used in multiple places does it make sense to just test the behaviour in each place?\nIf not, what is the shared code responsible for? Is there some kind of interface/object/entity that could be responsible for that?", "url": "https://github.com/getodk/collect/pull/3922#discussion_r459445775", "createdAt": "2020-07-23T13:24:38Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/GeoPointWidget.java", "diffHunk": "@@ -17,153 +17,111 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.content.Intent;\n+import android.os.Bundle;\n+import android.util.TypedValue;\n+import android.view.View;\n \n-import org.javarosa.core.model.data.GeoPointData;\n+import org.javarosa.core.model.QuestionDef;\n import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.GeoPointActivity;\n-import org.odk.collect.android.activities.GeoPointMapActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.geo.MapProvider;\n+import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n import org.odk.collect.android.widgets.utilities.GeoWidgetUtils;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.MAPS;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.PLACEMENT_MAP;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.hasAppearance;\n+import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes.LOCATION_CAPTURE;\n \n-/**\n- * GeoPointWidget is the widget that allows the user to get GPS readings.\n- *\n- * @author Carl Hartung (carlhartung@gmail.com)\n- * @author Yaw Anokwa (yanokwa@gmail.com)\n- * @author Jon Nordling (jonnordling@gmail.com)\n- */\n @SuppressLint(\"ViewConstructor\")\n-public class GeoPointWidget extends BaseGeoWidget {\n-    public static final String LOCATION = \"gp\";\n-    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n-    public static final String READ_ONLY = \"readOnly\";\n-    public static final String DRAGGABLE_ONLY = \"draggable\";\n-\n-    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n-    private boolean useMap;\n-    private double accuracyThreshold;\n-    private boolean draggable = true;\n+public class GeoPointWidget extends QuestionWidget implements BinaryDataReceiver {\n+    GeoWidgetAnswerBinding binding;\n+\n+    private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final double accuracyThreshold;\n+\n+    private boolean readOnly;\n     private String stringAnswer;\n \n-    public GeoPointWidget(Context context, QuestionDetails questionDetails) {\n+    public GeoPointWidget(Context context, QuestionDetails questionDetails, QuestionDef questionDef, WaitingForDataRegistry waitingForDataRegistry) {\n         super(context, questionDetails);\n-        determineMapProperties();\n-    }\n+        this.waitingForDataRegistry = waitingForDataRegistry;\n+        accuracyThreshold = GeoWidgetUtils.getAccuracyThreshold(questionDef);\n \n-    private void determineMapProperties() {\n-        // Determine the accuracy threshold to use.\n-        String acc = getFormEntryPrompt().getQuestion().getAdditionalAttribute(null, ACCURACY_THRESHOLD);\n-        accuracyThreshold = acc != null && !acc.isEmpty() ? Double.parseDouble(acc) : DEFAULT_LOCATION_ACCURACY;\n-\n-        // Determine whether to use the map and whether the point should be draggable.\n-        if (MapProvider.getConfigurator().isAvailable(getContext())) {\n-            if (hasAppearance(getFormEntryPrompt(), PLACEMENT_MAP)) {\n-                draggable = true;\n-                useMap = true;\n-            } else if (hasAppearance(getFormEntryPrompt(), MAPS)) {\n-                draggable = false;\n-                useMap = true;\n-            }\n+        stringAnswer = getFormEntryPrompt().getAnswerText();\n+        boolean dataAvailable = false;\n+        if (stringAnswer != null && !stringAnswer.isEmpty()) {\n+            dataAvailable = true;\n+            setBinaryData(stringAnswer);\n         }\n+        updateButtonLabelsAndVisibility(dataAvailable);\n     }\n \n-    public void updateButtonLabelsAndVisibility(boolean dataAvailable) {\n-        if (useMap) {\n-            if (readOnly) {\n-                startGeoButton.setText(R.string.geopoint_view_read_only);\n-            } else {\n-                startGeoButton.setText(\n-                    dataAvailable ? R.string.view_change_location : R.string.get_point);\n-            }\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = GeoWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n+\n+        binding.geoAnswerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        readOnly = prompt.isReadOnly();\n+        if (readOnly) {\n+            binding.simpleButton.setVisibility(GONE);\n         } else {\n-            if (!readOnly) {\n-                startGeoButton.setText(\n-                    dataAvailable ? R.string.change_location : R.string.get_point);\n-            }\n+            binding.simpleButton.setText(getDefaultButtonLabel());\n+            binding.simpleButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+            binding.simpleButton.setOnClickListener(v -> {\n+                Bundle bundle = GeoWidgetUtils.getGeoPointBundle(stringAnswer, accuracyThreshold, null, null);\n+                GeoWidgetUtils.onButtonClick(context, prompt, getPermissionUtils(), null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQzNjkxMQ=="}, "originalCommit": {"oid": "8fbd7696aa59382b1a465ae6cf9916c25fde734d"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzEzMTU5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/GeoPolyActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyOTozMFrOHAQ3wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNToyOTozMFrOHAQ3wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzODQ2NQ==", "bodyText": "Won't this already be taken care of by the call on updateUi? I think you might be able to remove it.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r470038465", "createdAt": "2020-08-13T15:29:30Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/GeoPolyActivity.java", "diffHunk": "@@ -230,10 +234,16 @@ public void initMap(MapFragment newMapFragment) {\n         }\n         featureId = map.addDraggablePoly(points, outputMode == OutputMode.GEOSHAPE);\n \n-        if (inputActive) {\n+        if (inputActive && !intentReadOnly) {\n             startInput();\n         }\n \n+        if (intentReadOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a331caca9aa9a1508b56dd21b7d6108dfd30ce"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE3NTIxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0MDowNVrOHARS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0MDowNVrOHARS9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NTQyOA==", "bodyText": "Why keep this static method? It's not called directly so can be removed (and the contents moved to onButtonClicked).", "url": "https://github.com/getodk/collect/pull/3922#discussion_r470045428", "createdAt": "2020-08-13T15:40:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "diffHunk": "@@ -1,17 +1,127 @@\n package org.odk.collect.android.widgets.utilities;\n \n+import android.app.Activity;\n import android.content.Context;\n+import android.content.Intent;\n import android.location.Location;\n+import android.os.Bundle;\n \n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n+import org.odk.collect.android.geo.MapConfigurator;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoWidgetListener;\n \n import java.text.DecimalFormat;\n \n import timber.log.Timber;\n \n-public class GeoWidgetUtils {\n+import static android.view.View.GONE;\n \n-    private GeoWidgetUtils() {\n+public class GeoWidgetUtils implements GeoWidgetListener {\n+    public static final String LOCATION = \"gp\";\n+    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n+    public static final String READ_ONLY = \"readOnly\";\n+    public static final String DRAGGABLE_ONLY = \"draggable\";\n+    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n+\n+    @Override\n+    public void onButtonClicked(Context context, FormIndex index, PermissionUtils permissionUtils, MapConfigurator mapConfigurator,\n+                                WaitingForDataRegistry waitingForDataRegistry, Class activityClass, Bundle bundle, int requestCode) {\n+        onButtonClick(context, index, permissionUtils, mapConfigurator, waitingForDataRegistry, activityClass, bundle, requestCode);\n+    }\n+\n+    @Override\n+    public void setButtonLabelAndVisibility(GeoWidgetAnswerBinding binding, boolean readOnly, boolean dataAvailable,\n+                                            int buttonTextReadOnly, int buttonTextDataAvailable, int defaultButtonText) {\n+        updateButtonLabelAndVisibility(binding, readOnly, dataAvailable, buttonTextReadOnly, buttonTextDataAvailable, defaultButtonText);\n+    }\n+\n+    public static double getAccuracyThreshold(QuestionDef questionDef) {\n+        // Determine the accuracy threshold to use.\n+        String acc = questionDef.getAdditionalAttribute(null, ACCURACY_THRESHOLD);\n+        return acc != null && !acc.isEmpty() ? Double.parseDouble(acc) : DEFAULT_LOCATION_ACCURACY;\n+    }\n+\n+    public static String getAnswerToDisplay(Context context, String answer) {\n+        try {\n+            if (answer != null && !answer.isEmpty()) {\n+                String[] parts = answer.split(\" \");\n+                return context.getString(\n+                        R.string.gps_result,\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[0]), \"lat\"),\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[1]), \"lon\"),\n+                        GeoWidgetUtils.truncateDouble(parts[2]),\n+                        GeoWidgetUtils.truncateDouble(parts[3])\n+                );\n+            }\n+        } catch (NumberFormatException e) {\n+            return \"\";\n+        }\n+        return \"\";\n+    }\n+\n+    public static Bundle getGeoPointBundle(String stringAnswer, double accuracyThreshold, Boolean readOnly, Boolean draggable) {\n+        final Bundle bundle = new Bundle();\n+        if (stringAnswer != null && !stringAnswer.isEmpty()) {\n+            bundle.putDoubleArray(LOCATION, GeoWidgetUtils.getLocationParamsFromStringAnswer(stringAnswer));\n+        }\n+        bundle.putDouble(ACCURACY_THRESHOLD, accuracyThreshold);\n+        if (readOnly != null && draggable != null) {\n+            bundle.putBoolean(READ_ONLY, readOnly);\n+            bundle.putBoolean(DRAGGABLE_ONLY, draggable);\n+        }\n+        return bundle;\n+    }\n+\n+    public static Bundle getGeoPolyBundle(String stringAnswer, GeoPolyActivity.OutputMode outputMode, boolean readOnly) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putString(GeoPolyActivity.ANSWER_KEY, stringAnswer);\n+        bundle.putSerializable(GeoPolyActivity.OUTPUT_MODE_KEY, outputMode);\n+        bundle.putBoolean(READ_ONLY, readOnly);\n+        return bundle;\n+    }\n+\n+    private static void onButtonClick(Context context, FormIndex index, PermissionUtils permissionUtils, MapConfigurator mapConfigurator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a331caca9aa9a1508b56dd21b7d6108dfd30ce"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE4MDc5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0MToyN1rOHARWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0MToyN1rOHARWlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NjM1OA==", "bodyText": "Move contents to caller.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r470046358", "createdAt": "2020-08-13T15:41:27Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "diffHunk": "@@ -1,17 +1,127 @@\n package org.odk.collect.android.widgets.utilities;\n \n+import android.app.Activity;\n import android.content.Context;\n+import android.content.Intent;\n import android.location.Location;\n+import android.os.Bundle;\n \n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n+import org.odk.collect.android.geo.MapConfigurator;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoWidgetListener;\n \n import java.text.DecimalFormat;\n \n import timber.log.Timber;\n \n-public class GeoWidgetUtils {\n+import static android.view.View.GONE;\n \n-    private GeoWidgetUtils() {\n+public class GeoWidgetUtils implements GeoWidgetListener {\n+    public static final String LOCATION = \"gp\";\n+    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n+    public static final String READ_ONLY = \"readOnly\";\n+    public static final String DRAGGABLE_ONLY = \"draggable\";\n+    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n+\n+    @Override\n+    public void onButtonClicked(Context context, FormIndex index, PermissionUtils permissionUtils, MapConfigurator mapConfigurator,\n+                                WaitingForDataRegistry waitingForDataRegistry, Class activityClass, Bundle bundle, int requestCode) {\n+        onButtonClick(context, index, permissionUtils, mapConfigurator, waitingForDataRegistry, activityClass, bundle, requestCode);\n+    }\n+\n+    @Override\n+    public void setButtonLabelAndVisibility(GeoWidgetAnswerBinding binding, boolean readOnly, boolean dataAvailable,\n+                                            int buttonTextReadOnly, int buttonTextDataAvailable, int defaultButtonText) {\n+        updateButtonLabelAndVisibility(binding, readOnly, dataAvailable, buttonTextReadOnly, buttonTextDataAvailable, defaultButtonText);\n+    }\n+\n+    public static double getAccuracyThreshold(QuestionDef questionDef) {\n+        // Determine the accuracy threshold to use.\n+        String acc = questionDef.getAdditionalAttribute(null, ACCURACY_THRESHOLD);\n+        return acc != null && !acc.isEmpty() ? Double.parseDouble(acc) : DEFAULT_LOCATION_ACCURACY;\n+    }\n+\n+    public static String getAnswerToDisplay(Context context, String answer) {\n+        try {\n+            if (answer != null && !answer.isEmpty()) {\n+                String[] parts = answer.split(\" \");\n+                return context.getString(\n+                        R.string.gps_result,\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[0]), \"lat\"),\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[1]), \"lon\"),\n+                        GeoWidgetUtils.truncateDouble(parts[2]),\n+                        GeoWidgetUtils.truncateDouble(parts[3])\n+                );\n+            }\n+        } catch (NumberFormatException e) {\n+            return \"\";\n+        }\n+        return \"\";\n+    }\n+\n+    public static Bundle getGeoPointBundle(String stringAnswer, double accuracyThreshold, Boolean readOnly, Boolean draggable) {\n+        final Bundle bundle = new Bundle();\n+        if (stringAnswer != null && !stringAnswer.isEmpty()) {\n+            bundle.putDoubleArray(LOCATION, GeoWidgetUtils.getLocationParamsFromStringAnswer(stringAnswer));\n+        }\n+        bundle.putDouble(ACCURACY_THRESHOLD, accuracyThreshold);\n+        if (readOnly != null && draggable != null) {\n+            bundle.putBoolean(READ_ONLY, readOnly);\n+            bundle.putBoolean(DRAGGABLE_ONLY, draggable);\n+        }\n+        return bundle;\n+    }\n+\n+    public static Bundle getGeoPolyBundle(String stringAnswer, GeoPolyActivity.OutputMode outputMode, boolean readOnly) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putString(GeoPolyActivity.ANSWER_KEY, stringAnswer);\n+        bundle.putSerializable(GeoPolyActivity.OUTPUT_MODE_KEY, outputMode);\n+        bundle.putBoolean(READ_ONLY, readOnly);\n+        return bundle;\n+    }\n+\n+    private static void onButtonClick(Context context, FormIndex index, PermissionUtils permissionUtils, MapConfigurator mapConfigurator,\n+                                      WaitingForDataRegistry waitingForDataRegistry, Class activityClass, Bundle bundle, int requestCode) {\n+        permissionUtils.requestLocationPermissions((Activity) context, new PermissionListener() {\n+            @Override\n+            public void granted() {\n+                waitingForDataRegistry.waitForData(index);\n+                if (mapConfigurator == null || mapConfigurator.isAvailable(context)) {\n+                    GeoWidgetUtils.startGeoActivity(context, activityClass, bundle, requestCode);\n+                } else {\n+                    mapConfigurator.showUnavailableMessage(context);\n+                }\n+            }\n+\n+            @Override\n+            public void denied() {\n+            }\n+        });\n+    }\n+\n+    private static void startGeoActivity(Context context, Class activityClass, Bundle bundle, int requestCode) {\n+        Intent intent = new Intent(context, activityClass);\n+        intent.putExtras(bundle);\n+        ((Activity) context).startActivityForResult(intent, requestCode);\n+    }\n+\n+    private static void updateButtonLabelAndVisibility(GeoWidgetAnswerBinding binding, boolean readOnly, boolean dataAvailable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a331caca9aa9a1508b56dd21b7d6108dfd30ce"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE4NTg3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0MjozNlrOHARZwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0MjozNlrOHARZwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0NzE2OA==", "bodyText": "What's the advantage of putting this here rather than directly in GeoPointWidget? I don't see how it's implementing shared behavior.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r470047168", "createdAt": "2020-08-13T15:42:36Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "diffHunk": "@@ -1,17 +1,127 @@\n package org.odk.collect.android.widgets.utilities;\n \n+import android.app.Activity;\n import android.content.Context;\n+import android.content.Intent;\n import android.location.Location;\n+import android.os.Bundle;\n \n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n+import org.odk.collect.android.geo.MapConfigurator;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoWidgetListener;\n \n import java.text.DecimalFormat;\n \n import timber.log.Timber;\n \n-public class GeoWidgetUtils {\n+import static android.view.View.GONE;\n \n-    private GeoWidgetUtils() {\n+public class GeoWidgetUtils implements GeoWidgetListener {\n+    public static final String LOCATION = \"gp\";\n+    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n+    public static final String READ_ONLY = \"readOnly\";\n+    public static final String DRAGGABLE_ONLY = \"draggable\";\n+    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n+\n+    @Override\n+    public void onButtonClicked(Context context, FormIndex index, PermissionUtils permissionUtils, MapConfigurator mapConfigurator,\n+                                WaitingForDataRegistry waitingForDataRegistry, Class activityClass, Bundle bundle, int requestCode) {\n+        onButtonClick(context, index, permissionUtils, mapConfigurator, waitingForDataRegistry, activityClass, bundle, requestCode);\n+    }\n+\n+    @Override\n+    public void setButtonLabelAndVisibility(GeoWidgetAnswerBinding binding, boolean readOnly, boolean dataAvailable,\n+                                            int buttonTextReadOnly, int buttonTextDataAvailable, int defaultButtonText) {\n+        updateButtonLabelAndVisibility(binding, readOnly, dataAvailable, buttonTextReadOnly, buttonTextDataAvailable, defaultButtonText);\n+    }\n+\n+    public static double getAccuracyThreshold(QuestionDef questionDef) {\n+        // Determine the accuracy threshold to use.\n+        String acc = questionDef.getAdditionalAttribute(null, ACCURACY_THRESHOLD);\n+        return acc != null && !acc.isEmpty() ? Double.parseDouble(acc) : DEFAULT_LOCATION_ACCURACY;\n+    }\n+\n+    public static String getAnswerToDisplay(Context context, String answer) {\n+        try {\n+            if (answer != null && !answer.isEmpty()) {\n+                String[] parts = answer.split(\" \");\n+                return context.getString(\n+                        R.string.gps_result,\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[0]), \"lat\"),\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[1]), \"lon\"),\n+                        GeoWidgetUtils.truncateDouble(parts[2]),\n+                        GeoWidgetUtils.truncateDouble(parts[3])\n+                );\n+            }\n+        } catch (NumberFormatException e) {\n+            return \"\";\n+        }\n+        return \"\";\n+    }\n+\n+    public static Bundle getGeoPointBundle(String stringAnswer, double accuracyThreshold, Boolean readOnly, Boolean draggable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a331caca9aa9a1508b56dd21b7d6108dfd30ce"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE5MjgyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0NDoyMFrOHARebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0NDoyMFrOHARebA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0ODM2NA==", "bodyText": "This is short enough that I don't think there's huge advantage to it being shared. Each poly widget could build its own bundle.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r470048364", "createdAt": "2020-08-13T15:44:20Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "diffHunk": "@@ -1,17 +1,127 @@\n package org.odk.collect.android.widgets.utilities;\n \n+import android.app.Activity;\n import android.content.Context;\n+import android.content.Intent;\n import android.location.Location;\n+import android.os.Bundle;\n \n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n+import org.odk.collect.android.geo.MapConfigurator;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoWidgetListener;\n \n import java.text.DecimalFormat;\n \n import timber.log.Timber;\n \n-public class GeoWidgetUtils {\n+import static android.view.View.GONE;\n \n-    private GeoWidgetUtils() {\n+public class GeoWidgetUtils implements GeoWidgetListener {\n+    public static final String LOCATION = \"gp\";\n+    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n+    public static final String READ_ONLY = \"readOnly\";\n+    public static final String DRAGGABLE_ONLY = \"draggable\";\n+    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n+\n+    @Override\n+    public void onButtonClicked(Context context, FormIndex index, PermissionUtils permissionUtils, MapConfigurator mapConfigurator,\n+                                WaitingForDataRegistry waitingForDataRegistry, Class activityClass, Bundle bundle, int requestCode) {\n+        onButtonClick(context, index, permissionUtils, mapConfigurator, waitingForDataRegistry, activityClass, bundle, requestCode);\n+    }\n+\n+    @Override\n+    public void setButtonLabelAndVisibility(GeoWidgetAnswerBinding binding, boolean readOnly, boolean dataAvailable,\n+                                            int buttonTextReadOnly, int buttonTextDataAvailable, int defaultButtonText) {\n+        updateButtonLabelAndVisibility(binding, readOnly, dataAvailable, buttonTextReadOnly, buttonTextDataAvailable, defaultButtonText);\n+    }\n+\n+    public static double getAccuracyThreshold(QuestionDef questionDef) {\n+        // Determine the accuracy threshold to use.\n+        String acc = questionDef.getAdditionalAttribute(null, ACCURACY_THRESHOLD);\n+        return acc != null && !acc.isEmpty() ? Double.parseDouble(acc) : DEFAULT_LOCATION_ACCURACY;\n+    }\n+\n+    public static String getAnswerToDisplay(Context context, String answer) {\n+        try {\n+            if (answer != null && !answer.isEmpty()) {\n+                String[] parts = answer.split(\" \");\n+                return context.getString(\n+                        R.string.gps_result,\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[0]), \"lat\"),\n+                        GeoWidgetUtils.convertCoordinatesIntoDegreeFormat(context, Double.parseDouble(parts[1]), \"lon\"),\n+                        GeoWidgetUtils.truncateDouble(parts[2]),\n+                        GeoWidgetUtils.truncateDouble(parts[3])\n+                );\n+            }\n+        } catch (NumberFormatException e) {\n+            return \"\";\n+        }\n+        return \"\";\n+    }\n+\n+    public static Bundle getGeoPointBundle(String stringAnswer, double accuracyThreshold, Boolean readOnly, Boolean draggable) {\n+        final Bundle bundle = new Bundle();\n+        if (stringAnswer != null && !stringAnswer.isEmpty()) {\n+            bundle.putDoubleArray(LOCATION, GeoWidgetUtils.getLocationParamsFromStringAnswer(stringAnswer));\n+        }\n+        bundle.putDouble(ACCURACY_THRESHOLD, accuracyThreshold);\n+        if (readOnly != null && draggable != null) {\n+            bundle.putBoolean(READ_ONLY, readOnly);\n+            bundle.putBoolean(DRAGGABLE_ONLY, draggable);\n+        }\n+        return bundle;\n+    }\n+\n+    public static Bundle getGeoPolyBundle(String stringAnswer, GeoPolyActivity.OutputMode outputMode, boolean readOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a331caca9aa9a1508b56dd21b7d6108dfd30ce"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzIwMjYzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0Njo0OVrOHARkkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0Njo0OVrOHARkkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0OTkzOQ==", "bodyText": "In general, the Utils suffix is a red flag because it implies \"I didn't really know where to put this stuff so I put it here.\" It would be good to aim for clean abstractions that have meaningful names and specific responsibilities (e.g. GeoDataRequester as @seadowg suggested at #3922 (comment)).", "url": "https://github.com/getodk/collect/pull/3922#discussion_r470049939", "createdAt": "2020-08-13T15:46:49Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoWidgetUtils.java", "diffHunk": "@@ -1,17 +1,127 @@\n package org.odk.collect.android.widgets.utilities;\n \n+import android.app.Activity;\n import android.content.Context;\n+import android.content.Intent;\n import android.location.Location;\n+import android.os.Bundle;\n \n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.databinding.GeoWidgetAnswerBinding;\n+import org.odk.collect.android.geo.MapConfigurator;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoWidgetListener;\n \n import java.text.DecimalFormat;\n \n import timber.log.Timber;\n \n-public class GeoWidgetUtils {\n+import static android.view.View.GONE;\n \n-    private GeoWidgetUtils() {\n+public class GeoWidgetUtils implements GeoWidgetListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34a331caca9aa9a1508b56dd21b7d6108dfd30ce"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTAyMDk4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/GeoButtonClickListener.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyMzozMVrOHISxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjoxMjozM1rOHJMZUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1ODMwMQ==", "bodyText": "I think this interface should really be called the GeoDataRequester as that's what the widgets use it for. They do that on a button click but that's a detail of the widget.  It should also hide anything to do with the geo activity classes from the widget. The widget doesn't care how the geo data is acquired right? It just wants to get it in setBinaryData somehow.\nThat being the case it probably makes sense to have different methods like requestGeoPoint, requestGeoShape etc and then have the implementation control what activity it launches in each case. The implementation should also take responsibility for building the Bundle and the requestCode.\nGiven all that I think the implementation should probably be called something like ActivityGeoDataRequester as it's an activity based implementation of the request geo data.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r478458301", "createdAt": "2020-08-27T14:23:31Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/GeoButtonClickListener.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.odk.collect.android.widgets.interfaces;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n+\n+public interface GeoButtonClickListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d281de465d8b6f661f6d224c31cc13411fbe02"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NDc4Mw==", "bodyText": "I renamed GeoDataRequester class back to GeoWidgetUtils, as I thought it also has methods to convert answer string to geo data etc. I renamed the interface as ActivirtyGeoDatarequester, which has methods requesGeoPoint, requestGeoShape, requestGeoTrace and requestGeoIntent. Also, I am testing the interface separately in the GeoWidgetUtilsTest.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r478584783", "createdAt": "2020-08-27T17:34:40Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/GeoButtonClickListener.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.odk.collect.android.widgets.interfaces;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n+\n+public interface GeoButtonClickListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1ODMwMQ=="}, "originalCommit": {"oid": "f9d281de465d8b6f661f6d224c31cc13411fbe02"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMjMyMw==", "bodyText": "Might be worth reading my comment again as I don't think that's what I was getting at. I don't think the GeoWidgetUtils should implement the GeoDataRequester interface (it should just be a non construtable utils class with helper methods) and I don't think the interface should be named ActivityGeoDataRequester, that was a suggested name for the implementation. Also, if it wasn't clear I was thinking you would get rid of requestGeoIntent and just have the three methods requesGeoPoint, requestGeoShape, requestGeoTrace which would all be void.\nVery happy to discuss more if it's helpful!", "url": "https://github.com/getodk/collect/pull/3922#discussion_r479402323", "createdAt": "2020-08-28T16:12:33Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/interfaces/GeoButtonClickListener.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.odk.collect.android.widgets.interfaces;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n+\n+public interface GeoButtonClickListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1ODMwMQ=="}, "originalCommit": {"oid": "f9d281de465d8b6f661f6d224c31cc13411fbe02"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTAyNDM1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoDataRequester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyNDoxNlrOHISz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyNDoxNlrOHISz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1ODg0OA==", "bodyText": "permissionUtils could probably be a field of this class and come in at the constructor rather than be passed in as a method argument.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r478458848", "createdAt": "2020-08-27T14:24:16Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/GeoDataRequester.java", "diffHunk": "@@ -0,0 +1,123 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.location.Location;\n+import android.os.Bundle;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoButtonClickListener;\n+\n+import java.text.DecimalFormat;\n+\n+import timber.log.Timber;\n+\n+public class GeoDataRequester implements GeoButtonClickListener {\n+    public static final String LOCATION = \"gp\";\n+    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n+    public static final String READ_ONLY = \"readOnly\";\n+    public static final String DRAGGABLE_ONLY = \"draggable\";\n+    public static final double DEFAULT_LOCATION_ACCURACY = 5.0;\n+\n+    @Override\n+    public void requestGeoIntent(Context context, FormIndex index, PermissionUtils permissionUtils,\n+                                 WaitingForDataRegistry waitingForDataRegistry, Class activityClass, Bundle bundle, int requestCode) {\n+        permissionUtils.requestLocationPermissions((Activity) context, new PermissionListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9d281de465d8b6f661f6d224c31cc13411fbe02"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODUwNjUxOnYy", "diffSide": "LEFT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo1MjoxNlrOHK3SkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo1MjoxNlrOHK3SkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE1MzY4MA==", "bodyText": "I think the static helper methods should stay in the GeoWidgetUtils class. There's no reason as far as I can see for them to live in ActivityGeoDataRequester and having them there creates a dependency between the widgets and the implementation of GeoDataRequester which isn't ideal.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481153680", "createdAt": "2020-09-01T13:52:16Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "diffHunk": "@@ -6,24 +6,23 @@\n import android.location.Location;\n import android.os.Bundle;\n \n-import org.javarosa.core.model.FormIndex;\n import org.javarosa.core.model.QuestionDef;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.GeoPointActivity;\n+import org.odk.collect.android.activities.GeoPointMapActivity;\n import org.odk.collect.android.activities.GeoPolyActivity;\n import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n import org.odk.collect.android.utilities.PermissionUtils;\n-import org.odk.collect.android.widgets.interfaces.ActivityGeoDataRequester;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+import org.odk.collect.android.widgets.interfaces.GeoDataRequester;\n \n import java.text.DecimalFormat;\n \n import timber.log.Timber;\n \n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.MAPS;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.PLACEMENT_MAP;\n-import static org.odk.collect.android.utilities.WidgetAppearanceUtils.hasAppearance;\n-\n-public class GeoWidgetUtils implements ActivityGeoDataRequester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75e38f28d333d5b2c2ae1c2035e3a246f8e2d2e6"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIwMzAzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNTozN1rOHLl4KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1NTozOVrOHLnysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjk2OQ==", "bodyText": "This should still implement the interface so that the widget depends on an abstraction rather than an implementation.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481916969", "createdAt": "2020-09-02T09:05:37Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.activities.GeoPointActivity;\n+import org.odk.collect.android.activities.GeoPointMapActivity;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+public class ActivityGeoDataRequester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d249bbde5eb7aa72ba0a0e2af149449bd07dd6e8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0ODMzNw==", "bodyText": "I misinterpreted the last comment. The interface would be good here.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481948337", "createdAt": "2020-09-02T09:55:39Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.activities.GeoPointActivity;\n+import org.odk.collect.android.activities.GeoPointMapActivity;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+public class ActivityGeoDataRequester {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxNjk2OQ=="}, "originalCommit": {"oid": "d249bbde5eb7aa72ba0a0e2af149449bd07dd6e8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzIxMDYxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNzowMVrOHLl9AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTowNzowMVrOHLl9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkxODIwOQ==", "bodyText": "I don't think we should have this constructor. The WidgetFactory can construct a PermissionUtils object to pass in.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481918209", "createdAt": "2020-09-02T09:07:01Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequester.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.activities.GeoPointActivity;\n+import org.odk.collect.android.activities.GeoPointMapActivity;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.ApplicationConstants;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+public class ActivityGeoDataRequester {\n+    public static final String LOCATION = \"gp\";\n+    public static final String ACCURACY_THRESHOLD = \"accuracyThreshold\";\n+    public static final String READ_ONLY = \"readOnly\";\n+    public static final String DRAGGABLE_ONLY = \"draggable\";\n+\n+    private final PermissionUtils permissionUtils;\n+\n+    public ActivityGeoDataRequester() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d249bbde5eb7aa72ba0a0e2af149449bd07dd6e8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzMzMTE3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/GeoPointWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozNjowNFrOHLnGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1NjoyMFrOHLn0FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzA0NQ==", "bodyText": "I think all the widgets are missing tests to check that setBinaryData actually updates the widget answer (getAnswer). It looks like right now the wigets are broken and don't save answers (just display them).", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481937045", "createdAt": "2020-09-02T09:36:04Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/GeoPointWidgetTest.java", "diffHunk": "@@ -1,212 +1,151 @@\n package org.odk.collect.android.widgets;\n \n-import android.content.ComponentName;\n-import android.content.Intent;\n-import android.os.Bundle;\n import android.view.View;\n \n-import org.javarosa.core.model.QuestionDef;\n import org.javarosa.core.model.data.GeoPointData;\n-import org.javarosa.core.model.data.StringData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.GeoPointActivity;\n-import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.odk.collect.android.widgets.utilities.ActivityGeoDataRequester;\n import org.odk.collect.android.widgets.utilities.GeoWidgetUtils;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n import org.robolectric.RobolectricTestRunner;\n \n-import java.util.Random;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n-import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.odk.collect.android.widgets.GeoPointMapWidget.ACCURACY_THRESHOLD;\n-import static org.odk.collect.android.widgets.GeoPointMapWidget.DEFAULT_LOCATION_ACCURACY;\n-import static org.odk.collect.android.widgets.GeoPointMapWidget.LOCATION;\n+import static org.odk.collect.android.widgets.support.GeoWidgetHelpers.getRandomDoubleArray;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n-import static org.robolectric.Shadows.shadowOf;\n-\n-/**\n- * @author James Knight\n- */\n \n @RunWith(RobolectricTestRunner.class)\n public class GeoPointWidgetTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d249bbde5eb7aa72ba0a0e2af149449bd07dd6e8"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0ODY5Mw==", "bodyText": "I thought that the answers must be getting saved by calling widgetValueChanged", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481948693", "createdAt": "2020-09-02T09:56:20Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/GeoPointWidgetTest.java", "diffHunk": "@@ -1,212 +1,151 @@\n package org.odk.collect.android.widgets;\n \n-import android.content.ComponentName;\n-import android.content.Intent;\n-import android.os.Bundle;\n import android.view.View;\n \n-import org.javarosa.core.model.QuestionDef;\n import org.javarosa.core.model.data.GeoPointData;\n-import org.javarosa.core.model.data.StringData;\n import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.GeoPointActivity;\n-import org.odk.collect.android.fakes.FakePermissionUtils;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.odk.collect.android.widgets.utilities.ActivityGeoDataRequester;\n import org.odk.collect.android.widgets.utilities.GeoWidgetUtils;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n import org.robolectric.RobolectricTestRunner;\n \n-import java.util.Random;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n-import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.odk.collect.android.widgets.GeoPointMapWidget.ACCURACY_THRESHOLD;\n-import static org.odk.collect.android.widgets.GeoPointMapWidget.DEFAULT_LOCATION_ACCURACY;\n-import static org.odk.collect.android.widgets.GeoPointMapWidget.LOCATION;\n+import static org.odk.collect.android.widgets.support.GeoWidgetHelpers.getRandomDoubleArray;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n-import static org.robolectric.Shadows.shadowOf;\n-\n-/**\n- * @author James Knight\n- */\n \n @RunWith(RobolectricTestRunner.class)\n public class GeoPointWidgetTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzNzA0NQ=="}, "originalCommit": {"oid": "d249bbde5eb7aa72ba0a0e2af149449bd07dd6e8"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzM0NDk5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequesterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozOTo0NVrOHLnPBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTozOTo0NVrOHLnPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTkzOTIwNQ==", "bodyText": "These three tests should be broken into multiple tests for the different calls to the methods under tests (for readOnly mode and different appearances for example). Otherwise, it's hard to read the test and if one fails it'll be harder to see what exactly has failed.", "url": "https://github.com/getodk/collect/pull/3922#discussion_r481939205", "createdAt": "2020-09-02T09:39:45Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/utilities/ActivityGeoDataRequesterTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package org.odk.collect.android.widgets.utilities;\n+\n+import android.content.ComponentName;\n+import android.content.Intent;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.javarosa.core.model.QuestionDef;\n+import org.javarosa.core.model.data.GeoPointData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.activities.GeoPointActivity;\n+import org.odk.collect.android.activities.GeoPointMapActivity;\n+import org.odk.collect.android.activities.GeoPolyActivity;\n+import org.odk.collect.android.fakes.FakePermissionUtils;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+import org.odk.collect.android.widgets.support.FakeWaitingForDataRegistry;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowActivity;\n+\n+import static junit.framework.TestCase.assertEquals;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes.GEOSHAPE_CAPTURE;\n+import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes.GEOTRACE_CAPTURE;\n+import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes.LOCATION_CAPTURE;\n+import static org.odk.collect.android.widgets.support.GeoWidgetHelpers.assertGeoPointBundleArgumentEquals;\n+import static org.odk.collect.android.widgets.support.GeoWidgetHelpers.assertGeoPolyBundleArgumentEquals;\n+import static org.odk.collect.android.widgets.support.GeoWidgetHelpers.getRandomDoubleArray;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.odk.collect.android.widgets.utilities.ActivityGeoDataRequester.ACCURACY_THRESHOLD;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ActivityGeoDataRequesterTest {\n+    private final FakePermissionUtils permissionUtils = new FakePermissionUtils();\n+    private final ActivityGeoDataRequester activityGeoDataRequester = new ActivityGeoDataRequester(permissionUtils);\n+    private final FakeWaitingForDataRegistry waitingForDataRegistry = new FakeWaitingForDataRegistry();\n+    private final GeoPointData answer = new GeoPointData(getRandomDoubleArray());\n+\n+    private TestScreenContextActivity testActivity;\n+    private ShadowActivity shadowActivity;\n+    private FormEntryPrompt prompt;\n+    private FormIndex formIndex;\n+    private QuestionDef questionDef;\n+\n+    @Before\n+    public void setUp() {\n+        testActivity = widgetTestActivity();\n+        shadowActivity = shadowOf(testActivity);\n+\n+        prompt = promptWithReadOnly();\n+        formIndex = mock(FormIndex.class);\n+        questionDef = mock(QuestionDef.class);\n+\n+        permissionUtils.setPermissionGranted(true);\n+        when(prompt.getQuestion()).thenReturn(questionDef);\n+        when(prompt.getIndex()).thenReturn(formIndex);\n+    }\n+\n+    @Test\n+    public void whenPermissionIsNotGranted_requestGeoPoint_doesNotLaunchAnyIntent() {\n+        permissionUtils.setPermissionGranted(false);\n+        activityGeoDataRequester.requestGeoPoint(testActivity, prompt, waitingForDataRegistry);\n+\n+        assertNull(shadowActivity.getNextStartedActivity());\n+        assertTrue(waitingForDataRegistry.waiting.isEmpty());\n+    }\n+\n+    @Test\n+    public void whenPermissionIsNotGranted_requestGeoShape_doesNotLaunchAnyIntent() {\n+        permissionUtils.setPermissionGranted(false);\n+        activityGeoDataRequester.requestGeoShape(testActivity, prompt, waitingForDataRegistry);\n+\n+        assertNull(shadowActivity.getNextStartedActivity());\n+        assertTrue(waitingForDataRegistry.waiting.isEmpty());\n+    }\n+\n+    @Test\n+    public void whenPermissionIsNotGranted_requestGeoTrace_doesNotLaunchAnyIntent() {\n+        permissionUtils.setPermissionGranted(false);\n+        activityGeoDataRequester.requestGeoTrace(testActivity, prompt, waitingForDataRegistry);\n+\n+        assertNull(shadowActivity.getNextStartedActivity());\n+        assertTrue(waitingForDataRegistry.waiting.isEmpty());\n+    }\n+\n+    @Test\n+    public void whenPermissionIGranted_requestGeoPoint_launchCorrectIntent_andSetsFormIndexWaitingForData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d249bbde5eb7aa72ba0a0e2af149449bd07dd6e8"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3204, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}