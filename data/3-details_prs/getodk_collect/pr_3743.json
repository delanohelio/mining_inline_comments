{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjk0Mzcz", "number": 3743, "title": "Improved QRCode design", "bodyText": "See https://forum.opendatakit.org/t/qr-code-screen-redesign/24996/13\nI have been working with a team to improve UI/UX the QR code design. Please see the above link for screenshots and prior discussion.\nWe introduce the QRCodeTabs activity which contains a viewpager in its layout. The viewpager has two tabs: an embedded qr code scanner fragment and a show qr code fragment. We chose this design because other apps we referenced used a similar layout.\nThis PR also removes the need of a decided ScanQRCodeActivity, since putting the Scan QR Fragment first in the ViewPager allows the Configure via QR Code menu item to send the user directly to the newly created QRCodeTabs activity.\nBefore submitting this PR, please make sure you have:\n\n[x ] run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n[x ] verified that any code or assets from external sources are properly credited in comments and/or in the about file.", "createdAt": "2020-03-24T22:51:07Z", "url": "https://github.com/getodk/collect/pull/3743", "merged": true, "mergeCommit": {"oid": "010a3cad2da064860d2cb1fd3ff02522b216ea74"}, "closed": true, "closedAt": "2020-05-13T14:57:18Z", "author": {"login": "hypercubestart"}, "timelineItems": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ8AtcgBqjMxNjE5ODc4NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgoLnegH2gAyMzkzMjk0MzczOjUzMThmYzE1OTRiZjU5NzY2MWQ4YWY2YTZlNDBkZjQwMzhiMGYwMWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc17d6123edd634b89a95abc2aafeddc22d2fb5", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/3dc17d6123edd634b89a95abc2aafeddc22d2fb5", "committedDate": "2020-03-24T23:01:21Z", "message": "removed unused"}, "afterCommit": {"oid": "8b80f1a7f344bd06ff0aa1d539bd312b45805775", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/8b80f1a7f344bd06ff0aa1d539bd312b45805775", "committedDate": "2020-03-25T00:03:43Z", "message": "removed unused"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjQzNTAy", "url": "https://github.com/getodk/collect/pull/3743#pullrequestreview-383643502", "createdAt": "2020-03-30T08:43:34Z", "commit": {"oid": "82b2f1c278ebd1408422502882504a969b09f376"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0MzozNFrOF9fXfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0MzozNFrOF9fXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTM3NA==", "bodyText": "We should really be using ViewPager2 and FragmentStateAdapter here. ViewPager was recently deprecated so adding it in now is queuing up rework in the future unfortunately! Would you be able to have a look and see much work it would be to convert these changes over?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r400021374", "createdAt": "2020-03-30T08:43:34Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.odk.collect.android.adapters;\n+\n+import android.view.ViewGroup;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.fragment.app.FragmentPagerAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentPagerAdapter  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b2f1c278ebd1408422502882504a969b09f376"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f7491b558cb63f4f7384c4a8ece16f0a0a3179f", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/3f7491b558cb63f4f7384c4a8ece16f0a0a3179f", "committedDate": "2020-03-31T23:00:03Z", "message": "update to viewpager2"}, "afterCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/b15e1e3c600111d7d9095e74b89336b2df037c7a", "committedDate": "2020-03-31T23:15:36Z", "message": "styling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Njc5NzA4", "url": "https://github.com/getodk/collect/pull/3743#pullrequestreview-385679708", "createdAt": "2020-04-01T15:08:13Z", "commit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODoxNFrOF_FL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozOTo1MFrOF_GojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTU5OQ==", "bodyText": "Why the downgrade here?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401689599", "createdAt": "2020-04-01T15:08:14Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -261,7 +261,8 @@ dependencies {\n     debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'\n \n     // Android Architecture Components:\n-    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\n+    implementation \"androidx.lifecycle:lifecycle-extensions:2.1.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTEzNw==", "bodyText": "I'd be happy with this throwing a IllegalArgumentException instead. I'm pretty sure a null will result in a crash anyway so might as well have something that's easy to diagnose!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401695137", "createdAt": "2020-04-01T15:15:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.adapters;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.viewpager2.adapter.FragmentStateAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentStateAdapter {\n+    public TabAdapter(FragmentActivity fa) {\n+        super(fa);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Fragment createFragment(int position) {\n+        switch (position) {\n+            case 0:\n+                return new QRScannerFragment();\n+            case 1:\n+                return new ShowQRCodeFragment();\n+            default:\n+                // should never reach here\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzI2MQ==", "bodyText": "Why do we need this? This method has generally always been a little dangerous as it changes how the Fragment lifecycle works and it also looks like it's going to be deprecated: https://developer.android.com/reference/androidx/fragment/app/Fragment#setRetainInstance(boolean)", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401697261", "createdAt": "2020-04-01T15:18:26Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg==", "bodyText": "Should this static method move out of the activity now? Seems weird for the logic to live there given it's being called from a Fragment.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401701492", "createdAt": "2020-04-01T15:24:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_scan, container, false);\n+        beepManager = new BeepManager(getActivity());\n+        barcodeScannerView = rootView.findViewById(R.id.barcode_view);\n+        switchFlashlightButton = rootView.findViewById(R.id.switch_flashlight);\n+\n+        barcodeScannerView.setTorchListener(this);\n+\n+        switchFlashlightButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                switchFlashlight(v);\n+            }\n+        });\n+        new PermissionUtils().requestCameraPermission(getActivity(), new PermissionListener() {\n+            @Override\n+            public void granted() {\n+                barcodeScannerView.decodeSingle(new BarcodeCallback() {\n+                    @Override\n+                    public void barcodeResult(BarcodeResult result) {\n+                        beepManager.playBeepSoundAndVibrate();\n+                        try {\n+                            QRCodeTabs.applySettings(getActivity(), CompressionUtils.decompress(result.getText()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMzMwMA==", "bodyText": "The getInstance() methods here are deprecated. You should see warning in Android Studio about this. As the comment on them says it would be better to use Dagger injection to fetch these.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401703300", "createdAt": "2020-04-01T15:26:36Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java", "diffHunk": "@@ -96,10 +95,11 @@\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.show_qrcode_fragment, container, false);\n-        ((CollectAbstractActivity) getActivity()).initToolbar(getString(R.string.configure_via_qr_code));\n         ButterKnife.bind(this, view);\n         setHasOptionsMenu(true);\n         setRetainInstance(true);\n+        passwordsSet[0] = !((String) AdminSharedPreferences.getInstance().get(KEY_ADMIN_PW)).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTU3MQ==", "bodyText": "This should be \"Import QR Code\" right?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401709571", "createdAt": "2020-04-01T15:34:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -493,18 +493,16 @@\n     <string name=\"no_time_selected\">No time selected</string>\n     <string name=\"configure_via_qr_code\">Configure via QR code</string>\n     <string name=\"qr_code\">QR code configuration</string>\n-    <string name=\"scan_qrcode\">Scan code from other device</string>\n+    <string name=\"import_qrcode_sd\">Import QRCode</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTg0Nw==", "bodyText": "Can we make this a MaterialButton and remove the custom padding, background etc? It also looks like it needs a larger margin from what I can see in the design preview. I think using @dimen/margin_large would do it.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401711847", "createdAt": "2020-04-01T15:37:56Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/fragment_scan.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\"org.odk.collect.android.fragments.QRScannerFragment\">\n+\n+\n+    <com.journeyapps.barcodescanner.DecoratedBarcodeView\n+        android:id=\"@+id/barcode_view\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        />\n+\n+    <Button", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjYyMg==", "bodyText": "This should be the default text color. Hard coding like this will make the text the wrong color for the dark theme though. Were you running into problems that made you set this?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401712622", "createdAt": "2020-04-01T15:38:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/show_qrcode_fragment.xml", "diffHunk": "@@ -81,6 +63,10 @@\n             android:layout_weight=\"1\"\n             android:padding=\"5dp\"\n             android:textSize=\"15sp\"\n-            android:textStyle=\"bold\" />\n+            android:gravity=\"center_vertical\"\n+            android:text=\"@string/qrcode_with_both_passwords\"\n+            android:textColor=\"#000000\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg==", "bodyText": "This should be QRCodeTabsActivity", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401713292", "createdAt": "2020-04-01T15:39:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.CollectAbstractActivity;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.adapters.TabAdapter;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.listeners.ActionListener;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.android.utilities.QRCodeUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.FileProvider;\n+import androidx.viewpager2.widget.ViewPager2;\n+\n+import com.google.android.material.tabs.TabLayout;\n+import com.google.android.material.tabs.TabLayoutMediator;\n+\n+import static org.odk.collect.android.activities.ActivityUtils.startActivityAndCloseAllOthers;\n+\n+public class QRCodeTabs extends CollectAbstractActivity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzkwODM2", "url": "https://github.com/getodk/collect/pull/3743#pullrequestreview-386790836", "createdAt": "2020-04-02T21:29:54Z", "commit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyOTo1NVrOF_9NBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyOTo1NVrOF_9NBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzM2Nw==", "bodyText": "Yes, and I think that for consistency with the menu on the main screen it should be lowercase \"code\" -- \"Import QR code\"", "url": "https://github.com/getodk/collect/pull/3743#discussion_r402607367", "createdAt": "2020-04-02T21:29:55Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -493,18 +493,16 @@\n     <string name=\"no_time_selected\">No time selected</string>\n     <string name=\"configure_via_qr_code\">Configure via QR code</string>\n     <string name=\"qr_code\">QR code configuration</string>\n-    <string name=\"scan_qrcode\">Scan code from other device</string>\n+    <string name=\"import_qrcode_sd\">Import QRCode</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTU3MQ=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NzIxODY0", "url": "https://github.com/getodk/collect/pull/3743#pullrequestreview-389721864", "createdAt": "2020-04-08T07:37:00Z", "commit": {"oid": "fb92976b13167d1b6750d136739fa3dd5d86b554"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNzowMFrOGCiokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNzowMFrOGCiokg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA==", "bodyText": "Did this come from a file that had a copyright notice on it?\n@lognaturel should we have this kind of copyright notice in the code? I know copyright headers like this can be useful for relicensing projects (as you can scan for all the copyright holders) but as far as I know we don't have them for every contribution so we'd probably need to get that info from Git anyway.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r405317778", "createdAt": "2020-04-08T07:37:00Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2017 Shobhit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb92976b13167d1b6750d136739fa3dd5d86b554"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dd845c6d8d7f1b1d58e27a0367055c5f9c02ee4", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/1dd845c6d8d7f1b1d58e27a0367055c5f9c02ee4", "committedDate": "2020-04-28T02:32:58Z", "message": "fix tests"}, "afterCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/c454ed5a5852771563b916c9caa71ae2e8b00fda", "committedDate": "2020-04-28T02:41:09Z", "message": "remove copyright"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjc5MTE2", "url": "https://github.com/getodk/collect/pull/3743#pullrequestreview-402679116", "createdAt": "2020-04-29T13:43:36Z", "commit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0MzozN1rOGN_epg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo1MDoxM1rOGN_xqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDcxMA==", "bodyText": "I'd try and name this around the \"feature\" rather than the components under test (as this test shouldn't really care about them). Maybe ConfigureWithQRCodeTest?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417324710", "createdAt": "2020-04-29T13:43:37Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTE1Ng==", "bodyText": "This should probably be a static and use constant syntax (CHECKER_BACKGROUND_DRAWABLE_ID).", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417325156", "createdAt": "2020-04-29T13:44:13Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTkyNQ==", "bodyText": "Maybe this stub version could be a private static inner class here so you're able to just do new StubQRCodeGenerator().", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417325925", "createdAt": "2020-04-29T13:45:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNzIzNw==", "bodyText": "Again just in terms of naming lets try and get closer to describing the feature. onMainMenu_clickConfigureQRCode_andClickingOnScan_opensScanner() for this as an example. I'd try doing a similar \"given-when-then\" style for all these tests.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417327237", "createdAt": "2020-04-29T13:47:01Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA==", "bodyText": "I think you still want another assertion here on the file that's sent right?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417328294", "createdAt": "2020-04-29T13:48:31Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ==", "bodyText": "If possible it'd be nicer for QRCodeUtils.getQRCodeGeneratorObservable's logic to move to this implementation (and probably have it in its own class file). Wrapping like this is a nice trick for dealing with statics we don't control but we do control this one!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417329579", "createdAt": "2020-04-29T13:50:13Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -265,4 +271,14 @@ public BackgroundWorkManager providesBackgroundWorkManager() {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n+\n+    @Provides\n+    public QRCodeGenerator providesQRCodeGenerator() {\n+        return new QRCodeGenerator() {\n+            @Override\n+            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54442693c5c350814309524a8d2f5643f04a4c3e", "author": {"user": null}, "url": "https://github.com/getodk/collect/commit/54442693c5c350814309524a8d2f5643f04a4c3e", "committedDate": "2020-05-06T21:28:39Z", "message": "moved some functions to qrcode tabs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba05b0af00ae247caeb648bd4f17a20cf58a5f8", "author": {"user": null}, "url": "https://github.com/getodk/collect/commit/dba05b0af00ae247caeb648bd4f17a20cf58a5f8", "committedDate": "2020-05-06T21:28:39Z", "message": "added scan button in toolbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ea5f980d2b81a38449889f861d8340d023f642", "author": {"user": null}, "url": "https://github.com/getodk/collect/commit/80ea5f980d2b81a38449889f861d8340d023f642", "committedDate": "2020-05-06T21:28:39Z", "message": "Added embedded scan (WIP)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c571c8fd13f1422894f13cbaee28c9ed570cf5", "author": {"user": null}, "url": "https://github.com/getodk/collect/commit/a7c571c8fd13f1422894f13cbaee28c9ed570cf5", "committedDate": "2020-05-06T21:28:39Z", "message": "scan ulitity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c9c99522e4130363178fab4b729df15af576058", "author": {"user": null}, "url": "https://github.com/getodk/collect/commit/3c9c99522e4130363178fab4b729df15af576058", "committedDate": "2020-05-06T21:28:39Z", "message": "added permission request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5116c3b042460367a9d6feb49b0c7e2184088e0a", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/5116c3b042460367a9d6feb49b0c7e2184088e0a", "committedDate": "2020-05-06T21:28:39Z", "message": "scanner works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46843718cd59a3afeef9c4d32fd1b85125ea6ae7", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/46843718cd59a3afeef9c4d32fd1b85125ea6ae7", "committedDate": "2020-05-06T21:28:39Z", "message": "beep sound and flashlight for embedded qr camera"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8904e1d8d262407a7c9fbd5aeb62d3325d55e8a9", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/8904e1d8d262407a7c9fbd5aeb62d3325d55e8a9", "committedDate": "2020-05-06T21:28:39Z", "message": "add files from merge commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bcdf633b6eed3b8eb36c66f550a8e1c87c46be4", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/3bcdf633b6eed3b8eb36c66f550a8e1c87c46be4", "committedDate": "2020-05-06T21:28:39Z", "message": "moved import qrcode item to overflow for QRCodeTabs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b04c7ca8b55976f5048490691b8b1492b72dd415", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/b04c7ca8b55976f5048490691b8b1492b72dd415", "committedDate": "2020-05-06T21:28:39Z", "message": "qr_code redesign"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b22c7553ef9e9e22236d52cd9e3af415df620da", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/0b22c7553ef9e9e22236d52cd9e3af415df620da", "committedDate": "2020-05-06T21:28:39Z", "message": "minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcd27b93128ee62248084a16a1f657d49226b1ad", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/bcd27b93128ee62248084a16a1f657d49226b1ad", "committedDate": "2020-05-06T21:28:39Z", "message": "hook menu item with new QRCodeTabs and fix qrcode generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "092365a095e279069a3a5e9486ed0bd31e878f0d", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/092365a095e279069a3a5e9486ed0bd31e878f0d", "committedDate": "2020-05-06T21:28:40Z", "message": "removed unused"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "647138ab0ae1132f34d22284faa57ff9b8a51446", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/647138ab0ae1132f34d22284faa57ff9b8a51446", "committedDate": "2020-05-06T21:28:40Z", "message": "change test name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f43aa172d31166cd924ada764b2cf263998ceadb", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/f43aa172d31166cd924ada764b2cf263998ceadb", "committedDate": "2020-05-06T21:28:40Z", "message": "fix NPE bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b8ecbab76a28ec4b134ffbc0bf8ecfdb3af418a", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/5b8ecbab76a28ec4b134ffbc0bf8ecfdb3af418a", "committedDate": "2020-05-06T21:28:40Z", "message": "add analytics and minor issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eec6483d6d82cd519e16e5c92a34c2274c3d86c", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/2eec6483d6d82cd519e16e5c92a34c2274c3d86c", "committedDate": "2020-05-06T21:28:40Z", "message": "update to viewpager2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01f9cb2777c3f99519b0de24691a7fc79cb83bb3", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/01f9cb2777c3f99519b0de24691a7fc79cb83bb3", "committedDate": "2020-05-06T21:28:40Z", "message": "styling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7d548a2317f3eb07bb93cf28d7e62b0300abb3f", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/d7d548a2317f3eb07bb93cf28d7e62b0300abb3f", "committedDate": "2020-05-06T21:28:40Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f16c57eb086452266fcd3388fb69bf1e0549582f", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/f16c57eb086452266fcd3388fb69bf1e0549582f", "committedDate": "2020-05-06T21:28:40Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "817ee550986e2440f53f1294298afad5b0f87c87", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/817ee550986e2440f53f1294298afad5b0f87c87", "committedDate": "2020-05-06T21:28:40Z", "message": "update flash button to be materialbutton"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9718beb9979db5a9d018fdda1d7a28e62b5edef5", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/9718beb9979db5a9d018fdda1d7a28e62b5edef5", "committedDate": "2020-05-06T21:28:40Z", "message": "refactor into preferences.qr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb0adfad1ecbb2a2e1deb87b4f582ed175c92e84", "author": {"user": {"login": "pedrop30", "name": null}}, "url": "https://github.com/getodk/collect/commit/cb0adfad1ecbb2a2e1deb87b4f582ed175c92e84", "committedDate": "2020-05-06T21:28:40Z", "message": "QrCodeFragmentAction test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29356d78cf88fb14dd2da397bc89b555c7b75b2c", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/29356d78cf88fb14dd2da397bc89b555c7b75b2c", "committedDate": "2020-05-06T21:28:40Z", "message": "fixed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3a5d5c664802939123b75ebe472e1661c8c84d", "author": {"user": {"login": "pedrop30", "name": null}}, "url": "https://github.com/getodk/collect/commit/9f3a5d5c664802939123b75ebe472e1661c8c84d", "committedDate": "2020-05-06T21:28:40Z", "message": "ShowQRFragmentAction test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f341ca35612e90c3900fbef87e7bcf9c97a794e4", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/f341ca35612e90c3900fbef87e7bcf9c97a794e4", "committedDate": "2020-05-06T21:28:40Z", "message": "QRCodeTabsActivityPage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9658e21df88ac74e611855b191e5050a1b34b22e", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/9658e21df88ac74e611855b191e5050a1b34b22e", "committedDate": "2020-05-06T21:28:40Z", "message": "fix bug share qr code doesnt work if qr code not generated yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5a9629fc324a32c784db2710c203182aa95dce", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/8c5a9629fc324a32c784db2710c203182aa95dce", "committedDate": "2020-05-06T21:28:40Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a544327929fda67d3e7889044e35f2957b716cf8", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/a544327929fda67d3e7889044e35f2957b716cf8", "committedDate": "2020-05-06T21:28:40Z", "message": "remove copyright"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a4b27e0d93e2066bec0be4af32bc305f7ebe70d", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/6a4b27e0d93e2066bec0be4af32bc305f7ebe70d", "committedDate": "2020-05-06T21:28:40Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2c4bf08a446434726bf8df835431ebc7ca61085", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/d2c4bf08a446434726bf8df835431ebc7ca61085", "committedDate": "2020-05-06T21:37:10Z", "message": "style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/c454ed5a5852771563b916c9caa71ae2e8b00fda", "committedDate": "2020-04-28T02:41:09Z", "message": "remove copyright"}, "afterCommit": {"oid": "d2c4bf08a446434726bf8df835431ebc7ca61085", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/d2c4bf08a446434726bf8df835431ebc7ca61085", "committedDate": "2020-05-06T21:37:10Z", "message": "style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4959cba3e515229bc77e49999767f248f8bb48b6", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/4959cba3e515229bc77e49999767f248f8bb48b6", "committedDate": "2020-05-06T22:20:41Z", "message": "update qrcodeutilstest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba", "committedDate": "2020-05-06T23:36:38Z", "message": "comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTQxMDIx", "url": "https://github.com/getodk/collect/pull/3743#pullrequestreview-408141021", "createdAt": "2020-05-08T10:15:09Z", "commit": {"oid": "4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxNTowOVrOGSgshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxNTowOVrOGSgshA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MzIzNg==", "bodyText": "We've found recently that we could run into ordering problems with rules so it'd be best if this rule was also part of the RuleChain below. Just remove the @Rule and add around(rule) to the end of the chain.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r422063236", "createdAt": "2020-05-08T10:15:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+\n+import com.google.zxing.WriterException;\n+\n+import androidx.core.content.FileProvider;\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.Intents;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.utilities.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.BundleMatchers.hasEntry;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasExtraWithKey;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasExtras;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ConfigureWithQRCodeTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private static final int CHECKER_BACKGROUND_DRAWABLE_ID = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "644f35700483225ac5a116f29cf95c0dc181f1d7", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/644f35700483225ac5a116f29cf95c0dc181f1d7", "committedDate": "2020-05-08T23:37:16Z", "message": "rule fixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee35d8a4efe3aade182667d480fcda3ec5a71bf4", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/ee35d8a4efe3aade182667d480fcda3ec5a71bf4", "committedDate": "2020-05-08T23:45:11Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fb6b6dd77c0f1ff701b8ba7d1669cd439c8e806", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/9fb6b6dd77c0f1ff701b8ba7d1669cd439c8e806", "committedDate": "2020-05-08T23:48:19Z", "message": "fix RuleChain"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee53a505c3251ab4df70a05f6400686cb10527c4", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/ee53a505c3251ab4df70a05f6400686cb10527c4", "committedDate": "2020-05-08T23:57:18Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b267f6532fe59179001b6814cc1e54cf30d16533", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/b267f6532fe59179001b6814cc1e54cf30d16533", "committedDate": "2020-05-09T00:13:28Z", "message": "remove @rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65e9dff0d25aa249d8dac5652ac33207081c149a", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/65e9dff0d25aa249d8dac5652ac33207081c149a", "committedDate": "2020-05-11T17:53:09Z", "message": "dark color qr code tabs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1810f6cf392e39e3313604e6c15a9cf1a78cb250", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/1810f6cf392e39e3313604e6c15a9cf1a78cb250", "committedDate": "2020-05-11T18:14:59Z", "message": "continuous qr code + handle import qrcode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5318fc1594bf597661d8af6a6e40df4038b0f01b", "author": {"user": {"login": "hypercubestart", "name": "Andrew Liu"}}, "url": "https://github.com/getodk/collect/commit/5318fc1594bf597661d8af6a6e40df4038b0f01b", "committedDate": "2020-05-12T18:00:33Z", "message": "fix typo"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2747, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}