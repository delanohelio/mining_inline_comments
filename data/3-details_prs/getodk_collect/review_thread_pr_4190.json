{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNDc2ODky", "number": 4190, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNTowOFrOE0vjOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0ODozMlrOE3bQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQwNDcyOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderViewModel.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNTowOFrOHsocKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNTowOFrOHsocKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MTk2Mw==", "bodyText": "The thinking here is that collect_app doesn't need to know how to construct AudioRecorderViewModel. It also means we can mock/fake safely in collect_app (which we want to do) without needing to deal with the real constructor or method implementations.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516561963", "createdAt": "2020-11-03T10:25:08Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderViewModel.kt", "diffHunk": "@@ -1,46 +1,14 @@\n package org.odk.collect.audiorecorder.recording\n \n-import android.app.Application\n-import android.content.Intent\n import androidx.lifecycle.LiveData\n import androidx.lifecycle.ViewModel\n-import androidx.lifecycle.ViewModelProvider\n-import org.odk.collect.audiorecorder.recording.AudioRecorderService.Companion.ACTION_CANCEL\n-import org.odk.collect.audiorecorder.recording.AudioRecorderService.Companion.ACTION_START\n-import org.odk.collect.audiorecorder.recording.AudioRecorderService.Companion.ACTION_STOP\n import java.io.File\n-import javax.inject.Inject\n \n-internal class AudioRecorderViewModel(private val application: Application, private val recordingRepository: RecordingRepository) : ViewModel() {\n-\n-    val recording: LiveData<File?> = recordingRepository.getRecording()\n-\n-    fun start() {\n-        application.startService(\n-            Intent(application, AudioRecorderService::class.java).apply { action = ACTION_START }\n-        )\n-    }\n-\n-    fun stop() {\n-        application.startService(\n-            Intent(application, AudioRecorderService::class.java).apply { action = ACTION_STOP }\n-        )\n-    }\n-\n-    fun cancel() {\n-        application.startService(\n-            Intent(application, AudioRecorderService::class.java).apply { action = ACTION_CANCEL }\n-        )\n-    }\n-\n-    fun endSession() {\n-        recordingRepository.clear()\n-    }\n-\n-    class Factory @Inject constructor(private val application: Application, private val recordingRepository: RecordingRepository) : ViewModelProvider.Factory {\n-\n-        override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n-            return AudioRecorderViewModel(application, recordingRepository) as T\n-        }\n-    }\n+abstract class AudioRecorderViewModel : ViewModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQwNzgxOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RealAudioRecorderViewModel.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNTo1NFrOHsod9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNTo1NFrOHsod9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MjQyMg==", "bodyText": "Very lazy naming. Couldn't think of anything better.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516562422", "createdAt": "2020-11-03T10:25:54Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RealAudioRecorderViewModel.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.odk.collect.audiorecorder.recording.internal\n+\n+import android.app.Application\n+import android.content.Intent\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.Transformations.map\n+import org.odk.collect.audiorecorder.recording.AudioRecorderViewModel\n+import org.odk.collect.audiorecorder.recording.internal.AudioRecorderService.Companion.ACTION_CANCEL\n+import org.odk.collect.audiorecorder.recording.internal.AudioRecorderService.Companion.ACTION_START\n+import org.odk.collect.audiorecorder.recording.internal.AudioRecorderService.Companion.ACTION_STOP\n+import org.odk.collect.audiorecorder.recording.internal.AudioRecorderService.Companion.EXTRA_SESSION_ID\n+import java.io.File\n+\n+internal class RealAudioRecorderViewModel internal constructor(private val application: Application, private val recordingSession: RecordingSession) : AudioRecorderViewModel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQxMTA3OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RecordingSession.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNjo0N1rOHsof7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoyNjo0N1rOHsof7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2MjkyNg==", "bodyText": "This felt like a more apt name than Repository", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516562926", "createdAt": "2020-11-03T10:26:47Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RecordingSession.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.audiorecorder.recording.internal\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import java.io.File\n+\n+class RecordingSession {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQyNDM3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/AudioRecordingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMDowMVrOHson8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMDowMVrOHson8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NDk3OQ==", "bodyText": "Faking here is nice as we have a clearly defined boundary between the collect_app and audiorecorder and it means the test isn't exposed to any issues that could occur given we're trying to access the mic and using a service in the real implementation.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516564979", "createdAt": "2020-11-03T10:30:01Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/AudioRecordingTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.odk.collect.android.feature.formentry;\n+\n+import android.Manifest;\n+import android.app.Application;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.TestDependencies;\n+import org.odk.collect.android.support.TestRuleChain;\n+import org.odk.collect.android.support.pages.FormEndPage;\n+import org.odk.collect.android.support.pages.GeneralSettingsPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.support.pages.SaveOrIgnoreDialog;\n+import org.odk.collect.audiorecorder.recording.AudioRecorderViewModel;\n+import org.odk.collect.audiorecorder.recording.AudioRecorderViewModelFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.odk.collect.android.support.FileUtils.copyFileFromAssets;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AudioRecordingTest {\n+\n+    private final FakeAudioRecorderViewModel fakeAudioRecorderViewModel = new FakeAudioRecorderViewModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQzMzUyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/AudioRecordingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMjoyOFrOHsothw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMjoyOFrOHsothw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NjQwNw==", "bodyText": "I'd been trying to resist writing an Espresso test due to the feature being isolated within the widget but making recording work inline requires collaboration between a few different things (the widget and the activity for instance) so it started to feel too disjointed just writing tests at the component level.\nI do like where these tests have ended up however as they capture the high level navigation features without having to deal with any of the detail of audio recording or playback.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516566407", "createdAt": "2020-11-03T10:32:28Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/AudioRecordingTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.odk.collect.android.feature.formentry;\n+\n+import android.Manifest;\n+import android.app.Application;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.TestDependencies;\n+import org.odk.collect.android.support.TestRuleChain;\n+import org.odk.collect.android.support.pages.FormEndPage;\n+import org.odk.collect.android.support.pages.GeneralSettingsPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.support.pages.SaveOrIgnoreDialog;\n+import org.odk.collect.audiorecorder.recording.AudioRecorderViewModel;\n+import org.odk.collect.audiorecorder.recording.AudioRecorderViewModelFactory;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.odk.collect.android.support.FileUtils.copyFileFromAssets;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AudioRecordingTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQzODMzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormIndexAnimationHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMzo0MlrOHsoweA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozMzo0MlrOHsoweA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2NzE2MA==", "bodyText": "I think I managed to take this another step in the right direction. A lot of work to do still though!", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516567160", "createdAt": "2020-11-03T10:33:42Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormIndexAnimationHandler.java", "diffHunk": "@@ -10,6 +10,11 @@\n  */\n public class FormIndexAnimationHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzQ0NTc5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ExternalAppRecordingRequester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNTozN1rOHso1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDozNTozN1rOHso1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU2ODM1Mw==", "bodyText": "This basically. We could massively simplify AudioWidget's implementation by just speaking to this interface.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r516568353", "createdAt": "2020-11-03T10:35:37Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ExternalAppRecordingRequester.java", "diffHunk": "@@ -50,4 +52,14 @@ public void denied() {\n             }\n         });\n     }\n+\n+    @Override\n+    public void onIsRecordingChanged(Consumer<Boolean> isRecordingListener) {\n+        isRecordingListener.accept(false);\n+    }\n+\n+    @Override\n+    public void onRecordingAvailable(FormEntryPrompt prompt, Consumer<String> recordingAvailableListener) {\n+        // This could be implemented using the new Activity Result API  once it's stable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3efee1e3b98f74e1bb1d9af439d1ee66adb3ecee"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkxMDQ0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1MzoxOFrOHwq5PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1MzoxOFrOHwq5PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5NjQ3Ng==", "bodyText": "Huh. I think this might actually address https://forum.getodk.org/t/testing-form-on-central-upload-error-a-resource-already-exists/30947? That would be good. @getodk/testers could you please quickly give this a try? On master, submitting All Widgets to Central with the same image file attached twice should fail as in the forum post. I think it will succeed after this change.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r520796476", "createdAt": "2020-11-10T18:53:18Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -321,11 +322,19 @@ public void replaceAnswerFile(String questionIndex, String fileName) {\n \n     @Override\n     public String createAnswerFile(File file) {\n+        String newFileHash = FileUtils.getMd5Hash(file);\n+        String instanceDir = formController.getInstanceFile().getParent();\n+\n+        File[] answerFiles = new File(instanceDir).listFiles();\n+        for (File answerFile : answerFiles) {\n+            if (FileUtils.getMd5Hash(answerFile).equals(newFileHash)) {\n+                return answerFile.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7d55660a925814cdcb15fead33ff9d1f273f61"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDkzNzU5OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/DaggerSetup.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1ODowMVrOHwrKsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1ODowMVrOHwrKsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgwMDk0NQ==", "bodyText": "Should be Repository again.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r520800945", "createdAt": "2020-11-10T18:58:01Z", "author": {"login": "lognaturel"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/DaggerSetup.kt", "diffHunk": "@@ -66,7 +67,7 @@ internal open class AudioRecorderDependencyModule {\n \n     @Provides\n     @Singleton\n-    open fun providesRecordingRepository(): RecordingRepository {\n+    open fun providesRecordingSession(): RecordingRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f47cb1389b7af5a6c9f3733f4f9270b59ec207"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTQ2ODc3OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RecordingRepository.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyODowMVrOHwwR3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOTozODo0OFrOHxFhNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4NDcwMg==", "bodyText": "The UI doesn't actually make it possible for multiple sessions to have files associated with them, right? That would mean that more than one recording were started, then stopped, and no cleanup happened?\nAnd in fact, doesn't AudioRecorderService already ensure the file is deleted with cancel?", "url": "https://github.com/getodk/collect/pull/4190#discussion_r520884702", "createdAt": "2020-11-10T21:28:01Z", "author": {"login": "lognaturel"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RecordingRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.odk.collect.audiorecorder.recording.internal\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import java.io.File\n+\n+class RecordingRepository {\n+\n+    private val _currentSession = MutableLiveData<String?>(null)\n+    val currentSession: LiveData<String?> = _currentSession\n+\n+    private val sessions = mutableMapOf<String, MutableLiveData<File?>>()\n+\n+    fun get(sessionId: String): LiveData<File?> {\n+        return sessions.getOrPut(sessionId) { MutableLiveData(null) }\n+    }\n+\n+    fun start(sessionId: String) {\n+        _currentSession.value = sessionId\n+    }\n+\n+    fun recordingReady(recording: File) {\n+        _currentSession.value?.let {\n+            sessions.getOrPut(it) { MutableLiveData(null) }.value = recording\n+        }\n+\n+        _currentSession.value = null\n+    }\n+\n+    fun clear() {\n+        _currentSession.value = null\n+\n+        sessions.values.forEach {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f47cb1389b7af5a6c9f3733f4f9270b59ec207"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIzMjY5NQ==", "bodyText": "The UI doesn't actually make it possible for multiple sessions to have files associated with them, right?\n\nYeah that's right. InternalRecordingRequester calls cleanUp after each recording. This implementation means that we don't need to do that and could call cleanUp when exiting instead. Assuming that cleanUp was called after each recording actually made it awkward (for me) so I ended up making it a bit more general purpose but giving myself the tools for the \"optimal\" implementation on the UI/app side.\n\nAnd in fact, doesn't AudioRecorderService already ensure the file is deleted with cancel?\n\nThis only happens if cleanUp is called.", "url": "https://github.com/getodk/collect/pull/4190#discussion_r521232695", "createdAt": "2020-11-11T09:38:48Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/internal/RecordingRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.odk.collect.audiorecorder.recording.internal\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import java.io.File\n+\n+class RecordingRepository {\n+\n+    private val _currentSession = MutableLiveData<String?>(null)\n+    val currentSession: LiveData<String?> = _currentSession\n+\n+    private val sessions = mutableMapOf<String, MutableLiveData<File?>>()\n+\n+    fun get(sessionId: String): LiveData<File?> {\n+        return sessions.getOrPut(sessionId) { MutableLiveData(null) }\n+    }\n+\n+    fun start(sessionId: String) {\n+        _currentSession.value = sessionId\n+    }\n+\n+    fun recordingReady(recording: File) {\n+        _currentSession.value?.let {\n+            sessions.getOrPut(it) { MutableLiveData(null) }.value = recording\n+        }\n+\n+        _currentSession.value = null\n+    }\n+\n+    fun clear() {\n+        _currentSession.value = null\n+\n+        sessions.values.forEach {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4NDcwMg=="}, "originalCommit": {"oid": "86f47cb1389b7af5a6c9f3733f4f9270b59ec207"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTUzNzA1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/AudioRecordingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0ODozMlrOHww7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTo0ODozMlrOHww7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg5NTI1OQ==", "bodyText": ".4a -> m4a (doesn't really matter but might as well)", "url": "https://github.com/getodk/collect/pull/4190#discussion_r520895259", "createdAt": "2020-11-10T21:48:32Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/AudioRecordingTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package org.odk.collect.android.feature.formentry;\n+\n+import android.Manifest;\n+import android.app.Application;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.ViewModel;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.TestDependencies;\n+import org.odk.collect.android.support.TestRuleChain;\n+import org.odk.collect.android.support.pages.FormEndPage;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+import org.odk.collect.android.support.pages.FormHierarchyPage;\n+import org.odk.collect.android.support.pages.GeneralSettingsPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.support.pages.SaveOrIgnoreDialog;\n+import org.odk.collect.audiorecorder.recording.AudioRecorderViewModelFactory;\n+import org.odk.collect.audiorecorder.testsupport.StubAudioRecorderViewModel;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.odk.collect.android.support.FileUtils.copyFileFromAssets;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AudioRecordingTest {\n+\n+    private StubAudioRecorderViewModel stubAudioRecorderViewModel;\n+\n+    public final TestDependencies testDependencies = new TestDependencies() {\n+        @Override\n+        public AudioRecorderViewModelFactory providesAudioRecorderViewModelFactory(Application application) {\n+            return new AudioRecorderViewModelFactory(application) {\n+                @Override\n+                public <T extends ViewModel> T create(@NonNull Class<T> modelClass) {\n+                    if (stubAudioRecorderViewModel == null) {\n+                        try {\n+                            File stubRecording = File.createTempFile(\"test\", \".4a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86f47cb1389b7af5a6c9f3733f4f9270b59ec207"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3147, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}