{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTEyMzIx", "number": 4242, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxODoxNVrOE89EsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0MTowN1rOE89-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzUwNjQxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoxODoxNVrOH5YbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxMzoyNVrOH51O_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTE4NA==", "bodyText": "This should be another branch along with the search() identification. Currently that is in readItems. I vaguely remember we had some back and forth about whether readItems should be separate and maybe it was related to \"fast external itemsets.\" My preference would be to have the three branches in the constructur and not have readItems at all.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r529931184", "createdAt": "2020-11-24T22:18:15Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "diffHunk": "@@ -40,7 +44,15 @@\n \n     public ItemsWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n-        readItems();\n+        if (isFastExternalItemsetWidget()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dd1c7b16732c5bd3432461121e7b6c31c060199"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5MDgyMA==", "bodyText": "You mean three methods for different sources what would you call them especially I have a problem with those two external sources? fastExternalItemsets and just externalItemsets or what?", "url": "https://github.com/getodk/collect/pull/4242#discussion_r529990820", "createdAt": "2020-11-24T23:16:00Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "diffHunk": "@@ -40,7 +44,15 @@\n \n     public ItemsWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n-        readItems();\n+        if (isFastExternalItemsetWidget()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTE4NA=="}, "originalCommit": {"oid": "4dd1c7b16732c5bd3432461121e7b6c31c060199"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAxOTY4NQ==", "bodyText": "Yes, three branches. I think searchItems or something like that would work. I'm not too picky but it should include search. It shouldn't be externalItemsets because that really sounds like external secondary instances. That one doesn't show up here because JavaRosa handles it entirely.\nThe weird thing about search() and fast external itemsets is that they live entirely outside of the XForms spec and JavaRosa. That's why they're not supported by Enketo and lead to problems like the one you saw recently on the forum where competing instances were being generated by pyxform. Internal secondary instances, external secondary instances and static choice lists in the form body are all the same as far as Collect is concerned.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530019685", "createdAt": "2020-11-24T23:55:12Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "diffHunk": "@@ -40,7 +44,15 @@\n \n     public ItemsWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n-        readItems();\n+        if (isFastExternalItemsetWidget()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTE4NA=="}, "originalCommit": {"oid": "4dd1c7b16732c5bd3432461121e7b6c31c060199"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzMDYxNg==", "bodyText": "I'm not too picky but it should include search\n\nNow as I'm thinking about it I would rather use readFastExternalItems() and readDynamicItems() + that last one option that comes from a form file maybe readStaticItems()?\nI would rather avoid that search word because it might use search but also might use populate right it's also like search but dynamic somehow sounds better to me?", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530030616", "createdAt": "2020-11-25T00:28:00Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "diffHunk": "@@ -40,7 +44,15 @@\n \n     public ItemsWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n-        readItems();\n+        if (isFastExternalItemsetWidget()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTE4NA=="}, "originalCommit": {"oid": "4dd1c7b16732c5bd3432461121e7b6c31c060199"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0ODAzOQ==", "bodyText": "I've seen the terms \"static\" vs \"dynamic\" to contrast choice lists that are embedded in the form body of the primary instance vs. in a secondary instance. So I think that's confusing.\n\nit might use search but also might use populate\n\nCould you please describe \"populate\"? The search() appearance/function is what identifies that external data feature in form design.\nOther ideas:\n\nitemsetsCsvDatabaseItemsets vs arbitraryCsvDatabaseItemsets\ndatabaseQueryItemsets vs databaseSearchItemsets\nreadFastExternalItems vs readSearchExternalItems\nreadFastExternalItems vs readSearchPulldataItems\nreadDatabaseItemsetsItems vs readDatabaseSearchItems", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530048039", "createdAt": "2020-11-25T01:23:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "diffHunk": "@@ -40,7 +44,15 @@\n \n     public ItemsWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n-        readItems();\n+        if (isFastExternalItemsetWidget()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTE4NA=="}, "originalCommit": {"oid": "4dd1c7b16732c5bd3432461121e7b6c31c060199"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzA2OA==", "bodyText": "Could you please describe \"populate\"?\n\nsorry I meant pulldata ok readFastExternalItems vs readSearchPulldataItems seams fine.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530403068", "createdAt": "2020-11-25T14:13:25Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/ItemsWidget.java", "diffHunk": "@@ -40,7 +44,15 @@\n \n     public ItemsWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n-        readItems();\n+        if (isFastExternalItemsetWidget()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzMTE4NA=="}, "originalCommit": {"oid": "4dd1c7b16732c5bd3432461121e7b6c31c060199"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzUzNzY1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjoyMzoxMVrOH5YwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjoxODo0MFrOH68byA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ==", "bodyText": "How was this done before? It'd be ideal not to loop through all items.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r529936391", "createdAt": "2020-11-24T22:23:11Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk5NTY2MQ==", "bodyText": "We have a method in SelectOneWidget and also it was overrode in ItemsetWidget\nThe problem is that we use DATATYPE_TEXT (so different data types to read answers) in case of external itemsets probably in the future we should change it adding maybe even support for select_multiple then we won't need such checks but that's on javarosa's side.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r529995661", "createdAt": "2020-11-24T23:21:03Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMTQ5Ng==", "bodyText": "Both of the methods you linked to just return the string value. Is getSelectedItem only needed for certain appearances? The reason folks use \"fast external itemsets\" is because they're database-driven and therefore fast. I wouldn't want to add overhead for the common case which is a simple select one with no appearance.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530021496", "createdAt": "2020-11-25T00:00:43Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyMzc0OA==", "bodyText": "Oh sorry my mistake it's not how I wanted to explain it. The problem is that if we use fast external itemsets DATATYPE_TEXT is used which uses StringData but for normal selects we use CONTROL_SELECT_ONE which uses SelectOneData. So when we save a form with answers and open it it might receive StringData or SelectOneData and now we need to handle it since we use the same wights no matter what the source of items is.\nYou can notice that difference in methods I linked as well. That's why I said it would be good to use the same datatypes implementing changes in javarosa isn't that possible?", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530023748", "createdAt": "2020-11-25T00:07:25Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyNDgzMw==", "bodyText": "Ah, I think I see what you mean.\n\nThat's why I said it would be good to use the same datatypes implementing changes in javarosa isn't that possible?\n\nJavaRosa doesn't know anything at all about either \"fast external itemsets\" or search(). They're entirely client-side features. So no, not really. Maybe you could look at how the search() code ends up with CONTROL_SELECT_ONE types?", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530024833", "createdAt": "2020-11-25T00:10:56Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAyODE4Mg==", "bodyText": "The difference is that when we convert xls to xml using search() it's still select1 element in xml but select_one_external used in xls ends up as <input query=\"... and then in Collect if such <input has query we treat it as select_one question. Probably we could add such a check earlier - on javarosa's side and treat it as CONTROL_SELECT_ONE not DATATYPE_TEXT", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530028182", "createdAt": "2020-11-25T00:21:17Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAzMTIyNw==", "bodyText": "Hmm. I see, the body element types are different, that's right. I really don't want us to start leaking these weird features into JavaRosa where there's already enough going on. Could you please do a quick performance check before and after your change for 5k items? I think it should be really quick to generate in Excel but let me know if not. There already was a list of SelectChoice items generated for \"fast external itemsets\" prior to your change, right?", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530031227", "createdAt": "2020-11-25T00:29:57Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU2OTYwOA==", "bodyText": "I checked it using android 6 with a device which is not very fast and didn't notice any change in performance comparing this branch with the master branch. I used this form if you want to check it on your own:\nhttps://drive.google.com/file/d/1lXZtqhGyMJZW5BFrRyPdTcSwRgQ95wQZ/view?usp=sharing\nI selected one of the last choices filling the form on purpose to make the searching longer.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r531569608", "createdAt": "2020-11-27T12:18:40Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/SelectOneWidgetUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.utilities;\n+\n+import org.javarosa.core.model.SelectChoice;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectOneData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.javarosa.form.api.FormEntryPrompt;\n+\n+import java.util.List;\n+\n+public class SelectOneWidgetUtils {\n+\n+    private SelectOneWidgetUtils() {\n+\n+    }\n+\n+    public static Selection getSelectedItem(FormEntryPrompt prompt, List<SelectChoice> items) {\n+        IAnswerData answer = prompt.getAnswerValue();\n+        if (answer == null) {\n+            return null;\n+        } else if (answer instanceof SelectOneData) {\n+            return (Selection) answer.getValue();\n+        } else if (answer instanceof StringData) { // Fast external itemset\n+            for (SelectChoice item : items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkzNjM5MQ=="}, "originalCommit": {"oid": "6373f647aae3d7d88f8fcbb80e75c6a1df9f2024"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzY1NDI0OnYy", "diffSide": "LEFT", "path": "collect_app/src/main/java/org/odk/collect/android/fastexternalitemset/ItemsetDbAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjo0MTowN1rOH5Z67A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzoyODoxMlrOH5cyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NTU2NA==", "bodyText": "I think introducing a new package to group what you have is a great idea. I wonder whether it should be top-level, though. It could be in formentry or widgets. While here, I wonder what the itemset package and Itemset class were supposed to be for. Seems they can be removed.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r529955564", "createdAt": "2020-11-24T22:41:07Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/fastexternalitemset/ItemsetDbAdapter.java", "diffHunk": "@@ -1,11 +1,12 @@\n-package org.odk.collect.android.database;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ee028bff2cbe72fc26f65e37b61ddccd67186b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDAwMjUzNA==", "bodyText": "I added it there because we have also external package it's top-level too which contains classes responsible for reading external csv files we use to handle search/pulldata.\n\nWhile here, I wonder what the itemset package and Itemset class were supposed to be for. Seems they can be removed.\n\nYes it's unused. I added it implementing storage migration to handle migrating itemsets databases but then we decided not to do that because we can clear them just and such databases will be recreated and probably I forgot to remove it.", "url": "https://github.com/getodk/collect/pull/4242#discussion_r530002534", "createdAt": "2020-11-24T23:28:12Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/fastexternalitemset/ItemsetDbAdapter.java", "diffHunk": "@@ -1,11 +1,12 @@\n-package org.odk.collect.android.database;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NTU2NA=="}, "originalCommit": {"oid": "55ee028bff2cbe72fc26f65e37b61ddccd67186b"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3181, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}