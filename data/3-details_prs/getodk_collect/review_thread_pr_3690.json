{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODM5ODcz", "number": 3690, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1MDoyMVrODl3drA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1Nzo0NVrODmnLWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDMyNjIwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1MDoyMVrOFy_xnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoxNDozNVrOFzmahg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxODAxMg==", "bodyText": "I think we should call this resumeFormEntry seeing as that's the \"view action\" that's occuring. I'm also thinking this should only really happen for results that end the same process (like SAVED and the errors) but not for SAVING or CHANGE_REASON_REQUIRED.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389018012", "createdAt": "2020-03-06T16:50:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1821,91 +1823,97 @@ private boolean saveForm(boolean exit, boolean complete, String updatedSaveName,\n             }\n         }\n \n-        formSaveViewModel.saveForm(getIntent().getData(), complete, updatedSaveName, exit).observe(this, result -> {\n-            switch (result.getState()) {\n-                case CHANGE_REASON_REQUIRED:\n-                    ChangesReasonPromptDialogFragment dialog = ChangesReasonPromptDialogFragment.create(getFormController().getFormTitle());\n-                    DialogUtils.showIfNotShowing(dialog, getSupportFragmentManager());\n-                    break;\n+        formSaveViewModel.saveForm(getIntent().getData(), complete, updatedSaveName, exit);\n \n-                case SAVING:\n-                    autoSaved = true;\n+        return true;\n+    }\n \n-                    SaveFormProgressDialogFragment progressDialog = DialogUtils.showIfNotShowing(\n-                            new SaveFormProgressDialogFragment(),\n-                            getSupportFragmentManager()\n-                    );\n+    private void handleSaveResult(FormSaveViewModel.SaveResult result) {\n+        if (result == null) {\n+            return;\n+        }\n+        switch (result.getState()) {\n+            case CHANGE_REASON_REQUIRED:\n+                ChangesReasonPromptDialogFragment dialog = ChangesReasonPromptDialogFragment.create(getFormController().getFormTitle());\n+                DialogUtils.showIfNotShowing(dialog, getSupportFragmentManager());\n+                break;\n \n-                    if (result.getMessage() != null) {\n-                        progressDialog.setMessage(getString(R.string.please_wait) + \"\\n\\n\" + result.getMessage());\n-                    }\n+            case SAVING:\n+                autoSaved = true;\n \n-                    break;\n+                SaveFormProgressDialogFragment progressDialog = DialogUtils.showIfNotShowing(\n+                        new SaveFormProgressDialogFragment(),\n+                        getSupportFragmentManager()\n+                );\n \n-                case SAVED:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    showShortToast(R.string.data_saved_ok);\n-\n-                    if (exit) {\n-                        if (complete) {\n-                            // Request auto-send if app-wide auto-send is enabled or the form that was just\n-                            // finalized specifies that it should always be auto-sent.\n-                            String formId = getFormController().getFormDef().getMainInstance().getRoot().getAttributeValue(\"\", \"id\");\n-                            if (AutoSendWorker.formShouldBeAutoSent(formId, GeneralSharedPreferences.isAutoSendEnabled())) {\n-                                requestAutoSend();\n-                            }\n-                        }\n+                if (result.getMessage() != null) {\n+                    progressDialog.setMessage(getString(R.string.please_wait) + \"\\n\\n\" + result.getMessage());\n+                }\n+\n+                break;\n \n-                        finishAndReturnInstance();\n+            case SAVED:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                showShortToast(R.string.data_saved_ok);\n+\n+                if (result.getRequest().viewExiting()) {\n+                    if (result.getRequest().shouldFinalize()) {\n+                        // Request auto-send if app-wide auto-send is enabled or the form that was just\n+                        // finalized specifies that it should always be auto-sent.\n+                        String formId = getFormController().getFormDef().getMainInstance().getRoot().getAttributeValue(\"\", \"id\");\n+                        if (AutoSendWorker.formShouldBeAutoSent(formId, GeneralSharedPreferences.isAutoSendEnabled())) {\n+                            requestAutoSend();\n+                        }\n                     }\n \n-                    break;\n+                    finishAndReturnInstance();\n+                }\n \n-                case SAVE_ERROR:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    String message;\n+                break;\n \n-                    if (result.getMessage() != null) {\n-                        message = getString(R.string.data_saved_error) + \" \"\n-                                + result.getMessage();\n-                    } else {\n-                        message = getString(R.string.data_saved_error);\n-                    }\n+            case SAVE_ERROR:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                String message;\n \n-                    showLongToast(message);\n-                    break;\n+                if (result.getMessage() != null) {\n+                    message = getString(R.string.data_saved_error) + \" \"\n+                            + result.getMessage();\n+                } else {\n+                    message = getString(R.string.data_saved_error);\n+                }\n \n-                case FINALIZE_ERROR:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    showLongToast(String.format(getString(R.string.encryption_error_message),\n-                            result.getMessage()));\n-                    finishAndReturnInstance();\n-                    break;\n+                showLongToast(message);\n+                break;\n \n-                case CONSTRAINT_ERROR: {\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    refreshCurrentView();\n+            case FINALIZE_ERROR:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                showLongToast(String.format(getString(R.string.encryption_error_message),\n+                        result.getMessage()));\n+                finishAndReturnInstance();\n+                break;\n \n-                    // get constraint behavior preference value with appropriate default\n-                    String constraintBehavior = (String) GeneralSharedPreferences.getInstance()\n-                            .get(GeneralKeys.KEY_CONSTRAINT_BEHAVIOR);\n+            case CONSTRAINT_ERROR: {\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                refreshCurrentView();\n \n-                    // an answer constraint was violated, so we need to display the proper toast(s)\n-                    // if constraint behavior is on_swipe, this will happen if we do a 'swipe' to the\n-                    // next question\n-                    if (constraintBehavior.equals(GeneralKeys.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {\n-                        next();\n-                    } else {\n-                        // otherwise, we can get the proper toast(s) by saving with constraint check\n-                        saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);\n-                    }\n+                // get constraint behavior preference value with appropriate default\n+                String constraintBehavior = (String) GeneralSharedPreferences.getInstance()\n+                        .get(GeneralKeys.KEY_CONSTRAINT_BEHAVIOR);\n \n-                    break;\n+                // an answer constraint was violated, so we need to display the proper toast(s)\n+                // if constraint behavior is on_swipe, this will happen if we do a 'swipe' to the\n+                // next question\n+                if (constraintBehavior.equals(GeneralKeys.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {\n+                    next();\n+                } else {\n+                    // otherwise, we can get the proper toast(s) by saving with constraint check\n+                    saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);\n                 }\n-            }\n-        });\n \n-        return true;\n+                break;\n+            }\n+        }\n+        formSaveViewModel.consumeSavedResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151d73a3e5e03546b74a39e083e0248b785c738c"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MTA3OA==", "bodyText": "Right, fixed.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389651078", "createdAt": "2020-03-09T13:14:35Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1821,91 +1823,97 @@ private boolean saveForm(boolean exit, boolean complete, String updatedSaveName,\n             }\n         }\n \n-        formSaveViewModel.saveForm(getIntent().getData(), complete, updatedSaveName, exit).observe(this, result -> {\n-            switch (result.getState()) {\n-                case CHANGE_REASON_REQUIRED:\n-                    ChangesReasonPromptDialogFragment dialog = ChangesReasonPromptDialogFragment.create(getFormController().getFormTitle());\n-                    DialogUtils.showIfNotShowing(dialog, getSupportFragmentManager());\n-                    break;\n+        formSaveViewModel.saveForm(getIntent().getData(), complete, updatedSaveName, exit);\n \n-                case SAVING:\n-                    autoSaved = true;\n+        return true;\n+    }\n \n-                    SaveFormProgressDialogFragment progressDialog = DialogUtils.showIfNotShowing(\n-                            new SaveFormProgressDialogFragment(),\n-                            getSupportFragmentManager()\n-                    );\n+    private void handleSaveResult(FormSaveViewModel.SaveResult result) {\n+        if (result == null) {\n+            return;\n+        }\n+        switch (result.getState()) {\n+            case CHANGE_REASON_REQUIRED:\n+                ChangesReasonPromptDialogFragment dialog = ChangesReasonPromptDialogFragment.create(getFormController().getFormTitle());\n+                DialogUtils.showIfNotShowing(dialog, getSupportFragmentManager());\n+                break;\n \n-                    if (result.getMessage() != null) {\n-                        progressDialog.setMessage(getString(R.string.please_wait) + \"\\n\\n\" + result.getMessage());\n-                    }\n+            case SAVING:\n+                autoSaved = true;\n \n-                    break;\n+                SaveFormProgressDialogFragment progressDialog = DialogUtils.showIfNotShowing(\n+                        new SaveFormProgressDialogFragment(),\n+                        getSupportFragmentManager()\n+                );\n \n-                case SAVED:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    showShortToast(R.string.data_saved_ok);\n-\n-                    if (exit) {\n-                        if (complete) {\n-                            // Request auto-send if app-wide auto-send is enabled or the form that was just\n-                            // finalized specifies that it should always be auto-sent.\n-                            String formId = getFormController().getFormDef().getMainInstance().getRoot().getAttributeValue(\"\", \"id\");\n-                            if (AutoSendWorker.formShouldBeAutoSent(formId, GeneralSharedPreferences.isAutoSendEnabled())) {\n-                                requestAutoSend();\n-                            }\n-                        }\n+                if (result.getMessage() != null) {\n+                    progressDialog.setMessage(getString(R.string.please_wait) + \"\\n\\n\" + result.getMessage());\n+                }\n+\n+                break;\n \n-                        finishAndReturnInstance();\n+            case SAVED:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                showShortToast(R.string.data_saved_ok);\n+\n+                if (result.getRequest().viewExiting()) {\n+                    if (result.getRequest().shouldFinalize()) {\n+                        // Request auto-send if app-wide auto-send is enabled or the form that was just\n+                        // finalized specifies that it should always be auto-sent.\n+                        String formId = getFormController().getFormDef().getMainInstance().getRoot().getAttributeValue(\"\", \"id\");\n+                        if (AutoSendWorker.formShouldBeAutoSent(formId, GeneralSharedPreferences.isAutoSendEnabled())) {\n+                            requestAutoSend();\n+                        }\n                     }\n \n-                    break;\n+                    finishAndReturnInstance();\n+                }\n \n-                case SAVE_ERROR:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    String message;\n+                break;\n \n-                    if (result.getMessage() != null) {\n-                        message = getString(R.string.data_saved_error) + \" \"\n-                                + result.getMessage();\n-                    } else {\n-                        message = getString(R.string.data_saved_error);\n-                    }\n+            case SAVE_ERROR:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                String message;\n \n-                    showLongToast(message);\n-                    break;\n+                if (result.getMessage() != null) {\n+                    message = getString(R.string.data_saved_error) + \" \"\n+                            + result.getMessage();\n+                } else {\n+                    message = getString(R.string.data_saved_error);\n+                }\n \n-                case FINALIZE_ERROR:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    showLongToast(String.format(getString(R.string.encryption_error_message),\n-                            result.getMessage()));\n-                    finishAndReturnInstance();\n-                    break;\n+                showLongToast(message);\n+                break;\n \n-                case CONSTRAINT_ERROR: {\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    refreshCurrentView();\n+            case FINALIZE_ERROR:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                showLongToast(String.format(getString(R.string.encryption_error_message),\n+                        result.getMessage()));\n+                finishAndReturnInstance();\n+                break;\n \n-                    // get constraint behavior preference value with appropriate default\n-                    String constraintBehavior = (String) GeneralSharedPreferences.getInstance()\n-                            .get(GeneralKeys.KEY_CONSTRAINT_BEHAVIOR);\n+            case CONSTRAINT_ERROR: {\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                refreshCurrentView();\n \n-                    // an answer constraint was violated, so we need to display the proper toast(s)\n-                    // if constraint behavior is on_swipe, this will happen if we do a 'swipe' to the\n-                    // next question\n-                    if (constraintBehavior.equals(GeneralKeys.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {\n-                        next();\n-                    } else {\n-                        // otherwise, we can get the proper toast(s) by saving with constraint check\n-                        saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);\n-                    }\n+                // get constraint behavior preference value with appropriate default\n+                String constraintBehavior = (String) GeneralSharedPreferences.getInstance()\n+                        .get(GeneralKeys.KEY_CONSTRAINT_BEHAVIOR);\n \n-                    break;\n+                // an answer constraint was violated, so we need to display the proper toast(s)\n+                // if constraint behavior is on_swipe, this will happen if we do a 'swipe' to the\n+                // next question\n+                if (constraintBehavior.equals(GeneralKeys.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {\n+                    next();\n+                } else {\n+                    // otherwise, we can get the proper toast(s) by saving with constraint check\n+                    saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);\n                 }\n-            }\n-        });\n \n-        return true;\n+                break;\n+            }\n+        }\n+        formSaveViewModel.consumeSavedResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxODAxMg=="}, "originalCommit": {"oid": "151d73a3e5e03546b74a39e083e0248b785c738c"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDYwMTMyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/audit/TrackChangesReasonTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzowMjozNlrOFzmDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo0NjoyN1rOF0HraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NTE5NA==", "bodyText": "I think this should be closeSoftkeyboard() instead just so we are checking the full \"rotated\" flow.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389645194", "createdAt": "2020-03-09T13:02:36Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/audit/TrackChangesReasonTest.java", "diffHunk": "@@ -123,7 +123,9 @@ public void openingAFormToEdit_andChangingAValue_andClickingSaveAndExit_andRotat\n                 .clickSaveAndExitWithChangesReasonPrompt()\n                 .enterReason(\"Something\")\n                 .rotateToLandscape(new ChangesReasonPromptPage(\"Track Changes Reason\", rule))\n-                .assertText(\"Something\");\n+                .assertText(\"Something\")\n+                .rotateToPortrait(new ChangesReasonPromptPage(\"Track Changes Reason\", rule))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjA3Mw==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390196073", "createdAt": "2020-03-10T09:46:27Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/audit/TrackChangesReasonTest.java", "diffHunk": "@@ -123,7 +123,9 @@ public void openingAFormToEdit_andChangingAValue_andClickingSaveAndExit_andRotat\n                 .clickSaveAndExitWithChangesReasonPrompt()\n                 .enterReason(\"Something\")\n                 .rotateToLandscape(new ChangesReasonPromptPage(\"Track Changes Reason\", rule))\n-                .assertText(\"Something\");\n+                .assertText(\"Something\")\n+                .rotateToPortrait(new ChangesReasonPromptPage(\"Track Changes Reason\", rule))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NTE5NA=="}, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDYxOTAyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzowODoyNFrOFzmOOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo0Njo1N1rOF0HsoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NzkzMQ==", "bodyText": "I don't know if this makes sense anymore? Maybe it's best just to return when we're already saving rather than setting the result to ALREADY_SAVING just seems a little weird for the same SaveResult LiveData to go from the SAVING to ALREADY_SAVING state.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389647931", "createdAt": "2020-03-09T13:08:24Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n         assertThat(saveResult2, not(equalTo(saveResult1)));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjM4NQ==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390196385", "createdAt": "2020-03-10T09:46:57Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n         assertThat(saveResult2, not(equalTo(saveResult1)));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NzkzMQ=="}, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDYzMTgyOnYy", "diffSide": "LEFT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoxMjoxN1rOFzmV6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo0NjozNlrOF0Hryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0OTg5Nw==", "bodyText": "Yeah I think this test also needs to change as the LiveData will be the same between calls. Should just be that saveForm_returnsSaveResult_inSavingState and it only needs to make one call to save.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389649897", "createdAt": "2020-03-09T13:12:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjE3MA==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390196170", "createdAt": "2020-03-10T09:46:36Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0OTg5Nw=="}, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDYzNzAwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoxMzo1MFrOFzmY_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo0Njo0OVrOF0HsUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MDY4Nw==", "bodyText": "I think having the saveResult declarations before the call to save would be good because it ensures that the same LiveData instance is being used before/after the call. This mimics how you would use the ViewModel where you make an observation before you call an action.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389650687", "createdAt": "2020-03-09T13:13:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n         assertThat(saveResult2, not(equalTo(saveResult1)));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.getSavedResult();\n         assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.getSavedResult();\n         assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+\n         assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n \n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n         assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n     }\n \n     @Test\n     public void saveForm_whenReasonRequiredToSave_returnsSaveResult_inChangeReasonRequiredState() {\n         whenReasonRequiredToSave();\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.getSavedResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjMwNA==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390196304", "createdAt": "2020-03-10T09:46:49Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n         assertThat(saveResult2, not(equalTo(saveResult1)));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.getSavedResult();\n         assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.getSavedResult();\n         assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+\n         assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n \n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n         assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n     }\n \n     @Test\n     public void saveForm_whenReasonRequiredToSave_returnsSaveResult_inChangeReasonRequiredState() {\n         whenReasonRequiredToSave();\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.getSavedResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MDY4Nw=="}, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDY1NDgxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoxOTowNVrOFzmj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo0Njo0MlrOF0HsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzQ3OA==", "bodyText": "In my head this needs to be saveResult.setValue(null) instead. Otherwise saving multiple times won't work for observations made in onCreate of an Activity/Fragment as they'll be observing a different LiveData value. Maybe I'm reading this wrong!\nWe can verify with a test for the ViewModel:\n@Test\npublic void resumeFormEntry_clearsSaveResult() {\n    LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.getSavedResult();\n    viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n    viewModel.resumeFormEntry();\n    assertThat(saveResult.getValue(), equalTo(null));\n}", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389653478", "createdAt": "2020-03-09T13:19:05Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -181,6 +179,14 @@ private void handleTaskResult(SaveToDiskResult taskResult, SaveRequest saveReque\n         }\n     }\n \n+    public LiveData<SaveResult> getSavedResult() {\n+        return saveResult;\n+    }\n+\n+    public void resumeFormEntry() {\n+        saveResult = new MutableLiveData<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NjIzOA==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390196238", "createdAt": "2020-03-10T09:46:42Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -181,6 +179,14 @@ private void handleTaskResult(SaveToDiskResult taskResult, SaveRequest saveReque\n         }\n     }\n \n+    public LiveData<SaveResult> getSavedResult() {\n+        return saveResult;\n+    }\n+\n+    public void resumeFormEntry() {\n+        saveResult = new MutableLiveData<>(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzQ3OA=="}, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODEzODU2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1NjoyNVrOF0IDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0MToyNlrOF0Jjjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMjE2NA==", "bodyText": "Sorry I don't think what I meant was clear here: I think we should get rid of the ALREADY_SAVING state entirely. It's unlikely that it would happen but if it did and then the user rotated the LiveData would be in the ALREADY_SAVING state rather than SAVING when the observation is setup again.\nI think we can just return in saveForm if a save is in progress.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390202164", "createdAt": "2020-03-10T09:56:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -67,39 +66,36 @@ public void setup() {\n     }\n \n     @Test\n-    public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult2, not(equalTo(saveResult1)));\n+    public void saveForm_returnsSaveResult_inSavingState() {\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n-        assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult2.getState(), equalTo(ALREADY_SAVING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxODQ0Ng==", "bodyText": "So you mean to remove the last three lines at all? Then the test would be equal to the one above.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390218446", "createdAt": "2020-03-10T10:25:56Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -67,39 +66,36 @@ public void setup() {\n     }\n \n     @Test\n-    public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult2, not(equalTo(saveResult1)));\n+    public void saveForm_returnsSaveResult_inSavingState() {\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n-        assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult2.getState(), equalTo(ALREADY_SAVING));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMjE2NA=="}, "originalCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNjgzMA==", "bodyText": "Yeah I don't think we need this test because my feeling is that we should remove the line that this drives out in FormSaveViewModel (saveResult.setValue(new SaveResult(SaveResult.State.ALREADY_SAVING, null))). Really we should change it so that the test checks we don't call formSaver#save again - thinking about it the original test should really have had that check as well.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390226830", "createdAt": "2020-03-10T10:41:26Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -67,39 +66,36 @@ public void setup() {\n     }\n \n     @Test\n-    public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult2, not(equalTo(saveResult1)));\n+    public void saveForm_returnsSaveResult_inSavingState() {\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n-        assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult2.getState(), equalTo(ALREADY_SAVING));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMjE2NA=="}, "originalCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODE0MzYwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1Nzo0NVrOF0IGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1Nzo0NVrOF0IGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMjk1Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390202957", "createdAt": "2020-03-10T09:57:45Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -344,6 +346,14 @@ public void saveReason_whenReasonIsNotValid_returnsFalse() {\n         assertThat(viewModel.saveReason(), equalTo(false));\n     }\n \n+    @Test\n+    public void resumeFormEntry_clearsSaveResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3510, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}