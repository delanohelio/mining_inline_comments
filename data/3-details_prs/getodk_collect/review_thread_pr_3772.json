{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTQ0NDQ1", "number": 3772, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozNDo1MFrOEBuVNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0MTowNVrOEBud6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQzMTI2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/location/client/LocationClientProviderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozNDo1MFrOGdvgrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNToxMDo1N1rOGe2CQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MDMwMw==", "bodyText": "I agree about not pulling in Play Services shadows. One potentially simple way to make this test a little nicer would be to pass a GoogleAPIClientLocationProvider interface to LocationClientProvider in someway so it could be mocked/faked and not actually call the play services code. That would also let us write tests for GoogleFusedLocationProvider without any extra Robolectric stuff.\nSo many interfaces though! It's frustrating not having any way to express lambdas in method signatures. #3886 adds a poly fill for Java 8's Supplier  (we could be using it as a general \"provider\" interface) which could make this all a bit simpler. You could think about introducing that here?", "url": "https://github.com/getodk/collect/pull/3772#discussion_r433840303", "createdAt": "2020-06-02T12:34:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/location/client/LocationClientProviderTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (C) 2020 Nafundi\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.location.client;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.odk.collect.android.utilities.PlayServicesChecker;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class LocationClientProviderTest {\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    @Mock\n+    public Context context;\n+\n+    @Mock\n+    public PlayServicesChecker playServicesChecker;\n+\n+    @Test\n+    public void fusedLocationClient_returnedWhenPlayServicesAvailable() {\n+        when(playServicesChecker.isGooglePlayServicesAvailable(any())).thenReturn(true);\n+\n+        // Could import Robolectric Shadows Play Services to actually build a GoogleFusedLocationClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e09948cd7efb238549a18c327da5e65bf4fbae07"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NTc3Nw==", "bodyText": "Hopefully 87439ff is roughly what you had in mind. There are so many levels of provider client client providers here it's feeling a little silly but I agree the test looks much better.", "url": "https://github.com/getodk/collect/pull/3772#discussion_r434995777", "createdAt": "2020-06-04T05:10:57Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/location/client/LocationClientProviderTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (C) 2020 Nafundi\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.location.client;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.odk.collect.android.utilities.PlayServicesChecker;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class LocationClientProviderTest {\n+    @Rule\n+    public MockitoRule rule = MockitoJUnit.rule();\n+\n+    @Mock\n+    public Context context;\n+\n+    @Mock\n+    public PlayServicesChecker playServicesChecker;\n+\n+    @Test\n+    public void fusedLocationClient_returnedWhenPlayServicesAvailable() {\n+        when(playServicesChecker.isGooglePlayServicesAvailable(any())).thenReturn(true);\n+\n+        // Could import Robolectric Shadows Play Services to actually build a GoogleFusedLocationClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MDMwMw=="}, "originalCommit": {"oid": "e09948cd7efb238549a18c327da5e65bf4fbae07"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQ1MzU1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/location/client/GoogleFusedLocationClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo0MTowNVrOGdvuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNTowODo0MFrOGe2AEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MzkxMg==", "bodyText": "Might be easier to use Mockito for this listener verification?", "url": "https://github.com/getodk/collect/pull/3772#discussion_r433843912", "createdAt": "2020-06-02T12:41:05Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/location/client/GoogleFusedLocationClientTest.java", "diffHunk": "@@ -74,30 +76,29 @@ public void startShouldCallLocationClientOnConnected() {\n     }\n \n     @Test\n-    public void stopShouldDisconnectFromGoogleApiIfConnected() {\n-\n+    public void stopShouldDisconnectFromGoogleApiIfConnected_andAlwaysCallOnClientStopIfListenerSet() {\n         TestClientListener testClientListener = new TestClientListener();\n         client.setListener(testClientListener);\n \n-        // Call through to ApiClient.disconnect(), but don't do anything:\n+        // Previously connected, disconnection succeeds\n         when(googleApiClient.isConnected()).thenReturn(true);\n         client.stop();\n+        verify(googleApiClient).disconnect();\n+        assertThat(testClientListener.getOnClientStopCount(), is(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "347112f1f93425ae4905f33409e932512031fdd7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5NTIxNw==", "bodyText": "Agreed and done. I made all the tests in that class consistent. I didn't touch AndroidLocationClientTest which still uses TestClientListener.", "url": "https://github.com/getodk/collect/pull/3772#discussion_r434995217", "createdAt": "2020-06-04T05:08:40Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/location/client/GoogleFusedLocationClientTest.java", "diffHunk": "@@ -74,30 +76,29 @@ public void startShouldCallLocationClientOnConnected() {\n     }\n \n     @Test\n-    public void stopShouldDisconnectFromGoogleApiIfConnected() {\n-\n+    public void stopShouldDisconnectFromGoogleApiIfConnected_andAlwaysCallOnClientStopIfListenerSet() {\n         TestClientListener testClientListener = new TestClientListener();\n         client.setListener(testClientListener);\n \n-        // Call through to ApiClient.disconnect(), but don't do anything:\n+        // Previously connected, disconnection succeeds\n         when(googleApiClient.isConnected()).thenReturn(true);\n         client.stop();\n+        verify(googleApiClient).disconnect();\n+        assertThat(testClientListener.getOnClientStopCount(), is(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MzkxMg=="}, "originalCommit": {"oid": "347112f1f93425ae4905f33409e932512031fdd7"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3312, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}