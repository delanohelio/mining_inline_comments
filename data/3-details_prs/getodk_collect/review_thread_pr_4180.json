{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NDA4NjQw", "number": 4180, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoxNzozMVrOEw2B1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDoyOToyMVrOEzh4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NjUyMzA5OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/AndroidManifest.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjoxNzozMVrOHmpsXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyNDozNFrOHrUBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MTAzOQ==", "bodyText": "This is only required on Android 28+ as far as I know.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r510291039", "createdAt": "2020-10-22T16:17:31Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/AndroidManifest.xml", "diffHunk": "@@ -2,12 +2,17 @@\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     package=\"org.odk.collect.audiorecorder\">\n \n+    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f962b92dca09c82d45540b7f4f01ba0ceeea4ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU1MzIyOA==", "bodyText": "Looks like it's based on the targetSdk version.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r514553228", "createdAt": "2020-10-29T20:41:15Z", "author": {"login": "lognaturel"}, "path": "audiorecorder/src/main/AndroidManifest.xml", "diffHunk": "@@ -2,12 +2,17 @@\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     package=\"org.odk.collect.audiorecorder\">\n \n+    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MTAzOQ=="}, "originalCommit": {"oid": "3f962b92dca09c82d45540b7f4f01ba0ceeea4ae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3ODk0MA==", "bodyText": "Ah right I always get confused about minimum API levels and when target changes the behaviour.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515178940", "createdAt": "2020-10-30T15:24:34Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/AndroidManifest.xml", "diffHunk": "@@ -2,12 +2,17 @@\n <manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n     package=\"org.odk.collect.audiorecorder\">\n \n+    <uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI5MTAzOQ=="}, "originalCommit": {"oid": "3f962b92dca09c82d45540b7f4f01ba0ceeea4ae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTU5NTkxOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/test/resources/robolectric.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1NTozMVrOHnHCww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1NTozMVrOHnHCww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3MTkwNw==", "bodyText": "This was the magic I needed to get Dagger setup properly for tests. I'd completely forgotten robolectric could be configured in a properties file.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r510771907", "createdAt": "2020-10-23T09:55:31Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/test/resources/robolectric.properties", "diffHunk": "@@ -0,0 +1 @@\n+application=org.odk.collect.audiorecorder.TestApplication", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9bfcc4824428dcd5a8908d04015f59f66496978"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTYwMDQ2OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderViewModel.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1Njo0M1rOHnHFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1Njo0M1rOHnHFkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3MjYyNA==", "bodyText": "I'm not 100% sure about the ViewModel being responsible for the service like this but it feels good to hide that there is a Service involved from the UI.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r510772624", "createdAt": "2020-10-23T09:56:43Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderViewModel.kt", "diffHunk": "@@ -1,29 +1,46 @@\n package org.odk.collect.audiorecorder.recording\n \n+import android.app.Application\n+import android.content.Intent\n+import androidx.lifecycle.LiveData\n import androidx.lifecycle.ViewModel\n import androidx.lifecycle.ViewModelProvider\n-import org.odk.collect.audiorecorder.recorder.Recorder\n+import org.odk.collect.audiorecorder.recording.AudioRecorderService.Companion.ACTION_CANCEL\n+import org.odk.collect.audiorecorder.recording.AudioRecorderService.Companion.ACTION_START\n+import org.odk.collect.audiorecorder.recording.AudioRecorderService.Companion.ACTION_STOP\n import java.io.File\n import javax.inject.Inject\n \n-internal class AudioRecorderViewModel(private val recorder: Recorder) : ViewModel() {\n+internal class AudioRecorderViewModel(private val application: Application, private val recordingRepository: RecordingRepository) : ViewModel() {\n+\n+    val recording: LiveData<File?> = recordingRepository.getRecording()\n \n     fun start() {\n-        recorder.start()\n+        application.startService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9bfcc4824428dcd5a8908d04015f59f66496978"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTYwMzI1OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/RecordingRepository.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1NzozMlrOHnHHRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1NzozMlrOHnHHRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc3MzA2MA==", "bodyText": "\"Repository\" might be the right phrase but this pattern of a singleton that communicates between Services, ViewModels and UI seems pretty standard/nice.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r510773060", "createdAt": "2020-10-23T09:57:32Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/RecordingRepository.kt", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.odk.collect.audiorecorder.recording\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import java.io.File\n+\n+class RecordingRepository {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9bfcc4824428dcd5a8908d04015f59f66496978"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY3MzMyOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/test/java/org/odk/collect/audiorecorder/recording/AudioRecorderActivityTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxODowN1rOHnHx4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxODowN1rOHnHx4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4Mzk2OQ==", "bodyText": "I thought about introducing Espresso tests which mean we could just test the whole flow without having to separate the bulk of testing out between the Activity and the Service. That would become redundant if then got rid of the Activity and exposed the ViewModel as the main interface of the module though so I think for the moment I'll stick with this structure and see where we end up", "url": "https://github.com/getodk/collect/pull/4180#discussion_r510783969", "createdAt": "2020-10-23T10:18:07Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/test/java/org/odk/collect/audiorecorder/recording/AudioRecorderActivityTest.kt", "diffHunk": "@@ -15,81 +14,104 @@ import org.junit.Before\n import org.junit.Test\n import org.junit.runner.RunWith\n import org.odk.collect.audiorecorder.AudioRecorderDependencyModule\n-import org.odk.collect.audiorecorder.overrideDependencies\n+import org.odk.collect.audiorecorder.TestApplication\n import org.odk.collect.audiorecorder.recorder.Recorder\n+import org.odk.collect.audiorecorder.setupDependencies\n+import org.robolectric.Shadows.shadowOf\n import java.io.File\n \n @RunWith(AndroidJUnit4::class)\n class AudioRecorderActivityTest {\n \n     private val fakeRecorder = FakeRecorder()\n+    private val recordingRepository = RecordingRepository()\n \n     @Before\n     fun setup() {\n-        getApplicationContext<Application>().overrideDependencies(\n+        getApplicationContext<TestApplication>().setupDependencies(\n             object : AudioRecorderDependencyModule() {\n                 override fun providesRecorder(application: Application): Recorder {\n                     return fakeRecorder\n                 }\n+\n+                override fun providesRecordingRepository(): RecordingRepository {\n+                    return recordingRepository\n+                }\n             }\n         )\n     }\n \n     @Test\n-    fun launching_startsRecording() {\n-        launchActivity<AudioRecorderActivity>()\n-        assertThat(fakeRecorder.isRecording(), equalTo(true))\n+    fun launching_startsRecordingService_withStart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTY3OTkwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/application/Collect.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxOTo1MFrOHnH1yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMDoxOTo1MFrOHnH1yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc4NDk3MQ==", "bodyText": "I looked at moving the TranslationHandler to the strings module but it would have meant moving all our code that deals with the custom locale. I ended up favouring this solution where we keep the locale stuff in collect_app and just have the strings code expect to be given a locale.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r510784971", "createdAt": "2020-10-23T10:19:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/application/Collect.java", "diffHunk": "@@ -33,15 +34,18 @@\n import org.odk.collect.android.preferences.PreferencesProvider;\n import org.odk.collect.android.storage.StoragePathProvider;\n import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.strings.LocalizedApplication;\n \n import java.io.ByteArrayInputStream;\n import java.io.File;\n+import java.util.Locale;\n \n import javax.inject.Inject;\n \n import static org.odk.collect.android.preferences.MetaKeys.KEY_GOOGLE_BUG_154855417_FIXED;\n \n-public class Collect extends Application {\n+public class Collect extends Application implements LocalizedApplication {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI4NzQyOnYy", "diffSide": "RIGHT", "path": "strings/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTozNzoyMFrOHqvpRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyMjowMFrOHrT4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4Mjg1NQ==", "bodyText": "I just noticed that modules other than the main app don't get minified. What's the reason? I'm thinking about app size.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r514582855", "createdAt": "2020-10-29T21:37:20Z", "author": {"login": "lognaturel"}, "path": "strings/build.gradle", "diffHunk": "@@ -11,6 +14,15 @@ android {\n         targetSdkVersion rootProject.androidTargetSdk\n         versionCode 1\n         versionName \"1.0\"\n+\n+        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n+        consumerProguardFiles 'consumer-rules.pro'\n+    }\n+\n+    buildTypes {\n+        release {\n+            minifyEnabled false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3MzYxNg==", "bodyText": "Yeah I made these consistent in this commit: 879b9c6. Basically minification doesn't need to happen until you build an APK/App Bundle - that's where it decides what code it can remove from and then shrinks it. So, it doesn't make sense to have minification enabled or configured for library modules. Docs on this are pretty weak but here's an SO: https://stackoverflow.com/questions/50737180/proguard-on-multimodule-app", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515173616", "createdAt": "2020-10-30T15:17:28Z", "author": {"login": "seadowg"}, "path": "strings/build.gradle", "diffHunk": "@@ -11,6 +14,15 @@ android {\n         targetSdkVersion rootProject.androidTargetSdk\n         versionCode 1\n         versionName \"1.0\"\n+\n+        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n+        consumerProguardFiles 'consumer-rules.pro'\n+    }\n+\n+    buildTypes {\n+        release {\n+            minifyEnabled false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4Mjg1NQ=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3NjYzOA==", "bodyText": "Oh!", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515176638", "createdAt": "2020-10-30T15:22:00Z", "author": {"login": "lognaturel"}, "path": "strings/build.gradle", "diffHunk": "@@ -11,6 +14,15 @@ android {\n         targetSdkVersion rootProject.androidTargetSdk\n         versionCode 1\n         versionName \"1.0\"\n+\n+        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n+        consumerProguardFiles 'consumer-rules.pro'\n+    }\n+\n+    buildTypes {\n+        release {\n+            minifyEnabled false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4Mjg1NQ=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDY0NTk0OnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderService.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowOTozMlrOHqy7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowOTozMlrOHqy7NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNjU5Ng==", "bodyText": "Had to think about this one. I briefly wondered whether there might be a more general channel name that would make sense but I think this is the way to go.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r514636596", "createdAt": "2020-10-30T00:09:32Z", "author": {"login": "lognaturel"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderService.kt", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.odk.collect.audiorecorder.recording\n+\n+import android.app.NotificationChannel\n+import android.app.NotificationManager\n+import android.app.Service\n+import android.content.Intent\n+import android.os.Build\n+import android.os.IBinder\n+import androidx.core.app.NotificationCompat\n+import org.odk.collect.audiorecorder.R\n+import org.odk.collect.audiorecorder.getComponent\n+import org.odk.collect.audiorecorder.recorder.Recorder\n+import org.odk.collect.strings.getLocalizedString\n+import javax.inject.Inject\n+\n+class AudioRecorderService : Service() {\n+\n+    @Inject\n+    internal lateinit var recorder: Recorder\n+\n+    @Inject\n+    internal lateinit var recordingRepository: RecordingRepository\n+\n+    override fun onCreate() {\n+        super.onCreate()\n+        getComponent().inject(this)\n+    }\n+\n+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {\n+        when (intent?.action) {\n+            ACTION_START -> {\n+                setupNotificationChannel()\n+\n+                val notification = NotificationCompat.Builder(this, NOTIFICATION_CHANNEL)\n+                    .setContentTitle(getLocalizedString(R.string.recording))\n+                    .setSmallIcon(R.drawable.ic_baseline_mic_24)\n+                    .build()\n+\n+                startForeground(NOTIFICATION_ID, notification)\n+\n+                if (!recorder.isRecording()) {\n+                    recorder.start()\n+                }\n+            }\n+\n+            ACTION_CANCEL -> {\n+                cancelRecording()\n+            }\n+\n+            ACTION_STOP -> {\n+                stopRecording()\n+            }\n+        }\n+\n+        return START_STICKY\n+    }\n+\n+    private fun setupNotificationChannel() {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            val notificationChannel = NotificationChannel(\n+                NOTIFICATION_CHANNEL,\n+                getLocalizedString(R.string.recording_channel),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDY3OTQ4OnYy", "diffSide": "RIGHT", "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDoyOToyMVrOHqzO2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMDoxMjo0MVrOHsn-TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw==", "bodyText": "You won't be surprised to hear me say that as cool as extensions are, they make me nervous. It just feels unexpected to have modifications to Collect happening way over here. In this specific case, can the actual getLocalizedString definition go in Collect and the extension only handle the case where it doesn't exist?", "url": "https://github.com/getodk/collect/pull/4180#discussion_r514641627", "createdAt": "2020-10-30T00:29:21Z", "author": {"login": "lognaturel"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE3ODUxMw==", "bodyText": "This is extending Context, not Collect (although I just typed that wrong way round twice \ud83d\ude02). strings is a dependency of collect_app so this is just adding a helper that any Context object can use rather than modifying a concrete type we own.\nI don't know if you spotted it, but in Java you don't end up with Content#getLocalizedString(Int, Any) you get  getLocalizedString(Context, Int, Any) (so a static with the first argument as the \"receiver\"). Extensions in Kotlin are just sugar and don't modify the interface of their receivers (so they can't access private state for example). Does that all still make you nervous? My Kotlin is all coming back to me pretty fast so definitely happy to tone it down! We could just make this a static in both Kotlin and Java.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515178513", "createdAt": "2020-10-30T15:23:52Z", "author": {"login": "seadowg"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4MTYwNg==", "bodyText": "This is extending Context, not Collect\n\nCollect is the only implementation that would go through the first branch because it's the only Context that implements LocalizedApplication, right?\n\nyou get getLocalizedString(Context, Int, Any)\n\nAnd you can pass any Context in and it will \"just work\" but actually you'll only get the correct strings if you pass in a LocalizedApplication?", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515181606", "createdAt": "2020-10-30T15:28:22Z", "author": {"login": "lognaturel"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NzY4NA==", "bodyText": "Now I'm super confused. Won't the usage made in TranslationHandler not work because generally the context passed in will be a fragment or activity which will go through to the else branch?", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515187684", "createdAt": "2020-10-30T15:34:35Z", "author": {"login": "lognaturel"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE5NDIxMQ==", "bodyText": "Collect is the only implementation that would go through the first branch because it's the only Context that implements LocalizedApplication, right?\n\nRight. I originally looked at moving the TranslationHandler into strings but it ends up calling LocaleHelper which is currently pretty wrapped up in our preferences. So my thought was to separate out the logic of loading localized resources from however the preference of the locale was stored/defined.\n\nAnd you can pass any Context in and it will \"just work\" but actually you'll only get the correct strings if you pass in a LocalizedApplication?\n\nYeah. In my head the story is that strings supports lots of languages but it doesn't know if its dependents actually provide resource localization at an application level (rather than a system level). Also, it means we don't have to have our test Application objects care about provide a locale or implementing LocalizedApplication I can totally accept that I'm trying to over architect myself out of the hax that makes all this work (the messing with context to fool Android into loading different resources).", "url": "https://github.com/getodk/collect/pull/4180#discussion_r515194211", "createdAt": "2020-10-30T15:43:13Z", "author": {"login": "seadowg"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjE0MzA1MQ==", "bodyText": "Now I'm super confused. Won't the usage made in TranslationHandler not work because generally the context passed in will be a fragment or activity which will go through to the else branch?\n\nSorry just saw this. It's branching on applicationContext (from Context) so it should get the application object in those cases.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r516143051", "createdAt": "2020-11-02T17:34:06Z", "author": {"login": "seadowg"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQyOTQ2Mg==", "bodyText": "I had totally missed that. I'm not very familiar with Kotlin so may not be best positioned for some of these reviews. I thought applicationContext was just the name you were giving to the context being extended.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r516429462", "createdAt": "2020-11-03T05:03:29Z", "author": {"login": "lognaturel"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU1NDMxNw==", "bodyText": "Ah it also looks like we're not being helped by Github's syntax highlighting here. Extension functions have this as an implicit \"context\" and then Kotlin is using its property access sugar to \"sweeten\" up the call to getApplicationContext(). In IntelliJ/Android Studio it highlights as a field but Github isn't giving us that \u2639\ufe0f.", "url": "https://github.com/getodk/collect/pull/4180#discussion_r516554317", "createdAt": "2020-11-03T10:12:41Z", "author": {"login": "seadowg"}, "path": "strings/src/main/java/org/odk/collect/strings/LocalizedApplication.kt", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.strings\n+\n+import android.content.Context\n+import android.content.res.Configuration\n+import java.util.Locale\n+\n+interface LocalizedApplication {\n+\n+    val locale: Locale\n+}\n+\n+fun Context.getLocalizedString(stringId: Int, vararg formatArgs: Any): String {\n+    return when (applicationContext) {\n+        is LocalizedApplication -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTYyNw=="}, "originalCommit": {"oid": "5f5ae7f9420d54923b5c4169ae8862b938d1c87c"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3137, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}