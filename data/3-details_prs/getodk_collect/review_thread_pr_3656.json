{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTczNTM5", "number": 3656, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoyOTo1MFrODrb9GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozNjoxN1rODtvkoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODczMzY4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryMenuDelegate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMzoyOTo1MFrOF7yKcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTowOTo1MVrOF8omMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjE3OQ==", "bodyText": "This is an exceptionally bad name. I guess we just leave it for now since it's not really related to the current changes?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398232179", "createdAt": "2020-03-25T23:29:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryMenuDelegate.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.Context;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.logic.FormController;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.utilities.PlayServicesUtil;\n+\n+import static org.odk.collect.android.analytics.AnalyticsEvents.LAUNCH_FORM_WITH_BG_LOCATION;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_BACKGROUND_LOCATION;\n+\n+public class FormEntryMenuDelegate {\n+\n+    private final Context context;\n+    private final FormControllerProvider formControllerProvider;\n+\n+    public FormEntryMenuDelegate(Context context, FormControllerProvider formControllerProvider) {\n+        this.context = context;\n+        this.formControllerProvider = formControllerProvider;\n+    }\n+\n+    public void onCreate(MenuInflater menuInflater, Menu menu) {\n+        menuInflater.inflate(R.menu.form_menu, menu);\n+    }\n+\n+    public void onPrepare(Menu menu) {\n+        FormController formController = formControllerProvider.getFormController();\n+\n+        boolean useability;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51a3a903bc136087404336db3b035711986ba3d3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNDAxOQ==", "bodyText": "haha yeah", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399124019", "createdAt": "2020-03-27T09:09:51Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryMenuDelegate.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.Context;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.logic.FormController;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.utilities.PlayServicesUtil;\n+\n+import static org.odk.collect.android.analytics.AnalyticsEvents.LAUNCH_FORM_WITH_BG_LOCATION;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_BACKGROUND_LOCATION;\n+\n+public class FormEntryMenuDelegate {\n+\n+    private final Context context;\n+    private final FormControllerProvider formControllerProvider;\n+\n+    public FormEntryMenuDelegate(Context context, FormControllerProvider formControllerProvider) {\n+        this.context = context;\n+        this.formControllerProvider = formControllerProvider;\n+    }\n+\n+    public void onCreate(MenuInflater menuInflater, Menu menu) {\n+        menuInflater.inflate(R.menu.form_menu, menu);\n+    }\n+\n+    public void onPrepare(Menu menu) {\n+        FormController formController = formControllerProvider.getFormController();\n+\n+        boolean useability;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjE3OQ=="}, "originalCommit": {"oid": "51a3a903bc136087404336db3b035711986ba3d3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODc5ODMwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/FormNavigationTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDowMDoxOVrOF7yxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNDo1N1rOF8w8rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0MjA4OA==", "bodyText": "I'm ok with a javarosawrapper package but I'm not sure it belongs in formentry since FormController is also used for form discovery. Maybe the package should be top-level? Or maybe it's fine in formentry since that's the bulk of what it's for?\n@grzesiek2010?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398242088", "createdAt": "2020-03-26T00:00:19Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/FormNavigationTestCase.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n import org.odk.collect.android.listeners.FormLoaderListener;\n-import org.odk.collect.android.logic.FormController;\n+import org.odk.collect.android.formentry.javarosawrapper.FormController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99e8c59cc75a53d07f5220cdc7a0b8cfe9db44bd"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MDg0Nw==", "bodyText": "I'm happy with top level if everyone agrees?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399260847", "createdAt": "2020-03-27T13:24:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/FormNavigationTestCase.java", "diffHunk": "@@ -22,7 +22,7 @@\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n import org.odk.collect.android.listeners.FormLoaderListener;\n-import org.odk.collect.android.logic.FormController;\n+import org.odk.collect.android.formentry.javarosawrapper.FormController;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0MjA4OA=="}, "originalCommit": {"oid": "99e8c59cc75a53d07f5220cdc7a0b8cfe9db44bd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODgwODE4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formentry/javarosawrapper/FormControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDowNToyNVrOF7y3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyNTozOFrOF8w-mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0MzU5NQ==", "bodyText": "It'd be great to get a comment here saying that the implementation and tests really should move to JavaRosa.\nI really don't like that these tests are based on the toString. Maybe we can discuss alternatives when we make the move. I'm thinking we can add test-only functionality to build a FormIndex from a string representation (similar to Scenario.getRef) and do the comparison with that.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398243595", "createdAt": "2020-03-26T00:05:25Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/javarosawrapper/FormControllerTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package org.odk.collect.android.formentry.javarosawrapper;\n+\n+import com.google.common.io.Files;\n+\n+import org.javarosa.form.api.FormEntryController;\n+import org.javarosa.form.api.FormEntryModel;\n+import org.javarosa.xform.util.XFormUtils;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class FormControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc993f95014c818056c639cbdfcea254558fbae"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MTMzNg==", "bodyText": "I could create an issue instead?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399261336", "createdAt": "2020-03-27T13:25:38Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/javarosawrapper/FormControllerTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+package org.odk.collect.android.formentry.javarosawrapper;\n+\n+import com.google.common.io.Files;\n+\n+import org.javarosa.form.api.FormEntryController;\n+import org.javarosa.form.api.FormEntryModel;\n+import org.javarosa.xform.util.XFormUtils;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+public class FormControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0MzU5NQ=="}, "originalCommit": {"oid": "edc993f95014c818056c639cbdfcea254558fbae"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODg1MDk3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/javarosawrapper/FormIndexUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoyNzozMFrOF7zQPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMDoyNzozMFrOF7zQPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI1MDA0NA==", "bodyText": "While improving this comment, your -> you're and lose the last ;", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398250044", "createdAt": "2020-03-26T00:27:30Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/javarosawrapper/FormIndexUtils.java", "diffHunk": "@@ -11,7 +14,7 @@ private FormIndexUtils() {\n     }\n \n     /**\n-     * used to go up one level in the formIndex. That is, if you're at 5_0, 1 (the second question\n+     * Used to find one level up from the formIndex. That is, if you're at 5_0, 1 (the second question\n      * in a repeating group), this method will return a FormIndex of 5_0 (the start of the repeating\n      * group). If your at index 16 or 5_0, this will return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "063a5d4788a993700aea7f11a73522a7a71d988f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTQ1OTgwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/javarosawrapper/FormController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNToyMjo0N1rOF8MO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1Mjo0M1rOF9zEIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1OTMxMA==", "bodyText": "Would be better not to use toString here. Can you compare actual references?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398659310", "createdAt": "2020-03-26T15:22:47Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/javarosawrapper/FormController.java", "diffHunk": "@@ -892,6 +879,21 @@ public int jumpToIndex(FormIndex index) {\n         return formEntryController.jumpToIndex(index);\n     }\n \n+    /**\n+     * Jumps to the next prompt for a repeated instance of the group referenced by the current FormIndex.\n+     */\n+    public void jumpToNewRepeatPrompt() {\n+        FormIndex repeatGroupIndex = getRepeatGroupIndex(getFormIndex(), getFormDef());\n+        String repeatRef = repeatGroupIndex.getReference().toString(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MTYyNQ==", "bodyText": "Will give this a try", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399261625", "createdAt": "2020-03-27T13:26:10Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/javarosawrapper/FormController.java", "diffHunk": "@@ -892,6 +879,21 @@ public int jumpToIndex(FormIndex index) {\n         return formEntryController.jumpToIndex(index);\n     }\n \n+    /**\n+     * Jumps to the next prompt for a repeated instance of the group referenced by the current FormIndex.\n+     */\n+    public void jumpToNewRepeatPrompt() {\n+        FormIndex repeatGroupIndex = getRepeatGroupIndex(getFormIndex(), getFormDef());\n+        String repeatRef = repeatGroupIndex.getReference().toString(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1OTMxMA=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NDA5Ng==", "bodyText": "Hmm couldn't get it working with references but worked out a solution using depth that passed all the tests. Makes sense to me but maybe there is an edge case I haven't though of...", "url": "https://github.com/getodk/collect/pull/3656#discussion_r400344096", "createdAt": "2020-03-30T16:52:43Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/javarosawrapper/FormController.java", "diffHunk": "@@ -892,6 +879,21 @@ public int jumpToIndex(FormIndex index) {\n         return formEntryController.jumpToIndex(index);\n     }\n \n+    /**\n+     * Jumps to the next prompt for a repeated instance of the group referenced by the current FormIndex.\n+     */\n+    public void jumpToNewRepeatPrompt() {\n+        FormIndex repeatGroupIndex = getRepeatGroupIndex(getFormIndex(), getFormDef());\n+        String repeatRef = repeatGroupIndex.getReference().toString(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1OTMxMA=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjIzMDA0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODowNzoxNlrOF8T4Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoxMzozNFrOF_V5jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NDUzMA==", "bodyText": "Why lose the null check here? It shouldn't be possible for the form controller to be null here, is that why? I think it may still somehow happen and it seems better to fail by nothing happening than by crashing?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398784530", "createdAt": "2020-03-26T18:07:16Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1446,38 +1444,42 @@ private void showNextView() {\n                 return;\n             }\n \n-            formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n-\n-            switch (event) {\n-                case FormEntryController.EVENT_QUESTION:\n-                case FormEntryController.EVENT_GROUP:\n-                    // create a savepoint\n-                    nonblockingCreateSavePointData();\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_END_OF_FORM:\n-                case FormEntryController.EVENT_REPEAT:\n-                case EVENT_PROMPT_NEW_REPEAT:\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_REPEAT_JUNCTURE:\n-                    Timber.i(\"Repeat juncture: %s\", formController.getFormIndex().getReference());\n-                    // skip repeat junctures until we implement them\n-                    break;\n-                default:\n-                    Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n-                    break;\n-            }\n+            animateToNextView();\n         } catch (JavaRosaException e) {\n             Timber.d(e);\n             createErrorDialog(e.getCause().getMessage(), DO_NOT_EXIT);\n         }\n     }\n \n-    private boolean saveBeforeMovingForward(FormController formController) {\n-        if (formController != null && formController.currentPromptIsQuestion()) {\n+    private void animateToNextView() {\n+        int event = getFormController().getEvent();\n+\n+        switch (event) {\n+            case FormEntryController.EVENT_QUESTION:\n+            case FormEntryController.EVENT_GROUP:\n+                // create a savepoint\n+                nonblockingCreateSavePointData();\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_END_OF_FORM:\n+            case FormEntryController.EVENT_REPEAT:\n+            case EVENT_PROMPT_NEW_REPEAT:\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_REPEAT_JUNCTURE:\n+                Timber.i(\"Repeat juncture: %s\", getFormController().getFormIndex().getReference());\n+                // skip repeat junctures until we implement them\n+                break;\n+            default:\n+                Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n+                break;\n+        }\n+    }\n+\n+    private boolean saveBeforeNextView(FormController formController) {\n+        formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n+\n+        if (formController.currentPromptIsQuestion()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca889168166064bfc4b2eeb2abd803d776f118ec"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2Mjg1NA==", "bodyText": "Yeah I think I need to have a look through these. I really don't like that so many of these methods have to deal with the nullability though. What I might do is try and push that decision as early as I can and use @nonnull and @nullable to make sure it's clear when we have to check.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399262854", "createdAt": "2020-03-27T13:28:02Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1446,38 +1444,42 @@ private void showNextView() {\n                 return;\n             }\n \n-            formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n-\n-            switch (event) {\n-                case FormEntryController.EVENT_QUESTION:\n-                case FormEntryController.EVENT_GROUP:\n-                    // create a savepoint\n-                    nonblockingCreateSavePointData();\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_END_OF_FORM:\n-                case FormEntryController.EVENT_REPEAT:\n-                case EVENT_PROMPT_NEW_REPEAT:\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_REPEAT_JUNCTURE:\n-                    Timber.i(\"Repeat juncture: %s\", formController.getFormIndex().getReference());\n-                    // skip repeat junctures until we implement them\n-                    break;\n-                default:\n-                    Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n-                    break;\n-            }\n+            animateToNextView();\n         } catch (JavaRosaException e) {\n             Timber.d(e);\n             createErrorDialog(e.getCause().getMessage(), DO_NOT_EXIT);\n         }\n     }\n \n-    private boolean saveBeforeMovingForward(FormController formController) {\n-        if (formController != null && formController.currentPromptIsQuestion()) {\n+    private void animateToNextView() {\n+        int event = getFormController().getEvent();\n+\n+        switch (event) {\n+            case FormEntryController.EVENT_QUESTION:\n+            case FormEntryController.EVENT_GROUP:\n+                // create a savepoint\n+                nonblockingCreateSavePointData();\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_END_OF_FORM:\n+            case FormEntryController.EVENT_REPEAT:\n+            case EVENT_PROMPT_NEW_REPEAT:\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_REPEAT_JUNCTURE:\n+                Timber.i(\"Repeat juncture: %s\", getFormController().getFormIndex().getReference());\n+                // skip repeat junctures until we implement them\n+                break;\n+            default:\n+                Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n+                break;\n+        }\n+    }\n+\n+    private boolean saveBeforeNextView(FormController formController) {\n+        formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n+\n+        if (formController.currentPromptIsQuestion()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NDUzMA=="}, "originalCommit": {"oid": "ca889168166064bfc4b2eeb2abd803d776f118ec"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxOTcyMw==", "bodyText": "Yes, I agree with that general approach. Perhaps it doesn't need to be done here but then I might suggest keeping the existing null checks. It would be really ideal if after the form is expected to be loaded there was no way for the form controller to be null. Even better, as we've previously discussed, would be if the form controller could never be null and instead its functionality changed whether or not a form was active but that's further out.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399519723", "createdAt": "2020-03-27T20:24:48Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1446,38 +1444,42 @@ private void showNextView() {\n                 return;\n             }\n \n-            formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n-\n-            switch (event) {\n-                case FormEntryController.EVENT_QUESTION:\n-                case FormEntryController.EVENT_GROUP:\n-                    // create a savepoint\n-                    nonblockingCreateSavePointData();\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_END_OF_FORM:\n-                case FormEntryController.EVENT_REPEAT:\n-                case EVENT_PROMPT_NEW_REPEAT:\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_REPEAT_JUNCTURE:\n-                    Timber.i(\"Repeat juncture: %s\", formController.getFormIndex().getReference());\n-                    // skip repeat junctures until we implement them\n-                    break;\n-                default:\n-                    Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n-                    break;\n-            }\n+            animateToNextView();\n         } catch (JavaRosaException e) {\n             Timber.d(e);\n             createErrorDialog(e.getCause().getMessage(), DO_NOT_EXIT);\n         }\n     }\n \n-    private boolean saveBeforeMovingForward(FormController formController) {\n-        if (formController != null && formController.currentPromptIsQuestion()) {\n+    private void animateToNextView() {\n+        int event = getFormController().getEvent();\n+\n+        switch (event) {\n+            case FormEntryController.EVENT_QUESTION:\n+            case FormEntryController.EVENT_GROUP:\n+                // create a savepoint\n+                nonblockingCreateSavePointData();\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_END_OF_FORM:\n+            case FormEntryController.EVENT_REPEAT:\n+            case EVENT_PROMPT_NEW_REPEAT:\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_REPEAT_JUNCTURE:\n+                Timber.i(\"Repeat juncture: %s\", getFormController().getFormIndex().getReference());\n+                // skip repeat junctures until we implement them\n+                break;\n+            default:\n+                Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n+                break;\n+        }\n+    }\n+\n+    private boolean saveBeforeNextView(FormController formController) {\n+        formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n+\n+        if (formController.currentPromptIsQuestion()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NDUzMA=="}, "originalCommit": {"oid": "ca889168166064bfc4b2eeb2abd803d776f118ec"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ4ODk5NA==", "bodyText": "So for the moment I'm just going to go with the FormController being @Nullable in all the ViewModel classes that depend on it and have null check guards on all the actions. There is definitely something better on the tip of my tongue - maybe the ViewModels shouldn't be created until after the FormController is available or maybe all the ViewModels should talk to some loader/repo that gives access to the FormController as a Future. I think the right\u2122\ufe0f solution is going to need us to move \"form loading\" away from the FormEntryActivity so best to leave it right now.\nThe @Nullable annotation gives us some safety here but ideally we'd write tests for ALL the null cases. I'm very tempted to jump to Kotlin here if I'm being frank as we'd get compile checks and also much nicer sugar for dealing with the nulls here. That would definitely be a different PR but I think it's worth bringing up to get the discussion going.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r401488994", "createdAt": "2020-04-01T09:46:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1446,38 +1444,42 @@ private void showNextView() {\n                 return;\n             }\n \n-            formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n-\n-            switch (event) {\n-                case FormEntryController.EVENT_QUESTION:\n-                case FormEntryController.EVENT_GROUP:\n-                    // create a savepoint\n-                    nonblockingCreateSavePointData();\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_END_OF_FORM:\n-                case FormEntryController.EVENT_REPEAT:\n-                case EVENT_PROMPT_NEW_REPEAT:\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_REPEAT_JUNCTURE:\n-                    Timber.i(\"Repeat juncture: %s\", formController.getFormIndex().getReference());\n-                    // skip repeat junctures until we implement them\n-                    break;\n-                default:\n-                    Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n-                    break;\n-            }\n+            animateToNextView();\n         } catch (JavaRosaException e) {\n             Timber.d(e);\n             createErrorDialog(e.getCause().getMessage(), DO_NOT_EXIT);\n         }\n     }\n \n-    private boolean saveBeforeMovingForward(FormController formController) {\n-        if (formController != null && formController.currentPromptIsQuestion()) {\n+    private void animateToNextView() {\n+        int event = getFormController().getEvent();\n+\n+        switch (event) {\n+            case FormEntryController.EVENT_QUESTION:\n+            case FormEntryController.EVENT_GROUP:\n+                // create a savepoint\n+                nonblockingCreateSavePointData();\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_END_OF_FORM:\n+            case FormEntryController.EVENT_REPEAT:\n+            case EVENT_PROMPT_NEW_REPEAT:\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_REPEAT_JUNCTURE:\n+                Timber.i(\"Repeat juncture: %s\", getFormController().getFormIndex().getReference());\n+                // skip repeat junctures until we implement them\n+                break;\n+            default:\n+                Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n+                break;\n+        }\n+    }\n+\n+    private boolean saveBeforeNextView(FormController formController) {\n+        formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n+\n+        if (formController.currentPromptIsQuestion()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NDUzMA=="}, "originalCommit": {"oid": "ca889168166064bfc4b2eeb2abd803d776f118ec"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2MzQwNw==", "bodyText": "All sound good.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r401963407", "createdAt": "2020-04-01T23:13:34Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1446,38 +1444,42 @@ private void showNextView() {\n                 return;\n             }\n \n-            formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n-\n-            switch (event) {\n-                case FormEntryController.EVENT_QUESTION:\n-                case FormEntryController.EVENT_GROUP:\n-                    // create a savepoint\n-                    nonblockingCreateSavePointData();\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_END_OF_FORM:\n-                case FormEntryController.EVENT_REPEAT:\n-                case EVENT_PROMPT_NEW_REPEAT:\n-                    next = createView(event, true);\n-                    showView(next, AnimationType.RIGHT);\n-                    break;\n-                case FormEntryController.EVENT_REPEAT_JUNCTURE:\n-                    Timber.i(\"Repeat juncture: %s\", formController.getFormIndex().getReference());\n-                    // skip repeat junctures until we implement them\n-                    break;\n-                default:\n-                    Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n-                    break;\n-            }\n+            animateToNextView();\n         } catch (JavaRosaException e) {\n             Timber.d(e);\n             createErrorDialog(e.getCause().getMessage(), DO_NOT_EXIT);\n         }\n     }\n \n-    private boolean saveBeforeMovingForward(FormController formController) {\n-        if (formController != null && formController.currentPromptIsQuestion()) {\n+    private void animateToNextView() {\n+        int event = getFormController().getEvent();\n+\n+        switch (event) {\n+            case FormEntryController.EVENT_QUESTION:\n+            case FormEntryController.EVENT_GROUP:\n+                // create a savepoint\n+                nonblockingCreateSavePointData();\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_END_OF_FORM:\n+            case FormEntryController.EVENT_REPEAT:\n+            case EVENT_PROMPT_NEW_REPEAT:\n+                showView(createView(event, true), AnimationType.RIGHT);\n+                break;\n+            case FormEntryController.EVENT_REPEAT_JUNCTURE:\n+                Timber.i(\"Repeat juncture: %s\", getFormController().getFormIndex().getReference());\n+                // skip repeat junctures until we implement them\n+                break;\n+            default:\n+                Timber.w(\"JavaRosa added a new EVENT type and didn't tell us... shame on them.\");\n+                break;\n+        }\n+    }\n+\n+    private boolean saveBeforeNextView(FormController formController) {\n+        formController.getAuditEventLogger().flush();    // Close events waiting for an end time\n+\n+        if (formController.currentPromptIsQuestion()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NDUzMA=="}, "originalCommit": {"oid": "ca889168166064bfc4b2eeb2abd803d776f118ec"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjI0NTQwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoxMDowN1rOF8UB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyODo1MlrOF8xGtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NzA2MA==", "bodyText": "Why lose the null checks here?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398787060", "createdAt": "2020-03-26T18:10:07Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -50,9 +50,7 @@ public void formLoaded(FormController formController) {\n     }\n \n     public void editingForm() {\n-        if (formController.getAuditEventLogger() != null) {\n-            formController.getAuditEventLogger().setEditing(true);\n-        }\n+        formController.getAuditEventLogger().setEditing(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a938f324be9da6e90b4d1fb5e56daaf71fab8d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2MzQxNA==", "bodyText": "Same as the comment before. I don't think this method should be able to be called before the formController is set but I'll look into it.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399263414", "createdAt": "2020-03-27T13:28:52Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -50,9 +50,7 @@ public void formLoaded(FormController formController) {\n     }\n \n     public void editingForm() {\n-        if (formController.getAuditEventLogger() != null) {\n-            formController.getAuditEventLogger().setEditing(true);\n-        }\n+        formController.getAuditEventLogger().setEditing(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc4NzA2MA=="}, "originalCommit": {"oid": "c4a938f324be9da6e90b4d1fb5e56daaf71fab8d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjI2ODYzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormIndexAnimationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoxNjowNlrOF8UQ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoyOTozOVrOF8xJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MDg3OA==", "bodyText": "This is a little overly paranoid but did you do a quick check that compareTo does what you want/expect? It would be its first time being used. I just opened it and looked and it seems fine but I think it would be good for one of us to do a slightly deeper think-through.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398790878", "createdAt": "2020-03-26T18:16:06Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormIndexAnimationHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.odk.collect.android.formentry;\n+\n+import org.javarosa.core.model.FormIndex;\n+\n+public class FormIndexAnimationHandler {\n+\n+    private final Listener listener;\n+    private FormIndex lastIndex;\n+\n+    public FormIndexAnimationHandler(Listener listener) {\n+        this.listener = listener;\n+    }\n+\n+    public void handle(FormIndex index) {\n+        if (lastIndex == null) {\n+            listener.refreshCurrentView();\n+        } else {\n+            if (index.compareTo(lastIndex) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be5170564da7e498c39db694b2c421bc0c7de89f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NDAwMA==", "bodyText": "I mean it seems like it works given all the things I've thrown at it but I think we should play around with it in QA a bunch.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399264000", "createdAt": "2020-03-27T13:29:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormIndexAnimationHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.odk.collect.android.formentry;\n+\n+import org.javarosa.core.model.FormIndex;\n+\n+public class FormIndexAnimationHandler {\n+\n+    private final Listener listener;\n+    private FormIndex lastIndex;\n+\n+    public FormIndexAnimationHandler(Listener listener) {\n+        this.listener = listener;\n+    }\n+\n+    public void handle(FormIndex index) {\n+        if (lastIndex == null) {\n+            listener.refreshCurrentView();\n+        } else {\n+            if (index.compareTo(lastIndex) > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MDg3OA=="}, "originalCommit": {"oid": "be5170564da7e498c39db694b2c421bc0c7de89f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjI4NTEwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/repeats/AddRepeatDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyMDozN1rOF8Ubqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODoyMDozN1rOF8Ubqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5MzY0Mw==", "bodyText": "groupLabel?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398793643", "createdAt": "2020-03-26T18:20:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/repeats/AddRepeatDialog.java", "diffHunk": "@@ -15,21 +14,21 @@\n \n     private AddRepeatDialog() {}\n \n-    public static void show(Context context, FormController formController, Listener listener) {\n+    public static void show(Context context, String groupName, Listener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59281fa94d10da0a5e543fd530ac7c046385a7d3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjM4MzMyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/AddRepeatTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0NDo0NFrOF8VZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjoyODoxNFrOF-eIRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwOTM5Nw==", "bodyText": "How about making the form have a question before the repeat and testing that there's no button on that first question and that it appears on swipe? Or do you think the Robolectric test with mock that sets whether or not the current question is a repeat is sufficient for that?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398809397", "createdAt": "2020-03-26T18:44:44Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/AddRepeatTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.EndOfFormPage;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AddRepeatTest {\n+\n+    private static final String FORM = \"one-question-repeat.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NDkxOQ==", "bodyText": "Might see if I can get that into the FormController tests instead as I'd like to avoid setting up anything other than the simplest cases in the \"feature tests\". I'll review the coverage here for sure.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399264919", "createdAt": "2020-03-27T13:30:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/AddRepeatTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.EndOfFormPage;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AddRepeatTest {\n+\n+    private static final String FORM = \"one-question-repeat.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwOTM5Nw=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkxMzc1MA==", "bodyText": "Sorry I completely misinterpreted this when I read it on Friday. Basically you're suggesting a test for checking the options menu is setup correctly (and whether invalidateOptionsMenu is getting called in the right places). I'll review the coverage and maybe do some mutation testing to see if we're got some blind spots.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r400913750", "createdAt": "2020-03-31T13:29:20Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/AddRepeatTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.EndOfFormPage;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AddRepeatTest {\n+\n+    private static final String FORM = \"one-question-repeat.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwOTM5Nw=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0OTY2OA==", "bodyText": "Yeah after playing around with it feels like we're pretty well covered. I've realised looking at it that we had extra calls to invalidateOptionsMenu as we really should just call it every time we call showView.\nAlso looking at this made me realize it would be nice to pull out some a view (holder) that can encapsulate createView and showView as it would remove a lot of logic from FormEntryAcitivty and would let us test things like \"every time we should a view we do X\". I'll add this to the list of follow ups that I'll make issues for.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r401049668", "createdAt": "2020-03-31T16:28:14Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/AddRepeatTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.EndOfFormPage;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class AddRepeatTest {\n+\n+    private static final String FORM = \"one-question-repeat.xml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwOTM5Nw=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjM5ODU4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo0ODo0NlrOF8Vi9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMTo0OVrOF8xPBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMTg5NQ==", "bodyText": "File a good first issue?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398811895", "createdAt": "2020-03-26T18:48:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -965,72 +988,52 @@ private void saveFileAnswer(Object media) {\n      * out of sync due to dialogs and restarts caused by screen orientation\n      * changes, so they're resynchronized here.\n      */\n+    @Override\n     public void refreshCurrentView() {\n         int event = getFormController().getEvent();\n \n         View current = createView(event, false);\n         showView(current, AnimationType.FADE);\n+\n+        formIndexAnimationHandler.setLastIndex(getFormController().getFormIndex());\n     }\n \n     @Override\n     public boolean onCreateOptionsMenu(Menu menu) {\n-        getMenuInflater().inflate(R.menu.form_menu, menu);\n+        optionsMenuDelegate.onCreateOptionsMenu(getMenuInflater(), menu);\n         return super.onCreateOptionsMenu(menu);\n     }\n \n     @Override\n     public boolean onPrepareOptionsMenu(Menu menu) {\n         super.onPrepareOptionsMenu(menu);\n-\n-        boolean useability;\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_SAVE_MID);\n-\n-        menu.findItem(R.id.menu_save).setVisible(useability).setEnabled(useability);\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_JUMP_TO);\n-\n-        menu.findItem(R.id.menu_goto).setVisible(useability)\n-                .setEnabled(useability);\n-\n-        FormController formController = getFormController();\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_CHANGE_LANGUAGE)\n-                && (formController != null)\n-                && formController.getLanguages() != null\n-                && formController.getLanguages().length > 1;\n-\n-        menu.findItem(R.id.menu_languages).setVisible(useability)\n-                .setEnabled(useability);\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_ACCESS_SETTINGS);\n-\n-        menu.findItem(R.id.menu_preferences).setVisible(useability)\n-                .setEnabled(useability);\n+        optionsMenuDelegate.onPrepareOptionsMenu(menu);\n \n         if (getFormController() != null && getFormController().currentFormCollectsBackgroundLocation()\n                 && PlayServicesUtil.isGooglePlayServicesAvailable(this)) {\n-            MenuItem backgroundLocation = menu.findItem(R.id.track_location);\n-            backgroundLocation.setVisible(true);\n-            backgroundLocation.setChecked(GeneralSharedPreferences.getInstance().getBoolean(KEY_BACKGROUND_LOCATION, true));\n-\n             analytics.logEvent(LAUNCH_FORM_WITH_BG_LOCATION, getFormController().getCurrentFormIdentifierHash());\n         }\n-\n         return true;\n     }\n \n     @Override\n     public boolean onOptionsItemSelected(MenuItem item) {\n+        if (optionsMenuDelegate.onOptionsItemSelected(item)) {\n+            return true;\n+        }\n+\n+        // These actions should move into the `FormEntryMenuDelegate`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NTU0Mg==", "bodyText": "Yeah I'll follow up with issues. I put a list in the description.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399265542", "createdAt": "2020-03-27T13:31:49Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -965,72 +988,52 @@ private void saveFileAnswer(Object media) {\n      * out of sync due to dialogs and restarts caused by screen orientation\n      * changes, so they're resynchronized here.\n      */\n+    @Override\n     public void refreshCurrentView() {\n         int event = getFormController().getEvent();\n \n         View current = createView(event, false);\n         showView(current, AnimationType.FADE);\n+\n+        formIndexAnimationHandler.setLastIndex(getFormController().getFormIndex());\n     }\n \n     @Override\n     public boolean onCreateOptionsMenu(Menu menu) {\n-        getMenuInflater().inflate(R.menu.form_menu, menu);\n+        optionsMenuDelegate.onCreateOptionsMenu(getMenuInflater(), menu);\n         return super.onCreateOptionsMenu(menu);\n     }\n \n     @Override\n     public boolean onPrepareOptionsMenu(Menu menu) {\n         super.onPrepareOptionsMenu(menu);\n-\n-        boolean useability;\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_SAVE_MID);\n-\n-        menu.findItem(R.id.menu_save).setVisible(useability).setEnabled(useability);\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_JUMP_TO);\n-\n-        menu.findItem(R.id.menu_goto).setVisible(useability)\n-                .setEnabled(useability);\n-\n-        FormController formController = getFormController();\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_CHANGE_LANGUAGE)\n-                && (formController != null)\n-                && formController.getLanguages() != null\n-                && formController.getLanguages().length > 1;\n-\n-        menu.findItem(R.id.menu_languages).setVisible(useability)\n-                .setEnabled(useability);\n-\n-        useability = (boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_ACCESS_SETTINGS);\n-\n-        menu.findItem(R.id.menu_preferences).setVisible(useability)\n-                .setEnabled(useability);\n+        optionsMenuDelegate.onPrepareOptionsMenu(menu);\n \n         if (getFormController() != null && getFormController().currentFormCollectsBackgroundLocation()\n                 && PlayServicesUtil.isGooglePlayServicesAvailable(this)) {\n-            MenuItem backgroundLocation = menu.findItem(R.id.track_location);\n-            backgroundLocation.setVisible(true);\n-            backgroundLocation.setChecked(GeneralSharedPreferences.getInstance().getBoolean(KEY_BACKGROUND_LOCATION, true));\n-\n             analytics.logEvent(LAUNCH_FORM_WITH_BG_LOCATION, getFormController().getCurrentFormIdentifierHash());\n         }\n-\n         return true;\n     }\n \n     @Override\n     public boolean onOptionsItemSelected(MenuItem item) {\n+        if (optionsMenuDelegate.onOptionsItemSelected(item)) {\n+            return true;\n+        }\n+\n+        // These actions should move into the `FormEntryMenuDelegate`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxMTg5NQ=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQxNTY2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/analytics/AnalyticsEvents.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1Mjo0NlrOF8VtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1Mjo0NlrOF8VtOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNDUyMQ==", "bodyText": "How about also logging a form hash so we can differentiate between one organization training staff to use the button vs. lots of people trying it out.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398814521", "createdAt": "2020-03-26T18:52:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/analytics/AnalyticsEvents.java", "diffHunk": "@@ -1,9 +1,17 @@\n package org.odk.collect.android.analytics;\n \n public class AnalyticsEvents {\n+\n     private AnalyticsEvents() {\n+\n     }\n \n+    /**\n+     * Used to measure how popular different methods of adding repeats are. The \"action\" should\n+     * describe the way the repeat was added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQyNDkyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryMenuDelegate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1NDoyM1rOF8VzGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMjoyMVrOF8xQgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNjAyNA==", "bodyText": "You need this indirection here because the controller may not be set when this is instantiated?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398816024", "createdAt": "2020-03-26T18:54:23Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryMenuDelegate.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.Intent;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+\n+import androidx.appcompat.app.AppCompatActivity;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.backgroundlocation.BackgroundLocationViewModel;\n+import org.odk.collect.android.formentry.javarosawrapper.FormController;\n+import org.odk.collect.android.formentry.questions.AnswersProvider;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.preferences.PreferencesActivity;\n+import org.odk.collect.android.utilities.MenuDelegate;\n+import org.odk.collect.android.utilities.PlayServicesUtil;\n+\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_BACKGROUND_LOCATION;\n+\n+public class FormEntryMenuDelegate implements MenuDelegate {\n+\n+    private final AppCompatActivity context;\n+    private final FormControllerProvider formControllerProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NTkyMA==", "bodyText": "Yup!", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399265920", "createdAt": "2020-03-27T13:32:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryMenuDelegate.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.Intent;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+\n+import androidx.appcompat.app.AppCompatActivity;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.backgroundlocation.BackgroundLocationViewModel;\n+import org.odk.collect.android.formentry.javarosawrapper.FormController;\n+import org.odk.collect.android.formentry.questions.AnswersProvider;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+import org.odk.collect.android.preferences.PreferencesActivity;\n+import org.odk.collect.android.utilities.MenuDelegate;\n+import org.odk.collect.android.utilities.PlayServicesUtil;\n+\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_BACKGROUND_LOCATION;\n+\n+public class FormEntryMenuDelegate implements MenuDelegate {\n+\n+    private final AppCompatActivity context;\n+    private final FormControllerProvider formControllerProvider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNjAyNA=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MjQzMjk0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxODo1NjozOFrOF8V4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzozMzowNlrOF8xSoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzMzMQ==", "bodyText": "I see you have Robolectric tests around a repeat being a field list. Did you try it with a real form? I can't even remember what the intended behavior is. Does the current behavior make sense? How about adding a connected test with a real form for this one. It's the kind of thing that's not super common and that I think we could easily break and not notice.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r398817331", "createdAt": "2020-03-26T18:56:38Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.odk.collect.android.formentry;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.odk.collect.android.analytics.Analytics;\n+import org.odk.collect.android.exception.JavaRosaException;\n+import org.odk.collect.android.formentry.javarosawrapper.FormController;\n+\n+import static org.odk.collect.android.analytics.AnalyticsEvents.ADD_REPEAT;\n+\n+public class FormEntryViewModel extends ViewModel {\n+\n+    private FormController formController;\n+\n+    private final Analytics analytics;\n+    private final MutableLiveData<String> error = new MutableLiveData<>(null);\n+\n+    @Nullable\n+    private FormIndex jumpBackIndex;\n+\n+    public FormEntryViewModel(Analytics analytics) {\n+        this.analytics = analytics;\n+    }\n+\n+    public void formLoaded(FormController formController) {\n+        this.formController = formController;\n+    }\n+\n+    public FormIndex getCurrentIndex() {\n+        return getFormController().getFormIndex();\n+    }\n+\n+    public LiveData<String> getError() {\n+        return error;\n+    }\n+\n+    public void promptForNewRepeat() {\n+        FormIndex index = getFormController().getFormIndex();\n+        jumpBackIndex = index;\n+\n+        getFormController().jumpToNewRepeatPrompt();\n+    }\n+\n+    public void addRepeat(boolean fromPrompt) {\n+        if (jumpBackIndex != null) {\n+            jumpBackIndex = null;\n+            analytics.logEvent(ADD_REPEAT, \"Inline\");\n+        } else if (fromPrompt) {\n+            analytics.logEvent(ADD_REPEAT, \"Prompt\");\n+        } else {\n+            analytics.logEvent(ADD_REPEAT, \"Hierarchy\");\n+        }\n+\n+        getFormController().newRepeat();\n+\n+        if (!getFormController().indexIsInFieldList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI2NjQ2NA==", "bodyText": "Yeah that might be worth a connected test. Again, I'll review the coverage and see how I feel.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r399266464", "createdAt": "2020-03-27T13:33:06Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.odk.collect.android.formentry;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.javarosa.core.model.FormIndex;\n+import org.odk.collect.android.analytics.Analytics;\n+import org.odk.collect.android.exception.JavaRosaException;\n+import org.odk.collect.android.formentry.javarosawrapper.FormController;\n+\n+import static org.odk.collect.android.analytics.AnalyticsEvents.ADD_REPEAT;\n+\n+public class FormEntryViewModel extends ViewModel {\n+\n+    private FormController formController;\n+\n+    private final Analytics analytics;\n+    private final MutableLiveData<String> error = new MutableLiveData<>(null);\n+\n+    @Nullable\n+    private FormIndex jumpBackIndex;\n+\n+    public FormEntryViewModel(Analytics analytics) {\n+        this.analytics = analytics;\n+    }\n+\n+    public void formLoaded(FormController formController) {\n+        this.formController = formController;\n+    }\n+\n+    public FormIndex getCurrentIndex() {\n+        return getFormController().getFormIndex();\n+    }\n+\n+    public LiveData<String> getError() {\n+        return error;\n+    }\n+\n+    public void promptForNewRepeat() {\n+        FormIndex index = getFormController().getFormIndex();\n+        jumpBackIndex = index;\n+\n+        getFormController().jumpToNewRepeatPrompt();\n+    }\n+\n+    public void addRepeat(boolean fromPrompt) {\n+        if (jumpBackIndex != null) {\n+            jumpBackIndex = null;\n+            analytics.logEvent(ADD_REPEAT, \"Inline\");\n+        } else if (fromPrompt) {\n+            analytics.logEvent(ADD_REPEAT, \"Prompt\");\n+        } else {\n+            analytics.logEvent(ADD_REPEAT, \"Hierarchy\");\n+        }\n+\n+        getFormController().newRepeat();\n+\n+        if (!getFormController().indexIsInFieldList()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgxNzMzMQ=="}, "originalCommit": {"oid": "d7b547a592512d4ed2ed5462c35573df3ef3a58a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mjg4Nzc5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/assets/forms/field-list-repeat.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzoyMDo1NFrOF_WCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0MjoyN1rOF_hHBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NTc0Ng==", "bodyText": "A field-list with a single question is the same as a single question so I don't think this form adds anything. It also looks like field-list on a group that encloses a repeat doesn't have any effect. I'm not sure whether this is intentional or not and will need to dig deeper. This is what I had in mind:\n<?xml version=\"1.0\"?>\n<h:html xmlns=\"http://www.w3.org/2002/xforms\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" xmlns:h=\"http://www.w3.org/1999/xhtml\" xmlns:jr=\"http://openrosa.org/javarosa\" xmlns:orx=\"http://openrosa.org/xforms\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n    <h:head>\n        <h:title>Field-List Repeat</h:title>\n        <model>\n            <instance>\n                <data id=\"field_list_repeat\">\n                    <person>\n                        <name/>\n                        <age/>\n                    </person>\n                </data>\n            </instance>\n            <bind nodeset=\"/data/person/name\" type=\"int\"/>\n            <bind nodeset=\"/data/person/age\" type=\"int\"/>\n        </model>\n    </h:head>\n    <h:body>\n        <group ref=\"/data/person\">\n            <label>Person</label>\n            <repeat nodeset=\"/data/person\" appearance=\"field-list\">\n                <input ref=\"/data/person/name\">\n                    <label>Name</label>\n                </input>\n                <input ref=\"/data/person/age\">\n                    <label>What is their age?</label>\n                </input>\n            </repeat>\n        </group>\n    </h:body>\n</h:html>\nThe checks would be that the + is correctly shown and that both questions are on the same screen.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r401965746", "createdAt": "2020-04-01T23:20:54Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/assets/forms/field-list-repeat.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\"?>\n+<h:html xmlns=\"http://www.w3.org/2002/xforms\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" xmlns:h=\"http://www.w3.org/1999/xhtml\" xmlns:jr=\"http://openrosa.org/javarosa\" xmlns:orx=\"http://openrosa.org/xforms\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n+    <h:head>\n+        <h:title>Field-List Repeat</h:title>\n+        <model>\n+            <instance>\n+                <data id=\"field_list_repeat\">\n+                    <person>\n+                        <age/>\n+                    </person>\n+                </data>\n+            </instance>\n+            <bind nodeset=\"age\" type=\"int\"/>\n+        </model>\n+    </h:head>\n+    <h:body>\n+        <group ref=\"/data/person\" appearance=\"field-list\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "030446fd574e1c6b3de6233b6b060ca91271fc17"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMDc5NA==", "bodyText": "Ah right. This doesn't really feel like it has much to do with adding a repeat but more to do with just how repeats are displayed. I think it's good to have a test but I might put it in a different file.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r402130794", "createdAt": "2020-04-02T08:15:05Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/assets/forms/field-list-repeat.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\"?>\n+<h:html xmlns=\"http://www.w3.org/2002/xforms\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" xmlns:h=\"http://www.w3.org/1999/xhtml\" xmlns:jr=\"http://openrosa.org/javarosa\" xmlns:orx=\"http://openrosa.org/xforms\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n+    <h:head>\n+        <h:title>Field-List Repeat</h:title>\n+        <model>\n+            <instance>\n+                <data id=\"field_list_repeat\">\n+                    <person>\n+                        <age/>\n+                    </person>\n+                </data>\n+            </instance>\n+            <bind nodeset=\"age\" type=\"int\"/>\n+        </model>\n+    </h:head>\n+    <h:body>\n+        <group ref=\"/data/person\" appearance=\"field-list\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NTc0Ng=="}, "originalCommit": {"oid": "030446fd574e1c6b3de6233b6b060ca91271fc17"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzNjAwMQ==", "bodyText": "Scratch that. Disagree with myself. Adding repeats is basically the core of repeats are. Ignore me.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r402136001", "createdAt": "2020-04-02T08:24:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/assets/forms/field-list-repeat.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\"?>\n+<h:html xmlns=\"http://www.w3.org/2002/xforms\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" xmlns:h=\"http://www.w3.org/1999/xhtml\" xmlns:jr=\"http://openrosa.org/javarosa\" xmlns:orx=\"http://openrosa.org/xforms\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n+    <h:head>\n+        <h:title>Field-List Repeat</h:title>\n+        <model>\n+            <instance>\n+                <data id=\"field_list_repeat\">\n+                    <person>\n+                        <age/>\n+                    </person>\n+                </data>\n+            </instance>\n+            <bind nodeset=\"age\" type=\"int\"/>\n+        </model>\n+    </h:head>\n+    <h:body>\n+        <group ref=\"/data/person\" appearance=\"field-list\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NTc0Ng=="}, "originalCommit": {"oid": "030446fd574e1c6b3de6233b6b060ca91271fc17"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NzA3OQ==", "bodyText": "Oh wow it actually did need the code in FormEntryViewModel. Who'd have thunk it.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r402147079", "createdAt": "2020-04-02T08:42:27Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/assets/forms/field-list-repeat.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\"?>\n+<h:html xmlns=\"http://www.w3.org/2002/xforms\" xmlns:ev=\"http://www.w3.org/2001/xml-events\" xmlns:h=\"http://www.w3.org/1999/xhtml\" xmlns:jr=\"http://openrosa.org/javarosa\" xmlns:orx=\"http://openrosa.org/xforms\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n+    <h:head>\n+        <h:title>Field-List Repeat</h:title>\n+        <model>\n+            <instance>\n+                <data id=\"field_list_repeat\">\n+                    <person>\n+                        <age/>\n+                    </person>\n+                </data>\n+            </instance>\n+            <bind nodeset=\"age\" type=\"int\"/>\n+        </model>\n+    </h:head>\n+    <h:body>\n+        <group ref=\"/data/person\" appearance=\"field-list\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk2NTc0Ng=="}, "originalCommit": {"oid": "030446fd574e1c6b3de6233b6b060ca91271fc17"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjkxNzIwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/FormController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozNTowNFrOF_WUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozNTowNFrOF_WUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MDI4Mg==", "bodyText": "I like the use of depth here! I can really visualize how you go into a deeper part of the form within the repeat, maybe even deeper into nested repeats and then you reach the same depth at the new repeat event.", "url": "https://github.com/getodk/collect/pull/3656#discussion_r401970282", "createdAt": "2020-04-01T23:35:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/FormController.java", "diffHunk": "@@ -884,13 +884,12 @@ public int jumpToIndex(FormIndex index) {\n      */\n     public void jumpToNewRepeatPrompt() {\n         FormIndex repeatGroupIndex = getRepeatGroupIndex(getFormIndex(), getFormDef());\n-        String repeatRef = repeatGroupIndex.getReference().toString(false);\n-        String testRef = \"\";\n+        Integer depth = repeatGroupIndex.getDepth();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f80801f868b423fae5ccaf7a2c53d14a1aac81e6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjkxOTM3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMzozNjoxN1rOF_WVuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxMDoxN1rOF_f9EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MDYxOQ==", "bodyText": "Not necessary?", "url": "https://github.com/getodk/collect/pull/3656#discussion_r401970619", "createdAt": "2020-04-01T23:36:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -71,14 +71,14 @@ public void addRepeat(boolean fromPrompt) {\n     public void cancelRepeatPrompt() {\n         analytics.logEvent(ADD_REPEAT, \"InlineDecline\");\n \n-        FormController formController = getFormController();\n+        FormController formController = this.formController;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "767801ef77d0e783adeba4a4aa9cafd35113d0a5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEyODE0NQ==", "bodyText": "haha yeah. I'd imagine AS probably flagged that to me as well!", "url": "https://github.com/getodk/collect/pull/3656#discussion_r402128145", "createdAt": "2020-04-02T08:10:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -71,14 +71,14 @@ public void addRepeat(boolean fromPrompt) {\n     public void cancelRepeatPrompt() {\n         analytics.logEvent(ADD_REPEAT, \"InlineDecline\");\n \n-        FormController formController = getFormController();\n+        FormController formController = this.formController;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MDYxOQ=="}, "originalCommit": {"oid": "767801ef77d0e783adeba4a4aa9cafd35113d0a5"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3493, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}