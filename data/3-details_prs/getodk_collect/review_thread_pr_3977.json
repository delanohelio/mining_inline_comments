{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MzU1NjMy", "number": 3977, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNTo1MVrOEQkFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTowNzo1N1rOEQ5Ayg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODAzODYzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNTo1MVrOG0yGqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNTo1MVrOG0yGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMDA0Mg==", "bodyText": "I think really we just need a shared \"lock\" in the app that stops things that make changes running at the same time as here we have to care about multiple things, not everything is covered and there is no real thread safety. I've noted this down and I want to work on it later once we've added error handling for match exactly.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458000042", "createdAt": "2020-07-21T10:35:51Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/storage/migration/StorageMigrator.java", "diffHunk": "@@ -104,11 +107,11 @@ public StorageMigrationResult migrate() {\n     }\n \n     private boolean isFormUploaderRunning() {\n-        return backgroundWorkManager.isFormUploaderRunning();\n+        return formSubmitManager.isSubmitRunning();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d18746a455a48c3dd960f40bf186b79d10e72ff"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDUwODYyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToxNzo0MlrOG1KHhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODozNTowM1rOG1YdZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MzQ3OQ==", "bodyText": "Consider \"Blank form update mode\"? With \"Mode\" you can blink and kind of forget what you're setting the mode of. I think it can use the same string as for the Admin setting (form_update_mode).", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458393479", "createdAt": "2020-07-21T21:17:42Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -707,4 +707,7 @@\n     <string name=\"legacy_custom_server_paths_summary\">Will be removed in a future version. Please use /formList and /submission on your server.</string>\n     <string name=\"experimental\">Experimental</string>\n     <string name=\"match_exactly\">Exactly match server</string>\n+    <string name=\"update_blank_forms\">Update blank forms</string>\n+    <string name=\"manually\">Manually</string>\n+    <string name=\"form_update_mode_title\">Mode</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "180b9894c438b551d268576ddce0c6e02e2ea9aa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyODQ1NA==", "bodyText": "Sounds good!", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458628454", "createdAt": "2020-07-22T08:35:03Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -707,4 +707,7 @@\n     <string name=\"legacy_custom_server_paths_summary\">Will be removed in a future version. Please use /formList and /submission on your server.</string>\n     <string name=\"experimental\">Experimental</string>\n     <string name=\"match_exactly\">Exactly match server</string>\n+    <string name=\"update_blank_forms\">Update blank forms</string>\n+    <string name=\"manually\">Manually</string>\n+    <string name=\"form_update_mode_title\">Mode</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5MzQ3OQ=="}, "originalCommit": {"oid": "180b9894c438b551d268576ddce0c6e02e2ea9aa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU0MTMyOnYy", "diffSide": "RIGHT", "path": "async/src/main/java/org/odk/collect/async/Scheduler.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyNzo0MlrOG1KbNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMToyNzo0MlrOG1KbNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM5ODUxNg==", "bodyText": "I think this is a good call and turned out nicely. \ud83d\udc4d", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458398516", "createdAt": "2020-07-21T21:27:42Z", "author": {"login": "lognaturel"}, "path": "async/src/main/java/org/odk/collect/async/Scheduler.kt", "diffHunk": "@@ -4,18 +4,27 @@ import java.util.function.Consumer\n import java.util.function.Supplier\n \n /**\n- * Runs tasks in the foreground and background\n+ * Run and schedule tasks in the foreground (UI thread) and background. Based on terminology\n+ * used in Android's Background Processing documentation: https://developer.android.com/guide/background", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19283f41d6b2f1877bbc8ff37560d0eb13f90e28"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU3NzYwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/FormManagementSettingsTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTozOTowN1rOG1Kwzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNTowOVrOG18wEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDA0Nw==", "bodyText": "Additionally, I think the checkbox should be selected to make it clear that updates always happen automatically in match exactly mode. If the mode changes from match exactly to one of the other modes, the checkbox should be unchecked to indicate that automatic downloads aren't applicable to manual mode or are not on by default for updates to existing forms.\nI think it's ok for the value for the update frequency to stay whatever it was last set to in the case of manual update but I find the disabled automatic download option to be confusing.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458404047", "createdAt": "2020-07-21T21:39:07Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/FormManagementSettingsTest.java", "diffHunk": "@@ -51,6 +51,29 @@ public Scheduler providesScheduler(WorkManager workManager) {\n             .around(new IdlingResourceRule(new SchedulerIdlingResource(testScheduler)))\n             .around(rule);\n \n+    @Test\n+    public void whenManualUpdatesEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.manually)\n+                .assertDisabled(R.string.form_update_frequency_title)\n+                .assertDisabled(R.string.automatic_download);\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.match_exactly)\n+                .assertDisabled(R.string.automatic_download);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb598da652c87f904d900e9012a944ae8877246a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyOTA3Nw==", "bodyText": "Oh that's a really nice touch. Good thinking.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458629077", "createdAt": "2020-07-22T08:36:06Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/FormManagementSettingsTest.java", "diffHunk": "@@ -51,6 +51,29 @@ public Scheduler providesScheduler(WorkManager workManager) {\n             .around(new IdlingResourceRule(new SchedulerIdlingResource(testScheduler)))\n             .around(rule);\n \n+    @Test\n+    public void whenManualUpdatesEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.manually)\n+                .assertDisabled(R.string.form_update_frequency_title)\n+                .assertDisabled(R.string.automatic_download);\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.match_exactly)\n+                .assertDisabled(R.string.automatic_download);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDA0Nw=="}, "originalCommit": {"oid": "eb598da652c87f904d900e9012a944ae8877246a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5Mjk0Mg==", "bodyText": "I think we should create an issue for this. Testing this is going to be really hard without converting the fragment to androidx and I think we're just going to end up with conflicts with #3923. What do you think?\nI'll put a note for QA to target that PR next as it'd be really helpful to get that in.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458692942", "createdAt": "2020-07-22T10:26:10Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/FormManagementSettingsTest.java", "diffHunk": "@@ -51,6 +51,29 @@ public Scheduler providesScheduler(WorkManager workManager) {\n             .around(new IdlingResourceRule(new SchedulerIdlingResource(testScheduler)))\n             .around(rule);\n \n+    @Test\n+    public void whenManualUpdatesEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.manually)\n+                .assertDisabled(R.string.form_update_frequency_title)\n+                .assertDisabled(R.string.automatic_download);\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.match_exactly)\n+                .assertDisabled(R.string.automatic_download);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDA0Nw=="}, "originalCommit": {"oid": "eb598da652c87f904d900e9012a944ae8877246a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzA1Ng==", "bodyText": "Ok, all sounds good!", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459223056", "createdAt": "2020-07-23T05:35:09Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/settings/FormManagementSettingsTest.java", "diffHunk": "@@ -51,6 +51,29 @@ public Scheduler providesScheduler(WorkManager workManager) {\n             .around(new IdlingResourceRule(new SchedulerIdlingResource(testScheduler)))\n             .around(rule);\n \n+    @Test\n+    public void whenManualUpdatesEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.manually)\n+                .assertDisabled(R.string.form_update_frequency_title)\n+                .assertDisabled(R.string.automatic_download);\n+    }\n+\n+    @Test\n+    public void whenMatchExactlyEnabled_disablesPrefs() {\n+        rule.mainMenu()\n+                .clickOnMenu()\n+                .clickGeneralSettings()\n+                .clickFormManagement()\n+                .clickUpdateForms()\n+                .clickOption(R.string.match_exactly)\n+                .assertDisabled(R.string.automatic_download);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNDA0Nw=="}, "originalCommit": {"oid": "eb598da652c87f904d900e9012a944ae8877246a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDU4NDY0OnYy", "diffSide": "RIGHT", "path": "async/src/main/java/org/odk/collect/async/Scheduler.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMTo0MToxMlrOG1K0yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODozNjozM1rOG1Ygvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNTA2NA==", "bodyText": "Yeah, ok, repeat is a better name.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458405064", "createdAt": "2020-07-21T21:41:12Z", "author": {"login": "lognaturel"}, "path": "async/src/main/java/org/odk/collect/async/Scheduler.kt", "diffHunk": "@@ -46,4 +37,13 @@ interface Scheduler {\n      * Returns true if a deferred task scheduled with tag is currently running\n      */\n     fun isRunning(tag: String): Boolean\n+\n+    /**\n+     * Run a task and then repeat in the foreground\n+     *\n+     * @param foreground the task to be run\n+     * @param repeatPeriod the period between each run of the task\n+     * @return object that allows task to be cancelled\n+     */\n+    fun repeat(foreground: Runnable, repeatPeriod: Long): Cancellable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c11f7ba390304d4326df9153ed550be05feabe7d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyOTMxMA==", "bodyText": "Haha I still don't know. I'm trying to stop myself from changing it again...", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458629310", "createdAt": "2020-07-22T08:36:33Z", "author": {"login": "seadowg"}, "path": "async/src/main/java/org/odk/collect/async/Scheduler.kt", "diffHunk": "@@ -46,4 +37,13 @@ interface Scheduler {\n      * Returns true if a deferred task scheduled with tag is currently running\n      */\n     fun isRunning(tag: String): Boolean\n+\n+    /**\n+     * Run a task and then repeat in the foreground\n+     *\n+     * @param foreground the task to be run\n+     * @param repeatPeriod the period between each run of the task\n+     * @return object that allows task to be cancelled\n+     */\n+    fun repeat(foreground: Runnable, repeatPeriod: Long): Cancellable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQwNTA2NA=="}, "originalCommit": {"oid": "c11f7ba390304d4326df9153ed550be05feabe7d"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg3MjUwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/application/initialization/MetaPreferenceMigrator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozNTozMlrOG1Ne3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjozMTowOVrOG2Saww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0ODYwNQ==", "bodyText": "I don't understand the changes here. Why not pass in all the SharedPreferences on initialization? It seems they're always available on initialization or it would be more consistent to pass everything in on migration. I thought it was for testing but the one test that uses it does construction and migration on the same line.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458448605", "createdAt": "2020-07-21T23:35:32Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/application/initialization/MetaPreferenceMigrator.java", "diffHunk": "@@ -32,26 +31,22 @@\n /**\n  * Migrates old preference keys and values to new ones.\n  */\n-public class CollectPreferenceMigrator implements PreferenceMigrator {\n+public class MetaPreferenceMigrator implements PreferenceMigrator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e538bda4bfc576b1f904af35da70db9109e8ccc2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMjIxMw==", "bodyText": "Not for testing it's just me playing with the interface. I've flipped-flopped on this a few times. I guess my thinking here is that in the SettingsImporter we're actively dealing with general and admin preferences so it's weird that we then just call migrate. There w know what we're trying to migrate we just don't care about the detail (and we also don't know that the meta prefs exist).\nI think it's also me not being able to escape from the discussions about having profiles in the future. In that world you'd have different general and shared prefs but one shared meta prefs.\nAny of that make sense or you still hate it?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458632213", "createdAt": "2020-07-22T08:41:12Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/application/initialization/MetaPreferenceMigrator.java", "diffHunk": "@@ -32,26 +31,22 @@\n /**\n  * Migrates old preference keys and values to new ones.\n  */\n-public class CollectPreferenceMigrator implements PreferenceMigrator {\n+public class MetaPreferenceMigrator implements PreferenceMigrator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0ODYwNQ=="}, "originalCommit": {"oid": "e538bda4bfc576b1f904af35da70db9109e8ccc2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3MjY4NQ==", "bodyText": "The rationale for passing in general and admin preferences to migrate makes sense to me now, thanks. The name still really bothers me. CollectPreferenceMigrator or SharedPrefsMigrator or something that implies it can migrate all the prefs would make a lot more sense to me. Even if it doesn't keep track of general and admin preferences, it still knows how to migrate all the relevant preferences.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459572685", "createdAt": "2020-07-23T16:22:36Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/application/initialization/MetaPreferenceMigrator.java", "diffHunk": "@@ -32,26 +31,22 @@\n /**\n  * Migrates old preference keys and values to new ones.\n  */\n-public class CollectPreferenceMigrator implements PreferenceMigrator {\n+public class MetaPreferenceMigrator implements PreferenceMigrator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0ODYwNQ=="}, "originalCommit": {"oid": "e538bda4bfc576b1f904af35da70db9109e8ccc2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3ODA1MQ==", "bodyText": "Yeah that's very fair. I'll rework the name.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459578051", "createdAt": "2020-07-23T16:31:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/application/initialization/MetaPreferenceMigrator.java", "diffHunk": "@@ -32,26 +31,22 @@\n /**\n  * Migrates old preference keys and values to new ones.\n  */\n-public class CollectPreferenceMigrator implements PreferenceMigrator {\n+public class MetaPreferenceMigrator implements PreferenceMigrator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0ODYwNQ=="}, "originalCommit": {"oid": "e538bda4bfc576b1f904af35da70db9109e8ccc2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTM2OTM0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/application/initialization/migration/KeyExtractorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDowOTozNVrOG1R_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0NTo0M1rOG1Y21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMjM3MA==", "bodyText": "And what about the actually does something case?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458522370", "createdAt": "2020-07-22T04:09:35Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/application/initialization/migration/KeyExtractorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.odk.collect.android.application.initialization.migration;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.odk.collect.android.application.initialization.migration.MigrationUtils.extractNewKey;\n+import static org.odk.collect.android.application.initialization.migration.SharedPreferenceUtils.assertPrefs;\n+import static org.odk.collect.android.application.initialization.migration.SharedPreferenceUtils.assertPrefsEmpty;\n+import static org.odk.collect.android.application.initialization.migration.SharedPreferenceUtils.initPrefs;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class KeyExtractorTest {\n+\n+    private SharedPreferences prefs;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        prefs = getApplicationContext().getSharedPreferences(\"test\", Context.MODE_PRIVATE);\n+    }\n+\n+    @Test\n+    public void whenNewKeyExists_doesNothing() {\n+        initPrefs(prefs,\n+                \"oldKey\", \"oldBlah\",\n+                \"newKey\", \"existing\"\n+        );\n+\n+        extractNewKey(\"newKey\").fromKey(\"oldKey\")\n+                .fromValue(\"oldBlah\").toValue(\"newBlah\")\n+                .apply(prefs);\n+\n+        assertPrefs(prefs,\n+                \"oldKey\", \"oldBlah\",\n+                \"newKey\", \"existing\"\n+        );\n+    }\n+\n+    @Test\n+    public void whenOldKeyMissing_doesNothing() {\n+        initPrefs(prefs);\n+\n+        extractNewKey(\"newKey\").fromKey(\"oldKey\")\n+                .fromValue(\"oldBlah\").toValue(\"newBlah\")\n+                .apply(prefs);\n+\n+        assertPrefsEmpty(prefs);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDk2Ng==", "bodyText": "Ha. This is my very hippie TDD style: I never needed to write that test to get the behaviour in there as it was driven out by the MetaPreferencesMigratorTest (which I wrote first).\nI think you're right that we should have the test for the actual behaviour though as these migrations are being treated like a framework - we'd want to have confidence that each one is tested outside in isolation.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458634966", "createdAt": "2020-07-22T08:45:43Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/application/initialization/migration/KeyExtractorTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.odk.collect.android.application.initialization.migration;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.odk.collect.android.application.initialization.migration.MigrationUtils.extractNewKey;\n+import static org.odk.collect.android.application.initialization.migration.SharedPreferenceUtils.assertPrefs;\n+import static org.odk.collect.android.application.initialization.migration.SharedPreferenceUtils.assertPrefsEmpty;\n+import static org.odk.collect.android.application.initialization.migration.SharedPreferenceUtils.initPrefs;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class KeyExtractorTest {\n+\n+    private SharedPreferences prefs;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        prefs = getApplicationContext().getSharedPreferences(\"test\", Context.MODE_PRIVATE);\n+    }\n+\n+    @Test\n+    public void whenNewKeyExists_doesNothing() {\n+        initPrefs(prefs,\n+                \"oldKey\", \"oldBlah\",\n+                \"newKey\", \"existing\"\n+        );\n+\n+        extractNewKey(\"newKey\").fromKey(\"oldKey\")\n+                .fromValue(\"oldBlah\").toValue(\"newBlah\")\n+                .apply(prefs);\n+\n+        assertPrefs(prefs,\n+                \"oldKey\", \"oldBlah\",\n+                \"newKey\", \"existing\"\n+        );\n+    }\n+\n+    @Test\n+    public void whenOldKeyMissing_doesNothing() {\n+        initPrefs(prefs);\n+\n+        extractNewKey(\"newKey\").fromKey(\"oldKey\")\n+                .fromValue(\"oldBlah\").toValue(\"newBlah\")\n+                .apply(prefs);\n+\n+        assertPrefsEmpty(prefs);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMjM3MA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQwMDE0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDoyNzozNFrOG1SQiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTowMToxNVrOG1ZcMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNjg1Nw==", "bodyText": "Since you're replacing with a single line that now has very clear behavior, maybe get rid of this method?\nI think the TODO should be moved to an issue. Yes, I would expect that if auto send is turned on, that immediately attempts to send all pending submissions or enqueues the work if no connection is available. If you're ok with all that I can file the (very much not urgent) issue.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458526857", "createdAt": "2020-07-22T04:27:34Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2484,16 +2480,7 @@ public void next() {\n      * TODO: if the user changes auto-send settings, should an auto-send job immediately be enqueued?\n      */\n     private void requestAutoSend() {\n-        Constraints constraints = new Constraints.Builder()\n-                .setRequiredNetworkType(NetworkType.CONNECTED)\n-                .build();\n-        OneTimeWorkRequest autoSendWork =\n-                new OneTimeWorkRequest.Builder(AutoSendWorker.class)\n-                        .addTag(AutoSendWorker.TAG)\n-                        .setConstraints(constraints)\n-                        .build();\n-        workManager.beginUniqueWork(AutoSendWorker.TAG,\n-                ExistingWorkPolicy.KEEP, autoSendWork).enqueue();\n+        formSubmitManager.scheduleSubmit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMjYzMA==", "bodyText": "Yeah that sounds like a good way forward!", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458632630", "createdAt": "2020-07-22T08:41:53Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2484,16 +2480,7 @@ public void next() {\n      * TODO: if the user changes auto-send settings, should an auto-send job immediately be enqueued?\n      */\n     private void requestAutoSend() {\n-        Constraints constraints = new Constraints.Builder()\n-                .setRequiredNetworkType(NetworkType.CONNECTED)\n-                .build();\n-        OneTimeWorkRequest autoSendWork =\n-                new OneTimeWorkRequest.Builder(AutoSendWorker.class)\n-                        .addTag(AutoSendWorker.TAG)\n-                        .setConstraints(constraints)\n-                        .build();\n-        workManager.beginUniqueWork(AutoSendWorker.TAG,\n-                ExistingWorkPolicy.KEEP, autoSendWork).enqueue();\n+        formSubmitManager.scheduleSubmit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNjg1Nw=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY0NDUzMA==", "bodyText": "Created an issue: #3980", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458644530", "createdAt": "2020-07-22T09:01:15Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2484,16 +2480,7 @@ public void next() {\n      * TODO: if the user changes auto-send settings, should an auto-send job immediately be enqueued?\n      */\n     private void requestAutoSend() {\n-        Constraints constraints = new Constraints.Builder()\n-                .setRequiredNetworkType(NetworkType.CONNECTED)\n-                .build();\n-        OneTimeWorkRequest autoSendWork =\n-                new OneTimeWorkRequest.Builder(AutoSendWorker.class)\n-                        .addTag(AutoSendWorker.TAG)\n-                        .setConstraints(constraints)\n-                        .build();\n-        workManager.beginUniqueWork(AutoSendWorker.TAG,\n-                ExistingWorkPolicy.KEEP, autoSendWork).enqueue();\n+        formSubmitManager.scheduleSubmit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNjg1Nw=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQxOTU0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/SchedulerFormUpdateAndSubmitManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDozOToxNVrOG1SbvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0NjozM1rOG1Y41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyOTcyNA==", "bodyText": "Seems either this should cancel submission as well or should be renamed.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458529724", "createdAt": "2020-07-22T04:39:15Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/SchedulerFormUpdateAndSubmitManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.odk.collect.android.backgroundwork;\n+\n+import android.app.Application;\n+import android.content.SharedPreferences;\n+\n+import androidx.work.Constraints;\n+import androidx.work.ExistingWorkPolicy;\n+import androidx.work.NetworkType;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.WorkManager;\n+\n+import org.odk.collect.android.formmanagement.FormUpdateMode;\n+import org.odk.collect.android.upload.AutoSendWorker;\n+import org.odk.collect.async.Scheduler;\n+\n+import static org.odk.collect.android.backgroundwork.BackgroundWorkUtils.getPeriodInMilliseconds;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_FORM_UPDATE_MODE;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_PERIODIC_FORM_UPDATES_CHECK;\n+\n+public class SchedulerFormUpdateAndSubmitManager implements FormUpdateManager, FormSubmitManager {\n+\n+    private static final String MATCH_EXACTLY_SYNC_TAG = \"match_exactly\";\n+    public static final String AUTO_UPDATE_TAG = \"serverPollingJob\";\n+\n+    private final Scheduler scheduler;\n+    private final SharedPreferences sharedPreferences;\n+    private final Application application;\n+\n+    @Deprecated // Should use Scheduler instance instead\n+    private final WorkManager workManager;\n+\n+    public SchedulerFormUpdateAndSubmitManager(Scheduler scheduler, SharedPreferences sharedPreferences, Application application, WorkManager workManager) {\n+        this.scheduler = scheduler;\n+        this.sharedPreferences = sharedPreferences;\n+        this.application = application;\n+        this.workManager = workManager;\n+    }\n+\n+    @Override\n+    public void scheduleUpdates() {\n+        cancelWork();\n+\n+        String newValue = sharedPreferences.getString(KEY_FORM_UPDATE_MODE, null);\n+        String period = sharedPreferences.getString(KEY_PERIODIC_FORM_UPDATES_CHECK, null);\n+\n+        switch (FormUpdateMode.parse(application, newValue)) {\n+            case MANUAL:\n+                break;\n+            case PREVIOUSLY_DOWNLOADED_ONLY:\n+                scheduleAutoUpdate(getPeriodInMilliseconds(period));\n+                break;\n+            case MATCH_EXACTLY:\n+                scheduleMatchExactlySync(getPeriodInMilliseconds(period));\n+                break;\n+        }\n+    }\n+\n+    private void scheduleMatchExactlySync(long repeatPeriod) {\n+        scheduler.networkDeferred(MATCH_EXACTLY_SYNC_TAG, new SyncFormsTaskSpec(), repeatPeriod);\n+    }\n+\n+    private void scheduleAutoUpdate(long repeatPeriod) {\n+        scheduler.networkDeferred(AUTO_UPDATE_TAG, new AutoUpdateTaskSpec(), repeatPeriod);\n+    }\n+\n+    private void cancelWork() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNTQ3OQ==", "bodyText": "Yeah good point. I think I'll rename for the moment.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458635479", "createdAt": "2020-07-22T08:46:33Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/SchedulerFormUpdateAndSubmitManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.odk.collect.android.backgroundwork;\n+\n+import android.app.Application;\n+import android.content.SharedPreferences;\n+\n+import androidx.work.Constraints;\n+import androidx.work.ExistingWorkPolicy;\n+import androidx.work.NetworkType;\n+import androidx.work.OneTimeWorkRequest;\n+import androidx.work.WorkManager;\n+\n+import org.odk.collect.android.formmanagement.FormUpdateMode;\n+import org.odk.collect.android.upload.AutoSendWorker;\n+import org.odk.collect.async.Scheduler;\n+\n+import static org.odk.collect.android.backgroundwork.BackgroundWorkUtils.getPeriodInMilliseconds;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_FORM_UPDATE_MODE;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_PERIODIC_FORM_UPDATES_CHECK;\n+\n+public class SchedulerFormUpdateAndSubmitManager implements FormUpdateManager, FormSubmitManager {\n+\n+    private static final String MATCH_EXACTLY_SYNC_TAG = \"match_exactly\";\n+    public static final String AUTO_UPDATE_TAG = \"serverPollingJob\";\n+\n+    private final Scheduler scheduler;\n+    private final SharedPreferences sharedPreferences;\n+    private final Application application;\n+\n+    @Deprecated // Should use Scheduler instance instead\n+    private final WorkManager workManager;\n+\n+    public SchedulerFormUpdateAndSubmitManager(Scheduler scheduler, SharedPreferences sharedPreferences, Application application, WorkManager workManager) {\n+        this.scheduler = scheduler;\n+        this.sharedPreferences = sharedPreferences;\n+        this.application = application;\n+        this.workManager = workManager;\n+    }\n+\n+    @Override\n+    public void scheduleUpdates() {\n+        cancelWork();\n+\n+        String newValue = sharedPreferences.getString(KEY_FORM_UPDATE_MODE, null);\n+        String period = sharedPreferences.getString(KEY_PERIODIC_FORM_UPDATES_CHECK, null);\n+\n+        switch (FormUpdateMode.parse(application, newValue)) {\n+            case MANUAL:\n+                break;\n+            case PREVIOUSLY_DOWNLOADED_ONLY:\n+                scheduleAutoUpdate(getPeriodInMilliseconds(period));\n+                break;\n+            case MATCH_EXACTLY:\n+                scheduleMatchExactlySync(getPeriodInMilliseconds(period));\n+                break;\n+        }\n+    }\n+\n+    private void scheduleMatchExactlySync(long repeatPeriod) {\n+        scheduler.networkDeferred(MATCH_EXACTLY_SYNC_TAG, new SyncFormsTaskSpec(), repeatPeriod);\n+    }\n+\n+    private void scheduleAutoUpdate(long repeatPeriod) {\n+        scheduler.networkDeferred(AUTO_UPDATE_TAG, new AutoUpdateTaskSpec(), repeatPeriod);\n+    }\n+\n+    private void cancelWork() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyOTcyNA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQyNDE3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/FormManagementPreferences.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo0MjowNVrOG1SedA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozMTowMlrOG18sIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMDQyMA==", "bodyText": "I think whenPreviouslyDownloadedOnlyDisabled_stopsCheckingForUpdates verifies that if the mode is changed to manual after being one of the automatic ones, automatic work is cancelled. However, I can't find code for that. Are you sure this line doesn't need to be outside the if to guarantee that a change to manual cancels work?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458530420", "createdAt": "2020-07-22T04:42:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/FormManagementPreferences.java", "diffHunk": "@@ -145,4 +168,22 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {\n         });\n     }\n \n+    @Override\n+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n+        if (key.equals(KEY_FORM_UPDATE_MODE) || key.equals(KEY_PERIODIC_FORM_UPDATES_CHECK)) {\n+            formUpdateManager.scheduleUpdates();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNzg2NQ==", "bodyText": "SchedulerFormUpdateAndSubmitManager#scheduleUpdates cancels any existing deferred work and then sets it back up again. The if here is just making sure we only do that when the relevant settings change (as this will fire for any changes).", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458637865", "createdAt": "2020-07-22T08:50:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/FormManagementPreferences.java", "diffHunk": "@@ -145,4 +168,22 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {\n         });\n     }\n \n+    @Override\n+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n+        if (key.equals(KEY_FORM_UPDATE_MODE) || key.equals(KEY_PERIODIC_FORM_UPDATES_CHECK)) {\n+            formUpdateManager.scheduleUpdates();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMDQyMA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjA1MQ==", "bodyText": "Ohhh, hah. Of course, that makes a lot more sense. I was going too quickly and interpreted it as if we go into match exactly or update downloaded modes.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459222051", "createdAt": "2020-07-23T05:31:02Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/FormManagementPreferences.java", "diffHunk": "@@ -145,4 +168,22 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {\n         });\n     }\n \n+    @Override\n+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n+        if (key.equals(KEY_FORM_UPDATE_MODE) || key.equals(KEY_PERIODIC_FORM_UPDATES_CHECK)) {\n+            formUpdateManager.scheduleUpdates();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMDQyMA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQzMDc3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/Protocol.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo0NjoyM1rOG1Sihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozMzoyMVrOG18uRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMTQ2Mg==", "bodyText": "As more of these simple enums get introduced, maybe we should consider constants with typedef annotations? https://developer.android.com/studio/write/annotations.html#enum-annotations It's not a huge amount of memory but it does add up and I think constants/typedef is just as nice.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458531462", "createdAt": "2020-07-22T04:46:23Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/Protocol.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.Context;\n+\n+import org.odk.collect.android.R;\n+\n+public enum Protocol {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNDk1MQ==", "bodyText": "I had it in my mind that the enum problem wasn't a big deal any more. I managed to find this post from Chet Haase that goes through optimizations they've made in R8 for enums but also says:\n\nYes, we used to talk about avoiding enums\u2026 but that was many years and an entire runtime ago \u2014 enums are fine\n\nI think maybe to side step the typedef stuff we could consider switching enum definitons and their calling code candidates for switching to Kotlin where we could be using sealed classes.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458624951", "createdAt": "2020-07-22T08:29:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/Protocol.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.Context;\n+\n+import org.odk.collect.android.R;\n+\n+public enum Protocol {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMTQ2Mg=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjU5OQ==", "bodyText": "Ah, great! I'm pretty sure I saw the \"avoid enum\" thing in Android docs recently but maybe I'm remembering wrong. Let's leave it for now. I'm not super excited about peppering Kotlin around but we should discuss.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459222599", "createdAt": "2020-07-23T05:33:21Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/Protocol.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.Context;\n+\n+import org.odk.collect.android.R;\n+\n+public enum Protocol {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMTQ2Mg=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQ0MzQ4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/forms/DatabaseFormRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNDo1Mzo1MlrOG1Sp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozMTozNFrOG18siA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzMzNg==", "bodyText": "Nit: lastDetectedHash?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458533336", "createdAt": "2020-07-22T04:53:52Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/forms/DatabaseFormRepository.java", "diffHunk": "@@ -48,4 +49,32 @@ public void save(Form form) {\n     public void delete(Long id) {\n         new FormsDao().deleteFormsFromIDs(new String[]{id.toString()});\n     }\n+\n+    @Override\n+    public void setLastDetectedUpdated(String jrFormId, String formHash, String manifestHash) {\n+        String formVersionHash = MultiFormDownloader.getMd5Hash(formHash) + manifestHash;\n+\n+        ContentValues values = new ContentValues();\n+        values.put(LAST_DETECTED_FORM_VERSION_HASH, formVersionHash);\n+        new FormsDao().updateForm(values, JR_FORM_ID + \"=?\", new String[]{jrFormId});\n+    }\n+\n+    @Override\n+    public Form getByLastDetectedUpdate(String formHash, String manifestHash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxNjU0OQ==", "bodyText": "I was actually trying to abstract away from the \"hash\" here. In the cases we're using it we want to know if this \"update\" or \"version\" of the form exists on the device. We don't need to hash anything to do that (it could have just stored the manifest hash rather than hashing it with the form hash) so to me this felt closer to what the intention was while hiding the implementation detail. Does that feel ok?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458616549", "createdAt": "2020-07-22T08:15:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/forms/DatabaseFormRepository.java", "diffHunk": "@@ -48,4 +49,32 @@ public void save(Form form) {\n     public void delete(Long id) {\n         new FormsDao().deleteFormsFromIDs(new String[]{id.toString()});\n     }\n+\n+    @Override\n+    public void setLastDetectedUpdated(String jrFormId, String formHash, String manifestHash) {\n+        String formVersionHash = MultiFormDownloader.getMd5Hash(formHash) + manifestHash;\n+\n+        ContentValues values = new ContentValues();\n+        values.put(LAST_DETECTED_FORM_VERSION_HASH, formVersionHash);\n+        new FormsDao().updateForm(values, JR_FORM_ID + \"=?\", new String[]{jrFormId});\n+    }\n+\n+    @Override\n+    public Form getByLastDetectedUpdate(String formHash, String manifestHash) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzMzNg=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMjE1Mg==", "bodyText": "Fair enough, thanks for the explanation.", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459222152", "createdAt": "2020-07-23T05:31:34Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/forms/DatabaseFormRepository.java", "diffHunk": "@@ -48,4 +49,32 @@ public void save(Form form) {\n     public void delete(Long id) {\n         new FormsDao().deleteFormsFromIDs(new String[]{id.toString()});\n     }\n+\n+    @Override\n+    public void setLastDetectedUpdated(String jrFormId, String formHash, String manifestHash) {\n+        String formVersionHash = MultiFormDownloader.getMd5Hash(formHash) + manifestHash;\n+\n+        ContentValues values = new ContentValues();\n+        values.put(LAST_DETECTED_FORM_VERSION_HASH, formVersionHash);\n+        new FormsDao().updateForm(values, JR_FORM_ID + \"=?\", new String[]{jrFormId});\n+    }\n+\n+    @Override\n+    public Form getByLastDetectedUpdate(String formHash, String manifestHash) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMzMzNg=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTQ2NzYyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/previouslydownloaded/ServerFormsUpdateChecker.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNTowNzo1N1rOG1S4Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzowMDoxMFrOG2TeVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNzAzNA==", "bodyText": "What's the point of the single retry?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458537034", "createdAt": "2020-07-22T05:07:57Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/previouslydownloaded/ServerFormsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.formmanagement.previouslydownloaded;\n+\n+import org.jetbrains.annotations.Nullable;\n+import org.odk.collect.android.formmanagement.ServerFormDetails;\n+import org.odk.collect.android.formmanagement.ServerFormsDetailsFetcher;\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.openrosa.api.FormApiException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+\n+public class ServerFormsUpdateChecker {\n+\n+    private final ServerFormsDetailsFetcher serverFormsDetailsFetcher;\n+    private final FormRepository formRepository;\n+\n+    public ServerFormsUpdateChecker(ServerFormsDetailsFetcher serverFormsDetailsFetcher, FormRepository formRepository) {\n+        this.serverFormsDetailsFetcher = serverFormsDetailsFetcher;\n+        this.formRepository = formRepository;\n+    }\n+\n+    public List<ServerFormDetails> check() {\n+        try {\n+            List<ServerFormDetails> updatedForms = fetchUpdatedForms();\n+            List<ServerFormDetails> newUpdates = new ArrayList<>();\n+\n+            for (ServerFormDetails serverFormDetails : updatedForms) {\n+                String formHash = serverFormDetails.getHash();\n+                String manifestFileHash = serverFormDetails.getManifestFileHash() != null ? serverFormDetails.getManifestFileHash() : \"\";\n+\n+                if (formRepository.getByLastDetectedUpdate(formHash, manifestFileHash) == null) {\n+                    newUpdates.add(serverFormDetails);\n+                    formRepository.setLastDetectedUpdated(serverFormDetails.getFormId(), formHash, manifestFileHash);\n+                }\n+            }\n+\n+            return newUpdates;\n+        } catch (FormApiException e) {\n+            return emptyList();\n+        }\n+    }\n+\n+    @Nullable\n+    @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n+    private List<ServerFormDetails> fetchUpdatedForms() throws FormApiException {\n+        List<ServerFormDetails> formList = null;\n+\n+        try {\n+            formList = serverFormsDetailsFetcher.fetchFormDetails();\n+        } catch (FormApiException e) {\n+            switch (e.getType()) {\n+                case AUTH_REQUIRED:\n+                    try {\n+                        serverFormsDetailsFetcher.fetchFormDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxNDczOQ==", "bodyText": "This is the existing behaviour (see here). I'd actually meant to ask about this as it felt really weird. I'm thinking we can just get rid of it? Otherwise, we should write a test to keep it in (and hopefully describe what it's about).", "url": "https://github.com/getodk/collect/pull/3977#discussion_r458614739", "createdAt": "2020-07-22T08:12:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/previouslydownloaded/ServerFormsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.formmanagement.previouslydownloaded;\n+\n+import org.jetbrains.annotations.Nullable;\n+import org.odk.collect.android.formmanagement.ServerFormDetails;\n+import org.odk.collect.android.formmanagement.ServerFormsDetailsFetcher;\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.openrosa.api.FormApiException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+\n+public class ServerFormsUpdateChecker {\n+\n+    private final ServerFormsDetailsFetcher serverFormsDetailsFetcher;\n+    private final FormRepository formRepository;\n+\n+    public ServerFormsUpdateChecker(ServerFormsDetailsFetcher serverFormsDetailsFetcher, FormRepository formRepository) {\n+        this.serverFormsDetailsFetcher = serverFormsDetailsFetcher;\n+        this.formRepository = formRepository;\n+    }\n+\n+    public List<ServerFormDetails> check() {\n+        try {\n+            List<ServerFormDetails> updatedForms = fetchUpdatedForms();\n+            List<ServerFormDetails> newUpdates = new ArrayList<>();\n+\n+            for (ServerFormDetails serverFormDetails : updatedForms) {\n+                String formHash = serverFormDetails.getHash();\n+                String manifestFileHash = serverFormDetails.getManifestFileHash() != null ? serverFormDetails.getManifestFileHash() : \"\";\n+\n+                if (formRepository.getByLastDetectedUpdate(formHash, manifestFileHash) == null) {\n+                    newUpdates.add(serverFormDetails);\n+                    formRepository.setLastDetectedUpdated(serverFormDetails.getFormId(), formHash, manifestFileHash);\n+                }\n+            }\n+\n+            return newUpdates;\n+        } catch (FormApiException e) {\n+            return emptyList();\n+        }\n+    }\n+\n+    @Nullable\n+    @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n+    private List<ServerFormDetails> fetchUpdatedForms() throws FormApiException {\n+        List<ServerFormDetails> formList = null;\n+\n+        try {\n+            formList = serverFormsDetailsFetcher.fetchFormDetails();\n+        } catch (FormApiException e) {\n+            switch (e.getType()) {\n+                case AUTH_REQUIRED:\n+                    try {\n+                        serverFormsDetailsFetcher.fetchFormDetails();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNzAzNA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3Mzg5OA==", "bodyText": "Wondered whether that might be old stuff. Hmm. In the foreground usage could it be giving an opportunity to show the dialog or something?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459573898", "createdAt": "2020-07-23T16:24:35Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/previouslydownloaded/ServerFormsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.formmanagement.previouslydownloaded;\n+\n+import org.jetbrains.annotations.Nullable;\n+import org.odk.collect.android.formmanagement.ServerFormDetails;\n+import org.odk.collect.android.formmanagement.ServerFormsDetailsFetcher;\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.openrosa.api.FormApiException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+\n+public class ServerFormsUpdateChecker {\n+\n+    private final ServerFormsDetailsFetcher serverFormsDetailsFetcher;\n+    private final FormRepository formRepository;\n+\n+    public ServerFormsUpdateChecker(ServerFormsDetailsFetcher serverFormsDetailsFetcher, FormRepository formRepository) {\n+        this.serverFormsDetailsFetcher = serverFormsDetailsFetcher;\n+        this.formRepository = formRepository;\n+    }\n+\n+    public List<ServerFormDetails> check() {\n+        try {\n+            List<ServerFormDetails> updatedForms = fetchUpdatedForms();\n+            List<ServerFormDetails> newUpdates = new ArrayList<>();\n+\n+            for (ServerFormDetails serverFormDetails : updatedForms) {\n+                String formHash = serverFormDetails.getHash();\n+                String manifestFileHash = serverFormDetails.getManifestFileHash() != null ? serverFormDetails.getManifestFileHash() : \"\";\n+\n+                if (formRepository.getByLastDetectedUpdate(formHash, manifestFileHash) == null) {\n+                    newUpdates.add(serverFormDetails);\n+                    formRepository.setLastDetectedUpdated(serverFormDetails.getFormId(), formHash, manifestFileHash);\n+                }\n+            }\n+\n+            return newUpdates;\n+        } catch (FormApiException e) {\n+            return emptyList();\n+        }\n+    }\n+\n+    @Nullable\n+    @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n+    private List<ServerFormDetails> fetchUpdatedForms() throws FormApiException {\n+        List<ServerFormDetails> formList = null;\n+\n+        try {\n+            formList = serverFormsDetailsFetcher.fetchFormDetails();\n+        } catch (FormApiException e) {\n+            switch (e.getType()) {\n+                case AUTH_REQUIRED:\n+                    try {\n+                        serverFormsDetailsFetcher.fetchFormDetails();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNzAzNA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3OTUzNw==", "bodyText": "Yeah that'd make more sense. Probably want to view that as another issue/feature though. I think for the moment I'm happy for this to merge in like this if we add an issue around making the auto update prompt the user for creds if there is an auth error (like Manual and Match Exactly both will). How does that sound?", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459579537", "createdAt": "2020-07-23T16:33:40Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/previouslydownloaded/ServerFormsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.formmanagement.previouslydownloaded;\n+\n+import org.jetbrains.annotations.Nullable;\n+import org.odk.collect.android.formmanagement.ServerFormDetails;\n+import org.odk.collect.android.formmanagement.ServerFormsDetailsFetcher;\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.openrosa.api.FormApiException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+\n+public class ServerFormsUpdateChecker {\n+\n+    private final ServerFormsDetailsFetcher serverFormsDetailsFetcher;\n+    private final FormRepository formRepository;\n+\n+    public ServerFormsUpdateChecker(ServerFormsDetailsFetcher serverFormsDetailsFetcher, FormRepository formRepository) {\n+        this.serverFormsDetailsFetcher = serverFormsDetailsFetcher;\n+        this.formRepository = formRepository;\n+    }\n+\n+    public List<ServerFormDetails> check() {\n+        try {\n+            List<ServerFormDetails> updatedForms = fetchUpdatedForms();\n+            List<ServerFormDetails> newUpdates = new ArrayList<>();\n+\n+            for (ServerFormDetails serverFormDetails : updatedForms) {\n+                String formHash = serverFormDetails.getHash();\n+                String manifestFileHash = serverFormDetails.getManifestFileHash() != null ? serverFormDetails.getManifestFileHash() : \"\";\n+\n+                if (formRepository.getByLastDetectedUpdate(formHash, manifestFileHash) == null) {\n+                    newUpdates.add(serverFormDetails);\n+                    formRepository.setLastDetectedUpdated(serverFormDetails.getFormId(), formHash, manifestFileHash);\n+                }\n+            }\n+\n+            return newUpdates;\n+        } catch (FormApiException e) {\n+            return emptyList();\n+        }\n+    }\n+\n+    @Nullable\n+    @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n+    private List<ServerFormDetails> fetchUpdatedForms() throws FormApiException {\n+        List<ServerFormDetails> formList = null;\n+\n+        try {\n+            formList = serverFormsDetailsFetcher.fetchFormDetails();\n+        } catch (FormApiException e) {\n+            switch (e.getType()) {\n+                case AUTH_REQUIRED:\n+                    try {\n+                        serverFormsDetailsFetcher.fetchFormDetails();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNzAzNA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5NTM1MA==", "bodyText": "Issue filed: #3983", "url": "https://github.com/getodk/collect/pull/3977#discussion_r459595350", "createdAt": "2020-07-23T17:00:10Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/previouslydownloaded/ServerFormsUpdateChecker.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.formmanagement.previouslydownloaded;\n+\n+import org.jetbrains.annotations.Nullable;\n+import org.odk.collect.android.formmanagement.ServerFormDetails;\n+import org.odk.collect.android.formmanagement.ServerFormsDetailsFetcher;\n+import org.odk.collect.android.forms.FormRepository;\n+import org.odk.collect.android.openrosa.api.FormApiException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.util.Collections.emptyList;\n+\n+public class ServerFormsUpdateChecker {\n+\n+    private final ServerFormsDetailsFetcher serverFormsDetailsFetcher;\n+    private final FormRepository formRepository;\n+\n+    public ServerFormsUpdateChecker(ServerFormsDetailsFetcher serverFormsDetailsFetcher, FormRepository formRepository) {\n+        this.serverFormsDetailsFetcher = serverFormsDetailsFetcher;\n+        this.formRepository = formRepository;\n+    }\n+\n+    public List<ServerFormDetails> check() {\n+        try {\n+            List<ServerFormDetails> updatedForms = fetchUpdatedForms();\n+            List<ServerFormDetails> newUpdates = new ArrayList<>();\n+\n+            for (ServerFormDetails serverFormDetails : updatedForms) {\n+                String formHash = serverFormDetails.getHash();\n+                String manifestFileHash = serverFormDetails.getManifestFileHash() != null ? serverFormDetails.getManifestFileHash() : \"\";\n+\n+                if (formRepository.getByLastDetectedUpdate(formHash, manifestFileHash) == null) {\n+                    newUpdates.add(serverFormDetails);\n+                    formRepository.setLastDetectedUpdated(serverFormDetails.getFormId(), formHash, manifestFileHash);\n+                }\n+            }\n+\n+            return newUpdates;\n+        } catch (FormApiException e) {\n+            return emptyList();\n+        }\n+    }\n+\n+    @Nullable\n+    @SuppressWarnings(\"PMD.AvoidRethrowingException\")\n+    private List<ServerFormDetails> fetchUpdatedForms() throws FormApiException {\n+        List<ServerFormDetails> formList = null;\n+\n+        try {\n+            formList = serverFormsDetailsFetcher.fetchFormDetails();\n+        } catch (FormApiException e) {\n+            switch (e.getType()) {\n+                case AUTH_REQUIRED:\n+                    try {\n+                        serverFormsDetailsFetcher.fetchFormDetails();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzNzAzNA=="}, "originalCommit": {"oid": "f79e92399f693f60d4cea87834e65af7b1ee12a4"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3243, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}