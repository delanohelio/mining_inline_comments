{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM3MTY2MzA2", "number": 4297, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMToyNjowN1rOFOV2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNjozMDo1MVrOFRgqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTgyNTIyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/permissions/PermissionsProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QyMToyNjowN1rOITC8-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDoyMTozNlrOITeNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0MjIzMw==", "bodyText": "This should be true so that the last assertion is true!", "url": "https://github.com/getodk/collect/pull/4297#discussion_r556842233", "createdAt": "2021-01-13T21:26:07Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/permissions/PermissionsProviderTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.odk.collect.android.permissions;\n+\n+import android.Manifest;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class PermissionsProviderTest {\n+    private PermissionsChecker permissionsChecker;\n+    private StorageStateProvider storageStateProvider;\n+    private PermissionsProvider permissionsProvider;\n+\n+    @Before\n+    public void setup() {\n+        permissionsChecker = mock(PermissionsChecker.class);\n+        storageStateProvider = mock(StorageStateProvider.class);\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsGrantedAndScopedStorageNotUsed_shouldAreStoragePermissionsGrantedReturnTrue() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(true);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(false);\n+        permissionsProvider = new PermissionsProvider(permissionsChecker, storageStateProvider);\n+\n+        assertThat(permissionsProvider.areStoragePermissionsGranted(), is(true));\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsGrantedAndScopedStorageUsed_shouldAreStoragePermissionsGrantedReturnTrue() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(true);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(true);\n+        permissionsProvider = new PermissionsProvider(permissionsChecker, storageStateProvider);\n+\n+        assertThat(permissionsProvider.areStoragePermissionsGranted(), is(true));\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsNotGrantedAndScopedStorageNotUsed_shouldAreStoragePermissionsGrantedReturnFalse() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(false);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(false);\n+        permissionsProvider = new PermissionsProvider(permissionsChecker, storageStateProvider);\n+\n+        assertThat(permissionsProvider.areStoragePermissionsGranted(), is(false));\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsNotGrantedAndScopedStorageUsed_shouldAreStoragePermissionsGrantedReturnTrue() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(false);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa08fecd502652135d71cd0d513212903d987ee"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI4ODg1MA==", "bodyText": "Ahh good catch, thanks!", "url": "https://github.com/getodk/collect/pull/4297#discussion_r557288850", "createdAt": "2021-01-14T10:21:36Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/permissions/PermissionsProviderTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.odk.collect.android.permissions;\n+\n+import android.Manifest;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.odk.collect.android.storage.StorageStateProvider;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class PermissionsProviderTest {\n+    private PermissionsChecker permissionsChecker;\n+    private StorageStateProvider storageStateProvider;\n+    private PermissionsProvider permissionsProvider;\n+\n+    @Before\n+    public void setup() {\n+        permissionsChecker = mock(PermissionsChecker.class);\n+        storageStateProvider = mock(StorageStateProvider.class);\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsGrantedAndScopedStorageNotUsed_shouldAreStoragePermissionsGrantedReturnTrue() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(true);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(false);\n+        permissionsProvider = new PermissionsProvider(permissionsChecker, storageStateProvider);\n+\n+        assertThat(permissionsProvider.areStoragePermissionsGranted(), is(true));\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsGrantedAndScopedStorageUsed_shouldAreStoragePermissionsGrantedReturnTrue() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(true);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(true);\n+        permissionsProvider = new PermissionsProvider(permissionsChecker, storageStateProvider);\n+\n+        assertThat(permissionsProvider.areStoragePermissionsGranted(), is(true));\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsNotGrantedAndScopedStorageNotUsed_shouldAreStoragePermissionsGrantedReturnFalse() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(false);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(false);\n+        permissionsProvider = new PermissionsProvider(permissionsChecker, storageStateProvider);\n+\n+        assertThat(permissionsProvider.areStoragePermissionsGranted(), is(false));\n+    }\n+\n+    @Test\n+    public void whenStoragePermissionsNotGrantedAndScopedStorageUsed_shouldAreStoragePermissionsGrantedReturnTrue() {\n+        when(permissionsChecker.isPermissionGranted(Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)).thenReturn(false);\n+        when(storageStateProvider.isScopedStorageUsed()).thenReturn(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0MjIzMw=="}, "originalCommit": {"oid": "cfa08fecd502652135d71cd0d513212903d987ee"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMDA5NTY4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMTowNDoxMlrOIWoi-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOToxNDo1OFrOIXNmpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwMzg5OA==", "bodyText": "This happens to work for some common types like image/jpeg but the subtype name is not guaranteed to be the extension. For example the SVG MIME type is image/svg+xml but its extension is .svg. Or audio/amr-wb and .amr. I think you have to use MimeTypeMap#getExtensionFromMimeType.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560603898", "createdAt": "2021-01-20T01:04:12Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +73,8 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n-        }\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+        return mimeType.substring(mimeType.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDgzNjk2OQ==", "bodyText": "Generally you are right and I tried it but in some cases (which seem pretty obvious) it returns null those cases are like:\n\naudio/mp3\ntext/csv\n\nHere https://stackoverflow.com/questions/12473851/how-i-can-get-the-mime-type-of-a-file-having-its-uri/12473985 where that solution is marked as accepted people also complain about the same.\nMaybe I should use what you mentioned first and then in case of null my: mimeType.substring(mimeType.lastIndexOf(\"/\") + 1);\nor better yet (as a second step) I can read filename that should contain file extension:\n        Cursor cursor = getContentResolver().query(fileUri, null, null, null, null);\n        if (cursor != null && cursor.moveToFirst()) {\n            name = cursor.getString(cursor.getColumnIndex(MediaStore.MediaColumns.DISPLAY_NAME));\n        }\n        String extension = name != null ? name.substring(name.lastIndexOf(\".\") + 1) : \"\";\n\nthis is what this library does https://github.com/anggrayudi/SimpleStorage. I know it's new and didn't gain traction yet but i ran into it through this topic https://stackoverflow.com/questions/63080879/get-file-extension-using-android-storage-access-framework.\nWhat do you think?", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560836969", "createdAt": "2021-01-20T10:07:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +73,8 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n-        }\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+        return mimeType.substring(mimeType.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwMzg5OA=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTEzMTUxNQ==", "bodyText": "ANDROID! Why must it always make simple things hard. Good catch on MimeTypeMap#getExtensionFromMimeType not actually working all the time.\nDoing that first and then falling back seems good. I think you might actually want to have both fallbacks since neither is perfect -- MediaStore.MediaColumns.DISPLAY_NAME is not necessarily a file name. Maybe first use MimeTypeMap#getExtensionFromMimeType, then try the display column and then use the subtype?", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561131515", "createdAt": "2021-01-20T17:07:41Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +73,8 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n-        }\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+        return mimeType.substring(mimeType.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwMzg5OA=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIwOTQzOA==", "bodyText": "Ok I did it I even added another fourth aproach since I noticed that in case of selfie video only that last approach works well \ud83d\ude31", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561209438", "createdAt": "2021-01-20T19:12:04Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +73,8 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n-        }\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+        return mimeType.substring(mimeType.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwMzg5OA=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIxMTA0NA==", "bodyText": "Yikes! Is that maybe because selfie video gives back a file URI (not a content URI) without a MIME type set? Maybe that's worth looking at again after this PR.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561211044", "createdAt": "2021-01-20T19:14:58Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +73,8 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n-        }\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+        return mimeType.substring(mimeType.lastIndexOf(\"/\") + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwMzg5OA=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMDEyNDIwOnYy", "diffSide": "LEFT", "path": "collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMToxNjozNFrOIWozXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxNzoxMTowNFrOIXI4sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwODA5Mg==", "bodyText": "I think this can all go away once we don't support files in /sdcard/odk/ anymore but at the moment, removing it could result in a crash if someone's migration failed, they haven't yet granted permissions, and they try to access forms from an external app, right?", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560608092", "createdAt": "2021-01-20T01:16:34Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java", "diffHunk": "@@ -87,12 +86,6 @@ public static void releaseDatabaseHelper() {\n \n     @Override\n     public boolean onCreate() {\n-\n-        if (!areStoragePermissionsGranted(getContext())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0ODcxMw==", "bodyText": "I tested it using collectTester app and:\n\nif you open list of blank form everything is fine, you are asked to grant permissions\nif you open list of saved forms as above\nif you open list of forms to submit as above\nif you open list of sent forms as above\nif you download forms passing ids as above\nif you upload forms passing ids as above\n\nIt only crashes if an external app tries to get list of forms or instances.\nThe problem was with injecting objects in content providers which are initialized before other app components but finally I fixed this issue thanks to https://stackoverflow.com/questions/23521083/inject-database-in-a-contentprovider-with-dagger\n0c1ff84", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560948713", "createdAt": "2021-01-20T13:12:07Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java", "diffHunk": "@@ -87,12 +86,6 @@ public static void releaseDatabaseHelper() {\n \n     @Override\n     public boolean onCreate() {\n-\n-        if (!areStoragePermissionsGranted(getContext())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwODA5Mg=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTEzMzc0NA==", "bodyText": "Makes sense!", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561133744", "createdAt": "2021-01-20T17:11:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java", "diffHunk": "@@ -87,12 +86,6 @@ public static void releaseDatabaseHelper() {\n \n     @Override\n     public boolean onCreate() {\n-\n-        if (!areStoragePermissionsGranted(getContext())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwODA5Mg=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMDEyNTE1OnYy", "diffSide": "LEFT", "path": "collect_app/src/main/java/org/odk/collect/android/provider/InstanceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMToxNjo1OFrOIWoz3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxMzoxMzozMVrOIW9o-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwODIyMQ==", "bodyText": "Same question as for FormsProvider.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560608221", "createdAt": "2021-01-20T01:16:58Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/provider/InstanceProvider.java", "diffHunk": "@@ -87,11 +86,6 @@ public static void releaseDatabaseHelper() {\n \n     @Override\n     public boolean onCreate() {\n-        if (!areStoragePermissionsGranted(getContext())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk0OTQ5Ng==", "bodyText": "As above in case of FormsProvider", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560949496", "createdAt": "2021-01-20T13:13:31Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/provider/InstanceProvider.java", "diffHunk": "@@ -87,11 +86,6 @@ public static void releaseDatabaseHelper() {\n \n     @Override\n     public boolean onCreate() {\n-        if (!areStoragePermissionsGranted(getContext())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYwODIyMQ=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMDE1ODg1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MediaUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMTozMDoxNVrOIWpGZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQxOTo0NTowNlrOIXO1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxMjk2NA==", "bodyText": "This seems unnecessary and likely to fail. It should be possible to use FileProvider#getType.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560612964", "createdAt": "2021-01-20T01:30:15Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MediaUtils.java", "diffHunk": "@@ -82,362 +60,8 @@ public void openFile(Context context, File file) {\n         }\n     }\n \n-    public String getMimeType(String url) {\n+    private String getMimeType(String url) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk5MDM4MQ==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560990381", "createdAt": "2021-01-20T14:13:59Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MediaUtils.java", "diffHunk": "@@ -82,362 +60,8 @@ public void openFile(Context context, File file) {\n         }\n     }\n \n-    public String getMimeType(String url) {\n+    private String getMimeType(String url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxMjk2NA=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTIzMTI4NQ==", "bodyText": "I'm rolling back this. I tested that way and it doesn't work in all cases but the old one does at leas for the cases I tested. Oh Android you are so funny!\nI added some fallbacks just in case like in getFileExtensionFromUri() above.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561231285", "createdAt": "2021-01-20T19:45:06Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MediaUtils.java", "diffHunk": "@@ -82,362 +60,8 @@ public void openFile(Context context, File file) {\n         }\n     }\n \n-    public String getMimeType(String url) {\n+    private String getMimeType(String url) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxMjk2NA=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzMDE4ODE5OnYy", "diffSide": "LEFT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQwMTo0MzoyMFrOIWpXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzoyNjo0M1rOIYBoaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw==", "bodyText": "FormSaveViewModel.createAnswerFile returns a LiveData<Result<String>> used to set the data from a file name. Have you tried this change with internal recording?", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560617277", "createdAt": "2021-01-20T01:43:20Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDk2NTkwNQ==", "bodyText": "I tested the demo form with internal recording and everything seems fine.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r560965905", "createdAt": "2021-01-20T13:39:24Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTEzMjk5OQ==", "bodyText": "Interesting! @seadowg, would be good for you to at least see this change happening since it's to very recent audio code.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561132999", "createdAt": "2021-01-20T17:09:57Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTczMDYyNQ==", "bodyText": "Looks like @lognaturel is right as AudioRecordingTest and AudioWidgetTest are failing. From debugging, it looks like AudioWidget#setData is still passed a String.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r561730625", "createdAt": "2021-01-21T09:39:51Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyMzA0Nw==", "bodyText": "Do you remember whether there was a specific reason you wanted to use a String, @seadowg? Looks like using a LiveData<Result<File>> works fine but want to make sure there isn't a strong reason against it.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562023047", "createdAt": "2021-01-21T16:33:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyOTEzNg==", "bodyText": "Yeah I have just turned it into files so please answer if there was any reason.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562029136", "createdAt": "2021-01-21T16:40:53Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA2MzQ2Nw==", "bodyText": "I don't think it needs to be a String. It was just because it didn't need to be a file as the the other side could just use getAnswerFile with the name (the String) to access the actual file. I think if File is more consistent we can go with that!", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562063467", "createdAt": "2021-01-21T17:26:43Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/AudioWidget.java", "diffHunk": "@@ -144,40 +144,25 @@ public IAnswerData getAnswer() {\n         }\n     }\n \n-    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDYxNzI3Nw=="}, "originalCommit": {"oid": "32734194499287365954afcc86f08840f1a04600"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzOTA1MzIxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNjozMDo1MVrOIX_EFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxNzoyNjo1MFrOIYBotA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyMTM5Ng==", "bodyText": "Wouldn't we always be dealing with content URIs here? In what cases would we have file URIs?", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562021396", "createdAt": "2021-01-21T16:30:51Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +79,43 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+\n+        String extension = fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714a264d9334378dc499b51d8a9edbe836d97269"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyMTc4MA==", "bodyText": "Or was that the selfie video case again?", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562021780", "createdAt": "2021-01-21T16:31:27Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +79,43 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+\n+        String extension = fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyMTM5Ng=="}, "originalCommit": {"oid": "714a264d9334378dc499b51d8a9edbe836d97269"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA0MzcyMg==", "bodyText": "This was the fix added for a crash some time ago f98b98d so I wanted to keep it just in case seeing how other cases might be tricky.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562043722", "createdAt": "2021-01-21T16:59:54Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +79,43 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+\n+        String extension = fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyMTM5Ng=="}, "originalCommit": {"oid": "714a264d9334378dc499b51d8a9edbe836d97269"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjA2MzU0MA==", "bodyText": "Got it. Would be great to follow up with #2834 because this method has gone through lots of big changes during this PR that probably would have been avoided with tests.", "url": "https://github.com/getodk/collect/pull/4297#discussion_r562063540", "createdAt": "2021-01-21T17:26:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/dao/helpers/ContentResolverHelper.java", "diffHunk": "@@ -76,20 +79,43 @@ public static String getFormPath(Uri uri) {\n         return formPath;\n     }\n \n-    /**\n-     * Using contentResolver to get a file's extension by the uri\n-     *\n-     * @param fileUri Whose name we want to get\n-     * @return The file's extension without a dot eg. \"mp3\" not \".mp3\"\n-     */\n-    public static String getFileExtensionFromUri(Context context, Uri fileUri) {\n-        String fileName = new MediaUtils().getFileNameFromUri(context, fileUri);\n-        if (fileName != null && fileName.contains(\".\")) {\n-            return fileName.substring(fileName.lastIndexOf('.') + 1);\n-        } else {\n-            return fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)\n-                    ? MimeTypeMap.getSingleton().getExtensionFromMimeType(context.getContentResolver().getType(fileUri))\n-                    : MimeTypeMap.getFileExtensionFromUrl(fileUri.toString());\n+    public static String getFileExtensionFromUri(Uri fileUri) {\n+        String mimeType = getContentResolver().getType(fileUri);\n+\n+        String extension = fileUri.getScheme() != null && fileUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjAyMTM5Ng=="}, "originalCommit": {"oid": "714a264d9334378dc499b51d8a9edbe836d97269"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3078, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}