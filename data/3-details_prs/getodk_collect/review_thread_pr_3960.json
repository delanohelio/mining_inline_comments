{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NTEwMTI1", "number": 3960, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDozNTowN1rOENOilA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1NTo0MVrOEOUnpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzA1MTcyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDozNTowN1rOGvyiuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyNjowNFrOGxDkKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NDM0Nw==", "bodyText": "I ran into a problem with the audio stuff due to it instantiating a Scheduler so had to do a slight rework. I like the idea of using Supplier instead of an explicit ...Factory or ...Provider type now the new desugaring gives us access to it. We might still need a concrete class for Dagger but everything else should be able to use Supplier.", "url": "https://github.com/getodk/collect/pull/3960#discussion_r452764347", "createdAt": "2020-07-10T10:35:07Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "diffHunk": "@@ -19,10 +19,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Queue;\n+import java.util.function.Supplier;\n \n class AudioPlayerViewModel extends ViewModel implements MediaPlayer.OnCompletionListener {\n \n-    private final MediaPlayerFactory mediaPlayerFactory;\n+    private final Supplier<MediaPlayer> mediaPlayerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ec8de341fa689362426ec4c3da9edab7abd006"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTgxOQ==", "bodyText": "Sounds good. Add a note in the \"state of the union\"?", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454091819", "createdAt": "2020-07-14T04:26:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "diffHunk": "@@ -19,10 +19,11 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Queue;\n+import java.util.function.Supplier;\n \n class AudioPlayerViewModel extends ViewModel implements MediaPlayer.OnCompletionListener {\n \n-    private final MediaPlayerFactory mediaPlayerFactory;\n+    private final Supplier<MediaPlayer> mediaPlayerFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NDM0Nw=="}, "originalCommit": {"oid": "14ec8de341fa689362426ec4c3da9edab7abd006"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzA1NTcwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MultiClickGuard.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDozNjoxN1rOGvyk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDozNjoxN1rOGvyk8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NDkxMw==", "bodyText": "I ran into problems with this blocking clicks in tests locally", "url": "https://github.com/getodk/collect/pull/3960#discussion_r452764913", "createdAt": "2020-07-10T10:36:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/MultiClickGuard.java", "diffHunk": "@@ -13,6 +14,10 @@ private MultiClickGuard() {\n \n     // Debounce multiple clicks within the same screen\n     public static boolean allowClick(String className) {\n+        if (test) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ec8de341fa689362426ec4c3da9edab7abd006"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTc1OTY2OnYy", "diffSide": "RIGHT", "path": "async/src/main/java/org/odk/collect/async/CoroutineAndWorkManagerScheduler.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1MDo1MlrOGw_8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxMTowMFrOGxa1FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjM4Ng==", "bodyText": "No wildcard imports: https://google.github.io/styleguide/javaguide.html#s3.3.1-wildcard-imports\nThis isn't caught by static analysis because it's in another module, right? Perhaps we should make sure all those checks are consistent?", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454032386", "createdAt": "2020-07-14T00:50:52Z", "author": {"login": "lognaturel"}, "path": "async/src/main/java/org/odk/collect/async/CoroutineAndWorkManagerScheduler.kt", "diffHunk": "@@ -1,8 +1,9 @@\n package org.odk.collect.async\n \n-import androidx.work.WorkInfo\n-import androidx.work.WorkManager\n+import android.content.Context\n+import androidx.work.*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8fbceca6ca007891935e36745e39c597c35eb0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3Mjk4MA==", "bodyText": "Ooooft. Didn't realize we were missing those checks. Good catch. I'll fix in the next PR (for #3940)", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454472980", "createdAt": "2020-07-14T16:11:00Z", "author": {"login": "seadowg"}, "path": "async/src/main/java/org/odk/collect/async/CoroutineAndWorkManagerScheduler.kt", "diffHunk": "@@ -1,8 +1,9 @@\n package org.odk.collect.async\n \n-import androidx.work.WorkInfo\n-import androidx.work.WorkManager\n+import android.content.Context\n+import androidx.work.*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjM4Ng=="}, "originalCommit": {"oid": "4d8fbceca6ca007891935e36745e39c597c35eb0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTc2MTc5OnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1MTo0N1rOGw_9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxMTo1MVrOGxa3PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjY3Mw==", "bodyText": "Either revert or move above related code.", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454032673", "createdAt": "2020-07-14T00:51:47Z", "author": {"login": "lognaturel"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -256,8 +256,10 @@ dependencies {\n     implementation \"org.slf4j:slf4j-api:2.0.0-alpha0\"\n     implementation \"com.arcao:slf4j-timber:3.1@aar\"\n \n-    implementation \"com.google.zxing:core:3.3.0\" //updating to 3.4.0 requires minSdkVersion >=24 https://github.com/zxing/zxing/releases/tag/zxing-3.4.0\n-    implementation \"com.journeyapps:zxing-android-embedded:3.6.0\" //updating would require minSdkVersion >=24\n+    implementation \"com.google.zxing:core:3.3.0\"\n+    //updating to 3.4.0 requires minSdkVersion >=24 https://github.com/zxing/zxing/releases/tag/zxing-3.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8fbceca6ca007891935e36745e39c597c35eb0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3MzUzMw==", "bodyText": "I think that's a weird reformat problem. Will just fix.", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454473533", "createdAt": "2020-07-14T16:11:51Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -256,8 +256,10 @@ dependencies {\n     implementation \"org.slf4j:slf4j-api:2.0.0-alpha0\"\n     implementation \"com.arcao:slf4j-timber:3.1@aar\"\n \n-    implementation \"com.google.zxing:core:3.3.0\" //updating to 3.4.0 requires minSdkVersion >=24 https://github.com/zxing/zxing/releases/tag/zxing-3.4.0\n-    implementation \"com.journeyapps:zxing-android-embedded:3.6.0\" //updating would require minSdkVersion >=24\n+    implementation \"com.google.zxing:core:3.3.0\"\n+    //updating to 3.4.0 requires minSdkVersion >=24 https://github.com/zxing/zxing/releases/tag/zxing-3.4.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjY3Mw=="}, "originalCommit": {"oid": "4d8fbceca6ca007891935e36745e39c597c35eb0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMTc2MjM2OnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1MjowNVrOGw_9cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMDo1MjowNVrOGw_9cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDAzMjc1NA==", "bodyText": "Either revert or move above", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454032754", "createdAt": "2020-07-14T00:52:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -270,7 +272,8 @@ dependencies {\n     // Dagger:\n     implementation \"com.google.dagger:dagger:${rootProject.daggerVersion}\"\n     annotationProcessor \"com.google.dagger:dagger-compiler:${rootProject.daggerVersion}\"\n-    testAnnotationProcessor \"com.google.dagger:dagger-compiler:${rootProject.daggerVersion}\" // Needed for injection into Robolectric tests\n+    testAnnotationProcessor \"com.google.dagger:dagger-compiler:${rootProject.daggerVersion}\"\n+    // Needed for injection into Robolectric tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d8fbceca6ca007891935e36745e39c597c35eb0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjE1NDQ3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormDetails.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyMzoxMlrOGxDhRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDoyMzoxMlrOGxDhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5MTA3OA==", "bodyText": "isNotOnDevice?", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454091078", "createdAt": "2020-07-14T04:23:12Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormDetails.java", "diffHunk": "@@ -28,25 +28,25 @@\n     private String formVersion;\n     private String hash;\n     private String manifestFileHash;\n-    private boolean isNewerFormVersionAvailable;\n-    private boolean areNewerMediaFilesAvailable;\n+    private boolean isNew;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b3a1107d212e6eedc70b35788f0175bb543c96"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjE5MjY4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/BlankFormsListViewModelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDo0Mzo0NVrOGxD24A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNDo0Mzo0NVrOGxD24A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA5NjYwOA==", "bodyText": "stars -> starts?", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454096608", "createdAt": "2020-07-14T04:43:45Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/BlankFormsListViewModelTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule;\n+import androidx.lifecycle.LiveData;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.odk.collect.android.preferences.PreferencesProvider;\n+import org.odk.collect.android.support.FakeScheduler;\n+import org.odk.collect.async.Scheduler;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class BlankFormsListViewModelTest {\n+\n+    @Rule\n+    public InstantTaskExecutorRule instantTaskExecutorRule = new InstantTaskExecutorRule();\n+\n+    @Test\n+    public void isSyncing_whenRepositoryStartSync_isTrue() {\n+        SyncStatusRepository syncRepository = new SyncStatusRepository();\n+\n+        BlankFormsListViewModel viewModel = new BlankFormsListViewModel(mock(Scheduler.class), syncRepository, mock(ServerFormsSynchronizer.class), mock(PreferencesProvider.class));\n+        LiveData<Boolean> syncing = viewModel.isSyncing();\n+\n+        syncRepository.startSync();\n+        assertThat(syncing.getValue(), is(true));\n+    }\n+\n+    @Test\n+    public void syncWithServer_starsSyncOnRepository() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b3a1107d212e6eedc70b35788f0175bb543c96"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDQ5NTA2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/BackgroundWorkManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo0NjoyM1rOGxZ0EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxODowMVrOGxbGzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NjMzNg==", "bodyText": "Feels weird that this doesn't also schedule and cancel form upload and download but I assume it'll come.", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454456336", "createdAt": "2020-07-14T15:46:23Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/BackgroundWorkManager.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.odk.collect.android.backgroundwork;\n+\n+public interface BackgroundWorkManager {\n+\n+    boolean isFormUploaderRunning();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b3a1107d212e6eedc70b35788f0175bb543c96"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NzUxNw==", "bodyText": "Yeah it's on the way!", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454477517", "createdAt": "2020-07-14T16:18:01Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/BackgroundWorkManager.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.odk.collect.android.backgroundwork;\n+\n+public interface BackgroundWorkManager {\n+\n+    boolean isFormUploaderRunning();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NjMzNg=="}, "originalCommit": {"oid": "20b3a1107d212e6eedc70b35788f0175bb543c96"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDUzMzUxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/ServerFormsSynchronizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1NTo0MVrOGxaM8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNjoxOToyN1rOGxbLCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MjcwNg==", "bodyText": "Why not cover a little more ground and have a form-1 with some form version in the repository before the synchronization and then assert that the repository contains the form with the new version? That would better match the level of the delete test below, too.", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454462706", "createdAt": "2020-07-14T15:55:41Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/ServerFormsSynchronizerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.forms.FormRepository;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class ServerFormsSynchronizerTest {\n+\n+    private ServerFormsSynchronizer synchronizer;\n+    private RecordingFormDownloader formDownloader;\n+    private FormRepository formRepository;\n+    private ServerFormsDetailsFetcher serverFormDetailsFetcher;\n+\n+    @Before\n+    public void setup() {\n+        formRepository = new InMemFormRepository();\n+        formDownloader = new RecordingFormDownloader();\n+        serverFormDetailsFetcher = mock(ServerFormsDetailsFetcher.class);\n+\n+        synchronizer = new ServerFormsSynchronizer(serverFormDetailsFetcher, formRepository, formDownloader);\n+    }\n+\n+    @Test\n+    public void downloadsNewForms() throws Exception {\n+        when(serverFormDetailsFetcher.fetchFormDetails()).thenReturn(asList(\n+                new ServerFormDetails(\"form-1\", \"http://example.com/form-1\", null, \"form-1\", \"server\", \"md5:form-1-hash\", null, true, false)\n+        ));\n+\n+        synchronizer.synchronize();\n+        assertThat(formDownloader.getDownloadedForms(), containsInAnyOrder(\"form-1\"));\n+    }\n+\n+    @Test\n+    public void downloadsUpdatedForms() throws Exception {\n+        when(serverFormDetailsFetcher.fetchFormDetails()).thenReturn(asList(\n+                new ServerFormDetails(\"form-1\", \"http://example.com/form-1\", null, \"form-1\", \"server\", \"md5:form-1-hash\", null, false, true)\n+        ));\n+\n+        synchronizer.synchronize();\n+        assertThat(formDownloader.getDownloadedForms(), containsInAnyOrder(\"form-1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20b3a1107d212e6eedc70b35788f0175bb543c96"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3ODYwMQ==", "bodyText": "Totally agree the test boundaries are inconsistent here. Need to do some refactoring of MultiFormDownloader to fix that though. That's something I'd like to fix up in the next PR as I'm going to have to touch the auto download code.", "url": "https://github.com/getodk/collect/pull/3960#discussion_r454478601", "createdAt": "2020-07-14T16:19:27Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/ServerFormsSynchronizerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.forms.Form;\n+import org.odk.collect.android.forms.FormRepository;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.Nullable;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class ServerFormsSynchronizerTest {\n+\n+    private ServerFormsSynchronizer synchronizer;\n+    private RecordingFormDownloader formDownloader;\n+    private FormRepository formRepository;\n+    private ServerFormsDetailsFetcher serverFormDetailsFetcher;\n+\n+    @Before\n+    public void setup() {\n+        formRepository = new InMemFormRepository();\n+        formDownloader = new RecordingFormDownloader();\n+        serverFormDetailsFetcher = mock(ServerFormsDetailsFetcher.class);\n+\n+        synchronizer = new ServerFormsSynchronizer(serverFormDetailsFetcher, formRepository, formDownloader);\n+    }\n+\n+    @Test\n+    public void downloadsNewForms() throws Exception {\n+        when(serverFormDetailsFetcher.fetchFormDetails()).thenReturn(asList(\n+                new ServerFormDetails(\"form-1\", \"http://example.com/form-1\", null, \"form-1\", \"server\", \"md5:form-1-hash\", null, true, false)\n+        ));\n+\n+        synchronizer.synchronize();\n+        assertThat(formDownloader.getDownloadedForms(), containsInAnyOrder(\"form-1\"));\n+    }\n+\n+    @Test\n+    public void downloadsUpdatedForms() throws Exception {\n+        when(serverFormDetailsFetcher.fetchFormDetails()).thenReturn(asList(\n+                new ServerFormDetails(\"form-1\", \"http://example.com/form-1\", null, \"form-1\", \"server\", \"md5:form-1-hash\", null, false, true)\n+        ));\n+\n+        synchronizer.synchronize();\n+        assertThat(formDownloader.getDownloadedForms(), containsInAnyOrder(\"form-1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MjcwNg=="}, "originalCommit": {"oid": "20b3a1107d212e6eedc70b35788f0175bb543c96"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3228, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}