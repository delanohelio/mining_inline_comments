{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDk5Nzk1", "number": 4241, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NjowM1rOE_IlhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1NjoyNFrOE_I0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM2NDIxOnYy", "diffSide": "RIGHT", "path": ".circleci/config.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NjowM1rOH8q_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0NjowM1rOH8q_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MTEwMQ==", "bodyText": "Now that we have a test file in strings we should really be running it on CI.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533381101", "createdAt": "2020-12-01T12:46:03Z", "author": {"login": "seadowg"}, "path": ".circleci/config.yml", "diffHunk": "@@ -57,6 +57,9 @@ jobs:\n       - run:\n           name: Run async unit tests\n           command: ./gradlew -PdisablePreDex --no-daemon --max-workers=2 async:testDebug\n+      - run:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007b6e1b96971c95c9fbd3b8769e17fb2a108ffe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM2ODQ2OnYy", "diffSide": "RIGHT", "path": "async/src/main/java/org/odk/collect/async/CoroutineScheduler.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0Njo1OVrOH8rCSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo0Njo1OVrOH8rCSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MTcwNQ==", "bodyText": "We won't always need deferred tasks so thought I'd split the implementations. I think long term it might make sense to split the interfaces but lets see how it evolves.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533381705", "createdAt": "2020-12-01T12:46:59Z", "author": {"login": "seadowg"}, "path": "async/src/main/java/org/odk/collect/async/CoroutineScheduler.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.odk.collect.async\n+\n+import kotlinx.coroutines.CoroutineScope\n+import kotlinx.coroutines.delay\n+import kotlinx.coroutines.isActive\n+import kotlinx.coroutines.launch\n+import kotlinx.coroutines.withContext\n+import java.util.function.Consumer\n+import java.util.function.Supplier\n+import kotlin.coroutines.CoroutineContext\n+\n+open class CoroutineScheduler(private val foregroundContext: CoroutineContext, private val backgroundContext: CoroutineContext) : Scheduler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "007b6e1b96971c95c9fbd3b8769e17fb2a108ffe"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM3OTgxOnYy", "diffSide": "RIGHT", "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderViewModel.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1MDowMlrOH8rJDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1MDowMlrOH8rJDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4MzQzNw==", "bodyText": "I think we're now in a better place with this abstraction. Adding time/amplitude helped it make more sense as it forced the key data exposed to be the current \"session\" details.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533383437", "createdAt": "2020-12-01T12:50:02Z", "author": {"login": "seadowg"}, "path": "audiorecorder/src/main/java/org/odk/collect/audiorecorder/recording/AudioRecorderViewModel.kt", "diffHunk": "@@ -7,12 +7,12 @@ import java.io.File\n \n /**\n  * Interface for a ViewModel that records audio. Can only record once session", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM4ODI0OnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1MjoxNFrOH8rOAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzozMToyNVrOH9EHwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4NDcwNQ==", "bodyText": "This was the simplest waveform library I could find that still looked supported. I think we may want to improve this in the future or add our own flair.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533384705", "createdAt": "2020-12-01T12:52:14Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -320,6 +320,8 @@ dependencies {\n     // Better \"Subjects\" for Rx:\n     implementation \"com.jakewharton.rxrelay2:rxrelay:2.1.1\"\n \n+    implementation 'com.github.Armen101:AudioRecordView:1.0.2'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MjcwNg==", "bodyText": "I see a size increase of .2mb from 1.28.4 to this branch. Not sure how much is from this lib but either way it seems ok.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533792706", "createdAt": "2020-12-01T23:31:25Z", "author": {"login": "lognaturel"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -320,6 +320,8 @@ dependencies {\n     // Better \"Subjects\" for Rx:\n     implementation \"com.jakewharton.rxrelay2:rxrelay:2.1.1\"\n \n+    implementation 'com.github.Armen101:AudioRecordView:1.0.2'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4NDcwNQ=="}, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM5MTEwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1MzowOVrOH8rP4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1MzowOVrOH8rP4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4NTE4NA==", "bodyText": "These tests were failing due to the audio widget getting slightly taller and it forcing other items in the test to be scrolled off screen.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533385184", "createdAt": "2020-12-01T12:53:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/IntentGroupTest.java", "diffHunk": "@@ -128,7 +128,7 @@ public void externalApp_ShouldPopulateFields() throws IOException {\n         resultIntent.setClipData(clipData);\n         resultIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n         intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, resultIntent));\n-        onView(withText(\"This is buttonText\")).perform(click());\n+        onView(withText(\"This is buttonText\")).perform(nestedScrollTo(), click());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjM5Nzk0OnYy", "diffSide": "RIGHT", "path": "strings/src/main/java/org/odk/collect/strings/format/LengthFormatter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1NTowNFrOH8rT7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MjowMFrOH9EWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4NjIyMg==", "bodyText": "Could totally see others disagreeing with moving this here. For me, it makes sense to have formatters etc live in strings but could see an argument that they should live in a separate utils module.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533386222", "createdAt": "2020-12-01T12:55:04Z", "author": {"login": "seadowg"}, "path": "strings/src/main/java/org/odk/collect/strings/format/LengthFormatter.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.odk.collect.strings.format\n+\n+import java.util.Locale\n+\n+private const val ONE_HOUR = 3600000\n+private const val ONE_MINUTE = 60000\n+private const val ONE_SECOND = 1000\n+\n+fun formatLength(milliseconds: Long): String {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjU0OQ==", "bodyText": "Seems fine to me.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533796549", "createdAt": "2020-12-01T23:42:00Z", "author": {"login": "lognaturel"}, "path": "strings/src/main/java/org/odk/collect/strings/format/LengthFormatter.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package org.odk.collect.strings.format\n+\n+import java.util.Locale\n+\n+private const val ONE_HOUR = 3600000\n+private const val ONE_MINUTE = 60000\n+private const val ONE_SECOND = 1000\n+\n+fun formatLength(milliseconds: Long): String {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4NjIyMg=="}, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjQwMzI4OnYy", "diffSide": "RIGHT", "path": "testshared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1NjoyNFrOH8rW7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMjo1NjoyNFrOH8rW7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM4Njk5MA==", "bodyText": "For some of the tests this needed to be a bit more advanced so it now actually keeps scheduled tasks in queues/lists so it runs them in the correct order and can run repeated tasks.", "url": "https://github.com/getodk/collect/pull/4241#discussion_r533386990", "createdAt": "2020-12-01T12:56:24Z", "author": {"login": "seadowg"}, "path": "testshared/src/main/java/org/odk/collect/testshared/FakeScheduler.kt", "diffHunk": "@@ -3,58 +3,72 @@ package org.odk.collect.testshared\n import org.odk.collect.async.Cancellable\n import org.odk.collect.async.Scheduler\n import org.odk.collect.async.TaskSpec\n+import java.util.LinkedList\n import java.util.function.Consumer\n import java.util.function.Supplier\n \n class FakeScheduler : Scheduler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71fc627b45b57b370e1f186bb1bef07d4d22d5c0"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3178, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}