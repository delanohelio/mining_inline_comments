{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzMyMjQw", "number": 3645, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzowMjo1OVrODhD5fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMDozM1rODji8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTkzNDcwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzowMzowMFrOFrnOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoyNzowMlrOFvaTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3NTc1NQ==", "bodyText": "I've chosen to not extend the QuestionWidgetTest. From looking at a lot of our tests, although this pattern initially makes sense to me, it seems we run into problems with widgets having different behaviours for some of the common methods. I thought trying to build out helpers QuestionWidgetHelpers would be a more flexible approach - make the tests easy to write rather than making the tests hard to change.\nAdditionally it feels like the hierarchical nature of the widgets has only really caused problems (unpicking StringWidget common code for example) and I think using test extension here feeds into that problem as well.\nInterested to see what others think of this however!", "url": "https://github.com/getodk/collect/pull/3645#discussion_r381275755", "createdAt": "2020-02-19T13:03:00Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d314e5aba5ba6d3eb86acf12203213d4c9da9577"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1ODM5NA==", "bodyText": "On one hand it's too bad that we'll end up with a bunch of trivial duplicated tests. But on the other they're really easy to write and there is value to having each widget considered independently so that they can more easily be refactored to suit their specific needs as you say. We just have to be careful to make sure all the same edge cases are considered.", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385258394", "createdAt": "2020-02-27T17:27:02Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI3NTc1NQ=="}, "originalCommit": {"oid": "d314e5aba5ba6d3eb86acf12203213d4c9da9577"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTkzNjgwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/support/MockFormEntryPromptBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxNjoxNFrOFvZ7fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozNTowOFrOFvan2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjIyMQ==", "bodyText": "Huh, I didn't know this was possible. I guess this makes the resulting form entry prompt more of a spy.", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385252221", "createdAt": "2020-02-27T17:16:14Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/support/MockFormEntryPromptBuilder.java", "diffHunk": "@@ -91,4 +91,11 @@ public MockFormEntryPromptBuilder withAnswerDisplayText(String text) {\n \n         return this;\n     }\n+\n+    public MockFormEntryPromptBuilder withAnswer(IAnswerData answer) {\n+        when(prompt.getAnswerValue()).thenReturn(answer);\n+        when(prompt.getAnswerText()).thenCallRealMethod();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzU3Nw==", "bodyText": "Yeah I'm not a fan of this. Ideally this would just setup a real FormEntryPrompt but it's really hard to build one. The getAnswerText method definitely feels like a \"decorator\" that shouldn't really be on the FormEntryPrompt as well.", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385263577", "createdAt": "2020-02-27T17:35:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/support/MockFormEntryPromptBuilder.java", "diffHunk": "@@ -91,4 +91,11 @@ public MockFormEntryPromptBuilder withAnswerDisplayText(String text) {\n \n         return this;\n     }\n+\n+    public MockFormEntryPromptBuilder withAnswer(IAnswerData answer) {\n+        when(prompt.getAnswerValue()).thenReturn(answer);\n+        when(prompt.getAnswerText()).thenCallRealMethod();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjIyMQ=="}, "originalCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTk5MTk0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozMDozM1rOFvaeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozNTo0N1rOFvapHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MTEyMw==", "bodyText": "This makes me so angry. Why \"OK\"?! Everything about this trigger widget is objectionable starting from the fact that trigger is a well-defined concept in W3C XForms and that this is something else entirely.\nNo action to take, just venting. \ud83d\ude3e", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385261123", "createdAt": "2020-02-27T17:30:33Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"OK\"));\n+    }\n+\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer(), nullValue());\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(TriggerWidget.OK_TEXT);\n+    @Test\n+    public void clearAnswer_callsValueChangeListeners() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n-    @Override\n-    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n-        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n-        assertTrue(getWidget().getTriggerButton().isChecked());\n+    @Test\n+    public void usingReadOnlyOption_makesAllClickableElementsDisabled() {\n+        TriggerWidget widget = createWidget(promptWithReadOnly());\n+        assertThat(widget.getCheckBox().getVisibility(), equalTo(View.VISIBLE));\n+        assertThat(widget.getCheckBox().isEnabled(), equalTo(Boolean.FALSE));\n     }\n \n     @Test\n-    public void checkingTheTriggerBoxShouldSetTheAnswer() {\n-        TriggerWidget widget = getWidget();\n-        assertNull(widget.getAnswer());\n+    public void whenPromptAnswerDoesNotHaveAnswer_checkboxIsUnchecked() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(widget.getCheckBox().isChecked(), equalTo(false));\n+    }\n \n-        CheckBox triggerButton = widget.getTriggerButton();\n-        assertFalse(triggerButton.isChecked());\n+    @Test\n+    public void whenPromptHasAnswer_checkboxIsChecked() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+        assertThat(widget.getCheckBox().isChecked(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void checkingCheckbox_setsAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        CheckBox triggerButton = widget.getCheckBox();\n \n         triggerButton.setChecked(true);\n-        triggerButton.callOnClick();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"OK\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MzkwMA==", "bodyText": "\ud83d\udd25", "url": "https://github.com/getodk/collect/pull/3645#discussion_r385263900", "createdAt": "2020-02-27T17:35:47Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/TriggerWidgetTest.java", "diffHunk": "@@ -1,67 +1,98 @@\n package org.odk.collect.android.widgets;\n \n-import androidx.annotation.NonNull;\n-\n import android.view.View;\n import android.widget.CheckBox;\n \n-import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.mockito.Mockito.when;\n-\n-/**\n- * @author James Knight\n- */\n-\n-public class TriggerWidgetTest extends QuestionWidgetTest<TriggerWidget, StringData> {\n-    @NonNull\n-    @Override\n-    public TriggerWidget createWidget() {\n-        return new TriggerWidget(activity, new QuestionDetails(formEntryPrompt, \"formAnalyticsID\"));\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.verify;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnly;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TriggerWidgetTest {\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithAnswer(null)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"OK\"));\n+    }\n+\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+\n+        widget.clearAnswer();\n+        assertThat(widget.getAnswer(), nullValue());\n     }\n \n-    @NonNull\n-    @Override\n-    public StringData getNextAnswer() {\n-        return new StringData(TriggerWidget.OK_TEXT);\n+    @Test\n+    public void clearAnswer_callsValueChangeListeners() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n     }\n \n-    @Override\n-    public void getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer() {\n-        super.getAnswerShouldReturnExistingAnswerIfPromptHasExistingAnswer();\n-        assertTrue(getWidget().getTriggerButton().isChecked());\n+    @Test\n+    public void usingReadOnlyOption_makesAllClickableElementsDisabled() {\n+        TriggerWidget widget = createWidget(promptWithReadOnly());\n+        assertThat(widget.getCheckBox().getVisibility(), equalTo(View.VISIBLE));\n+        assertThat(widget.getCheckBox().isEnabled(), equalTo(Boolean.FALSE));\n     }\n \n     @Test\n-    public void checkingTheTriggerBoxShouldSetTheAnswer() {\n-        TriggerWidget widget = getWidget();\n-        assertNull(widget.getAnswer());\n+    public void whenPromptAnswerDoesNotHaveAnswer_checkboxIsUnchecked() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        assertThat(widget.getCheckBox().isChecked(), equalTo(false));\n+    }\n \n-        CheckBox triggerButton = widget.getTriggerButton();\n-        assertFalse(triggerButton.isChecked());\n+    @Test\n+    public void whenPromptHasAnswer_checkboxIsChecked() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(new StringData(\"OK\")));\n+        assertThat(widget.getCheckBox().isChecked(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void checkingCheckbox_setsAnswer() {\n+        TriggerWidget widget = createWidget(promptWithAnswer(null));\n+        CheckBox triggerButton = widget.getCheckBox();\n \n         triggerButton.setChecked(true);\n-        triggerButton.callOnClick();\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"OK\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2MTEyMw=="}, "originalCommit": {"oid": "427718ee410a5db4d8b8170b2405c058bb716c04"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3487, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}