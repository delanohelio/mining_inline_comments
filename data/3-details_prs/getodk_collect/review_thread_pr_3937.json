{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Mjk4Nzg5", "number": 3937, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1Mzo0OFrOEJ6PYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo0Mjo1OVrOEcqMPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODI2ODUwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1Mzo0OFrOGqpwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1Mzo0OFrOGqpwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NzUxNQ==", "bodyText": "I have three Ratingbar with different styles In the XML file. All of thems visibility is turned off by default. This part of code checks which Ratingbar needs to be displayed depending on the number of stars and screen dimensions.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r447377515", "createdAt": "2020-06-30T02:53:48Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkzMzAxOnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0MjoyMFrOGtOMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDo1Nzo1OVrOGtSn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTcwMg==", "bodyText": "It looks like Google have switched up how this should be enabled annoyingly (found here). This will throw up a deprecation warning on build. Instead, we need:\n android {\n    buildFeatures {\n        viewBinding true\n    }\n}", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450071702", "createdAt": "2020-07-06T08:42:20Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,6 +70,10 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n+    viewBinding {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5ODAyOQ==", "bodyText": "I did the same initially, but the Gradle sync fails and it says No signature of method: build_.android() is applicable for argument types", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450098029", "createdAt": "2020-07-06T09:28:15Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,6 +70,10 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n+    viewBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTcwMg=="}, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNjQ1NA==", "bodyText": "Ah it looks like this PR has the older Gradle plugin. If you update your branch (git rebase master) so it has the latest changes from master you should be able to use the new definition.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450126454", "createdAt": "2020-07-06T10:20:34Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,6 +70,10 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n+    viewBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTcwMg=="}, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE0NDIxNg==", "bodyText": "Oh sure I will do that @seadowg", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450144216", "createdAt": "2020-07-06T10:57:59Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,6 +70,10 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n+    viewBinding {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTcwMg=="}, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTkzNTM5OnYy", "diffSide": "RIGHT", "path": "config/quality.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0MzowMlrOGtOOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxODozMVrOGtResQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjA4NQ==", "bodyText": "What was this needed for?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450072085", "createdAt": "2020-07-06T08:43:02Z", "author": {"login": "seadowg"}, "path": "config/quality.gradle", "diffHunk": "@@ -55,6 +55,7 @@ android {\n         abortOnError true\n         xmlReport true\n         htmlReport true\n+        checkGeneratedSources true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4ODA4NA==", "bodyText": "I used this as otherwise ./gradlew lintDebug fails and it gives an error for the unused resource (geo_widget_answer.xml)", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450088084", "createdAt": "2020-07-06T09:10:27Z", "author": {"login": "SaumiaSinghal"}, "path": "config/quality.gradle", "diffHunk": "@@ -55,6 +55,7 @@ android {\n         abortOnError true\n         xmlReport true\n         htmlReport true\n+        checkGeneratedSources true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjA4NQ=="}, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNTQ4OQ==", "bodyText": "Ah do you mean rating_widget_answer.xml? I was confused initially but guessing this is because of View Binding's magic. Makes sense now!", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450125489", "createdAt": "2020-07-06T10:18:31Z", "author": {"login": "seadowg"}, "path": "config/quality.gradle", "diffHunk": "@@ -55,6 +55,7 @@ android {\n         abortOnError true\n         xmlReport true\n         htmlReport true\n+        checkGeneratedSources true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjA4NQ=="}, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk2NjE1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/rating_widget_answer.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MToyNVrOGtOgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MToyNVrOGtOgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NjgzNA==", "bodyText": "All these padding values can just be replaced with one padding as they are all the same!", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450076834", "createdAt": "2020-07-06T08:51:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/rating_widget_answer.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"wrap_content\"\n+    android:layout_height=\"match_parent\"\n+    android:paddingStart=\"@dimen/margin_small\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTk4MTIyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NToxMlrOGtOphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NToxMlrOGtOphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTEwOA==", "bodyText": "I think you can  use ScreenUtils.getScreenWidth() here and get rid of getScreenDimensions() at all.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450079108", "createdAt": "2020-07-06T08:55:12Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n+        ratingBar.setRating(0.0F);\n+    }\n \n-        answer = null;\n-        widgetValueChanged();\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = getResources().getDrawable(R.drawable.ic_star);\n+    private int calculateColumns(int widthOfStar) {\n         DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTI2MTU3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoxOTozMVrOGunq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoxOTozMVrOGunq_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzNzY2MA==", "bodyText": "You have two blank lines here please remove one.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451537660", "createdAt": "2020-07-08T13:19:31Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,91 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTMxMjEyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzozMDo1MlrOGuoKQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyNzoxNVrOGvG-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA==", "bodyText": "This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451545664", "createdAt": "2020-07-08T13:30:52Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-        binding.ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        binding.ratingBar.setStepSize(1.0F);\n     }\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        binding.ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        binding.ratingBar.setEnabled(!prompt.isReadOnly());\n+\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n+\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n+            }\n+        }\n+\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            binding.ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar.setOnLongClickListener(l);\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar.getRating() == 0.0F ? null : new IntegerData((int) binding.ratingBar.getRating());\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar.setRating(0.0F);\n+        ratingBar.setRating(0.0F);\n     }\n \n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n+    protected RatingBar getRatingBar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35dbc239935239af8b99df525fc63209b85c9c37"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MDUxNw==", "bodyText": "Thanks @grzesiek2010! That's a better approach.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r452050517", "createdAt": "2020-07-09T08:27:15Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-        binding.ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        binding.ratingBar.setStepSize(1.0F);\n     }\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        binding.ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        binding.ratingBar.setEnabled(!prompt.isReadOnly());\n+\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n+\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n+            }\n+        }\n+\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            binding.ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar.setOnLongClickListener(l);\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar.getRating() == 0.0F ? null : new IntegerData((int) binding.ratingBar.getRating());\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar.setRating(0.0F);\n+        ratingBar.setRating(0.0F);\n     }\n \n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n+    protected RatingBar getRatingBar() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA=="}, "originalCommit": {"oid": "35dbc239935239af8b99df525fc63209b85c9c37"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTMzNDMwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzozNjowNlrOGuoYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzozNjowNlrOGuoYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTIwMA==", "bodyText": "Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451549200", "createdAt": "2020-07-08T13:36:06Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35dbc239935239af8b99df525fc63209b85c9c37"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTM4MDEwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo0NjozMVrOGuo0oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo0NjozMVrOGuo0oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1NjUxMg==", "bodyText": "Should be returns null not zero right?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451556512", "createdAt": "2020-07-08T13:46:31Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java", "diffHunk": "@@ -2,60 +2,130 @@\n \n import android.view.View;\n \n-import androidx.annotation.NonNull;\n-\n import org.javarosa.core.model.RangeQuestion;\n-import org.javarosa.core.model.data.IntegerData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import java.math.BigDecimal;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithRangeQuestionAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndRangeQuestion;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n-public class RatingWidgetTest extends QuestionWidgetTest<RatingWidget, IntegerData> {\n+@RunWith(RobolectricTestRunner.class)\n+public class RatingWidgetTest {\n \n-    private final IntegerData answer = new IntegerData(4);\n+    private RangeQuestion rangeQuestion;\n \n     @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n+    public void setup() {\n+        rangeQuestion = mock(RangeQuestion.class);\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n+    }\n+\n+    @Test\n+    public void ratingBarShowsCorrectNumberOfStars() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n+        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTQwMDgxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo1MTowOFrOGupBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo1MTowOFrOGupBwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1OTg3Mw==", "bodyText": "You can use it in other widgets as well so you should''t use Range word here.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451559873", "createdAt": "2020-07-08T13:51:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTQwMjE4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo1MToyNlrOGupCoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo1MToyNlrOGupCoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2MDA5Nw==", "bodyText": "Same as above it's not just for range widgets.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451560097", "createdAt": "2020-07-08T13:51:26Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withQuestion(questionDef)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mjg3NDk4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyODoyN1rOG0CXQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyODoyN1rOG0CXQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxNzg1OQ==", "bodyText": "Both can be private.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457217859", "createdAt": "2020-07-20T09:28:27Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mjg3OTgzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyOToyMVrOG0CaFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyOToyMVrOG0CaFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxODU4Mg==", "bodyText": "Please factor it out to a separate method, I mean the calculation because you can keep the variable.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457218582", "createdAt": "2020-07-20T09:29:21Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Mjg5NTkxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMTo1NFrOG0Cidw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMTo1NFrOG0Cidw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMDcyNw==", "bodyText": "I think more readable way of using the ternarry operator in this case would be:\nreturn binding.ratingBar1.getRating() == 0.0F \n                        ? null \n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n\nso new line for each option.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457220727", "createdAt": "2020-07-20T09:31:54Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F ? null :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkwNTA4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzoxOVrOG0CnKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozMzoxOVrOG0CnKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMTkyOQ==", "bodyText": "Please fix this one-char parameter name, even simple listener would be better.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457221929", "createdAt": "2020-07-20T09:33:19Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkyMzI2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNjozOVrOG0CxPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozNjozOVrOG0CxPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDUwOA==", "bodyText": "This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457224508", "createdAt": "2020-07-20T09:36:39Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjkzMDYyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozODoxOVrOG0C1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo1ODowNVrOG0Dt1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA==", "bodyText": "You already have `android:stepSize in the layout file so why do you need this here too?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457225638", "createdAt": "2020-07-20T09:38:19Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDAyMQ==", "bodyText": "I'll fix this. Thanks for pointing out", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457240021", "createdAt": "2020-07-20T09:58:05Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA=="}, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjU3NDQ2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo1OTowOFrOG4V8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzo0MDowMVrOG4XcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw==", "bodyText": "Could this change have been driven out with a test? Maybe there was one and I missed it!", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461732887", "createdAt": "2020-07-28T16:59:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -61,8 +61,8 @@ protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int a\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n             binding.ratingBar2.setRating(0.0F);\n+            binding.ratingBar1.setRating(rating);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe52b0bc1a72fa30dbe1187c1b5013d58943354"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzQ5OA==", "bodyText": "Sorry @seadowg for missing the tests. I added unit tests and confirmed that unit testchangingRating_updatesAnswer_forRatingBarInMultipleLines() fails for the last commit, and passes on the latest one.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461757498", "createdAt": "2020-07-28T17:40:01Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -61,8 +61,8 @@ protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int a\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n             binding.ratingBar2.setRating(0.0F);\n+            binding.ratingBar1.setRating(rating);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw=="}, "originalCommit": {"oid": "1fe52b0bc1a72fa30dbe1187c1b5013d58943354"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDg2ODQ1OnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo0Mjo1OVrOHHUqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo0Mjo1OVrOHHUqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0MDU3OQ==", "bodyText": "I don't think we need this anymore right? It's enabled in the android block now.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r477440579", "createdAt": "2020-08-26T16:42:59Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,8 +70,8 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n-    viewBinding {\n-        enabled = true\n+    buildFeatures {\n+        viewBinding true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3218, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}