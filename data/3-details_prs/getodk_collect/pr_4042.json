{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMTc0MTA4", "number": 4042, "title": "Rework Bearing Widget", "bodyText": "This PR includes the work on rewriting the framework of Bearing widget.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nI don't think there are any regression risks as of now.\nDo we need any specific form for testing your changes? If so, please attach one.\nAny form having Bearing widget like AllWidgetsForm.\nDoes this change require updates to documentation? If so, please file an issue here and include the link below.\nNo\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-08-25T12:36:50Z", "url": "https://github.com/getodk/collect/pull/4042", "merged": true, "mergeCommit": {"oid": "efed9d156bdc186e944c74037c79cb7964157ee1"}, "closed": true, "closedAt": "2020-10-01T07:58:02Z", "author": {"login": "SaumiaSinghal"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCYmENgBqjM2OTA1NjY5MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOAYaBABqjM4MjU2OTIxNjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b91957baec44ccf24583b112f4ebaf7b9cbe7e3a", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/b91957baec44ccf24583b112f4ebaf7b9cbe7e3a", "committedDate": "2020-08-25T13:11:20Z", "message": "fix lint error"}, "afterCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e", "committedDate": "2020-08-25T15:03:33Z", "message": "create bearing_widgte_answer.xml and code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjI4Nzky", "url": "https://github.com/getodk/collect/pull/4042#pullrequestreview-475228792", "createdAt": "2020-08-26T07:39:49Z", "commit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozOTo0OVrOHG_sDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwODoxOToxNFrOHHBH6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5Njk3Mw==", "bodyText": "As I remember in other widgets you have refactored you set answer in onCreateAnswerView(), am I right? If so please be consequent.", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477096973", "createdAt": "2020-08-26T07:39:49Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwMzAxMg==", "bodyText": "There is something wrong with the button text. You set it to default here but it's not set to R.string.replace_bearing when we record bearing (only if we create the widget from scratch and there is an answer).", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477103012", "createdAt": "2020-08-26T07:50:10Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwNjEzMw==", "bodyText": "I think those start/end margins should be used in the parent layout then you don't need to duplicate it for each child. For example it looks bad for the edittext:", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477106133", "createdAt": "2020-08-26T07:55:23Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/res/values/buttons.xml", "diffHunk": "@@ -6,6 +6,15 @@\n         <item name=\"android:textStyle\">normal</item>\n     </style>\n \n+    <style name=\"Widget.Collect.Button.WidgetAnswer\" parent=\"Widget.Collect.Button.Custom\">\n+        <item name=\"android:layout_width\">match_parent</item>\n+        <item name=\"android:layout_height\">wrap_content</item>\n+        <item name=\"android:padding\">@dimen/margin_small</item>\n+        <item name=\"android:layout_marginTop\">@dimen/margin_extra_small</item>\n+        <item name=\"android:layout_marginStart\">@dimen/margin_standard</item>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEwOTc1OQ==", "bodyText": "I would call the filed and the method areSensorsAvailable.", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477109759", "createdAt": "2020-08-26T08:01:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExMDQ0OQ==", "bodyText": "I think this method is unnecessarily big can we just have:\n        return sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null \n                && sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) != null;", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477110449", "createdAt": "2020-08-26T08:02:20Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));\n         widgetValueChanged();\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        String s = answer.getText().toString();\n-\n-        if (s.equals(\"\")) {\n-            return null;\n-        } else {\n-            return new StringData(s);\n-        }\n+        String answerText = binding.answerText.getText().toString();\n+        return answerText.isEmpty() ? null : new StringData(answerText);\n     }\n \n     @Override\n     public void setBinaryData(Object answer) {\n-        this.answer.setText((String) answer);\n+        binding.answerText.setText((String) answer);\n         widgetValueChanged();\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n         if (isSensorAvailable) {\n-            getBearingButton.setOnLongClickListener(l);\n+            binding.bearingButton.setOnLongClickListener(l);\n         }\n-        answer.setOnLongClickListener(l);\n+        binding.answerText.setOnLongClickListener(l);\n     }\n \n     @Override\n     public void cancelLongPress() {\n         super.cancelLongPress();\n         if (isSensorAvailable) {\n-            getBearingButton.cancelLongPress();\n+            binding.bearingButton.cancelLongPress();\n         }\n-        answer.cancelLongPress();\n+        binding.answerText.cancelLongPress();\n     }\n \n     private boolean checkForRequiredSensors() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExMTQ1NA==", "bodyText": "I don't like mixing things here I mean showing the toast i the middle of other stuff. It should be at the begging or at the end.", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477111454", "createdAt": "2020-08-26T08:04:09Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));\n         widgetValueChanged();\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        String s = answer.getText().toString();\n-\n-        if (s.equals(\"\")) {\n-            return null;\n-        } else {\n-            return new StringData(s);\n-        }\n+        String answerText = binding.answerText.getText().toString();\n+        return answerText.isEmpty() ? null : new StringData(answerText);\n     }\n \n     @Override\n     public void setBinaryData(Object answer) {\n-        this.answer.setText((String) answer);\n+        binding.answerText.setText((String) answer);\n         widgetValueChanged();\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n         if (isSensorAvailable) {\n-            getBearingButton.setOnLongClickListener(l);\n+            binding.bearingButton.setOnLongClickListener(l);\n         }\n-        answer.setOnLongClickListener(l);\n+        binding.answerText.setOnLongClickListener(l);\n     }\n \n     @Override\n     public void cancelLongPress() {\n         super.cancelLongPress();\n         if (isSensorAvailable) {\n-            getBearingButton.cancelLongPress();\n+            binding.bearingButton.cancelLongPress();\n         }\n-        answer.cancelLongPress();\n+        binding.answerText.cancelLongPress();\n     }\n \n     private boolean checkForRequiredSensors() {\n-\n         boolean isAccelerometerSensorAvailable = false;\n         boolean isMagneticFieldSensorAvailable = false;\n \n-        SensorManager sensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);\n         if (sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null) {\n             isAccelerometerSensorAvailable = true;\n         }\n         if (sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) != null) {\n             isMagneticFieldSensorAvailable = true;\n         }\n-\n         return isAccelerometerSensorAvailable && isMagneticFieldSensorAvailable;\n     }\n \n-    private EditText getEditText() {\n-        final EditText manualData = new EditText(getContext());\n-        manualData.setPadding(20, 20, 20, 20);\n-        manualData.setTextSize(TypedValue.COMPLEX_UNIT_DIP, getAnswerFontSize());\n-        manualData.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL);\n-        manualData.setKeyListener(new DigitsKeyListener(true, true));\n-        manualData.setFocusable(false);\n-        manualData.setFocusableInTouchMode(false);\n-        TableLayout.LayoutParams params = new TableLayout.LayoutParams();\n-        params.setMargins(7, 5, 7, 5);\n-        manualData.setLayoutParams(params);\n-\n-        manualData.addTextChangedListener(new TextWatcher() {\n-            @Override\n-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n-\n-            }\n-\n-            @Override\n-            public void onTextChanged(CharSequence s, int start, int before, int count) {\n-\n-            }\n-\n-            @Override\n-            public void afterTextChanged(Editable s) {\n-                widgetValueChanged();\n-            }\n-        });\n-\n-        return manualData;\n-    }\n-\n-    @Override\n-    public void onButtonClick(int buttonId) {\n+    private void onButtonClick() {\n         if (isSensorAvailable) {\n-            Intent i = new Intent(getContext(), BearingActivity.class);\n+            Intent intent = new Intent(getContext(), BearingActivity.class);\n             waitingForDataRegistry.waitForData(getFormEntryPrompt().getIndex());\n-            ((Activity) getContext()).startActivityForResult(i,\n-                    RequestCodes.BEARING_CAPTURE);\n+            ((Activity) getContext()).startActivityForResult(intent, RequestCodes.BEARING_CAPTURE);\n         } else {\n-            getBearingButton.setEnabled(false);\n+            binding.bearingButton.setEnabled(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExMTk2OA==", "bodyText": "Could you move it one line down? The reason is like below (mixing stuff).", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477111968", "createdAt": "2020-08-26T08:05:04Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));\n         widgetValueChanged();\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        String s = answer.getText().toString();\n-\n-        if (s.equals(\"\")) {\n-            return null;\n-        } else {\n-            return new StringData(s);\n-        }\n+        String answerText = binding.answerText.getText().toString();\n+        return answerText.isEmpty() ? null : new StringData(answerText);\n     }\n \n     @Override\n     public void setBinaryData(Object answer) {\n-        this.answer.setText((String) answer);\n+        binding.answerText.setText((String) answer);\n         widgetValueChanged();\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n         if (isSensorAvailable) {\n-            getBearingButton.setOnLongClickListener(l);\n+            binding.bearingButton.setOnLongClickListener(l);\n         }\n-        answer.setOnLongClickListener(l);\n+        binding.answerText.setOnLongClickListener(l);\n     }\n \n     @Override\n     public void cancelLongPress() {\n         super.cancelLongPress();\n         if (isSensorAvailable) {\n-            getBearingButton.cancelLongPress();\n+            binding.bearingButton.cancelLongPress();\n         }\n-        answer.cancelLongPress();\n+        binding.answerText.cancelLongPress();\n     }\n \n     private boolean checkForRequiredSensors() {\n-\n         boolean isAccelerometerSensorAvailable = false;\n         boolean isMagneticFieldSensorAvailable = false;\n \n-        SensorManager sensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);\n         if (sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null) {\n             isAccelerometerSensorAvailable = true;\n         }\n         if (sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) != null) {\n             isMagneticFieldSensorAvailable = true;\n         }\n-\n         return isAccelerometerSensorAvailable && isMagneticFieldSensorAvailable;\n     }\n \n-    private EditText getEditText() {\n-        final EditText manualData = new EditText(getContext());\n-        manualData.setPadding(20, 20, 20, 20);\n-        manualData.setTextSize(TypedValue.COMPLEX_UNIT_DIP, getAnswerFontSize());\n-        manualData.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL);\n-        manualData.setKeyListener(new DigitsKeyListener(true, true));\n-        manualData.setFocusable(false);\n-        manualData.setFocusableInTouchMode(false);\n-        TableLayout.LayoutParams params = new TableLayout.LayoutParams();\n-        params.setMargins(7, 5, 7, 5);\n-        manualData.setLayoutParams(params);\n-\n-        manualData.addTextChangedListener(new TextWatcher() {\n-            @Override\n-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n-\n-            }\n-\n-            @Override\n-            public void onTextChanged(CharSequence s, int start, int before, int count) {\n-\n-            }\n-\n-            @Override\n-            public void afterTextChanged(Editable s) {\n-                widgetValueChanged();\n-            }\n-        });\n-\n-        return manualData;\n-    }\n-\n-    @Override\n-    public void onButtonClick(int buttonId) {\n+    private void onButtonClick() {\n         if (isSensorAvailable) {\n-            Intent i = new Intent(getContext(), BearingActivity.class);\n+            Intent intent = new Intent(getContext(), BearingActivity.class);\n             waitingForDataRegistry.waitForData(getFormEntryPrompt().getIndex());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExMzQ3Mw==", "bodyText": "Do we really need this check? I think it's redundant.", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477113473", "createdAt": "2020-08-26T08:07:42Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));\n         widgetValueChanged();\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        String s = answer.getText().toString();\n-\n-        if (s.equals(\"\")) {\n-            return null;\n-        } else {\n-            return new StringData(s);\n-        }\n+        String answerText = binding.answerText.getText().toString();\n+        return answerText.isEmpty() ? null : new StringData(answerText);\n     }\n \n     @Override\n     public void setBinaryData(Object answer) {\n-        this.answer.setText((String) answer);\n+        binding.answerText.setText((String) answer);\n         widgetValueChanged();\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n         if (isSensorAvailable) {\n-            getBearingButton.setOnLongClickListener(l);\n+            binding.bearingButton.setOnLongClickListener(l);\n         }\n-        answer.setOnLongClickListener(l);\n+        binding.answerText.setOnLongClickListener(l);\n     }\n \n     @Override\n     public void cancelLongPress() {\n         super.cancelLongPress();\n         if (isSensorAvailable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExMzUzMQ==", "bodyText": "Do we really need this check? I think it's redundant.", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477113531", "createdAt": "2020-08-26T08:07:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));\n         widgetValueChanged();\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        String s = answer.getText().toString();\n-\n-        if (s.equals(\"\")) {\n-            return null;\n-        } else {\n-            return new StringData(s);\n-        }\n+        String answerText = binding.answerText.getText().toString();\n+        return answerText.isEmpty() ? null : new StringData(answerText);\n     }\n \n     @Override\n     public void setBinaryData(Object answer) {\n-        this.answer.setText((String) answer);\n+        binding.answerText.setText((String) answer);\n         widgetValueChanged();\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n         if (isSensorAvailable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzExNDI0MQ==", "bodyText": "isEmpty() would be better here instead of equals(\"\")", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477114241", "createdAt": "2020-08-26T08:09:07Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzEyMDQ4OA==", "bodyText": "Can we get rid of textBackground field and for example call here:\nbinding.answerText.setBackground(new EditText(getContext()).getBackground());", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477120488", "createdAt": "2020-08-26T08:19:14Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -21,176 +21,126 @@\n import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n-import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n+import android.view.View;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n     private final boolean isSensorAvailable;\n-    final EditText answer;\n     private final Drawable textBackground;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n+    private final SensorManager sensorManager;\n \n-    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry) {\n+    public BearingWidget(Context context, QuestionDetails questionDetails, WaitingForDataRegistry waitingForDataRegistry, SensorManager sensorManager) {\n         super(context, questionDetails);\n         this.waitingForDataRegistry = waitingForDataRegistry;\n+        this.sensorManager = sensorManager;\n \n         isSensorAvailable = checkForRequiredSensors();\n+        textBackground = binding.answerText.getBackground();\n+        binding.answerText.setBackground(null);\n \n-        LinearLayout answerLayout = new LinearLayout(getContext());\n-        answerLayout.setOrientation(LinearLayout.VERTICAL);\n-\n-        answer = getEditText();\n-        textBackground = answer.getBackground();\n-        answer.setBackground(null);\n-\n-        getBearingButton = createSimpleButton(getContext(), getFormEntryPrompt().isReadOnly(), getContext().getString(R.string.get_bearing), getAnswerFontSize(), this);\n+        String answerText = questionDetails.getPrompt().getAnswerText();\n+        if (answerText != null && !answerText.equals(\"\")) {\n+            binding.bearingButton.setText(getContext().getString(R.string.replace_bearing));\n+            binding.answerText.setText(answerText);\n+        }\n+    }\n \n-        answerLayout.addView(getBearingButton);\n-        answerLayout.addView(answer);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = BearingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n \n-        String s = questionDetails.getPrompt().getAnswerText();\n-        if (s != null && !s.equals(\"\")) {\n-            getBearingButton.setText(getContext().getString(R.string.replace_bearing));\n-            if (!isSensorAvailable) {\n-                answer.setText(s);\n-            }\n-            setBinaryData(s);\n+        if (prompt.isReadOnly()) {\n+            binding.bearingButton.setVisibility(GONE);\n+        } else {\n+            binding.bearingButton.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+            binding.bearingButton.setOnClickListener(v -> onButtonClick());\n         }\n-        addAnswerView(answerLayout, WidgetViewUtils.getStandardMargin(context));\n+        binding.answerText.setTextSize(TypedValue.COMPLEX_UNIT_DIP, answerFontSize);\n+\n+        return binding.getRoot();\n     }\n \n     @Override\n     public void clearAnswer() {\n-        answer.setText(null);\n-        getBearingButton.setText(getContext().getString(R.string.get_bearing));\n-\n+        binding.answerText.setText(null);\n+        binding.bearingButton.setText(getContext().getString(R.string.get_bearing));\n         widgetValueChanged();\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        String s = answer.getText().toString();\n-\n-        if (s.equals(\"\")) {\n-            return null;\n-        } else {\n-            return new StringData(s);\n-        }\n+        String answerText = binding.answerText.getText().toString();\n+        return answerText.isEmpty() ? null : new StringData(answerText);\n     }\n \n     @Override\n     public void setBinaryData(Object answer) {\n-        this.answer.setText((String) answer);\n+        binding.answerText.setText((String) answer);\n         widgetValueChanged();\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n         if (isSensorAvailable) {\n-            getBearingButton.setOnLongClickListener(l);\n+            binding.bearingButton.setOnLongClickListener(l);\n         }\n-        answer.setOnLongClickListener(l);\n+        binding.answerText.setOnLongClickListener(l);\n     }\n \n     @Override\n     public void cancelLongPress() {\n         super.cancelLongPress();\n         if (isSensorAvailable) {\n-            getBearingButton.cancelLongPress();\n+            binding.bearingButton.cancelLongPress();\n         }\n-        answer.cancelLongPress();\n+        binding.answerText.cancelLongPress();\n     }\n \n     private boolean checkForRequiredSensors() {\n-\n         boolean isAccelerometerSensorAvailable = false;\n         boolean isMagneticFieldSensorAvailable = false;\n \n-        SensorManager sensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);\n         if (sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER) != null) {\n             isAccelerometerSensorAvailable = true;\n         }\n         if (sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD) != null) {\n             isMagneticFieldSensorAvailable = true;\n         }\n-\n         return isAccelerometerSensorAvailable && isMagneticFieldSensorAvailable;\n     }\n \n-    private EditText getEditText() {\n-        final EditText manualData = new EditText(getContext());\n-        manualData.setPadding(20, 20, 20, 20);\n-        manualData.setTextSize(TypedValue.COMPLEX_UNIT_DIP, getAnswerFontSize());\n-        manualData.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL);\n-        manualData.setKeyListener(new DigitsKeyListener(true, true));\n-        manualData.setFocusable(false);\n-        manualData.setFocusableInTouchMode(false);\n-        TableLayout.LayoutParams params = new TableLayout.LayoutParams();\n-        params.setMargins(7, 5, 7, 5);\n-        manualData.setLayoutParams(params);\n-\n-        manualData.addTextChangedListener(new TextWatcher() {\n-            @Override\n-            public void beforeTextChanged(CharSequence s, int start, int count, int after) {\n-\n-            }\n-\n-            @Override\n-            public void onTextChanged(CharSequence s, int start, int before, int count) {\n-\n-            }\n-\n-            @Override\n-            public void afterTextChanged(Editable s) {\n-                widgetValueChanged();\n-            }\n-        });\n-\n-        return manualData;\n-    }\n-\n-    @Override\n-    public void onButtonClick(int buttonId) {\n+    private void onButtonClick() {\n         if (isSensorAvailable) {\n-            Intent i = new Intent(getContext(), BearingActivity.class);\n+            Intent intent = new Intent(getContext(), BearingActivity.class);\n             waitingForDataRegistry.waitForData(getFormEntryPrompt().getIndex());\n-            ((Activity) getContext()).startActivityForResult(i,\n-                    RequestCodes.BEARING_CAPTURE);\n+            ((Activity) getContext()).startActivityForResult(intent, RequestCodes.BEARING_CAPTURE);\n         } else {\n-            getBearingButton.setEnabled(false);\n+            binding.bearingButton.setEnabled(false);\n             ToastUtils.showLongToast(R.string.bearing_lack_of_sensors);\n-            answer.setBackground(textBackground);\n-            answer.setFocusable(true);\n-            answer.setFocusableInTouchMode(true);\n-            answer.requestFocus();\n+            binding.answerText.setBackground(textBackground);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe470d714ef9ea95aac4ad67ca86d9a9840ebd3e"}, "originalPosition": 215}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NzIxMTgx", "url": "https://github.com/getodk/collect/pull/4042#pullrequestreview-475721181", "createdAt": "2020-08-26T17:48:53Z", "commit": {"oid": "6c0aec9def09139713ec283d371300c65d6e772e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0ODo1NFrOHHXEsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0ODo1NFrOHHXEsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ4MDExMw==", "bodyText": "Now we use this only in one place so it doesn't make sense to keep the field we can just use the method which initializes it (areSensorsAvailable()).", "url": "https://github.com/getodk/collect/pull/4042#discussion_r477480113", "createdAt": "2020-08-26T17:48:54Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/BearingWidget.java", "diffHunk": "@@ -18,179 +18,125 @@\n import android.app.Activity;\n import android.content.Context;\n import android.content.Intent;\n-import android.graphics.drawable.Drawable;\n import android.hardware.Sensor;\n import android.hardware.SensorManager;\n-import android.text.Editable;\n-import android.text.InputType;\n-import android.text.TextWatcher;\n-import android.text.method.DigitsKeyListener;\n import android.util.TypedValue;\n-import android.widget.Button;\n+import android.view.View;\n import android.widget.EditText;\n-import android.widget.LinearLayout;\n-import android.widget.TableLayout;\n \n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n import org.odk.collect.android.activities.BearingActivity;\n+import org.odk.collect.android.databinding.BearingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n import org.odk.collect.android.utilities.ToastUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n import org.odk.collect.android.widgets.interfaces.BinaryDataReceiver;\n-import org.odk.collect.android.widgets.interfaces.ButtonClickListener;\n import org.odk.collect.android.widgets.utilities.WaitingForDataRegistry;\n \n-import static org.odk.collect.android.formentry.questions.WidgetViewUtils.createSimpleButton;\n import static org.odk.collect.android.utilities.ApplicationConstants.RequestCodes;\n \n /**\n  * BearingWidget is the widget that allows the user to get a compass heading.\n- *\n- * @author Carl Hartung (chartung@nafundi.com)\n  */\n @SuppressLint(\"ViewConstructor\")\n-public class BearingWidget extends QuestionWidget implements BinaryDataReceiver, ButtonClickListener {\n-    final Button getBearingButton;\n-    private final boolean isSensorAvailable;\n-    final EditText answer;\n-    private final Drawable textBackground;\n+public class BearingWidget extends QuestionWidget implements BinaryDataReceiver {\n+    BearingWidgetAnswerBinding binding;\n+\n+    private final boolean areSensorsAvailable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c0aec9def09139713ec283d371300c65d6e772e"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDg0Mjk0", "url": "https://github.com/getodk/collect/pull/4042#pullrequestreview-476484294", "createdAt": "2020-08-27T08:10:24Z", "commit": {"oid": "b2c732e41ba452af3e557717f1f41a0714c19085"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2c732e41ba452af3e557717f1f41a0714c19085", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/b2c732e41ba452af3e557717f1f41a0714c19085", "committedDate": "2020-08-26T18:34:29Z", "message": "update widget button and answerText style"}, "afterCommit": {"oid": "7574c72b0d1af3584cb5b16adc3ec6209ffb686c", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/7574c72b0d1af3584cb5b16adc3ec6209ffb686c", "committedDate": "2020-09-08T06:19:29Z", "message": "update widget button and answerText style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76349deee697ac68626f2f20e56ebfed4635bd93", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/76349deee697ac68626f2f20e56ebfed4635bd93", "committedDate": "2020-09-30T17:36:46Z", "message": "add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d60d12a48938dcb0bd8e688bf71a0fdf0aa60e", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e2d60d12a48938dcb0bd8e688bf71a0fdf0aa60e", "committedDate": "2020-09-30T17:38:18Z", "message": "create bearing_widgte_answer.xml and code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab107cd916f231513295f954ee7b680bda73e0b6", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/ab107cd916f231513295f954ee7b680bda73e0b6", "committedDate": "2020-09-30T17:38:24Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45d16279b152c0562be2ae4f27488a0d276be4a1", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/45d16279b152c0562be2ae4f27488a0d276be4a1", "committedDate": "2020-09-30T17:38:24Z", "message": "minor refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "674cff0cf33124cf8f64df54d750479147e66dd6", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/674cff0cf33124cf8f64df54d750479147e66dd6", "committedDate": "2020-09-30T17:38:24Z", "message": "update widget button and answerText style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7574c72b0d1af3584cb5b16adc3ec6209ffb686c", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/7574c72b0d1af3584cb5b16adc3ec6209ffb686c", "committedDate": "2020-09-08T06:19:29Z", "message": "update widget button and answerText style"}, "afterCommit": {"oid": "674cff0cf33124cf8f64df54d750479147e66dd6", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/674cff0cf33124cf8f64df54d750479147e66dd6", "committedDate": "2020-09-30T17:38:24Z", "message": "update widget button and answerText style"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2621, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}