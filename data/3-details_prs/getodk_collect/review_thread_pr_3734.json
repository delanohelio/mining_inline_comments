{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDY0MzAz", "number": 3734, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowMjo0NFrODramxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0Mjo0NlrODrbR8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODUxMjcwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjowMjo0NFrOF7wEGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo0MDowOFrOF8A0HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5Nzc4Nw==", "bodyText": "Super small thing but I'd recommend using title rather than name. I think title is very clearly from the title tag but name feels more ambiguous to me.", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398197787", "createdAt": "2020-03-25T22:02:44Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java", "diffHunk": "@@ -59,4 +63,8 @@ private void updateRequiresIdentity() {\n     private static boolean userIsValid(String user) {\n         return user != null && !user.isEmpty() && !isBlank(user);\n     }\n+\n+    public String getFormName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0f15bec0a28e093695d473c4f36aaca25c9e1f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MjIyMQ==", "bodyText": "Seems fair! Will change", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398472221", "createdAt": "2020-03-26T10:40:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java", "diffHunk": "@@ -59,4 +63,8 @@ private void updateRequiresIdentity() {\n     private static boolean userIsValid(String user) {\n         return user != null && !user.isEmpty() && !isBlank(user);\n     }\n+\n+    public String getFormName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5Nzc4Nw=="}, "originalCommit": {"oid": "bc0f15bec0a28e093695d473c4f36aaca25c9e1f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU2MjAyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyMTowOVrOF7wjZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzozNTowMFrOF8SgAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc5Ng==", "bodyText": "This feels more like a spy to me since it's keeping extra state and verifying it rather than holding an expectation of what it's supposed to receive. Not that important but would be good to be somewhat aligned. I'm referring to https://martinfowler.com/articles/mocksArentStubs.html.", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398205796", "createdAt": "2020-03-25T22:21:09Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n+\n+        StubAdminPasswordProvider() {\n+            super(null);\n+        }\n+\n+        @Override\n+        public boolean isAdminPasswordSet() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getAdminPassword() {\n+            return \"password\";\n+        }\n+    }\n+\n+    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9d1e52d3c0376bf09ab36de3e663f34c757895"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3NjM0NQ==", "bodyText": "Ach my fav article. Hoisted with my own petard! Yeah you're dead on. In my head was using for \"verification\" but you're right that it's doing \"recording\". I'll fix this!", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398476345", "createdAt": "2020-03-26T10:46:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n+\n+        StubAdminPasswordProvider() {\n+            super(null);\n+        }\n+\n+        @Override\n+        public boolean isAdminPasswordSet() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getAdminPassword() {\n+            return \"password\";\n+        }\n+    }\n+\n+    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc5Ng=="}, "originalCommit": {"oid": "ff9d1e52d3c0376bf09ab36de3e663f34c757895"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MTk4Nw==", "bodyText": "Hoisted with my own petard!\n\nWhat a lovely expression. \ud83d\udca5 @grzesiek2010 do you know this one?!", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398761987", "createdAt": "2020-03-26T17:35:00Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n+\n+        StubAdminPasswordProvider() {\n+            super(null);\n+        }\n+\n+        @Override\n+        public boolean isAdminPasswordSet() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getAdminPassword() {\n+            return \"password\";\n+        }\n+    }\n+\n+    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc5Ng=="}, "originalCommit": {"oid": "ff9d1e52d3c0376bf09ab36de3e663f34c757895"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODU4MTkyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjoyODoyNVrOF7wvaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo1NTo0NFrOF8BYRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODg3Mw==", "bodyText": "I can't wrap my brain around why you can call a private MockAdminPasswordDialogCallback field here?", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398208873", "createdAt": "2020-03-25T22:28:25Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9d1e52d3c0376bf09ab36de3e663f34c757895"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MTQ3OA==", "bodyText": "Because in onAttach we have:\nif (context instanceof AdminPasswordDialogCallback) {\n    callback = (AdminPasswordDialogCallback) context;\n}\nThe dialog assumes expects its host activity to implement the listener. We could decouple this but I didn't want to get into that. I'm not a fan of the pattern as it's awkward for testing (which is always a sign that the design is a little awkward) but it is actually how the Android docs suggest this should be done. Using an actual listener object would be a problem as it could cause weirdness with Fragment recreation.", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398481478", "createdAt": "2020-03-26T10:55:44Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODg3Mw=="}, "originalCommit": {"oid": "ff9d1e52d3c0376bf09ab36de3e663f34c757895"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODYxODYxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0MTowNFrOF7xFsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo1NjowMFrOF8BY4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNDU3OQ==", "bodyText": "While you're here, would you consider testing that the correct callback method is called if the password is incorrect?", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398214579", "createdAt": "2020-03-25T22:41:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+import android.os.Bundle;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.ARG_ACTION;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = createFragment();\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = createFragment();\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9477ff1122b0fd1bbe837a329e76ecddd9a9771"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MTYzNQ==", "bodyText": "Yeah sounds good", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398481635", "createdAt": "2020-03-26T10:56:00Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+import android.os.Bundle;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.ARG_ACTION;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = createFragment();\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = createFragment();\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNDU3OQ=="}, "originalCommit": {"oid": "b9477ff1122b0fd1bbe837a329e76ecddd9a9771"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODYyMzIwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0Mjo0NlrOF7xIWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDo1NjoyOVrOF8BZ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNTI1Nw==", "bodyText": "How about adding the notice from the PR here? (\"as much as possible we should be using arguments (for static data the dialog needs), Dagger (for dependencies) or ViewModel (for non static data) to get things into fragments so as to avoid crashes or weirdness when they are recreated.\")", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398215257", "createdAt": "2020-03-25T22:42:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java", "diffHunk": "@@ -154,13 +154,18 @@ public static Dialog createErrorDialog(@NonNull Activity activity, String errorM\n         return alertDialog;\n     }\n \n-    public static <T extends DialogFragment> T showIfNotShowing(Class<T> dialogClass, FragmentManager fragmentManager) {\n-        return showIfNotShowing(dialogClass, null, fragmentManager);\n+    @Nullable\n+    public static <T extends DialogFragment> T getDialog(Class<T> dialogClass, FragmentManager fragmentManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9477ff1122b0fd1bbe837a329e76ecddd9a9771"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MTkwNg==", "bodyText": "Ah I actually meant to do this but it slipped my mind. Will do!", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398481906", "createdAt": "2020-03-26T10:56:29Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java", "diffHunk": "@@ -154,13 +154,18 @@ public static Dialog createErrorDialog(@NonNull Activity activity, String errorM\n         return alertDialog;\n     }\n \n-    public static <T extends DialogFragment> T showIfNotShowing(Class<T> dialogClass, FragmentManager fragmentManager) {\n-        return showIfNotShowing(dialogClass, null, fragmentManager);\n+    @Nullable\n+    public static <T extends DialogFragment> T getDialog(Class<T> dialogClass, FragmentManager fragmentManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNTI1Nw=="}, "originalCommit": {"oid": "b9477ff1122b0fd1bbe837a329e76ecddd9a9771"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3407, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}