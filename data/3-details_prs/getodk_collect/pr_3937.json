{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Mjk4Nzg5", "number": 3937, "title": "Reworking Rating Widget", "bodyText": "This PR includes the work on rewriting Rating Widget.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nPreviously, Rating-Widget displayed stars simply on multiple lines, when the number of stars could not be accommodated in a single line. In this PR, the user just can have maximum of two lines for the rating widget.\nDo we need any specific form for testing your changes? If so, please attach one.\nAny form with Rating widget like TestRatingWidget .xml.txt\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-06-23T03:51:21Z", "url": "https://github.com/getodk/collect/pull/3937", "merged": true, "mergeCommit": {"oid": "93ca67c2ba7648593a6c140d32b4b0d2c9d5a10b"}, "closed": true, "closedAt": "2020-11-06T11:27:14Z", "author": {"login": "SaumiaSinghal"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwMlEmAFqTQzOTYzMzc0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVYqOKgH2gAyNDM4Mjk4Nzg5Ojg2NDJmYjEyOTYwNWI2ZGJlNjM1YmE0ODExNmY3YjQ0NmMzMjg0YWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NjMzNzQ5", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-439633749", "createdAt": "2020-06-30T02:53:47Z", "commit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1Mzo0OFrOGqpwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMjo1Mzo0OFrOGqpwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NzUxNQ==", "bodyText": "I have three Ratingbar with different styles In the XML file. All of thems visibility is turned off by default. This part of code checks which Ratingbar needs to be displayed depending on the number of stars and screen dimensions.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r447377515", "createdAt": "2020-06-30T02:53:48Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODgzMjM2", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-442883236", "createdAt": "2020-07-06T08:42:20Z", "commit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo0MjoyMFrOGtOMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1MToyNVrOGtOgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MTcwMg==", "bodyText": "It looks like Google have switched up how this should be enabled annoyingly (found here). This will throw up a deprecation warning on build. Instead, we need:\n android {\n    buildFeatures {\n        viewBinding true\n    }\n}", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450071702", "createdAt": "2020-07-06T08:42:20Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,6 +70,10 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n+    viewBinding {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3MjA4NQ==", "bodyText": "What was this needed for?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450072085", "createdAt": "2020-07-06T08:43:02Z", "author": {"login": "seadowg"}, "path": "config/quality.gradle", "diffHunk": "@@ -55,6 +55,7 @@ android {\n         abortOnError true\n         xmlReport true\n         htmlReport true\n+        checkGeneratedSources true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3NjgzNA==", "bodyText": "All these padding values can just be replaced with one padding as they are all the same!", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450076834", "createdAt": "2020-07-06T08:51:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/rating_widget_answer.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"wrap_content\"\n+    android:layout_height=\"match_parent\"\n+    android:paddingStart=\"@dimen/margin_small\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODkyNjA1", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-442892605", "createdAt": "2020-07-06T08:55:12Z", "commit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NToxMlrOGtOphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwODo1NToxMlrOGtOphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTEwOA==", "bodyText": "I think you can  use ScreenUtils.getScreenWidth() here and get rid of getScreenDimensions() at all.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450079108", "createdAt": "2020-07-06T08:55:12Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n+        ratingBar.setRating(0.0F);\n+    }\n \n-        answer = null;\n-        widgetValueChanged();\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = getResources().getDrawable(R.drawable.ic_star);\n+    private int calculateColumns(int widthOfStar) {\n         DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e2628edce2fac55388024b25f5885182e6aeb0e"}, "originalPosition": 158}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1980b6a3284734680b5602369e13795dce2b8140", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/1980b6a3284734680b5602369e13795dce2b8140", "committedDate": "2020-07-06T10:56:18Z", "message": "code refactor"}, "afterCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/25f6dc25ee36f51487563156a3399a4c578b769a", "committedDate": "2020-07-06T10:59:01Z", "message": "refactor gradle file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NzU1NTY3", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-444755567", "createdAt": "2020-07-08T13:19:31Z", "commit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzoxOTozMVrOGunq_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzozNjowNlrOGuoYEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzNzY2MA==", "bodyText": "You have two blank lines here please remove one.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451537660", "createdAt": "2020-07-08T13:19:31Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,91 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA==", "bodyText": "This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451545664", "createdAt": "2020-07-08T13:30:52Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-        binding.ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        binding.ratingBar.setStepSize(1.0F);\n     }\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        binding.ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        binding.ratingBar.setEnabled(!prompt.isReadOnly());\n+\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n+\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n+            }\n+        }\n+\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            binding.ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar.setOnLongClickListener(l);\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar.getRating() == 0.0F ? null : new IntegerData((int) binding.ratingBar.getRating());\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar.setRating(0.0F);\n+        ratingBar.setRating(0.0F);\n     }\n \n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n+    protected RatingBar getRatingBar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35dbc239935239af8b99df525fc63209b85c9c37"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTIwMA==", "bodyText": "Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451549200", "createdAt": "2020-07-08T13:36:06Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35dbc239935239af8b99df525fc63209b85c9c37"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0NzgwNjAw", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-444780600", "createdAt": "2020-07-08T13:46:31Z", "commit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo0NjozMVrOGuo0oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxMzo1MToyNlrOGupCoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1NjUxMg==", "bodyText": "Should be returns null not zero right?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451556512", "createdAt": "2020-07-08T13:46:31Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java", "diffHunk": "@@ -2,60 +2,130 @@\n \n import android.view.View;\n \n-import androidx.annotation.NonNull;\n-\n import org.javarosa.core.model.RangeQuestion;\n-import org.javarosa.core.model.data.IntegerData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import java.math.BigDecimal;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithRangeQuestionAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndRangeQuestion;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n-public class RatingWidgetTest extends QuestionWidgetTest<RatingWidget, IntegerData> {\n+@RunWith(RobolectricTestRunner.class)\n+public class RatingWidgetTest {\n \n-    private final IntegerData answer = new IntegerData(4);\n+    private RangeQuestion rangeQuestion;\n \n     @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n+    public void setup() {\n+        rangeQuestion = mock(RangeQuestion.class);\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n+    }\n+\n+    @Test\n+    public void ratingBarShowsCorrectNumberOfStars() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n+        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1OTg3Mw==", "bodyText": "You can use it in other widgets as well so you should''t use Range word here.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451559873", "createdAt": "2020-07-08T13:51:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2MDA5Nw==", "bodyText": "Same as above it's not just for range widgets.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451560097", "createdAt": "2020-07-08T13:51:26Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withQuestion(questionDef)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDQyNzg4", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-451442788", "createdAt": "2020-07-20T09:28:27Z", "commit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOToyODoyN1rOG0CXQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTozODoxOVrOG0C1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxNzg1OQ==", "bodyText": "Both can be private.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457217859", "createdAt": "2020-07-20T09:28:27Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxODU4Mg==", "bodyText": "Please factor it out to a separate method, I mean the calculation because you can keep the variable.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457218582", "createdAt": "2020-07-20T09:29:21Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMDcyNw==", "bodyText": "I think more readable way of using the ternarry operator in this case would be:\nreturn binding.ratingBar1.getRating() == 0.0F \n                        ? null \n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n\nso new line for each option.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457220727", "createdAt": "2020-07-20T09:31:54Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F ? null :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMTkyOQ==", "bodyText": "Please fix this one-char parameter name, even simple listener would be better.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457221929", "createdAt": "2020-07-20T09:33:19Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDUwOA==", "bodyText": "This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457224508", "createdAt": "2020-07-20T09:36:39Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA==", "bodyText": "You already have `android:stepSize in the layout file so why do you need this here too?", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457225638", "createdAt": "2020-07-20T09:38:19Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDgyNzY1", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-451482765", "createdAt": "2020-07-20T10:24:58Z", "commit": {"oid": "5fd6659aaddd337ad9a2bb30beacbf2d74b964ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88a7094648472ff8393882a29446229d0176d22e", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/88a7094648472ff8393882a29446229d0176d22e", "committedDate": "2020-07-25T16:18:41Z", "message": "fix stars highlight issue"}, "afterCommit": {"oid": "bc853175de6bed2d48928afe6ef6da6cde687eba", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/bc853175de6bed2d48928afe6ef6da6cde687eba", "committedDate": "2020-07-25T16:25:30Z", "message": "fix stars highlight issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODMxMDI4", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-456831028", "createdAt": "2020-07-28T16:59:08Z", "commit": {"oid": "1fe52b0bc1a72fa30dbe1187c1b5013d58943354"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo1OTowOFrOG4V8Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo1OTowOFrOG4V8Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw==", "bodyText": "Could this change have been driven out with a test? Maybe there was one and I missed it!", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461732887", "createdAt": "2020-07-28T16:59:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -61,8 +61,8 @@ protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int a\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n             binding.ratingBar2.setRating(0.0F);\n+            binding.ratingBar1.setRating(rating);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe52b0bc1a72fa30dbe1187c1b5013d58943354"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzczMDQ4", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-474373048", "createdAt": "2020-08-25T11:09:53Z", "commit": {"oid": "070caa540e48d6b86eca352ce493f1a342eed315"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "070caa540e48d6b86eca352ce493f1a342eed315", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/070caa540e48d6b86eca352ce493f1a342eed315", "committedDate": "2020-08-09T07:57:50Z", "message": "add touch listener to change rating in other rating bar simulataneously"}, "afterCommit": {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "committedDate": "2020-08-25T11:17:27Z", "message": "add touch listener to change rating in other rating bar simulataneously"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjcwODc1", "url": "https://github.com/getodk/collect/pull/3937#pullrequestreview-475670875", "createdAt": "2020-08-26T16:42:59Z", "commit": {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo0Mjo1OVrOHHUqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjo0Mjo1OVrOHHUqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0MDU3OQ==", "bodyText": "I don't think we need this anymore right? It's enabled in the android block now.", "url": "https://github.com/getodk/collect/pull/3937#discussion_r477440579", "createdAt": "2020-08-26T16:42:59Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -70,8 +70,8 @@ def mapboxToken = secrets.getProperty('MAPBOX_ACCESS_TOKEN', '')\n android {\n     compileSdkVersion(28)\n \n-    viewBinding {\n-        enabled = true\n+    buildFeatures {\n+        viewBinding true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "committedDate": "2020-10-20T17:50:31Z", "message": "add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96", "committedDate": "2020-10-20T17:50:32Z", "message": "create rating_widget_answer_xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9684f595f504cef4ecd689b6b55deed522c2497", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/f9684f595f504cef4ecd689b6b55deed522c2497", "committedDate": "2020-10-20T17:50:32Z", "message": "rework RatingWidget.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "276359a7b17f1baf59c1626f55a2370db511bde0", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/276359a7b17f1baf59c1626f55a2370db511bde0", "committedDate": "2020-10-20T17:50:32Z", "message": "enable view binding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "committedDate": "2020-10-20T17:50:32Z", "message": "add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60a9adf69f45a446351ff54804942c8027361081", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/60a9adf69f45a446351ff54804942c8027361081", "committedDate": "2020-10-20T17:50:32Z", "message": "add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2942d635cffe3e4b579927d98ec408f07bc9184", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/f2942d635cffe3e4b579927d98ec408f07bc9184", "committedDate": "2020-10-20T17:50:32Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "999eab4a035a695cccfaf5031b62dfd38f1057e1", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/999eab4a035a695cccfaf5031b62dfd38f1057e1", "committedDate": "2020-10-20T17:50:32Z", "message": "make unit tests green"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9acb1e1b8c5ce835e60449dc148f8e66a5533ea2", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/9acb1e1b8c5ce835e60449dc148f8e66a5533ea2", "committedDate": "2020-10-20T17:50:32Z", "message": "fix rating bar setNumOfStars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "committedDate": "2020-10-20T17:51:45Z", "message": "set rating bar style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8afa6a13b4739314aa54d735e1735b990a9f56d", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a8afa6a13b4739314aa54d735e1735b990a9f56d", "committedDate": "2020-10-20T17:51:51Z", "message": "fix lint error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/6bb71d8a150b39dc0419cf94839ed2364021fe52", "committedDate": "2020-10-20T17:51:51Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d72cb04dcc833d86acb525f300e4f09eb6f93f35", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/d72cb04dcc833d86acb525f300e4f09eb6f93f35", "committedDate": "2020-10-20T17:51:51Z", "message": "refactor gradle file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32ea188912d6279747bced50dc3ad50790b4bb6f", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/32ea188912d6279747bced50dc3ad50790b4bb6f", "committedDate": "2020-10-20T17:51:51Z", "message": "show rating bar in two lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "committedDate": "2020-10-20T17:51:51Z", "message": "use two rating bars"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/ea7cd1ae54063565223afa7e3aacc6955d5a4606", "committedDate": "2020-10-20T17:51:51Z", "message": "use default package private access modifier for RatingWidgetBinding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6135be68fe81eeffad26d0ed9918e01c203233d2", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/6135be68fe81eeffad26d0ed9918e01c203233d2", "committedDate": "2020-10-20T17:52:15Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757d09965497b154c4a527709e83d6577c06274f", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/757d09965497b154c4a527709e83d6577c06274f", "committedDate": "2020-10-20T17:52:16Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "committedDate": "2020-10-20T17:52:16Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2712dfe61ed06dcba5267869945a25d187fc76d", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/c2712dfe61ed06dcba5267869945a25d187fc76d", "committedDate": "2020-10-20T17:52:16Z", "message": "fix stars highlight issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eae83ed3681b6247ca7d8a282d62dbe752f5548", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/7eae83ed3681b6247ca7d8a282d62dbe752f5548", "committedDate": "2020-10-20T17:52:17Z", "message": "fix set rating problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7242d4df11e02679dd2fd7e025247c1e4a98bb", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/6d7242d4df11e02679dd2fd7e025247c1e4a98bb", "committedDate": "2020-10-20T17:52:17Z", "message": "add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e86567f4bf495cc4990027eb0bf0d285f1fe3dc", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/9e86567f4bf495cc4990027eb0bf0d285f1fe3dc", "committedDate": "2020-10-20T17:52:17Z", "message": "update unt tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25c7a21f91a1133a91b5ccd005e89d854b85871", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/d25c7a21f91a1133a91b5ccd005e89d854b85871", "committedDate": "2020-10-20T17:52:17Z", "message": "fix rating bar showing wrong rating value on Android 7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a1c519be2d0d24fcf27da92e7074646e520a37", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/97a1c519be2d0d24fcf27da92e7074646e520a37", "committedDate": "2020-10-20T17:52:17Z", "message": "add touch listener to change rating in other rating bar simulataneously"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8af4f2870583565c95259608984281233564e49", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/d8af4f2870583565c95259608984281233564e49", "committedDate": "2020-10-20T17:55:06Z", "message": "update unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "committedDate": "2020-08-25T11:17:27Z", "message": "add touch listener to change rating in other rating bar simulataneously"}, "afterCommit": {"oid": "d8af4f2870583565c95259608984281233564e49", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/d8af4f2870583565c95259608984281233564e49", "committedDate": "2020-10-20T17:55:06Z", "message": "update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8642fb129605b6dbe635ba48116f7b446c3284ad", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/8642fb129605b6dbe635ba48116f7b446c3284ad", "committedDate": "2020-10-23T15:53:29Z", "message": "set saveEnabled to false to prevent rating bar from retaining values on screen rotation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2522, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}