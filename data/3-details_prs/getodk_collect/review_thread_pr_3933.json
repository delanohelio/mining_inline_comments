{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3ODg3Njgy", "number": 3933, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowMDowOVrOEKNydQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NTo0NlrOEKPEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQ3MTI1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/configure/StructureAndTypeSettingsValidatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowMDowOVrOGrIRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxMTowMFrOGr5L0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzU3NQ==", "bodyText": "I believe that Collect implicitly required both general and admin previously so good to keep consistent. I think we should follow up and make it only required to have one, not necessarily both to avoid having an empty set of settings. If that sounds reasonable I can file a low-priority issue (and corresponding doc update).", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447877575", "createdAt": "2020-06-30T18:00:09Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/configure/StructureAndTypeSettingsValidatorTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.configure;\n+\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class StructureAndTypeSettingsValidatorTest {\n+\n+    private final Map<String, Object> generalDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", true);\n+    }};\n+\n+    private final Map<String, Object> adminDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", \"default\");\n+    }};\n+\n+    private final StructureAndTypeSettingsValidator validator = new StructureAndTypeSettingsValidator(generalDefaults, adminDefaults);\n+\n+    @Test\n+    public void forEmptySettings_returnsTrue() throws Exception {\n+        assertThat(validator.isValid(emptySettings()), is(true));\n+    }\n+\n+    @Test\n+    public void forNonJSON_returnsFalse() {\n+        assertThat(validator.isValid(\"blah\"), is(false));\n+    }\n+\n+    @Test\n+    public void withoutGeneralObject_returnsFalse() throws Exception {\n+        JSONObject json = emptySettingsObject();\n+        json.remove(\"general\"); // Remove mutates and returns removed item :(\n+\n+        assertThat(validator.isValid(json.toString()), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d4ea286a74c38b9e271864b4709480a791f27e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MTk0NQ==", "bodyText": "Given they can just be empty it feels ok to require both? Requiring both does simplify logic on our side as well.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448191945", "createdAt": "2020-07-01T08:10:26Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/configure/StructureAndTypeSettingsValidatorTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.configure;\n+\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class StructureAndTypeSettingsValidatorTest {\n+\n+    private final Map<String, Object> generalDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", true);\n+    }};\n+\n+    private final Map<String, Object> adminDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", \"default\");\n+    }};\n+\n+    private final StructureAndTypeSettingsValidator validator = new StructureAndTypeSettingsValidator(generalDefaults, adminDefaults);\n+\n+    @Test\n+    public void forEmptySettings_returnsTrue() throws Exception {\n+        assertThat(validator.isValid(emptySettings()), is(true));\n+    }\n+\n+    @Test\n+    public void forNonJSON_returnsFalse() {\n+        assertThat(validator.isValid(\"blah\"), is(false));\n+    }\n+\n+    @Test\n+    public void withoutGeneralObject_returnsFalse() throws Exception {\n+        JSONObject json = emptySettingsObject();\n+        json.remove(\"general\"); // Remove mutates and returns removed item :(\n+\n+        assertThat(validator.isValid(json.toString()), is(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzU3NQ=="}, "originalCommit": {"oid": "58d4ea286a74c38b9e271864b4709480a791f27e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3ODg2NA==", "bodyText": "Fair enough!", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448678864", "createdAt": "2020-07-02T00:11:00Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/configure/StructureAndTypeSettingsValidatorTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.odk.collect.android.configure;\n+\n+import org.json.JSONObject;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class StructureAndTypeSettingsValidatorTest {\n+\n+    private final Map<String, Object> generalDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", true);\n+    }};\n+\n+    private final Map<String, Object> adminDefaults = new HashMap<String, Object>() {{\n+        put(\"key1\", \"default\");\n+    }};\n+\n+    private final StructureAndTypeSettingsValidator validator = new StructureAndTypeSettingsValidator(generalDefaults, adminDefaults);\n+\n+    @Test\n+    public void forEmptySettings_returnsTrue() throws Exception {\n+        assertThat(validator.isValid(emptySettings()), is(true));\n+    }\n+\n+    @Test\n+    public void forNonJSON_returnsFalse() {\n+        assertThat(validator.isValid(\"blah\"), is(false));\n+    }\n+\n+    @Test\n+    public void withoutGeneralObject_returnsFalse() throws Exception {\n+        JSONObject json = emptySettingsObject();\n+        json.remove(\"general\"); // Remove mutates and returns removed item :(\n+\n+        assertThat(validator.isValid(json.toString()), is(false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3NzU3NQ=="}, "originalCommit": {"oid": "58d4ea286a74c38b9e271864b4709480a791f27e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQ5MTA3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/PropertyManagerJavaRosaInitializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODowNToyOFrOGrId4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDo0MjozMVrOGrgoMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDY3NQ==", "bodyText": "Shouldn't this logic be a responsibility of the PropertyManager? Then maybe you don't need this class but can implement the interface inline where needed.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447880675", "createdAt": "2020-06-30T18:05:28Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/PropertyManagerJavaRosaInitializer.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.android.javarosawrapper;\n+\n+import android.app.Application;\n+\n+import org.odk.collect.android.logic.PropertyManager;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+\n+import static org.odk.collect.android.logic.PropertyManager.PROPMGR_USERNAME;\n+import static org.odk.collect.android.logic.PropertyManager.SCHEME_USERNAME;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_USERNAME;\n+\n+public class PropertyManagerJavaRosaInitializer implements JavaRosaInitializer {\n+\n+    private final Application application;\n+\n+    public PropertyManagerJavaRosaInitializer(Application application) {\n+        this.application = application;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        PropertyManager mgr = new PropertyManager(application);\n+\n+        // Use the server username by default if the metadata username is not defined", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa0e23389da43184776d2bee57238a6f29c5e5b3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NDQyMQ==", "bodyText": "Huh yeah I'll play with that.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448194421", "createdAt": "2020-07-01T08:14:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/PropertyManagerJavaRosaInitializer.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.android.javarosawrapper;\n+\n+import android.app.Application;\n+\n+import org.odk.collect.android.logic.PropertyManager;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+\n+import static org.odk.collect.android.logic.PropertyManager.PROPMGR_USERNAME;\n+import static org.odk.collect.android.logic.PropertyManager.SCHEME_USERNAME;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_USERNAME;\n+\n+public class PropertyManagerJavaRosaInitializer implements JavaRosaInitializer {\n+\n+    private final Application application;\n+\n+    public PropertyManagerJavaRosaInitializer(Application application) {\n+        this.application = application;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        PropertyManager mgr = new PropertyManager(application);\n+\n+        // Use the server username by default if the metadata username is not defined", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDY3NQ=="}, "originalCommit": {"oid": "fa0e23389da43184776d2bee57238a6f29c5e5b3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI3NjUzMA==", "bodyText": "Ended up moving some stuff around so we can just call reload on PropertyManager and the actual JavaRosa initialization can happen in ApplicationInitializer.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448276530", "createdAt": "2020-07-01T10:42:31Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/javarosawrapper/PropertyManagerJavaRosaInitializer.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.odk.collect.android.javarosawrapper;\n+\n+import android.app.Application;\n+\n+import org.odk.collect.android.logic.PropertyManager;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+\n+import static org.odk.collect.android.logic.PropertyManager.PROPMGR_USERNAME;\n+import static org.odk.collect.android.logic.PropertyManager.SCHEME_USERNAME;\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_USERNAME;\n+\n+public class PropertyManagerJavaRosaInitializer implements JavaRosaInitializer {\n+\n+    private final Application application;\n+\n+    public PropertyManagerJavaRosaInitializer(Application application) {\n+        this.application = application;\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        PropertyManager mgr = new PropertyManager(application);\n+\n+        // Use the server username by default if the metadata username is not defined", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg4MDY3NQ=="}, "originalCommit": {"oid": "fa0e23389da43184776d2bee57238a6f29c5e5b3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU1OTEzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyMzo1MlrOGrJHog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoxMToyOVrOGr5MPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTM2Mg==", "bodyText": "While here, would you consider changing all this to a try-with-resources so it's easier to read and there isn't the Timber.e call?", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447891362", "createdAt": "2020-06-30T18:23:52Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private Pair<Map<String, Object>, Map<String, Object>> readSettingsFile(File src) throws IOException, ClassNotFoundException {\n+        // this should probably be in a thread if it ever gets big\n+        ObjectInputStream input = null;\n+        try {\n+            input = new ObjectInputStream(new FileInputStream(src));\n+\n+            // first object is preferences\n+            Map<String, Object> generalEntries = (Map<String, Object>) input.readObject();\n+            Map<String, Object> adminEntries = (Map<String, Object>) input.readObject();\n+\n+            return new Pair<>(generalEntries, adminEntries);\n+        } finally {\n+            try {\n+                if (input != null) {\n+                    input.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MjA1NQ==", "bodyText": "With pleasure.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448192055", "createdAt": "2020-07-01T08:10:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private Pair<Map<String, Object>, Map<String, Object>> readSettingsFile(File src) throws IOException, ClassNotFoundException {\n+        // this should probably be in a thread if it ever gets big\n+        ObjectInputStream input = null;\n+        try {\n+            input = new ObjectInputStream(new FileInputStream(src));\n+\n+            // first object is preferences\n+            Map<String, Object> generalEntries = (Map<String, Object>) input.readObject();\n+            Map<String, Object> adminEntries = (Map<String, Object>) input.readObject();\n+\n+            return new Pair<>(generalEntries, adminEntries);\n+        } finally {\n+            try {\n+                if (input != null) {\n+                    input.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTM2Mg=="}, "originalCommit": {"oid": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3ODk3NA==", "bodyText": "\ud83e\udd1d", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448678974", "createdAt": "2020-07-02T00:11:29Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private Pair<Map<String, Object>, Map<String, Object>> readSettingsFile(File src) throws IOException, ClassNotFoundException {\n+        // this should probably be in a thread if it ever gets big\n+        ObjectInputStream input = null;\n+        try {\n+            input = new ObjectInputStream(new FileInputStream(src));\n+\n+            // first object is preferences\n+            Map<String, Object> generalEntries = (Map<String, Object>) input.readObject();\n+            Map<String, Object> adminEntries = (Map<String, Object>) input.readObject();\n+\n+            return new Pair<>(generalEntries, adminEntries);\n+        } finally {\n+            try {\n+                if (input != null) {\n+                    input.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTM2Mg=="}, "originalCommit": {"oid": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTU1OTYyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODoyNDowNFrOGrJH9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxMDo0NlrOGrbedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTQ0NQ==", "bodyText": "While here, would you consider changing all this to a try-with-resources so it's easier to read and there isn't the Timber.e call?", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447891445", "createdAt": "2020-06-30T18:24:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MjExNw==", "bodyText": "As above.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r448192117", "createdAt": "2020-07-01T08:10:46Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg5MTQ0NQ=="}, "originalCommit": {"oid": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTY4MDkzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NTo0NlrOGrKRCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxODo1NTo0NlrOGrKRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxMDE1NQ==", "bodyText": "Remove comment that doesn't add much.", "url": "https://github.com/getodk/collect/pull/3933#discussion_r447910155", "createdAt": "2020-06-30T18:55:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/configure/LegacySettingsFileReader.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.odk.collect.android.configure;\n+\n+import androidx.core.util.Pair;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.util.Map;\n+\n+import timber.log.Timber;\n+\n+public class LegacySettingsFileReader {\n+\n+    private final StoragePathProvider storagePathProvider;\n+\n+    public LegacySettingsFileReader(StoragePathProvider storagePathProvider) {\n+        this.storagePathProvider = storagePathProvider;\n+    }\n+\n+    public String toJSON() throws CorruptSettingsFileException {\n+        File f = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings\");\n+        File j = new File(storagePathProvider.getStorageRootDirPath() + \"/collect.settings.json\");\n+\n+        try {\n+            if (j.exists()) {\n+                String settings = readJSONFile(j);\n+                f.delete();\n+                return settings;\n+            } else if (f.exists()) {\n+                Pair<Map<String, Object>, Map<String, Object>> settings = readSettingsFile(f);\n+                j.delete();\n+\n+                return new JSONObject()\n+                        .put(\"general\", settings.first)\n+                        .put(\"admin\", settings.second)\n+                        .toString();\n+            } else {\n+                return null;\n+            }\n+        } catch (IOException | JSONException | ClassNotFoundException e) {\n+            throw new CorruptSettingsFileException();\n+        }\n+    }\n+\n+    private String readJSONFile(File src) throws IOException {\n+        BufferedReader br = null;\n+\n+        try {\n+            String line = null;\n+            StringBuilder builder = new StringBuilder();\n+            br = new BufferedReader(new FileReader(src));\n+\n+            while ((line = br.readLine()) != null) {\n+                builder.append(line);\n+            }\n+\n+            return builder.toString();\n+        } finally {\n+            try {\n+                if (br != null) {\n+                    br.close();\n+                }\n+            } catch (IOException ex) {\n+                Timber.e(ex, \"Exception thrown while closing an input stream due to: %s \", ex.getMessage());\n+            }\n+        }\n+    }\n+\n+    private Pair<Map<String, Object>, Map<String, Object>> readSettingsFile(File src) throws IOException, ClassNotFoundException {\n+        // this should probably be in a thread if it ever gets big\n+        ObjectInputStream input = null;\n+        try {\n+            input = new ObjectInputStream(new FileInputStream(src));\n+\n+            // first object is preferences", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae71d6d5a6ef7f58db91bf2a054b48ada646d59b"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3214, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}