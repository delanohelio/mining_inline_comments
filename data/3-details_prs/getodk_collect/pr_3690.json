{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0ODM5ODcz", "number": 3690, "title": "Fixed Save button in Reason for changes page does not work after rotating device orientation", "bodyText": "Closes #3689\nWhat has been done to verify that this works as intended?\nI tested the changes manually and improved one of the automated tests.\nWhy is this the best possible solution? Were any other approaches considered?\nIt's the only solution. The previous one was wrong because once onDestroy() was called the observation was killed, now it's resumed.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nThis change should just fix the problem and that's all. It shouldn't affect anything else. I think the risk here is not big. Testing the attached form seems enough.\nDo we need any specific form for testing your changes? If so, please attach one.\nThe form attached to the issue.\nDoes this change require updates to documentation? If so, please file an issue here and include the link below.\nNo.\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-03-06T14:08:16Z", "url": "https://github.com/getodk/collect/pull/3690", "merged": true, "mergeCommit": {"oid": "fc67d5b6f90a4edd7e2a297f598c916624037166"}, "closed": true, "closedAt": "2020-03-11T10:10:55Z", "author": {"login": "grzesiek2010"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLAsCagH2gAyMzg0ODM5ODczOjE1MWQ3M2EzZTVlMDM1NDZiNzRhMzllMDgzZTAyNDhiNzg1YzczOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMRy4SAFqTM3MTkxMTYxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "151d73a3e5e03546b74a39e083e0248b785c738c", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/151d73a3e5e03546b74a39e083e0248b785c738c", "committedDate": "2020-03-06T14:07:21Z", "message": "Fixed Save button in Reason for changes page does not work after rotating device orientation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNDcwODc1", "url": "https://github.com/getodk/collect/pull/3690#pullrequestreview-370470875", "createdAt": "2020-03-06T16:50:20Z", "commit": {"oid": "151d73a3e5e03546b74a39e083e0248b785c738c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1MDoyMVrOFy_xnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNjo1MDoyMVrOFy_xnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTAxODAxMg==", "bodyText": "I think we should call this resumeFormEntry seeing as that's the \"view action\" that's occuring. I'm also thinking this should only really happen for results that end the same process (like SAVED and the errors) but not for SAVING or CHANGE_REASON_REQUIRED.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389018012", "createdAt": "2020-03-06T16:50:21Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -1821,91 +1823,97 @@ private boolean saveForm(boolean exit, boolean complete, String updatedSaveName,\n             }\n         }\n \n-        formSaveViewModel.saveForm(getIntent().getData(), complete, updatedSaveName, exit).observe(this, result -> {\n-            switch (result.getState()) {\n-                case CHANGE_REASON_REQUIRED:\n-                    ChangesReasonPromptDialogFragment dialog = ChangesReasonPromptDialogFragment.create(getFormController().getFormTitle());\n-                    DialogUtils.showIfNotShowing(dialog, getSupportFragmentManager());\n-                    break;\n+        formSaveViewModel.saveForm(getIntent().getData(), complete, updatedSaveName, exit);\n \n-                case SAVING:\n-                    autoSaved = true;\n+        return true;\n+    }\n \n-                    SaveFormProgressDialogFragment progressDialog = DialogUtils.showIfNotShowing(\n-                            new SaveFormProgressDialogFragment(),\n-                            getSupportFragmentManager()\n-                    );\n+    private void handleSaveResult(FormSaveViewModel.SaveResult result) {\n+        if (result == null) {\n+            return;\n+        }\n+        switch (result.getState()) {\n+            case CHANGE_REASON_REQUIRED:\n+                ChangesReasonPromptDialogFragment dialog = ChangesReasonPromptDialogFragment.create(getFormController().getFormTitle());\n+                DialogUtils.showIfNotShowing(dialog, getSupportFragmentManager());\n+                break;\n \n-                    if (result.getMessage() != null) {\n-                        progressDialog.setMessage(getString(R.string.please_wait) + \"\\n\\n\" + result.getMessage());\n-                    }\n+            case SAVING:\n+                autoSaved = true;\n \n-                    break;\n+                SaveFormProgressDialogFragment progressDialog = DialogUtils.showIfNotShowing(\n+                        new SaveFormProgressDialogFragment(),\n+                        getSupportFragmentManager()\n+                );\n \n-                case SAVED:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    showShortToast(R.string.data_saved_ok);\n-\n-                    if (exit) {\n-                        if (complete) {\n-                            // Request auto-send if app-wide auto-send is enabled or the form that was just\n-                            // finalized specifies that it should always be auto-sent.\n-                            String formId = getFormController().getFormDef().getMainInstance().getRoot().getAttributeValue(\"\", \"id\");\n-                            if (AutoSendWorker.formShouldBeAutoSent(formId, GeneralSharedPreferences.isAutoSendEnabled())) {\n-                                requestAutoSend();\n-                            }\n-                        }\n+                if (result.getMessage() != null) {\n+                    progressDialog.setMessage(getString(R.string.please_wait) + \"\\n\\n\" + result.getMessage());\n+                }\n+\n+                break;\n \n-                        finishAndReturnInstance();\n+            case SAVED:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                showShortToast(R.string.data_saved_ok);\n+\n+                if (result.getRequest().viewExiting()) {\n+                    if (result.getRequest().shouldFinalize()) {\n+                        // Request auto-send if app-wide auto-send is enabled or the form that was just\n+                        // finalized specifies that it should always be auto-sent.\n+                        String formId = getFormController().getFormDef().getMainInstance().getRoot().getAttributeValue(\"\", \"id\");\n+                        if (AutoSendWorker.formShouldBeAutoSent(formId, GeneralSharedPreferences.isAutoSendEnabled())) {\n+                            requestAutoSend();\n+                        }\n                     }\n \n-                    break;\n+                    finishAndReturnInstance();\n+                }\n \n-                case SAVE_ERROR:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    String message;\n+                break;\n \n-                    if (result.getMessage() != null) {\n-                        message = getString(R.string.data_saved_error) + \" \"\n-                                + result.getMessage();\n-                    } else {\n-                        message = getString(R.string.data_saved_error);\n-                    }\n+            case SAVE_ERROR:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                String message;\n \n-                    showLongToast(message);\n-                    break;\n+                if (result.getMessage() != null) {\n+                    message = getString(R.string.data_saved_error) + \" \"\n+                            + result.getMessage();\n+                } else {\n+                    message = getString(R.string.data_saved_error);\n+                }\n \n-                case FINALIZE_ERROR:\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    showLongToast(String.format(getString(R.string.encryption_error_message),\n-                            result.getMessage()));\n-                    finishAndReturnInstance();\n-                    break;\n+                showLongToast(message);\n+                break;\n \n-                case CONSTRAINT_ERROR: {\n-                    DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n-                    refreshCurrentView();\n+            case FINALIZE_ERROR:\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                showLongToast(String.format(getString(R.string.encryption_error_message),\n+                        result.getMessage()));\n+                finishAndReturnInstance();\n+                break;\n \n-                    // get constraint behavior preference value with appropriate default\n-                    String constraintBehavior = (String) GeneralSharedPreferences.getInstance()\n-                            .get(GeneralKeys.KEY_CONSTRAINT_BEHAVIOR);\n+            case CONSTRAINT_ERROR: {\n+                DialogUtils.dismissDialog(SaveFormProgressDialogFragment.class, getSupportFragmentManager());\n+                refreshCurrentView();\n \n-                    // an answer constraint was violated, so we need to display the proper toast(s)\n-                    // if constraint behavior is on_swipe, this will happen if we do a 'swipe' to the\n-                    // next question\n-                    if (constraintBehavior.equals(GeneralKeys.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {\n-                        next();\n-                    } else {\n-                        // otherwise, we can get the proper toast(s) by saving with constraint check\n-                        saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);\n-                    }\n+                // get constraint behavior preference value with appropriate default\n+                String constraintBehavior = (String) GeneralSharedPreferences.getInstance()\n+                        .get(GeneralKeys.KEY_CONSTRAINT_BEHAVIOR);\n \n-                    break;\n+                // an answer constraint was violated, so we need to display the proper toast(s)\n+                // if constraint behavior is on_swipe, this will happen if we do a 'swipe' to the\n+                // next question\n+                if (constraintBehavior.equals(GeneralKeys.CONSTRAINT_BEHAVIOR_ON_SWIPE)) {\n+                    next();\n+                } else {\n+                    // otherwise, we can get the proper toast(s) by saving with constraint check\n+                    saveAnswersForCurrentScreen(EVALUATE_CONSTRAINTS);\n                 }\n-            }\n-        });\n \n-        return true;\n+                break;\n+            }\n+        }\n+        formSaveViewModel.consumeSavedResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "151d73a3e5e03546b74a39e083e0248b785c738c"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5c22d411ccb2151249b1546a403ff78a6155a2d", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/e5c22d411ccb2151249b1546a403ff78a6155a2d", "committedDate": "2020-03-09T09:09:09Z", "message": "Don't consume results like CHANGE_REASON_REQUIRED or SAVING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6e18a391eb609ab45148bbced572bf4fc97589", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/8d6e18a391eb609ab45148bbced572bf4fc97589", "committedDate": "2020-03-09T11:26:02Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b56149da993a523163fb335b74d6fd4fb6d87c", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/b2b56149da993a523163fb335b74d6fd4fb6d87c", "committedDate": "2020-03-09T11:33:11Z", "message": "Improved tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/ffa78091b2888312eb6bab008510ea25a2b9f505", "committedDate": "2020-03-09T11:34:20Z", "message": "Naming impovements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMTUyMjc1", "url": "https://github.com/getodk/collect/pull/3690#pullrequestreview-371152275", "createdAt": "2020-03-09T13:02:36Z", "commit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzowMjozNlrOFzmDig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMzoxOTowNVrOFzmj5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NTE5NA==", "bodyText": "I think this should be closeSoftkeyboard() instead just so we are checking the full \"rotated\" flow.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389645194", "createdAt": "2020-03-09T13:02:36Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/audit/TrackChangesReasonTest.java", "diffHunk": "@@ -123,7 +123,9 @@ public void openingAFormToEdit_andChangingAValue_andClickingSaveAndExit_andRotat\n                 .clickSaveAndExitWithChangesReasonPrompt()\n                 .enterReason(\"Something\")\n                 .rotateToLandscape(new ChangesReasonPromptPage(\"Track Changes Reason\", rule))\n-                .assertText(\"Something\");\n+                .assertText(\"Something\")\n+                .rotateToPortrait(new ChangesReasonPromptPage(\"Track Changes Reason\", rule))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0NzkzMQ==", "bodyText": "I don't know if this makes sense anymore? Maybe it's best just to return when we're already saving rather than setting the result to ALREADY_SAVING just seems a little weird for the same SaveResult LiveData to go from the SAVING to ALREADY_SAVING state.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389647931", "createdAt": "2020-03-09T13:08:24Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n         assertThat(saveResult2, not(equalTo(saveResult1)));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY0OTg5Nw==", "bodyText": "Yeah I think this test also needs to change as the LiveData will be the same between calls. Should just be that saveForm_returnsSaveResult_inSavingState and it only needs to make one call to save.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389649897", "createdAt": "2020-03-09T13:12:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MDY4Nw==", "bodyText": "I think having the saveResult declarations before the call to save would be good because it ensures that the same LiveData instance is being used before/after the call. This mimics how you would use the ViewModel where you make an observation before you call an action.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389650687", "createdAt": "2020-03-09T13:13:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -68,38 +68,44 @@ public void setup() {\n \n     @Test\n     public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n         assertThat(saveResult2, not(equalTo(saveResult1)));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.getSavedResult();\n         assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n+\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.getSavedResult();\n         assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+\n         assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n \n         whenFormSaverFinishes(SaveFormToDisk.SAVED);\n         assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n     }\n \n     @Test\n     public void saveForm_whenReasonRequiredToSave_returnsSaveResult_inChangeReasonRequiredState() {\n         whenReasonRequiredToSave();\n \n-        LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.getSavedResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTY1MzQ3OA==", "bodyText": "In my head this needs to be saveResult.setValue(null) instead. Otherwise saving multiple times won't work for observations made in onCreate of an Activity/Fragment as they'll be observing a different LiveData value. Maybe I'm reading this wrong!\nWe can verify with a test for the ViewModel:\n@Test\npublic void resumeFormEntry_clearsSaveResult() {\n    LiveData<FormSaveViewModel.SaveResult> saveResult = viewModel.getSavedResult();\n    viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n    viewModel.resumeFormEntry();\n    assertThat(saveResult.getValue(), equalTo(null));\n}", "url": "https://github.com/getodk/collect/pull/3690#discussion_r389653478", "createdAt": "2020-03-09T13:19:05Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -181,6 +179,14 @@ private void handleTaskResult(SaveToDiskResult taskResult, SaveRequest saveReque\n         }\n     }\n \n+    public LiveData<SaveResult> getSavedResult() {\n+        return saveResult;\n+    }\n+\n+    public void resumeFormEntry() {\n+        saveResult = new MutableLiveData<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa78091b2888312eb6bab008510ea25a2b9f505"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/717b50f5fef07be2f5cacd8965d42d1dd880ed7b", "committedDate": "2020-03-10T09:44:13Z", "message": "Improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ee1329a1dd0c948546c8b8ae9d75f0024abd2bb", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/5ee1329a1dd0c948546c8b8ae9d75f0024abd2bb", "committedDate": "2020-03-10T09:38:47Z", "message": "Improvements"}, "afterCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/717b50f5fef07be2f5cacd8965d42d1dd880ed7b", "committedDate": "2020-03-10T09:44:13Z", "message": "Improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODExMDk3", "url": "https://github.com/getodk/collect/pull/3690#pullrequestreview-371811097", "createdAt": "2020-03-10T09:56:25Z", "commit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1NjoyNVrOF0IDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo1Nzo0NVrOF0IGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMjE2NA==", "bodyText": "Sorry I don't think what I meant was clear here: I think we should get rid of the ALREADY_SAVING state entirely. It's unlikely that it would happen but if it did and then the user rotated the LiveData would be in the ALREADY_SAVING state rather than SAVING when the observation is setup again.\nI think we can just return in saveForm if a save is in progress.", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390202164", "createdAt": "2020-03-10T09:56:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -67,39 +66,36 @@ public void setup() {\n     }\n \n     @Test\n-    public void saveForm_returnsNewSaveResult_inSavingState() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        assertThat(saveResult2, not(equalTo(saveResult1)));\n+    public void saveForm_returnsSaveResult_inSavingState() {\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n     }\n \n     @Test\n     public void saveForm_wontRunMultipleSavesAtOnce() {\n-        LiveData<FormSaveViewModel.SaveResult> saveResult1 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-        LiveData<FormSaveViewModel.SaveResult> saveResult2 = viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n-\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVING));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n-        assertThat(Robolectric.getBackgroundThreadScheduler().size(), equalTo(1));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult1 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult1.getState(), equalTo(SAVING));\n \n-        whenFormSaverFinishes(SaveFormToDisk.SAVED);\n-        assertThat(saveResult1.getValue().getState(), equalTo(SAVED));\n-        assertThat(saveResult2.getValue().getState(), equalTo(ALREADY_SAVING));\n+        viewModel.saveForm(Uri.parse(\"file://form\"), true, \"\", false);\n+        FormSaveViewModel.SaveResult saveResult2 = viewModel.getSavedResult().getValue();\n+        assertThat(saveResult2.getState(), equalTo(ALREADY_SAVING));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMjk1Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/getodk/collect/pull/3690#discussion_r390202957", "createdAt": "2020-03-10T09:57:45Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/audit/FormSaveViewModelTest.java", "diffHunk": "@@ -344,6 +346,14 @@ public void saveReason_whenReasonIsNotValid_returnsFalse() {\n         assertThat(viewModel.saveReason(), equalTo(false));\n     }\n \n+    @Test\n+    public void resumeFormEntry_clearsSaveResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717b50f5fef07be2f5cacd8965d42d1dd880ed7b"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c146d842444395511307f39f12d4feb063400780", "author": {"user": {"login": "grzesiek2010", "name": "Grzegorz Orczykowski"}}, "url": "https://github.com/getodk/collect/commit/c146d842444395511307f39f12d4feb063400780", "committedDate": "2020-03-10T11:17:59Z", "message": "Removed redundant ALREADY_SAVING state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee3d2d10f6bc1a02b171238cedd54268fc3183d8", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/ee3d2d10f6bc1a02b171238cedd54268fc3183d8", "committedDate": "2020-03-10T12:27:59Z", "message": "Revise mutliple save test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTExNjEw", "url": "https://github.com/getodk/collect/pull/3690#pullrequestreview-371911610", "createdAt": "2020-03-10T12:37:08Z", "commit": {"oid": "ee3d2d10f6bc1a02b171238cedd54268fc3183d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2333, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}