{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjM5NDIy", "number": 4040, "title": "Isolate MultiFormDownloader", "bodyText": "Closes #1698\nCloses #3538\nBlocked by #4028.\nThe goal of this work was to replace any calls to MultiFormDownloader with calls to the new FormDownloader interface. This lets other places in the code mock or fake the interface, not having to worry about it's details. As part of this rework we wanted to have more testing around the implementation of FormDownloader (ServerFormDownloader) so that we can have more confidence mocking/fake it elsewhere, have a better understanding of what it actually does and move test coverage of some of the more detailed business logic to a unit test.\nI've also moved code to three new packages created outside the android package: forms, openrosa and server. The code here is non-Android specific and should not have any dependencies on our \"app\" code. I'd like to move these out to submodules but will avoid that for the moment to prevent even more noise in the PR. The change was motivated by \"auditing\" what parts of the code I was playing with had Android dependencies (and didn't need Robolectric) and what parts didn't.\nWhat has been done to verify that this works as intended?\nNew tests and played around with the app.\nWhy is this the best possible solution? Were any other approaches considered?\nComments inline.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nOne change here is that we now always fetch the manifest for forms when checking for updates instead of sometimes avoiding it. This isn't actually a big problem as far as I can see: In the old code we'd avoid a call to fetch the manifest only in the cases where a form wasn't on the device or when the form XML had been updated. Given that these will be very rare compared to the case where nothing has been updated there isn't a big change here.\nDo we need any specific form for testing your changes? If so, please attach one.\nDoes this change require updates to documentation? If so, please file an issue here and include the link below.\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-08-24T16:45:00Z", "url": "https://github.com/getodk/collect/pull/4040", "merged": true, "mergeCommit": {"oid": "0461cb59adbe178a167dab650bbb56202f5edde5"}, "closed": true, "closedAt": "2020-10-16T16:32:57Z", "author": {"login": "seadowg"}, "timelineItems": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEoyG8ABqjM3MTU0MTAyNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSME9agBqjM4NzI2NTU4MzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59ddb078225c75ae224144d3fb54a8dc24f75ea2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/59ddb078225c75ae224144d3fb54a8dc24f75ea2", "committedDate": "2020-08-20T14:28:23Z", "message": "Add basic case tests for ServerFormDownloader"}, "afterCommit": {"oid": "5b835c850eaf074a92b890da694d6dc5d213932f", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/5b835c850eaf074a92b890da694d6dc5d213932f", "committedDate": "2020-09-01T15:03:41Z", "message": "Remoge ignores"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b835c850eaf074a92b890da694d6dc5d213932f", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/5b835c850eaf074a92b890da694d6dc5d213932f", "committedDate": "2020-09-01T15:03:41Z", "message": "Remoge ignores"}, "afterCommit": {"oid": "e52141307a27671b2e28089dbb8ab1f298117541", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/e52141307a27671b2e28089dbb8ab1f298117541", "committedDate": "2020-09-01T15:54:15Z", "message": "Remoge ignores"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74804681f0061a052f353b3d4b925794f8950f6d", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/74804681f0061a052f353b3d4b925794f8950f6d", "committedDate": "2020-09-02T20:14:25Z", "message": "Extract open rosa code from android package"}, "afterCommit": {"oid": "54219105a7cd0326844b6bc98d66476959408bd8", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/54219105a7cd0326844b6bc98d66476959408bd8", "committedDate": "2020-09-03T08:56:14Z", "message": "Extract open rosa code from android package"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab544a7910e38a4c394f7bf71ef0dd6d5133428d", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/ab544a7910e38a4c394f7bf71ef0dd6d5133428d", "committedDate": "2020-09-03T09:47:28Z", "message": "Use InterruptedException rather than RuntimeException"}, "afterCommit": {"oid": "6ee7a0987ab13b5f6f9e5f5f3bb4ea2b76d6896f", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/6ee7a0987ab13b5f6f9e5f5f3bb4ea2b76d6896f", "committedDate": "2020-09-09T15:15:27Z", "message": "Use InterruptedException rather than RuntimeException"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3894cfde8c63012b4c3b117c519a77239e30a4e9", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/3894cfde8c63012b4c3b117c519a77239e30a4e9", "committedDate": "2020-09-10T14:38:16Z", "message": "Separate module and app tests"}, "afterCommit": {"oid": "36f862ff929e980fde9e8b1dd8b10c9cc9e74d42", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/36f862ff929e980fde9e8b1dd8b10c9cc9e74d42", "committedDate": "2020-09-10T14:42:44Z", "message": "Separate module and app tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MzQ1NzIx", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-487345721", "createdAt": "2020-09-13T22:38:42Z", "commit": {"oid": "0368fa57029f6b0027f86b668872be522b244308"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjozODo0MlrOHQ_5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMjozODo0MlrOHQ_5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NjExNQ==", "bodyText": "@seadowg and I briefly talked about whether the use of the ODK cache directory could have any significance. All files are eventually cleaned up and I don't see any reason why any particular directory has to be used. Passing in the base cache directory, whatever it is, is certainly an improvement.\nAm I understanding correctly that you've kept using storagePathProvider.getDirPath(StorageSubdirectory.CACHE) but create an enclosing directory for each form's files so that can be deleted on cancel rather than having to touch individual files? That seems fine, as would using the Android scoped cache directory.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r487586115", "createdAt": "2020-09-13T22:38:42Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormDownloader.java", "diffHunk": "@@ -339,13 +354,13 @@ FileResult downloadXform(String formName, String url, FormDownloaderListener sta\n          * SurveyCTO: The file is saved into a temp folder and is moved to the final place if everything\n          * is okay, so that garbage is not left over on cancel.\n          */\n-        private void writeFile(File file, FormDownloaderListener stateListener, InputStream inputStream)\n+        private void writeFile(File file, FormDownloaderListener stateListener, InputStream inputStream, File tempDir)\n                 throws IOException, InterruptedException {\n \n             File tempFile = File.createTempFile(\n                     file.getName(),\n                     TEMP_DOWNLOAD_EXTENSION,\n-                    new File(storagePathProvider.getDirPath(StorageSubdirectory.CACHE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0368fa57029f6b0027f86b668872be522b244308"}, "originalPosition": 157}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0368fa57029f6b0027f86b668872be522b244308", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/0368fa57029f6b0027f86b668872be522b244308", "committedDate": "2020-09-10T16:59:05Z", "message": "Remove usage of cache dir from ServerFormDownloader"}, "afterCommit": {"oid": "32073d0f0a61f191b613adb595ebad3ace5d5e75", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/32073d0f0a61f191b613adb595ebad3ace5d5e75", "committedDate": "2020-09-21T14:22:02Z", "message": "Remove usage of cache dir from ServerFormDownloader"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32073d0f0a61f191b613adb595ebad3ace5d5e75", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/32073d0f0a61f191b613adb595ebad3ace5d5e75", "committedDate": "2020-09-21T14:22:02Z", "message": "Remove usage of cache dir from ServerFormDownloader"}, "afterCommit": {"oid": "9861587500f9d1726afa3364aab771227c4355c4", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/9861587500f9d1726afa3364aab771227c4355c4", "committedDate": "2020-09-24T17:24:28Z", "message": "Remove usage of cache dir from ServerFormDownloader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzY5NzE5", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499369719", "createdAt": "2020-09-30T12:22:01Z", "commit": {"oid": "d8fee5efaf9495812223eb4514d39bb0d0ac7dcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoyMjowMVrOHaa2Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoyMjowMVrOHaa2Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ2NDkwNw==", "bodyText": "This new job allows us to run all the submodule tests in parallel to the app tests and the quality checks which as we move more things out to submodules will hopefully keep our test CI time under control", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497464907", "createdAt": "2020-09-30T12:22:01Z", "author": {"login": "seadowg"}, "path": ".circleci/config.yml", "diffHunk": "@@ -37,7 +37,7 @@ jobs:\n           path: collect_app/build/reports\n           destination: reports\n \n-  test_unit:\n+  test_modules:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fee5efaf9495812223eb4514d39bb0d0ac7dcf"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzcwMTIw", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499370120", "createdAt": "2020-09-30T12:22:34Z", "commit": {"oid": "d8fee5efaf9495812223eb4514d39bb0d0ac7dcf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoyMjozNFrOHaa3ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjoyMjozNFrOHaa3ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ2NTE4OQ==", "bodyText": "This is now covered in the ServerFormDownloaderTest", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497465189", "createdAt": "2020-09-30T12:22:34Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formmanagement/DeleteBlankFormTest.java", "diffHunk": "@@ -63,36 +63,6 @@ public void deletingAForm_whenThereFilledForms_removesFormFromBlankFormList_butA\n                 .clickSaveAndExit();\n     }\n \n-    @Test\n-    public void afterFillingAForm_andDeletingIt_allowsFormToBeReDownloaded() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8fee5efaf9495812223eb4514d39bb0d0ac7dcf"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzgxNTAz", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499381503", "createdAt": "2020-09-30T12:36:40Z", "commit": {"oid": "72546652d59309d3129bf1854709d2d5c32532bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNjo0MFrOHabYzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNjo0MFrOHabYzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3Mzc0MA==", "bodyText": "This was begging to be pulled out", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497473740", "createdAt": "2020-09-30T12:36:40Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/FormMetadataParser.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import org.javarosa.core.reference.ReferenceManager;\n+import org.javarosa.core.reference.RootTranslator;\n+import org.odk.collect.android.logic.FileReferenceFactory;\n+import org.odk.collect.android.utilities.FileUtils;\n+\n+import java.io.File;\n+import java.nio.charset.Charset;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.odk.collect.android.utilities.FileUtils.LAST_SAVED_FILENAME;\n+import static org.odk.collect.android.utilities.FileUtils.STUB_XML;\n+import static org.odk.collect.android.utilities.FileUtils.write;\n+\n+public class FormMetadataParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72546652d59309d3129bf1854709d2d5c32532bc"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzgyMzMy", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499382332", "createdAt": "2020-09-30T12:37:35Z", "commit": {"oid": "72546652d59309d3129bf1854709d2d5c32532bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNzozNVrOHabbXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozNzozNVrOHabbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3NDM5Ng==", "bodyText": "We now just always include the manifest as part of the form details so logic that deals with it can be simpler (and doesn't end up fetching the manifest when it doesn't need to).", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497474396", "createdAt": "2020-09-30T12:37:35Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormDetails.java", "diffHunk": "@@ -28,22 +28,22 @@\n     private final String formID;\n     private final String formVersion;\n     private final String hash;\n-    private final String manifestFileHash;\n     private final boolean isNotOnDevice;\n     private final boolean isUpdated;\n+    private final ManifestFile manifest;\n \n     public ServerFormDetails(String formName, String downloadUrl, String manifestUrl, String formID,\n-                             String formVersion, String hash, String manifestFileHash,\n-                             boolean isNotOnDevice, boolean isUpdated) {\n+                             String formVersion, String hash,\n+                             boolean isNotOnDevice, boolean isUpdated, ManifestFile manifest) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72546652d59309d3129bf1854709d2d5c32532bc"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzgzNDc1", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499383475", "createdAt": "2020-09-30T12:38:56Z", "commit": {"oid": "72546652d59309d3129bf1854709d2d5c32532bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozODo1N1rOHabe2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjozODo1N1rOHabe2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3NTI5MA==", "bodyText": "The MultiFormDownloader lives on in here as pulling it apart entirely is going to be pretty time-consuming and we've already hit the core goal of getting rid of any references to it in the rest of the code.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497475290", "createdAt": "2020-09-30T12:38:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormDownloader.java", "diffHunk": "@@ -1,30 +1,538 @@\n package org.odk.collect.android.formmanagement;\n \n+import android.net.Uri;\n+\n+import org.javarosa.core.reference.ReferenceManager;\n import org.odk.collect.android.R;\n import org.odk.collect.android.application.Collect;\n-import org.odk.collect.android.utilities.MultiFormDownloader;\n+import org.odk.collect.android.listeners.FormDownloaderListener;\n+import org.odk.collect.android.provider.FormsProviderAPI;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.FormNameUtils;\n+import org.odk.collect.android.utilities.Validator;\n+import org.odk.collect.forms.Form;\n+import org.odk.collect.forms.FormsRepository;\n+import org.odk.collect.server.FormApiException;\n+import org.odk.collect.server.FormListApi;\n+import org.odk.collect.server.MediaFile;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n+import timber.log.Timber;\n+\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.odk.collect.utilities.PathUtils.getAbsoluteFilePath;\n \n /**\n- * Provides a sarcophagus for {@link org.odk.collect.android.utilities.MultiFormDownloader} so it\n+ * Provides a sarcophagus for {@link MultiFormDownloader} so it\n  * can eventually be disposed of.\n  */\n public class ServerFormDownloader implements FormDownloader {\n \n     private final MultiFormDownloader multiFormDownloader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72546652d59309d3129bf1854709d2d5c32532bc"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5Mzg3NTg0", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499387584", "createdAt": "2020-09-30T12:43:52Z", "commit": {"oid": "f96fcdd1ecd26e18d9d5e626b2fa1622b21aaa2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjo0Mzo1MlrOHabq2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjo0Mzo1MlrOHabq2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ3ODM2MQ==", "bodyText": "It was clear when working with ServerFormDownloader that this part of the interface feels like too much as the provider becomes responsible for calculations that are based on it's state but have logic (calculating a relative or absolute path) that can live separately. All the extra helpers increase the coupling on whatever object is using it.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497478361", "createdAt": "2020-09-30T12:43:52Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java", "diffHunk": "@@ -96,10 +99,6 @@ public String getFormDbPath(String filePath) {\n         return getDbPath(getDirPath(StorageSubdirectory.FORMS), filePath);\n     }\n \n-    public String getAbsoluteFormFilePath(String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f96fcdd1ecd26e18d9d5e626b2fa1622b21aaa2c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MzkxMDIz", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-499391023", "createdAt": "2020-09-30T12:47:45Z", "commit": {"oid": "f96fcdd1ecd26e18d9d5e626b2fa1622b21aaa2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjo0Nzo0NVrOHab1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjo0Nzo0NVrOHab1Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4MTAwNw==", "bodyText": "This is moved into the core collect_app module", "url": "https://github.com/getodk/collect/pull/4040#discussion_r497481007", "createdAt": "2020-09-30T12:47:45Z", "author": {"login": "seadowg"}, "path": "config/quality.gradle", "diffHunk": "@@ -46,18 +46,4 @@ tasks.register(\"pmd\", Pmd) {\n             setDestination new File(\"$reportsDir/pmd/pmd.html\")\n         }\n     }\n-}\n-\n-//------------------------Lint------------------------//\n-\n-android {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f96fcdd1ecd26e18d9d5e626b2fa1622b21aaa2c"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2da00b4ff5b598800a81c208b8421e284832680", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c2da00b4ff5b598800a81c208b8421e284832680", "committedDate": "2020-09-30T15:06:09Z", "message": "Remove complexity around booting an HTTPS MockWebServer\n\nThe structure of the code at this point means that we don't need to\nactually execute HTTPS requests in tests. The core logic we're testing\nis that the behaviour is different for different schemes and we can set\nthat up in the test by simply passing http or https in"}, "afterCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/f20268809fac008e2cd3eb08dded83242fd1cefc", "committedDate": "2020-10-06T11:13:29Z", "message": "Remove complexity around booting an HTTPS MockWebServer\n\nThe structure of the code at this point means that we don't need to\nactually execute HTTPS requests in tests. The core logic we're testing\nis that the behaviour is different for different schemes and we can set\nthat up in the test by simply passing http or https in"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzUyOTc5", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-503352979", "createdAt": "2020-10-06T20:57:47Z", "commit": {"oid": "bd8628e32525a7969a12c8ad13e79b9bef9284a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMToxOTo1MFrOHdaWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNDo0NzoxMFrOHdicCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwMjQyNg==", "bodyText": "What made you want this package change? It's kind of a weird one because it's for the preferences part of the formmanagement feature. Curious to know how you make that decision as we move more towards feature-based packages.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500602426", "createdAt": "2020-10-06T21:19:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/FormUpdateMode.java", "diffHunk": "@@ -1,4 +1,4 @@\n-package org.odk.collect.android.formmanagement;\n+package org.odk.collect.android.preferences;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f9b3c3791e7b0635febdffeaab5152624aaad92"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwNTI1NQ==", "bodyText": "I think this changes behavior. Previously, the presence of media updates was only checked if we didn't already know new XML was available. Now, if media files are available, we ignore whether or not new XML is available and only do an update if new media is available. I think the enclosing condition can be changed to !isNewerFormVersionAvailable && manifestFile != null -- we only care to check media for updates if we already know there isn't new XML.\n    @Test\n    public void whenAFormExists_andIsUpdatedOnServer_andDoesNotHaveNewMedia_isUpdated() throws Exception {\n        formsRepository.save(new Form.Builder()\n                .id(2L)\n                .jrFormId(\"form-2\")\n                .md5Hash(\"form-2-hash-old\")\n                .build());\n\n        File localMediaFile = File.createTempFile(\"blah\", \".csv\");\n        writeToFile(localMediaFile, \"blah\");\n        when(mediaFileRepository.getAll(\"form-2\", \"server\")).thenReturn(asList(localMediaFile));\n\n        List<ServerFormDetails> serverFormDetails = fetcher.fetchFormDetails();\n        assertThat(serverFormDetails.get(1).isUpdated(), is(true));\n    }", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500605255", "createdAt": "2020-10-06T21:25:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormsDetailsFetcher.java", "diffHunk": "@@ -71,13 +70,13 @@ public void updateFormListApi(String url, WebCredentialsUtils webCredentialsUtil\n \n             boolean thisFormAlreadyDownloaded = !formsRepository.getByJrFormIdNotDeleted(listItem.getFormID()).isEmpty();\n             if (thisFormAlreadyDownloaded) {\n-                isNewerFormVersionAvailable = isNewerFormVersionAvailable(getMd5HashWithoutPrefix(listItem.getHashWithPrefix()));\n+                isNewerFormVersionAvailable = isNewerFormVersionAvailable(listItem);\n \n                 if (manifestFile != null) {\n                     List<MediaFile> newMediaFiles = manifestFile.getMediaFiles();\n \n                     if (newMediaFiles != null && !newMediaFiles.isEmpty()) {\n-                        areNewerMediaFilesAvailable = areNewerMediaFilesAvailable(listItem.getFormID(), listItem.getVersion(), newMediaFiles);\n+                        isNewerFormVersionAvailable = areNewerMediaFilesAvailable(listItem.getFormID(), listItem.getVersion(), newMediaFiles);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "306dc0d8e20a6458b6615058a01e062e940091c1"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYwNzA1NA==", "bodyText": "Just showing \"Failure\" rather than any more specific message was already part of the match exactly changes, right? So this doesn't change behavior?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500607054", "createdAt": "2020-10-06T21:29:18Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/DownloadFormsTask.java", "diffHunk": "@@ -67,7 +67,7 @@ public DownloadFormsTask(FormDownloader formDownloader) {\n \n                 results.put(serverFormDetails, Collect.getInstance().getString(R.string.success));\n             } catch (FormDownloadException e) {\n-                results.put(serverFormDetails, e.getMessage());\n+                results.put(serverFormDetails, Collect.getInstance().getString(R.string.failure));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3625660fbb352099cb9408fe3760bb9827586a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxMzcwNQ==", "bodyText": "Doesn't this mean lint won't be run on the submodules? Shouldn't it?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500613705", "createdAt": "2020-10-06T21:44:09Z", "author": {"login": "lognaturel"}, "path": "config/quality.gradle", "diffHunk": "@@ -46,18 +46,4 @@ tasks.register(\"pmd\", Pmd) {\n             setDestination new File(\"$reportsDir/pmd/pmd.html\")\n         }\n     }\n-}\n-\n-//------------------------Lint------------------------//\n-\n-android {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4MTAwNw=="}, "originalCommit": {"oid": "f96fcdd1ecd26e18d9d5e626b2fa1622b21aaa2c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTE1Ng==", "bodyText": "Really, I think we should be using Paths and relativize. For some other time.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500649156", "createdAt": "2020-10-06T23:20:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/PathUtils.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.odk.collect.utilities;\n+\n+import java.io.File;\n+\n+public class PathUtils {\n+\n+    private PathUtils() {\n+\n+    }\n+\n+    public static String getRelativeFilePath(String dirPath, String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTQ3Mg==", "bodyText": "Path.resolve", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500649472", "createdAt": "2020-10-06T23:21:12Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/PathUtils.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.odk.collect.utilities;\n+\n+import java.io.File;\n+\n+public class PathUtils {\n+\n+    private PathUtils() {\n+\n+    }\n+\n+    public static String getRelativeFilePath(String dirPath, String filePath) {\n+        return filePath.startsWith(dirPath)\n+                ? filePath.substring(dirPath.length() + 1)\n+                : filePath;\n+    }\n+\n+    public static String getAbsoluteFilePath(String dirPath, String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1ODkzMA==", "bodyText": "Somehow I haven't noticed this signature. Why is the first param ArrayList<ServerFormDetails> rather than just ServerFormDetails? Feels unusual that doInBackground needs to access the 0th element. Did this change at some point or has it always been like this?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500658930", "createdAt": "2020-10-06T23:52:03Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/DownloadFormsTask.java", "diffHunk": "@@ -33,32 +38,51 @@\n  * @author carlhartung\n  */\n public class DownloadFormsTask extends\n-        AsyncTask<ArrayList<ServerFormDetails>, String, HashMap<ServerFormDetails, String>> implements FormDownloaderListener {\n+        AsyncTask<ArrayList<ServerFormDetails>, String, Map<ServerFormDetails, String>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MjY0NA==", "bodyText": "This is not actually possible through the UI, is it? If it is, shouldn't the status for forms that did download be updated?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500662644", "createdAt": "2020-10-07T00:04:23Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/AutoUpdateTaskSpec.java", "diffHunk": "@@ -77,8 +80,18 @@\n                     if (preferencesProvider.getGeneralSharedPreferences().getBoolean(KEY_AUTOMATIC_UPDATE, false)) {\n                         changeLock.withLock(acquiredLock -> {\n                             if (acquiredLock) {\n-                                final HashMap<ServerFormDetails, String> result = multiFormDownloader.downloadForms(updatedForms, null);\n-                                notifier.onUpdatesDownloaded(result);\n+                                HashMap<ServerFormDetails, String> results = new HashMap<>();\n+                                for (ServerFormDetails serverFormDetails : updatedForms) {\n+                                    try {\n+                                        formDownloader.downloadForm(serverFormDetails, null, null);\n+                                        results.put(serverFormDetails, Collect.getInstance().getString(R.string.success));\n+                                    } catch (FormDownloadException e) {\n+                                        results.put(serverFormDetails, e.getMessage());\n+                                    } catch (InterruptedException e) {\n+                                        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MzQwMw==", "bodyText": "There will never be a message for this. I believe the only place that exception is thrown is at https://github.com/getodk/collect/pull/4040/files?file-filters%5B%5D=.gradle&file-filters%5B%5D=.java&file-filters%5B%5D=.xml#diff-8ae847a7cbae59b9a61bd5868b5c6514R65. Is the client robust to nulls? Should this maybe be the failure message?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500663403", "createdAt": "2020-10-07T00:07:01Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/backgroundwork/AutoUpdateTaskSpec.java", "diffHunk": "@@ -77,8 +80,18 @@\n                     if (preferencesProvider.getGeneralSharedPreferences().getBoolean(KEY_AUTOMATIC_UPDATE, false)) {\n                         changeLock.withLock(acquiredLock -> {\n                             if (acquiredLock) {\n-                                final HashMap<ServerFormDetails, String> result = multiFormDownloader.downloadForms(updatedForms, null);\n-                                notifier.onUpdatesDownloaded(result);\n+                                HashMap<ServerFormDetails, String> results = new HashMap<>();\n+                                for (ServerFormDetails serverFormDetails : updatedForms) {\n+                                    try {\n+                                        formDownloader.downloadForm(serverFormDetails, null, null);\n+                                        results.put(serverFormDetails, Collect.getInstance().getString(R.string.success));\n+                                    } catch (FormDownloadException e) {\n+                                        results.put(serverFormDetails, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NzkyMQ==", "bodyText": "Canceled -> Cancelled", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500667921", "createdAt": "2020-10-07T00:22:29Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formmanagement/ServerFormDownloader.java", "diffHunk": "@@ -1,31 +1,532 @@\n package org.odk.collect.android.formmanagement;\n \n+import android.net.Uri;\n+\n+import org.javarosa.core.reference.ReferenceManager;\n import org.odk.collect.android.R;\n import org.odk.collect.android.application.Collect;\n-import org.odk.collect.android.utilities.MultiFormDownloader;\n-import org.odk.collect.android.utilities.TranslationHandler;\n+import org.odk.collect.android.listeners.FormDownloaderListener;\n+import org.odk.collect.android.provider.FormsProviderAPI;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.FormNameUtils;\n+import org.odk.collect.android.utilities.Validator;\n+import org.odk.collect.forms.Form;\n+import org.odk.collect.forms.FormsRepository;\n+import org.odk.collect.server.FormApiException;\n+import org.odk.collect.server.FormListApi;\n+import org.odk.collect.server.MediaFile;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+\n+import javax.annotation.Nullable;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n+import timber.log.Timber;\n+\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.odk.collect.utilities.PathUtils.getAbsoluteFilePath;\n \n-/**\n- * Provides a sarcophagus for {@link org.odk.collect.android.utilities.MultiFormDownloader} so it\n- * can eventually be disposed of.\n- */\n public class ServerFormDownloader implements FormDownloader {\n \n     private final MultiFormDownloader multiFormDownloader;\n+    private final FormsRepository formsRepository;\n+    private final File cacheDir;\n+    private final String formsDirPath;\n \n-    public ServerFormDownloader(MultiFormDownloader multiFormDownloader) {\n-        this.multiFormDownloader = multiFormDownloader;\n+    public ServerFormDownloader(FormListApi formListApi, FormsRepository formsRepository, File cacheDir, String formsDirPath) {\n+        this.cacheDir = cacheDir;\n+        this.formsDirPath = formsDirPath;\n+        this.multiFormDownloader = new MultiFormDownloader(formsRepository, formListApi);\n+        this.formsRepository = formsRepository;\n     }\n \n     @Override\n-    public void downloadForm(ServerFormDetails form) throws FormDownloadException {\n-        HashMap<ServerFormDetails, String> results = multiFormDownloader.downloadForms(Collections.singletonList(form), null);\n-        boolean failure = results.values().stream().anyMatch(s -> !s.equals(TranslationHandler.getString(Collect.getInstance(), R.string.success)));\n-        if (failure) {\n-            throw new FormDownloadException();\n+    public void downloadForm(ServerFormDetails form, @Nullable ProgressReporter progressReporter, @Nullable Supplier<Boolean> isCancelled) throws FormDownloadException, InterruptedException {\n+        Form formOnDevice = formsRepository.get(form.getFormId(), form.getFormVersion());\n+        if (formOnDevice != null && formOnDevice.isDeleted()) {\n+            formsRepository.restore(formOnDevice.getId());\n+        }\n+\n+        File tempDir = new File(cacheDir, \"download-\" + UUID.randomUUID().toString());\n+        tempDir.mkdirs();\n+\n+        try {\n+            FormDownloaderListener stateListener = new ProgressReporterAndSupplierStateListener(progressReporter, isCancelled);\n+            boolean result = multiFormDownloader.processOneForm(form, stateListener, tempDir, formsDirPath);\n+\n+            if (!result) {\n+                throw new FormDownloadException();\n+            }\n+        } finally {\n+            try {\n+                deleteDirectory(tempDir);\n+            } catch (IOException ignored) {\n+                // ignored\n+            }\n+        }\n+    }\n+\n+    private static class ProgressReporterAndSupplierStateListener implements FormDownloaderListener {\n+        private final ProgressReporter progressReporter;\n+        private final Supplier<Boolean> isCancelled;\n+\n+        ProgressReporterAndSupplierStateListener(ProgressReporter progressReporter, Supplier<Boolean> isCancelled) {\n+            this.progressReporter = progressReporter;\n+            this.isCancelled = isCancelled;\n+        }\n+\n+        @Override\n+        public void progressUpdate(String currentFile, String progress, String total) {\n+            if (progressReporter != null) {\n+                progressReporter.onDownloadingMediaFile(Integer.parseInt(progress));\n+            }\n+        }\n+\n+        @Override\n+        public boolean isTaskCanceled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMzc2OQ==", "bodyText": "Expected?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500733769", "createdAt": "2020-10-07T04:42:18Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/ServerFormDownloaderTest.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import com.google.common.io.Files;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.support.InMemFormsRepository;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.WebCredentialsUtils;\n+import org.odk.collect.forms.Form;\n+import org.odk.collect.forms.FormsRepository;\n+import org.odk.collect.server.FormApiException;\n+import org.odk.collect.server.FormListApi;\n+import org.odk.collect.server.FormListItem;\n+import org.odk.collect.server.ManifestFile;\n+import org.odk.collect.server.MediaFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.support.FormUtils.buildForm;\n+import static org.odk.collect.android.support.FormUtils.createXForm;\n+import static org.odk.collect.android.utilities.FileUtils.read;\n+import static org.odk.collect.utilities.PathUtils.getAbsoluteFilePath;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class ServerFormDownloaderTest {\n+\n+    private final FormsRepository formsRepository = new InMemFormsRepository();\n+\n+    private File cacheDir;\n+    private File formsDir;\n+\n+    @Before\n+    public void setup() {\n+        cacheDir = Files.createTempDir();\n+        formsDir = Files.createTempDir();\n+    }\n+\n+    @Test\n+    public void downloadsAndSavesForm() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                null);\n+\n+        FormListApi formListApi = mock(FormListApi.class);\n+        when(formListApi.fetchForm(\"http://downloadUrl\")).thenReturn(new ByteArrayInputStream(xform.getBytes()));\n+\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+        downloader.downloadForm(serverFormDetails, null, null);\n+\n+        List<Form> allForms = formsRepository.getAll();\n+        assertThat(allForms.size(), is(1));\n+        Form form = allForms.get(0);\n+        assertThat(form.getJrFormId(), is(\"id\"));\n+\n+        File formFile = new File(getAbsoluteFilePath(formsDir.getAbsolutePath(), form.getFormFilePath()));\n+        assertThat(formFile.exists(), is(true));\n+        assertThat(new String(read(formFile)), is(xform));\n+    }\n+\n+    @Test\n+    public void whenFormHasMediaFiles_downloadsAndSavesFormAndMediaFiles() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                new ManifestFile(\"\", asList(\n+                        new MediaFile(\"file1\", \"hash-1\", \"http://file1\"),\n+                        new MediaFile(\"file2\", \"hash-2\", \"http://file2\")\n+                )));\n+\n+        FormListApi formListApi = mock(FormListApi.class);\n+        when(formListApi.fetchForm(\"http://downloadUrl\")).thenReturn(new ByteArrayInputStream(xform.getBytes()));\n+        when(formListApi.fetchMediaFile(\"http://file1\")).thenReturn(new ByteArrayInputStream(\"contents1\".getBytes()));\n+        when(formListApi.fetchMediaFile(\"http://file2\")).thenReturn(new ByteArrayInputStream(\"contents2\".getBytes()));\n+\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+        downloader.downloadForm(serverFormDetails, null, null);\n+\n+        List<Form> allForms = formsRepository.getAll();\n+        assertThat(allForms.size(), is(1));\n+        Form form = allForms.get(0);\n+        assertThat(form.getJrFormId(), is(\"id\"));\n+\n+        File formFile = new File(getAbsoluteFilePath(formsDir.getAbsolutePath(), form.getFormFilePath()));\n+        assertThat(formFile.exists(), is(true));\n+        assertThat(new String(read(formFile)), is(xform));\n+\n+        File mediaFile1 = new File(form.getFormMediaPath() + \"/file1\");\n+        assertThat(mediaFile1.exists(), is(true));\n+        assertThat(new String(read(mediaFile1)), is(\"contents1\"));\n+\n+        File mediaFile2 = new File(form.getFormMediaPath() + \"/file2\");\n+        assertThat(mediaFile2.exists(), is(true));\n+        assertThat(new String(read(mediaFile2)), is(\"contents2\"));\n+    }\n+\n+    @Test\n+    public void afterDownloadingXForm_cancelling_throwsInterruptedExceptionAndDoesNotSaveAnything() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                null);\n+\n+        CancelAfterFormDownloadFormListApi formListApi = new CancelAfterFormDownloadFormListApi(xform);\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+\n+        try {\n+            downloader.downloadForm(serverFormDetails, null, formListApi);\n+            fail(\"Excepted exception\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczMzg5Ng==", "bodyText": "Add test for media file progress?", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500733896", "createdAt": "2020-10-07T04:42:51Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/ServerFormDownloaderTest.java", "diffHunk": "@@ -0,0 +1,349 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import com.google.common.io.Files;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.support.InMemFormsRepository;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.WebCredentialsUtils;\n+import org.odk.collect.forms.Form;\n+import org.odk.collect.forms.FormsRepository;\n+import org.odk.collect.server.FormApiException;\n+import org.odk.collect.server.FormListApi;\n+import org.odk.collect.server.FormListItem;\n+import org.odk.collect.server.ManifestFile;\n+import org.odk.collect.server.MediaFile;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.support.FormUtils.buildForm;\n+import static org.odk.collect.android.support.FormUtils.createXForm;\n+import static org.odk.collect.android.utilities.FileUtils.read;\n+import static org.odk.collect.utilities.PathUtils.getAbsoluteFilePath;\n+\n+@SuppressWarnings(\"PMD.DoubleBraceInitialization\")\n+public class ServerFormDownloaderTest {\n+\n+    private final FormsRepository formsRepository = new InMemFormsRepository();\n+\n+    private File cacheDir;\n+    private File formsDir;\n+\n+    @Before\n+    public void setup() {\n+        cacheDir = Files.createTempDir();\n+        formsDir = Files.createTempDir();\n+    }\n+\n+    @Test\n+    public void downloadsAndSavesForm() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                null);\n+\n+        FormListApi formListApi = mock(FormListApi.class);\n+        when(formListApi.fetchForm(\"http://downloadUrl\")).thenReturn(new ByteArrayInputStream(xform.getBytes()));\n+\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+        downloader.downloadForm(serverFormDetails, null, null);\n+\n+        List<Form> allForms = formsRepository.getAll();\n+        assertThat(allForms.size(), is(1));\n+        Form form = allForms.get(0);\n+        assertThat(form.getJrFormId(), is(\"id\"));\n+\n+        File formFile = new File(getAbsoluteFilePath(formsDir.getAbsolutePath(), form.getFormFilePath()));\n+        assertThat(formFile.exists(), is(true));\n+        assertThat(new String(read(formFile)), is(xform));\n+    }\n+\n+    @Test\n+    public void whenFormHasMediaFiles_downloadsAndSavesFormAndMediaFiles() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                new ManifestFile(\"\", asList(\n+                        new MediaFile(\"file1\", \"hash-1\", \"http://file1\"),\n+                        new MediaFile(\"file2\", \"hash-2\", \"http://file2\")\n+                )));\n+\n+        FormListApi formListApi = mock(FormListApi.class);\n+        when(formListApi.fetchForm(\"http://downloadUrl\")).thenReturn(new ByteArrayInputStream(xform.getBytes()));\n+        when(formListApi.fetchMediaFile(\"http://file1\")).thenReturn(new ByteArrayInputStream(\"contents1\".getBytes()));\n+        when(formListApi.fetchMediaFile(\"http://file2\")).thenReturn(new ByteArrayInputStream(\"contents2\".getBytes()));\n+\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+        downloader.downloadForm(serverFormDetails, null, null);\n+\n+        List<Form> allForms = formsRepository.getAll();\n+        assertThat(allForms.size(), is(1));\n+        Form form = allForms.get(0);\n+        assertThat(form.getJrFormId(), is(\"id\"));\n+\n+        File formFile = new File(getAbsoluteFilePath(formsDir.getAbsolutePath(), form.getFormFilePath()));\n+        assertThat(formFile.exists(), is(true));\n+        assertThat(new String(read(formFile)), is(xform));\n+\n+        File mediaFile1 = new File(form.getFormMediaPath() + \"/file1\");\n+        assertThat(mediaFile1.exists(), is(true));\n+        assertThat(new String(read(mediaFile1)), is(\"contents1\"));\n+\n+        File mediaFile2 = new File(form.getFormMediaPath() + \"/file2\");\n+        assertThat(mediaFile2.exists(), is(true));\n+        assertThat(new String(read(mediaFile2)), is(\"contents2\"));\n+    }\n+\n+    @Test\n+    public void afterDownloadingXForm_cancelling_throwsInterruptedExceptionAndDoesNotSaveAnything() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                null);\n+\n+        CancelAfterFormDownloadFormListApi formListApi = new CancelAfterFormDownloadFormListApi(xform);\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+\n+        try {\n+            downloader.downloadForm(serverFormDetails, null, formListApi);\n+            fail(\"Excepted exception\");\n+        } catch (InterruptedException e) {\n+            assertThat(formsRepository.getAll(), is(empty()));\n+            assertThat(asList(new File(getCacheFilesPath()).listFiles()), is(empty()));\n+            assertThat(asList(new File(getFormFilesPath()).listFiles()), is(empty()));\n+        }\n+    }\n+\n+    @Test\n+    public void afterDownloadingMediaFile_cancelling_throwsInterruptedExceptionAndDoesNotSaveAnything() throws Exception {\n+        String xform = createXForm(\"id\", \"version\");\n+        ServerFormDetails serverFormDetails = new ServerFormDetails(\n+                \"Form\",\n+                \"http://downloadUrl\",\n+                \"http://manifestUrl\",\n+                \"id\",\n+                \"version\",\n+                \"md5:\" + FileUtils.getMd5Hash(new ByteArrayInputStream(xform.getBytes())),\n+                true,\n+                false,\n+                new ManifestFile(\"\", asList(\n+                        new MediaFile(\"file1\", \"hash-1\", \"http://file1\"),\n+                        new MediaFile(\"file2\", \"hash-2\", \"http://file2\")\n+                )));\n+\n+        CancelAfterMediaFileDownloadFormListApi formListApi = new CancelAfterMediaFileDownloadFormListApi(xform);\n+        ServerFormDownloader downloader = new ServerFormDownloader(formListApi, formsRepository, cacheDir, formsDir.getAbsolutePath());\n+\n+        try {\n+            downloader.downloadForm(serverFormDetails, null, formListApi);\n+            fail(\"Excepted exception\");\n+        } catch (InterruptedException e) {\n+            assertThat(formsRepository.getAll(), is(empty()));\n+            assertThat(asList(new File(getCacheFilesPath()).listFiles()), is(empty()));\n+\n+            // The media directory is created early for some reason\n+            assertThat(asList(new File(getFormFilesPath()).listFiles()), contains(new File(getFormFilesPath() + \"/Form-media\")));\n+        }\n+    }\n+\n+    @Test\n+    public void beforeDownloadingMediaFile_reportsProgress() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczNDg2Ng==", "bodyText": "I think this case should get coverage somewhere. I think the CSV case can be skipped but the last-saved one should also be captured.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500734866", "createdAt": "2020-10-07T04:46:42Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/MultiFormDownloaderTest.java", "diffHunk": "@@ -1,414 +0,0 @@\n-package org.odk.collect.android.utilities;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kxml2.io.KXmlParser;\n-import org.kxml2.kdom.Document;\n-import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnit;\n-import org.mockito.junit.MockitoRule;\n-import org.odk.collect.android.formmanagement.ServerFormDetails;\n-import org.odk.collect.android.openrosa.OpenRosaXmlFetcher;\n-import org.robolectric.RobolectricTestRunner;\n-import org.xmlpull.v1.XmlPullParser;\n-\n-import java.io.BufferedWriter;\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-\n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyInt;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.when;\n-\n-@RunWith(RobolectricTestRunner.class)\n-public class MultiFormDownloaderTest {\n-    @Rule\n-    public MockitoRule mockitoRule = MockitoJUnit.rule();\n-\n-    @Mock\n-    OpenRosaXmlFetcher openRosaXMLFetcher;\n-\n-    /**\n-     * Verifies that a form without media can successfully go through the download process. Regression\n-     * test for https://github.com/getodk/collect/issues/3535.\n-     *\n-     * The focus of this test is the form parsing behavior triggered by a download and how it\n-     * relates to a media folder that may or may not have been created. The downloading of forms and\n-     * saving of parsed form  values are mocked (and those concerns should be separated).\n-     */\n-    @Test\n-    public void downloadingFormWithoutMedia_Succeeds() throws Exception {\n-        String basicNoMedia = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic\\\">\\n\" +\n-                \"                    <q1/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <bind nodeset=\\\"/data/q1\\\" type=\\\"string\\\"/>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <input ref=\\\"/data/q1\\\">\\n\" +\n-                \"            <label>Question</label>\\n\" +\n-                \"        </input>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicNoMedia\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicNoMedia);\n-        out.close();\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails serverFormDetails = new ServerFormDetails(\"No media\", \"https://testserver/no-media.xml\",\n-                null, \"basic\", \"2019121201\",\n-                \"hash\", null, false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(serverFormDetails.getFormName(), serverFormDetails.getDownloadUrl(), null);\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(serverFormDetails);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(serverFormDetails), is(\"Success\"));\n-    }\n-\n-    /**\n-     * Companion to downloading form without media.\n-     *\n-     * The focus of this test is the form parsing behavior triggered by a download and how it\n-     * relates to a media folder that may or may not have been created. The form downloading, media\n-     * downloading and saving of parsed form values are mocked.\n-     *\n-     * Note: what's important in this test is that the manifestURL in the FormDetails object is set.\n-     * It doesn't really matter that the form definition uses media but that's included to better\n-     * match reality.\n-     */\n-    @Test\n-    public void downloadingFormWithMedia_Succeeds() throws Exception {\n-        String basicMedia = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic-media</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic-media\\\">\\n\" +\n-                \"                    <q1/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <bind nodeset=\\\"/data/q1\\\" type=\\\"string\\\"/>\\n\" +\n-                \"            <itext> \\n\" +\n-                \"                <translation default=\\\"true()\\\" lang=\\\"English\\\">\\n\" +\n-                \"                    <text id=\\\"/data/q1:label\\\"><value form=\\\"image\\\">jr://images/b.jpg</value></text>\\n\" +\n-                \"                </translation>\\n\" +\n-                \"            </itext>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <input ref=\\\"/data/q1\\\">\\n\" +\n-                \"            <label>Question</label>\\n\" +\n-                \"        </input>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicMedia\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicMedia);\n-        out.close();\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails serverFormDetails = new ServerFormDetails(\"Media\", \"https://testserver/media.xml\",\n-                \"https://testserver/media-manifest.xml\", \"media\", \"2019121201\",\n-                \"hash\", \"manifestHash\", false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(serverFormDetails.getFormName(), serverFormDetails.getDownloadUrl(), null);\n-        doReturn(\"\").when(downloader).downloadManifestAndMediaFiles(any(), any(), any(), anyInt(), anyInt(), any());\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(serverFormDetails);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(serverFormDetails), is(\"Success\"));\n-    }\n-\n-    /**\n-     * Forms with references to external secondary instance need to have the secondary instance\n-     * available at time of form parse.\n-     *\n-     * See https://github.com/getodk/collect/issues/3635\n-     */\n-    @Test\n-    public void downloadingFormWithXmlExternalSecondaryInstance_Succeeds() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDczNDk4NA==", "bodyText": "I think this edge case is also important to capture somewhere.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r500734984", "createdAt": "2020-10-07T04:47:10Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/MultiFormDownloaderTest.java", "diffHunk": "@@ -1,414 +0,0 @@\n-package org.odk.collect.android.utilities;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kxml2.io.KXmlParser;\n-import org.kxml2.kdom.Document;\n-import org.mockito.Mock;\n-import org.mockito.junit.MockitoJUnit;\n-import org.mockito.junit.MockitoRule;\n-import org.odk.collect.android.formmanagement.ServerFormDetails;\n-import org.odk.collect.android.openrosa.OpenRosaXmlFetcher;\n-import org.robolectric.RobolectricTestRunner;\n-import org.xmlpull.v1.XmlPullParser;\n-\n-import java.io.BufferedWriter;\n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.FileWriter;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-\n-import static org.hamcrest.CoreMatchers.containsString;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.anyInt;\n-import static org.mockito.Mockito.doReturn;\n-import static org.mockito.Mockito.spy;\n-import static org.mockito.Mockito.when;\n-\n-@RunWith(RobolectricTestRunner.class)\n-public class MultiFormDownloaderTest {\n-    @Rule\n-    public MockitoRule mockitoRule = MockitoJUnit.rule();\n-\n-    @Mock\n-    OpenRosaXmlFetcher openRosaXMLFetcher;\n-\n-    /**\n-     * Verifies that a form without media can successfully go through the download process. Regression\n-     * test for https://github.com/getodk/collect/issues/3535.\n-     *\n-     * The focus of this test is the form parsing behavior triggered by a download and how it\n-     * relates to a media folder that may or may not have been created. The downloading of forms and\n-     * saving of parsed form  values are mocked (and those concerns should be separated).\n-     */\n-    @Test\n-    public void downloadingFormWithoutMedia_Succeeds() throws Exception {\n-        String basicNoMedia = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic\\\">\\n\" +\n-                \"                    <q1/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <bind nodeset=\\\"/data/q1\\\" type=\\\"string\\\"/>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <input ref=\\\"/data/q1\\\">\\n\" +\n-                \"            <label>Question</label>\\n\" +\n-                \"        </input>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicNoMedia\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicNoMedia);\n-        out.close();\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails serverFormDetails = new ServerFormDetails(\"No media\", \"https://testserver/no-media.xml\",\n-                null, \"basic\", \"2019121201\",\n-                \"hash\", null, false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(serverFormDetails.getFormName(), serverFormDetails.getDownloadUrl(), null);\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(serverFormDetails);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(serverFormDetails), is(\"Success\"));\n-    }\n-\n-    /**\n-     * Companion to downloading form without media.\n-     *\n-     * The focus of this test is the form parsing behavior triggered by a download and how it\n-     * relates to a media folder that may or may not have been created. The form downloading, media\n-     * downloading and saving of parsed form values are mocked.\n-     *\n-     * Note: what's important in this test is that the manifestURL in the FormDetails object is set.\n-     * It doesn't really matter that the form definition uses media but that's included to better\n-     * match reality.\n-     */\n-    @Test\n-    public void downloadingFormWithMedia_Succeeds() throws Exception {\n-        String basicMedia = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic-media</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic-media\\\">\\n\" +\n-                \"                    <q1/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <bind nodeset=\\\"/data/q1\\\" type=\\\"string\\\"/>\\n\" +\n-                \"            <itext> \\n\" +\n-                \"                <translation default=\\\"true()\\\" lang=\\\"English\\\">\\n\" +\n-                \"                    <text id=\\\"/data/q1:label\\\"><value form=\\\"image\\\">jr://images/b.jpg</value></text>\\n\" +\n-                \"                </translation>\\n\" +\n-                \"            </itext>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <input ref=\\\"/data/q1\\\">\\n\" +\n-                \"            <label>Question</label>\\n\" +\n-                \"        </input>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicMedia\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicMedia);\n-        out.close();\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails serverFormDetails = new ServerFormDetails(\"Media\", \"https://testserver/media.xml\",\n-                \"https://testserver/media-manifest.xml\", \"media\", \"2019121201\",\n-                \"hash\", \"manifestHash\", false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(serverFormDetails.getFormName(), serverFormDetails.getDownloadUrl(), null);\n-        doReturn(\"\").when(downloader).downloadManifestAndMediaFiles(any(), any(), any(), anyInt(), anyInt(), any());\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(serverFormDetails);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(serverFormDetails), is(\"Success\"));\n-    }\n-\n-    /**\n-     * Forms with references to external secondary instance need to have the secondary instance\n-     * available at time of form parse.\n-     *\n-     * See https://github.com/getodk/collect/issues/3635\n-     */\n-    @Test\n-    public void downloadingFormWithXmlExternalSecondaryInstance_Succeeds() throws Exception {\n-        String basicLastSaved = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\" >\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic-external-xml-instance</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic-external-xml-instance\\\">\\n\" +\n-                \"                    <first/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <instance id=\\\"external-xml\\\" src=\\\"jr://file/external-data.xml\\\" />\\n\" +\n-                \"            <bind nodeset=\\\"/data/first\\\" type=\\\"select1\\\"/>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <select1 ref=\\\"/data/first\\\">\\n\" +\n-                \"            <label>First</label>\\n\" +\n-                \"            <itemset nodeset=\\\"instance('external-xml')/root/item[first='']\\\">\\n\" +\n-                \"                <value ref=\\\"name\\\"/>\\n\" +\n-                \"                <label ref=\\\"label\\\"/>\\n\" +\n-                \"            </itemset>\\n\" +\n-                \"        </select1>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicExternalXmlInstance\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicLastSaved);\n-        out.close();\n-\n-        when(openRosaXMLFetcher.getXML(\"https://testserver/manifest.xml\")).thenReturn(buildManifestFetchResult(\"external-data.xml\"));\n-        when(openRosaXMLFetcher.getFile(\"https://testserver/external-data.xml\",\n-                null)).thenReturn(buildXmlExternalInstanceFetchResult());\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails test1 = new ServerFormDetails(\"basic-external-xml-instance\", \"https://testserver/form.xml\",\n-                \"https://testserver/manifest.xml\", \"basic-external-xml-instance\", \"20200101\",\n-                \"hash\", \"manifestHash\", false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(test1.getFormName(), test1.getDownloadUrl(), null);\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(test1);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(test1), is(\"Success\"));\n-    }\n-\n-    @Test\n-    public void downloadingFormWithCsvExternalSecondaryInstance_Succeeds() throws Exception {\n-        String basicLastSaved = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\" >\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic-external-csv-instance</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic-external-csv-instance\\\">\\n\" +\n-                \"                    <first/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <instance id=\\\"external-csv\\\" src=\\\"jr://file-csv/external-data.csv\\\" />\\n\" +\n-                \"            <bind nodeset=\\\"/data/first\\\" type=\\\"select1\\\"/>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <select1 ref=\\\"/data/first\\\">\\n\" +\n-                \"            <label>First</label>\\n\" +\n-                \"            <itemset nodeset=\\\"instance('external-csv')/root/item[first='']\\\">\\n\" +\n-                \"                <value ref=\\\"name\\\"/>\\n\" +\n-                \"                <label ref=\\\"label\\\"/>\\n\" +\n-                \"            </itemset>\\n\" +\n-                \"        </select1>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicExternalCsvInstance\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicLastSaved);\n-        out.close();\n-\n-        when(openRosaXMLFetcher.getXML(\"https://testserver/manifest.xml\")).thenReturn(buildManifestFetchResult(\"external-data.csv\"));\n-        when(openRosaXMLFetcher.getFile(\"https://testserver/external-data.csv\",\n-                null)).thenReturn(buildCsvExternalInstanceFetchResult());\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails test1 = new ServerFormDetails(\"basic-external-csv-instance\", \"https://testserver/form.xml\",\n-                \"https://testserver/manifest.xml\", \"basic-external-csv-instance\", \"20200101\",\n-                \"hash\", \"manifestHash\", false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(test1.getFormName(), test1.getDownloadUrl(), null);\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(test1);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(test1), is(\"Success\"));\n-    }\n-\n-    /**\n-     * Forms with last-saved references are a special case of external secondary instances because\n-     * last-saved doesn't come from the remote server but is generated locally.\n-     */\n-    @Test\n-    public void downloadingFormWithLastSavedReference_Succeeds() throws Exception {\n-        String basicLastSaved = \"<h:html xmlns=\\\"http://www.w3.org/2002/xforms\\\" xmlns:h=\\\"http://www.w3.org/1999/xhtml\\\">\\n\" +\n-                \"    <h:head>\\n\" +\n-                \"        <h:title>basic-last-saved</h:title>\\n\" +\n-                \"        <model>\\n\" +\n-                \"            <instance>\\n\" +\n-                \"                <data id=\\\"basic-last-saved\\\">\\n\" +\n-                \"                    <q1/>\\n\" +\n-                \"                </data>\\n\" +\n-                \"            </instance>\\n\" +\n-                \"            <instance id=\\\"__last-saved\\\" src=\\\"jr://instance/last-saved\\\"/>\\n\" +\n-                \"            <bind nodeset=\\\"/data/q1\\\" type=\\\"string\\\"/>\\n\" +\n-                \"           <setvalue event=\\\"odk-instance-first-load\\\" ref=\\\"/data/q1\\\" value=\\\" instance('__last-saved')/data/q1 \\\"/>\\n\" +\n-                \"        </model>\\n\" +\n-                \"    </h:head>\\n\" +\n-                \"    <h:body>\\n\" +\n-                \"        <input ref=\\\"/data/q1\\\">\\n\" +\n-                \"            <label>Question</label>\\n\" +\n-                \"        </input>\\n\" +\n-                \"    </h:body>\\n\" +\n-                \"</h:html>\";\n-        File formXml = File.createTempFile(\"basicLastSaved\", \".xml\");\n-        formXml.deleteOnExit();\n-\n-        BufferedWriter out = new BufferedWriter(new FileWriter(formXml));\n-        out.write(basicLastSaved);\n-        out.close();\n-\n-        MultiFormDownloader downloader = spy(new MultiFormDownloader(openRosaXMLFetcher));\n-        ServerFormDetails test1 = new ServerFormDetails(\"Last Saved\", \"https://testserver/media.xml\",\n-                \"https://testserver/media-manifest.xml\", \"basic-last-saved\", \"20200101\",\n-                \"hash\", \"manifestHash\", false, false);\n-        MultiFormDownloader.FileResult result = new MultiFormDownloader.FileResult(formXml, true);\n-        doReturn(result).when(downloader).downloadXform(test1.getFormName(), test1.getDownloadUrl(), null);\n-        doReturn(\"\").when(downloader).downloadManifestAndMediaFiles(any(), any(), any(), anyInt(), anyInt(), any());\n-        doReturn(true).when(downloader).installEverything(any(), any(), any());\n-\n-        List<ServerFormDetails> forms = new ArrayList<>();\n-        forms.add(test1);\n-\n-        HashMap<ServerFormDetails, String> messages = downloader.downloadForms(forms, null);\n-        assertThat(messages.get(test1), is(\"Success\"));\n-    }\n-\n-    /**\n-     * Edge case: a form could have an attachment with filename last-saved.xml. This will get\n-     * replaced immediately on download and this test documents that behavior. We could let it go\n-     * through but let's replace it immediately to help a user who tries this troubleshoot.\n-     * Otherwise it would only be replaced when an instance is saved so a user could think everything\n-     * is ok if they only try launching the form once.\n-     *\n-     * This is an unfortunate side effect of using the form media folder to store the contents that\n-     * jr://instance/last-saved resolves to.\n-     *\n-     * Additionally, immediately replacing a secondary instance with name last-saved.xml avoid users\n-     * exploiting this current implementation quirk as a feature to preload defaults for the first\n-     * instance.\n-     * */\n-    @Test\n-    public void downloadingFormWithExternalSecondaryInstanceNamedLastSavedXml_Succeeds() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f20268809fac008e2cd3eb08dded83242fd1cefc"}, "originalPosition": 324}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODgwNzM1", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-505880735", "createdAt": "2020-10-09T17:53:13Z", "commit": {"oid": "85d83e14805f55c5917b38ccda54620c338f4475"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1MzoxM1rOHfTeaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1NzozMlrOHfTmyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4Njk4NA==", "bodyText": "YES. Hadn't thought of this one. Great case to have.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r502586984", "createdAt": "2020-10-09T17:53:13Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/FormMetadataParserTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package org.odk.collect.android.formmanagement;\n+\n+import com.google.common.io.Files;\n+\n+import org.javarosa.core.reference.InvalidReferenceException;\n+import org.javarosa.core.reference.ReferenceManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.odk.collect.android.utilities.FileUtils;\n+\n+import java.io.File;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.fail;\n+\n+public class FormMetadataParserTest {\n+\n+    private File mediaDir;\n+    private ReferenceManager referenceManager;\n+\n+    @Before\n+    public void setup() {\n+        referenceManager = ReferenceManager.instance();\n+        referenceManager.reset();\n+\n+        mediaDir = Files.createTempDir();\n+    }\n+\n+    @Test\n+    public void canParseFormWithExternalSecondaryInstance() throws Exception {\n+        File formXml = File.createTempFile(\"form\", \".xml\");\n+        FileUtils.write(formXml, EXTERNAL_SECONDARY_INSTANCE.getBytes());\n+\n+        File externalInstance = new File(mediaDir, \"external-data.xml\");\n+        FileUtils.write(externalInstance, EXTERNAL_INSTANCE.getBytes());\n+\n+        FormMetadataParser formMetadataParser = new FormMetadataParser(referenceManager);\n+        Map<String, String> metaData = formMetadataParser.parse(formXml, mediaDir);\n+        assertThat(metaData.get(FileUtils.FORMID), is(\"basic-external-xml-instance\"));\n+    }\n+\n+    @Test\n+    public void canParseFormWithCSVExternalSecondaryInstance() throws Exception {\n+        File formXml = File.createTempFile(\"form\", \".xml\");\n+        FileUtils.write(formXml, CSV_EXTERNAL_SECONDARY_INSTANCE.getBytes());\n+\n+        File externalInstance = new File(mediaDir, \"external-data.csv\");\n+        FileUtils.write(externalInstance, CSV_EXTERNAL_INSTANCE.getBytes());\n+\n+        FormMetadataParser formMetadataParser = new FormMetadataParser(referenceManager);\n+        Map<String, String> metaData = formMetadataParser.parse(formXml, mediaDir);\n+        assertThat(metaData.get(FileUtils.FORMID), is(\"basic-external-csv-instance\"));\n+    }\n+\n+    @Test\n+    public void canParseFormWithLastSaved() throws Exception {\n+        File formXml = File.createTempFile(\"form\", \".xml\");\n+        FileUtils.write(formXml, LAST_SAVED.getBytes());\n+\n+        FormMetadataParser formMetadataParser = new FormMetadataParser(referenceManager);\n+        Map<String, String> metaData = formMetadataParser.parse(formXml, mediaDir);\n+        assertThat(metaData.get(FileUtils.FORMID), is(\"basic-last-saved\"));\n+    }\n+\n+    @Test\n+    public void doesNotLeaveFilesInMediaDir() throws Exception {\n+        File formXml = File.createTempFile(\"form\", \".xml\");\n+        FileUtils.write(formXml, LAST_SAVED.getBytes());\n+\n+        FormMetadataParser formMetadataParser = new FormMetadataParser(referenceManager);\n+        formMetadataParser.parse(formXml, mediaDir);\n+\n+        assertThat(mediaDir.listFiles().length, is(0));\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"PMD.JUnitUseExpected\")\n+    public void cleansUpReferenceManager() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85d83e14805f55c5917b38ccda54620c338f4475"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTEyOQ==", "bodyText": "That's not the behavior I'd expect! The media file should be ignored and the last-saved instance should be used.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r502589129", "createdAt": "2020-10-09T17:57:32Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/formmanagement/FormMetadataParserTest.java", "diffHunk": "@@ -64,6 +65,32 @@ public void canParseFormWithLastSaved() throws Exception {\n         assertThat(metaData.get(FileUtils.FORMID), is(\"basic-last-saved\"));\n     }\n \n+    /**\n+     * Edge case: a form could have an attachment with filename last-saved.xml. This will get\n+     * replaced immediately on download and this test documents that behavior. We could let it go\n+     * through but let's replace it immediately to help a user who tries this troubleshoot.\n+     * Otherwise it would only be replaced when an instance is saved so a user could think everything\n+     * is ok if they only try launching the form once.\n+     *\n+     * This is an unfortunate side effect of using the form media folder to store the contents that\n+     * jr://instance/last-saved resolves to.\n+     *\n+     * Additionally, immediately replacing a secondary instance with name last-saved.xml avoid users\n+     * exploiting this current implementation quirk as a feature to preload defaults for the first\n+     * instance.\n+     * */\n+    @Test(expected = XFormParseException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95d46d8a23b7e2253acd86064dfd8dd6181e8b79"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODI1ODU5", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-506825859", "createdAt": "2020-10-12T18:13:09Z", "commit": {"oid": "1c033294d0d873c648ce8c533cab937912adb349"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODI4Njk0", "url": "https://github.com/getodk/collect/pull/4040#pullrequestreview-506828694", "createdAt": "2020-10-12T18:18:35Z", "commit": {"oid": "1c033294d0d873c648ce8c533cab937912adb349"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxODozNVrOHgI1gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxODozNVrOHgI1gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MTI0OQ==", "bodyText": "Looks like your IntelliJ settings aren't set to alphabetize imports. Would be great to revert changes to files where this is the only change so they don't get touched by this PR.", "url": "https://github.com/getodk/collect/pull/4040#discussion_r503461249", "createdAt": "2020-10-12T18:18:35Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -101,7 +101,6 @@\n import org.odk.collect.android.formentry.repeats.DeleteRepeatDialogFragment;\n import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n import org.odk.collect.android.formentry.saving.SaveFormProgressDialogFragment;\n-import org.odk.collect.android.forms.FormsRepository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c033294d0d873c648ce8c533cab937912adb349"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6d8d0be0a67ed7de3b0b354665e78319bda5f4", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/2c6d8d0be0a67ed7de3b0b354665e78319bda5f4", "committedDate": "2020-10-13T17:28:41Z", "message": "Use unit test to drive out restoring deleted form on download"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6be79f67c65f5727ef0a75922fa395d92e5a4662", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/6be79f67c65f5727ef0a75922fa395d92e5a4662", "committedDate": "2020-10-13T17:28:41Z", "message": "Remove download manifest progress call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71345649e9921a3c3e11258c812f097ef2050cbb", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/71345649e9921a3c3e11258c812f097ef2050cbb", "committedDate": "2020-10-13T17:28:41Z", "message": "Include media files in ServerFormDetails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a17655f1ad65a336a1099bdb2f2f72b630b21607", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/a17655f1ad65a336a1099bdb2f2f72b630b21607", "committedDate": "2020-10-13T17:28:41Z", "message": "Appease PMD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab2ebcdd2079b00283af6c3c5299cf2dc6204ec", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/fab2ebcdd2079b00283af6c3c5299cf2dc6204ec", "committedDate": "2020-10-13T17:28:42Z", "message": "Report media file progress from form downloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078ab0f28b6ce0bcd0cc1cb7ce9ede0a70a2b27c", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/078ab0f28b6ce0bcd0cc1cb7ce9ede0a70a2b27c", "committedDate": "2020-10-13T17:28:42Z", "message": "Remove MultiFormDownloader from Dagger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "971431648978678db8bffce361e41ff167db93d0", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/971431648978678db8bffce361e41ff167db93d0", "committedDate": "2020-10-13T17:28:42Z", "message": "Make sure form download can be cancelled between file downloads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba8d34bcfd47202432343afa0f1698b8ee9df89", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4ba8d34bcfd47202432343afa0f1698b8ee9df89", "committedDate": "2020-10-13T17:28:42Z", "message": "Display progress when downloading forms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4458fb8a100c0fd25a0ac78c6338214bccec0c2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c4458fb8a100c0fd25a0ac78c6338214bccec0c2", "committedDate": "2020-10-13T17:28:42Z", "message": "Add basic case tests for ServerFormDownloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c649b2c9e54343c8d52885680753fcc11e4c69d", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/8c649b2c9e54343c8d52885680753fcc11e4c69d", "committedDate": "2020-10-13T17:28:42Z", "message": "Remoge ignores"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99abb506865c79514dafaa52491619050b29f087", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/99abb506865c79514dafaa52491619050b29f087", "committedDate": "2020-10-13T17:28:42Z", "message": "Move MultiFormDownloader into ServerFormDownloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49782591f402ead41bd46f201528ea72e333e0a1", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/49782591f402ead41bd46f201528ea72e333e0a1", "committedDate": "2020-10-13T17:28:43Z", "message": "Move FormUpdateMode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e4a70d4b5b0b8ef45c89aa30ab3a0b9829d9ea1", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4e4a70d4b5b0b8ef45c89aa30ab3a0b9829d9ea1", "committedDate": "2020-10-13T17:28:43Z", "message": "Add style checks to submodules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a967fcdcc79af53d2d14537456a710e45f3d8e84", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/a967fcdcc79af53d2d14537456a710e45f3d8e84", "committedDate": "2020-10-13T17:28:43Z", "message": "Remove StoragePathProvider from Form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01082219362e69f01265be7a72ced680391116fa", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/01082219362e69f01265be7a72ced680391116fa", "committedDate": "2020-10-13T17:28:43Z", "message": "Move non android code out of android package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ca4e5e28fc7940854068c2e44383916065835a", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/93ca4e5e28fc7940854068c2e44383916065835a", "committedDate": "2020-10-13T17:28:43Z", "message": "Remove unused variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de477443650e3d624ec06f294dc71b94231402d3", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/de477443650e3d624ec06f294dc71b94231402d3", "committedDate": "2020-10-13T17:28:43Z", "message": "(Hopefully) make update calculation clearer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679e89ced142271c743884935e72610cf71030de", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/679e89ced142271c743884935e72610cf71030de", "committedDate": "2020-10-13T17:28:44Z", "message": "Fix null manifest case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5557a42ba357886f9bcaa8f2696d6b63b2b96a", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/2c5557a42ba357886f9bcaa8f2696d6b63b2b96a", "committedDate": "2020-10-13T17:28:44Z", "message": "Extract open rosa code from android package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ab720f7455ff3b03d15f97e172a9b28de7d211", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/61ab720f7455ff3b03d15f97e172a9b28de7d211", "committedDate": "2020-10-13T17:28:44Z", "message": "Add StoragePathProvider as dependency for ServerFormDownloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27b7861249cbe3a924815c567b4cdf6533d4e0ad", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/27b7861249cbe3a924815c567b4cdf6533d4e0ad", "committedDate": "2020-10-13T17:28:44Z", "message": "Only throw explicit exceptions from methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5fa3c28490abf6f074ea33d2ac59ae86d719bf", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/0b5fa3c28490abf6f074ea33d2ac59ae86d719bf", "committedDate": "2020-10-13T17:28:44Z", "message": "Use InterruptedException rather than RuntimeException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a41789ebf02557e10c12dd59d66113b8a22a203", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/1a41789ebf02557e10c12dd59d66113b8a22a203", "committedDate": "2020-10-13T17:28:44Z", "message": "Remove TaskCancellationException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f231363e56cd65fc6e0e550d34e6d9358861f218", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/f231363e56cd65fc6e0e550d34e6d9358861f218", "committedDate": "2020-10-13T17:28:45Z", "message": "Extract form metadata parsing logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89c63ec46e32554c9bd763f28f4f60cd4108f9c9", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/89c63ec46e32554c9bd763f28f4f60cd4108f9c9", "committedDate": "2020-10-13T17:28:45Z", "message": "Separate module and app tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17d9592d4e04e86861fc691bb66a78033c7e9453", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/17d9592d4e04e86861fc691bb66a78033c7e9453", "committedDate": "2020-10-13T17:28:45Z", "message": "Remove usage of cache dir from ServerFormDownloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f8cd5cbe10683163dd11491bdcd9e95058f8b77", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/3f8cd5cbe10683163dd11491bdcd9e95058f8b77", "committedDate": "2020-10-13T17:28:45Z", "message": "Pull stateless helpers out of StoragePathProvider to reduce dependencies on it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7528ad464da13df688f993a98b4f60b010746689", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/7528ad464da13df688f993a98b4f60b010746689", "committedDate": "2020-10-13T17:28:45Z", "message": "Remove StoragePathProvider from ServerFormDownloader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c79a8e09c35d529b148f2430af25bd1788e8ad1", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/9c79a8e09c35d529b148f2430af25bd1788e8ad1", "committedDate": "2020-10-13T17:28:45Z", "message": "Remove Robolectric from ServerFormDownloaderTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "903fa9aaa187800a53cd8dcd1b068880a857c4ed", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/903fa9aaa187800a53cd8dcd1b068880a857c4ed", "committedDate": "2020-10-13T17:28:45Z", "message": "Optimize imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26d649495d084b24b11d23c3c41979b0b00c6218", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/26d649495d084b24b11d23c3c41979b0b00c6218", "committedDate": "2020-10-13T17:28:46Z", "message": "Remove unused constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d8600059e66a04ea89a4c67616a236d3786bcf2", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4d8600059e66a04ea89a4c67616a236d3786bcf2", "committedDate": "2020-10-13T17:28:46Z", "message": "Remove references to ReferenceManager singleton in parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980edf9d4822074d07e6f3969669cd571d3e4ab4", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/980edf9d4822074d07e6f3969669cd571d3e4ab4", "committedDate": "2020-10-13T17:28:46Z", "message": "Remove out of date comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "980fc632e9d1e63bcb27b571e7b44784ae4123bb", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/980fc632e9d1e63bcb27b571e7b44784ae4123bb", "committedDate": "2020-10-13T17:28:46Z", "message": "Remove complexity around booting an HTTPS MockWebServer\n\nThe structure of the code at this point means that we don't need to\nactually execute HTTPS requests in tests. The core logic we're testing\nis that the behaviour is different for different schemes and we can set\nthat up in the test by simply passing http or https in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "372b4f6a02b289344ff61aeacccf2343c1b93684", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/372b4f6a02b289344ff61aeacccf2343c1b93684", "committedDate": "2020-10-13T17:28:46Z", "message": "Account for case where form is updated but media files haven't changed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bcd717c929e42b6a24ac49038249f90d5efbe32", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/8bcd717c929e42b6a24ac49038249f90d5efbe32", "committedDate": "2020-10-13T17:28:46Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2fa6cbe565d40751fe20c64e7bf3d7799db204", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/6a2fa6cbe565d40751fe20c64e7bf3d7799db204", "committedDate": "2020-10-13T17:28:46Z", "message": "Still show status of downloaded forms if cancelled in background"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc29ec3c0e3cb99e4ad1b593575f855533059eed", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/fc29ec3c0e3cb99e4ad1b593575f855533059eed", "committedDate": "2020-10-13T17:28:47Z", "message": "Rename test to make intent clearer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4afab3a7320856ddef1df250f2948ea3f7f0ca30", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4afab3a7320856ddef1df250f2948ea3f7f0ca30", "committedDate": "2020-10-13T17:28:47Z", "message": "Add tests to ensure last-saved and external secondary instances can be parsed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9655042d91efdf25540e5115d6c934122fc6ab8", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c9655042d91efdf25540e5115d6c934122fc6ab8", "committedDate": "2020-10-13T17:28:47Z", "message": "Add test to check media files are downloaded before parsing form"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9d68a22a5a7c58e895e37fe2574cbfda646f902", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/f9d68a22a5a7c58e895e37fe2574cbfda646f902", "committedDate": "2020-10-13T17:28:47Z", "message": "Use cleaner failure message for auto update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51ecdb3806a118a6533d7e1fe2c0d362db1854e6", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/51ecdb3806a118a6533d7e1fe2c0d362db1854e6", "committedDate": "2020-10-13T17:28:47Z", "message": "Add test to check parsing form with last-saved.xml external secondary instance fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50bb1a2b407c12e9a7a1ac2650c468b664d099aa", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/50bb1a2b407c12e9a7a1ac2650c468b664d099aa", "committedDate": "2020-10-13T17:28:47Z", "message": "Move openrosa back to android"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d159ec40bb6c0ef8e4d5071d7fd6b1cf819ad20", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/1d159ec40bb6c0ef8e4d5071d7fd6b1cf819ad20", "committedDate": "2020-10-13T17:28:47Z", "message": "Renamed FormListApi to FormSource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d49d311a5eb558b28c49e2696c4cb67899a69b51", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/d49d311a5eb558b28c49e2696c4cb67899a69b51", "committedDate": "2020-10-13T17:28:48Z", "message": "Move other packages back to android"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1255299afd7a489f8ea24a16aaf9d3728d89e044", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/1255299afd7a489f8ea24a16aaf9d3728d89e044", "committedDate": "2020-10-13T17:28:48Z", "message": "FormSource code into forms package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d84aa3bbfd5063f4a6f6319c88be6c8638932b1", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/4d84aa3bbfd5063f4a6f6319c88be6c8638932b1", "committedDate": "2020-10-13T17:28:48Z", "message": "Add some JavaDoc to FormSource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fdc0d3c4b5e01eae24a658fb067549d08faaeac", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/0fdc0d3c4b5e01eae24a658fb067549d08faaeac", "committedDate": "2020-10-13T17:28:48Z", "message": "Optimize imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b5d1a6155b43a124085b59f0eaf7b61a6ce899f", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/1b5d1a6155b43a124085b59f0eaf7b61a6ce899f", "committedDate": "2020-10-13T17:31:43Z", "message": "Fix crash on downloading forms in Android 7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f07fbc8be102923f661bd82f266080d97c24ffb", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/7f07fbc8be102923f661bd82f266080d97c24ffb", "committedDate": "2020-10-13T17:31:44Z", "message": "Fix strict mode warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8257dc8ac9c3b13186888259bb3a1b5eff57f80", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c8257dc8ac9c3b13186888259bb3a1b5eff57f80", "committedDate": "2020-10-13T17:31:44Z", "message": "Format code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d59e0508f371960a4ad87c10247e0e1f05cc2a73", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/d59e0508f371960a4ad87c10247e0e1f05cc2a73", "committedDate": "2020-10-13T17:27:18Z", "message": "Format code"}, "afterCommit": {"oid": "c8257dc8ac9c3b13186888259bb3a1b5eff57f80", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/c8257dc8ac9c3b13186888259bb3a1b5eff57f80", "committedDate": "2020-10-13T17:31:44Z", "message": "Format code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2616, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}