{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5Nzc3NTQz", "number": 3652, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxNTo1NlrODjimLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNzoyOFrODjwAkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTkzNTgzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormMapActivity.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzoxNTo1NlrOFvZ66A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNDo1MTo0M1rOFvpdpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjA3Mg==", "bodyText": "Yeah I think we should use Dagger for this. It feels like we're adding machinery in to mimic what it would do for us here.", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385252072", "createdAt": "2020-02-27T17:15:56Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormMapActivity.java", "diffHunk": "@@ -113,13 +112,14 @@\n         TextView titleView = findViewById(R.id.form_title);\n         titleView.setText(viewModel.getFormTitle());\n \n-        if (map == null) { // tests set their maps directly\n-            Context context = getApplicationContext();\n-            map = MapProvider.createMapFragment(context);\n+        MapFragment mapToAdd = map; // tests will have a value for the map field\n+\n+        if (mapToAdd == null) {\n+            mapToAdd = MapProvider.createMapFragment(getApplicationContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49e7ce61fd8df0149fe74f7f7e9ab9ebf5fc6f96"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NjcyMw==", "bodyText": "Sigh, ok, will do. \ud83d\ude14", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385266723", "createdAt": "2020-02-27T17:40:58Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormMapActivity.java", "diffHunk": "@@ -113,13 +112,14 @@\n         TextView titleView = findViewById(R.id.form_title);\n         titleView.setText(viewModel.getFormTitle());\n \n-        if (map == null) { // tests set their maps directly\n-            Context context = getApplicationContext();\n-            map = MapProvider.createMapFragment(context);\n+        MapFragment mapToAdd = map; // tests will have a value for the map field\n+\n+        if (mapToAdd == null) {\n+            mapToAdd = MapProvider.createMapFragment(getApplicationContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjA3Mg=="}, "originalCommit": {"oid": "49e7ce61fd8df0149fe74f7f7e9ab9ebf5fc6f96"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwMTkwNQ==", "bodyText": "I should have referred back to #3552 (comment) before mentioning Dagger. We can't inject the MapFragment in onCreate for exactly the thing that this bug is related to -- we don't want to set the field until the asynchronous initialization has completed. Alternately, we could keep extra state to know whether the initialization has completed or not but I don't think that's very clean. So I went the route of injecting a MapProvider singleton. I hope you will find this reasonable, @seadowg. I had chosen not do that in the previous PR because it would touch every geo component but I suppose it's not particularly risky.", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385501905", "createdAt": "2020-02-28T04:25:09Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormMapActivity.java", "diffHunk": "@@ -113,13 +112,14 @@\n         TextView titleView = findViewById(R.id.form_title);\n         titleView.setText(viewModel.getFormTitle());\n \n-        if (map == null) { // tests set their maps directly\n-            Context context = getApplicationContext();\n-            map = MapProvider.createMapFragment(context);\n+        MapFragment mapToAdd = map; // tests will have a value for the map field\n+\n+        if (mapToAdd == null) {\n+            mapToAdd = MapProvider.createMapFragment(getApplicationContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjA3Mg=="}, "originalCommit": {"oid": "49e7ce61fd8df0149fe74f7f7e9ab9ebf5fc6f96"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUwNjcyNg==", "bodyText": "For the record and so that perhaps someone can push back on me, some things that upset me about Dagger/our Dagger setup:\n\nthe magic. We end up with a lot of generated code that feels brittle.\nthe mental overhead. I thought I could inject into BaseGeoMapActivity not realizing that I couldn't because it's abstract. I had to track down that I was getting a no-op inject method and find my way to google/dagger#489 since there's no warning. It might just be a familiarity thing but I feel like I end up with some kind of irritation like this every time I'm using Dagger.\nwe wax poetic about separation of concerns and then we have AppDependencyModule and AppDependencyComponent which feel like really ugly grab-bags of stuff. Part of that is that the app itself isn't currently divided up into modules.", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385506726", "createdAt": "2020-02-28T04:51:43Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormMapActivity.java", "diffHunk": "@@ -113,13 +112,14 @@\n         TextView titleView = findViewById(R.id.form_title);\n         titleView.setText(viewModel.getFormTitle());\n \n-        if (map == null) { // tests set their maps directly\n-            Context context = getApplicationContext();\n-            map = MapProvider.createMapFragment(context);\n+        MapFragment mapToAdd = map; // tests will have a value for the map field\n+\n+        if (mapToAdd == null) {\n+            mapToAdd = MapProvider.createMapFragment(getApplicationContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI1MjA3Mg=="}, "originalCommit": {"oid": "49e7ce61fd8df0149fe74f7f7e9ab9ebf5fc6f96"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODEzMTY3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/geo/MapProvider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNjo1M1rOFvux6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNzowODowOVrOFv8Pzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzgzNQ==", "bodyText": "You don't need the @Singleton here as you have it on the provider. It can be useful as documentation but I'm not sure the class needs to know it's going to be used as a singleton in this case.", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385593835", "createdAt": "2020-02-28T09:36:53Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/geo/MapProvider.java", "diffHunk": "@@ -31,13 +33,12 @@\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_USGS_MAP_STYLE;\n \n /**\n- * A static class that obtains a MapFragment according to the user's preferences.\n+ * Obtains a MapFragment according to the user's preferences.\n  * This is the top-level class that should be used by the rest of the application.\n  * The available options on the Maps preferences screen are also defined here.\n  */\n+@Singleton", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c3da93a7633d4ad52a30822679b75057433d3af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczNzg3NQ==", "bodyText": "I went back and forth on this and it seemed helpful to identify that the map fields are an ongoing concern. How do you decide whether it\u2019s useful or not?", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385737875", "createdAt": "2020-02-28T14:52:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/geo/MapProvider.java", "diffHunk": "@@ -31,13 +33,12 @@\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_USGS_MAP_STYLE;\n \n /**\n- * A static class that obtains a MapFragment according to the user's preferences.\n+ * Obtains a MapFragment according to the user's preferences.\n  * This is the top-level class that should be used by the rest of the application.\n  * The available options on the Maps preferences screen are also defined here.\n  */\n+@Singleton", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzgzNQ=="}, "originalCommit": {"oid": "0c3da93a7633d4ad52a30822679b75057433d3af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzcxOA==", "bodyText": "Hmmm. I guess for me I like that all the configuration around how a dependency is provided lives in the Dagger files (AppDependencyModule for instance) and thatt really the object itelf shouldn't need to know about it's own lifecycle.\nA more concrete criticism would be that having @Singleton in both places is confusing for newbies to Dagger (but then what about Dagger isn't confusing).", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385747718", "createdAt": "2020-02-28T15:09:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/geo/MapProvider.java", "diffHunk": "@@ -31,13 +33,12 @@\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_USGS_MAP_STYLE;\n \n /**\n- * A static class that obtains a MapFragment according to the user's preferences.\n+ * Obtains a MapFragment according to the user's preferences.\n  * This is the top-level class that should be used by the rest of the application.\n  * The available options on the Maps preferences screen are also defined here.\n  */\n+@Singleton", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzgzNQ=="}, "originalCommit": {"oid": "0c3da93a7633d4ad52a30822679b75057433d3af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxNDQ3OA==", "bodyText": "thatt really the object itelf shouldn't need to know about it's own lifecycle.\n\nI see what you're getting at. I feel like singletons often have a pretty different structure and the assumption that a single instance exists is baked in but perhaps that shouldn't be the case. Here, like I wrote in the PR description, it could pretty easily be restructured to not be a singleton. Anyway, I don't feel strongly about it so I've removed it.\n\nhaving @singleton in both places is confusing for newbies to Dagger\n\nI do agree with that.", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385814478", "createdAt": "2020-02-28T17:08:09Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/geo/MapProvider.java", "diffHunk": "@@ -31,13 +33,12 @@\n import static org.odk.collect.android.preferences.GeneralKeys.KEY_USGS_MAP_STYLE;\n \n /**\n- * A static class that obtains a MapFragment according to the user's preferences.\n+ * Obtains a MapFragment according to the user's preferences.\n  * This is the top-level class that should be used by the rest of the application.\n  * The available options on the Maps preferences screen are also defined here.\n  */\n+@Singleton", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5MzgzNQ=="}, "originalCommit": {"oid": "0c3da93a7633d4ad52a30822679b75057433d3af"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODEzMzMwOnYy", "diffSide": "RIGHT", "path": "docs/CODE-GUIDELINES.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNzoyOFrOFvuy-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTozNzoyOFrOFvuy-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU5NDEwNw==", "bodyText": "Woh good catch!", "url": "https://github.com/getodk/collect/pull/3652#discussion_r385594107", "createdAt": "2020-02-28T09:37:28Z", "author": {"login": "seadowg"}, "path": "docs/CODE-GUIDELINES.md", "diffHunk": "@@ -78,10 +78,10 @@ While it's important to read the Dagger [documentation](https://google.github.io\n \n ### Providing dependencies\n \n-To declare a new dependency that objects can inject add a `@Provider` method to the `AppDepedencyModule`:\n+To declare a new dependency that objects can inject add a `@Provides` method to the `AppDependencyModule`:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c3da93a7633d4ad52a30822679b75057433d3af"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3490, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}