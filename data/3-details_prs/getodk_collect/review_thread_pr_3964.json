{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTQyODUx", "number": 3964, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMToyNDoxMFrOEUa2vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTozNzo0NlrOEbwDjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQ2OTczOnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMToyNDoxMFrOG6n8Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxNTo0OFrOG7f4og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNTAwNg==", "bodyText": "From the commit message: \"to fix inflating webView for selectImageMap widgets\". Is this fixed in 1.2.0-rc02? In general, I think we should really avoid things off the alpha channel. Ideally we wouldn't have to include any unreleased versions but I understand that's not always possible. Using a release candidate seems less dangerous than a first alpha.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r464125006", "createdAt": "2020-08-02T21:24:10Z", "author": {"login": "lognaturel"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -199,7 +199,7 @@ dependencies {\n \n     implementation 'androidx.legacy:legacy-support-v13:1.0.0'\n     implementation 'androidx.browser:browser:1.2.0'\n-    implementation 'androidx.appcompat:appcompat:1.1.0'\n+    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2d9c856f41f9afc7d231d32bd8f7a403f526f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MTU3MA==", "bodyText": "Right, 1.2.0-rc02 also works well so I changed it. Thanks!", "url": "https://github.com/getodk/collect/pull/3964#discussion_r465041570", "createdAt": "2020-08-04T13:15:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -199,7 +199,7 @@ dependencies {\n \n     implementation 'androidx.legacy:legacy-support-v13:1.0.0'\n     implementation 'androidx.browser:browser:1.2.0'\n-    implementation 'androidx.appcompat:appcompat:1.1.0'\n+    implementation 'androidx.appcompat:appcompat:1.3.0-alpha01'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNTAwNg=="}, "originalCommit": {"oid": "70b2d9c856f41f9afc7d231d32bd8f7a403f526f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODQ4OTg2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/utilities/StringUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQyMTo0OToxOFrOG6oFtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzoxNDoxN1rOG7f0qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzQxNQ==", "bodyText": "\"bounces\" implies the input becomes the output. Maybe rename to textToHtml_nullBecomesEmptyString?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r464127415", "createdAt": "2020-08-02T21:49:18Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/StringUtilsTest.java", "diffHunk": "@@ -1,29 +1,22 @@\n package org.odk.collect.android.utilities;\n \n-import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n @RunWith(RobolectricTestRunner.class)\n public class StringUtilsTest {\n \n-    /**\n-     * Should return null if provided with null and not throw a NPE.\n-     * <p>\n-     * This is a silly test but it is here to guarantee this behaviour,\n-     * since without it the method causes a crash when processing text for\n-     * questions with no plain text label. See getodk/getodk#1247.\n-     */\n     @Test\n-    public void textToHtml_BouncesNullInput() {\n-        String input = null;\n-        CharSequence observed = StringUtils.textToHtml(input);\n-        Assert.assertNull(observed);\n+    public void textToHtml_BouncesEmptyString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b2d9c856f41f9afc7d231d32bd8f7a403f526f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA0MDU1NA==", "bodyText": "Right, fixed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r465040554", "createdAt": "2020-08-04T13:14:17Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/StringUtilsTest.java", "diffHunk": "@@ -1,29 +1,22 @@\n package org.odk.collect.android.utilities;\n \n-import org.junit.Assert;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.robolectric.RobolectricTestRunner;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n @RunWith(RobolectricTestRunner.class)\n public class StringUtilsTest {\n \n-    /**\n-     * Should return null if provided with null and not throw a NPE.\n-     * <p>\n-     * This is a silly test but it is here to guarantee this behaviour,\n-     * since without it the method causes a crash when processing text for\n-     * questions with no plain text label. See getodk/getodk#1247.\n-     */\n     @Test\n-    public void textToHtml_BouncesNullInput() {\n-        String input = null;\n-        CharSequence observed = StringUtils.textToHtml(input);\n-        Assert.assertNull(observed);\n+    public void textToHtml_BouncesEmptyString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEyNzQxNQ=="}, "originalCommit": {"oid": "70b2d9c856f41f9afc7d231d32bd8f7a403f526f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQ5ODA4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/SelectOneListAdapter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyNDo1OVrOG8iyvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzowODo0MFrOHD_8tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNzc4OQ==", "bodyText": "Should always be set from the constructor?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466137789", "createdAt": "2020-08-06T04:24:59Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/SelectOneListAdapter.java", "diffHunk": "@@ -16,86 +16,78 @@\n \n package org.odk.collect.android.adapters;\n \n-import android.content.Context;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.CompoundButton;\n import android.widget.FrameLayout;\n-import android.widget.ImageView;\n import android.widget.RadioButton;\n \n import androidx.annotation.NonNull;\n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.SelectChoice;\n import org.javarosa.core.model.data.helper.Selection;\n-import org.javarosa.core.reference.ReferenceManager;\n-import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.formentry.questions.AudioVideoImageTextLabel;\n-import org.odk.collect.android.widgets.AbstractSelectOneWidget;\n+import org.odk.collect.android.listeners.SelectOneItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n \n+import java.util.Collections;\n import java.util.List;\n \n-public class SelectOneListAdapter extends AbstractSelectListAdapter\n-        implements View.OnClickListener, CompoundButton.OnCheckedChangeListener {\n-\n+public class SelectOneListAdapter extends AbstractSelectListAdapter implements CompoundButton.OnCheckedChangeListener {\n     private String selectedValue;\n-    private final int playColor;\n     private RadioButton selectedRadioButton;\n     private View selectedItem;\n+    private SelectOneItemClickListener listener;\n \n-    @SuppressWarnings(\"PMD.ExcessiveParameterList\")\n-    public SelectOneListAdapter(List<SelectChoice> items, String selectedValue, AbstractSelectOneWidget widget, int numColumns, FormEntryPrompt formEntryPrompt, ReferenceManager referenceManager, int answerFontSize, AudioHelper audioHelper, int playColor, Context context) {\n-        super(items, widget, numColumns, formEntryPrompt, referenceManager, answerFontSize, audioHelper, context);\n+    public SelectOneListAdapter(String selectedValue, SelectOneItemClickListener listener, ChoicesRecyclerViewAdapterProps props) {\n+        super(props);\n         this.selectedValue = selectedValue;\n-        this.playColor = playColor;\n+        this.listener = listener;\n     }\n \n     @Override\n     public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        return new ViewHolder(noButtonsMode\n+        return new ViewHolder(props.isNoButtonsMode()\n                 ? new FrameLayout(parent.getContext())\n-                : new AudioVideoImageTextLabel(parent.getContext()));\n-    }\n-\n-    @Override\n-    public void onClick(View v) {\n-        ((AbstractSelectOneWidget) widget).onClick();\n+                : new AudioVideoImageTextLabel(props.getContext()));\n     }\n \n     @Override\n     public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n         if (isChecked) {\n             if (selectedRadioButton != null && buttonView != selectedRadioButton) {\n                 selectedRadioButton.setChecked(false);\n-                ((AbstractSelectOneWidget) widget).clearNextLevelsOfCascadingSelect();\n+                listener.onClearNextLevelsOfCascadingSelect();\n             }\n             selectedRadioButton = (RadioButton) buttonView;\n-            selectedValue = items.get((int) selectedRadioButton.getTag()).getValue();\n+            selectedValue = props.getItems().get((int) selectedRadioButton.getTag()).getValue();\n         }\n     }\n \n-    class ViewHolder extends AbstractSelectListAdapter.ViewHolder {\n-        ImageView autoAdvanceIcon;\n+    public void setSelectItemClickListener(SelectOneItemClickListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1ODMyNw==", "bodyText": "I see, this is for rotation. Note to self: think through alternatives for this a bit.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466158327", "createdAt": "2020-08-06T05:40:55Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/SelectOneListAdapter.java", "diffHunk": "@@ -16,86 +16,78 @@\n \n package org.odk.collect.android.adapters;\n \n-import android.content.Context;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.CompoundButton;\n import android.widget.FrameLayout;\n-import android.widget.ImageView;\n import android.widget.RadioButton;\n \n import androidx.annotation.NonNull;\n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.SelectChoice;\n import org.javarosa.core.model.data.helper.Selection;\n-import org.javarosa.core.reference.ReferenceManager;\n-import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.formentry.questions.AudioVideoImageTextLabel;\n-import org.odk.collect.android.widgets.AbstractSelectOneWidget;\n+import org.odk.collect.android.listeners.SelectOneItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n \n+import java.util.Collections;\n import java.util.List;\n \n-public class SelectOneListAdapter extends AbstractSelectListAdapter\n-        implements View.OnClickListener, CompoundButton.OnCheckedChangeListener {\n-\n+public class SelectOneListAdapter extends AbstractSelectListAdapter implements CompoundButton.OnCheckedChangeListener {\n     private String selectedValue;\n-    private final int playColor;\n     private RadioButton selectedRadioButton;\n     private View selectedItem;\n+    private SelectOneItemClickListener listener;\n \n-    @SuppressWarnings(\"PMD.ExcessiveParameterList\")\n-    public SelectOneListAdapter(List<SelectChoice> items, String selectedValue, AbstractSelectOneWidget widget, int numColumns, FormEntryPrompt formEntryPrompt, ReferenceManager referenceManager, int answerFontSize, AudioHelper audioHelper, int playColor, Context context) {\n-        super(items, widget, numColumns, formEntryPrompt, referenceManager, answerFontSize, audioHelper, context);\n+    public SelectOneListAdapter(String selectedValue, SelectOneItemClickListener listener, ChoicesRecyclerViewAdapterProps props) {\n+        super(props);\n         this.selectedValue = selectedValue;\n-        this.playColor = playColor;\n+        this.listener = listener;\n     }\n \n     @Override\n     public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        return new ViewHolder(noButtonsMode\n+        return new ViewHolder(props.isNoButtonsMode()\n                 ? new FrameLayout(parent.getContext())\n-                : new AudioVideoImageTextLabel(parent.getContext()));\n-    }\n-\n-    @Override\n-    public void onClick(View v) {\n-        ((AbstractSelectOneWidget) widget).onClick();\n+                : new AudioVideoImageTextLabel(props.getContext()));\n     }\n \n     @Override\n     public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n         if (isChecked) {\n             if (selectedRadioButton != null && buttonView != selectedRadioButton) {\n                 selectedRadioButton.setChecked(false);\n-                ((AbstractSelectOneWidget) widget).clearNextLevelsOfCascadingSelect();\n+                listener.onClearNextLevelsOfCascadingSelect();\n             }\n             selectedRadioButton = (RadioButton) buttonView;\n-            selectedValue = items.get((int) selectedRadioButton.getTag()).getValue();\n+            selectedValue = props.getItems().get((int) selectedRadioButton.getTag()).getValue();\n         }\n     }\n \n-    class ViewHolder extends AbstractSelectListAdapter.ViewHolder {\n-        ImageView autoAdvanceIcon;\n+    public void setSelectItemClickListener(SelectOneItemClickListener listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNzc4OQ=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NTUxMQ==", "bodyText": "Can't see any simpler solution.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r473955511", "createdAt": "2020-08-20T13:08:40Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/SelectOneListAdapter.java", "diffHunk": "@@ -16,86 +16,78 @@\n \n package org.odk.collect.android.adapters;\n \n-import android.content.Context;\n import android.view.LayoutInflater;\n import android.view.View;\n import android.view.ViewGroup;\n import android.widget.CompoundButton;\n import android.widget.FrameLayout;\n-import android.widget.ImageView;\n import android.widget.RadioButton;\n \n import androidx.annotation.NonNull;\n import androidx.core.content.ContextCompat;\n \n import org.javarosa.core.model.SelectChoice;\n import org.javarosa.core.model.data.helper.Selection;\n-import org.javarosa.core.reference.ReferenceManager;\n-import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.R;\n-import org.odk.collect.android.audio.AudioHelper;\n import org.odk.collect.android.formentry.questions.AudioVideoImageTextLabel;\n-import org.odk.collect.android.widgets.AbstractSelectOneWidget;\n+import org.odk.collect.android.listeners.SelectOneItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n \n+import java.util.Collections;\n import java.util.List;\n \n-public class SelectOneListAdapter extends AbstractSelectListAdapter\n-        implements View.OnClickListener, CompoundButton.OnCheckedChangeListener {\n-\n+public class SelectOneListAdapter extends AbstractSelectListAdapter implements CompoundButton.OnCheckedChangeListener {\n     private String selectedValue;\n-    private final int playColor;\n     private RadioButton selectedRadioButton;\n     private View selectedItem;\n+    private SelectOneItemClickListener listener;\n \n-    @SuppressWarnings(\"PMD.ExcessiveParameterList\")\n-    public SelectOneListAdapter(List<SelectChoice> items, String selectedValue, AbstractSelectOneWidget widget, int numColumns, FormEntryPrompt formEntryPrompt, ReferenceManager referenceManager, int answerFontSize, AudioHelper audioHelper, int playColor, Context context) {\n-        super(items, widget, numColumns, formEntryPrompt, referenceManager, answerFontSize, audioHelper, context);\n+    public SelectOneListAdapter(String selectedValue, SelectOneItemClickListener listener, ChoicesRecyclerViewAdapterProps props) {\n+        super(props);\n         this.selectedValue = selectedValue;\n-        this.playColor = playColor;\n+        this.listener = listener;\n     }\n \n     @Override\n     public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n-        return new ViewHolder(noButtonsMode\n+        return new ViewHolder(props.isNoButtonsMode()\n                 ? new FrameLayout(parent.getContext())\n-                : new AudioVideoImageTextLabel(parent.getContext()));\n-    }\n-\n-    @Override\n-    public void onClick(View v) {\n-        ((AbstractSelectOneWidget) widget).onClick();\n+                : new AudioVideoImageTextLabel(props.getContext()));\n     }\n \n     @Override\n     public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {\n         if (isChecked) {\n             if (selectedRadioButton != null && buttonView != selectedRadioButton) {\n                 selectedRadioButton.setChecked(false);\n-                ((AbstractSelectOneWidget) widget).clearNextLevelsOfCascadingSelect();\n+                listener.onClearNextLevelsOfCascadingSelect();\n             }\n             selectedRadioButton = (RadioButton) buttonView;\n-            selectedValue = items.get((int) selectedRadioButton.getTag()).getValue();\n+            selectedValue = props.getItems().get((int) selectedRadioButton.getTag()).getValue();\n         }\n     }\n \n-    class ViewHolder extends AbstractSelectListAdapter.ViewHolder {\n-        ImageView autoAdvanceIcon;\n+    public void setSelectItemClickListener(SelectOneItemClickListener listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzNzc4OQ=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTUwNTcyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDoyOTo0N1rOG8i3TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODowODowM1rOHENcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw==", "bodyText": "Why is this a separate interface and method from SelectItemClickListener? Can't the onItemClicked implementation for SelectOneWidget include the call? Only one class that implements this interface has a definition for the method which doesn't feel great.\nNote to self: I also reviewed the implementation and I think we should consider revising it. It currently blindly clears any \"external itemset\" questions after a select one, whether or not they're actually linked or not.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466138957", "createdAt": "2020-08-06T04:29:47Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU4ODE5OQ==", "bodyText": "I think this is broken either way even on master and w didn't have any test for that clearing. Can I file a separate issue for that to fix it and handle in a better way and here just remove?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r468588199", "createdAt": "2020-08-11T13:42:09Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2NDU1NA==", "bodyText": "Unfortunately, I don't think we should just remove it because it does address a real issue and works well in the common case. Is it not possible to move the behavior just into the onItemClicked implementation for ItemsetWidget?\nDefinitely good to file an issue to review it and add tests, though. \ud83d\udc4d", "url": "https://github.com/getodk/collect/pull/3964#discussion_r472264554", "createdAt": "2020-08-18T15:00:11Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkzOTcwMA==", "bodyText": "Ok I made a mistake (clearing works as before) I used the form from the doc https://docs.google.com/spreadsheets/d/1CCjRRHCyJXaSEBHPjMWrGotnORR4BI49PoON6qK01BE/edit#gid=1 which seems broken because it doesn't display the last level. It's called new cascading select so it indicates that something has changed do you know anything about it? I know that the old version  has two columns (for filters) and I was able to transform it and now it works but I'm curious what's going on.\nRegarding the listener you are right I don't need that second listener. I already removed it.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r473939700", "createdAt": "2020-08-20T12:42:23Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MTUzNg==", "bodyText": "That form is just crazy. I have no idea why it was like that and I just merged XLSForm/xlsform.github.io#196 to improve it.\nI don't think onClearNextLevelsOfCascadingSelect would be relevant to that form, though. It's a special case only for \"external itemsets\" that cascade (http://xlsform.org/en/#external-selects).", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474171536", "createdAt": "2020-08-20T17:58:39Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3MzU2Nw==", "bodyText": "Yea I agree with internal choices it works without that fix but now I can confirm that it also works with external choices. At least as it worked before.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474173567", "createdAt": "2020-08-20T18:02:21Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NjU1MA==", "bodyText": "Great. Just be careful when saying \"external choices\" because that can mean three things: search(), \"external itemsets\" (ItemsetWidget) or external secondary instances.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474176550", "createdAt": "2020-08-20T18:08:03Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/listeners/SelectOneItemClickListener.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.odk.collect.android.listeners;\n+\n+public interface SelectOneItemClickListener extends SelectItemClickListener {\n+    void onClearNextLevelsOfCascadingSelect();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzODk1Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTUxMDczOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNDozMjo0NVrOG8i6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0NToyN1rOG85acg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzOTczMg==", "bodyText": "Why have it implement the interface, then? Can you pass in a null listener when creating the adapter (and make sure that the adapter can handle a null listener)?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466139732", "createdAt": "2020-08-06T04:32:45Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.os.Bundle;\n+import android.view.View;\n+\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.adapters.AbstractSelectListAdapter;\n+import org.odk.collect.android.adapters.SelectMultipleListAdapter;\n+import org.odk.collect.android.listeners.SelectItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n+\n+import java.util.List;\n+\n+public class SelectMultiMinimalDialog extends SelectMinimalDialog implements SelectItemClickListener {\n+    private SelectMultipleListAdapter adapter;\n+\n+    public SelectMultiMinimalDialog() {\n+    }\n+\n+    public SelectMultiMinimalDialog(List<Selection> selectedItems, boolean isFlex, boolean isAutoComplete, ChoicesRecyclerViewAdapterProps props) {\n+        super(isFlex, isAutoComplete);\n+        adapter = new SelectMultipleListAdapter(selectedItems, this, props);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        // update the listener on dialog recreation (screen rotation for example)\n+        ((SelectMultipleListAdapter) viewModel.getSelectListAdapter()).setSelectItemClickListener(this);\n+    }\n+\n+    @Override\n+    protected AbstractSelectListAdapter getAdapter() {\n+        return adapter;\n+    }\n+\n+    @Override\n+    public void onItemClicked() {\n+        // do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwODQwMg==", "bodyText": "Right.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466508402", "createdAt": "2020-08-06T15:45:27Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.os.Bundle;\n+import android.view.View;\n+\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.adapters.AbstractSelectListAdapter;\n+import org.odk.collect.android.adapters.SelectMultipleListAdapter;\n+import org.odk.collect.android.listeners.SelectItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n+\n+import java.util.List;\n+\n+public class SelectMultiMinimalDialog extends SelectMinimalDialog implements SelectItemClickListener {\n+    private SelectMultipleListAdapter adapter;\n+\n+    public SelectMultiMinimalDialog() {\n+    }\n+\n+    public SelectMultiMinimalDialog(List<Selection> selectedItems, boolean isFlex, boolean isAutoComplete, ChoicesRecyclerViewAdapterProps props) {\n+        super(isFlex, isAutoComplete);\n+        adapter = new SelectMultipleListAdapter(selectedItems, this, props);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+        // update the listener on dialog recreation (screen rotation for example)\n+        ((SelectMultipleListAdapter) viewModel.getSelectListAdapter()).setSelectItemClickListener(this);\n+    }\n+\n+    @Override\n+    protected AbstractSelectListAdapter getAdapter() {\n+        return adapter;\n+    }\n+\n+    @Override\n+    public void onItemClicked() {\n+        // do nothing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzOTczMg=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTU5MTc0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/SelectMultiMinimalWidget.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToxOTo0N1rOG8jqqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNDowNDoyNVrOG-5X4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjEwNA==", "bodyText": "How did you decide what goes in the props record vs. not? Why not include flex and autocomplete appearances?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466152104", "createdAt": "2020-08-06T05:19:47Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/SelectMultiMinimalWidget.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.content.Context;\n+\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectMultiData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.SelectMinimalDialog;\n+import org.odk.collect.android.fragments.dialogs.SelectMultiMinimalDialog;\n+import org.odk.collect.android.utilities.StringUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SelectMultiMinimalWidget extends SelectMinimalWidget {\n+    private List<Selection> selectedItems;\n+\n+    public SelectMultiMinimalWidget(Context context, QuestionDetails prompt) {\n+        super(context, prompt);\n+        selectedItems = getFormEntryPrompt().getAnswerValue() == null\n+                ? new ArrayList<>() :\n+                (List<Selection>) getFormEntryPrompt().getAnswerValue().getValue();\n+        updateAnswerLabel();\n+    }\n+\n+    @Override\n+    protected void showDialog() {\n+        SelectMultiMinimalDialog dialog = new SelectMultiMinimalDialog(getSavedSelectedItems(), WidgetAppearanceUtils.isFlexAppearance(getFormEntryPrompt()), WidgetAppearanceUtils.isAutocomplete(getFormEntryPrompt()), getChoicesRecyclerViewProps());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NzQxNw==", "bodyText": "Because flex and autocomplete appearances are used in SelectMinimalDialog but props are passed to an adapter\nhttps://github.com/getodk/collect/pull/3964/files#diff-c84dd1657c1e1200edf5f3ca7b8f062aR23 that was my reasoning.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466387417", "createdAt": "2020-08-06T12:49:34Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/SelectMultiMinimalWidget.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.content.Context;\n+\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectMultiData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.SelectMinimalDialog;\n+import org.odk.collect.android.fragments.dialogs.SelectMultiMinimalDialog;\n+import org.odk.collect.android.utilities.StringUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SelectMultiMinimalWidget extends SelectMinimalWidget {\n+    private List<Selection> selectedItems;\n+\n+    public SelectMultiMinimalWidget(Context context, QuestionDetails prompt) {\n+        super(context, prompt);\n+        selectedItems = getFormEntryPrompt().getAnswerValue() == null\n+                ? new ArrayList<>() :\n+                (List<Selection>) getFormEntryPrompt().getAnswerValue().getValue();\n+        updateAnswerLabel();\n+    }\n+\n+    @Override\n+    protected void showDialog() {\n+        SelectMultiMinimalDialog dialog = new SelectMultiMinimalDialog(getSavedSelectedItems(), WidgetAppearanceUtils.isFlexAppearance(getFormEntryPrompt()), WidgetAppearanceUtils.isAutocomplete(getFormEntryPrompt()), getChoicesRecyclerViewProps());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjEwNA=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxMjUwMQ==", "bodyText": "I see, that makes sense. You know, the more I think about this the more it feels like a pattern we don't want to introduce. It's not very Java/Android idiomatic and I don't think there's much advantage to it. It's ok to have long parameter lists! You could also consider something like a SelectQuestionPrompt object that wraps the form entry prompt and booleans for the different appearances. When that object is created with a FormEntryPrompt, the appearance is read and sanitized once and all the booleans are set. That also has the advantage of moving away from the static WidgetAppearanceUtils.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466512501", "createdAt": "2020-08-06T15:51:31Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/SelectMultiMinimalWidget.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.content.Context;\n+\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectMultiData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.SelectMinimalDialog;\n+import org.odk.collect.android.fragments.dialogs.SelectMultiMinimalDialog;\n+import org.odk.collect.android.utilities.StringUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SelectMultiMinimalWidget extends SelectMinimalWidget {\n+    private List<Selection> selectedItems;\n+\n+    public SelectMultiMinimalWidget(Context context, QuestionDetails prompt) {\n+        super(context, prompt);\n+        selectedItems = getFormEntryPrompt().getAnswerValue() == null\n+                ? new ArrayList<>() :\n+                (List<Selection>) getFormEntryPrompt().getAnswerValue().getValue();\n+        updateAnswerLabel();\n+    }\n+\n+    @Override\n+    protected void showDialog() {\n+        SelectMultiMinimalDialog dialog = new SelectMultiMinimalDialog(getSavedSelectedItems(), WidgetAppearanceUtils.isFlexAppearance(getFormEntryPrompt()), WidgetAppearanceUtils.isAutocomplete(getFormEntryPrompt()), getChoicesRecyclerViewProps());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjEwNA=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODYwNDg5Ng==", "bodyText": "I agree it's not good I didn't like the long list of parameters and wanted to improve it somehow but ended up with another approach that is not perfect. I'll take another look maybe we can improve it or just pass all parameters directly as you said it's not that bad.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r468604896", "createdAt": "2020-08-11T14:04:25Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/SelectMultiMinimalWidget.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.content.Context;\n+\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.core.model.data.SelectMultiData;\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.SelectMinimalDialog;\n+import org.odk.collect.android.fragments.dialogs.SelectMultiMinimalDialog;\n+import org.odk.collect.android.utilities.StringUtils;\n+import org.odk.collect.android.utilities.WidgetAppearanceUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class SelectMultiMinimalWidget extends SelectMinimalWidget {\n+    private List<Selection> selectedItems;\n+\n+    public SelectMultiMinimalWidget(Context context, QuestionDetails prompt) {\n+        super(context, prompt);\n+        selectedItems = getFormEntryPrompt().getAnswerValue() == null\n+                ? new ArrayList<>() :\n+                (List<Selection>) getFormEntryPrompt().getAnswerValue().getValue();\n+        updateAnswerLabel();\n+    }\n+\n+    @Override\n+    protected void showDialog() {\n+        SelectMultiMinimalDialog dialog = new SelectMultiMinimalDialog(getSavedSelectedItems(), WidgetAppearanceUtils.isFlexAppearance(getFormEntryPrompt()), WidgetAppearanceUtils.isAutocomplete(getFormEntryPrompt()), getChoicesRecyclerViewProps());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1MjEwNA=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYwNDQyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/ItemsetWidget.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNToyNjo1NFrOG8jyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjowMzoyNlrOG86J8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDA0Nw==", "bodyText": "Could you use getSelectedItems().get(0) instead to avoid having to cast? Generally having to cast is dangerous because it can lead to runtime errors. This same pattern shows up in a couple other places.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466154047", "createdAt": "2020-08-06T05:26:54Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/ItemsetWidget.java", "diffHunk": "@@ -75,15 +79,29 @@ public ItemsetWidget(Context context,\n         this.fileUtil = fileUtil;\n \n         items = getItems();\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        Selection selectedItem =  ((SelectOneListAdapter) recyclerViewAdapter).getSelectedItem();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5MDQ2MA==", "bodyText": "Maybe not directly getSelectedItems().get(0) because it might be empty but yeah something like:\nrecyclerViewAdapter.getSelectedItems().isEmpty() ? null : recyclerViewAdapter.getSelectedItems().get(0);\n\nwill be possible.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466390460", "createdAt": "2020-08-06T12:54:55Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/ItemsetWidget.java", "diffHunk": "@@ -75,15 +79,29 @@ public ItemsetWidget(Context context,\n         this.fileUtil = fileUtil;\n \n         items = getItems();\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        Selection selectedItem =  ((SelectOneListAdapter) recyclerViewAdapter).getSelectedItem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDA0Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUyMDU2Mw==", "bodyText": "Fixed in e757ea8", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466520563", "createdAt": "2020-08-06T16:03:26Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/ItemsetWidget.java", "diffHunk": "@@ -75,15 +79,29 @@ public ItemsetWidget(Context context,\n         this.fileUtil = fileUtil;\n \n         items = getItems();\n+    }\n+\n+    @Override\n+    public IAnswerData getAnswer() {\n+        Selection selectedItem =  ((SelectOneListAdapter) recyclerViewAdapter).getSelectedItem();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NDA0Nw=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTYxMzE5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTozMTowM1rOG8j3Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozNDoyOFrOG847sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTMxNA==", "bodyText": "I don't think this is needed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466155314", "createdAt": "2020-08-06T05:31:03Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.os.Bundle;\n+import android.view.View;\n+\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.adapters.AbstractSelectListAdapter;\n+import org.odk.collect.android.adapters.SelectMultipleListAdapter;\n+import org.odk.collect.android.listeners.SelectItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n+\n+import java.util.List;\n+\n+public class SelectMultiMinimalDialog extends SelectMinimalDialog implements SelectItemClickListener {\n+    private SelectMultipleListAdapter adapter;\n+\n+    public SelectMultiMinimalDialog() {\n+    }\n+\n+    public SelectMultiMinimalDialog(List<Selection> selectedItems, boolean isFlex, boolean isAutoComplete, ChoicesRecyclerViewAdapterProps props) {\n+        super(isFlex, isAutoComplete);\n+        adapter = new SelectMultipleListAdapter(selectedItems, this, props);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4NTQzMw==", "bodyText": "Why? Have you seen the comment below?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466385433", "createdAt": "2020-08-06T12:45:57Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.os.Bundle;\n+import android.view.View;\n+\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.adapters.AbstractSelectListAdapter;\n+import org.odk.collect.android.adapters.SelectMultipleListAdapter;\n+import org.odk.collect.android.listeners.SelectItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n+\n+import java.util.List;\n+\n+public class SelectMultiMinimalDialog extends SelectMinimalDialog implements SelectItemClickListener {\n+    private SelectMultipleListAdapter adapter;\n+\n+    public SelectMultiMinimalDialog() {\n+    }\n+\n+    public SelectMultiMinimalDialog(List<Selection> selectedItems, boolean isFlex, boolean isAutoComplete, ChoicesRecyclerViewAdapterProps props) {\n+        super(isFlex, isAutoComplete);\n+        adapter = new SelectMultipleListAdapter(selectedItems, this, props);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTMxNA=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMDUzMA==", "bodyText": "Ahh I see because we don't use it either way right right...", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466500530", "createdAt": "2020-08-06T15:34:28Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/SelectMultiMinimalDialog.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.odk.collect.android.fragments.dialogs;\n+\n+import android.os.Bundle;\n+import android.view.View;\n+\n+import org.javarosa.core.model.data.helper.Selection;\n+import org.jetbrains.annotations.NotNull;\n+import org.odk.collect.android.adapters.AbstractSelectListAdapter;\n+import org.odk.collect.android.adapters.SelectMultipleListAdapter;\n+import org.odk.collect.android.listeners.SelectItemClickListener;\n+import org.odk.collect.android.logic.ChoicesRecyclerViewAdapterProps;\n+\n+import java.util.List;\n+\n+public class SelectMultiMinimalDialog extends SelectMinimalDialog implements SelectItemClickListener {\n+    private SelectMultipleListAdapter adapter;\n+\n+    public SelectMultiMinimalDialog() {\n+    }\n+\n+    public SelectMultiMinimalDialog(List<Selection> selectedItems, boolean isFlex, boolean isAutoComplete, ChoicesRecyclerViewAdapterProps props) {\n+        super(isFlex, isAutoComplete);\n+        adapter = new SelectMultipleListAdapter(selectedItems, this, props);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NotNull View view, Bundle savedInstanceState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE1NTMxNA=="}, "originalCommit": {"oid": "6f2a42aef63fa0d590e4718d5fa4e940c899c020"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDM3MjAzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/SelectMultiMinimalWidgetTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowMzo1MVrOG8-jTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODowMzo1MVrOG8-jTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU5MjU5MA==", "bodyText": "These all look to me like they could be robolectric tests entirely within the context of the dialog. Did you try to go that direction and run into issues?\nFor the last test which verifies the back button and return arrow behavior, I think you can also stay in the dialog and make sure that some method is called to commit the change. How exactly you do that will depend on some of the architecture changes we're discussing. Then there also needs to be a test on the FormEntryActivity that verifies that if an answer is set by the mechanism used in the prior test, it's displayed as expected. Depending on what mechanism that ends up being, it may or may not already be addressed.\nFor the missing audio toast, there's already some coverage in the tests for AudioPlayerViewModel. However, there is no test that currently ensures the error is shown as a toast. I think you should be able to do that within the context of the dialog but it looks like setting up the dependencies might be impractical.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466592590", "createdAt": "2020-08-06T18:03:51Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/feature/formentry/SelectMultiMinimalWidgetTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package org.odk.collect.android.feature.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.FormLoadingUtils;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.FormEntryPage;\n+\n+import static java.util.Arrays.asList;\n+\n+public class SelectMultiMinimalWidgetTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDU3NzM4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/SelectMultiWidgetTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTowNTowNVrOG9AjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzozMjoxNVrOG9PmLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNTQyNA==", "bodyText": "I don't think there's any reason for populating the recycler view for tests that look at the layout manager.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466625424", "createdAt": "2020-08-06T19:05:05Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/SelectMultiWidgetTest.java", "diffHunk": "@@ -71,6 +82,194 @@ public void setup() throws Exception {\n         when(audioHelper.setAudio(any(AudioButton.class), any())).thenReturn(new MutableLiveData<>());\n     }\n \n+    @Test\n+    public void byDefault_shouldGridLayoutManagerBeUsed() {\n+        populateRecyclerView(getWidget());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MTg1NQ==", "bodyText": "Right.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466871855", "createdAt": "2020-08-07T07:32:15Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/SelectMultiWidgetTest.java", "diffHunk": "@@ -71,6 +82,194 @@ public void setup() throws Exception {\n         when(audioHelper.setAudio(any(AudioButton.class), any())).thenReturn(new MutableLiveData<>());\n     }\n \n+    @Test\n+    public void byDefault_shouldGridLayoutManagerBeUsed() {\n+        populateRecyclerView(getWidget());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyNTQyNA=="}, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDk4NDA0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/select_minimal_widget_answer.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMToxMjoxN1rOG9EcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo1NTo0NFrOHCfwfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4OTExNw==", "bodyText": "Nit: I got really confused about this name because I thought it was related to the search/autocomplete appearance. This represents the answer, right? Or the selection?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466689117", "createdAt": "2020-08-06T21:12:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/select_minimal_widget_answer.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:paddingHorizontal=\"@dimen/margin_standard\"\n+    android:paddingVertical=\"@dimen/margin_small\">\n+\n+    <com.google.android.material.textfield.TextInputEditText\n+        android:id=\"@+id/choices_search_box\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2NTg3Mg==", "bodyText": "This is that spinner button which contains answers inside. I wasn't sure about its name, would spinner_button be better or something else?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r466865872", "createdAt": "2020-08-07T07:19:17Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/res/layout/select_minimal_widget_answer.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:paddingHorizontal=\"@dimen/margin_standard\"\n+    android:paddingVertical=\"@dimen/margin_small\">\n+\n+    <com.google.android.material.textfield.TextInputEditText\n+        android:id=\"@+id/choices_search_box\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4OTExNw=="}, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2MjA5MA==", "bodyText": "I would just call it something like answer but spinner_button feels like a big improvement, too.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r472262090", "createdAt": "2020-08-18T14:57:02Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/layout/select_minimal_widget_answer.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:paddingHorizontal=\"@dimen/margin_standard\"\n+    android:paddingVertical=\"@dimen/margin_small\">\n+\n+    <com.google.android.material.textfield.TextInputEditText\n+        android:id=\"@+id/choices_search_box\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4OTExNw=="}, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3OTUxOQ==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r472379519", "createdAt": "2020-08-18T17:55:44Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/res/layout/select_minimal_widget_answer.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"wrap_content\"\n+    android:paddingHorizontal=\"@dimen/margin_standard\"\n+    android:paddingVertical=\"@dimen/margin_small\">\n+\n+    <com.google.android.material.textfield.TextInputEditText\n+        android:id=\"@+id/choices_search_box\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4OTExNw=="}, "originalCommit": {"oid": "e757ea8213db99fe18d88133e6bda0687b232878"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjIyOTQ4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/AbstractSelectListAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTo1MjozMFrOHCbBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzo1NTo1NVrOHCfw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwMTg2MA==", "bodyText": "While here, change to Timber.d since it's not developer-actionable. Message should also probably be \"Invalid media ref\"", "url": "https://github.com/getodk/collect/pull/3964#discussion_r472301860", "createdAt": "2020-08-18T15:52:30Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/AbstractSelectListAdapter.java", "diffHunk": "@@ -227,11 +227,22 @@ public void addMediaFromChoice(AudioVideoImageTextLabel audioVideoImageTextLabel\n             String imageURI = getImageURI(index, items);\n             String videoURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"video\");\n             String bigImageURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"big-image\");\n-            audioVideoImageTextLabel.setImageVideo(imageURI, videoURI, bigImageURI, props.getReferenceManager());\n-\n             String audioURI = getPlayableAudioURI(props.getPrompt(), item, props.getReferenceManager());\n-            if (audioURI != null) {\n-                audioVideoImageTextLabel.setAudio(audioURI, props.getAudioHelper());\n+            try {\n+                if (imageURI != null) {\n+                    audioVideoImageTextLabel.setImage(new File(props.getReferenceManager().deriveReference(imageURI).getLocalURI()));\n+                }\n+                if (bigImageURI != null) {\n+                    audioVideoImageTextLabel.setBigImage(new File(props.getReferenceManager().deriveReference(bigImageURI).getLocalURI()));\n+                }\n+                if (videoURI != null) {\n+                    audioVideoImageTextLabel.setVideo(new File(props.getReferenceManager().deriveReference(videoURI).getLocalURI()));\n+                }\n+                if (audioURI != null) {\n+                    audioVideoImageTextLabel.setAudio(audioURI, props.getAudioHelper());\n+                }\n+            } catch (InvalidReferenceException e) {\n+                Timber.e(e, \"Invalid image reference due to %s \", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ce61116b132d18954f27fde5b61462d42bc1cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3OTY0NA==", "bodyText": "Done.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r472379644", "createdAt": "2020-08-18T17:55:55Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/AbstractSelectListAdapter.java", "diffHunk": "@@ -227,11 +227,22 @@ public void addMediaFromChoice(AudioVideoImageTextLabel audioVideoImageTextLabel\n             String imageURI = getImageURI(index, items);\n             String videoURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"video\");\n             String bigImageURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"big-image\");\n-            audioVideoImageTextLabel.setImageVideo(imageURI, videoURI, bigImageURI, props.getReferenceManager());\n-\n             String audioURI = getPlayableAudioURI(props.getPrompt(), item, props.getReferenceManager());\n-            if (audioURI != null) {\n-                audioVideoImageTextLabel.setAudio(audioURI, props.getAudioHelper());\n+            try {\n+                if (imageURI != null) {\n+                    audioVideoImageTextLabel.setImage(new File(props.getReferenceManager().deriveReference(imageURI).getLocalURI()));\n+                }\n+                if (bigImageURI != null) {\n+                    audioVideoImageTextLabel.setBigImage(new File(props.getReferenceManager().deriveReference(bigImageURI).getLocalURI()));\n+                }\n+                if (videoURI != null) {\n+                    audioVideoImageTextLabel.setVideo(new File(props.getReferenceManager().deriveReference(videoURI).getLocalURI()));\n+                }\n+                if (audioURI != null) {\n+                    audioVideoImageTextLabel.setAudio(audioURI, props.getAudioHelper());\n+                }\n+            } catch (InvalidReferenceException e) {\n+                Timber.e(e, \"Invalid image reference due to %s \", e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwMTg2MA=="}, "originalCommit": {"oid": "51ce61116b132d18954f27fde5b61462d42bc1cf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjIzNDg5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/AbstractSelectListAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTo1MzozOFrOHCbElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMToyMDozOFrOHD8UNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwMjc0MA==", "bodyText": "My preference would be for all the setters to handle possible nulls so these null checks don't have to be here. Alternately the setters could have @NonNull parameter annotations and these null checks could stay but come out of the setters.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r472302740", "createdAt": "2020-08-18T15:53:38Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/AbstractSelectListAdapter.java", "diffHunk": "@@ -227,11 +227,22 @@ public void addMediaFromChoice(AudioVideoImageTextLabel audioVideoImageTextLabel\n             String imageURI = getImageURI(index, items);\n             String videoURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"video\");\n             String bigImageURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"big-image\");\n-            audioVideoImageTextLabel.setImageVideo(imageURI, videoURI, bigImageURI, props.getReferenceManager());\n-\n             String audioURI = getPlayableAudioURI(props.getPrompt(), item, props.getReferenceManager());\n-            if (audioURI != null) {\n-                audioVideoImageTextLabel.setAudio(audioURI, props.getAudioHelper());\n+            try {\n+                if (imageURI != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51ce61116b132d18954f27fde5b61462d42bc1cf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg5NTk5MA==", "bodyText": "I need to have those checks here not in setters because I want to pass files to those setters not URIs so that I can mock such files for tests (if a file exist or not).", "url": "https://github.com/getodk/collect/pull/3964#discussion_r473895990", "createdAt": "2020-08-20T11:20:38Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/AbstractSelectListAdapter.java", "diffHunk": "@@ -227,11 +227,22 @@ public void addMediaFromChoice(AudioVideoImageTextLabel audioVideoImageTextLabel\n             String imageURI = getImageURI(index, items);\n             String videoURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"video\");\n             String bigImageURI = props.getPrompt().getSpecialFormSelectChoiceText(item, \"big-image\");\n-            audioVideoImageTextLabel.setImageVideo(imageURI, videoURI, bigImageURI, props.getReferenceManager());\n-\n             String audioURI = getPlayableAudioURI(props.getPrompt(), item, props.getReferenceManager());\n-            if (audioURI != null) {\n-                audioVideoImageTextLabel.setAudio(audioURI, props.getAudioHelper());\n+            try {\n+                if (imageURI != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwMjc0MA=="}, "originalCommit": {"oid": "51ce61116b132d18954f27fde5b61462d42bc1cf"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzc4NjM2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/SelectOneWidget.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODowNjozNlrOHENZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyODoxOVrOHEOHMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTgxNw==", "bodyText": "You can go further and move this to ItemsetWidget. Then you can name it something like clearNextLevelsOfCascade and remove the comment which is a little misleading because there are three things that are \"external choices.\"", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474175817", "createdAt": "2020-08-20T18:06:36Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/SelectOneWidget.java", "diffHunk": "@@ -100,15 +99,21 @@ public void onItemClicked() {\n             listener.advance();\n         }\n \n+        onClearNextLevelsOfCascadingSelect();\n         widgetValueChanged();\n     }\n \n+    @Override\n+    public void clearAnswer() {\n+        onClearNextLevelsOfCascadingSelect();\n+        super.clearAnswer();\n+    }\n+\n     /**\n      * It's needed only for external choices. Everything works well and\n      * out of the box when we use internal choices instead\n      */\n-    @Override\n-    public void onClearNextLevelsOfCascadingSelect() {\n+    private void onClearNextLevelsOfCascadingSelect() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad40c05e340924997614d2a29d7380bbbe46263"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NDQyNw==", "bodyText": "I'm afraid it must be in this widget because the first level of cascading select is always SelectOneWidget and then next levels are represented by ItemsetWidgets. So if I change it like that it won't work.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474184427", "createdAt": "2020-08-20T18:22:37Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/SelectOneWidget.java", "diffHunk": "@@ -100,15 +99,21 @@ public void onItemClicked() {\n             listener.advance();\n         }\n \n+        onClearNextLevelsOfCascadingSelect();\n         widgetValueChanged();\n     }\n \n+    @Override\n+    public void clearAnswer() {\n+        onClearNextLevelsOfCascadingSelect();\n+        super.clearAnswer();\n+    }\n+\n     /**\n      * It's needed only for external choices. Everything works well and\n      * out of the box when we use internal choices instead\n      */\n-    @Override\n-    public void onClearNextLevelsOfCascadingSelect() {\n+    private void onClearNextLevelsOfCascadingSelect() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTgxNw=="}, "originalCommit": {"oid": "dad40c05e340924997614d2a29d7380bbbe46263"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NjUyOA==", "bodyText": "I see. I guess that's what the provided examples do show though it's certainly not a requirement. This is all kind of crazy so let's at least improve the comment and naming. How about clearFollowingItemsetWidgets and something like \"If there are \"fast external itemset\" selects right after this select, assume that they are linked to the current question and clear them.\"", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474186528", "createdAt": "2020-08-20T18:26:23Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/SelectOneWidget.java", "diffHunk": "@@ -100,15 +99,21 @@ public void onItemClicked() {\n             listener.advance();\n         }\n \n+        onClearNextLevelsOfCascadingSelect();\n         widgetValueChanged();\n     }\n \n+    @Override\n+    public void clearAnswer() {\n+        onClearNextLevelsOfCascadingSelect();\n+        super.clearAnswer();\n+    }\n+\n     /**\n      * It's needed only for external choices. Everything works well and\n      * out of the box when we use internal choices instead\n      */\n-    @Override\n-    public void onClearNextLevelsOfCascadingSelect() {\n+    private void onClearNextLevelsOfCascadingSelect() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTgxNw=="}, "originalCommit": {"oid": "dad40c05e340924997614d2a29d7380bbbe46263"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NzU2OQ==", "bodyText": "Sounds good, will do.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r474187569", "createdAt": "2020-08-20T18:28:19Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/items/SelectOneWidget.java", "diffHunk": "@@ -100,15 +99,21 @@ public void onItemClicked() {\n             listener.advance();\n         }\n \n+        onClearNextLevelsOfCascadingSelect();\n         widgetValueChanged();\n     }\n \n+    @Override\n+    public void clearAnswer() {\n+        onClearNextLevelsOfCascadingSelect();\n+        super.clearAnswer();\n+    }\n+\n     /**\n      * It's needed only for external choices. Everything works well and\n      * out of the box when we use internal choices instead\n      */\n-    @Override\n-    public void onClearNextLevelsOfCascadingSelect() {\n+    private void onClearNextLevelsOfCascadingSelect() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE3NTgxNw=="}, "originalCommit": {"oid": "dad40c05e340924997614d2a29d7380bbbe46263"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTI5NDY3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/actions/RecyclerViewAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyMToxNFrOHF2uFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo0OTowMlrOHGJ3Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMTQ2Mw==", "bodyText": "I think this may no longer be needed? It's not currently used so I think it makes sense to remove it for now and re-introduced if it's useful in the future.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r475901463", "createdAt": "2020-08-24T21:21:14Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/actions/RecyclerViewAction.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.odk.collect.android.support.actions;\n+\n+import android.view.View;\n+\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+\n+import org.hamcrest.Matcher;\n+\n+public class RecyclerViewAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNTA5OQ==", "bodyText": "Fixed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r476215099", "createdAt": "2020-08-25T06:49:02Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/actions/RecyclerViewAction.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.odk.collect.android.support.actions;\n+\n+import android.view.View;\n+\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+\n+import org.hamcrest.Matcher;\n+\n+public class RecyclerViewAction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMTQ2Mw=="}, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTI5NzkzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/assertions/RecyclerViewAssertions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyMjoxN1rOHF2wCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo0OTowOFrOHGJ3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMTk2Mw==", "bodyText": "No longer needed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r475901963", "createdAt": "2020-08-24T21:22:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/assertions/RecyclerViewAssertions.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.odk.collect.android.support.assertions;\n+\n+import android.widget.FrameLayout;\n+\n+import androidx.test.espresso.ViewAssertion;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class RecyclerViewAssertions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNTE0OA==", "bodyText": "Fixed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r476215148", "createdAt": "2020-08-25T06:49:08Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/assertions/RecyclerViewAssertions.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.odk.collect.android.support.assertions;\n+\n+import android.widget.FrameLayout;\n+\n+import androidx.test.espresso.ViewAssertion;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class RecyclerViewAssertions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMTk2Mw=="}, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMwMjcyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/FormEntryPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyMzo1M1rOHF2y8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo0OToxM1rOHGJ3oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMjcwNw==", "bodyText": "A few methods starting here are no longer used.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r475902707", "createdAt": "2020-08-24T21:23:53Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/FormEntryPage.java", "diffHunk": "@@ -291,4 +297,99 @@ private void flingLeft() {\n             });\n         }, 5);\n     }\n+\n+    public FormEntryPage openSelectMinimalDialog() {\n+        openSelectMinimalDialog(0);\n+        return this;\n+    }\n+\n+    public FormEntryPage openSelectMinimalDialog(int index) {\n+        onView(withIndex(withClassName(Matchers.endsWith(\"TextInputEditText\")), index)).perform(click());\n+        return this;\n+    }\n+\n+    public FormEntryPage closeSelectMinimalDialog() {\n+        onView(allOf(instanceOf(AppCompatImageButton.class), withParent(withId(R.id.toolbar)))).perform(click());\n+        return this;\n+    }\n+\n+    public FormEntryPage assertSelectMinimalDialogAnswer(String answer) {\n+        onView(withId(R.id.answer)).check(matches(withText(answer)));\n+        return this;\n+    }\n+\n+    public FormEntryPage assertSearchBoxIsHidden(boolean minimalAppearance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNTIwMA==", "bodyText": "Fixed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r476215200", "createdAt": "2020-08-25T06:49:13Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/FormEntryPage.java", "diffHunk": "@@ -291,4 +297,99 @@ private void flingLeft() {\n             });\n         }, 5);\n     }\n+\n+    public FormEntryPage openSelectMinimalDialog() {\n+        openSelectMinimalDialog(0);\n+        return this;\n+    }\n+\n+    public FormEntryPage openSelectMinimalDialog(int index) {\n+        onView(withIndex(withClassName(Matchers.endsWith(\"TextInputEditText\")), index)).perform(click());\n+        return this;\n+    }\n+\n+    public FormEntryPage closeSelectMinimalDialog() {\n+        onView(allOf(instanceOf(AppCompatImageButton.class), withParent(withId(R.id.toolbar)))).perform(click());\n+        return this;\n+    }\n+\n+    public FormEntryPage assertSelectMinimalDialogAnswer(String answer) {\n+        onView(withId(R.id.answer)).check(matches(withText(answer)));\n+        return this;\n+    }\n+\n+    public FormEntryPage assertSearchBoxIsHidden(boolean minimalAppearance) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMjcwNw=="}, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTMxMTE0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMToyNjoyM1rOHF236w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo0OTo1NlrOHGJ48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMzk3OQ==", "bodyText": "How about adding a TODO with some of the discussion we had about this? Just a quick note to help the next person puzzling over this code realize that it's not in an ideal state. Something like \"replace SelectMinimalDialogListener and use of the binary data flow, likely with a ViewModel\"", "url": "https://github.com/getodk/collect/pull/3964#discussion_r475903979", "createdAt": "2020-08-24T21:26:23Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2662,6 +2665,16 @@ public void onRankingChanged(List<SelectChoice> items) {\n         }\n     }\n \n+    @Override\n+    public void updateSelectedItems(List<Selection> items) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNTUzOA==", "bodyText": "Fixed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r476215538", "createdAt": "2020-08-25T06:49:56Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2662,6 +2665,16 @@ public void onRankingChanged(List<SelectChoice> items) {\n         }\n     }\n \n+    @Override\n+    public void updateSelectedItems(List<Selection> items) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwMzk3OQ=="}, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NTM0MzQ5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/questions/AudioVideoImageTextLabel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQyMTozNzo0NlrOHF3LSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjo0OTo0OFrOHGJ4sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwODkzOA==", "bodyText": "If you're going to have the callers check for null, can you mark the params as @NonNull and not have additional null checks here?", "url": "https://github.com/getodk/collect/pull/3964#discussion_r475908938", "createdAt": "2020-08-24T21:37:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/questions/AudioVideoImageTextLabel.java", "diffHunk": "@@ -136,22 +141,22 @@ public void setAudio(String audioURI, AudioHelper audioHelper) {\n         setupAudioButton(audioURI, audioHelper);\n     }\n \n-    /**\n-     * This should move to separate setters like {@link #setAudio(String, AudioHelper)}\n-     */\n-    @Deprecated\n-    public void setImageVideo(String imageURI, String videoURI,\n-                              String bigImageURI, ReferenceManager referenceManager) {\n-        this.bigImageURI = bigImageURI;\n-        this.videoURI = videoURI;\n-        this.referenceManager = referenceManager;\n-\n-        if (videoURI != null) {\n-            setupVideoButton();\n+    public void setImage(File imageFile) {\n+        if (imageFile != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIxNTQ3Mw==", "bodyText": "Fixed.", "url": "https://github.com/getodk/collect/pull/3964#discussion_r476215473", "createdAt": "2020-08-25T06:49:48Z", "author": {"login": "grzesiek2010"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/questions/AudioVideoImageTextLabel.java", "diffHunk": "@@ -136,22 +141,22 @@ public void setAudio(String audioURI, AudioHelper audioHelper) {\n         setupAudioButton(audioURI, audioHelper);\n     }\n \n-    /**\n-     * This should move to separate setters like {@link #setAudio(String, AudioHelper)}\n-     */\n-    @Deprecated\n-    public void setImageVideo(String imageURI, String videoURI,\n-                              String bigImageURI, ReferenceManager referenceManager) {\n-        this.bigImageURI = bigImageURI;\n-        this.videoURI = videoURI;\n-        this.referenceManager = referenceManager;\n-\n-        if (videoURI != null) {\n-            setupVideoButton();\n+    public void setImage(File imageFile) {\n+        if (imageFile != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkwODkzOA=="}, "originalCommit": {"oid": "03661435917f01298aa156eb41547c958a19580b"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3231, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}