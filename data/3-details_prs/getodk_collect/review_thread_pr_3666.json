{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzUyNDQz", "number": 3666, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxNDoyMlrODlJnNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNTowN1rODlbIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgxMzk2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxNDoyMlrOFx4KnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0MjozN1rOFx5Fqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDc2NQ==", "bodyText": "Is this really ExternalDataReaderTest?", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387844765", "createdAt": "2020-03-04T18:14:22Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.odk.collect.android.external;\n+\n+import android.Manifest;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExternalDataTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1OTg4Mg==", "bodyText": "Yes, that sounds right. Will change!", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387859882", "createdAt": "2020-03-04T18:42:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.odk.collect.android.external;\n+\n+import android.Manifest;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExternalDataTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDc2NQ=="}, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgxOTg0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxNjoxNVrOFx4Obw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0NTozNVrOFx5MBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NTc0Mw==", "bodyText": "Could this run in Robolectric instead?", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387845743", "createdAt": "2020-03-04T18:16:15Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.odk.collect.android.external;\n+\n+import android.Manifest;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExternalDataTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private File csvFile;\n+    private File dbFile;\n+\n+    @Before\n+    public void setUp() {\n+        File formPath = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+        File mediaDir = FileUtils.getFormMediaDir(formPath);\n+        csvFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+        dbFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_DB_FILENAME);\n+    }\n+\n+    @Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MTUwOA==", "bodyText": "I think so, good call. Let me explore that...", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387861508", "createdAt": "2020-03-04T18:45:35Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.odk.collect.android.external;\n+\n+import android.Manifest;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExternalDataTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private File csvFile;\n+    private File dbFile;\n+\n+    @Before\n+    public void setUp() {\n+        File formPath = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+        File mediaDir = FileUtils.getFormMediaDir(formPath);\n+        csvFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+        dbFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_DB_FILENAME);\n+    }\n+\n+    @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NTc0Mw=="}, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgzMTI2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxOTo0OFrOFx4VtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0NTo0MVrOFx5MSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NzYwNA==", "bodyText": "These tests are pretty dense and I'm having a hard time understanding what they are driving at. I think using a different style for the names would be helpful. This test could be doImport_createsDataAndMetaDatabaseTables. That way we know what the subject is (ExternalDataReaderImpl#doImport) and what our expectation is pretty clearly.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387847604", "createdAt": "2020-03-04T18:19:48Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.odk.collect.android.external;\n+\n+import android.Manifest;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExternalDataTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private File csvFile;\n+    private File dbFile;\n+\n+    @Before\n+    public void setUp() {\n+        File formPath = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+        File mediaDir = FileUtils.getFormMediaDir(formPath);\n+        csvFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+        dbFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_DB_FILENAME);\n+    }\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE\n+            ))\n+            .around(new ResetStateRule())\n+            .around(new CopyFormRule(SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME, Collections.singletonList(SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME)));\n+\n+    private static Map<String, File> makeExternalDataMap(File csvFile) {\n+        Map<String, File> externalDataMap = new HashMap<>();\n+        externalDataMap.put(SIMPLE_SEARCH_EXTERNAL_CSV_NAME, csvFile);\n+        return externalDataMap;\n+    }\n+\n+    @Test\n+    public void testCreateDBonImportCSV() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MTU3Ng==", "bodyText": "Yes, sounds good.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387861576", "createdAt": "2020-03-04T18:45:41Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/external/ExternalDataTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.odk.collect.android.external;\n+\n+import android.Manifest;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ExternalDataTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private File csvFile;\n+    private File dbFile;\n+\n+    @Before\n+    public void setUp() {\n+        File formPath = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+        File mediaDir = FileUtils.getFormMediaDir(formPath);\n+        csvFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+        dbFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_DB_FILENAME);\n+    }\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE\n+            ))\n+            .around(new ResetStateRule())\n+            .around(new CopyFormRule(SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME, Collections.singletonList(SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME)));\n+\n+    private static Map<String, File> makeExternalDataMap(File csvFile) {\n+        Map<String, File> externalDataMap = new HashMap<>();\n+        externalDataMap.put(SIMPLE_SEARCH_EXTERNAL_CSV_NAME, csvFile);\n+        return externalDataMap;\n+    }\n+\n+    @Test\n+    public void testCreateDBonImportCSV() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NzYwNA=="}, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgzNzI5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/tasks/FormLoaderTaskTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyMTozMVrOFx4ZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxODoyN1rOFyBLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODU0MQ==", "bodyText": "I'd love to say \"this should be Robolectric\" but I think that would involve picking the task apart. The XTaskTest classes are pretty much the prime candidates for moving out of Espresso so I'm confident that will happen later.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387848541", "createdAt": "2020-03-04T18:21:31Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/tasks/FormLoaderTaskTest.java", "diffHunk": "@@ -14,13 +15,19 @@\n \n import java.io.File;\n import java.util.Arrays;\n+import java.util.Collections;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.notNullValue;\n \n public class FormLoaderTaskTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MjM3MA==", "bodyText": "Yeah, agreed that coming back to this sounds good.\nI think the new Robolectric tests may actually offer sufficient coverage. There is something comforting about knowing that these are even more end-to-end, though.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387992370", "createdAt": "2020-03-04T23:18:27Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/tasks/FormLoaderTaskTest.java", "diffHunk": "@@ -14,13 +15,19 @@\n \n import java.io.File;\n import java.util.Arrays;\n+import java.util.Collections;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.notNullValue;\n \n public class FormLoaderTaskTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODU0MQ=="}, "originalCommit": {"oid": "1b1d4651971fd16a7c62b441c545b4abb2d1c8c5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzcyNTQ1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/assets/forms/simple-search-external-csv.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxNjowM1rOFyBH0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoyNjozM1rOFyTYsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MTUwNA==", "bodyText": "It's too bad to have duplicates of these test files in androidTest and test. I think it's the right thing to do the Robolectric tests with real form files, though.\nThis might actually be a good reason for all tests to live in the same source set, as the androidx libs want.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387991504", "createdAt": "2020-03-04T23:16:03Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/assets/forms/simple-search-external-csv.xml", "diffHunk": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ba2ee2e4758363c0cda19b979cec6139253e7d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MDczOQ==", "bodyText": "I think it's fine to duplicate. A nice solution is to bundle the test forms in gradle submodule if it gets annoying. I have thoughts on everything living in the same set but they can be a fun discussion another time!", "url": "https://github.com/getodk/collect/pull/3666#discussion_r388290739", "createdAt": "2020-03-05T13:26:33Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/assets/forms/simple-search-external-csv.xml", "diffHunk": "@@ -0,0 +1,31 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MTUwNA=="}, "originalCommit": {"oid": "10ba2ee2e4758363c0cda19b979cec6139253e7d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzczNjAzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoyMDo1MFrOFyBOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzoyNzoyM1rOFyTaNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MzE5NQ==", "bodyText": "This work here is basically exactly what CopyFormRule and the methods in FormLoadingUtils do but they're in different sourcesets. Again, maybe a reason to have all tests in one. Or if there is an elegant way to share that code, please feel free to modify, @seadowg.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387993195", "createdAt": "2020-03-04T23:20:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.odk.collect.android.external;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Environment;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.storage.StorageInitializer;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowEnvironment;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_DATASET_FILENAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_LAST_MODIFIED;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_DATA_TABLE_NAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_METADATA_TABLE_NAME;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ExternalDataReaderTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private static final String SELECT_ALL_DATA_QUERY =  \"SELECT * FROM \" + EXTERNAL_DATA_TABLE_NAME;\n+\n+    private static File csvFile;\n+    private static File dbFile;\n+\n+    private static Map<String, File> formDefToCsvMedia;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);\n+        new StorageInitializer().createOdkDirsOnStorage();\n+\n+        File formFile = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ba2ee2e4758363c0cda19b979cec6139253e7d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5MTEyNg==", "bodyText": "I'm happy with this for now!", "url": "https://github.com/getodk/collect/pull/3666#discussion_r388291126", "createdAt": "2020-03-05T13:27:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.odk.collect.android.external;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Environment;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.storage.StorageInitializer;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowEnvironment;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_DATASET_FILENAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_LAST_MODIFIED;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_DATA_TABLE_NAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_METADATA_TABLE_NAME;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ExternalDataReaderTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private static final String SELECT_ALL_DATA_QUERY =  \"SELECT * FROM \" + EXTERNAL_DATA_TABLE_NAME;\n+\n+    private static File csvFile;\n+    private static File dbFile;\n+\n+    private static Map<String, File> formDefToCsvMedia;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);\n+        new StorageInitializer().createOdkDirsOnStorage();\n+\n+        File formFile = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5MzE5NQ=="}, "originalCommit": {"oid": "10ba2ee2e4758363c0cda19b979cec6139253e7d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzc0MTMxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoyMzoxM1rOFyBRjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoyMzoxM1rOFyBRjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5Mzk5OQ==", "bodyText": "Note that this test has changed. It previously faked an update by changing the db timestamp. Now it actually tests a real file change.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r387993999", "createdAt": "2020-03-04T23:23:13Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.odk.collect.android.external;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Environment;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.storage.StorageInitializer;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowEnvironment;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_DATASET_FILENAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_LAST_MODIFIED;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_DATA_TABLE_NAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_METADATA_TABLE_NAME;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ExternalDataReaderTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private static final String SELECT_ALL_DATA_QUERY =  \"SELECT * FROM \" + EXTERNAL_DATA_TABLE_NAME;\n+\n+    private static File csvFile;\n+    private static File dbFile;\n+\n+    private static Map<String, File> formDefToCsvMedia;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);\n+        new StorageInitializer().createOdkDirsOnStorage();\n+\n+        File formFile = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+        File mediaDir = FileUtils.getFormMediaDir(formFile);\n+        mediaDir.mkdir();\n+        csvFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+        dbFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_DB_FILENAME);\n+        formDefToCsvMedia = makeExternalDataMap();\n+\n+        try (InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"forms\" + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+             OutputStream output = new FileOutputStream(formFile)) {\n+            IOUtils.copy(input, output);\n+        }\n+\n+        try (InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"media\" + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+            OutputStream output = new FileOutputStream(csvFile)) {\n+            IOUtils.copy(input, output);\n+        }\n+    }\n+\n+    @Test\n+    public void doImport_createsDataAndMetadataTables() {\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+\n+        assertThat(dbFile.exists(), is(true));\n+\n+        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        assertThat(db, is(notNullValue()));\n+        assertThat(SQLiteUtils.doesTableExist(db, EXTERNAL_DATA_TABLE_NAME), is(true));\n+        assertThat(SQLiteUtils.doesTableExist(db, EXTERNAL_METADATA_TABLE_NAME), is(true));\n+    }\n+\n+    /**\n+     * There are multiple features that ingest CSV files so the original file should not be modified.\n+     * https://github.com/opendatakit/collect/issues/3335\n+     */\n+    @Test\n+    public void doImport_doesNotModifyOriginalCsv() {\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+\n+        assertThat(dbFile.exists(), is(true));\n+        assertThat(csvFile.exists(), is(true));\n+    }\n+\n+    @Test\n+    public void createAndPopulateMetadataTable_createsMetadataTableWithExpectedTimestamp() {\n+        final String testMetadataTable = \"testMetadataTable\";\n+\n+        SQLiteDatabase.OpenParams.Builder paramsBuilder = new SQLiteDatabase.OpenParams.Builder();\n+        SQLiteDatabase db = SQLiteDatabase.createInMemory(paramsBuilder.build());\n+        ExternalSQLiteOpenHelper.createAndPopulateMetadataTable(db, testMetadataTable, csvFile);\n+\n+        assertThat(SQLiteUtils.doesTableExist(db, testMetadataTable), is(true));\n+\n+        final String[] columnNames = {COLUMN_LAST_MODIFIED};\n+        final String selectCriteria = CustomSQLiteQueryBuilder.formatCompareEquals(\n+                COLUMN_DATASET_FILENAME,\n+                CustomSQLiteQueryBuilder.quoteStringLiteral(SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME));\n+        Cursor cursor = db.query(testMetadataTable, columnNames, selectCriteria, null, null, null, null);\n+        cursor.moveToFirst();\n+        long fileTimestamp = cursor.getLong(0);\n+\n+        assertThat(fileTimestamp, is(csvFile.lastModified()));\n+    }\n+\n+    @Test\n+    public void doImport_reimportsCsvIfDatabaseFileIsDeleted() {\n+        // Create the DB file with an initial import\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+\n+        dbFile.delete();\n+\n+        // Reimport\n+        externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+    }\n+\n+    @Test\n+    public void doImport_reimportsCsvIfMetadataTableIsMissing() {\n+        // Create the DB file with an initial import\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+\n+        // Remove the metadata table (mimicking prior versions without the metadata table)\n+        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        SQLiteUtils.dropTable(db, EXTERNAL_METADATA_TABLE_NAME);\n+        db.close();\n+\n+        // Reimport\n+        externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+        db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        assertThat(\"metadata table should be recreated\", SQLiteUtils.doesTableExist(db, EXTERNAL_METADATA_TABLE_NAME));\n+        db.close();\n+    }\n+\n+    @Test\n+    public void doImport_reimportsCsvIfFileIsUpdated() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ba2ee2e4758363c0cda19b979cec6139253e7d"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTY4NDMzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNTowN1rOFyTqkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMzozNTowN1rOFyTqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI5NTMxMw==", "bodyText": "I think there is a way to fake this with fake file layer. Can't remember the name of the framework though. We can stick with this right now as I'm pretty sure it's still deterministic.", "url": "https://github.com/getodk/collect/pull/3666#discussion_r388295313", "createdAt": "2020-03-05T13:35:07Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/external/ExternalDataReaderTest.java", "diffHunk": "@@ -0,0 +1,225 @@\n+package org.odk.collect.android.external;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import android.os.Environment;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.storage.StorageInitializer;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.utilities.CustomSQLiteQueryBuilder;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.SQLiteUtils;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowEnvironment;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.not;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_DATASET_FILENAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.COLUMN_LAST_MODIFIED;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_DATA_TABLE_NAME;\n+import static org.odk.collect.android.external.ExternalDataUtil.EXTERNAL_METADATA_TABLE_NAME;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ExternalDataReaderTest {\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME = \"simple-search-external-csv.xml\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_NAME = \"simple-search-external-csv-fruits\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME = \"simple-search-external-csv-fruits.csv\";\n+    private static final String SIMPLE_SEARCH_EXTERNAL_DB_FILENAME = \"simple-search-external-csv-fruits.db\";\n+\n+    private static final String SELECT_ALL_DATA_QUERY =  \"SELECT * FROM \" + EXTERNAL_DATA_TABLE_NAME;\n+\n+    private static File csvFile;\n+    private static File dbFile;\n+\n+    private static Map<String, File> formDefToCsvMedia;\n+\n+    @Before\n+    public void setUp() throws IOException {\n+        ShadowEnvironment.setExternalStorageState(Environment.MEDIA_MOUNTED);\n+        new StorageInitializer().createOdkDirsOnStorage();\n+\n+        File formFile = new File(new StoragePathProvider().getDirPath(StorageSubdirectory.FORMS) + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+        File mediaDir = FileUtils.getFormMediaDir(formFile);\n+        mediaDir.mkdir();\n+        csvFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+        dbFile = new File(mediaDir + File.separator + SIMPLE_SEARCH_EXTERNAL_DB_FILENAME);\n+        formDefToCsvMedia = makeExternalDataMap();\n+\n+        try (InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"forms\" + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FORM_FILENAME);\n+             OutputStream output = new FileOutputStream(formFile)) {\n+            IOUtils.copy(input, output);\n+        }\n+\n+        try (InputStream input = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"media\" + File.separator + SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME);\n+            OutputStream output = new FileOutputStream(csvFile)) {\n+            IOUtils.copy(input, output);\n+        }\n+    }\n+\n+    @Test\n+    public void doImport_createsDataAndMetadataTables() {\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+\n+        assertThat(dbFile.exists(), is(true));\n+\n+        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        assertThat(db, is(notNullValue()));\n+        assertThat(SQLiteUtils.doesTableExist(db, EXTERNAL_DATA_TABLE_NAME), is(true));\n+        assertThat(SQLiteUtils.doesTableExist(db, EXTERNAL_METADATA_TABLE_NAME), is(true));\n+    }\n+\n+    /**\n+     * There are multiple features that ingest CSV files so the original file should not be modified.\n+     * https://github.com/opendatakit/collect/issues/3335\n+     */\n+    @Test\n+    public void doImport_doesNotModifyOriginalCsv() {\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+\n+        assertThat(dbFile.exists(), is(true));\n+        assertThat(csvFile.exists(), is(true));\n+    }\n+\n+    @Test\n+    public void createAndPopulateMetadataTable_createsMetadataTableWithExpectedTimestamp() {\n+        final String testMetadataTable = \"testMetadataTable\";\n+\n+        SQLiteDatabase.OpenParams.Builder paramsBuilder = new SQLiteDatabase.OpenParams.Builder();\n+        SQLiteDatabase db = SQLiteDatabase.createInMemory(paramsBuilder.build());\n+        ExternalSQLiteOpenHelper.createAndPopulateMetadataTable(db, testMetadataTable, csvFile);\n+\n+        assertThat(SQLiteUtils.doesTableExist(db, testMetadataTable), is(true));\n+\n+        final String[] columnNames = {COLUMN_LAST_MODIFIED};\n+        final String selectCriteria = CustomSQLiteQueryBuilder.formatCompareEquals(\n+                COLUMN_DATASET_FILENAME,\n+                CustomSQLiteQueryBuilder.quoteStringLiteral(SIMPLE_SEARCH_EXTERNAL_CSV_FILENAME));\n+        Cursor cursor = db.query(testMetadataTable, columnNames, selectCriteria, null, null, null, null);\n+        cursor.moveToFirst();\n+        long fileTimestamp = cursor.getLong(0);\n+\n+        assertThat(fileTimestamp, is(csvFile.lastModified()));\n+    }\n+\n+    @Test\n+    public void doImport_reimportsCsvIfDatabaseFileIsDeleted() {\n+        // Create the DB file with an initial import\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+\n+        dbFile.delete();\n+\n+        // Reimport\n+        externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+    }\n+\n+    @Test\n+    public void doImport_reimportsCsvIfMetadataTableIsMissing() {\n+        // Create the DB file with an initial import\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+\n+        // Remove the metadata table (mimicking prior versions without the metadata table)\n+        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        SQLiteUtils.dropTable(db, EXTERNAL_METADATA_TABLE_NAME);\n+        db.close();\n+\n+        // Reimport\n+        externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+        db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        assertThat(\"metadata table should be recreated\", SQLiteUtils.doesTableExist(db, EXTERNAL_METADATA_TABLE_NAME));\n+        db.close();\n+    }\n+\n+    @Test\n+    public void doImport_reimportsCsvIfFileIsUpdated() throws IOException, InterruptedException {\n+        // Create the DB file with an initial import\n+        ExternalDataReader externalDataReader = new ExternalDataReaderImpl(null);\n+        externalDataReader.doImport(formDefToCsvMedia);\n+        assertThat(dbFile.exists(), is(true));\n+\n+        SQLiteDatabase db = SQLiteDatabase.openDatabase(dbFile.getAbsolutePath(), null, SQLiteDatabase.OPEN_READWRITE);\n+        assertThat(db.rawQuery(SELECT_ALL_DATA_QUERY, null).getCount(), is(3));\n+\n+        long originalTimestamp = csvFile.lastModified();\n+        long metadataLastModified = ExternalSQLiteOpenHelper.getLastImportTimestamp(db, EXTERNAL_METADATA_TABLE_NAME, csvFile);\n+        assertThat(metadataLastModified, is(originalTimestamp));\n+\n+        Thread.sleep(1000); // this test is so fast that we need to guarantee the modified time changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10ba2ee2e4758363c0cda19b979cec6139253e7d"}, "originalPosition": 174}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3501, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}