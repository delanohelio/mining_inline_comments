{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNTM0MjI5", "number": 3576, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1MjozOVrODXlj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozNDowM1rODaRVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDU5MjUwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1MjozOVrOFc9hmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoxOTowMVrOFfMlBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMjQ3Mg==", "bodyText": "This is potentially controversial. It feels like it might be nice to start pulling objects like this out of the android package so we can have a distinction in our code what things actually relate to the Android world. This is useful for drawing a line around components and trying not to muddle them with Android stuff. The main advantage other than seperation of concerns and simiplifcation is to let us write tests for these kinds of things without using Robolectric.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r365912472", "createdAt": "2020-01-13T16:52:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.odk.collect.utilities;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjI2Mw==", "bodyText": "Sounds great to me.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368256263", "createdAt": "2020-01-19T00:19:01Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.odk.collect.utilities;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMjQ3Mg=="}, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQ5MDk1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODoxMzoxMVrOFfLnJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1MjoxMVrOFfdZXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDQyMg==", "bodyText": "This represents whether the user has checked the checkbox for this form to be finalized, right? I think it would be useful to add a comment here and that it would be clearer to use \"finalized\". \"Complete\" is used in the codebase for historical reasons but there is no such user-facing concept so it's really confusing. This is really something I should have mentioned in the original feature implementation but I didn't do as deep of a review. I also wonder whether it would better capture the semantics to call it shouldBeFinalized -- it's a user request, right?", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368240422", "createdAt": "2020-01-18T18:13:11Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/FormEntryViewModel.java", "diffHunk": "@@ -91,27 +94,41 @@ private boolean requiresReasonToSave() {\n \n     public static class SaveRequest {\n \n-        private final boolean complete;\n+        private final boolean formComplete;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d07a08c17c29203fefd30c15c3293669a3e9d82e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMTgwNA==", "bodyText": "Yeah that's much clearer. I'll change.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368531804", "createdAt": "2020-01-20T12:52:11Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/FormEntryViewModel.java", "diffHunk": "@@ -91,27 +94,41 @@ private boolean requiresReasonToSave() {\n \n     public static class SaveRequest {\n \n-        private final boolean complete;\n+        private final boolean formComplete;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDQyMg=="}, "originalCommit": {"oid": "d07a08c17c29203fefd30c15c3293669a3e9d82e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQ5MzQ4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODoxODo1NVrOFfLoZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODoxODo1NVrOFfLoZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDc0Mg==", "bodyText": "This change shouldn't have happened and should be reverted. Leaving it in would mean orphaned savepoint files and possible loss of savepoint data right after the change was deployed.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368240742", "createdAt": "2020-01-18T18:18:55Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "diffHunk": "@@ -347,7 +347,7 @@ private JSONObject toGeoJson(GeoPointData data) throws JSONException {\n      */\n     static File getSavepointFile(String instanceName) {\n         File tempDir = new File(Collect.CACHE_PATH);\n-        return new File(tempDir, instanceName + \".save\");\n+        return new File(tempDir, instanceName + \".saveAndExit\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d288dc38abfcc26f80c21607c8f3941b036b1828"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYwMjAzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMzo0MDowNFrOFfMffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1MzoxOFrOFfdbGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NDg0Nw==", "bodyText": "Since this is now a more general view model, changeReasonPromptDismissed would be a more helpful name, I think.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368254847", "createdAt": "2020-01-18T23:40:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -39,22 +55,92 @@ public void setAuditEventLogger(@Nullable AuditEventLogger auditEventLogger) {\n         this.auditEventLogger = auditEventLogger;\n     }\n \n-    public LiveData<SaveRequest> saveForm(boolean complete, String updatedSaveName, boolean viewExiting) {\n-        saveRequest = new MutableLiveData<>(null);\n-        lastSaveRequest = new SaveRequest(complete, updatedSaveName, viewExiting);\n+    public LiveData<SaveResult> saveForm(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        saveResult = new MutableLiveData<>(null);\n+        lastSaveRequest = new SaveRequest(complete, viewExiting, updatedSaveName, uri);\n \n         if (!requiresReasonToSave()) {\n-            lastSaveRequest.setState(SaveRequest.State.SAVING);\n+            saveToDisk(uri, complete, updatedSaveName, viewExiting);\n         } else {\n-            lastSaveRequest.setState(SaveRequest.State.CHANGE_REASON_REQUIRED);\n             requiresReasonToContinue.setValue(true);\n+            saveResult.setValue(new SaveResult(SaveResult.State.CHANGE_REASON_REQUIRED));\n         }\n \n-        saveRequest.setValue(lastSaveRequest);\n-        return saveRequest;\n+        return saveResult;\n     }\n \n-    public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n+    public void editingForm() {\n+        if (auditEventLogger != null) {\n+            auditEventLogger.setEditing(true);\n+        }\n+    }\n+\n+    public void promptDismissed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMjI1MA==", "bodyText": "This was eventually deleted.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368532250", "createdAt": "2020-01-20T12:53:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -39,22 +55,92 @@ public void setAuditEventLogger(@Nullable AuditEventLogger auditEventLogger) {\n         this.auditEventLogger = auditEventLogger;\n     }\n \n-    public LiveData<SaveRequest> saveForm(boolean complete, String updatedSaveName, boolean viewExiting) {\n-        saveRequest = new MutableLiveData<>(null);\n-        lastSaveRequest = new SaveRequest(complete, updatedSaveName, viewExiting);\n+    public LiveData<SaveResult> saveForm(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        saveResult = new MutableLiveData<>(null);\n+        lastSaveRequest = new SaveRequest(complete, viewExiting, updatedSaveName, uri);\n \n         if (!requiresReasonToSave()) {\n-            lastSaveRequest.setState(SaveRequest.State.SAVING);\n+            saveToDisk(uri, complete, updatedSaveName, viewExiting);\n         } else {\n-            lastSaveRequest.setState(SaveRequest.State.CHANGE_REASON_REQUIRED);\n             requiresReasonToContinue.setValue(true);\n+            saveResult.setValue(new SaveResult(SaveResult.State.CHANGE_REASON_REQUIRED));\n         }\n \n-        saveRequest.setValue(lastSaveRequest);\n-        return saveRequest;\n+        return saveResult;\n     }\n \n-    public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n+    public void editingForm() {\n+        if (auditEventLogger != null) {\n+            auditEventLogger.setEditing(true);\n+        }\n+    }\n+\n+    public void promptDismissed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NDg0Nw=="}, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYwMzk5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMzo0NzoxN1rOFfMgfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMToyMDowNlrOFfMs8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTEwMQ==", "bodyText": "This feels really strange. It's a task that in its doInBackground method calls a method that builds another task. I don't think there's actually a problem with it but I think it'd be worth adding a comment on why this structure is advantageous.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368255101", "createdAt": "2020-01-18T23:47:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -39,22 +55,92 @@ public void setAuditEventLogger(@Nullable AuditEventLogger auditEventLogger) {\n         this.auditEventLogger = auditEventLogger;\n     }\n \n-    public LiveData<SaveRequest> saveForm(boolean complete, String updatedSaveName, boolean viewExiting) {\n-        saveRequest = new MutableLiveData<>(null);\n-        lastSaveRequest = new SaveRequest(complete, updatedSaveName, viewExiting);\n+    public LiveData<SaveResult> saveForm(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        saveResult = new MutableLiveData<>(null);\n+        lastSaveRequest = new SaveRequest(complete, viewExiting, updatedSaveName, uri);\n \n         if (!requiresReasonToSave()) {\n-            lastSaveRequest.setState(SaveRequest.State.SAVING);\n+            saveToDisk(uri, complete, updatedSaveName, viewExiting);\n         } else {\n-            lastSaveRequest.setState(SaveRequest.State.CHANGE_REASON_REQUIRED);\n             requiresReasonToContinue.setValue(true);\n+            saveResult.setValue(new SaveResult(SaveResult.State.CHANGE_REASON_REQUIRED));\n         }\n \n-        saveRequest.setValue(lastSaveRequest);\n-        return saveRequest;\n+        return saveResult;\n     }\n \n-    public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n+    public void editingForm() {\n+        if (auditEventLogger != null) {\n+            auditEventLogger.setEditing(true);\n+        }\n+    }\n+\n+    public void promptDismissed() {\n+        requiresReasonToContinue.setValue(false);\n+    }\n+\n+    public void setReason(String reason) {\n+        this.reason = reason;\n+    }\n+\n+    public void saveReason(Long currentTime) {\n+        if (reason != null && !isBlank(reason)) {\n+            if (auditEventLogger != null) {\n+                auditEventLogger.logEvent(AuditEvent.AuditEventType.CHANGE_REASON, null, true, null, currentTime, reason);\n+            }\n+\n+            requiresReasonToContinue.setValue(false);\n+\n+            if (saveResult != null) {\n+                saveToDisk(lastSaveRequest.uri, lastSaveRequest.formComplete, lastSaveRequest.updatedSaveName, lastSaveRequest.viewExiting);\n+            }\n+        }\n+    }\n+\n+    public String getReason() {\n+        return reason;\n+    }\n+\n+    private boolean requiresReasonToSave() {\n+        return auditEventLogger != null\n+                && auditEventLogger.isEditing()\n+                && auditEventLogger.isChangeReasonRequired()\n+                && auditEventLogger.isChangesMade();\n+    }\n+\n+    public boolean isSaving() {\n+        return saveResult != null && saveResult.getValue().getState().equals(SaveResult.State.SAVING);\n+    }\n+\n+    public boolean cancelSaving() {\n+        return task.cancel(true);\n+    }\n+\n+    private void setSaveRequestState(org.odk.collect.android.tasks.SaveResult saveResult, SaveResult.State finalizeError) {\n+        this.saveResult.setValue(new SaveResult(finalizeError, saveResult.getSaveErrorMessage()));\n+    }\n+\n+    @SuppressLint(\"StaticFieldLeak\")\n+    private void saveToDisk(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        saveResult.setValue(new SaveResult(SaveResult.State.SAVING));\n+\n+        task = new AsyncTask<Void, Void, org.odk.collect.android.tasks.SaveResult>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1ODI5MA==", "bodyText": "Ah, I was getting confused by SaveToDiskTask no longer actually being an AsyncTask.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368258290", "createdAt": "2020-01-19T01:20:06Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -39,22 +55,92 @@ public void setAuditEventLogger(@Nullable AuditEventLogger auditEventLogger) {\n         this.auditEventLogger = auditEventLogger;\n     }\n \n-    public LiveData<SaveRequest> saveForm(boolean complete, String updatedSaveName, boolean viewExiting) {\n-        saveRequest = new MutableLiveData<>(null);\n-        lastSaveRequest = new SaveRequest(complete, updatedSaveName, viewExiting);\n+    public LiveData<SaveResult> saveForm(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        saveResult = new MutableLiveData<>(null);\n+        lastSaveRequest = new SaveRequest(complete, viewExiting, updatedSaveName, uri);\n \n         if (!requiresReasonToSave()) {\n-            lastSaveRequest.setState(SaveRequest.State.SAVING);\n+            saveToDisk(uri, complete, updatedSaveName, viewExiting);\n         } else {\n-            lastSaveRequest.setState(SaveRequest.State.CHANGE_REASON_REQUIRED);\n             requiresReasonToContinue.setValue(true);\n+            saveResult.setValue(new SaveResult(SaveResult.State.CHANGE_REASON_REQUIRED));\n         }\n \n-        saveRequest.setValue(lastSaveRequest);\n-        return saveRequest;\n+        return saveResult;\n     }\n \n-    public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n+    public void editingForm() {\n+        if (auditEventLogger != null) {\n+            auditEventLogger.setEditing(true);\n+        }\n+    }\n+\n+    public void promptDismissed() {\n+        requiresReasonToContinue.setValue(false);\n+    }\n+\n+    public void setReason(String reason) {\n+        this.reason = reason;\n+    }\n+\n+    public void saveReason(Long currentTime) {\n+        if (reason != null && !isBlank(reason)) {\n+            if (auditEventLogger != null) {\n+                auditEventLogger.logEvent(AuditEvent.AuditEventType.CHANGE_REASON, null, true, null, currentTime, reason);\n+            }\n+\n+            requiresReasonToContinue.setValue(false);\n+\n+            if (saveResult != null) {\n+                saveToDisk(lastSaveRequest.uri, lastSaveRequest.formComplete, lastSaveRequest.updatedSaveName, lastSaveRequest.viewExiting);\n+            }\n+        }\n+    }\n+\n+    public String getReason() {\n+        return reason;\n+    }\n+\n+    private boolean requiresReasonToSave() {\n+        return auditEventLogger != null\n+                && auditEventLogger.isEditing()\n+                && auditEventLogger.isChangeReasonRequired()\n+                && auditEventLogger.isChangesMade();\n+    }\n+\n+    public boolean isSaving() {\n+        return saveResult != null && saveResult.getValue().getState().equals(SaveResult.State.SAVING);\n+    }\n+\n+    public boolean cancelSaving() {\n+        return task.cancel(true);\n+    }\n+\n+    private void setSaveRequestState(org.odk.collect.android.tasks.SaveResult saveResult, SaveResult.State finalizeError) {\n+        this.saveResult.setValue(new SaveResult(finalizeError, saveResult.getSaveErrorMessage()));\n+    }\n+\n+    @SuppressLint(\"StaticFieldLeak\")\n+    private void saveToDisk(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        saveResult.setValue(new SaveResult(SaveResult.State.SAVING));\n+\n+        task = new AsyncTask<Void, Void, org.odk.collect.android.tasks.SaveResult>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTEwMQ=="}, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYwNDYyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMzo0OTozM1rOFfMgxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNDozMzoyNFrOFf8GIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTE3NQ==", "bodyText": "Should this be called setSaveResultState?", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368255175", "createdAt": "2020-01-18T23:49:33Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -100,97 +186,34 @@ public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n                     auditEventLogger.logEvent(AuditEvent.AuditEventType.CONSTRAINT_ERROR, true, currentTime);\n                 }\n \n-                setSaveRequestState(saveResult, SaveRequest.State.CONSTRAINT_ERROR);\n+                setSaveRequestState(saveResult, SaveResult.State.CONSTRAINT_ERROR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMjM4Ng==", "bodyText": "Yuuuup. Will fix.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368532386", "createdAt": "2020-01-20T12:53:38Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -100,97 +186,34 @@ public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n                     auditEventLogger.logEvent(AuditEvent.AuditEventType.CONSTRAINT_ERROR, true, currentTime);\n                 }\n \n-                setSaveRequestState(saveResult, SaveRequest.State.CONSTRAINT_ERROR);\n+                setSaveRequestState(saveResult, SaveResult.State.CONSTRAINT_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTE3NQ=="}, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNDc4NA==", "bodyText": "Actually just inlining that method.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r369034784", "createdAt": "2020-01-21T14:33:24Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -100,97 +186,34 @@ public void saveToDiskTaskComplete(SaveResult saveResult, long currentTime) {\n                     auditEventLogger.logEvent(AuditEvent.AuditEventType.CONSTRAINT_ERROR, true, currentTime);\n                 }\n \n-                setSaveRequestState(saveResult, SaveRequest.State.CONSTRAINT_ERROR);\n+                setSaveRequestState(saveResult, SaveResult.State.CONSTRAINT_ERROR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTE3NQ=="}, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYwNTk5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMzo1NDo0NlrOFfMhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NDowNlrOFfdcUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTM0Nw==", "bodyText": "Do you think the suffix Task is still appropriate? I feel like in the Android world it implies that it's an AsyncTask and that had me confused for a bit. I'm not sure it's important but wanted to point it out for consideration.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368255347", "createdAt": "2020-01-18T23:54:46Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "diffHunk": "@@ -69,9 +69,8 @@\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class SaveToDiskTask extends AsyncTask<Void, String, SaveResult> {\n+public class SaveToDiskTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMjU2Mg==", "bodyText": "Yeah I really should have renamed that at that point. Will take care of that.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368532562", "createdAt": "2020-01-20T12:54:06Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "diffHunk": "@@ -69,9 +69,8 @@\n  * @author Carl Hartung (carlhartung@gmail.com)\n  * @author Yaw Anokwa (yanokwa@gmail.com)\n  */\n-public class SaveToDiskTask extends AsyncTask<Void, String, SaveResult> {\n+public class SaveToDiskTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTM0Nw=="}, "originalCommit": {"oid": "8bb379c1e757cc8c4c89f0bb746b529419a469a5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYxMDUzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoxMDowNFrOFfMjqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NToyM1rOFfdeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTkxNA==", "bodyText": "null here would mean that there was an attempt to save a change reason without a form save first having been triggered, right? Mostly making sure I'm following the flow.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368255914", "createdAt": "2020-01-19T00:10:04Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -81,8 +86,10 @@ public boolean saveReason() {\n             auditEventLogger.logEvent(AuditEvent.AuditEventType.CHANGE_REASON, null, true, null, clock.getCurrentTime(), reason);\n         }\n \n-        if (saveResult != null) {\n-            saveToDisk(lastSaveRequest.uri, lastSaveRequest.formComplete, lastSaveRequest.updatedSaveName, lastSaveRequest.viewExiting);\n+        if (saveResult.getValue() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzAzMg==", "bodyText": "Yeah. It doesn't make sense for that to happen but we get a warning in the code otherwise as it is technically possible.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368533032", "createdAt": "2020-01-20T12:55:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -81,8 +86,10 @@ public boolean saveReason() {\n             auditEventLogger.logEvent(AuditEvent.AuditEventType.CHANGE_REASON, null, true, null, clock.getCurrentTime(), reason);\n         }\n \n-        if (saveResult != null) {\n-            saveToDisk(lastSaveRequest.uri, lastSaveRequest.formComplete, lastSaveRequest.updatedSaveName, lastSaveRequest.viewExiting);\n+        if (saveResult.getValue() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTkxNA=="}, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYxMTIyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoxMTo1MlrOFfMj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1NjoyNVrOFfdf4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTk5Nw==", "bodyText": "The save isn't complete if there was an error? Rename to something like onSaveTaskComplete?", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368255997", "createdAt": "2020-01-19T00:11:52Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -92,109 +99,99 @@ public String getReason() {\n         return reason;\n     }\n \n-    private boolean requiresReasonToSave() {\n-        return auditEventLogger != null\n-                && auditEventLogger.isEditing()\n-                && auditEventLogger.isChangeReasonRequired()\n-                && auditEventLogger.isChangesMade();\n-    }\n-\n-    public boolean isSaving() {\n-        return saveResult != null && saveResult.getValue().getState().equals(SaveResult.State.SAVING);\n-    }\n-\n-    public boolean cancelSaving() {\n-        return task.cancel(true);\n-    }\n-\n-    private void setSaveRequestState(org.odk.collect.android.tasks.SaveResult saveResult, SaveResult.State finalizeError) {\n-        this.saveResult.setValue(new SaveResult(finalizeError, saveResult.getSaveErrorMessage()));\n+    private void setSaveRequestState(SaveToDiskTaskResult saveToDiskTaskResult, SaveResult.State state, SaveRequest request) {\n+        this.saveResult.setValue(new SaveResult(state, request, saveToDiskTaskResult.getSaveErrorMessage()));\n     }\n \n-    @SuppressLint(\"StaticFieldLeak\")\n-    private void saveToDisk(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n-        saveResult.setValue(new SaveResult(SaveResult.State.SAVING));\n-\n-        task = new AsyncTask<Void, Void, org.odk.collect.android.tasks.SaveResult>() {\n-\n+    private void saveToDisk(SaveRequest saveRequest) {\n+        saveTask = new SaveTask(saveRequest, formSaver, new SaveTask.Listener() {\n             @Override\n-            protected org.odk.collect.android.tasks.SaveResult doInBackground(Void... voids) {\n-                return formSaver.save(uri, complete, updatedSaveName, viewExiting, progress -> {\n-                    saveResult.postValue(new SaveResult(SaveResult.State.SAVING, progress));\n-                });\n+            public void onProgressPublished(String progress) {\n+                saveResult.postValue(new SaveResult(SaveResult.State.SAVING, saveRequest, progress));\n             }\n \n             @Override\n-            protected void onPostExecute(org.odk.collect.android.tasks.SaveResult saveResult) {\n-                saveToDiskTaskComplete(saveResult, clock.getCurrentTime());\n+            public void onSaveComplete(SaveToDiskTaskResult saveToDiskTaskResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzQ3NA==", "bodyText": "Yeah really could just be onComplete given the listener is specific to the task. I'll change it.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368533474", "createdAt": "2020-01-20T12:56:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -92,109 +99,99 @@ public String getReason() {\n         return reason;\n     }\n \n-    private boolean requiresReasonToSave() {\n-        return auditEventLogger != null\n-                && auditEventLogger.isEditing()\n-                && auditEventLogger.isChangeReasonRequired()\n-                && auditEventLogger.isChangesMade();\n-    }\n-\n-    public boolean isSaving() {\n-        return saveResult != null && saveResult.getValue().getState().equals(SaveResult.State.SAVING);\n-    }\n-\n-    public boolean cancelSaving() {\n-        return task.cancel(true);\n-    }\n-\n-    private void setSaveRequestState(org.odk.collect.android.tasks.SaveResult saveResult, SaveResult.State finalizeError) {\n-        this.saveResult.setValue(new SaveResult(finalizeError, saveResult.getSaveErrorMessage()));\n+    private void setSaveRequestState(SaveToDiskTaskResult saveToDiskTaskResult, SaveResult.State state, SaveRequest request) {\n+        this.saveResult.setValue(new SaveResult(state, request, saveToDiskTaskResult.getSaveErrorMessage()));\n     }\n \n-    @SuppressLint(\"StaticFieldLeak\")\n-    private void saveToDisk(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n-        saveResult.setValue(new SaveResult(SaveResult.State.SAVING));\n-\n-        task = new AsyncTask<Void, Void, org.odk.collect.android.tasks.SaveResult>() {\n-\n+    private void saveToDisk(SaveRequest saveRequest) {\n+        saveTask = new SaveTask(saveRequest, formSaver, new SaveTask.Listener() {\n             @Override\n-            protected org.odk.collect.android.tasks.SaveResult doInBackground(Void... voids) {\n-                return formSaver.save(uri, complete, updatedSaveName, viewExiting, progress -> {\n-                    saveResult.postValue(new SaveResult(SaveResult.State.SAVING, progress));\n-                });\n+            public void onProgressPublished(String progress) {\n+                saveResult.postValue(new SaveResult(SaveResult.State.SAVING, saveRequest, progress));\n             }\n \n             @Override\n-            protected void onPostExecute(org.odk.collect.android.tasks.SaveResult saveResult) {\n-                saveToDiskTaskComplete(saveResult, clock.getCurrentTime());\n+            public void onSaveComplete(SaveToDiskTaskResult saveToDiskTaskResult) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NTk5Nw=="}, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYxMjY5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoxNzowOVrOFfMktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1Njo0NFrOFfdgXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjE4MA==", "bodyText": "I don't think this comment adds anything. It's (now) clear that the error message is being saved and that it's a catch-all case. The ticket number is from a forking organization's private bugtracker. Might be good to remove while you're cleaning up.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368256180", "createdAt": "2020-01-19T00:17:09Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "diffHunk": "@@ -100,18 +100,18 @@ public SaveResult saveForm(FormSaver.ProgressListener progressListener) {\n             int validateStatus = formController.validateAnswers(markCompleted);\n             if (validateStatus != FormEntryController.ANSWER_OK) {\n                 // validation failed, pass specific failure\n-                saveResult.setSaveResult(validateStatus, markCompleted);\n-                return saveResult;\n+                saveToDiskTaskResult.setSaveResult(validateStatus, markCompleted);\n+                return saveToDiskTaskResult;\n             }\n         } catch (Exception e) {\n             Timber.e(e);\n \n             // SCTO-825\n             // that means that we have a bad design", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzU5Ng==", "bodyText": "Will do", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368533596", "createdAt": "2020-01-20T12:56:44Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/tasks/SaveToDiskTask.java", "diffHunk": "@@ -100,18 +100,18 @@ public SaveResult saveForm(FormSaver.ProgressListener progressListener) {\n             int validateStatus = formController.validateAnswers(markCompleted);\n             if (validateStatus != FormEntryController.ANSWER_OK) {\n                 // validation failed, pass specific failure\n-                saveResult.setSaveResult(validateStatus, markCompleted);\n-                return saveResult;\n+                saveToDiskTaskResult.setSaveResult(validateStatus, markCompleted);\n+                return saveToDiskTaskResult;\n             }\n         } catch (Exception e) {\n             Timber.e(e);\n \n             // SCTO-825\n             // that means that we have a bad design", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjE4MA=="}, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYxNDA0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoyMTo0MFrOFfMlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQyMzoxOTo0NVrOFfrC3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjM1MQ==", "bodyText": "Your good friend \"its\" asks you not to replace it with \"it is\". \ud83d\ude02 (sorry, pet peeve)", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368256351", "createdAt": "2020-01-19T00:21:40Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.odk.collect.utilities;\n+\n+/**\n+ * An object that exposes the current time to it's client. Useful for decoupling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzcyMw==", "bodyText": "ARRRRGGGGHHHH. I feel like I spend so much of my life thinking about this but still get it wrong.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368533723", "createdAt": "2020-01-20T12:57:06Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.odk.collect.utilities;\n+\n+/**\n+ * An object that exposes the current time to it's client. Useful for decoupling", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjM1MQ=="}, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc1NTQyMA==", "bodyText": "I always say \"it is\"/\"they are\"/\"we are\" in my head before picking. But don't worry, I'll get great joy out of continuing to point them out if need be. \ud83d\ude09", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368755420", "createdAt": "2020-01-20T23:19:45Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/utilities/Clock.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.odk.collect.utilities;\n+\n+/**\n+ * An object that exposes the current time to it's client. Useful for decoupling", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjM1MQ=="}, "originalCommit": {"oid": "59f7978d83597e9f50068f77adc1b659d6a49b7f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYxNjQ5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDoyOTozN1rOFfMmhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjozNjoyNFrOFgAwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjY0Nw==", "bodyText": "Add some @nonnull annotations?", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368256647", "createdAt": "2020-01-19T00:29:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -240,12 +238,12 @@ boolean isViewExiting() {\n         private final SaveRequest saveRequest;\n         private final FormSaver formSaver;\n \n-        private final WeakReference<Listener> listenerRef;\n+        private final Listener listener;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzgxNQ==", "bodyText": "Sounds good.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368533815", "createdAt": "2020-01-20T12:57:20Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -240,12 +238,12 @@ boolean isViewExiting() {\n         private final SaveRequest saveRequest;\n         private final FormSaver formSaver;\n \n-        private final WeakReference<Listener> listenerRef;\n+        private final Listener listener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjY0Nw=="}, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA4MDE2OQ==", "bodyText": "Actually not sure we need these here especially. It would be nice to have them everywhere but also not something I see as practical (unless we had a lint for it). This is also a private class so isn't really a \"public\" API. Did you have a specific reason for the suggestion?", "url": "https://github.com/getodk/collect/pull/3576#discussion_r369080169", "createdAt": "2020-01-21T15:46:41Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -240,12 +238,12 @@ boolean isViewExiting() {\n         private final SaveRequest saveRequest;\n         private final FormSaver formSaver;\n \n-        private final WeakReference<Listener> listenerRef;\n+        private final Listener listener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjY0Nw=="}, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExMTEzMg==", "bodyText": "Listeners can be optional but not in this case so it feels like a nice safeguard if someone needs to eventually be in this code. It seems like I've usually seen null checks around listener usage.\nAlso, when you had the WeakReference wrapper, there were clear null checks. So the diff that took that wrapper away made it very apparent that having a null listener would be a problem.\nDon't feel strongly about it, though.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r369111132", "createdAt": "2020-01-21T16:36:24Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -240,12 +238,12 @@ boolean isViewExiting() {\n         private final SaveRequest saveRequest;\n         private final FormSaver formSaver;\n \n-        private final WeakReference<Listener> listenerRef;\n+        private final Listener listener;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NjY0Nw=="}, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYyMDI3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMDo0NTo1M1rOFfMofQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1Nzo1MVrOFfdh-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NzE0OQ==", "bodyText": "Given that there are still multiple view models for this activity, does it make sense for one of them to match the activity name? Is this more of a formSaveViewModel?", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368257149", "createdAt": "2020-01-19T00:45:53Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -317,7 +314,7 @@ public void allowSwiping(boolean doSwipe) {\n \n     private BackgroundLocationViewModel backgroundLocationViewModel;\n     private IdentityPromptViewModel identityPromptViewModel;\n-    private ChangesReasonPromptViewModel changesReasonPromptViewModel;\n+    private FormEntryViewModel formEntryViewModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNDAxMQ==", "bodyText": "Yeah I couldn't find a name I was happy with but I think I'll go with your suggestion.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368534011", "createdAt": "2020-01-20T12:57:51Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -317,7 +314,7 @@ public void allowSwiping(boolean doSwipe) {\n \n     private BackgroundLocationViewModel backgroundLocationViewModel;\n     private IdentityPromptViewModel identityPromptViewModel;\n-    private ChangesReasonPromptViewModel changesReasonPromptViewModel;\n+    private FormEntryViewModel formEntryViewModel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1NzE0OQ=="}, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTYyNTMzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwMTowNToxN1rOFfMq-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1ODoxMlrOFfdiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1Nzc4Ng==", "bodyText": "This may seem petty but I find the order of parameters here make it hard to understand what's important. I'd rename uri to instanceContentUri and put it first since that's what is requested to be saved.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368257786", "createdAt": "2020-01-19T01:05:17Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -0,0 +1,285 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.javarosa.form.api.FormEntryController;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.audit.AuditEventLogger;\n+import org.odk.collect.android.tasks.SaveToDiskTask;\n+import org.odk.collect.android.tasks.SaveToDiskTaskResult;\n+import org.odk.collect.utilities.Clock;\n+\n+import static org.odk.collect.android.tasks.SaveToDiskTask.SAVED;\n+import static org.odk.collect.android.tasks.SaveToDiskTask.SAVED_AND_EXIT;\n+import static org.odk.collect.android.utilities.StringUtils.isBlank;\n+\n+public class FormEntryViewModel extends ViewModel {\n+\n+    private final Clock clock;\n+    private final FormSaver formSaver;\n+    private final MutableLiveData<SaveResult> saveResult = new MutableLiveData<>(null);\n+\n+    private String reason = \"\";\n+\n+    @Nullable\n+    private AuditEventLogger auditEventLogger;\n+\n+    @Nullable\n+    private AsyncTask saveTask;\n+\n+    public FormEntryViewModel(Clock clock, FormSaver formSaver) {\n+        this.clock = clock;\n+        this.formSaver = formSaver;\n+    }\n+\n+    public void setAuditEventLogger(@Nullable AuditEventLogger auditEventLogger) {\n+        this.auditEventLogger = auditEventLogger;\n+    }\n+\n+    public void editingForm() {\n+        if (auditEventLogger != null) {\n+            auditEventLogger.setEditing(true);\n+        }\n+    }\n+\n+    public LiveData<SaveResult> saveForm(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        SaveRequest saveRequest = new SaveRequest(complete, viewExiting, updatedSaveName, uri);\n+\n+        if (!requiresReasonToSave()) {\n+            saveResult.setValue(new SaveResult(SaveResult.State.SAVING, saveRequest));\n+            saveToDisk(saveRequest);\n+        } else {\n+            saveResult.setValue(new SaveResult(SaveResult.State.CHANGE_REASON_REQUIRED, saveRequest));\n+        }\n+\n+        return saveResult;\n+    }\n+\n+    public boolean isSaving() {\n+        return saveResult.getValue() != null && saveResult.getValue().getState().equals(SaveResult.State.SAVING);\n+    }\n+\n+    public boolean cancelSaving() {\n+        return saveTask.cancel(true);\n+    }\n+\n+    public void setReason(@NonNull String reason) {\n+        this.reason = reason;\n+    }\n+\n+    public boolean saveReason() {\n+        if (reason == null || isBlank(reason)) {\n+            return false;\n+        }\n+\n+        if (auditEventLogger != null) {\n+            auditEventLogger.logEvent(AuditEvent.AuditEventType.CHANGE_REASON, null, true, null, clock.getCurrentTime(), reason);\n+        }\n+\n+        if (saveResult.getValue() != null) {\n+            SaveRequest request = saveResult.getValue().request;\n+            saveResult.setValue(new SaveResult(SaveResult.State.SAVING, request));\n+            saveToDisk(request);\n+        }\n+\n+        return true;\n+    }\n+\n+    public String getReason() {\n+        return reason;\n+    }\n+\n+    private void setSaveRequestState(SaveToDiskTaskResult saveToDiskTaskResult, SaveResult.State state, SaveRequest request) {\n+        this.saveResult.setValue(new SaveResult(state, request, saveToDiskTaskResult.getSaveErrorMessage()));\n+    }\n+\n+    private void saveToDisk(SaveRequest saveRequest) {\n+        saveTask = new SaveTask(saveRequest, formSaver, new SaveTask.Listener() {\n+            @Override\n+            public void onProgressPublished(String progress) {\n+                saveResult.setValue(new SaveResult(SaveResult.State.SAVING, saveRequest, progress));\n+            }\n+\n+            @Override\n+            public void onSaveComplete(SaveToDiskTaskResult saveToDiskTaskResult) {\n+                handleTaskResult(saveToDiskTaskResult);\n+            }\n+        }).execute();\n+    }\n+\n+    private void handleTaskResult(SaveToDiskTaskResult taskResult) {\n+        SaveResult saveResult = this.saveResult.getValue();\n+\n+        switch (taskResult.getSaveResult()) {\n+            case SAVED:\n+            case SAVED_AND_EXIT: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_SAVE, false, clock.getCurrentTime());\n+\n+                    if (saveResult.request.isViewExiting()) {\n+                        if (saveResult.request.isFormComplete()) {\n+                            auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_EXIT, false, clock.getCurrentTime());\n+                            auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_FINALIZE, true, clock.getCurrentTime());\n+                        } else {\n+                            auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_EXIT, true, clock.getCurrentTime());\n+                        }\n+                    }\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.SAVED, saveResult.request);\n+                break;\n+            }\n+\n+            case SaveToDiskTask.SAVE_ERROR: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.SAVE_ERROR, true, clock.getCurrentTime());\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.SAVE_ERROR, saveResult.request);\n+                break;\n+            }\n+\n+            case SaveToDiskTask.ENCRYPTION_ERROR: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.FINALIZE_ERROR, true, clock.getCurrentTime());\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.FINALIZE_ERROR, saveResult.request);\n+                break;\n+            }\n+\n+            case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:\n+            case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.exitView();\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.CONSTRAINT_ERROR, true, clock.getCurrentTime());\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.CONSTRAINT_ERROR, saveResult.request);\n+                break;\n+            }\n+        }\n+    }\n+\n+    private boolean requiresReasonToSave() {\n+        return auditEventLogger != null\n+                && auditEventLogger.isEditing()\n+                && auditEventLogger.isChangeReasonRequired()\n+                && auditEventLogger.isChangesMade();\n+    }\n+\n+    public static class SaveResult {\n+\n+        private final State state;\n+        private final String message;\n+        private final SaveRequest request;\n+\n+        SaveResult(State state, SaveRequest request) {\n+            this(state, request, null);\n+        }\n+\n+        SaveResult(State state, SaveRequest request, String message) {\n+            this.state = state;\n+            this.message = message;\n+            this.request = request;\n+        }\n+\n+        public State getState() {\n+            return state;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n+\n+        public enum State {\n+            CHANGE_REASON_REQUIRED,\n+            SAVING,\n+            SAVED,\n+            SAVE_ERROR,\n+            FINALIZE_ERROR,\n+            CONSTRAINT_ERROR\n+        }\n+    }\n+\n+    private static class SaveRequest {\n+\n+        private final boolean formComplete;\n+        private final boolean viewExiting;\n+        private final String updatedSaveName;\n+        private final Uri uri;\n+\n+        SaveRequest(boolean formComplete, boolean viewExiting, String updatedSaveName, Uri uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNDE1NA==", "bodyText": "No I agree actually. Will change.", "url": "https://github.com/getodk/collect/pull/3576#discussion_r368534154", "createdAt": "2020-01-20T12:58:12Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/FormEntryViewModel.java", "diffHunk": "@@ -0,0 +1,285 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.net.Uri;\n+import android.os.AsyncTask;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+import androidx.lifecycle.ViewModel;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.javarosa.form.api.FormEntryController;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.audit.AuditEventLogger;\n+import org.odk.collect.android.tasks.SaveToDiskTask;\n+import org.odk.collect.android.tasks.SaveToDiskTaskResult;\n+import org.odk.collect.utilities.Clock;\n+\n+import static org.odk.collect.android.tasks.SaveToDiskTask.SAVED;\n+import static org.odk.collect.android.tasks.SaveToDiskTask.SAVED_AND_EXIT;\n+import static org.odk.collect.android.utilities.StringUtils.isBlank;\n+\n+public class FormEntryViewModel extends ViewModel {\n+\n+    private final Clock clock;\n+    private final FormSaver formSaver;\n+    private final MutableLiveData<SaveResult> saveResult = new MutableLiveData<>(null);\n+\n+    private String reason = \"\";\n+\n+    @Nullable\n+    private AuditEventLogger auditEventLogger;\n+\n+    @Nullable\n+    private AsyncTask saveTask;\n+\n+    public FormEntryViewModel(Clock clock, FormSaver formSaver) {\n+        this.clock = clock;\n+        this.formSaver = formSaver;\n+    }\n+\n+    public void setAuditEventLogger(@Nullable AuditEventLogger auditEventLogger) {\n+        this.auditEventLogger = auditEventLogger;\n+    }\n+\n+    public void editingForm() {\n+        if (auditEventLogger != null) {\n+            auditEventLogger.setEditing(true);\n+        }\n+    }\n+\n+    public LiveData<SaveResult> saveForm(Uri uri, boolean complete, String updatedSaveName, boolean viewExiting) {\n+        SaveRequest saveRequest = new SaveRequest(complete, viewExiting, updatedSaveName, uri);\n+\n+        if (!requiresReasonToSave()) {\n+            saveResult.setValue(new SaveResult(SaveResult.State.SAVING, saveRequest));\n+            saveToDisk(saveRequest);\n+        } else {\n+            saveResult.setValue(new SaveResult(SaveResult.State.CHANGE_REASON_REQUIRED, saveRequest));\n+        }\n+\n+        return saveResult;\n+    }\n+\n+    public boolean isSaving() {\n+        return saveResult.getValue() != null && saveResult.getValue().getState().equals(SaveResult.State.SAVING);\n+    }\n+\n+    public boolean cancelSaving() {\n+        return saveTask.cancel(true);\n+    }\n+\n+    public void setReason(@NonNull String reason) {\n+        this.reason = reason;\n+    }\n+\n+    public boolean saveReason() {\n+        if (reason == null || isBlank(reason)) {\n+            return false;\n+        }\n+\n+        if (auditEventLogger != null) {\n+            auditEventLogger.logEvent(AuditEvent.AuditEventType.CHANGE_REASON, null, true, null, clock.getCurrentTime(), reason);\n+        }\n+\n+        if (saveResult.getValue() != null) {\n+            SaveRequest request = saveResult.getValue().request;\n+            saveResult.setValue(new SaveResult(SaveResult.State.SAVING, request));\n+            saveToDisk(request);\n+        }\n+\n+        return true;\n+    }\n+\n+    public String getReason() {\n+        return reason;\n+    }\n+\n+    private void setSaveRequestState(SaveToDiskTaskResult saveToDiskTaskResult, SaveResult.State state, SaveRequest request) {\n+        this.saveResult.setValue(new SaveResult(state, request, saveToDiskTaskResult.getSaveErrorMessage()));\n+    }\n+\n+    private void saveToDisk(SaveRequest saveRequest) {\n+        saveTask = new SaveTask(saveRequest, formSaver, new SaveTask.Listener() {\n+            @Override\n+            public void onProgressPublished(String progress) {\n+                saveResult.setValue(new SaveResult(SaveResult.State.SAVING, saveRequest, progress));\n+            }\n+\n+            @Override\n+            public void onSaveComplete(SaveToDiskTaskResult saveToDiskTaskResult) {\n+                handleTaskResult(saveToDiskTaskResult);\n+            }\n+        }).execute();\n+    }\n+\n+    private void handleTaskResult(SaveToDiskTaskResult taskResult) {\n+        SaveResult saveResult = this.saveResult.getValue();\n+\n+        switch (taskResult.getSaveResult()) {\n+            case SAVED:\n+            case SAVED_AND_EXIT: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_SAVE, false, clock.getCurrentTime());\n+\n+                    if (saveResult.request.isViewExiting()) {\n+                        if (saveResult.request.isFormComplete()) {\n+                            auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_EXIT, false, clock.getCurrentTime());\n+                            auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_FINALIZE, true, clock.getCurrentTime());\n+                        } else {\n+                            auditEventLogger.logEvent(AuditEvent.AuditEventType.FORM_EXIT, true, clock.getCurrentTime());\n+                        }\n+                    }\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.SAVED, saveResult.request);\n+                break;\n+            }\n+\n+            case SaveToDiskTask.SAVE_ERROR: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.SAVE_ERROR, true, clock.getCurrentTime());\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.SAVE_ERROR, saveResult.request);\n+                break;\n+            }\n+\n+            case SaveToDiskTask.ENCRYPTION_ERROR: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.FINALIZE_ERROR, true, clock.getCurrentTime());\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.FINALIZE_ERROR, saveResult.request);\n+                break;\n+            }\n+\n+            case FormEntryController.ANSWER_CONSTRAINT_VIOLATED:\n+            case FormEntryController.ANSWER_REQUIRED_BUT_EMPTY: {\n+                if (auditEventLogger != null) {\n+                    auditEventLogger.exitView();\n+                    auditEventLogger.logEvent(AuditEvent.AuditEventType.CONSTRAINT_ERROR, true, clock.getCurrentTime());\n+                }\n+\n+                setSaveRequestState(taskResult, SaveResult.State.CONSTRAINT_ERROR, saveResult.request);\n+                break;\n+            }\n+        }\n+    }\n+\n+    private boolean requiresReasonToSave() {\n+        return auditEventLogger != null\n+                && auditEventLogger.isEditing()\n+                && auditEventLogger.isChangeReasonRequired()\n+                && auditEventLogger.isChangesMade();\n+    }\n+\n+    public static class SaveResult {\n+\n+        private final State state;\n+        private final String message;\n+        private final SaveRequest request;\n+\n+        SaveResult(State state, SaveRequest request) {\n+            this(state, request, null);\n+        }\n+\n+        SaveResult(State state, SaveRequest request, String message) {\n+            this.state = state;\n+            this.message = message;\n+            this.request = request;\n+        }\n+\n+        public State getState() {\n+            return state;\n+        }\n+\n+        public String getMessage() {\n+            return message;\n+        }\n+\n+        public enum State {\n+            CHANGE_REASON_REQUIRED,\n+            SAVING,\n+            SAVED,\n+            SAVE_ERROR,\n+            FINALIZE_ERROR,\n+            CONSTRAINT_ERROR\n+        }\n+    }\n+\n+    private static class SaveRequest {\n+\n+        private final boolean formComplete;\n+        private final boolean viewExiting;\n+        private final String updatedSaveName;\n+        private final Uri uri;\n+\n+        SaveRequest(boolean formComplete, boolean viewExiting, String updatedSaveName, Uri uri) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1Nzc4Ng=="}, "originalCommit": {"oid": "adbf622e4972a010cc3903e422556b14dc22eaeb"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODczNTg4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/FormFinalizingTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozNDowM1rOFhIcaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODozNDowM1rOFhIcaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI4NTY3Mw==", "bodyText": "@opendatakit/testers as you consider more regression checks to add to your list and/or the automated suite, please make sure you check these out. \ud83d\ude0a", "url": "https://github.com/getodk/collect/pull/3576#discussion_r370285673", "createdAt": "2020-01-23T18:34:03Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/formentry/FormFinalizingTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.Manifest;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.support.CopyFormRule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.support.pages.SaveOrIgnoreDialog;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class FormFinalizingTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9976ce089a11fd85face44f841a71b1776ba87cb"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3427, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}