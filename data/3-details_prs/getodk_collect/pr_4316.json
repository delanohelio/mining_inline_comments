{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDU1NDk0", "number": 4316, "title": "Make sure external recording is blocked when internal recording in progress", "bodyText": "Closes #4285\nWhat has been done to verify that this works as intended?\nNew tests.\nWhy is this the best possible solution? Were any other approaches considered?\nComments inline.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nGood to just check the issue is fixed and that external and internal recording still behave as expected.\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-12-16T10:23:32Z", "url": "https://github.com/getodk/collect/pull/4316", "merged": true, "mergeCommit": {"oid": "052b7f9e509c9b02f0126f49782b81c43514ade3"}, "closed": true, "closedAt": "2020-12-17T10:36:52Z", "author": {"login": "seadowg"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmYdnxAH2gAyNTQxMDU1NDk0OmI3MThlNmY2ZTBhZWYyYjQ3ZTQ3ODk4NjBlZTllOTk5OGU2ODdiZDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmx79kAFqTU1Mzg5MTYwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b718e6f6e0aef2b47e4789860ee9e9998e687bd1", "author": {"user": {"login": "seadowg", "name": "Callum Stott"}}, "url": "https://github.com/getodk/collect/commit/b718e6f6e0aef2b47e4789860ee9e9998e687bd1", "committedDate": "2020-12-15T11:16:26Z", "message": "Make sure external is blocked when internal recording in progress"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTQ4Njg2", "url": "https://github.com/getodk/collect/pull/4316#pullrequestreview-553548686", "createdAt": "2020-12-16T10:26:57Z", "commit": {"oid": "b718e6f6e0aef2b47e4789860ee9e9998e687bd1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoyNjo1N1rOIG-UQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDoyNjo1N1rOIG-UQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4MzM2MQ==", "bodyText": "I did consider creating an abstract class that both Internal... and External... could extend from with this implementation. However, I feel like the code here happens to be the same as opposed to being the same. It could very well be that internal recordings are blocked for different reasons than external ones down the line.\nCould totally understand if that seems wrong though!", "url": "https://github.com/getodk/collect/pull/4316#discussion_r544183361", "createdAt": "2020-12-16T10:26:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ExternalAppRecordingRequester.java", "diffHunk": "@@ -24,13 +27,24 @@\n     private final ActivityAvailability activityAvailability;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n     private final FormEntryViewModel formEntryViewModel;\n+    private final AudioRecorderViewModel audioRecorderViewModel;\n+    private final LifecycleOwner lifecycleOwner;\n \n-    public ExternalAppRecordingRequester(Activity activity, ActivityAvailability activityAvailability, WaitingForDataRegistry waitingForDataRegistry, PermissionUtils permissionUtils, FormEntryViewModel formEntryViewModel) {\n+    public ExternalAppRecordingRequester(Activity activity, ActivityAvailability activityAvailability, WaitingForDataRegistry waitingForDataRegistry, PermissionUtils permissionUtils, FormEntryViewModel formEntryViewModel, AudioRecorderViewModel audioRecorderViewModel, LifecycleOwner lifecycleOwner) {\n         this.activity = activity;\n         this.permissionUtils = permissionUtils;\n         this.activityAvailability = activityAvailability;\n         this.waitingForDataRegistry = waitingForDataRegistry;\n         this.formEntryViewModel = formEntryViewModel;\n+        this.audioRecorderViewModel = audioRecorderViewModel;\n+        this.lifecycleOwner = lifecycleOwner;\n+    }\n+\n+    @Override\n+    public void onIsRecordingBlocked(Consumer<Boolean> isRecordingBlockedListener) {\n+        audioRecorderViewModel.getCurrentSession().observe(lifecycleOwner, session -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b718e6f6e0aef2b47e4789860ee9e9998e687bd1"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODkxNjAw", "url": "https://github.com/getodk/collect/pull/4316#pullrequestreview-553891600", "createdAt": "2020-12-16T16:56:50Z", "commit": {"oid": "b718e6f6e0aef2b47e4789860ee9e9998e687bd1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1Njo1MFrOIHPX-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNjo1Njo1MFrOIHPX-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQ2Mjg0Mg==", "bodyText": "I'm not sure we're likely to add conditions but the principle makes sense to me and there isn't much more complexity one way or the other.", "url": "https://github.com/getodk/collect/pull/4316#discussion_r544462842", "createdAt": "2020-12-16T16:56:50Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/utilities/ExternalAppRecordingRequester.java", "diffHunk": "@@ -24,13 +27,24 @@\n     private final ActivityAvailability activityAvailability;\n     private final WaitingForDataRegistry waitingForDataRegistry;\n     private final FormEntryViewModel formEntryViewModel;\n+    private final AudioRecorderViewModel audioRecorderViewModel;\n+    private final LifecycleOwner lifecycleOwner;\n \n-    public ExternalAppRecordingRequester(Activity activity, ActivityAvailability activityAvailability, WaitingForDataRegistry waitingForDataRegistry, PermissionUtils permissionUtils, FormEntryViewModel formEntryViewModel) {\n+    public ExternalAppRecordingRequester(Activity activity, ActivityAvailability activityAvailability, WaitingForDataRegistry waitingForDataRegistry, PermissionUtils permissionUtils, FormEntryViewModel formEntryViewModel, AudioRecorderViewModel audioRecorderViewModel, LifecycleOwner lifecycleOwner) {\n         this.activity = activity;\n         this.permissionUtils = permissionUtils;\n         this.activityAvailability = activityAvailability;\n         this.waitingForDataRegistry = waitingForDataRegistry;\n         this.formEntryViewModel = formEntryViewModel;\n+        this.audioRecorderViewModel = audioRecorderViewModel;\n+        this.lifecycleOwner = lifecycleOwner;\n+    }\n+\n+    @Override\n+    public void onIsRecordingBlocked(Consumer<Boolean> isRecordingBlockedListener) {\n+        audioRecorderViewModel.getCurrentSession().observe(lifecycleOwner, session -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE4MzM2MQ=="}, "originalCommit": {"oid": "b718e6f6e0aef2b47e4789860ee9e9998e687bd1"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2378, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}