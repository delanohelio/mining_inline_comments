{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDI5NTc5", "number": 3824, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDozOToyNVrOD8GMwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0NjozMFrOEBb9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzQyNzIwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDozOToyNVrOGU03iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo0MjoxMVrOGZ-Zug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MDg4OA==", "bodyText": "Hi @seadowg! I'm not sure if the above two tests are necessary.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r424490888", "createdAt": "2020-05-13T14:39:25Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.DialogInterface;\n+import android.content.res.Configuration;\n+import android.text.InputType;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.android.controller.ActivityController;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ChangeAdminPasswordDialogTest {\n+\n+    private ActivityController<FragmentActivity> activity;\n+    private FragmentManager fragmentManager;\n+    private ChangeAdminPasswordDialog dialogFragment;\n+    private ChangeAdminPasswordDialog.ChangePasswordDialogCallback callback;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.buildThemedActivity(FragmentActivity.class);\n+        activity.setup();\n+\n+        fragmentManager = activity.get().getSupportFragmentManager();\n+        dialogFragment = new ChangeAdminPasswordDialog();\n+\n+        callback = mock(ChangeAdminPasswordDialog.ChangePasswordDialogCallback.class);\n+        dialogFragment.callback = callback;\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.get().getString(R.string.ok)));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.get().getString(R.string.cancel)));\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MTE3OA==", "bodyText": "The first one dialogIsCancellable checks that the back button would works so I think that's good. The second seems like it isn't needed as you  interact with all the elements in the tests below.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r429841178", "createdAt": "2020-05-25T09:43:38Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.DialogInterface;\n+import android.content.res.Configuration;\n+import android.text.InputType;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.android.controller.ActivityController;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ChangeAdminPasswordDialogTest {\n+\n+    private ActivityController<FragmentActivity> activity;\n+    private FragmentManager fragmentManager;\n+    private ChangeAdminPasswordDialog dialogFragment;\n+    private ChangeAdminPasswordDialog.ChangePasswordDialogCallback callback;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.buildThemedActivity(FragmentActivity.class);\n+        activity.setup();\n+\n+        fragmentManager = activity.get().getSupportFragmentManager();\n+        dialogFragment = new ChangeAdminPasswordDialog();\n+\n+        callback = mock(ChangeAdminPasswordDialog.ChangePasswordDialogCallback.class);\n+        dialogFragment.callback = callback;\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.get().getString(R.string.ok)));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.get().getString(R.string.cancel)));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MDg4OA=="}, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4OTk3OA==", "bodyText": "Thanks @seadowg! So can I remove the second test case, for all my subsequent PRs on dialog disappearing issue. As for all of them, somewhere later in some other test, I have interacted with the elements, so I think, this part of code is redundant.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r429889978", "createdAt": "2020-05-25T11:42:11Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.DialogInterface;\n+import android.content.res.Configuration;\n+import android.text.InputType;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.android.controller.ActivityController;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ChangeAdminPasswordDialogTest {\n+\n+    private ActivityController<FragmentActivity> activity;\n+    private FragmentManager fragmentManager;\n+    private ChangeAdminPasswordDialog dialogFragment;\n+    private ChangeAdminPasswordDialog.ChangePasswordDialogCallback callback;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.buildThemedActivity(FragmentActivity.class);\n+        activity.setup();\n+\n+        fragmentManager = activity.get().getSupportFragmentManager();\n+        dialogFragment = new ChangeAdminPasswordDialog();\n+\n+        callback = mock(ChangeAdminPasswordDialog.ChangePasswordDialogCallback.class);\n+        dialogFragment.callback = callback;\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.get().getString(R.string.ok)));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.get().getString(R.string.cancel)));\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MDg4OA=="}, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzI5ODYzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/AdminPreferencesActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MTo0MlrOGZ7XcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjoyMTozNFrOGabsyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MDI0MQ==", "bodyText": "Is there any reason this logic couldn't happen in the fragment? Then we can avoid having to deal with having a listener. We can also then test this functionality in ChngeAdminPasswordDialogFragmentTest.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r429840241", "createdAt": "2020-05-25T09:41:42Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/AdminPreferencesActivity.java", "diffHunk": "@@ -101,4 +104,17 @@ public void preventOtherWaysOfEditingForm() {\n     public void onDialogClosed() {\n         startActivityAndCloseAllOthers(this, MainMenuActivity.class);\n     }\n+\n+    @Override\n+    public void onPasswordChanged(String password) {\n+        SharedPreferences.Editor editor = this.getSharedPreferences(ADMIN_PREFERENCES, MODE_PRIVATE).edit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM2OTk5Mw==", "bodyText": "Yes I think it would be nice to remove the unnecessary listener. I will revert this change.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r430369993", "createdAt": "2020-05-26T12:21:34Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/AdminPreferencesActivity.java", "diffHunk": "@@ -101,4 +104,17 @@ public void preventOtherWaysOfEditingForm() {\n     public void onDialogClosed() {\n         startActivityAndCloseAllOthers(this, MainMenuActivity.class);\n     }\n+\n+    @Override\n+    public void onPasswordChanged(String password) {\n+        SharedPreferences.Editor editor = this.getSharedPreferences(ADMIN_PREFERENCES, MODE_PRIVATE).edit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MDI0MQ=="}, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMxOTQ4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0ODozMFrOGZ7kew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0ODozMFrOGZ7kew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MzU3OQ==", "bodyText": "This isn't really the correct logic for what happens when an Activity rotates. Normally and Activity will go through a full onPause/onStop/onDestroy run and then go back through the creation steps. As part of this the Fragment will be restored (using the arguments it had before rotation). Instead of trying to deal with all this yourself you should be able to the ActivityScenario like in AdminPasswordDialogFragmentTest#afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r429843579", "createdAt": "2020-05-25T09:48:30Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.DialogInterface;\n+import android.content.res.Configuration;\n+import android.text.InputType;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.android.controller.ActivityController;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ChangeAdminPasswordDialogTest {\n+\n+    private ActivityController<FragmentActivity> activity;\n+    private FragmentManager fragmentManager;\n+    private ChangeAdminPasswordDialog dialogFragment;\n+    private ChangeAdminPasswordDialog.ChangePasswordDialogCallback callback;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.buildThemedActivity(FragmentActivity.class);\n+        activity.setup();\n+\n+        fragmentManager = activity.get().getSupportFragmentManager();\n+        dialogFragment = new ChangeAdminPasswordDialog();\n+\n+        callback = mock(ChangeAdminPasswordDialog.ChangePasswordDialogCallback.class);\n+        dialogFragment.callback = callback;\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.get().getString(R.string.ok)));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.get().getString(R.string.cancel)));\n+    }\n+\n+    @Test\n+    public void clickingOkAfterSettingPassword_callsOnPasswordChanged() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        EditText passwordEditText = dialog.findViewById(R.id.pwd_field);\n+        passwordEditText.setText(\"blah\");\n+        dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();\n+\n+        verify(callback, times(1)).onPasswordChanged(\"blah\");\n+    }\n+\n+    @Test\n+    public void passwordIsRetainedOnScreenRotation() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        EditText passwordEditText = dialog.findViewById(R.id.pwd_field);\n+        passwordEditText.setText(\"blah\");\n+\n+        assertThat(activity.get().getResources().getConfiguration().orientation, equalTo(Configuration.ORIENTATION_PORTRAIT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NzMyMDQzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0ODo0M1rOGZ7k_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0ODo0M1rOGZ7k_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MzcxMA==", "bodyText": "Same thing as above here!", "url": "https://github.com/getodk/collect/pull/3824#discussion_r429843710", "createdAt": "2020-05-25T09:48:43Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.DialogInterface;\n+import android.content.res.Configuration;\n+import android.text.InputType;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.android.controller.ActivityController;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ChangeAdminPasswordDialogTest {\n+\n+    private ActivityController<FragmentActivity> activity;\n+    private FragmentManager fragmentManager;\n+    private ChangeAdminPasswordDialog dialogFragment;\n+    private ChangeAdminPasswordDialog.ChangePasswordDialogCallback callback;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.buildThemedActivity(FragmentActivity.class);\n+        activity.setup();\n+\n+        fragmentManager = activity.get().getSupportFragmentManager();\n+        dialogFragment = new ChangeAdminPasswordDialog();\n+\n+        callback = mock(ChangeAdminPasswordDialog.ChangePasswordDialogCallback.class);\n+        dialogFragment.callback = callback;\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.get().getString(R.string.ok)));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.get().getString(R.string.cancel)));\n+    }\n+\n+    @Test\n+    public void clickingOkAfterSettingPassword_callsOnPasswordChanged() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        EditText passwordEditText = dialog.findViewById(R.id.pwd_field);\n+        passwordEditText.setText(\"blah\");\n+        dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();\n+\n+        verify(callback, times(1)).onPasswordChanged(\"blah\");\n+    }\n+\n+    @Test\n+    public void passwordIsRetainedOnScreenRotation() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        EditText passwordEditText = dialog.findViewById(R.id.pwd_field);\n+        passwordEditText.setText(\"blah\");\n+\n+        assertThat(activity.get().getResources().getConfiguration().orientation, equalTo(Configuration.ORIENTATION_PORTRAIT));\n+        RuntimeEnvironment.setQualifiers(\"+land\");\n+        activity.configurationChange();\n+        assertThat(activity.get().getResources().getConfiguration().orientation, equalTo(Configuration.ORIENTATION_LANDSCAPE));\n+\n+        ChangeAdminPasswordDialog restoredFragment = (ChangeAdminPasswordDialog)\n+                activity.get().getSupportFragmentManager().findFragmentByTag(\"TAG\");\n+\n+        AlertDialog restoredDialog = (AlertDialog) restoredFragment.getDialog();\n+        assertThat(((EditText) restoredDialog.findViewById(R.id.pwd_field)).getText().toString(), equalTo(\"blah\"));\n+    }\n+\n+    @Test\n+    public void showPasswordCheckBoxValueIsRetainedOnScreenRotation() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        CheckBox passwordCheckBox = dialog.findViewById(R.id.checkBox2);\n+        passwordCheckBox.setChecked(true);\n+\n+        assertThat(activity.get().getResources().getConfiguration().orientation, equalTo(Configuration.ORIENTATION_PORTRAIT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b35f1a07bd9e352924634c4bd6c5fe61c555b1c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTQyMDc4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0NjozMFrOGdSDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjo0NjozMFrOGdSDMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1NzYxNw==", "bodyText": "I don't think the activityScenario needs to be a field here as you're only using ActivityScenario in one test. I think just make it a local variable in there.", "url": "https://github.com/getodk/collect/pull/3824#discussion_r433357617", "createdAt": "2020-06-01T16:46:30Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/preferences/ChangeAdminPasswordDialogTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.content.Context;\n+import android.content.DialogInterface;\n+import android.content.SharedPreferences;\n+import android.os.Bundle;\n+import android.text.InputType;\n+import android.widget.CheckBox;\n+import android.widget.EditText;\n+\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.odk.collect.android.preferences.AdminKeys.KEY_ADMIN_PW;\n+import static org.odk.collect.android.preferences.AdminPreferencesActivity.ADMIN_PREFERENCES;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class ChangeAdminPasswordDialogTest {\n+\n+    private TestActivityScenario<DialogFragmentTestActivity> activityScenario;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3652c9afcfbdfd93691f3dd893e881fdcb5894a9"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3349, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}