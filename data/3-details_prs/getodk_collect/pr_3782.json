{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NjUwNjc0", "number": 3782, "title": "Used Dialog Fragment to retain Exit Form Dialog on Orientation Change", "bodyText": "Work towards #3612\n\nWhat has been done to verify that this works as intended?\nI tested it on Android 9.0.\nWhy is this the best possible solution? Were any other approaches considered?\nI shifted creating alert dialog inside dialog fragment so that they can be retained by the activity on configuration change. I added tests for the same.\nHow does this change affect users? Describe intentional changes to behavior and behavior that could have accidentally been affected by code changes. In other words, what are the regression risks?\nNo regression risks.\nDo we need any specific form for testing your changes? If so, please attach one.\nNo\nDoes this change require updates to documentation? If so, please file an issue here and include the link below.\nNo\nBefore submitting this PR, please make sure you have:\n\n run ./gradlew checkAll and confirmed all checks still pass OR confirm CircleCI build passes and run ./gradlew connectedDebugAndroidTest locally.\n verified that any code or assets from external sources are properly credited in comments and/or in the about file.\n verified that any new UI elements use theme colors. UI Components Style guidelines", "createdAt": "2020-04-19T11:45:41Z", "url": "https://github.com/getodk/collect/pull/3782", "merged": true, "mergeCommit": {"oid": "0395736e111f539d3094e3171e117e6588f3bea4"}, "closed": true, "closedAt": "2020-06-02T20:57:56Z", "author": {"login": "SaumiaSinghal"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYdeamAH2gAyNDA1NjUwNjc0OjhkODVmZTJmNTQ2MGE2ZTA0MjNmNjI2NzRhZjUwMmFiODkxMWJhM2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfAjK6gFqTQwNzY3NjExOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8d85fe2f5460a6e0423f62674af502ab8911ba3d", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/8d85fe2f5460a6e0423f62674af502ab8911ba3d", "committedDate": "2020-04-17T09:00:44Z", "message": "coded quit form dialog fragment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/b9940c2fa44942342298b6a433cf3a58826ff7dd", "committedDate": "2020-04-20T13:55:16Z", "message": "added tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bba621df35f5682c1b2bf93c50fe374c419bf8a", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/7bba621df35f5682c1b2bf93c50fe374c419bf8a", "committedDate": "2020-04-19T11:48:36Z", "message": "minor changes"}, "afterCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/b9940c2fa44942342298b6a433cf3a58826ff7dd", "committedDate": "2020-04-20T13:55:16Z", "message": "added tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjI1MDE3", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-396625017", "createdAt": "2020-04-20T16:37:57Z", "commit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjozNzo1N1rOGIdhwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjo0NjoyM1rOGId4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNTU2OQ==", "bodyText": "Why did you have to make this change?", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411525569", "createdAt": "2020-04-20T16:37:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/AndroidManifest.xml", "diffHunk": "@@ -79,7 +79,8 @@ the specific language governing permissions and limitations under the License.\n         android:largeHeap=\"true\"\n         android:supportsRtl=\"true\"\n         android:usesCleartextTraffic=\"true\"\n-        android:allowBackup=\"true\">\n+        android:allowBackup=\"true\"\n+        android:theme=\"@style/Theme.AppCompat.Light\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNjYwOQ==", "bodyText": "Definitely good to move this to a ViewModel \ud83d\udc4d", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411526609", "createdAt": "2020-04-20T16:39:22Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -80,6 +87,36 @@ public void saveForm(Uri instanceContentURI, boolean shouldFinalize, String upda\n         }\n     }\n \n+    // Cleanup when user exits a form without saving\n+    public void removeTempInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyNzI5MA==", "bodyText": "We can probably remove this logging now as we should have a clearer picture whether the FormController is null or not here.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411527290", "createdAt": "2020-04-20T16:40:22Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/saving/FormSaveViewModel.java", "diffHunk": "@@ -80,6 +87,36 @@ public void saveForm(Uri instanceContentURI, boolean shouldFinalize, String upda\n         }\n     }\n \n+    // Cleanup when user exits a form without saving\n+    public void removeTempInstance() {\n+\n+        if (formController != null && formController.getInstanceFile() != null) {\n+            SaveFormToDisk.removeSavepointFiles(formController.getInstanceFile().getName());\n+\n+            // if it's not already saved, erase everything\n+            if (!InstancesDaoHelper.isInstanceAvailable(getAbsoluteInstancePath())) {\n+                // delete media first\n+                String instanceFolder = formController.getInstanceFile().getParent();\n+                Timber.i(\"Attempting to delete: %s\", instanceFolder);\n+                File file = formController.getInstanceFile().getParentFile();\n+                int images = MediaUtils.deleteImagesInFolderFromMediaProvider(file);\n+                int audio = MediaUtils.deleteAudioInFolderFromMediaProvider(file);\n+                int video = MediaUtils.deleteVideoInFolderFromMediaProvider(file);\n+\n+                Timber.i(\"Removed from content providers: %d image files, %d audio files and %d audio files.\",\n+                        images, audio, video);\n+                FileUtils.purgeMediaPath(instanceFolder);\n+            }\n+        } else {\n+            Timber.w(\"null returned by getFormController()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDUxOQ==", "bodyText": "I think you can just do shadowOf(getMainLooper()).idle(); instead here which a more general way of running the looper.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411530519", "createdAt": "2020-04-20T16:45:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.LooperMode;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@LooperMode(LooperMode.Mode.PAUSED)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    @Before\n+    public void setup() {\n+        FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+\n+        fragmentManager.executePendingTransactions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMDY1Mg==", "bodyText": "Same as above!", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411530652", "createdAt": "2020-04-20T16:45:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.LooperMode;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@LooperMode(LooperMode.Mode.PAUSED)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    @Before\n+    public void setup() {\n+        FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+\n+        fragmentManager.executePendingTransactions();\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void dismiss_shouldDismissTheDialog() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        fragmentManager.executePendingTransactions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzMTM4OA==", "bodyText": "Do we need this test? I think there are a few things that we could add tests for here but dismiss working feels like it's the framework's responsibility. Maybe I'm missing something here?", "url": "https://github.com/getodk/collect/pull/3782#discussion_r411531388", "createdAt": "2020-04-20T16:46:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.LooperMode;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@LooperMode(LooperMode.Mode.PAUSED)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    @Before\n+    public void setup() {\n+        FragmentActivity activity = Robolectric.setupActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+\n+        fragmentManager.executePendingTransactions();\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void dismiss_shouldDismissTheDialog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9940c2fa44942342298b6a433cf3a58826ff7dd"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/3633063cfc2538ad9834febb67887de985cb0949", "committedDate": "2020-04-21T08:15:39Z", "message": "code refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9959612b63b14dc8d19e3efc09805193a4b22e7f", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/9959612b63b14dc8d19e3efc09805193a4b22e7f", "committedDate": "2020-04-21T14:38:21Z", "message": "made changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3OTc2Mjcz", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-397976273", "createdAt": "2020-04-22T08:48:35Z", "commit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0ODozNVrOGJq-WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0ODozNVrOGJq-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NDQ1Nw==", "bodyText": "All this view initialization can probably go in onCreateDialog instead of here so you don't need the title and listView fields.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412794457", "createdAt": "2020-04-22T08:48:35Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    private FormSaveViewModel viewModel;\n+    private final ViewModelProvider.Factory viewModelFactory = new FormSaveViewModel.Factory();\n+\n+    private ListView listView;\n+    private String title;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(requireActivity(), viewModelFactory).get(FormSaveViewModel.class);\n+\n+        title = viewModel.getFormName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3OTc2Njky", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-397976692", "createdAt": "2020-04-22T08:49:06Z", "commit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0OTowNlrOGJrAAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0OTowNlrOGJrAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NDg4Mw==", "bodyText": "You shouldn't need this. Good to look at the docs and have a think about it but it's best to avoid.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412794883", "createdAt": "2020-04-22T08:49:06Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    private FormSaveViewModel viewModel;\n+    private final ViewModelProvider.Factory viewModelFactory = new FormSaveViewModel.Factory();\n+\n+    private ListView listView;\n+    private String title;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(requireActivity(), viewModelFactory).get(FormSaveViewModel.class);\n+\n+        title = viewModel.getFormName();\n+        if (title == null) {\n+            title = context.getString(R.string.no_form_loaded);\n+        }\n+\n+        List<IconMenuItem> items;\n+        if ((boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_SAVE_MID)) {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_save, R.string.keep_changes),\n+                    new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        } else {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        }\n+\n+        listView = DialogUtils.createActionListView(context);\n+\n+        final IconMenuListAdapter adapter = new IconMenuListAdapter(context, items);\n+        listView.setAdapter(adapter);\n+        listView.setOnItemClickListener((parent, view, position, id) -> {\n+            IconMenuItem item = (IconMenuItem) adapter.getItem(position);\n+\n+            if (item.getTextResId() == R.string.keep_changes) {\n+                viewModel.saveForm(getActivity().getIntent().getData(), InstancesDaoHelper.isInstanceComplete(false),\n+                        null, true);\n+\n+            } else {\n+                ExternalDataManager manager = Collect.getInstance().getExternalDataManager();\n+                if (manager != null) {\n+                    manager.close();\n+                }\n+\n+                if (viewModel.getAuditEventLogger() != null) {\n+                    viewModel.getAuditEventLogger().logEvent(AuditEvent.AuditEventType.FORM_EXIT, true, System.currentTimeMillis());\n+                }\n+\n+                viewModel.removeTempInstance();\n+                MediaManager.INSTANCE.revertChanges();\n+\n+                String action = getActivity().getIntent().getAction();\n+                if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_EDIT.equals(action)) {\n+                    // caller is waiting on a picked form\n+                    Uri uri = InstancesDaoHelper.getLastInstanceUri(viewModel.getAbsoluteInstancePath());\n+                    if (uri != null) {\n+                        getActivity().setResult(RESULT_OK, new Intent().setData(uri));\n+                    }\n+                }\n+                getActivity().finish();\n+            }\n+\n+            if (getDialog() != null) {\n+                getDialog().dismiss();\n+            }\n+        });\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+        super.onCreateDialog(savedInstanceState);\n+        setRetainInstance(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3OTc2OTQz", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-397976943", "createdAt": "2020-04-22T08:49:23Z", "commit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0OToyM1rOGJrA9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0OToyM1rOGJrA9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5NTEyNA==", "bodyText": "What is this for?", "url": "https://github.com/getodk/collect/pull/3782#discussion_r412795124", "createdAt": "2020-04-22T08:49:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+import androidx.lifecycle.ViewModelProviders;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    private FormSaveViewModel viewModel;\n+    private final ViewModelProvider.Factory viewModelFactory = new FormSaveViewModel.Factory();\n+\n+    private ListView listView;\n+    private String title;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        viewModel = ViewModelProviders.of(requireActivity(), viewModelFactory).get(FormSaveViewModel.class);\n+\n+        title = viewModel.getFormName();\n+        if (title == null) {\n+            title = context.getString(R.string.no_form_loaded);\n+        }\n+\n+        List<IconMenuItem> items;\n+        if ((boolean) AdminSharedPreferences.getInstance().get(AdminKeys.KEY_SAVE_MID)) {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_save, R.string.keep_changes),\n+                    new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        } else {\n+            items = ImmutableList.of(new IconMenuItem(R.drawable.ic_delete, R.string.do_not_save));\n+        }\n+\n+        listView = DialogUtils.createActionListView(context);\n+\n+        final IconMenuListAdapter adapter = new IconMenuListAdapter(context, items);\n+        listView.setAdapter(adapter);\n+        listView.setOnItemClickListener((parent, view, position, id) -> {\n+            IconMenuItem item = (IconMenuItem) adapter.getItem(position);\n+\n+            if (item.getTextResId() == R.string.keep_changes) {\n+                viewModel.saveForm(getActivity().getIntent().getData(), InstancesDaoHelper.isInstanceComplete(false),\n+                        null, true);\n+\n+            } else {\n+                ExternalDataManager manager = Collect.getInstance().getExternalDataManager();\n+                if (manager != null) {\n+                    manager.close();\n+                }\n+\n+                if (viewModel.getAuditEventLogger() != null) {\n+                    viewModel.getAuditEventLogger().logEvent(AuditEvent.AuditEventType.FORM_EXIT, true, System.currentTimeMillis());\n+                }\n+\n+                viewModel.removeTempInstance();\n+                MediaManager.INSTANCE.revertChanges();\n+\n+                String action = getActivity().getIntent().getAction();\n+                if (Intent.ACTION_PICK.equals(action) || Intent.ACTION_EDIT.equals(action)) {\n+                    // caller is waiting on a picked form\n+                    Uri uri = InstancesDaoHelper.getLastInstanceUri(viewModel.getAbsoluteInstancePath());\n+                    if (uri != null) {\n+                        getActivity().setResult(RESULT_OK, new Intent().setData(uri));\n+                    }\n+                }\n+                getActivity().finish();\n+            }\n+\n+            if (getDialog() != null) {\n+                getDialog().dismiss();\n+            }\n+        });\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+        super.onCreateDialog(savedInstanceState);\n+        setRetainInstance(true);\n+        AlertDialog alertDialog = (AlertDialog) getDialog();\n+\n+        if (alertDialog == null) {\n+            alertDialog = new AlertDialog.Builder(getActivity())\n+                    .setTitle(\n+                            getActivity().getString(R.string.quit_application, title))\n+                    .setPositiveButton(getActivity().getString(R.string.do_not_exit), (dialog, id) -> {\n+                        dialog.cancel();\n+                        dismiss();\n+                    })\n+                    .setView(listView)\n+                    .create();\n+        }\n+\n+        return alertDialog;\n+    }\n+\n+    @Override\n+    public void onDestroyView() {\n+        AlertDialog dialog = (AlertDialog) getDialog();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3633063cfc2538ad9834febb67887de985cb0949"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16b6665c6d980cb7b8a24f8dcd104908383ce4db", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/16b6665c6d980cb7b8a24f8dcd104908383ce4db", "committedDate": "2020-04-23T04:14:29Z", "message": "updated tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f9ffd142c0f2fa4869e3ac9aec6c60de8cea08f", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/0f9ffd142c0f2fa4869e3ac9aec6c60de8cea08f", "committedDate": "2020-04-23T03:49:51Z", "message": "updated tests"}, "afterCommit": {"oid": "16b6665c6d980cb7b8a24f8dcd104908383ce4db", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/16b6665c6d980cb7b8a24f8dcd104908383ce4db", "committedDate": "2020-04-23T04:14:29Z", "message": "updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c93391d33ebdf7560b31ab232f81c6956c322003", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/c93391d33ebdf7560b31ab232f81c6956c322003", "committedDate": "2020-04-23T04:49:58Z", "message": "resolved conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46ee9346441b6212d858b1062c8c2225852f7c4", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a46ee9346441b6212d858b1062c8c2225852f7c4", "committedDate": "2020-04-23T05:58:34Z", "message": "null check for dialog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/2688439e3ffee6c72ecaae2b82382d35cc70d067", "committedDate": "2020-04-26T21:23:59Z", "message": "updatedTests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjY1NjEz", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-402665613", "createdAt": "2020-04-29T13:29:18Z", "commit": {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzoyOToxOFrOGN-1Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzozNzoyNVrOGN_MlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDA5MA==", "bodyText": "Is this needed?", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417314090", "createdAt": "2020-04-29T13:29:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.analytics.Analytics;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.injection.DaggerUtils;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    @Inject\n+    Analytics analytics;\n+\n+    @VisibleForTesting private FormSaveViewModel viewModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDY4Nw==", "bodyText": "I think this will always be true right?", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417314687", "createdAt": "2020-04-29T13:30:07Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/formentry/QuitFormDialogFragment.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.app.Dialog;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.widget.ListView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.adapters.IconMenuListAdapter;\n+import org.odk.collect.android.adapters.model.IconMenuItem;\n+import org.odk.collect.android.analytics.Analytics;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.dao.helpers.InstancesDaoHelper;\n+import org.odk.collect.android.external.ExternalDataManager;\n+import org.odk.collect.android.formentry.audit.AuditEvent;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.injection.DaggerUtils;\n+import org.odk.collect.android.preferences.AdminKeys;\n+import org.odk.collect.android.preferences.AdminSharedPreferences;\n+import org.odk.collect.android.utilities.DialogUtils;\n+import org.odk.collect.android.utilities.MediaManager;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import static android.app.Activity.RESULT_OK;\n+\n+public class QuitFormDialogFragment extends DialogFragment {\n+\n+    @Inject\n+    Analytics analytics;\n+\n+    @VisibleForTesting private FormSaveViewModel viewModel;\n+\n+    @Override\n+    public void onAttach(@NonNull Context context) {\n+        super.onAttach(context);\n+        DaggerUtils.getComponent(context).inject(this);\n+\n+        viewModel = new ViewModelProvider(requireActivity(), new FormSaveViewModel.Factory(analytics))\n+                .get(FormSaveViewModel.class);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+        super.onCreateDialog(savedInstanceState);\n+        AlertDialog alertDialog = (AlertDialog) getDialog();\n+\n+        if (alertDialog == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNjgxMA==", "bodyText": "I'm confused by your use of getTitle and setTitle here. Could you explain why you chose to create a public getTitle and setTitle?", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417316810", "createdAt": "2020-04-29T13:33:00Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyMDA4NA==", "bodyText": "I don't think this test does what you think it does. On a rotation the Acitivity will be recreated (which should cause the DialogFragment to be recreated). The reason to write a test around recreation would be to check that state of the fragment is persisted (the title for example). The ProgressDialogFragmentTest has examples of this kind of test.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r417320084", "createdAt": "2020-04-29T13:37:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);\n+        dialogFragment.setTitle();\n+        assertThat(shadowOf(dialogFragment.getDialog()).getTitle(), equalTo(title));\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCancel_shouldDismissTheDialog() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        assertTrue(dialog.isShowing());\n+\n+        dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();\n+        assertFalse(dialog.isShowing());\n+        assertTrue(shadowOf(dialog).hasBeenDismissed());\n+    }\n+\n+    @Test\n+    public void shouldRetainDialogOnOrientationChange() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2688439e3ffee6c72ecaae2b82382d35cc70d067"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/36949d8fadbac5c920bae5c7c5783e70152a2370", "committedDate": "2020-05-03T16:08:52Z", "message": "code refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Nzk4NjMz", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-404798633", "createdAt": "2020-05-04T08:37:54Z", "commit": {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODozNzo1NFrOGP3Pag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODozNzo1NFrOGP3Pag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4Njg5MA==", "bodyText": "Given that the only \"state\" in this fragment comes from the ViewModel does it make sense to have this test? There isn't any mutable state that needs to be carried from one instance of the fragment to the other as far as I can see.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419286890", "createdAt": "2020-05-04T08:37:54Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);\n+        dialogFragment.setTitle();\n+        assertThat(shadowOf(dialogFragment.getDialog()).getTitle(), equalTo(title));\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCancel_shouldDismissTheDialog() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        assertTrue(dialog.isShowing());\n+\n+        dialog.getButton(DialogInterface.BUTTON_POSITIVE).performClick();\n+        assertFalse(dialog.isShowing());\n+        assertTrue(shadowOf(dialog).hasBeenDismissed());\n+    }\n+\n+    @Test\n+    public void restoringFragment_retainsTitle() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Nzk5NTU3", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-404799557", "createdAt": "2020-05-04T08:39:19Z", "commit": {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODozOToxOVrOGP3SYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODozOToxOVrOGP3SYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4NzY1MQ==", "bodyText": "Do you still feel we need this test? Happy to talk it over some more!", "url": "https://github.com/getodk/collect/pull/3782#discussion_r419287651", "createdAt": "2020-05-04T08:39:19Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+\n+    private FormSaveViewModel viewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        viewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectView() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) dialogFragment.getDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+\n+        String title = dialogFragment.getTitle(viewModel);\n+        dialogFragment.setTitle();\n+        assertThat(shadowOf(dialogFragment.getDialog()).getTitle(), equalTo(title));\n+    }\n+\n+    @Test\n+    public void dialogIsCancellable() {\n+        dialogFragment.show(fragmentManager, \"tag\");\n+        assertThat(shadowOf(dialogFragment.getDialog()).isCancelable(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void clickingCancel_shouldDismissTheDialog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Nzk5NzE5", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-404799719", "createdAt": "2020-05-04T08:39:34Z", "commit": {"oid": "36949d8fadbac5c920bae5c7c5783e70152a2370"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e53757a4bdd18b5c175181b4a29d289f5fa6f0", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/c4e53757a4bdd18b5c175181b4a29d289f5fa6f0", "committedDate": "2020-05-04T16:25:29Z", "message": "updated tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9", "committedDate": "2020-05-06T00:35:52Z", "message": "unit test refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDEyNjQz", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-406412643", "createdAt": "2020-05-06T08:45:32Z", "commit": {"oid": "a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0NTozMlrOGRJdtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0NTozMlrOGRJdtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzNDAzNw==", "bodyText": "The problem with this is that it's unclear what the test wants the title to be. For \"unit\" tests like this you want you test to be as in charge of the dependencies as possible. Given the ViewModel is a mock you can set the value that will be returned from getFormName like so:\nwhen(formSaveViewModel.getFormName()).thenReturn(\"blah\");\n\nThis means you could write a test for both the null and non null case. Here I I'd imagine you're only testin the null case as the mock will return null from getFormName().", "url": "https://github.com/getodk/collect/pull/3782#discussion_r420634037", "createdAt": "2020-05-06T08:45:32Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.odk.collect.android.formentry;\n+\n+import android.content.DialogInterface;\n+import android.widget.TextView;\n+\n+import androidx.appcompat.app.AlertDialog;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.fragment.app.FragmentManager;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.saving.FormSaveViewModel;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowDialog;\n+\n+import static android.view.View.GONE;\n+import static android.view.View.VISIBLE;\n+import static junit.framework.TestCase.assertTrue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.odk.collect.android.support.RobolectricHelpers.mockViewModelProvider;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class QuitFormDialogFragmentTest {\n+\n+    private FragmentActivity activity;\n+    private FragmentManager fragmentManager;\n+    private QuitFormDialogFragment dialogFragment;\n+    private FormSaveViewModel formSaveViewModel;\n+\n+    @Before\n+    public void setup() {\n+        activity = RobolectricHelpers.createThemedActivity(FragmentActivity.class);\n+        fragmentManager = activity.getSupportFragmentManager();\n+        dialogFragment = new QuitFormDialogFragment();\n+\n+        formSaveViewModel = mockViewModelProvider(activity, FormSaveViewModel.class).get(FormSaveViewModel.class);\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectButtons() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        assertNotNull(dialog);\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_POSITIVE).getVisibility(), equalTo(GONE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getVisibility(), equalTo(VISIBLE));\n+        assertThat(dialog.getButton(DialogInterface.BUTTON_NEGATIVE).getText(),\n+                equalTo(activity.getString(R.string.do_not_exit)));\n+    }\n+\n+    @Test\n+    public void shouldShowCorrectTitle() {\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+        String title =  formSaveViewModel.getFormName() == null ? activity.getString(R.string.no_form_loaded)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a835555a0f7f3fbbaa5e7d76ead58f854c08b2a9"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/26e40d4146e2bec8af39f33b8e437ca18b31d9ca", "committedDate": "2020-05-06T14:18:25Z", "message": "added unit test to check correct dialog title"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjY0OTMy", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-407264932", "createdAt": "2020-05-07T08:40:43Z", "commit": {"oid": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0MDo0M1rOGR0Y6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0MTozNVrOGR0bMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzMyMg==", "bodyText": "Yeah I like these tests divided up like this a lot! \ud83d\udc4d", "url": "https://github.com/getodk/collect/pull/3782#discussion_r421337322", "createdAt": "2020-05-07T08:40:43Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -66,6 +67,21 @@ public void shouldShowCorrectTitle() {\n         assertThat(dialogTitle.getText().toString(), equalTo(title));\n     }\n \n+\n+    @Test\n+    public void shouldShowCorrectTitle_whenFormIsLoaded() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzkwNA==", "bodyText": "You don't need this logic in either test right? The test knows what value the form name will be.", "url": "https://github.com/getodk/collect/pull/3782#discussion_r421337904", "createdAt": "2020-05-07T08:41:35Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/formentry/QuitFormDialogFragmentTest.java", "diffHunk": "@@ -66,6 +67,21 @@ public void shouldShowCorrectTitle() {\n         assertThat(dialogTitle.getText().toString(), equalTo(title));\n     }\n \n+\n+    @Test\n+    public void shouldShowCorrectTitle_whenFormIsLoaded() {\n+        when(formSaveViewModel.getFormName()).thenReturn(\"blah\");\n+\n+        dialogFragment.show(fragmentManager, \"TAG\");\n+        AlertDialog dialog = (AlertDialog) ShadowDialog.getLatestDialog();\n+\n+        String title =  formSaveViewModel.getFormName() == null ? activity.getString(R.string.no_form_loaded)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e40d4146e2bec8af39f33b8e437ca18b31d9ca"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878213889b56b0dbe4395bf2e70d8eb50fbd80fc", "author": {"user": {"login": "SaumiaSinghal", "name": "Saumia Singhal"}}, "url": "https://github.com/getodk/collect/commit/878213889b56b0dbe4395bf2e70d8eb50fbd80fc", "committedDate": "2020-05-07T09:36:47Z", "message": "unit tests refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Njc2MTE5", "url": "https://github.com/getodk/collect/pull/3782#pullrequestreview-407676119", "createdAt": "2020-05-07T17:16:09Z", "commit": {"oid": "878213889b56b0dbe4395bf2e70d8eb50fbd80fc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2663, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}