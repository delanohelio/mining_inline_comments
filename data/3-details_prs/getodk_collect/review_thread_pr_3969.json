{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzM3Nzcy", "number": 3969, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1ODo0MFrOEOKxgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTozNjo0OFrOETmwDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjkyMDM1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RangePickerDecimalWidgetTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1ODo0MFrOGxKtFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDowMzowMFrOGx3OEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODc4OQ==", "bodyText": "@seadowg clickingPickerButton_showsNumberPickerDialog() unit test is failing. I'm looking onto it. If you have a hint, please let me know.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r454208789", "createdAt": "2020-07-14T08:58:40Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RangePickerDecimalWidgetTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.view.View;\n+\n+import org.javarosa.core.model.RangeQuestion;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.NumberPickerDialog;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.robolectric.RobolectricTestRunner;\n+import java.math.BigDecimal;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionDefAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestionDef;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class RangePickerDecimalWidgetTest {\n+\n+    private TestScreenContextActivity widgetActivity;\n+    private RangeQuestion rangeQuestion;\n+\n+    @Before\n+    public void setup() {\n+        widgetActivity = widgetTestActivity();\n+        rangeQuestion = mock(RangeQuestion.class);\n+\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"1.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeStep()).thenReturn(new BigDecimal(\"0.5\"));\n+    }\n+\n+    @Test\n+    public void whenRangeEndIsGreaterThanRangeStart_widgetsSetsCorrectValuesForNumberPicker() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 5.5F; i >= 1.5F; i -= 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));\n+        }\n+    }\n+\n+    @Test\n+    public void whenRangeStartIsGreaterThanRangeEnd_widgetsSetsCorrectValuesForNumberPicker() {\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"1.5\"));\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 1.5F; i <= 5.5F; i += 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));\n+        }\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, new StringData(\"2.5\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(2.5));\n+    }\n+\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, new StringData(\"2.5\")));\n+        widget.clearAnswer();\n+\n+        assertThat(widget.getAnswer(), nullValue());\n+        assertThat(widget.binding.widgetAnswerText.getText(), equalTo(widget.getContext().getString(R.string.no_value_selected)));\n+    }\n+\n+    @Test\n+    public void clearAnswer_callsValueChangeListener() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n+    }\n+\n+    @Test\n+    public void setNumberPickerValue_updatesAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.setNumberPickerValue(4);\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"3.5\"));\n+    }\n+\n+    @Test\n+    public void setNumberPickerValue_whenRangeStartIsGreaterThenRangeEnd_updatesAnswer() {\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"1.5\"));\n+\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.setNumberPickerValue(4);\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"3.5\"));\n+    }\n+\n+    @Test\n+    public void clickingPickerButton_showsNumberPickerDialog() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.binding.widgetButton.performClick();\n+\n+        NumberPickerDialog numberPickerDialog = (NumberPickerDialog) widgetActivity.getActivity().getSupportFragmentManager()\n+                .findFragmentByTag(NumberPickerDialog.NUMBER_PICKER_DIALOG_TAG);\n+        shadowOf(getMainLooper()).idle();\n+\n+        assertNotNull(numberPickerDialog);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7fd8fe85122bf42c44efe8caa81f2df43936e7e"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkyNjczNw==", "bodyText": "Yeah if you debug you'll see that in RangeWidgetUtils.showNumberPickerDialog the catch branch will run as there is a ClassCastException. The code is trying to cast the context to a FormEntryActivity but it doesn't need to be one of those to add a Fragment right? I think it just needs to cast it to a FragmentActivity (Activity doesn't have getSupportFragmentManager on it).\nI think you'll also need to have the activity in fully created state to add a fragment (rather than one that's just been \"built\").  Maybe just for those tests you can create a different test activity using createThemedActivity. The extra work is pretty slow so good to only use it in tests that need it!", "url": "https://github.com/getodk/collect/pull/3969#discussion_r454926737", "createdAt": "2020-07-15T09:43:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RangePickerDecimalWidgetTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.view.View;\n+\n+import org.javarosa.core.model.RangeQuestion;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.NumberPickerDialog;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.robolectric.RobolectricTestRunner;\n+import java.math.BigDecimal;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionDefAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestionDef;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class RangePickerDecimalWidgetTest {\n+\n+    private TestScreenContextActivity widgetActivity;\n+    private RangeQuestion rangeQuestion;\n+\n+    @Before\n+    public void setup() {\n+        widgetActivity = widgetTestActivity();\n+        rangeQuestion = mock(RangeQuestion.class);\n+\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"1.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeStep()).thenReturn(new BigDecimal(\"0.5\"));\n+    }\n+\n+    @Test\n+    public void whenRangeEndIsGreaterThanRangeStart_widgetsSetsCorrectValuesForNumberPicker() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 5.5F; i >= 1.5F; i -= 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));\n+        }\n+    }\n+\n+    @Test\n+    public void whenRangeStartIsGreaterThanRangeEnd_widgetsSetsCorrectValuesForNumberPicker() {\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"1.5\"));\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 1.5F; i <= 5.5F; i += 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));\n+        }\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, new StringData(\"2.5\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(2.5));\n+    }\n+\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, new StringData(\"2.5\")));\n+        widget.clearAnswer();\n+\n+        assertThat(widget.getAnswer(), nullValue());\n+        assertThat(widget.binding.widgetAnswerText.getText(), equalTo(widget.getContext().getString(R.string.no_value_selected)));\n+    }\n+\n+    @Test\n+    public void clearAnswer_callsValueChangeListener() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n+    }\n+\n+    @Test\n+    public void setNumberPickerValue_updatesAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.setNumberPickerValue(4);\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"3.5\"));\n+    }\n+\n+    @Test\n+    public void setNumberPickerValue_whenRangeStartIsGreaterThenRangeEnd_updatesAnswer() {\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"1.5\"));\n+\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.setNumberPickerValue(4);\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"3.5\"));\n+    }\n+\n+    @Test\n+    public void clickingPickerButton_showsNumberPickerDialog() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.binding.widgetButton.performClick();\n+\n+        NumberPickerDialog numberPickerDialog = (NumberPickerDialog) widgetActivity.getActivity().getSupportFragmentManager()\n+                .findFragmentByTag(NumberPickerDialog.NUMBER_PICKER_DIALOG_TAG);\n+        shadowOf(getMainLooper()).idle();\n+\n+        assertNotNull(numberPickerDialog);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODc4OQ=="}, "originalCommit": {"oid": "c7fd8fe85122bf42c44efe8caa81f2df43936e7e"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkzODEyOA==", "bodyText": "Right I think that's why the tests simply failed instead of giving an error", "url": "https://github.com/getodk/collect/pull/3969#discussion_r454938128", "createdAt": "2020-07-15T10:03:00Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RangePickerDecimalWidgetTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.view.View;\n+\n+import org.javarosa.core.model.RangeQuestion;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.fragments.dialogs.NumberPickerDialog;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.odk.collect.android.support.TestScreenContextActivity;\n+import org.robolectric.RobolectricTestRunner;\n+import java.math.BigDecimal;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionDefAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestionDef;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class RangePickerDecimalWidgetTest {\n+\n+    private TestScreenContextActivity widgetActivity;\n+    private RangeQuestion rangeQuestion;\n+\n+    @Before\n+    public void setup() {\n+        widgetActivity = widgetTestActivity();\n+        rangeQuestion = mock(RangeQuestion.class);\n+\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"1.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeStep()).thenReturn(new BigDecimal(\"0.5\"));\n+    }\n+\n+    @Test\n+    public void whenRangeEndIsGreaterThanRangeStart_widgetsSetsCorrectValuesForNumberPicker() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 5.5F; i >= 1.5F; i -= 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));\n+        }\n+    }\n+\n+    @Test\n+    public void whenRangeStartIsGreaterThanRangeEnd_widgetsSetsCorrectValuesForNumberPicker() {\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"1.5\"));\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 1.5F; i <= 5.5F; i += 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));\n+        }\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptDoesNotHaveAnswer_returnsNull() {\n+        assertThat(createWidget(promptWithReadOnlyAndQuestionDef(rangeQuestion)).getAnswer(), nullValue());\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptHasAnswer_returnsAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, new StringData(\"2.5\")));\n+        assertThat(widget.getAnswer().getValue(), equalTo(2.5));\n+    }\n+\n+    @Test\n+    public void clearAnswer_clearsWidgetAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, new StringData(\"2.5\")));\n+        widget.clearAnswer();\n+\n+        assertThat(widget.getAnswer(), nullValue());\n+        assertThat(widget.binding.widgetAnswerText.getText(), equalTo(widget.getContext().getString(R.string.no_value_selected)));\n+    }\n+\n+    @Test\n+    public void clearAnswer_callsValueChangeListener() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        WidgetValueChangedListener valueChangedListener = mockValueChangedListener(widget);\n+\n+        widget.clearAnswer();\n+        verify(valueChangedListener).widgetValueChanged(widget);\n+    }\n+\n+    @Test\n+    public void setNumberPickerValue_updatesAnswer() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.setNumberPickerValue(4);\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"3.5\"));\n+    }\n+\n+    @Test\n+    public void setNumberPickerValue_whenRangeStartIsGreaterThenRangeEnd_updatesAnswer() {\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"1.5\"));\n+\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.setNumberPickerValue(4);\n+\n+        assertThat(widget.getAnswer().getDisplayText(), equalTo(\"3.5\"));\n+    }\n+\n+    @Test\n+    public void clickingPickerButton_showsNumberPickerDialog() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        widget.binding.widgetButton.performClick();\n+\n+        NumberPickerDialog numberPickerDialog = (NumberPickerDialog) widgetActivity.getActivity().getSupportFragmentManager()\n+                .findFragmentByTag(NumberPickerDialog.NUMBER_PICKER_DIALOG_TAG);\n+        shadowOf(getMainLooper()).idle();\n+\n+        assertNotNull(numberPickerDialog);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwODc4OQ=="}, "originalCommit": {"oid": "c7fd8fe85122bf42c44efe8caa81f2df43936e7e"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njg2NjkyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxMDozMlrOG3fuGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODozODowOFrOG3uyIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NDU3MQ==", "bodyText": "I'm not a big fan of the FormEntryActivity having to know about widget implementations here but this structure existed a long time before this PR and I think it's be awkward to unravel.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460844571", "createdAt": "2020-07-27T12:10:32Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2633,8 +2634,12 @@ public void onSaveFormIndexError(String errorMessage) {\n     public void onNumberPickerValueSelected(int widgetId, int value) {\n         if (currentView != null) {\n             for (QuestionWidget qw : ((ODKView) currentView).getWidgets()) {\n-                if (qw instanceof RangeWidget && widgetId == qw.getId()) {\n-                    ((RangeWidget) qw).setNumberPickerValue(value);\n+                if (qw instanceof RangePickerIntegerWidget && widgetId == qw.getId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA5MTM2MA==", "bodyText": "@seadowg I think the other option that we can use is having a separate viewModel for RangeWidget. I also don't like having a callback implemented in FormEntryActivity.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r461091360", "createdAt": "2020-07-27T18:38:08Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2633,8 +2634,12 @@ public void onSaveFormIndexError(String errorMessage) {\n     public void onNumberPickerValueSelected(int widgetId, int value) {\n         if (currentView != null) {\n             for (QuestionWidget qw : ((ODKView) currentView).getWidgets()) {\n-                if (qw instanceof RangeWidget && widgetId == qw.getId()) {\n-                    ((RangeWidget) qw).setNumberPickerValue(value);\n+                if (qw instanceof RangePickerIntegerWidget && widgetId == qw.getId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NDU3MQ=="}, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njg4MzAyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/views/TrackingTouchSliderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxNToyMFrOG3f3vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxNToyMFrOG3f3vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NzAzNw==", "bodyText": "Probably worth combining this with the test above so it tests that the ACTION_UP after the ACTION_DOWN works. With these tests the implementation could just set isTrackingTouch to true on an ACTION_DOWN and then never change it back \ud83d\ude09", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460847037", "createdAt": "2020-07-27T12:15:20Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/views/TrackingTouchSliderTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.odk.collect.android.views;\n+\n+import android.widget.LinearLayout;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.core.view.MotionEventBuilder;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static android.view.MotionEvent.ACTION_DOWN;\n+import static android.view.MotionEvent.ACTION_UP;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TrackingTouchSliderTest {\n+\n+    private TrackingTouchSlider slider;\n+\n+    @Before\n+    public void setUp() {\n+        ApplicationProvider.getApplicationContext().setTheme(R.style.Theme_Collect_Light);\n+\n+        LinearLayout linearLayout = new LinearLayout(ApplicationProvider.getApplicationContext());\n+        slider = new TrackingTouchSlider(ApplicationProvider.getApplicationContext(), null);\n+\n+        linearLayout.addView(slider);\n+    }\n+\n+    @Test\n+    public void onStartTrackingTouch_suppressesFlingGesture() {\n+        slider.onTouchEvent(MotionEventBuilder.newBuilder().setAction(ACTION_DOWN).build());\n+        assertThat(slider.isTrackingTouch(), equalTo(true));\n+    }\n+\n+    @Test\n+    public void onStopTrackingTouch_doesNotSuppressFlingGesture() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njg5MTEwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/views/TrackingTouchSliderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoxNzozNlrOG3f8TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwOTowODozMFrOG4Dq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0ODIwNQ==", "bodyText": "Oh this is very cool! It never occurred to me to just set the application context theme. This could probably help us speed up tests where we're building an Activity just to set the context theme. Maybe you could add this to RobolectricHelpers as createThemedContext(int theme) so we  can use it other places?", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460848205", "createdAt": "2020-07-27T12:17:36Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/views/TrackingTouchSliderTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.odk.collect.android.views;\n+\n+import android.widget.LinearLayout;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.core.view.MotionEventBuilder;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static android.view.MotionEvent.ACTION_DOWN;\n+import static android.view.MotionEvent.ACTION_UP;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TrackingTouchSliderTest {\n+\n+    private TrackingTouchSlider slider;\n+\n+    @Before\n+    public void setUp() {\n+        ApplicationProvider.getApplicationContext().setTheme(R.style.Theme_Collect_Light);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzMzU1OQ==", "bodyText": "Yes sure @seadowg :)", "url": "https://github.com/getodk/collect/pull/3969#discussion_r461433559", "createdAt": "2020-07-28T09:08:30Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/test/java/org/odk/collect/android/views/TrackingTouchSliderTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.odk.collect.android.views;\n+\n+import android.widget.LinearLayout;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.core.view.MotionEventBuilder;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static android.view.MotionEvent.ACTION_DOWN;\n+import static android.view.MotionEvent.ACTION_UP;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TrackingTouchSliderTest {\n+\n+    private TrackingTouchSlider slider;\n+\n+    @Before\n+    public void setUp() {\n+        ApplicationProvider.getApplicationContext().setTheme(R.style.Theme_Collect_Light);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0ODIwNQ=="}, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjkwNjc5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RangeDecimalWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyMjoxMVrOG3gFkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1MDo1N1rOG304tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MDU3Ng==", "bodyText": "I think in future this could probably be extracted to its own custom view but for the moment it's great progress!", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460850576", "createdAt": "2020-07-27T12:22:11Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RangeDecimalWidget.java", "diffHunk": "@@ -18,20 +18,56 @@\n \n import android.annotation.SuppressLint;\n import android.content.Context;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.TextView;\n \n+import androidx.annotation.NonNull;\n+\n+import com.google.android.material.slider.Slider;\n+\n+import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.DecimalData;\n import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.views.TrackingTouchSlider;\n+import org.odk.collect.android.widgets.utilities.RangeWidgetUtils;\n \n import java.math.BigDecimal;\n \n @SuppressLint(\"ViewConstructor\")\n-public class RangeDecimalWidget extends RangeWidget {\n+public class RangeDecimalWidget extends QuestionWidget implements Slider.OnChangeListener {\n+    private RangeQuestion rangeQuestion;\n+    private BigDecimal actualValue;\n+\n+    TrackingTouchSlider slider;\n+    TextView currentValue;\n \n     public RangeDecimalWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n     }\n \n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        RangeWidgetUtils.RangeWidgetLayoutElements layoutElements = RangeWidgetUtils.setUpLayoutElements(context, prompt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MTM1MQ==", "bodyText": "Yes correct @seadowg Thank you!", "url": "https://github.com/getodk/collect/pull/3969#discussion_r461191351", "createdAt": "2020-07-27T21:50:57Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RangeDecimalWidget.java", "diffHunk": "@@ -18,20 +18,56 @@\n \n import android.annotation.SuppressLint;\n import android.content.Context;\n+import android.view.MotionEvent;\n+import android.view.View;\n+import android.widget.TextView;\n \n+import androidx.annotation.NonNull;\n+\n+import com.google.android.material.slider.Slider;\n+\n+import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.DecimalData;\n import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.views.TrackingTouchSlider;\n+import org.odk.collect.android.widgets.utilities.RangeWidgetUtils;\n \n import java.math.BigDecimal;\n \n @SuppressLint(\"ViewConstructor\")\n-public class RangeDecimalWidget extends RangeWidget {\n+public class RangeDecimalWidget extends QuestionWidget implements Slider.OnChangeListener {\n+    private RangeQuestion rangeQuestion;\n+    private BigDecimal actualValue;\n+\n+    TrackingTouchSlider slider;\n+    TextView currentValue;\n \n     public RangeDecimalWidget(Context context, QuestionDetails prompt) {\n         super(context, prompt);\n     }\n \n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n+        RangeWidgetUtils.RangeWidgetLayoutElements layoutElements = RangeWidgetUtils.setUpLayoutElements(context, prompt);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MDU3Ng=="}, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjkyNTY4OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjoyNzozOVrOG3gQqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMDoxNVrOG31IhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MzQxNw==", "bodyText": "I think this layout should be called button_and_answer or something. I don't like suggesting that it's the \"default\" answer view.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460853417", "createdAt": "2020-07-27T12:27:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -43,18 +44,20 @@ public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelp\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = UrlWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = WidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NTM5Nw==", "bodyText": "I renamed it to widget_button_and_answer_layout", "url": "https://github.com/getodk/collect/pull/3969#discussion_r461195397", "createdAt": "2020-07-27T22:00:15Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/UrlWidget.java", "diffHunk": "@@ -43,18 +44,20 @@ public UrlWidget(Context context, QuestionDetails questionDetails, CustomTabHelp\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = UrlWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        binding = WidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MzQxNw=="}, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njk0MDEyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/range_widget_horizontal.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjozMTo0NlrOG3gZOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjowMzowNlrOG31NJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1NTYwOA==", "bodyText": "I don't think we should use dividerColor here. Could you find a color to use in the standard material color set and use that instead? If it isn't in our themes already you might have to define it.\nIf it seems doable you could then replace dividerColor everywhere and delete it? No worries if that seems like a distraction though.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460855608", "createdAt": "2020-07-27T12:31:46Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/range_widget_horizontal.xml", "diffHunk": "@@ -31,16 +34,15 @@ limitations under the License.\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"wrap_content\">\n \n-        <SeekBar\n-            android:id=\"@+id/seek_bar_no_ticks\"\n-            android:layout_width=\"match_parent\"\n-            android:layout_height=\"wrap_content\" />\n-\n-        <SeekBar\n-            android:id=\"@+id/seek_bar\"\n+        <org.odk.collect.android.views.TrackingTouchSlider\n+            android:id=\"@+id/slider\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"\n-            android:theme=\"@style/Base.Widget.AppCompat.SeekBar.Discrete\" />\n+            app:thumbColor=\"?colorSecondary\"\n+            app:tickColor=\"?colorOnBackground\"\n+            app:haloColor=\"?dividerColor\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5NjU4Mg==", "bodyText": "Yes sure", "url": "https://github.com/getodk/collect/pull/3969#discussion_r461196582", "createdAt": "2020-07-27T22:03:06Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/res/layout/range_widget_horizontal.xml", "diffHunk": "@@ -31,16 +34,15 @@ limitations under the License.\n         android:layout_width=\"match_parent\"\n         android:layout_height=\"wrap_content\">\n \n-        <SeekBar\n-            android:id=\"@+id/seek_bar_no_ticks\"\n-            android:layout_width=\"match_parent\"\n-            android:layout_height=\"wrap_content\" />\n-\n-        <SeekBar\n-            android:id=\"@+id/seek_bar\"\n+        <org.odk.collect.android.views.TrackingTouchSlider\n+            android:id=\"@+id/slider\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"\n-            android:theme=\"@style/Base.Widget.AppCompat.SeekBar.Discrete\" />\n+            app:thumbColor=\"?colorSecondary\"\n+            app:tickColor=\"?colorOnBackground\"\n+            app:haloColor=\"?dividerColor\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1NTYwOA=="}, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Njk0MDkxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/range_widget_vertical.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjozMjowNFrOG3gZvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMjozMjowNFrOG3gZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1NTc0Mw==", "bodyText": "This should use theme colors rather than hardcoded colors.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r460855743", "createdAt": "2020-07-27T12:32:04Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/range_widget_vertical.xml", "diffHunk": "@@ -33,22 +34,18 @@ limitations under the License.\n         android:layout_width=\"50dp\"\n         android:layout_height=\"330dp\">\n \n-        <SeekBar\n-            android:id=\"@+id/seek_bar_no_ticks\"\n+        <org.odk.collect.android.views.TrackingTouchSlider\n+            android:id=\"@+id/slider\"\n             android:layout_width=\"330dp\"\n             android:layout_height=\"wrap_content\"\n+            app:thumbColor=\"?colorSecondary\"\n+            app:tickColor=\"#696969\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7977906dbbbac8f9baab0968654867c96e940bf"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTQ2OTg1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/values/attrs.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTo0OToyOFrOG4xEIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMzo1MFrOG4-MWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NzMxNA==", "bodyText": "I think you misunderstood what I was trying to communicate before. I just meant if we were missing one of the standard material theme colors we might have to add it to our themes. Sorry if that was confusing!\nThe theme shouldn't have to know that there is a slider that needs a color right? The slider should use a material theme color we have a value for not a new custom one.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r462177314", "createdAt": "2020-07-29T09:49:28Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/values/attrs.xml", "diffHunk": "@@ -2,6 +2,7 @@\n <resources>\n     <declare-styleable name=\"Collect\">\n         <attr name=\"iconColor\" format=\"color\" />\n+        <attr name=\"sliderTrackColor\" format=\"color\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2393015b6c8e37f1069b387432dadf283d94a1a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2OTUzNQ==", "bodyText": "Oh now I get it. We have values for almost all the theme colors except for colorBackground. However, I feel that I shouldn't be using it as sliderTrackColor, as it doesn't sound correct. I feel like I should use colorOnBackground as slider track color. Am I correct? I found that we are not using the value of  colorOnBackground anywhere in the app. Should I update it?", "url": "https://github.com/getodk/collect/pull/3969#discussion_r462369535", "createdAt": "2020-07-29T15:02:52Z", "author": {"login": "SaumiaSinghal"}, "path": "collect_app/src/main/res/values/attrs.xml", "diffHunk": "@@ -2,6 +2,7 @@\n <resources>\n     <declare-styleable name=\"Collect\">\n         <attr name=\"iconColor\" format=\"color\" />\n+        <attr name=\"sliderTrackColor\" format=\"color\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NzMxNA=="}, "originalCommit": {"oid": "e2393015b6c8e37f1069b387432dadf283d94a1a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MjQwOA==", "bodyText": "I'd say colorOnSurface probably makes sense?", "url": "https://github.com/getodk/collect/pull/3969#discussion_r462392408", "createdAt": "2020-07-29T15:33:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/values/attrs.xml", "diffHunk": "@@ -2,6 +2,7 @@\n <resources>\n     <declare-styleable name=\"Collect\">\n         <attr name=\"iconColor\" format=\"color\" />\n+        <attr name=\"sliderTrackColor\" format=\"color\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE3NzMxNA=="}, "originalCommit": {"oid": "e2393015b6c8e37f1069b387432dadf283d94a1a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkzMDUwOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/NumberPickerDialog.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1NToyM1rOG4_IAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1NToyM1rOG4_IAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNzY4Mw==", "bodyText": "I don't think you need to pass a NewInstanceFactory here. Could you not just use the 1 arg constructor for ViewModelProvider?", "url": "https://github.com/getodk/collect/pull/3969#discussion_r462407683", "createdAt": "2020-07-29T15:55:23Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/dialogs/NumberPickerDialog.java", "diffHunk": "@@ -55,12 +53,7 @@ public static NumberPickerDialog newInstance(int widgetId, String[] displayedVal\n     @Override\n     public void onAttach(Context context) {\n         super.onAttach(context);\n-\n-        try {\n-            listener = (NumberPickerListener) context;\n-        } catch (ClassCastException e) {\n-            throw new ClassCastException(context.toString() + \" must implement OnHeadlineSelectedListener\");\n-        }\n+        rangePickerViewModel = new ViewModelProvider(requireActivity(), new ViewModelProvider.NewInstanceFactory()).get(RangePickerViewModel.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cebfef4b1477122500159de4d2a1fdbb1a2294c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Njk0MDA1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RangePickerDecimalWidget.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1NzozM1rOG4_OLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1NzozM1rOG4_OLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwOTI2Mg==", "bodyText": "I feel like getNumberPickerProgress should probably remain a util method as it doesn't rely on any state in the view model.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r462409262", "createdAt": "2020-07-29T15:57:33Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RangePickerDecimalWidget.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.annotation.SuppressLint;\n+import android.app.Activity;\n+import android.content.Context;\n+import android.util.TypedValue;\n+import android.view.View;\n+\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import org.javarosa.core.model.RangeQuestion;\n+import org.javarosa.core.model.data.DecimalData;\n+import org.javarosa.core.model.data.IAnswerData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.FormEntryActivity;\n+import org.odk.collect.android.databinding.WidgetButtonAndAnswerLayoutBinding;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.ScreenContext;\n+import org.odk.collect.android.widgets.utilities.RangeWidgetUtils;\n+import org.odk.collect.android.widgets.viewmodels.RangePickerViewModel;\n+\n+import java.math.BigDecimal;\n+\n+@SuppressLint(\"ViewConstructor\")\n+public class RangePickerDecimalWidget extends QuestionWidget {\n+    WidgetButtonAndAnswerLayoutBinding binding;\n+    String[] displayedValuesForNumberPicker;\n+\n+    private BigDecimal rangeStart;\n+    private BigDecimal rangeEnd;\n+    private BigDecimal rangeStep;\n+\n+    private int progress;\n+\n+    public RangePickerDecimalWidget(Context context, QuestionDetails questionDetails) {\n+        super(context, questionDetails);\n+        RangePickerViewModel rangePickerViewModel = new ViewModelProvider(((ScreenContext) getContext()).getActivity(),\n+                new ViewModelProvider.NewInstanceFactory()).get(RangePickerViewModel.class);\n+\n+        rangePickerViewModel.getNumberPickerValue().observe(((ScreenContext) getContext()).getViewLifecycle(), answer -> {\n+            if (answer != null) {\n+                progress = rangePickerViewModel.getNumberPickerProgress(rangeStart, rangeStep, rangeEnd, answer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cebfef4b1477122500159de4d2a1fdbb1a2294c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTkzMjk0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RangePickerDecimalWidgetTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTozNjo0OFrOG5bqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTozNjo0OFrOG5bqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg3NTI2OQ==", "bodyText": "I'm not a fan of testing this field here as there is no reason for it to be public. Really the test should click on the button and test that the dialog receives the right values. I know you're reworking how all that functions though so I think we go with this for the moment!\nAs a general tip for tests like this I would avoid the for loop and just write out what I expect the values to be. That way it's clearer to the reader of the test. Tests serve as documentation as much as they serve as checks so it's good for them to be very clear what the behaviour they expect is.", "url": "https://github.com/getodk/collect/pull/3969#discussion_r462875269", "createdAt": "2020-07-30T09:36:48Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RangePickerDecimalWidgetTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.widgets;\n+\n+import android.view.View;\n+\n+import org.javarosa.core.model.RangeQuestion;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n+import java.math.BigDecimal;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionDefAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestionDef;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class RangePickerDecimalWidgetTest {\n+\n+    private RangeQuestion rangeQuestion;\n+\n+    @Before\n+    public void setup() {\n+        rangeQuestion = mock(RangeQuestion.class);\n+\n+        when(rangeQuestion.getRangeStart()).thenReturn(new BigDecimal(\"1.5\"));\n+        when(rangeQuestion.getRangeEnd()).thenReturn(new BigDecimal(\"5.5\"));\n+        when(rangeQuestion.getRangeStep()).thenReturn(new BigDecimal(\"0.5\"));\n+    }\n+\n+    @Test\n+    public void whenRangeEndIsGreaterThanRangeStart_widgetsSetsCorrectValuesForNumberPicker() {\n+        RangePickerDecimalWidget widget = createWidget(promptWithQuestionDefAndAnswer(rangeQuestion, null));\n+        int index = 0;\n+\n+        for (double i = 5.5F; i >= 1.5F; i -= 0.5F, index++) {\n+            assertThat(widget.displayedValuesForNumberPicker[index], equalTo(String.valueOf(i)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "019808e1279e1ef2aa1ad708b88a2a3ef4bcac5a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3236, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}