{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjk0Mzcz", "number": 3743, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0MzozNFrODskeXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxNTowOVrOD6lyvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDYxNTM1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODo0MzozNFrOF9fXfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzozMToxMFrOF-rzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTM3NA==", "bodyText": "We should really be using ViewPager2 and FragmentStateAdapter here. ViewPager was recently deprecated so adding it in now is queuing up rework in the future unfortunately! Would you be able to have a look and see much work it would be to convert these changes over?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r400021374", "createdAt": "2020-03-30T08:43:34Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.odk.collect.android.adapters;\n+\n+import android.view.ViewGroup;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.fragment.app.FragmentPagerAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentPagerAdapter  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b2f1c278ebd1408422502882504a969b09f376"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MzYyNw==", "bodyText": "yep, updated now! thanks!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401273627", "createdAt": "2020-03-31T23:31:10Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.odk.collect.android.adapters;\n+\n+import android.view.ViewGroup;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.fragment.app.FragmentPagerAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentPagerAdapter  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTM3NA=="}, "originalCommit": {"oid": "82b2f1c278ebd1408422502882504a969b09f376"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTE2NDMyOnYy", "diffSide": "RIGHT", "path": "collect_app/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTowODoxNFrOF_FL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoxOTo0MlrOGAia1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTU5OQ==", "bodyText": "Why the downgrade here?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401689599", "createdAt": "2020-04-01T15:08:14Z", "author": {"login": "seadowg"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -261,7 +261,8 @@ dependencies {\n     debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'\n \n     // Android Architecture Components:\n-    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\n+    implementation \"androidx.lifecycle:lifecycle-extensions:2.1.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNzEwOQ==", "bodyText": "sorry this was an accident. thanks for catching this!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403217109", "createdAt": "2020-04-03T18:19:42Z", "author": {"login": "hypercubestart"}, "path": "collect_app/build.gradle", "diffHunk": "@@ -261,7 +261,8 @@ dependencies {\n     debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'\n \n     // Android Architecture Components:\n-    implementation \"androidx.lifecycle:lifecycle-extensions:2.2.0\"\n+    implementation \"androidx.lifecycle:lifecycle-extensions:2.1.0\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY4OTU5OQ=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTE5OTE3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToxNTozOVrOF_FhoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyOTo1MFrOGAi81Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTEzNw==", "bodyText": "I'd be happy with this throwing a IllegalArgumentException instead. I'm pretty sure a null will result in a crash anyway so might as well have something that's easy to diagnose!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401695137", "createdAt": "2020-04-01T15:15:39Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.adapters;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.viewpager2.adapter.FragmentStateAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentStateAdapter {\n+    public TabAdapter(FragmentActivity fa) {\n+        super(fa);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Fragment createFragment(int position) {\n+        switch (position) {\n+            case 0:\n+                return new QRScannerFragment();\n+            case 1:\n+                return new ShowQRCodeFragment();\n+            default:\n+                // should never reach here\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNTgxMw==", "bodyText": "thanks for review, done!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403225813", "createdAt": "2020-04-03T18:29:50Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.adapters;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.viewpager2.adapter.FragmentStateAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentStateAdapter {\n+    public TabAdapter(FragmentActivity fa) {\n+        super(fa);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Fragment createFragment(int position) {\n+        switch (position) {\n+            case 0:\n+                return new QRScannerFragment();\n+            case 1:\n+                return new ShowQRCodeFragment();\n+            default:\n+                // should never reach here\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTEzNw=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTIxMjE3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToxODoyNlrOF_Fp7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODozODozMlrOGAjY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzI2MQ==", "bodyText": "Why do we need this? This method has generally always been a little dangerous as it changes how the Fragment lifecycle works and it also looks like it's going to be deprecated: https://developer.android.com/reference/androidx/fragment/app/Fragment#setRetainInstance(boolean)", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401697261", "createdAt": "2020-04-01T15:18:26Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMzAyMA==", "bodyText": "I was testing different behaviors, forgot to delete this. Sorry, I will delete this.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403233020", "createdAt": "2020-04-03T18:38:32Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzI2MQ=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTIzODAzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToyNDowOFrOF_F6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoxMjo1OFrOGBMZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg==", "bodyText": "Should this static method move out of the activity now? Seems weird for the logic to live there given it's being called from a Fragment.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401701492", "createdAt": "2020-04-01T15:24:08Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_scan, container, false);\n+        beepManager = new BeepManager(getActivity());\n+        barcodeScannerView = rootView.findViewById(R.id.barcode_view);\n+        switchFlashlightButton = rootView.findViewById(R.id.switch_flashlight);\n+\n+        barcodeScannerView.setTorchListener(this);\n+\n+        switchFlashlightButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                switchFlashlight(v);\n+            }\n+        });\n+        new PermissionUtils().requestCameraPermission(getActivity(), new PermissionListener() {\n+            @Override\n+            public void granted() {\n+                barcodeScannerView.decodeSingle(new BarcodeCallback() {\n+                    @Override\n+                    public void barcodeResult(BarcodeResult result) {\n+                        beepManager.playBeepSoundAndVibrate();\n+                        try {\n+                            QRCodeTabs.applySettings(getActivity(), CompressionUtils.decompress(result.getText()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNjA4NA==", "bodyText": "I put the applySettings method in QRCodeTabs activity because both QRScannerFragment and ShowQRCodeFragment use it. Does this make sense or should the static method be moved somewhere else?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403236084", "createdAt": "2020-04-03T18:42:22Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_scan, container, false);\n+        beepManager = new BeepManager(getActivity());\n+        barcodeScannerView = rootView.findViewById(R.id.barcode_view);\n+        switchFlashlightButton = rootView.findViewById(R.id.switch_flashlight);\n+\n+        barcodeScannerView.setTorchListener(this);\n+\n+        switchFlashlightButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                switchFlashlight(v);\n+            }\n+        });\n+        new PermissionUtils().requestCameraPermission(getActivity(), new PermissionListener() {\n+            @Override\n+            public void granted() {\n+                barcodeScannerView.decodeSingle(new BarcodeCallback() {\n+                    @Override\n+                    public void barcodeResult(BarcodeResult result) {\n+                        beepManager.playBeepSoundAndVibrate();\n+                        try {\n+                            QRCodeTabs.applySettings(getActivity(), CompressionUtils.decompress(result.getText()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNDk2OA==", "bodyText": "Yeah ideally the fragments shouldn't have to know anything about the activity. I'd maybe move it to a new SettingsUtils in the preferences packages. Saying that actually I realize all of this code should live in the preferences package. Would you be able to move it?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403904968", "createdAt": "2020-04-06T08:12:58Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_scan, container, false);\n+        beepManager = new BeepManager(getActivity());\n+        barcodeScannerView = rootView.findViewById(R.id.barcode_view);\n+        switchFlashlightButton = rootView.findViewById(R.id.switch_flashlight);\n+\n+        barcodeScannerView.setTorchListener(this);\n+\n+        switchFlashlightButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                switchFlashlight(v);\n+            }\n+        });\n+        new PermissionUtils().requestCameraPermission(getActivity(), new PermissionListener() {\n+            @Override\n+            public void granted() {\n+                barcodeScannerView.decodeSingle(new BarcodeCallback() {\n+                    @Override\n+                    public void barcodeResult(BarcodeResult result) {\n+                        beepManager.playBeepSoundAndVibrate();\n+                        try {\n+                            QRCodeTabs.applySettings(getActivity(), CompressionUtils.decompress(result.getText()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI0OTE0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToyNjozNlrOF_GBhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjoyMDoxMFrOGA8Jyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMzMwMA==", "bodyText": "The getInstance() methods here are deprecated. You should see warning in Android Studio about this. As the comment on them says it would be better to use Dagger injection to fetch these.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401703300", "createdAt": "2020-04-01T15:26:36Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java", "diffHunk": "@@ -96,10 +95,11 @@\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.show_qrcode_fragment, container, false);\n-        ((CollectAbstractActivity) getActivity()).initToolbar(getString(R.string.configure_via_qr_code));\n         ButterKnife.bind(this, view);\n         setHasOptionsMenu(true);\n         setRetainInstance(true);\n+        passwordsSet[0] = !((String) AdminSharedPreferences.getInstance().get(KEY_ADMIN_PW)).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODczMQ==", "bodyText": "done thanks!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403638731", "createdAt": "2020-04-05T02:20:10Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java", "diffHunk": "@@ -96,10 +95,11 @@\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.show_qrcode_fragment, container, false);\n-        ((CollectAbstractActivity) getActivity()).initToolbar(getString(R.string.configure_via_qr_code));\n         ButterKnife.bind(this, view);\n         setHasOptionsMenu(true);\n         setRetainInstance(true);\n+        passwordsSet[0] = !((String) AdminSharedPreferences.getInstance().get(KEY_ADMIN_PW)).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMzMwMA=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI4NjUxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNDo1MFrOF_GaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjoxMjoyM1rOGA8Hew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTU3MQ==", "bodyText": "This should be \"Import QR Code\" right?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401709571", "createdAt": "2020-04-01T15:34:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -493,18 +493,16 @@\n     <string name=\"no_time_selected\">No time selected</string>\n     <string name=\"configure_via_qr_code\">Configure via QR code</string>\n     <string name=\"qr_code\">QR code configuration</string>\n-    <string name=\"scan_qrcode\">Scan code from other device</string>\n+    <string name=\"import_qrcode_sd\">Import QRCode</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNzM2Nw==", "bodyText": "Yes, and I think that for consistency with the menu on the main screen it should be lowercase \"code\" -- \"Import QR code\"", "url": "https://github.com/getodk/collect/pull/3743#discussion_r402607367", "createdAt": "2020-04-02T21:29:55Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -493,18 +493,16 @@\n     <string name=\"no_time_selected\">No time selected</string>\n     <string name=\"configure_via_qr_code\">Configure via QR code</string>\n     <string name=\"qr_code\">QR code configuration</string>\n-    <string name=\"scan_qrcode\">Scan code from other device</string>\n+    <string name=\"import_qrcode_sd\">Import QRCode</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTU3MQ=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODEzOQ==", "bodyText": "absolutely! done, thanks for review!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403638139", "createdAt": "2020-04-05T02:12:23Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/res/values/strings.xml", "diffHunk": "@@ -493,18 +493,16 @@\n     <string name=\"no_time_selected\">No time selected</string>\n     <string name=\"configure_via_qr_code\">Configure via QR code</string>\n     <string name=\"qr_code\">QR code configuration</string>\n-    <string name=\"scan_qrcode\">Scan code from other device</string>\n+    <string name=\"import_qrcode_sd\">Import QRCode</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwOTU3MQ=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTI5OTYyOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/fragment_scan.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozNzo1NlrOF_Gi5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwMjoxNToxNFrOGA8ITw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTg0Nw==", "bodyText": "Can we make this a MaterialButton and remove the custom padding, background etc? It also looks like it needs a larger margin from what I can see in the design preview. I think using @dimen/margin_large would do it.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401711847", "createdAt": "2020-04-01T15:37:56Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/fragment_scan.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\"org.odk.collect.android.fragments.QRScannerFragment\">\n+\n+\n+    <com.journeyapps.barcodescanner.DecoratedBarcodeView\n+        android:id=\"@+id/barcode_view\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        />\n+\n+    <Button", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODM1MQ==", "bodyText": "yep! @lognaturel and I talked about this before and we were going to update the button in a follow-up PR, but I can change it here", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403638351", "createdAt": "2020-04-05T02:15:14Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/res/layout/fragment_scan.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    tools:context=\"org.odk.collect.android.fragments.QRScannerFragment\">\n+\n+\n+    <com.journeyapps.barcodescanner.DecoratedBarcodeView\n+        android:id=\"@+id/barcode_view\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        />\n+\n+    <Button", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMTg0Nw=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMwNDI1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/res/layout/show_qrcode_fragment.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozODo1N1rOF_Gl7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDozOToxN1rOGCeuwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjYyMg==", "bodyText": "This should be the default text color. Hard coding like this will make the text the wrong color for the dark theme though. Were you running into problems that made you set this?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401712622", "createdAt": "2020-04-01T15:38:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/show_qrcode_fragment.xml", "diffHunk": "@@ -81,6 +63,10 @@\n             android:layout_weight=\"1\"\n             android:padding=\"5dp\"\n             android:textSize=\"15sp\"\n-            android:textStyle=\"bold\" />\n+            android:gravity=\"center_vertical\"\n+            android:text=\"@string/qrcode_with_both_passwords\"\n+            android:textColor=\"#000000\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzOTg5OQ==", "bodyText": "with the dark color scheme, white text over a yellowish background:\nhttps://github.com/hypercubestart/collect/blob/51fbeda54ab3c3510e135114a660c2fe0fde2be8/collect_app/src/main/res/layout/show_qrcode_fragment.xml#L43\ndid not look well. So, I planned to just keep the color scheme consistent. Is this okay? As a sidenote, should I pull out the color hex values into colors.xml", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403639899", "createdAt": "2020-04-05T02:37:18Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/res/layout/show_qrcode_fragment.xml", "diffHunk": "@@ -81,6 +63,10 @@\n             android:layout_weight=\"1\"\n             android:padding=\"5dp\"\n             android:textSize=\"15sp\"\n-            android:textStyle=\"bold\" />\n+            android:gravity=\"center_vertical\"\n+            android:text=\"@string/qrcode_with_both_passwords\"\n+            android:textColor=\"#000000\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjYyMg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNzMzOQ==", "bodyText": "Ah right I see. You're right that is not going to look good on the yellow! We really want our colors to as much as possible come from our theme attributes. This makes them easier to change but also just limits the amount of colors floating around in the app. I think for the background color here we should use ?colorError (a red warning/error color) instead of the yellow and for the text we should use ?colorOnError.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403907339", "createdAt": "2020-04-06T08:16:57Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/res/layout/show_qrcode_fragment.xml", "diffHunk": "@@ -81,6 +63,10 @@\n             android:layout_weight=\"1\"\n             android:padding=\"5dp\"\n             android:textSize=\"15sp\"\n-            android:textStyle=\"bold\" />\n+            android:gravity=\"center_vertical\"\n+            android:text=\"@string/qrcode_with_both_passwords\"\n+            android:textColor=\"#000000\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjYyMg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1MzgyNA==", "bodyText": "i can roll with this, the error icon will also use the ?colorOnError to match the color of the text", "url": "https://github.com/getodk/collect/pull/3743#discussion_r405253824", "createdAt": "2020-04-08T04:39:17Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/res/layout/show_qrcode_fragment.xml", "diffHunk": "@@ -81,6 +63,10 @@\n             android:layout_weight=\"1\"\n             android:padding=\"5dp\"\n             android:textSize=\"15sp\"\n-            android:textStyle=\"bold\" />\n+            android:gravity=\"center_vertical\"\n+            android:text=\"@string/qrcode_with_both_passwords\"\n+            android:textColor=\"#000000\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMjYyMg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTMwODU3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNTozOTo1MFrOF_GojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNDo0MTozMFrOGCewpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg==", "bodyText": "This should be QRCodeTabsActivity", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401713292", "createdAt": "2020-04-01T15:39:50Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.CollectAbstractActivity;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.adapters.TabAdapter;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.listeners.ActionListener;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.android.utilities.QRCodeUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.FileProvider;\n+import androidx.viewpager2.widget.ViewPager2;\n+\n+import com.google.android.material.tabs.TabLayout;\n+import com.google.android.material.tabs.TabLayoutMediator;\n+\n+import static org.odk.collect.android.activities.ActivityUtils.startActivityAndCloseAllOthers;\n+\n+public class QRCodeTabs extends CollectAbstractActivity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODQ4MQ==", "bodyText": "done! @seadowg should this also be moved to collect/android/activities folder?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403638481", "createdAt": "2020-04-05T02:17:09Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.CollectAbstractActivity;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.adapters.TabAdapter;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.listeners.ActionListener;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.android.utilities.QRCodeUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.FileProvider;\n+import androidx.viewpager2.widget.ViewPager2;\n+\n+import com.google.android.material.tabs.TabLayout;\n+import com.google.android.material.tabs.TabLayoutMediator;\n+\n+import static org.odk.collect.android.activities.ActivityUtils.startActivityAndCloseAllOthers;\n+\n+public class QRCodeTabs extends CollectAbstractActivity {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNzg5Mw==", "bodyText": "As above I think it moves to preferences. Maybe all of it should go in a preferences.qr packakge... what do you think? We're trying to organize our code by function/domain rather than component type.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403907893", "createdAt": "2020-04-06T08:17:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.CollectAbstractActivity;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.adapters.TabAdapter;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.listeners.ActionListener;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.android.utilities.QRCodeUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.FileProvider;\n+import androidx.viewpager2.widget.ViewPager2;\n+\n+import com.google.android.material.tabs.TabLayout;\n+import com.google.android.material.tabs.TabLayoutMediator;\n+\n+import static org.odk.collect.android.activities.ActivityUtils.startActivityAndCloseAllOthers;\n+\n+public class QRCodeTabs extends CollectAbstractActivity {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1NDMxMA==", "bodyText": "I like the idea of a preferences.qr package. There's a few files in here and it feels a lot cleaner than forcing even more items into the crowded preferences package.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r405254310", "createdAt": "2020-04-08T04:41:30Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.CollectAbstractActivity;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.adapters.TabAdapter;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.listeners.ActionListener;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.android.utilities.QRCodeUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.FileProvider;\n+import androidx.viewpager2.widget.ViewPager2;\n+\n+import com.google.android.material.tabs.TabLayout;\n+import com.google.android.material.tabs.TabLayoutMediator;\n+\n+import static org.odk.collect.android.activities.ActivityUtils.startActivityAndCloseAllOthers;\n+\n+public class QRCodeTabs extends CollectAbstractActivity {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg=="}, "originalCommit": {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIxMzA0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNzowMFrOGCiokg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjozODo0MVrOGFXX4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA==", "bodyText": "Did this come from a file that had a copyright notice on it?\n@lognaturel should we have this kind of copyright notice in the code? I know copyright headers like this can be useful for relicensing projects (as you can scan for all the copyright holders) but as far as I know we don't have them for every contribution so we'd probably need to get that info from Git anyway.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r405317778", "createdAt": "2020-04-08T07:37:00Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2017 Shobhit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb92976b13167d1b6750d136739fa3dd5d86b554"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxODk2NQ==", "bodyText": "getodk/governance#2 For unresolved governance issue. I go back and forth on what I think is best and so have stopped making any code review comments. I think that yes, git is and should be the ultimate source for authorship and copyright info. I also think that for forks, it's nice to have an ongoing reminder that they're pulling in code from another source. I find the license header more compelling than the copyright notice. I (intend to) always include the header on new files I create.\nThis specific file was renamed. On one hand, the header does capture original copyright. On the other, the file has changed enough that it's not super meaningful.\nSo I don't have strong feelings about what happens to this header.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r408218965", "createdAt": "2020-04-14T15:15:49Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2017 Shobhit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA=="}, "originalCommit": {"oid": "fb92976b13167d1b6750d136739fa3dd5d86b554"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDUwNA==", "bodyText": "Yeah totally agree a license header is a different story. I'd be up for getting rid of author specific copyright notices like this where we see them as they're usually just inaccurate - they don't have copyright for this entire file. I'd generally ask people not to include them unless they feel strongly they want it as part of the PR.\nGetting rid of them without lawyers is pretty scary but I'd say we can remove this as it looks autogenerated and doesn't actually reference anyone by email/full name. I'll CC our pal @shobhitagarwal1612 (who I'm guessing is our \"shobit\" here) and see if he's ok getting rid of it. At least that will be one gone!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r408270504", "createdAt": "2020-04-14T16:26:07Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2017 Shobhit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA=="}, "originalCommit": {"oid": "fb92976b13167d1b6750d136739fa3dd5d86b554"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTAxMQ==", "bodyText": "I have no issues. Please remove it. Happy to see the progress happening to the project \ud83d\ude04 \ud83d\ude80\nI have always been nervous while adding a new file without a copyright. But since that issue is still a gray area, I'd leave the final decision to @lognaturel.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r408279011", "createdAt": "2020-04-14T16:38:41Z", "author": {"login": "shobhitagarwal1612"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2017 Shobhit", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA=="}, "originalCommit": {"oid": "fb92976b13167d1b6750d136739fa3dd5d86b554"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjYyMTI5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0MzozN1rOGN_epg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNzowM1rOGO-7pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDcxMA==", "bodyText": "I'd try and name this around the \"feature\" rather than the components under test (as this test shouldn't really care about them). Maybe ConfigureWithQRCodeTest?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417324710", "createdAt": "2020-04-29T13:43:37Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDMyNA==", "bodyText": "done, thanks!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418364324", "createdAt": "2020-05-01T00:37:03Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDcxMA=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjYyMzgzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0NDoxM1rOGN_gZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNzozMlrOGO-8JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTE1Ng==", "bodyText": "This should probably be a static and use constant syntax (CHECKER_BACKGROUND_DRAWABLE_ID).", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417325156", "createdAt": "2020-04-29T13:44:13Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDQ1Mw==", "bodyText": "yes you are right, thanks!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418364453", "createdAt": "2020-05-01T00:37:32Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTE1Ng=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjYyODQzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0NToxN1rOGN_jZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDo0MToyOVrOGO_ANQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTkyNQ==", "bodyText": "Maybe this stub version could be a private static inner class here so you're able to just do new StubQRCodeGenerator().", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417325925", "createdAt": "2020-04-29T13:45:17Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTQ5Mw==", "bodyText": "done, thanks!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418365493", "createdAt": "2020-05-01T00:41:29Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTkyNQ=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjYzNjg3OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0NzowMVrOGN_ohQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0NzowMVrOGN_ohQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNzIzNw==", "bodyText": "Again just in terms of naming lets try and get closer to describing the feature. onMainMenu_clickConfigureQRCode_andClickingOnScan_opensScanner() for this as an example. I'd try doing a similar \"given-when-then\" style for all these tests.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417327237", "createdAt": "2020-04-29T13:47:01Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjY0MzM1OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo0ODozMVrOGN_spg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoyMToxNlrOGRp-aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA==", "bodyText": "I think you still want another assertion here on the file that's sent right?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417328294", "createdAt": "2020-04-29T13:48:31Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MTE0NQ==", "bodyText": "yes, I'm not quite sure how though, because it may also be helpful to check that the stream is valid", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417761145", "createdAt": "2020-04-30T05:27:27Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyNzM2Mg==", "bodyText": "I think you want to check that the intent has the URI in it right?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417827362", "createdAt": "2020-04-30T08:01:25Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNTYyMw==", "bodyText": "yes, but this Intent wraps another Intent with contains the URI as an Extra. I'm having trouble testing this inner intent.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418335623", "createdAt": "2020-04-30T22:59:25Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjY5OQ==", "bodyText": "nvm, figured it out! can you please take another look? I'm a little worried now that the test is too coupled with the code, especially the expectedUri part\nhttps://github.com/hypercubestart/collect/blob/4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java#L125\nUri expected = FileProvider.getUriForFile(ApplicationProvider.getApplicationContext(),\nBuildConfig.APPLICATION_ID + \".provider\",\nnew File(path));\nwhich I copied over directly", "url": "https://github.com/getodk/collect/pull/3743#discussion_r421166699", "createdAt": "2020-05-07T00:21:16Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjY1MTY2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzo1MDoxM1rOGN_xqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDoyMjowNlrOGRp_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ==", "bodyText": "If possible it'd be nicer for QRCodeUtils.getQRCodeGeneratorObservable's logic to move to this implementation (and probably have it in its own class file). Wrapping like this is a nice trick for dealing with statics we don't control but we do control this one!", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417329579", "createdAt": "2020-04-29T13:50:13Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -265,4 +271,14 @@ public BackgroundWorkManager providesBackgroundWorkManager() {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n+\n+    @Provides\n+    public QRCodeGenerator providesQRCodeGenerator() {\n+        return new QRCodeGenerator() {\n+            @Override\n+            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NjI4Mw==", "bodyText": "Is it okay to break up QRCodeUtils logic like this? Because it uses certain functions/static constants that aren't accessible outside the QRCodeUtils or outside the utils package?\nMy concern is that If this is the only thing that needs to be moved out, I'm not sure if it's worth it to separate it from the other QRCodeUtils functions which may decrease readability.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418376283", "createdAt": "2020-05-01T01:27:25Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -265,4 +271,14 @@ public BackgroundWorkManager providesBackgroundWorkManager() {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n+\n+    @Provides\n+    public QRCodeGenerator providesQRCodeGenerator() {\n+        return new QRCodeGenerator() {\n+            @Override\n+            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ3NTU2Ng==", "bodyText": "I do see your point but it seems to be that everything in that utils provides information about a single QR code image (the image itself, it's path etc) other than decodeFromBitmap. Could it be broken into a QRCodeGenerator and a QRCodeReader interface?", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418475566", "createdAt": "2020-05-01T09:24:02Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -265,4 +271,14 @@ public BackgroundWorkManager providesBackgroundWorkManager() {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n+\n+    @Provides\n+    public QRCodeGenerator providesQRCodeGenerator() {\n+        return new QRCodeGenerator() {\n+            @Override\n+            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2Njk4NA==", "bodyText": "If its okay with you, I went ahead and broke it into QRCodeGenerator interface, and left the remaining functions untouched in the QRCodeUtils.java", "url": "https://github.com/getodk/collect/pull/3743#discussion_r421166984", "createdAt": "2020-05-07T00:22:06Z", "author": {"login": "hypercubestart"}, "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -265,4 +271,14 @@ public BackgroundWorkManager providesBackgroundWorkManager() {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n+\n+    @Provides\n+    public QRCodeGenerator providesQRCodeGenerator() {\n+        return new QRCodeGenerator() {\n+            @Override\n+            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ=="}, "originalCommit": {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzYzMTk2OnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxNTowOVrOGSgshA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDoxNTowOVrOGSgshA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MzIzNg==", "bodyText": "We've found recently that we could run into ordering problems with rules so it'd be best if this rule was also part of the RuleChain below. Just remove the @Rule and add around(rule) to the end of the chain.", "url": "https://github.com/getodk/collect/pull/3743#discussion_r422063236", "createdAt": "2020-05-08T10:15:09Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+\n+import com.google.zxing.WriterException;\n+\n+import androidx.core.content.FileProvider;\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.Intents;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.utilities.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.BundleMatchers.hasEntry;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasExtraWithKey;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasExtras;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ConfigureWithQRCodeTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private static final int CHECKER_BACKGROUND_DRAWABLE_ID = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3411, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}