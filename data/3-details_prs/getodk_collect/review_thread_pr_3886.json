{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1OTQ0OTA5", "number": 3886, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTowODozN1rOEFvzvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MToxMlrOEFx3kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDYxNjMxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTowODozN1rOGkHyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowMDo1OVrOGkPwtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ==", "bodyText": "Did you try assertThat(messageDigest, is(cachedMessageDigest))? I'm pretty sure that just works.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440529439", "createdAt": "2020-06-16T01:08:37Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1ODg1Mg==", "bodyText": "I think this must have come from old code as I don't remember adding this annotation. I'm pretty sure you're right so I'll fix this.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440658852", "createdAt": "2020-06-16T07:58:42Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ=="}, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDE0OQ==", "bodyText": "Oooops. This actually isn't in the final changes.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440660149", "createdAt": "2020-06-16T08:00:59Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTQzOQ=="}, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDYxNzI5OnYy", "diffSide": "RIGHT", "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTowOTowOFrOGkHysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDozMToxNVrOGksDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng==", "bodyText": "Ah, you're not going all-in on Hamcrest these days?", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440529586", "createdAt": "2020-06-16T01:09:08Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")\n+    private void assertCachedFileIsCorrect(byte[] data, File file) throws NoSuchAlgorithmException {\n+        byte[] messageDigest = getDigest(data);\n+        byte[] cachedMessageDigest = FileUtils.read(file);\n+        assertTrue(Arrays.equals(messageDigest, cachedMessageDigest));\n+    }\n+\n+    private byte[] getDigest(byte[] data) throws NoSuchAlgorithmException {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(data);\n+        return md.digest();\n+    }\n+\n+    private void assertQRContains(Bitmap bitmap, String data) throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException {\n+        assertNotNull(bitmap);\n+        String result = QRCodeUtils.decodeFromBitmap(bitmap);\n+        assertEquals(data, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1OTI4OA==", "bodyText": "Yeah again this is old code. Will update though.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440659288", "createdAt": "2020-06-16T07:59:27Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")\n+    private void assertCachedFileIsCorrect(byte[] data, File file) throws NoSuchAlgorithmException {\n+        byte[] messageDigest = getDigest(data);\n+        byte[] cachedMessageDigest = FileUtils.read(file);\n+        assertTrue(Arrays.equals(messageDigest, cachedMessageDigest));\n+    }\n+\n+    private byte[] getDigest(byte[] data) throws NoSuchAlgorithmException {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(data);\n+        return md.digest();\n+    }\n+\n+    private void assertQRContains(Bitmap bitmap, String data) throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException {\n+        assertNotNull(bitmap);\n+        String result = QRCodeUtils.decodeFromBitmap(bitmap);\n+        assertEquals(data, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng=="}, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDM0Ng==", "bodyText": "This also isn't in the final changes.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440660346", "createdAt": "2020-06-16T08:01:18Z", "author": {"login": "seadowg"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")\n+    private void assertCachedFileIsCorrect(byte[] data, File file) throws NoSuchAlgorithmException {\n+        byte[] messageDigest = getDigest(data);\n+        byte[] cachedMessageDigest = FileUtils.read(file);\n+        assertTrue(Arrays.equals(messageDigest, cachedMessageDigest));\n+    }\n+\n+    private byte[] getDigest(byte[] data) throws NoSuchAlgorithmException {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(data);\n+        return md.digest();\n+    }\n+\n+    private void assertQRContains(Bitmap bitmap, String data) throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException {\n+        assertNotNull(bitmap);\n+        String result = QRCodeUtils.decodeFromBitmap(bitmap);\n+        assertEquals(data, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng=="}, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMzcxMg==", "bodyText": "Ooops, sorry. I usually go back and check when I go commit by commit but didn't with these.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r441123712", "createdAt": "2020-06-16T20:31:15Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/test/java/org/odk/collect/android/utilities/CachingQRCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package org.odk.collect.android.utilities;\n+\n+import android.graphics.Bitmap;\n+\n+import com.google.zxing.ChecksumException;\n+import com.google.zxing.FormatException;\n+import com.google.zxing.NotFoundException;\n+import com.google.zxing.WriterException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.preferences.qr.CachingQRCodeGenerator;\n+import org.odk.collect.android.preferences.qr.QRCodeGenerator;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.zip.DataFormatException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class CachingQRCodeGeneratorTest {\n+\n+    private final QRCodeGenerator qrCodeGenerator = new CachingQRCodeGenerator();\n+\n+    private File savedQrCodeImage;\n+    private File md5File;\n+\n+    @Before\n+    public void setup() {\n+        StoragePathProvider storagePathProvider = new StoragePathProvider();\n+\n+        String savedQrCodeImagePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \"collect-settings.png\";\n+        savedQrCodeImage = new File(savedQrCodeImagePath);\n+\n+        String md5FilePath = storagePathProvider.getDirPath(StorageSubdirectory.SETTINGS) + File.separator + \".collect-settings-hash\";\n+        md5File = new File(md5FilePath);\n+\n+        savedQrCodeImage.delete();\n+        md5File.delete();\n+    }\n+\n+    @Test\n+    public void generateQRCodeIfNoCacheExists() throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException, NoSuchAlgorithmException {\n+        // verify that QRCode and md5 cache files don't exist\n+        assertFalse(savedQrCodeImage.exists());\n+        assertFalse(md5File.exists());\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert files are saved\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+        assertQRContains(generationResults.generatedBitmap.get(), expectedData);\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    @Test\n+    public void readQRCodeFromDiskIfCacheExists() throws NoSuchAlgorithmException, IOException, WriterException {\n+        String expectedData = \"{\\\"general\\\":{},\\\"admin\\\":{}}\";\n+\n+        // stubbing cache and bitmap files\n+        new File(new StoragePathProvider().getDirPath(StorageSubdirectory.SETTINGS)).mkdirs();\n+        FileUtils.saveBitmapToFile(QRCodeUtils.encode(expectedData), savedQrCodeImage.getAbsolutePath());\n+        FileUtils.write(md5File, getDigest(expectedData.getBytes()));\n+\n+        // verify that QRCode and md5 cache files exist\n+        assertTrue(savedQrCodeImage.exists());\n+        assertTrue(md5File.exists());\n+\n+        final long lastModifiedQRCode = savedQrCodeImage.lastModified();\n+        final long lastModifiedCache = md5File.lastModified();\n+\n+        final GenerationResults generationResults = new GenerationResults();\n+        generateQrCode(generationResults);\n+\n+        // assert that files were not modified\n+        assertEquals(lastModifiedCache, md5File.lastModified());\n+        assertEquals(lastModifiedQRCode, savedQrCodeImage.lastModified());\n+\n+        verifyCachedMd5Data(expectedData);\n+    }\n+\n+    public void generateQrCode(GenerationResults generationResults) {\n+        // subscribe to the QRCode generator in the same thread\n+        qrCodeGenerator.generateQRCode(new ArrayList<>())\n+                .subscribe(generationResults.generatedBitmap::set, generationResults.errorThrown::set, () -> generationResults.isFinished.set(true));\n+\n+        generationResults.assertGeneratedOk();\n+    }\n+\n+    /**\n+     * Verifies that the md5 data in the cached file is correct\n+     */\n+    private void verifyCachedMd5Data(String expectedData) throws NoSuchAlgorithmException {\n+        assertCachedFileIsCorrect(expectedData.getBytes(), md5File);\n+    }\n+\n+    @SuppressWarnings(\"PMD.UseAssertEqualsInsteadOfAssertTrue\")\n+    private void assertCachedFileIsCorrect(byte[] data, File file) throws NoSuchAlgorithmException {\n+        byte[] messageDigest = getDigest(data);\n+        byte[] cachedMessageDigest = FileUtils.read(file);\n+        assertTrue(Arrays.equals(messageDigest, cachedMessageDigest));\n+    }\n+\n+    private byte[] getDigest(byte[] data) throws NoSuchAlgorithmException {\n+        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n+        md.update(data);\n+        return md.digest();\n+    }\n+\n+    private void assertQRContains(Bitmap bitmap, String data) throws DataFormatException, FormatException, ChecksumException, NotFoundException, IOException {\n+        assertNotNull(bitmap);\n+        String result = QRCodeUtils.decodeFromBitmap(bitmap);\n+        assertEquals(data, result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyOTU4Ng=="}, "originalCommit": {"oid": "9c5f1498edb61bb76d1b3e46f0f50d6c27338fe4"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDkzNTUxOnYy", "diffSide": "RIGHT", "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/MainMenuPage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoyOTozMFrOGkK1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowMTozNFrOGkPyBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTQwOA==", "bodyText": "should be password", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440579408", "createdAt": "2020-06-16T04:29:30Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/MainMenuPage.java", "diffHunk": "@@ -69,6 +69,13 @@ public QRCodeTabsActivityPage clickConfigureQR() {\n         return new QRCodeTabsActivityPage(rule).assertOnPage();\n     }\n \n+    public QRCodeTabsActivityPage clickConfigureQRWithAdminPassword(String password) {\n+        clickOnString(R.string.configure_via_qr_code);\n+        inputText(\"blah\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f090d100ece447c8ae9b53243e45a0ca16ac5d55"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MDQ4Nw==", "bodyText": "\ud83d\ude06", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440660487", "createdAt": "2020-06-16T08:01:34Z", "author": {"login": "seadowg"}, "path": "collect_app/src/androidTest/java/org/odk/collect/android/support/pages/MainMenuPage.java", "diffHunk": "@@ -69,6 +69,13 @@ public QRCodeTabsActivityPage clickConfigureQR() {\n         return new QRCodeTabsActivityPage(rule).assertOnPage();\n     }\n \n+    public QRCodeTabsActivityPage clickConfigureQRWithAdminPassword(String password) {\n+        clickOnString(R.string.configure_via_qr_code);\n+        inputText(\"blah\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTQwOA=="}, "originalCommit": {"oid": "f090d100ece447c8ae9b53243e45a0ca16ac5d55"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDk0MTAzOnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozMzoxOFrOGkK4sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowMzo1NVrOGkP3bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDI3NA==", "bodyText": "Shouldn't this be qrcode_without_passwords?", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440580274", "createdAt": "2020-06-16T04:33:18Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeViewModel.java", "diffHunk": "@@ -85,12 +85,18 @@ protected void onPostExecute(Pair<String, Bitmap> qrCode) {\n                 boolean serverPasswordSet = !generalSharedPreferences.getString(KEY_PASSWORD, \"\").isEmpty();\n                 boolean adminPasswordSet = adminSharedPreferences.contains(KEY_ADMIN_PW);\n \n-                if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n-                    warning.setValue(R.string.qrcode_with_server_password);\n-                } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n-                    warning.setValue(R.string.qrcode_with_admin_password);\n+                if (serverPasswordSet || adminPasswordSet) {\n+                    if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD) && adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_both_passwords);\n+                    } else if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n+                        warning.setValue(R.string.qrcode_with_server_password);\n+                    } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_admin_password);\n+                    } else {\n+                        warning.setValue(R.string.qrcode_without_passwords);\n+                    }\n                 } else {\n-                    warning.setValue(R.string.qrcode_without_passwords);\n+                    warning.setValue(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1baf34345cf46579a9b4360d4e21a4543cbd942c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MTg2OA==", "bodyText": "No we don't show a warning where there aren't any passwords available to show in the QR. qrcode_without_passwords is only shown when the user actively removes the admin and server password.", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440661868", "createdAt": "2020-06-16T08:03:55Z", "author": {"login": "seadowg"}, "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeViewModel.java", "diffHunk": "@@ -85,12 +85,18 @@ protected void onPostExecute(Pair<String, Bitmap> qrCode) {\n                 boolean serverPasswordSet = !generalSharedPreferences.getString(KEY_PASSWORD, \"\").isEmpty();\n                 boolean adminPasswordSet = adminSharedPreferences.contains(KEY_ADMIN_PW);\n \n-                if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n-                    warning.setValue(R.string.qrcode_with_server_password);\n-                } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n-                    warning.setValue(R.string.qrcode_with_admin_password);\n+                if (serverPasswordSet || adminPasswordSet) {\n+                    if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD) && adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_both_passwords);\n+                    } else if (serverPasswordSet && includedKeys.contains(KEY_PASSWORD)) {\n+                        warning.setValue(R.string.qrcode_with_server_password);\n+                    } else if (adminPasswordSet && includedKeys.contains(KEY_ADMIN_PW)) {\n+                        warning.setValue(R.string.qrcode_with_admin_password);\n+                    } else {\n+                        warning.setValue(R.string.qrcode_without_passwords);\n+                    }\n                 } else {\n-                    warning.setValue(R.string.qrcode_without_passwords);\n+                    warning.setValue(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDI3NA=="}, "originalCommit": {"oid": "1baf34345cf46579a9b4360d4e21a4543cbd942c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDk0MzA0OnYy", "diffSide": "RIGHT", "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozNDozOFrOGkK56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozNDozOFrOGkK56g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MDU4Ng==", "bodyText": "postition typo", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440580586", "createdAt": "2020-06-16T04:34:38Z", "author": {"login": "lognaturel"}, "path": "collect_app/src/main/java/org/odk/collect/android/audio/AudioPlayerViewModel.java", "diffHunk": "@@ -29,7 +30,7 @@\n     private final MutableLiveData<Exception> error = new MutableLiveData<>();\n     private final Map<String, MutableLiveData<Integer>> positions = new HashMap<>();\n \n-    private Boolean scheduledDurationUpdates = false;\n+    private Cancellable postitionUpdatesCancellable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec7ad716aee8e72390285b7dae1d3c60ad9873e3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDk1Mzc3OnYy", "diffSide": "RIGHT", "path": "docs/STATE.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MToxMlrOGkLAVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwODowNDo0M1rOGkP5Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjIyOA==", "bodyText": "Removing -> Replacing", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440582228", "createdAt": "2020-06-16T04:41:12Z", "author": {"login": "lognaturel"}, "path": "docs/STATE.md", "diffHunk": "@@ -44,5 +44,5 @@ and update this document as the code evolves.\n * Moving code to packages based on domain slices (`audio` or `formentry` for instance) to make it easier to work on isolated features and navigate code\n * Refactoring towards an OpenRosa abstraction (`OpenRosaAPIClient`) closer to its [documented API](https://docs.getodk.org/openrosa/) and takes care of all interactions with Aggregate, Central etc (currently some high level work interacts with `OpenRosaHttpInterface` directly)\n * `QuestionWiget` implementations are moving from defining their \"answer\" view programmatically to [implementing `onCreateAnswerView`](WIDGETS.md)\n-* Removing Rx and replacing with LiveData + AsyncTask. The `Scheduler` abstraction for async work to make it easier to switch in future (to Kotlin Coroutines for instance)\n+* Removing Rx (and other async work) with LiveData + Scheduler abstraction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5f119ad6f177c84f4c4ba1492ddf8b8d6ae885e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY2MjMwMg==", "bodyText": "Ach nice catch", "url": "https://github.com/getodk/collect/pull/3886#discussion_r440662302", "createdAt": "2020-06-16T08:04:43Z", "author": {"login": "seadowg"}, "path": "docs/STATE.md", "diffHunk": "@@ -44,5 +44,5 @@ and update this document as the code evolves.\n * Moving code to packages based on domain slices (`audio` or `formentry` for instance) to make it easier to work on isolated features and navigate code\n * Refactoring towards an OpenRosa abstraction (`OpenRosaAPIClient`) closer to its [documented API](https://docs.getodk.org/openrosa/) and takes care of all interactions with Aggregate, Central etc (currently some high level work interacts with `OpenRosaHttpInterface` directly)\n * `QuestionWiget` implementations are moving from defining their \"answer\" view programmatically to [implementing `onCreateAnswerView`](WIDGETS.md)\n-* Removing Rx and replacing with LiveData + AsyncTask. The `Scheduler` abstraction for async work to make it easier to switch in future (to Kotlin Coroutines for instance)\n+* Removing Rx (and other async work) with LiveData + Scheduler abstraction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjIyOA=="}, "originalCommit": {"oid": "e5f119ad6f177c84f4c4ba1492ddf8b8d6ae885e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3395, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}