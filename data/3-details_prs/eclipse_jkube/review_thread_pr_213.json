{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Mzc5NTMw", "number": 213, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowNzo1NFrOECAzDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowOTowM1rOECjUFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ1Njc2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowNzo1NFrOGeNRKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowNzo1NFrOGeNRKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNzg0OA==", "bodyText": "?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.parseInt(\"0\");\n          \n          \n            \n                    return 0;", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434327848", "createdAt": "2020-06-03T06:07:54Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java", "diffHunk": "@@ -98,7 +125,7 @@ private Integer getServicePort(ServiceBuilder serviceBuilder) {\n                 }\n             }\n         }\n-        return null;\n+        return Integer.parseInt(\"0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ1ODM1OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowODozM1rOGeNSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjowODozM1rOGeNSGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyODA4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p/>\n          \n          \n            \n                 * By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443\n          \n          \n            \n                 * \n          \n          \n            \n                 * <p> By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434328089", "createdAt": "2020-06-03T06:08:33Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java", "diffHunk": "@@ -119,23 +146,33 @@ public void visit(IngressBuilder builder) {\n         return answer.get();\n     }\n \n-    private boolean isExposedService(ServiceBuilder serviceBuilder) {\n-        Service service = serviceBuilder.build();\n-        return isExposedService(service);\n-    }\n-\n-    private boolean isExposedService(Service service) {\n-        ObjectMeta metadata = service.getMetadata();\n-        if (metadata != null) {\n-            Map<String, String> labels = metadata.getLabels();\n-            if (labels != null) {\n-                if (\"true\".equals(labels.get(\"expose\")) || \"true\".equals(labels.get(JKubeAnnotations.SERVICE_EXPOSE_URL.value()))) {\n+    /**\n+     * Should we try to create an external URL for the given service?\n+     * <p/>\n+     * By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ2MTg1OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxMDoxMVrOGeNUKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxMDoxMVrOGeNUKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyODYxOA==", "bodyText": "Remove this comment and create an issue instead", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434328618", "createdAt": "2020-06-03T06:10:11Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -104,6 +97,77 @@ private RoutePort createRoutePort(ServiceBuilder serviceBuilder) {\n         return routePort;\n     }\n \n+    private String prepareHostForRoute(String routeDomainPostfix, String name) {\n+        String ret = FileUtil.stripPostfix(name,\"-service\");\n+        ret = FileUtil.stripPostfix(ret,\".\");\n+        ret += \".\";\n+        ret += FileUtil.stripPrefix(routeDomainPostfix, \".\");\n+        return ret;\n+    }\n+\n+    private Set<Integer> getPorts(ServiceBuilder service) {\n+        Set<Integer> answer = new HashSet<>();\n+        if (service != null) {\n+            ServiceSpec spec = getOrCreateSpec(service);\n+            for (ServicePort port : spec.getPorts()) {\n+                answer.add(port.getPort());\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    public static ServiceSpec getOrCreateSpec(ServiceBuilder entity) {\n+        ServiceSpec spec = entity.buildSpec();\n+        if (spec == null) {\n+            spec = new ServiceSpec();\n+            entity.editOrNewSpec().endSpec();\n+        }\n+        return spec;\n+    }\n+\n+    private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n+        Set<Integer> ports = getPorts(service);\n+        if (ports.size() != 1) {\n+            log.info(\"Not generating route for service \" + id + \" as only single port services are supported. Has ports: \" +\n+                    ports);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+        ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n+\n+        if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n+                && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata, log)) {\n+            String name = serviceMetadata.getName();\n+            if (!hasRoute(listBuilder, name)) {\n+                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n+                } else {\n+                    routeDomainPostfix = \"\";\n+                }\n+\n+                RoutePort routePort = createRoutePort(serviceBuilder);\n+                if (routePort != null) {\n+                    // TODO one day lets support multiple ports on a Route when the model supports it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ2NjY4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxMjoyNVrOGeNXMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowNDowM1rOGfEtQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTM5Mw==", "bodyText": "What does this imply?", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434329393", "createdAt": "2020-06-03T06:12:25Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -104,6 +97,77 @@ private RoutePort createRoutePort(ServiceBuilder serviceBuilder) {\n         return routePort;\n     }\n \n+    private String prepareHostForRoute(String routeDomainPostfix, String name) {\n+        String ret = FileUtil.stripPostfix(name,\"-service\");\n+        ret = FileUtil.stripPostfix(ret,\".\");\n+        ret += \".\";\n+        ret += FileUtil.stripPrefix(routeDomainPostfix, \".\");\n+        return ret;\n+    }\n+\n+    private Set<Integer> getPorts(ServiceBuilder service) {\n+        Set<Integer> answer = new HashSet<>();\n+        if (service != null) {\n+            ServiceSpec spec = getOrCreateSpec(service);\n+            for (ServicePort port : spec.getPorts()) {\n+                answer.add(port.getPort());\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    public static ServiceSpec getOrCreateSpec(ServiceBuilder entity) {\n+        ServiceSpec spec = entity.buildSpec();\n+        if (spec == null) {\n+            spec = new ServiceSpec();\n+            entity.editOrNewSpec().endSpec();\n+        }\n+        return spec;\n+    }\n+\n+    private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n+        Set<Integer> ports = getPorts(service);\n+        if (ports.size() != 1) {\n+            log.info(\"Not generating route for service \" + id + \" as only single port services are supported. Has ports: \" +\n+                    ports);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+        ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n+\n+        if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n+                && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata, log)) {\n+            String name = serviceMetadata.getName();\n+            if (!hasRoute(listBuilder, name)) {\n+                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n+                } else {\n+                    routeDomainPostfix = \"\";\n+                }\n+\n+                RoutePort routePort = createRoutePort(serviceBuilder);\n+                if (routePort != null) {\n+                    // TODO one day lets support multiple ports on a Route when the model supports it\n+                    RouteBuilder routeBuilder = new RouteBuilder().\n+                            withMetadata(serviceMetadata).\n+                            withNewSpec().\n+                            withPort(routePort).\n+                            withNewTo().withKind(\"Service\").withName(name).endTo().\n+                            withHost(routeDomainPostfix.isEmpty() ? null : routeDomainPostfix).\n+                            endSpec();\n+\n+                    // removing `expose : true` label from metadata.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNjkxMA==", "bodyText": "I think it's about removing expose=true labels added by ExposeEnricher", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435206910", "createdAt": "2020-06-04T12:15:09Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -104,6 +97,77 @@ private RoutePort createRoutePort(ServiceBuilder serviceBuilder) {\n         return routePort;\n     }\n \n+    private String prepareHostForRoute(String routeDomainPostfix, String name) {\n+        String ret = FileUtil.stripPostfix(name,\"-service\");\n+        ret = FileUtil.stripPostfix(ret,\".\");\n+        ret += \".\";\n+        ret += FileUtil.stripPrefix(routeDomainPostfix, \".\");\n+        return ret;\n+    }\n+\n+    private Set<Integer> getPorts(ServiceBuilder service) {\n+        Set<Integer> answer = new HashSet<>();\n+        if (service != null) {\n+            ServiceSpec spec = getOrCreateSpec(service);\n+            for (ServicePort port : spec.getPorts()) {\n+                answer.add(port.getPort());\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    public static ServiceSpec getOrCreateSpec(ServiceBuilder entity) {\n+        ServiceSpec spec = entity.buildSpec();\n+        if (spec == null) {\n+            spec = new ServiceSpec();\n+            entity.editOrNewSpec().endSpec();\n+        }\n+        return spec;\n+    }\n+\n+    private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n+        Set<Integer> ports = getPorts(service);\n+        if (ports.size() != 1) {\n+            log.info(\"Not generating route for service \" + id + \" as only single port services are supported. Has ports: \" +\n+                    ports);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+        ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n+\n+        if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n+                && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata, log)) {\n+            String name = serviceMetadata.getName();\n+            if (!hasRoute(listBuilder, name)) {\n+                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n+                } else {\n+                    routeDomainPostfix = \"\";\n+                }\n+\n+                RoutePort routePort = createRoutePort(serviceBuilder);\n+                if (routePort != null) {\n+                    // TODO one day lets support multiple ports on a Route when the model supports it\n+                    RouteBuilder routeBuilder = new RouteBuilder().\n+                            withMetadata(serviceMetadata).\n+                            withNewSpec().\n+                            withPort(routePort).\n+                            withNewTo().withKind(\"Service\").withName(name).endTo().\n+                            withHost(routeDomainPostfix.isEmpty() ? null : routeDomainPostfix).\n+                            endSpec();\n+\n+                    // removing `expose : true` label from metadata.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTM5Mw=="}, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNjE2Mw==", "bodyText": "Yes, I see that. But what does that expose=true label > ExposeEnricher do?\nI think it something fabric8 only related (hence deprecated) but I may be wrong\nhttps://blog.fabric8.io/additional-kubernetes-controllers-from-fabric8-you-can-use-with-your-microservice-3126a2c4c132\nhttps://github.com/jenkins-x/exposecontroller", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435236163", "createdAt": "2020-06-04T13:04:03Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -104,6 +97,77 @@ private RoutePort createRoutePort(ServiceBuilder serviceBuilder) {\n         return routePort;\n     }\n \n+    private String prepareHostForRoute(String routeDomainPostfix, String name) {\n+        String ret = FileUtil.stripPostfix(name,\"-service\");\n+        ret = FileUtil.stripPostfix(ret,\".\");\n+        ret += \".\";\n+        ret += FileUtil.stripPrefix(routeDomainPostfix, \".\");\n+        return ret;\n+    }\n+\n+    private Set<Integer> getPorts(ServiceBuilder service) {\n+        Set<Integer> answer = new HashSet<>();\n+        if (service != null) {\n+            ServiceSpec spec = getOrCreateSpec(service);\n+            for (ServicePort port : spec.getPorts()) {\n+                answer.add(port.getPort());\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    public static ServiceSpec getOrCreateSpec(ServiceBuilder entity) {\n+        ServiceSpec spec = entity.buildSpec();\n+        if (spec == null) {\n+            spec = new ServiceSpec();\n+            entity.editOrNewSpec().endSpec();\n+        }\n+        return spec;\n+    }\n+\n+    private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n+        Set<Integer> ports = getPorts(service);\n+        if (ports.size() != 1) {\n+            log.info(\"Not generating route for service \" + id + \" as only single port services are supported. Has ports: \" +\n+                    ports);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+        ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n+\n+        if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n+                && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata, log)) {\n+            String name = serviceMetadata.getName();\n+            if (!hasRoute(listBuilder, name)) {\n+                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n+                } else {\n+                    routeDomainPostfix = \"\";\n+                }\n+\n+                RoutePort routePort = createRoutePort(serviceBuilder);\n+                if (routePort != null) {\n+                    // TODO one day lets support multiple ports on a Route when the model supports it\n+                    RouteBuilder routeBuilder = new RouteBuilder().\n+                            withMetadata(serviceMetadata).\n+                            withNewSpec().\n+                            withPort(routePort).\n+                            withNewTo().withKind(\"Service\").withName(name).endTo().\n+                            withHost(routeDomainPostfix.isEmpty() ? null : routeDomainPostfix).\n+                            endSpec();\n+\n+                    // removing `expose : true` label from metadata.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTM5Mw=="}, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ3MzMyOnYy", "diffSide": "LEFT", "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxNToxNFrOGeNbAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxNTozOVrOGfC75w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDM2OQ==", "bodyText": "Is this parameter still supported via properties?", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434330369", "createdAt": "2020-06-03T06:15:14Z", "author": {"login": "manusa"}, "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "diffHunk": "@@ -86,12 +60,6 @@\n     public static final String DEFAULT_KUBERNETES_MANIFEST = \"${basedir}/target/classes/META-INF/jkube/kubernetes.yml\";\n     public static final String DEFAULT_OPENSHIFT_MANIFEST = \"${basedir}/target/classes/META-INF/jkube/openshift.yml\";\n \n-    /**\n-     * The domain added to the service ID when creating OpenShift routes\n-     */\n-    @Parameter(property = \"jkube.domain\")\n-    protected String routeDomain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNzE0Mw==", "bodyText": "I have moved this to ResourceMojo since route/ingress generation is no longer part of apply goal", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435207143", "createdAt": "2020-06-04T12:15:39Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "diffHunk": "@@ -86,12 +60,6 @@\n     public static final String DEFAULT_KUBERNETES_MANIFEST = \"${basedir}/target/classes/META-INF/jkube/kubernetes.yml\";\n     public static final String DEFAULT_OPENSHIFT_MANIFEST = \"${basedir}/target/classes/META-INF/jkube/openshift.yml\";\n \n-    /**\n-     * The domain added to the service ID when creating OpenShift routes\n-     */\n-    @Parameter(property = \"jkube.domain\")\n-    protected String routeDomain;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDM2OQ=="}, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ3MzQ4OnYy", "diffSide": "LEFT", "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxNToyMFrOGeNbJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxNjoyMFrOGfC9Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDQwNg==", "bodyText": "Is this parameter still supported via properties?", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434330406", "createdAt": "2020-06-03T06:15:20Z", "author": {"login": "manusa"}, "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "diffHunk": "@@ -163,16 +131,6 @@\n     @Parameter(property = \"jkube.deploy.ignoreRunningOAuthClients\", defaultValue = \"true\")\n     private boolean ignoreRunningOAuthClients;\n \n-    /**\n-     * Should we create external Ingress/Routes for any LoadBalancer Services which don't already have them.\n-     * <p>\n-     * We now do not do this by default and defer this to the\n-     * <a href=\"https://github.com/jkubeio/exposecontroller/\">exposecontroller</a> to decide\n-     * if Ingress or Router is being used or whether we should use LoadBalancer or NodePorts for single node clusters\n-     */\n-    @Parameter(property = \"jkube.deploy.createExternalUrls\", defaultValue = \"false\")\n-    private boolean createExternalUrls;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNzQ5OA==", "bodyText": "I have moved this to resource mojo. This flag enables Ingress generation", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435207498", "createdAt": "2020-06-04T12:16:20Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "diffHunk": "@@ -163,16 +131,6 @@\n     @Parameter(property = \"jkube.deploy.ignoreRunningOAuthClients\", defaultValue = \"true\")\n     private boolean ignoreRunningOAuthClients;\n \n-    /**\n-     * Should we create external Ingress/Routes for any LoadBalancer Services which don't already have them.\n-     * <p>\n-     * We now do not do this by default and defer this to the\n-     * <a href=\"https://github.com/jkubeio/exposecontroller/\">exposecontroller</a> to decide\n-     * if Ingress or Router is being used or whether we should use LoadBalancer or NodePorts for single node clusters\n-     */\n-    @Parameter(property = \"jkube.deploy.createExternalUrls\", defaultValue = \"false\")\n-    private boolean createExternalUrls;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDQwNg=="}, "originalCommit": {"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTA2Mjg2OnYy", "diffSide": "RIGHT", "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/_faq.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1Njo1NFrOGfEabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjo1Njo1NFrOGfEabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzMTM0MQ==", "bodyText": "Please use Asciidoc variables that will be replaced upon documentation generation\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <artifactId>kubernetes-maven-plugin</artifactId>\n          \n          \n            \n                <version>${project.version}</version>\n          \n          \n            \n                <artifactId>{plugin}</artifactId>\n          \n          \n            \n                <version>{version}</version>", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435231341", "createdAt": "2020-06-04T12:56:54Z", "author": {"login": "manusa"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/_faq.adoc", "diffHunk": "@@ -121,3 +121,27 @@ spec:\n \n Where the above defines the `PersistentVolumeClaim` called `foo` which is then mounted into the container at `/whatnot`\n \n+=== How do I generate Ingress for my generated Service?\n+`Ingress` generation is supported by Eclipse JKube for `Service` objects of type `LoadBalancer`. In order to generate `Ingress` you need to enable `jkube.createExternalUrls` property to `true` and `jkube.domain` property to desired host suffix, it would be appended to your service name for host value. You can also also provide a host for it in XML config like this:\n+```\n+  <plugin>\n+    <groupId>org.eclipse.jkube</groupId>\n+    <artifactId>kubernetes-maven-plugin</artifactId>\n+    <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c7a34cd920094935829d4e050e04b1b4b3288"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTExMTg4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowOTowNFrOGfE5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzowOTowNFrOGfE5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzOTIzNQ==", "bodyText": "In general this is considered a bad idea and an anti-pattern (https://en.wikipedia.org/wiki/Constant_interface#:~:text=In%20general%2C%20collecting%20system%20constants,be%20considered%20an%20anti%2Dpattern.)\nIt's better to keep constants near their usage so that context doesn't get lost. Having an EXPOSE_LABEL constant with no other context makes it very hard to understand what its purpose is.", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435239235", "createdAt": "2020-06-04T13:09:04Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java", "diffHunk": "@@ -20,5 +20,6 @@\n public class Constants {\n     public static final String RESOURCE_SOURCE_URL_ANNOTATION = \"maven.jkube.io/source-url\";\n     public static final String RESOURCE_APP_CATALOG_ANNOTATION = \"maven.jkube.io/app-catalog\";\n+    public static final String EXPOSE_LABEL = \"expose\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19c800c40c019926c5154e1cd4617ca2599315f3"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1949, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}