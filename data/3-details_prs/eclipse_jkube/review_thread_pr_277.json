{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MTAyMTY0", "number": 277, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNTozOVrOELSrMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjo1NVrOELSsIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjc1NzYyOnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/api/src/test/java/org/eclipse/jkube/kit/enricher/api/model/KindAndNameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNTozOVrOGs0cOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNTozOVrOGs0cOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTcyMg==", "bodyText": "assertNotNull", "url": "https://github.com/eclipse/jkube/pull/277#discussion_r449649722", "createdAt": "2020-07-03T16:15:39Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/test/java/org/eclipse/jkube/kit/enricher/api/model/KindAndNameTest.java", "diffHunk": "@@ -44,18 +43,18 @@ public void equalsTest(){\n         KindAndName fifthKindAndName = new KindAndName(\"kindTest\",\"nameTest1\");\n \n         //if checking same object\n-        assertTrue(kindAndName.equals(kindAndName));\n+        assertEquals(kindAndName, kindAndName);\n \n         //if one null is passed\n-        assertFalse(kindAndName.equals(null));\n+        assertNotEquals(null, kindAndName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e55b96ec503056ffcfe00cafa9b6127d94644289"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjc1ODQ5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/api/src/test/java/org/eclipse/jkube/kit/enricher/api/util/GoTimeUtilTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjowNVrOGs0crw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOToxMTozN1rOGt12pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTgzOQ==", "bodyText": "Why are we boxing the integers?", "url": "https://github.com/eclipse/jkube/pull/277#discussion_r449649839", "createdAt": "2020-07-03T16:16:05Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/test/java/org/eclipse/jkube/kit/enricher/api/util/GoTimeUtilTest.java", "diffHunk": "@@ -16,23 +16,22 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n-import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n \n public class GoTimeUtilTest {\n \n     @Test\n     public void testConversion() {\n-        Assert.assertEquals(new Integer(23), GoTimeUtil.durationSeconds(\"23s\"));\n-        Assert.assertEquals(new Integer(0), GoTimeUtil.durationSeconds(\"0.5s\"));\n-        Assert.assertEquals(new Integer(0), GoTimeUtil.durationSeconds(\"3ms\"));\n-        Assert.assertEquals(new Integer(0), GoTimeUtil.durationSeconds(\"3ns\"));\n-        Assert.assertEquals(new Integer(1), GoTimeUtil.durationSeconds(\"1002ms\"));\n-        Assert.assertEquals(new Integer(123), GoTimeUtil.durationSeconds(\"2m3s\"));\n-        Assert.assertEquals(new Integer(3663), GoTimeUtil.durationSeconds(\"1h1m3s\"));\n-        Assert.assertEquals(new Integer(1810), GoTimeUtil.durationSeconds(\"0.5h0.1m4s\"));\n-        Assert.assertEquals(new Integer(-15), GoTimeUtil.durationSeconds(\"-15s\"));\n-        Assert.assertEquals(new Integer(30), GoTimeUtil.durationSeconds(\"2h-119.5m\"));\n+        Assert.assertEquals(Integer.valueOf(23), GoTimeUtil.durationSeconds(\"23s\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e55b96ec503056ffcfe00cafa9b6127d94644289"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMTQ0NA==", "bodyText": "I see now why the boxing/unboxing.\nWe need to get our code cleaner.\nPossible options:\n\nChange method so that it returns an Optional<Integer> (although you'll still get a minor Sonar warning in the test)\nUse assertj fluent assertions (already in pom.xml) Assertions.assertThat(GoTimeUtil.durationSeconds(\"23s\")).isEqualTo(23);/*...*/\nUse hamcrest assertions assertThat(GoTimeUtil.durationSeconds(\"23s\"), is(23));/*...*/", "url": "https://github.com/eclipse/jkube/pull/277#discussion_r450721444", "createdAt": "2020-07-07T09:11:37Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/test/java/org/eclipse/jkube/kit/enricher/api/util/GoTimeUtilTest.java", "diffHunk": "@@ -16,23 +16,22 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n-import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n \n public class GoTimeUtilTest {\n \n     @Test\n     public void testConversion() {\n-        Assert.assertEquals(new Integer(23), GoTimeUtil.durationSeconds(\"23s\"));\n-        Assert.assertEquals(new Integer(0), GoTimeUtil.durationSeconds(\"0.5s\"));\n-        Assert.assertEquals(new Integer(0), GoTimeUtil.durationSeconds(\"3ms\"));\n-        Assert.assertEquals(new Integer(0), GoTimeUtil.durationSeconds(\"3ns\"));\n-        Assert.assertEquals(new Integer(1), GoTimeUtil.durationSeconds(\"1002ms\"));\n-        Assert.assertEquals(new Integer(123), GoTimeUtil.durationSeconds(\"2m3s\"));\n-        Assert.assertEquals(new Integer(3663), GoTimeUtil.durationSeconds(\"1h1m3s\"));\n-        Assert.assertEquals(new Integer(1810), GoTimeUtil.durationSeconds(\"0.5h0.1m4s\"));\n-        Assert.assertEquals(new Integer(-15), GoTimeUtil.durationSeconds(\"-15s\"));\n-        Assert.assertEquals(new Integer(30), GoTimeUtil.durationSeconds(\"2h-119.5m\"));\n+        Assert.assertEquals(Integer.valueOf(23), GoTimeUtil.durationSeconds(\"23s\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY0OTgzOQ=="}, "originalCommit": {"oid": "e55b96ec503056ffcfe00cafa9b6127d94644289"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjc2MDAwOnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/DefaultServiceEnricherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjo1NVrOGs0dlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNjoxNjo1NVrOGs0dlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY1MDA3MA==", "bodyText": "assertTrue(list.getItems().isEmpty())", "url": "https://github.com/eclipse/jkube/pull/277#discussion_r449650070", "createdAt": "2020-07-03T16:16:55Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/DefaultServiceEnricherTest.java", "diffHunk": "@@ -160,15 +160,15 @@ public void headlessServicePositive() throws Exception {\n     }\n \n     @Test\n-    public void headlessServiceNegative() throws Exception {\n+    public void headlessServiceNegative() {\n         setupExpectations(false, \"headless\", \"false\");\n         DefaultServiceEnricher serviceEnricher = new DefaultServiceEnricher(context);\n         KubernetesListBuilder builder = new KubernetesListBuilder();\n         serviceEnricher.create(PlatformMode.kubernetes, builder);\n \n         // Validate that the generated resource contains\n         KubernetesList list = builder.build();\n-        assertEquals(list.getItems().size(),0);\n+        assertEquals(0, list.getItems().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e55b96ec503056ffcfe00cafa9b6127d94644289"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1989, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}