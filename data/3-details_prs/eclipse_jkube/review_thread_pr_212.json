{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjMyODc4", "number": 212, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyMDoxOVrOEA2jdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo1MjowMVrOEBQz6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzI5MjY4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyMDoxOVrOGcYxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyMDoxOVrOGcYxFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxOTA5NA==", "bodyText": "It would be better if the function was pure and instead of creating side effects in the input annotations variable you returned a new Map with the annotations. This map can then be appended (if applicable) to the existing variable using putAll.", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r432419094", "createdAt": "2020-05-29T11:20:19Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "diffHunk": "@@ -101,58 +81,80 @@ public void create(PlatformMode platformMode, KubernetesListBuilder builder) {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n+\n+    protected void addAnnotations(PlatformMode platformMode, Map<String, String> annotations, String gitRemoteUrl, String branch, String commitId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e85a88be2c79b06a4fc59f9dbdf19d3ef3baa407"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzU5MDQ3OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo0OTo1MFrOGdAcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo0OTo1MFrOGdAcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2OTEyMg==", "bodyText": "nit: this method is not adding any annotations but generating/inferring them. Method should be named something like getAnnotations generateAnnotations inferAnnotations or sth like that.", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r433069122", "createdAt": "2020-06-01T06:49:50Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "diffHunk": "@@ -101,58 +81,84 @@ public void create(PlatformMode platformMode, KubernetesListBuilder builder) {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n+\n+    protected static Map<String, String> addAnnotations(PlatformMode platformMode, String gitRemoteUrl, String branch, String commitId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzU5NDY2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo1MjowMVrOGdAeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo1MjowMVrOGdAeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2OTc2OQ==", "bodyText": "Some corner or edge cases should be tested: null method parameter values, etc.", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r433069769", "createdAt": "2020-06-01T06:52:01Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.enricher.generic;\n+\n+import org.eclipse.jkube.kit.config.resource.JKubeAnnotations;\n+import org.eclipse.jkube.kit.config.resource.OpenShiftAnnotations;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class GitEnricherTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1945, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}