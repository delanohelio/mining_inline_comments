{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMzQ0ODUx", "number": 298, "title": "doc: Updated documentation (consistency + updated property behavior)", "bodyText": "Description\nPR that completes #291 in order to fix #248.\ndoc: Updated documentation (consistency + updated property behavior)\nType of change\n\n\n Bug fix (non-breaking change which fixes an issue)\n Feature (non-breaking change which adds functionality)\n Breaking change (fix or feature that would cause existing functionality to change\n Chore (non-breaking change which doesn't affect codebase;\ntest, version modification, documentation, etc.)\n\nChecklist\n\n I have read the contributing guidelines\n I signed-off my commit with a user that has signed the Eclipse Contributor Agreement\n I Added CHANGELOG entry (already added in #248)\n I have implemented unit tests to cover my changes\n I have updated the documentation accordingly\n No new bugs, code smells, etc. in SonarCloud report\n I tested my code in Kubernetes\n I tested my code in OpenShift", "createdAt": "2020-07-20T11:21:43Z", "url": "https://github.com/eclipse/jkube/pull/298", "merged": true, "mergeCommit": {"oid": "488ec7652541376f83b97c51c57a9788936cee12"}, "closed": true, "closedAt": "2020-07-21T05:51:26Z", "author": {"login": "manusa"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2wCpyABqjM1NjUzNTU4NTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2_ZGvABqjM1NjkyMTY1NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74d9d652bfe12aa90895104458ab5d58b59caae7", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/eclipse/jkube/commit/74d9d652bfe12aa90895104458ab5d58b59caae7", "committedDate": "2020-07-20T11:19:11Z", "message": "doc: Updated documentation (consistency + updated property behavior)\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>"}, "afterCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/eclipse/jkube/commit/90b7b8562d1b56fecd1487e582efc8e4d00124ff", "committedDate": "2020-07-20T11:33:30Z", "message": "doc: Updated documentation (consistency + updated property behavior)\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzU2OTkw", "url": "https://github.com/eclipse/jkube/pull/298#pullrequestreview-451756990", "createdAt": "2020-07-20T16:13:33Z", "commit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "state": "APPROVED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxMzozM1rOG0Va8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjo0MDoxMVrOG0WcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMDA5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              autocompletion on most object and inline documentation for the available configuration elements. The provided\n          \n          \n            \n              autocompletion on most objects and inline documentation for the available configuration elements. The provided", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457530099", "createdAt": "2020-07-20T16:13:33Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/_introduction.adoc", "diffHunk": "@@ -60,16 +60,30 @@ The following table gives an overview of the different models\n | Model | Docker Images | Resource Descriptors\n \n | *Zero-Config*\n-| <<generators, Generators>> are used to create Docker image configurations. Generators can detect certain aspects of the build (e.g. whether Spring Boot is used) and then choose some default like the base image, which ports to expose and the startup command. They can be configured, but offer only a few options.\n-| Default <<enrichers, Enrichers>> will create a default _Service_ and _Deployment_ (_DeploymentConfig_ for OpenShift) when no other resource objects are provided. Depending on the image they can detect which port to expose in the service. As with Generators, Enrichers support a limited set of configuration options.\n+| <<generators, Generators>> are used to create Docker image configurations. Generators can detect certain aspects of\n+  the build (e.g. whether Spring Boot is used) and then choose some opinionated defaults like the base image, which\n+  ports to expose and the startup command. They can be configured, but offer only a few options.\n+| Default <<enrichers, Enrichers>> will create a default _Service_ and _Deployment_ (_DeploymentConfig_ for OpenShift)\n+  when no other resource objects are provided. Depending on the image they can detect which port to expose in the\n+  service. As with Generators, Enrichers support a limited set of configuration options.\n \n | *XML configuration*\n-| {plugin} inherits the XML based configuration for building images from the https://dmp.fabric8.io/#docker:build[docker-maven-plugin] and provides the same functionality. It supports an http://maven.apache.org/components/plugins/maven-assembly-plugin/assembly.html[assembly descriptor] for specifying the content of the Docker image.\n-| A subset of possible resource objects can be configured with a dedicated XML syntax. With a decent IDE you get autocompletion on most object and inline documentation for the available configuration elements. The provided configuration can be still enhanced by Enhancers which is useful for adding e.g. labels and annotations containing build or other information.\n+| {plugin} inherits the XML based configuration for building images from the\n+  https://dmp.fabric8.io/#docker:build[docker-maven-plugin] and provides the same functionality. It supports an\n+  http://maven.apache.org/components/plugins/maven-assembly-plugin/assembly.html[assembly descriptor] for specifying the\n+  content of the Docker image.\n+| A subset of possible resource objects can be configured with a dedicated XML syntax. With a decent IDE you get\n+  autocompletion on most object and inline documentation for the available configuration elements. The provided", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMTg0NA==", "bodyText": "by Enrichers which add labels and more. \n\nThis doesn't sound right to me. Could you please add some more details here?", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457531844", "createdAt": "2020-07-20T16:16:17Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/_introduction.adoc", "diffHunk": "@@ -60,16 +60,30 @@ The following table gives an overview of the different models\n | Model | Docker Images | Resource Descriptors\n \n | *Zero-Config*\n-| <<generators, Generators>> are used to create Docker image configurations. Generators can detect certain aspects of the build (e.g. whether Spring Boot is used) and then choose some default like the base image, which ports to expose and the startup command. They can be configured, but offer only a few options.\n-| Default <<enrichers, Enrichers>> will create a default _Service_ and _Deployment_ (_DeploymentConfig_ for OpenShift) when no other resource objects are provided. Depending on the image they can detect which port to expose in the service. As with Generators, Enrichers support a limited set of configuration options.\n+| <<generators, Generators>> are used to create Docker image configurations. Generators can detect certain aspects of\n+  the build (e.g. whether Spring Boot is used) and then choose some opinionated defaults like the base image, which\n+  ports to expose and the startup command. They can be configured, but offer only a few options.\n+| Default <<enrichers, Enrichers>> will create a default _Service_ and _Deployment_ (_DeploymentConfig_ for OpenShift)\n+  when no other resource objects are provided. Depending on the image they can detect which port to expose in the\n+  service. As with Generators, Enrichers support a limited set of configuration options.\n \n | *XML configuration*\n-| {plugin} inherits the XML based configuration for building images from the https://dmp.fabric8.io/#docker:build[docker-maven-plugin] and provides the same functionality. It supports an http://maven.apache.org/components/plugins/maven-assembly-plugin/assembly.html[assembly descriptor] for specifying the content of the Docker image.\n-| A subset of possible resource objects can be configured with a dedicated XML syntax. With a decent IDE you get autocompletion on most object and inline documentation for the available configuration elements. The provided configuration can be still enhanced by Enhancers which is useful for adding e.g. labels and annotations containing build or other information.\n+| {plugin} inherits the XML based configuration for building images from the\n+  https://dmp.fabric8.io/#docker:build[docker-maven-plugin] and provides the same functionality. It supports an\n+  http://maven.apache.org/components/plugins/maven-assembly-plugin/assembly.html[assembly descriptor] for specifying the\n+  content of the Docker image.\n+| A subset of possible resource objects can be configured with a dedicated XML syntax. With a decent IDE you get\n+  autocompletion on most object and inline documentation for the available configuration elements. The provided\n+  configuration can be still enhanced by Enhancers which is useful for adding e.g. labels and annotations containing\n+  build or other information.\n \n | *Resource Fragments* and *Dockerfiles*\n-| Similarly to the docker-maven-plugin, {plugin} supports <<external-dockerfile,external Dockerfiles>> too, which are referenced from the plugin configuration.\n-| Resource descriptors can be provided as external YAML files which specify a skeleton. This skeleton is then filled by Enrichers which add labels and more. Maven properties within these files are resolved to thier values. With this model you can use every Kubernetes / OpenShift resource object with all their flexibility, but still get the benefit of adding build information.\n+| Similarly to the docker-maven-plugin, {plugin} supports <<external-dockerfile,external Dockerfiles>> too, which are\n+  referenced from the plugin configuration.\n+| Resource descriptors can be provided as external YAML files which specify a skeleton. This skeleton is then filled in\n+  by Enrichers which add labels and more. Maven properties within these files are resolved to their values. With this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `jkube.io/git-url` is annotated as the url of your configured remote.\n          \n          \n            \n            `jkube.io/git-url` is annotated as the URL of your configured remote.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457534555", "createdAt": "2020-07-20T16:20:40Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_git.adoc", "diffHunk": "@@ -0,0 +1,19 @@\n+\n+[[jkube-git]]\n+==== jkube-git\n+\n+Enricher that adds info from .git directory as annotations.\n+\n+The git branch & latest commit on the branch are annotated as `jkube.io/git-branch` & `jkube.io/git-commit`.\n+`jkube.io/git-url` is annotated as the url of your configured remote.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDY4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Configures the git remote name, whose url you want to annotate as 'git-url'.\n          \n          \n            \n            | Configures the git remote name, whose URL you want to annotate as 'git-url'.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457534683", "createdAt": "2020-07-20T16:20:53Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_git.adoc", "diffHunk": "@@ -0,0 +1,19 @@\n+\n+[[jkube-git]]\n+==== jkube-git\n+\n+Enricher that adds info from .git directory as annotations.\n+\n+The git branch & latest commit on the branch are annotated as `jkube.io/git-branch` & `jkube.io/git-commit`.\n+`jkube.io/git-url` is annotated as the url of your configured remote.\n+\n+[cols=\"1,6,1\"]\n+|===\n+| Option | Description | Property\n+\n+| *gitRemote*\n+| Configures the git remote name, whose url you want to annotate as 'git-url'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzODM2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n          \n          \n            \n            The readiness probe lets Kubernetes detect when the application is ready, while the liveness probe allows Kubernetes to", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457538361", "createdAt": "2020-07-20T16:26:40Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzOTg2Mg==", "bodyText": "Did you mean \"These are supported:\"? or is it intentional?", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457539862", "createdAt": "2020-07-20T16:28:56Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MDMxMA==", "bodyText": "I think there should be an also here\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            be provided. The configurations can be overridden using project's properties.\n          \n          \n            \n            also be provided. The configurations can be overridden using project's properties.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457540310", "createdAt": "2020-07-20T16:29:37Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`\n+(open a socket), `exec` (execute a command).\n+\n+By default, this enricher uses the same configuration for liveness and readiness probes. But specific configurations can\n+be provided. The configurations can be overridden using project's properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MTY1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The same structured is used in project's properties:\n          \n          \n            \n            The same structure is used in project's properties:", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457541656", "createdAt": "2020-07-20T16:31:46Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`\n+(open a socket), `exec` (execute a command).\n+\n+By default, this enricher uses the same configuration for liveness and readiness probes. But specific configurations can\n+be provided. The configurations can be overridden using project's properties.\n+\n+===== Using the jkube-healthcheck-vertx enricher\n+\n+The enricher is automatically executed if your project uses the `vertx-maven-plugin` or depends on `io.vertx:vertx-core`.\n+However, by default, no health check will be added to your deployment unless configured explicitly.\n+\n+===== Minimal configuration\n+\n+The minimal configuration to add health checks is the following:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <path>/health</path>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+It configures the readiness and liveness health checks using HTTP requests on the port `8080` (default port) and on the\n+path `/health`. The defaults are:\n+\n+* port = `8080` (for HTTP)\n+* scheme = `HTTP`\n+* path = _none_ (disabled)\n+\n+the previous configuration can also be given use project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.path>/health</vertx.health.path>\n+    </properties>\n+----\n+\n+===== Configuring differently the readiness and liveness health checks\n+\n+You can provide two different configuration for the readiness and liveness checks:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+You can also use the `readiness` and `liveness` chunks in user properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+Shared (generic) configuration can be set outside of the specific configuration. For instance, to use the port 8081:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <port>8081</port>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+Or:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.port>8081</vertx.health.port>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+===== Configuration Structure\n+\n+The configuration is structured as follows\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <config>\n+        <jkube-healthcheck-vertx>\n+            <!-- Generic configuration, applied to both liveness and readiness -->\n+            <path>/both</path>\n+            <liveness>\n+                <!-- Specific configuration for the liveness probe -->\n+                <port-name>ping</port-name>\n+            </liveness>\n+            <readiness>\n+                <!-- Specific configuration for the readiness probe -->\n+                <port-name>ready</port-name>\n+            </readiness>\n+        </jkube-healthcheck-vertx>\n+    </config>\n+----\n+\n+The same structured is used in project's properties:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MjIyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can configure the different aspect of the probes. These attributes can be configured for both the readiness and\n          \n          \n            \n            You can configure the different aspects of the probes. These attributes can be configured for both the readiness and", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457542228", "createdAt": "2020-07-20T16:32:40Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`\n+(open a socket), `exec` (execute a command).\n+\n+By default, this enricher uses the same configuration for liveness and readiness probes. But specific configurations can\n+be provided. The configurations can be overridden using project's properties.\n+\n+===== Using the jkube-healthcheck-vertx enricher\n+\n+The enricher is automatically executed if your project uses the `vertx-maven-plugin` or depends on `io.vertx:vertx-core`.\n+However, by default, no health check will be added to your deployment unless configured explicitly.\n+\n+===== Minimal configuration\n+\n+The minimal configuration to add health checks is the following:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <path>/health</path>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+It configures the readiness and liveness health checks using HTTP requests on the port `8080` (default port) and on the\n+path `/health`. The defaults are:\n+\n+* port = `8080` (for HTTP)\n+* scheme = `HTTP`\n+* path = _none_ (disabled)\n+\n+the previous configuration can also be given use project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.path>/health</vertx.health.path>\n+    </properties>\n+----\n+\n+===== Configuring differently the readiness and liveness health checks\n+\n+You can provide two different configuration for the readiness and liveness checks:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+You can also use the `readiness` and `liveness` chunks in user properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+Shared (generic) configuration can be set outside of the specific configuration. For instance, to use the port 8081:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <port>8081</port>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+Or:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.port>8081</vertx.health.port>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+===== Configuration Structure\n+\n+The configuration is structured as follows\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <config>\n+        <jkube-healthcheck-vertx>\n+            <!-- Generic configuration, applied to both liveness and readiness -->\n+            <path>/both</path>\n+            <liveness>\n+                <!-- Specific configuration for the liveness probe -->\n+                <port-name>ping</port-name>\n+            </liveness>\n+            <readiness>\n+                <!-- Specific configuration for the readiness probe -->\n+                <port-name>ready</port-name>\n+            </readiness>\n+        </jkube-healthcheck-vertx>\n+    </config>\n+----\n+\n+The same structured is used in project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+  <properties>\n+    <!-- Generic configuration given as vertx.health.$attribute -->\n+    <vertx.health.path>/both</vertx.health.path>\n+    <!-- Specific liveness configuration given as vertx.health.liveness.$attribute -->\n+    <vertx.health.liveness.port-name>ping</vertx.health.liveness.port-name>\n+    <!-- Specific readiness configuration given as vertx.health.readiness.$attribute -->\n+    <vertx.health.readiness.port-name>ready</vertx.health.readiness.port-name>\n+  </properties>\n+----\n+\n+**Important**: Project's plugin configuration override the project's properties.\n+The overriding rules are:\n+_specific configuration_ > _specific properties_ > _generic configuration_ > _generic properties_.\n+\n+===== Probe configuration\n+\n+You can configure the different aspect of the probes. These attributes can be configured for both the readiness and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MzM0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Port number to access on the container. A 0 or negative number disable the check.\n          \n          \n            \n            | Port number to access the container. A 0 or negative number disables the check.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457543344", "createdAt": "2020-07-20T16:34:31Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`\n+(open a socket), `exec` (execute a command).\n+\n+By default, this enricher uses the same configuration for liveness and readiness probes. But specific configurations can\n+be provided. The configurations can be overridden using project's properties.\n+\n+===== Using the jkube-healthcheck-vertx enricher\n+\n+The enricher is automatically executed if your project uses the `vertx-maven-plugin` or depends on `io.vertx:vertx-core`.\n+However, by default, no health check will be added to your deployment unless configured explicitly.\n+\n+===== Minimal configuration\n+\n+The minimal configuration to add health checks is the following:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <path>/health</path>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+It configures the readiness and liveness health checks using HTTP requests on the port `8080` (default port) and on the\n+path `/health`. The defaults are:\n+\n+* port = `8080` (for HTTP)\n+* scheme = `HTTP`\n+* path = _none_ (disabled)\n+\n+the previous configuration can also be given use project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.path>/health</vertx.health.path>\n+    </properties>\n+----\n+\n+===== Configuring differently the readiness and liveness health checks\n+\n+You can provide two different configuration for the readiness and liveness checks:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+You can also use the `readiness` and `liveness` chunks in user properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+Shared (generic) configuration can be set outside of the specific configuration. For instance, to use the port 8081:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <port>8081</port>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+Or:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.port>8081</vertx.health.port>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+===== Configuration Structure\n+\n+The configuration is structured as follows\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <config>\n+        <jkube-healthcheck-vertx>\n+            <!-- Generic configuration, applied to both liveness and readiness -->\n+            <path>/both</path>\n+            <liveness>\n+                <!-- Specific configuration for the liveness probe -->\n+                <port-name>ping</port-name>\n+            </liveness>\n+            <readiness>\n+                <!-- Specific configuration for the readiness probe -->\n+                <port-name>ready</port-name>\n+            </readiness>\n+        </jkube-healthcheck-vertx>\n+    </config>\n+----\n+\n+The same structured is used in project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+  <properties>\n+    <!-- Generic configuration given as vertx.health.$attribute -->\n+    <vertx.health.path>/both</vertx.health.path>\n+    <!-- Specific liveness configuration given as vertx.health.liveness.$attribute -->\n+    <vertx.health.liveness.port-name>ping</vertx.health.liveness.port-name>\n+    <!-- Specific readiness configuration given as vertx.health.readiness.$attribute -->\n+    <vertx.health.readiness.port-name>ready</vertx.health.readiness.port-name>\n+  </properties>\n+----\n+\n+**Important**: Project's plugin configuration override the project's properties.\n+The overriding rules are:\n+_specific configuration_ > _specific properties_ > _generic configuration_ > _generic properties_.\n+\n+===== Probe configuration\n+\n+You can configure the different aspect of the probes. These attributes can be configured for both the readiness and\n+liveness probes or be specific to one.\n+\n+\n+.Vert.x HealthCheck Enricher probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+|*type*\n+|The probe type among `http` (default), `tcp` and `exec`.\n+\n+ Defaults to `http`.\n+| `vertx.health.type`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.type`\n+\n+|*initial-delay*\n+|Number of seconds after the container has started before probes are initiated.\n+| `vertx.health.initial-delay`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.initial-delay`\n+\n+\n+|*period*\n+|How often (in seconds) to perform the probe.\n+| `vertx.health.period`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.period`\n+\n+\n+|*timeout*\n+|Number of seconds after which the probe times out.\n+| `vertx.health.timeout`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.timeout`\n+\n+\n+|*success-threshold*\n+|Minimum consecutive successes for the probe to be considered successful after having failed.\n+| `vertx.health.success-threshold`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.success-threshold`\n+\n+\n+|*failure-threshold*\n+|Minimum consecutive failures for the probe to be considered failed after having succeeded.\n+| `vertx.health.failure-threshold`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.failure-threshold`\n+\n+|===\n+\n+\n+More details about probes are available on https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/.\n+\n+===== HTTP specific probe configuration\n+\n+When using HTTP `GET` requests to determine readiness or liveness, several aspects can be configured. HTTP probes are used by default. To be more specific set the `type` attribute to `http`.\n+\n+.Vert.x HealthCheck Enricher HTTP probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+| *scheme*\n+| Scheme to use for connecting to the host.\n+\n+  Defaults to `HTTP`.\n+\n+| `vertx.health.scheme`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.scheme`\n+\n+| *path*\n+| Path to access on the HTTP server. An empty path disable the check.\n+| `vertx.health.path`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.path`\n+\n+| *headers*\n+| Custom headers to set in the request. HTTP allows repeated headers. It cannot be configured using project's properties.\n+  An example is available below.\n+| `vertx.health.headers`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.headers`\n+\n+\n+| *port*\n+| Port number to access on the container. A 0 or negative number disable the check.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0MzY3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Name of the port to access on the container. If neither the `port` or the `port-name` is set, the check is disabled.\n          \n          \n            \n            | Name of the port to access the container. If neither the `port` nor the `port-name` is set, the check is disabled.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457543670", "createdAt": "2020-07-20T16:35:02Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`\n+(open a socket), `exec` (execute a command).\n+\n+By default, this enricher uses the same configuration for liveness and readiness probes. But specific configurations can\n+be provided. The configurations can be overridden using project's properties.\n+\n+===== Using the jkube-healthcheck-vertx enricher\n+\n+The enricher is automatically executed if your project uses the `vertx-maven-plugin` or depends on `io.vertx:vertx-core`.\n+However, by default, no health check will be added to your deployment unless configured explicitly.\n+\n+===== Minimal configuration\n+\n+The minimal configuration to add health checks is the following:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <path>/health</path>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+It configures the readiness and liveness health checks using HTTP requests on the port `8080` (default port) and on the\n+path `/health`. The defaults are:\n+\n+* port = `8080` (for HTTP)\n+* scheme = `HTTP`\n+* path = _none_ (disabled)\n+\n+the previous configuration can also be given use project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.path>/health</vertx.health.path>\n+    </properties>\n+----\n+\n+===== Configuring differently the readiness and liveness health checks\n+\n+You can provide two different configuration for the readiness and liveness checks:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+You can also use the `readiness` and `liveness` chunks in user properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+Shared (generic) configuration can be set outside of the specific configuration. For instance, to use the port 8081:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <port>8081</port>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+Or:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.port>8081</vertx.health.port>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+===== Configuration Structure\n+\n+The configuration is structured as follows\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <config>\n+        <jkube-healthcheck-vertx>\n+            <!-- Generic configuration, applied to both liveness and readiness -->\n+            <path>/both</path>\n+            <liveness>\n+                <!-- Specific configuration for the liveness probe -->\n+                <port-name>ping</port-name>\n+            </liveness>\n+            <readiness>\n+                <!-- Specific configuration for the readiness probe -->\n+                <port-name>ready</port-name>\n+            </readiness>\n+        </jkube-healthcheck-vertx>\n+    </config>\n+----\n+\n+The same structured is used in project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+  <properties>\n+    <!-- Generic configuration given as vertx.health.$attribute -->\n+    <vertx.health.path>/both</vertx.health.path>\n+    <!-- Specific liveness configuration given as vertx.health.liveness.$attribute -->\n+    <vertx.health.liveness.port-name>ping</vertx.health.liveness.port-name>\n+    <!-- Specific readiness configuration given as vertx.health.readiness.$attribute -->\n+    <vertx.health.readiness.port-name>ready</vertx.health.readiness.port-name>\n+  </properties>\n+----\n+\n+**Important**: Project's plugin configuration override the project's properties.\n+The overriding rules are:\n+_specific configuration_ > _specific properties_ > _generic configuration_ > _generic properties_.\n+\n+===== Probe configuration\n+\n+You can configure the different aspect of the probes. These attributes can be configured for both the readiness and\n+liveness probes or be specific to one.\n+\n+\n+.Vert.x HealthCheck Enricher probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+|*type*\n+|The probe type among `http` (default), `tcp` and `exec`.\n+\n+ Defaults to `http`.\n+| `vertx.health.type`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.type`\n+\n+|*initial-delay*\n+|Number of seconds after the container has started before probes are initiated.\n+| `vertx.health.initial-delay`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.initial-delay`\n+\n+\n+|*period*\n+|How often (in seconds) to perform the probe.\n+| `vertx.health.period`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.period`\n+\n+\n+|*timeout*\n+|Number of seconds after which the probe times out.\n+| `vertx.health.timeout`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.timeout`\n+\n+\n+|*success-threshold*\n+|Minimum consecutive successes for the probe to be considered successful after having failed.\n+| `vertx.health.success-threshold`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.success-threshold`\n+\n+\n+|*failure-threshold*\n+|Minimum consecutive failures for the probe to be considered failed after having succeeded.\n+| `vertx.health.failure-threshold`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.failure-threshold`\n+\n+|===\n+\n+\n+More details about probes are available on https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/.\n+\n+===== HTTP specific probe configuration\n+\n+When using HTTP `GET` requests to determine readiness or liveness, several aspects can be configured. HTTP probes are used by default. To be more specific set the `type` attribute to `http`.\n+\n+.Vert.x HealthCheck Enricher HTTP probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+| *scheme*\n+| Scheme to use for connecting to the host.\n+\n+  Defaults to `HTTP`.\n+\n+| `vertx.health.scheme`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.scheme`\n+\n+| *path*\n+| Path to access on the HTTP server. An empty path disable the check.\n+| `vertx.health.path`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.path`\n+\n+| *headers*\n+| Custom headers to set in the request. HTTP allows repeated headers. It cannot be configured using project's properties.\n+  An example is available below.\n+| `vertx.health.headers`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.headers`\n+\n+\n+| *port*\n+| Port number to access on the container. A 0 or negative number disable the check.\n+\n+  Defaults to `8080`.\n+| `vertx.health.port`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.port`\n+\n+| *port-name*\n+| Name of the port to access on the container. If neither the `port` or the `port-name` is set, the check is disabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NDA3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Port number to access on the container. A 0 or negative number disable the check.\n          \n          \n            \n            | Port number to access the container. A 0 or negative number disables the check.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457544071", "createdAt": "2020-07-20T16:35:42Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_healthcheck_vertx.adoc", "diffHunk": "@@ -0,0 +1,422 @@\n+\n+[[jkube-healthcheck-vertx]]\n+==== jkube-healthcheck-vertx\n+\n+This enricher adds kubernetes readiness and liveness probes with Eclipse Vert.x applications.\n+The readiness probe lets Kubernetes detects when the application is ready, while the liveness probe allows Kubernetes to\n+verify that the application is still alive.\n+\n+This enricher allows configuring the readiness and liveness probes. Are supported: `http` (emit HTTP requests), `tcp`\n+(open a socket), `exec` (execute a command).\n+\n+By default, this enricher uses the same configuration for liveness and readiness probes. But specific configurations can\n+be provided. The configurations can be overridden using project's properties.\n+\n+===== Using the jkube-healthcheck-vertx enricher\n+\n+The enricher is automatically executed if your project uses the `vertx-maven-plugin` or depends on `io.vertx:vertx-core`.\n+However, by default, no health check will be added to your deployment unless configured explicitly.\n+\n+===== Minimal configuration\n+\n+The minimal configuration to add health checks is the following:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <path>/health</path>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+It configures the readiness and liveness health checks using HTTP requests on the port `8080` (default port) and on the\n+path `/health`. The defaults are:\n+\n+* port = `8080` (for HTTP)\n+* scheme = `HTTP`\n+* path = _none_ (disabled)\n+\n+the previous configuration can also be given use project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.path>/health</vertx.health.path>\n+    </properties>\n+----\n+\n+===== Configuring differently the readiness and liveness health checks\n+\n+You can provide two different configuration for the readiness and liveness checks:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+You can also use the `readiness` and `liveness` chunks in user properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+Shared (generic) configuration can be set outside of the specific configuration. For instance, to use the port 8081:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+      <plugin>\n+        <groupId>org.eclipse.jkube</groupId>\n+        <artifactId>{plugin}</artifactId>\n+        <version>{version}</version>\n+        <executions>\n+          <execution>\n+            <id>jkube</id>\n+            <goals>\n+              <goal>resource</goal>\n+              <goal>helm</goal>\n+              <goal>build</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <enricher>\n+            <config>\n+              <jkube-healthcheck-vertx>\n+                  <port>8081</port>\n+                  <readiness>\n+                    <path>/ready</path>\n+                  </readiness>\n+                  <liveness>\n+                    <path>/health</path>\n+                  </liveness>\n+              </jkube-healthcheck-vertx>\n+            </config>\n+          </enricher>\n+        </configuration>\n+      </plugin>\n+----\n+\n+Or:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <properties>\n+        <vertx.health.port>8081</vertx.health.port>\n+        <vertx.health.readiness.path>/ready</vertx.health.readiness.path>\n+        <vertx.health.liveness.path>/ready</vertx.health.liveness.path>\n+    </properties>\n+----\n+\n+===== Configuration Structure\n+\n+The configuration is structured as follows\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <config>\n+        <jkube-healthcheck-vertx>\n+            <!-- Generic configuration, applied to both liveness and readiness -->\n+            <path>/both</path>\n+            <liveness>\n+                <!-- Specific configuration for the liveness probe -->\n+                <port-name>ping</port-name>\n+            </liveness>\n+            <readiness>\n+                <!-- Specific configuration for the readiness probe -->\n+                <port-name>ready</port-name>\n+            </readiness>\n+        </jkube-healthcheck-vertx>\n+    </config>\n+----\n+\n+The same structured is used in project's properties:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+  <properties>\n+    <!-- Generic configuration given as vertx.health.$attribute -->\n+    <vertx.health.path>/both</vertx.health.path>\n+    <!-- Specific liveness configuration given as vertx.health.liveness.$attribute -->\n+    <vertx.health.liveness.port-name>ping</vertx.health.liveness.port-name>\n+    <!-- Specific readiness configuration given as vertx.health.readiness.$attribute -->\n+    <vertx.health.readiness.port-name>ready</vertx.health.readiness.port-name>\n+  </properties>\n+----\n+\n+**Important**: Project's plugin configuration override the project's properties.\n+The overriding rules are:\n+_specific configuration_ > _specific properties_ > _generic configuration_ > _generic properties_.\n+\n+===== Probe configuration\n+\n+You can configure the different aspect of the probes. These attributes can be configured for both the readiness and\n+liveness probes or be specific to one.\n+\n+\n+.Vert.x HealthCheck Enricher probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+|*type*\n+|The probe type among `http` (default), `tcp` and `exec`.\n+\n+ Defaults to `http`.\n+| `vertx.health.type`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.type`\n+\n+|*initial-delay*\n+|Number of seconds after the container has started before probes are initiated.\n+| `vertx.health.initial-delay`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.initial-delay`\n+\n+\n+|*period*\n+|How often (in seconds) to perform the probe.\n+| `vertx.health.period`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.period`\n+\n+\n+|*timeout*\n+|Number of seconds after which the probe times out.\n+| `vertx.health.timeout`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.timeout`\n+\n+\n+|*success-threshold*\n+|Minimum consecutive successes for the probe to be considered successful after having failed.\n+| `vertx.health.success-threshold`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.success-threshold`\n+\n+\n+|*failure-threshold*\n+|Minimum consecutive failures for the probe to be considered failed after having succeeded.\n+| `vertx.health.failure-threshold`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.failure-threshold`\n+\n+|===\n+\n+\n+More details about probes are available on https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/.\n+\n+===== HTTP specific probe configuration\n+\n+When using HTTP `GET` requests to determine readiness or liveness, several aspects can be configured. HTTP probes are used by default. To be more specific set the `type` attribute to `http`.\n+\n+.Vert.x HealthCheck Enricher HTTP probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+| *scheme*\n+| Scheme to use for connecting to the host.\n+\n+  Defaults to `HTTP`.\n+\n+| `vertx.health.scheme`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.scheme`\n+\n+| *path*\n+| Path to access on the HTTP server. An empty path disable the check.\n+| `vertx.health.path`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.path`\n+\n+| *headers*\n+| Custom headers to set in the request. HTTP allows repeated headers. It cannot be configured using project's properties.\n+  An example is available below.\n+| `vertx.health.headers`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.headers`\n+\n+\n+| *port*\n+| Port number to access on the container. A 0 or negative number disable the check.\n+\n+  Defaults to `8080`.\n+| `vertx.health.port`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.port`\n+\n+| *port-name*\n+| Name of the port to access on the container. If neither the `port` or the `port-name` is set, the check is disabled.\n+  If both are set the configuration is considered invalid.\n+| `vertx.health.port-name`\n+\n+  `jkube.enricher.jkube-healthcheck-vertx.port-name`\n+\n+|===\n+\n+Here is an example of HTTP probe configuration:\n+\n+[source,xml,indent=0,subs=\"verbatim,quotes,attributes\"]\n+----\n+    <config>\n+        <jkube-healthcheck-vertx>\n+            <initialDelay>3</initialDelay>\n+            <period>3</period>\n+            <liveness>\n+                <port>8081</port>\n+                <path>/ping</path>\n+                <scheme>HTTPS</scheme>\n+                <headers>\n+                    <X-Custom-Header>Awesome</X-Custom-Header>\n+                </headers>\n+            </liveness>\n+            <readiness>\n+                <!-- disable the readiness probe -->\n+                <port>-1</port>\n+            </readiness>\n+        </jkube-healthcheck-vertx>\n+    </config>\n+----\n+\n+===== TCP specific probe configuration\n+\n+You can also configure the probes to just open a socket on a specific port. The `type` attribute must be set to `tcp`.\n+\n+.Vert.x HealthCheck Enricher TCP probe configuration\n+[cols=\"1,5,2\"]\n+|===\n+| Element | Description | Property\n+\n+| *port*\n+| Port number to access on the container. A 0 or negative number disable the check.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjQ3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These metadata will be added only if the https://maven.apache.org/pom.html#Issue_Management[Issue Management] information in available in maven `pom.xml` of the project.\n          \n          \n            \n            These metadata will be added only if the https://maven.apache.org/pom.html#Issue_Management[Issue Management] information is available in maven `pom.xml` of the project.", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457546470", "createdAt": "2020-07-20T16:39:36Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_maven_issue_mgmt.adoc", "diffHunk": "@@ -0,0 +1,46 @@\n+\n+[[jkube-maven-issue-mgmt-enricher]]\n+==== jkube-maven-issue-mgmt\n+\n+This enricher adds additional https://maven.apache.org/pom.html#Issue_Management[Issue Management] related metadata to all objects supporting annotations.\n+These metadata will be added only if the https://maven.apache.org/pom.html#Issue_Management[Issue Management] information in available in maven `pom.xml` of the project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0Njg0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The following annotations will be added to the objects that supports annotations,\n          \n          \n            \n            The following annotations will be added to the objects that support annotations,", "url": "https://github.com/eclipse/jkube/pull/298#discussion_r457546841", "createdAt": "2020-07-20T16:40:11Z", "author": {"login": "rohanKanojia"}, "path": "kubernetes-maven-plugin/doc/src/main/asciidoc/inc/enricher/_jkube_maven_issue_mgmt.adoc", "diffHunk": "@@ -0,0 +1,46 @@\n+\n+[[jkube-maven-issue-mgmt-enricher]]\n+==== jkube-maven-issue-mgmt\n+\n+This enricher adds additional https://maven.apache.org/pom.html#Issue_Management[Issue Management] related metadata to all objects supporting annotations.\n+These metadata will be added only if the https://maven.apache.org/pom.html#Issue_Management[Issue Management] information in available in maven `pom.xml` of the project.\n+\n+The following annotations will be added to the objects that supports annotations,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTcyNzYw", "url": "https://github.com/eclipse/jkube/pull/298#pullrequestreview-451972760", "createdAt": "2020-07-20T21:29:01Z", "commit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79272aff32354d019ea48ffda46987f384cf694e", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/eclipse/jkube/commit/79272aff32354d019ea48ffda46987f384cf694e", "committedDate": "2020-07-21T05:13:45Z", "message": "fix: RouteEnricher reads properties consistently (as rest of enrichers)\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "009fd193d556a383cece7f8aa5f7da45adaeb434", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/eclipse/jkube/commit/009fd193d556a383cece7f8aa5f7da45adaeb434", "committedDate": "2020-07-21T05:28:53Z", "message": "doc: Updated documentation (consistency + updated property behavior)\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90b7b8562d1b56fecd1487e582efc8e4d00124ff", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/eclipse/jkube/commit/90b7b8562d1b56fecd1487e582efc8e4d00124ff", "committedDate": "2020-07-20T11:33:30Z", "message": "doc: Updated documentation (consistency + updated property behavior)\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>"}, "afterCommit": {"oid": "009fd193d556a383cece7f8aa5f7da45adaeb434", "author": {"user": {"login": "manusa", "name": "Marc Nuri"}}, "url": "https://github.com/eclipse/jkube/commit/009fd193d556a383cece7f8aa5f7da45adaeb434", "committedDate": "2020-07-21T05:28:53Z", "message": "doc: Updated documentation (consistency + updated property behavior)\n\nSigned-off-by: Marc Nuri <marc@marcnuri.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 306, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}