{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTE4MzUw", "number": 279, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDoxM1rOEMVzqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMDo0MVrOEMV5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1NjU5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDoxM1rOGuZIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1Njo1MFrOGvnYSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n          \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(HttpURLConnection.HTTP_NOT_FOUND, \"\"))", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299463", "createdAt": "2020-07-08T05:54:13Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTQ1MQ==", "bodyText": "Updated", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581451", "createdAt": "2020-07-10T01:56:50Z", "author": {"login": "mtrejo"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTQ2Mw=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1NzQ0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NDozNVrOGuZJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1NzozMFrOGvnY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"new-route\").andReturn(201, route))\n          \n          \n            \n                            .andReply(collector.record(\"new-route\").andReturn(HttpURLConnection.HTTP_CREATED, route))", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299584", "createdAt": "2020-07-08T05:54:35Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTU5Mw==", "bodyText": "Updated", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581593", "createdAt": "2020-07-10T01:57:30Z", "author": {"login": "mtrejo"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTU4NA=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1ODY0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NTowNlrOGuZJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1ODowNFrOGvnZWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTc2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n          \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(HttpURLConnection.HTTP_NOT_FOUND, \"\"))", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299762", "createdAt": "2020-07-08T05:55:06Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))\n+                .once();\n+\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsRecordedInOrder(\"get-route\", \"new-route\");\n+    }\n+\n+    @Test\n+    public void testCreateRouteInServiceOnlyMode() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTcyMg==", "bodyText": "Updated", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581722", "createdAt": "2020-07-10T01:58:04Z", "author": {"login": "mtrejo"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))\n+                .once();\n+\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsRecordedInOrder(\"get-route\", \"new-route\");\n+    }\n+\n+    @Test\n+    public void testCreateRouteInServiceOnlyMode() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTc2Mg=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc1OTM5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NToyMVrOGuZKGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1ODoxNVrOGvnZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTg2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n          \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(HttpURLConnection.HTTP_NOT_FOUND, \"\"))", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299865", "createdAt": "2020-07-08T05:55:21Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))\n+                .once();\n+\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsRecordedInOrder(\"get-route\", \"new-route\");\n+    }\n+\n+    @Test\n+    public void testCreateRouteInServiceOnlyMode() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+\n+        applyService.setServicesOnlyMode(true);\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsNotRecorded(\"get-route\");\n+        assertEquals(1, mockServer.getRequestCount());\n+    }\n+\n+    @Test\n+    public void testCreateRouteNotAllowed() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTc1Nw==", "bodyText": "Updated", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581757", "createdAt": "2020-07-10T01:58:15Z", "author": {"login": "mtrejo"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))\n+                .once();\n+\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsRecordedInOrder(\"get-route\", \"new-route\");\n+    }\n+\n+    @Test\n+    public void testCreateRouteInServiceOnlyMode() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+\n+        applyService.setServicesOnlyMode(true);\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsNotRecorded(\"get-route\");\n+        assertEquals(1, mockServer.getRequestCount());\n+    }\n+\n+    @Test\n+    public void testCreateRouteNotAllowed() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTg2NQ=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc2MTM4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNTo1NjoxOFrOGuZLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1ODozOVrOGvnZ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDE1NA==", "bodyText": "Could you please add license header here?", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451300154", "createdAt": "2020-07-08T05:56:18Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTg0NQ==", "bodyText": "Updated", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581845", "createdAt": "2020-07-10T01:58:39Z", "author": {"login": "mtrejo"}, "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDE1NA=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzc3MDkyOnYy", "diffSide": "RIGHT", "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjowMDo0MVrOGuZQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwMTo1OTo1MlrOGvnbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU2NA==", "bodyText": "I'm not sure KitLogger supports format specifiers", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451301564", "createdAt": "2020-07-08T06:00:41Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java", "diffHunk": "@@ -939,6 +926,17 @@ public void applyService(Service service, String sourceName) throws Exception {\n         }\n     }\n \n+    private <T extends HasMetadata> void doPatchEntity(T oldEntity, T newEntity, String namespace, String sourceName) {\n+        String kind = newEntity.getKind();\n+        log.info(\"Updating {} from {}\", kind, sourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzOTU1MA==", "bodyText": "It does, but using String Formatter placeholders, use following log.info(\"Updating %s from %s\", kind, sourceName);", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451339550", "createdAt": "2020-07-08T07:31:09Z", "author": {"login": "manusa"}, "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java", "diffHunk": "@@ -939,6 +926,17 @@ public void applyService(Service service, String sourceName) throws Exception {\n         }\n     }\n \n+    private <T extends HasMetadata> void doPatchEntity(T oldEntity, T newEntity, String namespace, String sourceName) {\n+        String kind = newEntity.getKind();\n+        log.info(\"Updating {} from {}\", kind, sourceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU2NA=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MjIyMA==", "bodyText": "Thanks for your suggestions, I implemented them all.", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452582220", "createdAt": "2020-07-10T01:59:52Z", "author": {"login": "mtrejo"}, "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java", "diffHunk": "@@ -939,6 +926,17 @@ public void applyService(Service service, String sourceName) throws Exception {\n         }\n     }\n \n+    private <T extends HasMetadata> void doPatchEntity(T oldEntity, T newEntity, String namespace, String sourceName) {\n+        String kind = newEntity.getKind();\n+        log.info(\"Updating {} from {}\", kind, sourceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU2NA=="}, "originalCommit": {"oid": "578e1a17e0f592e62696173fdc111c8444f9b280"}, "originalPosition": 194}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1995, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}