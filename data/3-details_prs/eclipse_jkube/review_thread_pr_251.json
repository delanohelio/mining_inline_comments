{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDg2MjY5", "number": 251, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzo1MVrOEGw_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyNDo0OVrOEHcPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI5NjQ5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/SpringBootUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzo1MVrOGlw3xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzo1MVrOGlw3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MTIwNA==", "bodyText": "Please add license headers with mvn -N license:format", "url": "https://github.com/eclipse/jkube/pull/251#discussion_r442251204", "createdAt": "2020-06-18T14:03:51Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/SpringBootUtilTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package org.eclipse.jkube.kit.common.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a5d4b891d6a7330fed56daff0bd59330a69172"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTMwNDg4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/SpringBootUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowNTozMFrOGlw84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowNTozMFrOGlw84Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MjUxMw==", "bodyText": "I think it would be better if you use builders provided by Lombok", "url": "https://github.com/eclipse/jkube/pull/251#discussion_r442252513", "createdAt": "2020-06-18T14:05:30Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/SpringBootUtilTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package org.eclipse.jkube.kit.common.util;\n+\n+import mockit.Expectations;\n+import mockit.Mocked;\n+import org.apache.commons.io.FileUtils;\n+import org.eclipse.jkube.kit.common.Dependency;\n+import org.eclipse.jkube.kit.common.JavaProject;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SpringBootUtilTest {\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void testGetSpringBootApplicationProperties() throws IOException {\n+\n+        //Given\n+        File applicationProp =  new File(getClass().getResource(\"/application.properties\").getPath());\n+        String springActiveProfile = null;\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        boolean isTargetClassesCreated = classesInTarget.mkdirs();\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader urlClassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+\n+        //When\n+        Properties result =  SpringBootUtil.getSpringBootApplicationProperties(springActiveProfile ,urlClassLoader);\n+\n+        //Then\n+        assertTrue(isTargetClassesCreated);\n+        assertEquals(\"demoservice\" ,result.getProperty(\"spring.application.name\"));\n+        assertEquals(\"9090\" ,result.getProperty(\"server.port\"));\n+    }\n+\n+    @Test\n+    public void testGetSpringBootDevToolsVersion(@Mocked JavaProject maven_project) {\n+\n+        //Given\n+        Dependency p = new Dependency();\n+        p.setGroupId(\"org.springframework.boot\");\n+        p.setVersion(\"1.6.3\");\n+        new Expectations() {{\n+            maven_project.getDependencies();\n+            result=p;\n+        }};\n+\n+        //when\n+        Optional<String> result = SpringBootUtil.getSpringBootDevToolsVersion(maven_project);\n+\n+        //Then\n+        assertEquals(\"1.6.3\",result.get());\n+\n+    }\n+\n+\n+    @Test\n+    public void testGetSpringBootVersion(@Mocked JavaProject maven_project) {\n+\n+        //Given\n+        Dependency p = new Dependency();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a5d4b891d6a7330fed56daff0bd59330a69172"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzY5MjkzOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNToyMTozOVrOGmIX7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNToyMTozOVrOGmIX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYzNjI3MQ==", "bodyText": "maybe move this file to src/test/resources/util/spring-boot-application.properties so that it remains in the context of the test-suite (we'll probably have more)", "url": "https://github.com/eclipse/jkube/pull/251#discussion_r442636271", "createdAt": "2020-06-19T05:21:39Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,2 @@\n+spring.application.name:demoservice", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a5d4b891d6a7330fed56daff0bd59330a69172"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjM4MjA0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/SpringBootUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyNDo0OVrOGmzTtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyNDo0OVrOGmzTtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzOTcwMQ==", "bodyText": "I don't understand how this can be working, getDependencies() method returns a List, your mock returns an instance of Dependency.", "url": "https://github.com/eclipse/jkube/pull/251#discussion_r443339701", "createdAt": "2020-06-22T06:24:49Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/SpringBootUtilTest.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import mockit.Expectations;\n+import mockit.Mocked;\n+import org.apache.commons.io.FileUtils;\n+import org.eclipse.jkube.kit.common.Dependency;\n+import org.eclipse.jkube.kit.common.JavaProject;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+import java.util.Optional;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class SpringBootUtilTest {\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void testGetSpringBootApplicationProperties() throws IOException {\n+\n+        //Given\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        String springActiveProfile = null;\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        boolean isTargetClassesCreated = classesInTarget.mkdirs();\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader urlClassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+\n+        //When\n+        Properties result =  SpringBootUtil.getSpringBootApplicationProperties(springActiveProfile ,urlClassLoader);\n+\n+        //Then\n+        assertTrue(isTargetClassesCreated);\n+        assertEquals(\"demoservice\" ,result.getProperty(\"spring.application.name\"));\n+        assertEquals(\"9090\" ,result.getProperty(\"server.port\"));\n+    }\n+\n+    @Test\n+    public void testGetSpringBootDevToolsVersion(@Mocked JavaProject maven_project) {\n+\n+        //Given\n+        Dependency p = new Dependency();\n+        p.setGroupId(\"org.springframework.boot\");\n+        p.setVersion(\"1.6.3\");\n+        new Expectations() {{\n+            maven_project.getDependencies();\n+            result=p;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c70de02c6603c8dc0c287d21f0b209dc04b427b"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1977, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}