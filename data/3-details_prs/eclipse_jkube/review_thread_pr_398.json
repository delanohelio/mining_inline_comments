{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzY4Njc4", "number": 398, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo0Mzo0M1rOEoAKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo0Mzo0M1rOEoAKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzgxMjA2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTo0Mzo0M1rOHY2LZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDoxMDo1NFrOHY3Iug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTUyNQ==", "bodyText": "Usually you'd want to assert exceptions like this:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean failed = true;\n          \n          \n            \n                        try {\n          \n          \n            \n                            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n          \n          \n            \n                            failed = false;\n          \n          \n            \n                        } catch(Exception ex) {\n          \n          \n            \n                            // XXX Expected\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!failed) {\n          \n          \n            \n                            throw new Exception(\"Test should have failed, no directory for maven repo\");\n          \n          \n            \n                        }\n          \n          \n            \n                        /* Exception result = */assertThrows(Exception.class, () -> {\n          \n          \n            \n                          generator.addAdditionalFiles();\n          \n          \n            \n                          fail(\"Test should have failed, no directory for maven repo\");\n          \n          \n            \n                        });\n          \n          \n            \n                        // Optionally assert exception e.g. assertEquals(\"Expected Message\", result.getMessage());", "url": "https://github.com/eclipse/jkube/pull/398#discussion_r495815525", "createdAt": "2020-09-28T09:43:43Z", "author": {"login": "manusa"}, "path": "jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java", "diffHunk": "@@ -53,7 +64,204 @@ public void getEnv() throws IOException {\n         WildflyJARGenerator generator = new WildflyJARGenerator(createGeneratorContext());\n         Map<String, String> extraEnv = generator.getEnv(true);\n         assertNotNull(extraEnv);\n-        assertEquals(3, extraEnv.size());\n+        assertEquals(4, extraEnv.size());\n+    }\n+    \n+    @Test\n+    public void getExtraOptions() throws IOException {\n+        WildflyJARGenerator generator = new WildflyJARGenerator(createGeneratorContext());\n+        List<String> extraOptions = generator.getExtraJavaOptions();\n+        assertNotNull(extraOptions);\n+        assertEquals(1, extraOptions.size());\n+        assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+    }\n+    \n+    @Test\n+    public void slimServer(@Mocked final JavaProject project) throws IOException {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, \"target\" + File.separator + \"myrepo\");\n+        //\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        Files.createDirectories(repoDir);\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, tmpDir);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+            assertFalse(files.isEmpty());\n+            AssemblyFileSet set = files.get(files.size() - 1);\n+            assertEquals(targetDir.toFile(), set.getDirectory());\n+            assertEquals(1, set.getIncludes().size());\n+            assertEquals(\"myrepo\", set.getIncludes().get(0));\n+        } finally {\n+            Files.delete(repoDir);\n+            Files.delete(targetDir);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+    \n+    @Test\n+    public void slimServerAbsoluteDir(@Mocked final JavaProject project) throws IOException {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project2\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        Files.createDirectories(repoDir);\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, repoDir.toString());\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, null);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+            assertFalse(files.isEmpty());\n+            AssemblyFileSet set = files.get(files.size() - 1);\n+            assertEquals(targetDir.toFile(), set.getDirectory());\n+            assertEquals(1, set.getIncludes().size());\n+            assertEquals(\"myrepo\", set.getIncludes().get(0));\n+        } finally {\n+            Files.delete(repoDir);\n+            Files.delete(targetDir);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+    \n+    @Test\n+    public void slimServerNoDir(@Mocked final JavaProject project) throws Exception {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project2\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, repoDir.toString());\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, null);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            boolean failed = true;\n+            try {\n+                List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+                failed = false;\n+            } catch(Exception ex) {\n+                // XXX Expected\n+            }\n+            if (!failed) {\n+                throw new Exception(\"Test should have failed, no directory for maven repo\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b2aad2e1d875d5fe70fe5455d85a3cbd381c6b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzMTIyNg==", "bodyText": "@manusa , thank-you, I integrated your suggestion.", "url": "https://github.com/eclipse/jkube/pull/398#discussion_r495831226", "createdAt": "2020-09-28T10:10:54Z", "author": {"login": "jfdenise"}, "path": "jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java", "diffHunk": "@@ -53,7 +64,204 @@ public void getEnv() throws IOException {\n         WildflyJARGenerator generator = new WildflyJARGenerator(createGeneratorContext());\n         Map<String, String> extraEnv = generator.getEnv(true);\n         assertNotNull(extraEnv);\n-        assertEquals(3, extraEnv.size());\n+        assertEquals(4, extraEnv.size());\n+    }\n+    \n+    @Test\n+    public void getExtraOptions() throws IOException {\n+        WildflyJARGenerator generator = new WildflyJARGenerator(createGeneratorContext());\n+        List<String> extraOptions = generator.getExtraJavaOptions();\n+        assertNotNull(extraOptions);\n+        assertEquals(1, extraOptions.size());\n+        assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+    }\n+    \n+    @Test\n+    public void slimServer(@Mocked final JavaProject project) throws IOException {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, \"target\" + File.separator + \"myrepo\");\n+        //\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        Files.createDirectories(repoDir);\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, tmpDir);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+            assertFalse(files.isEmpty());\n+            AssemblyFileSet set = files.get(files.size() - 1);\n+            assertEquals(targetDir.toFile(), set.getDirectory());\n+            assertEquals(1, set.getIncludes().size());\n+            assertEquals(\"myrepo\", set.getIncludes().get(0));\n+        } finally {\n+            Files.delete(repoDir);\n+            Files.delete(targetDir);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+    \n+    @Test\n+    public void slimServerAbsoluteDir(@Mocked final JavaProject project) throws IOException {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project2\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        Files.createDirectories(repoDir);\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, repoDir.toString());\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, null);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+            assertFalse(files.isEmpty());\n+            AssemblyFileSet set = files.get(files.size() - 1);\n+            assertEquals(targetDir.toFile(), set.getDirectory());\n+            assertEquals(1, set.getIncludes().size());\n+            assertEquals(\"myrepo\", set.getIncludes().get(0));\n+        } finally {\n+            Files.delete(repoDir);\n+            Files.delete(targetDir);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+    \n+    @Test\n+    public void slimServerNoDir(@Mocked final JavaProject project) throws Exception {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project2\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, repoDir.toString());\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, null);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            boolean failed = true;\n+            try {\n+                List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+                failed = false;\n+            } catch(Exception ex) {\n+                // XXX Expected\n+            }\n+            if (!failed) {\n+                throw new Exception(\"Test should have failed, no directory for maven repo\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTUyNQ=="}, "originalCommit": {"oid": "d5b2aad2e1d875d5fe70fe5455d85a3cbd381c6b"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1890, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}