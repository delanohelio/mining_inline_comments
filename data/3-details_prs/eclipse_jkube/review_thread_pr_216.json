{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Nzk5Njc1", "number": 216, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowNDoyMFrOEBVuMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozNToxNlrOEBuVyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODM5OTIyOnYy", "diffSide": "RIGHT", "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowNDoyMFrOGdIITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowNDoyMFrOGdIITQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTA4NQ==", "bodyText": "Service shouldn't be instantiated it should be provided by the JKubeServiceHub", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433195085", "createdAt": "2020-06-01T12:04:20Z", "author": {"login": "manusa"}, "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/MigrateMojo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.maven.plugin.mojo;\n+\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugins.annotations.LifecyclePhase;\n+import org.apache.maven.plugins.annotations.Mojo;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.eclipse.jkube.kit.common.service.MigrateService;\n+import org.eclipse.jkube.kit.common.util.MavenUtil;\n+import org.eclipse.jkube.maven.plugin.mojo.build.AbstractJKubeMojo;\n+\n+import java.io.File;\n+\n+@Mojo(name = \"migrate\", requiresDependencyResolution = ResolutionScope.RUNTIME, defaultPhase = LifecyclePhase.INSTALL)\n+public class MigrateMojo extends AbstractJKubeMojo {\n+    private static final String PLUGIN_ARTIFACT_ID = \"kubernetes-maven-plugin\";\n+    private static final String PLUGIN_GROUP_ID = \"org.eclipse.jkube\";\n+\n+    @Override\n+    public void executeInternal() throws MojoExecutionException {\n+        log = createLogger(null);\n+        File projectBasedir = project.getBasedir();\n+        try {\n+            MigrateService migrateService = new MigrateService(projectBasedir, PLUGIN_GROUP_ID, getPluginArtifactId(), MavenUtil.getVersion(PLUGIN_GROUP_ID, getPluginArtifactId()), log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3a078bddc61cff70597908dc23fcb28c520661"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODQwMTQyOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowNToxN1rOGdIJng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowNToxN1rOGdIJng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTQyMg==", "bodyText": "Add at least a verification to make sure that the unmarshaled document actually matches with the content of the document", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433195422", "createdAt": "2020-06-01T12:05:17Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class XMLUtilTest {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Test\n+    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException {\n+        // Given\n+        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n+\n+        // When\n+        Document document = XMLUtil.readXML(sampleXML);\n+\n+        // Then\n+        assertNotNull(document);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3a078bddc61cff70597908dc23fcb28c520661"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODQxMDU1OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowODo1M1rOGdIPIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjowODo1M1rOGdIPIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NjgzNQ==", "bodyText": "// GIven\nThis test should start by creating a Document with code only\n// When\nWrite the document to a file (single statement)\n// Then\nCompare the written file to a an expected file", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433196835", "createdAt": "2020-06-01T12:08:53Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/XMLUtilTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+public class XMLUtilTest {\n+    @Rule\n+    public TemporaryFolder folder = new TemporaryFolder();\n+\n+    @Test\n+    public void testReadXML() throws URISyntaxException, IOException, SAXException, ParserConfigurationException {\n+        // Given\n+        File sampleXML = new File(getClass().getResource(\"/test-project/pom.xml\").toURI());\n+\n+        // When\n+        Document document = XMLUtil.readXML(sampleXML);\n+\n+        // Then\n+        assertNotNull(document);\n+    }\n+\n+    @Test\n+    public void testXMLWrite() throws URISyntaxException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3a078bddc61cff70597908dc23fcb28c520661"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODQxNDg5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoxMDozM1rOGdIRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjoxMDozM1rOGdIRuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NzQ5Ng==", "bodyText": "You can use XPath queries to do this for you\nhttps://www.w3schools.com/xml/xpath_syntax.asp\nhttps://stackoverflow.com/questions/32959791/filtering-xml-document-using-xpath-in-java", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433197496", "createdAt": "2020-06-01T12:10:33Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class XMLUtil {\n+    private XMLUtil() { }\n+\n+    public static Document readXML(File xmlFile) throws ParserConfigurationException, IOException, SAXException {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);\n+        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", false);\n+        documentBuilderFactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n+        documentBuilderFactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n+        documentBuilderFactory.setXIncludeAware(false);\n+        documentBuilderFactory.setExpandEntityReferences(false);\n+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n+\n+        return documentBuilder.parse(xmlFile);\n+    }\n+\n+    public static void writeXML(Document document, File xmlFile) throws TransformerException {\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+        Transformer transformer = transformerFactory.newTransformer();\n+        document.setXmlStandalone(true);\n+        DOMSource source = new DOMSource(document);\n+        StreamResult result = new StreamResult(xmlFile);\n+        transformer.transform(source, result);\n+    }\n+\n+    public static Node getNodeFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (Node) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.NODE);\n+    }\n+\n+    public static String getNodeValueFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (String) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.STRING);\n+    }\n+\n+    public static int findNodeInList(NodeList nodeList, String nodeName, String desiredValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc3a078bddc61cff70597908dc23fcb28c520661"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQyNzg2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMzo0NFrOGdveYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozMzo0NFrOGdveYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzOTcxNQ==", "bodyText": "\"/project/properties\" can also be converted into a constant string.", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433839715", "createdAt": "2020-06-02T12:33:44Z", "author": {"login": "dev-gaur"}, "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/service/MigrateService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.service;\n+\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.common.util.XMLUtil;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.xpath.XPathExpressionException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+\n+public class MigrateService {\n+    private File projectBasedir;\n+    private static final String POM_XML = \"pom.xml\";\n+    private static final String FABRIC8 = \"fabric8\";\n+    private static final String JKUBE = \"jkube\";\n+    private static final String DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/\" + FABRIC8;\n+    private static final String DEFAULT_RESOURCE_FRAGMENT_DIRECTORY = \"src/main/\" + JKUBE;\n+    private static final String ARTIFACT_ID = \"artifactId\";\n+    private static final String GROUP_ID = \"groupId\";\n+    private static final String VERSION = \"version\";\n+    private static final String FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID = FABRIC8 + \"-maven-plugin\";\n+    private KitLogger logger;\n+\n+    public MigrateService(File projectBaseDirectory, KitLogger logger) {\n+        this.projectBasedir = projectBaseDirectory;\n+        this.logger = logger;\n+    }\n+\n+    public void migrate(String pluginGroupId, String pluginArtifactId, String pluginVersion) throws IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {\n+        File pomFile = getPomFile();\n+        String pomContent = new String(Files.readAllBytes(pomFile.toPath()), StandardCharsets.UTF_8);\n+        String modifiedPomContent = searchAndReplaceEnricherRefsInPomToJKube(pomContent);\n+        Files.write(pomFile.toPath(), modifiedPomContent.getBytes(StandardCharsets.UTF_8));\n+        if (pomContainsFMP(pomContent)) {\n+            Document dom = XMLUtil.readXML(pomFile);\n+\n+            // Check Whether plugin is present in project.build.plugins\n+            modifyFMPPluginSectionInsideBuild(dom, pluginGroupId, pluginArtifactId, pluginVersion);\n+            // Check Whether plugin is present in project.profiles.build.plugins\n+            modifyFMPSectionInsideProfile(dom, pluginGroupId, pluginArtifactId, pluginVersion);\n+            // Rename all Fabric8 related properties to JKube\n+            modifyFMPPropertiesInsidePom(dom);\n+\n+            XMLUtil.writeXML(dom, pomFile);\n+            renameResourceFragmentDirectoryToJKube();\n+        } else {\n+            logger.warn(\"Unable to find Fabric8 Maven Plugin inside pom\");\n+        }\n+    }\n+\n+    private String searchAndReplaceEnricherRefsInPomToJKube(String pomContent) {\n+        pomContent = pomContent.replace(\"fmp-\", JKUBE + \"-\");\n+        pomContent = pomContent.replace(\"f8-\", JKUBE + \"-\");\n+\n+        return pomContent;\n+    }\n+\n+    private boolean pomContainsFMP(String pomContent) {\n+        return pomContent.contains(FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID);\n+    }\n+\n+    private File getPomFile() {\n+        return new File(projectBasedir, POM_XML);\n+    }\n+\n+    private File getResourceFragmentDirectory(File projectBasedir) {\n+        return new File(projectBasedir, DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY);\n+    }\n+\n+    private void modifyFMPPluginSectionInsideBuild(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion) throws XPathExpressionException {\n+        convertFMPNodeToJKube(dom,  pluginGroupId, pluginArtifactId, pluginVersion, \"/project/build/plugins\");\n+    }\n+\n+    private void modifyFMPSectionInsideProfile(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion) throws XPathExpressionException {\n+        Node profilesNode = XMLUtil.getNodeFromDocument(dom, \"/project/profiles\");\n+        if (profilesNode != null) {\n+            NodeList nodeList = profilesNode.getChildNodes();\n+            for (int i = 0; i < nodeList.getLength(); i++) {\n+                convertFMPNodeToJKube(dom, pluginGroupId, pluginArtifactId, pluginVersion, \"/project/profiles/profile[\" + i + \"]/build/plugins\");\n+            }\n+        }\n+    }\n+\n+    private void convertFMPNodeToJKube(Document dom, String pluginGroupId, String pluginArtifactId, String pluginVersion, String parentXPathExpression) throws XPathExpressionException {\n+        Node fmpNode = XMLUtil.getNodeFromDocument(dom, parentXPathExpression + \"/plugin[artifactId='\" + FABRIC8_MAVEN_PLUGIN_ARTIFACT_ID + \"']\");\n+        if (fmpNode != null) {\n+            Element fmpNodeElem = (Element) fmpNode;\n+            Node artifactNode = fmpNodeElem.getElementsByTagName(ARTIFACT_ID).item(0);\n+            Node groupNode = fmpNodeElem.getElementsByTagName(GROUP_ID).item(0);\n+            Node versionNode = fmpNodeElem.getElementsByTagName(VERSION).item(0);\n+            logger.info(\"Found Fabric8 Maven Plugin in pom with version \" + versionNode.getTextContent());\n+            groupNode.setTextContent(pluginGroupId);\n+            artifactNode.setTextContent(pluginArtifactId);\n+            versionNode.setTextContent(pluginVersion);\n+        }\n+    }\n+\n+    private void renameResourceFragmentDirectoryToJKube() {\n+        File resourceFragmentDir = getResourceFragmentDirectory(projectBasedir);\n+        if (resourceFragmentDir.exists()) {\n+            File jkubeResourceDir = new File(projectBasedir, DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n+            boolean isRenamed = resourceFragmentDir.renameTo(jkubeResourceDir);\n+            if (!isRenamed) {\n+                logger.warn(\"Unable to rename resource fragment directory in project\");\n+            } else {\n+                logger.info(\"Renamed \" + DEFAULT_FABRIC8_RESOURCE_FRAGMENT_DIRECTORY + \" to \" + DEFAULT_RESOURCE_FRAGMENT_DIRECTORY);\n+            }\n+        }\n+    }\n+\n+    private void modifyFMPPropertiesInsidePom(Document dom) throws XPathExpressionException {\n+        Node propertiesNode = XMLUtil.getNodeFromDocument(dom, \"/project/properties\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d320ad3d018e78385bc0f75b393758052353810b"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjQzMjc0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozNToxNlrOGdvhnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjozNToxNlrOGdvhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MDU0MQ==", "bodyText": "These urls can be converted into an array of strings and then we can use a loop for setting them here..\nbetter than hardcoding", "url": "https://github.com/eclipse/jkube/pull/216#discussion_r433840541", "createdAt": "2020-06-02T12:35:16Z", "author": {"login": "dev-gaur"}, "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/XMLUtil.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.File;\n+import java.io.IOException;\n+\n+public class XMLUtil {\n+    private XMLUtil() { }\n+\n+    public static Document createNewDocument() throws ParserConfigurationException {\n+        DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n+        return documentBuilderFactory.newDocumentBuilder().newDocument();\n+    }\n+\n+    public static Document readXML(File xmlFile) throws ParserConfigurationException, IOException, SAXException {\n+        DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n+        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n+\n+        return documentBuilder.parse(xmlFile);\n+    }\n+\n+    public static void writeXML(Document document, File xmlFile) throws TransformerException {\n+        TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+        transformerFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n+        Transformer transformer = transformerFactory.newTransformer();\n+        document.setXmlStandalone(true);\n+        DOMSource source = new DOMSource(document);\n+        StreamResult result = new StreamResult(xmlFile);\n+        transformer.transform(source, result);\n+    }\n+\n+    public static Node getNodeFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (Node) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.NODE);\n+    }\n+\n+    public static String getNodeValueFromDocument(Document doc, String xPathExpression) throws XPathExpressionException {\n+        XPathFactory xPathfactory = XPathFactory.newInstance();\n+        XPath xpath = xPathfactory.newXPath();\n+        return (String) xpath.compile(xPathExpression).evaluate(doc, XPathConstants.STRING);\n+    }\n+\n+    private static DocumentBuilderFactory getDocumentBuilderFactory() throws ParserConfigurationException {\n+        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n+        documentBuilderFactory.setAttribute(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+        documentBuilderFactory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d320ad3d018e78385bc0f75b393758052353810b"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}