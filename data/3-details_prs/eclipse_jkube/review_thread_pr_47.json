{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Mzc3ODQy", "number": 47, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0MDoxM1rODiugzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo1OTo1NFrODi_Xqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQwMjM4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0MDoxM1rOFuIkzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0MDoxM1rOFuIkzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxOTMxMA==", "bodyText": "Add a private constructor so that we enforce the use of the singleton.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383919310", "createdAt": "2020-02-25T14:40:13Z", "author": {"login": "manusa"}, "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/core/assembly/DockerAssemblyManager.java", "diffHunk": "@@ -76,17 +62,12 @@\n     public static final String DOCKER_INCLUDE = \".maven-dockerinclude\";\n     public static final String DOCKERFILE_NAME = \"Dockerfile\";\n \n-    @Requirement\n-    private AssemblyArchiver assemblyArchiver;\n-\n-    @Requirement\n-    private AssemblyReader assemblyReader;\n-\n-    @Requirement\n-    private ArchiverManager archiverManager;\n-\n-    @Requirement(hint = \"track\")\n-    private Archiver trackArchiver;\n+    public static DockerAssemblyManager getInstance() {\n+        if (dockerAssemblyManager == null) {\n+            dockerAssemblyManager = new DockerAssemblyManager();\n+        }\n+        return dockerAssemblyManager;\n+    }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQzMzQ1OnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0NzoyOVrOFuI3rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo0NzoyOVrOFuI3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNDE0Mw==", "bodyText": "This looks really messy.\nI guess this is like this for deserialization?\nIn any case it would be good to have a proper POJO to represent this \"settings\" structure.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383924143", "createdAt": "2020-02-25T14:47:29Z", "author": {"login": "manusa"}, "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/RegistryService.java", "diffHunk": "@@ -210,8 +219,8 @@ public Builder registry(String registry) {\n                 return this;\n             }\n \n-            public Builder settings(Settings settings) {\n-                context.settings = settings;\n+            public Builder settings(Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> registryServerSettingsAsMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQ0NTA2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDoxNFrOFuI-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDoxNFrOFuI-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNTk2Mg==", "bodyText": "No need to add throws IllegalStateException it's a RuntimeException > remove from method signature.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383925962", "createdAt": "2020-02-25T14:50:14Z", "author": {"login": "manusa"}, "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java", "diffHunk": "@@ -328,15 +315,15 @@ private AuthConfig getAuthConfigFromSystemProperties(LookupMode lookupMode) thro\n                 throw new IOException(\"No \" + passwordKey + \" provided for username \" + props.getProperty(userKey));\n             }\n             return new AuthConfig(props.getProperty(userKey),\n-                                  decrypt(props.getProperty(passwordKey)),\n+                                  passwordDecryptionMethod.apply(props.getProperty(passwordKey)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_EMAIL)),\n                                   props.getProperty(lookupMode.asSysProperty(AUTH_AUTHTOKEN)));\n         } else {\n             return null;\n         }\n     }\n \n-    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) throws MojoExecutionException {\n+    private AuthConfig getAuthConfigFromOpenShiftConfig(LookupMode lookupMode, Map authConfigMap) throws IllegalStateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzQ0NzcwOnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDo1NFrOFuJAaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1MDo1NFrOFuJAaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyNjM3OQ==", "bodyText": "Remove IllegalStateExceptionfrom method signature", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383926379", "createdAt": "2020-02-25T14:50:54Z", "author": {"login": "manusa"}, "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/auth/AuthConfigFactory.java", "diffHunk": "@@ -520,21 +507,21 @@ private AuthConfig parseUser(String userName, Map user) {\n                               token, null, null);\n     }\n \n-    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) throws MojoExecutionException {\n+    private AuthConfig validateMandatoryOpenShiftLogin(AuthConfig openShiftAuthConfig, String useOpenAuthModeProp) throws IllegalStateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzUxMjMyOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTowNTozM1rOFuJoCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTowNTozM1rOFuJoCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkzNjUyMw==", "bodyText": "Please, name static constants in Uppercase.\nThese the most basic language coding conventions used across any Java code-base. It's very important to name things following this foundation guidelines as when we Java coders read code with certain letter-case we assume the named entity is a class, package, instance, constant, etc.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383936523", "createdAt": "2020-02-25T15:05:33Z", "author": {"login": "manusa"}, "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/AnsiLogger.java", "diffHunk": "@@ -49,15 +49,13 @@\n     private List<LogVerboseCategory> verboseModes = null;\n \n     // ANSI escapes for various colors (or empty strings if no coloring is used)\n-    static Ansi.Color\n-            COLOR_ERROR = RED,\n-            COLOR_INFO = GREEN,\n-            COLOR_WARNING = YELLOW,\n-            COLOR_PROGRESS_ID = YELLOW,\n-            COLOR_PROGRESS_STATUS = GREEN,\n-            COLOR_PROGRESS_BAR = CYAN,\n-            COLOR_EMPHASIS = BLUE;\n-\n+    static Ansi.Color error = RED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzUzNTc0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToxMToyM1rOFuJ2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToxMToyM1rOFuJ2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MDI2NA==", "bodyText": "Better to use a specific POJO to represent the Plugins object.\nJavadoc description looks outdated and inaccurate.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383940264", "createdAt": "2020-02-25T15:11:23Z", "author": {"login": "manusa"}, "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "diffHunk": "@@ -180,6 +149,55 @@ public static Plugin getPluginOfAnyGroupId(MavenProject project, String pluginAr\n         return getPlugin(project, null, pluginArtifact);\n     }\n \n+    /**\n+     * Returns a comma separated string with dependency list in format\n+     *  groupId,artifactId,version,configuration,execution1|execution2|execution3\n+     *\n+     * @param project Maven project\n+     * @return list of dependencies in comma separated strings\n+     */\n+    public static List<AbstractMap.SimpleEntry<String, Map<String, Object>>> getPluginsAsString(MavenProject project) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzU1Njc5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToxNjozOFrOFuKD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToxNjozOFrOFuKD-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MzY3NQ==", "bodyText": "As in previous comment, better to use a specific typed POJO to represent this structure.\nThis is tightly related to the comment in RegistryService.Builder#settings where you are eventually converting what we return here to List<RegistryServerConfiguration>", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383943675", "createdAt": "2020-02-25T15:16:38Z", "author": {"login": "manusa"}, "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "diffHunk": "@@ -331,5 +349,81 @@ public static String getDocumentationUrl (MavenProject project) {\n             throw new IOException(\"Cannot extract compile class path elements\", e);\n         }\n     }\n+\n+    public static Map<String, AbstractMap.SimpleEntry<AbstractMap.SimpleEntry<String, String>, Map<String, Object>>> getRegistryServerFromMavenSettings(Settings settings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzYxMzYwOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozMDozMlrOFuKntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozMDozMlrOFuKntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1MjgyMw==", "bodyText": "What is 63?\nDeclare a constant with a descriptive name please.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383952823", "createdAt": "2020-02-25T15:30:32Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/JkubeProjectUtil.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.eclipse.jkube.kit.common.JkubeProject;\n+import org.eclipse.jkube.kit.common.JkubeProjectDependency;\n+import org.eclipse.jkube.kit.common.JkubeProjectPlugin;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URLClassLoader;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.function.Predicate;\n+\n+public class JkubeProjectUtil {\n+    private JkubeProjectUtil() { }\n+\n+    public static <T> Optional<T> iterateOverListWithCondition(List<T> dependencyList, Predicate<? super T> condition) {\n+        return dependencyList.stream().filter(condition).findFirst();\n+    }\n+\n+    public static String getAnyDependencyVersionWithGroupId(JkubeProject jkubeProject, String groupId) {\n+        Optional<JkubeProjectDependency> value = iterateOverListWithCondition(jkubeProject.getDependencies(),\n+                dependency -> dependency.getGroupId().equals(groupId));\n+\n+        return value.map(JkubeProjectDependency::getVersion).orElse(null);\n+    }\n+\n+    public static JkubeProjectPlugin getPlugin(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        Optional<JkubeProjectPlugin> value = iterateOverListWithCondition(jkubeProject.getPlugins(),\n+                plugin -> plugin.getGroupId().equals(groupId) && plugin.getArtifactId().equals(artifactId));\n+        return value.orElse(null);\n+    }\n+\n+    public static JkubeProjectPlugin getPlugin(JkubeProject jkubeProject, String artifactId) {\n+        Optional<JkubeProjectPlugin> value = iterateOverListWithCondition(jkubeProject.getPlugins(),\n+                plugin -> plugin.getArtifactId().equals(artifactId));\n+        return value.orElse(null);\n+    }\n+\n+    public static boolean hasPlugin(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        return getPlugin(jkubeProject, groupId, artifactId) != null;\n+    }\n+\n+    public static boolean hasPluginOfAnyArtifactId(JkubeProject jkubeProject, String artifactId) {\n+        return getPlugin(jkubeProject, artifactId) != null;\n+    }\n+\n+    public static boolean hasDependency(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        return getDependency(jkubeProject, groupId, artifactId) != null;\n+    }\n+\n+    public static JkubeProjectDependency getDependency(JkubeProject jkubeProject, String groupId, String artifactId) {\n+        List<JkubeProjectDependency> dependencyList = jkubeProject.getDependencies();\n+        if (dependencyList != null) {\n+            Optional<JkubeProjectDependency> value = iterateOverListWithCondition(dependencyList,\n+                    dependency -> dependency.getGroupId().equals(groupId) && dependency.getArtifactId().equals(artifactId));\n+\n+            return value.orElse(null);\n+        }\n+        return null;\n+    }\n+\n+    public static boolean hasResource(JkubeProject project, String... paths) throws IOException {\n+        try (URLClassLoader compileClassLoader = ClassUtil.createClassLoader(project.getCompileClassPathElements(), project.getOutputDirectory())) {\n+            for (String path : paths) {\n+                try {\n+                    if (compileClassLoader.getResource(path) != null) {\n+                        return true;\n+                    }\n+                } catch (Exception e) {\n+                    throw new IOException(e);\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public static Properties getPropertiesWithSystemOverrides(JkubeProject project) {\n+        Properties properties = new Properties(project.getProperties());\n+        properties.putAll(System.getProperties());\n+        return properties;\n+    }\n+\n+    public static File getFinalOutputArtifact(JkubeProject jkubeProject) {\n+        String nameOfFinalArtifact;\n+        if (jkubeProject.getBuildFinalName() == null) {\n+            nameOfFinalArtifact = jkubeProject.getArtifactId() + \"-\"\n+                    + jkubeProject.getVersion() + \".\" + jkubeProject.getPackaging();\n+        } else {\n+            nameOfFinalArtifact = jkubeProject.getBuildFinalName() + \".\" + jkubeProject.getPackaging();\n+        }\n+        File outputDirectory = new File(jkubeProject.getBuildDirectory());\n+        File finalArtifact = new File(outputDirectory, nameOfFinalArtifact);\n+        return finalArtifact.exists() ? finalArtifact : null;\n+    }\n+\n+    public static String createDefaultResourceName(String artifactId, String ... suffixes) {\n+        String suffix = StringUtils.join(suffixes, \"-\");\n+        String ret = artifactId + (suffix.length() > 0 ? \"-\" + suffix : \"\");\n+        if (ret.length() > 63) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzY0NTQzOnYy", "diffSide": "RIGHT", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNTozODowOVrOFuK8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwOTozMjozOFrOFvK8Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ==", "bodyText": "Is this OK?\ngetArtifacts returns all dependencies in the project.\nJust to be sure, does getDependenciesWithTransitive return all dependencies too?", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r383958021", "createdAt": "2020-02-25T15:38:09Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MzkzNg==", "bodyText": "Umm, getDependencyArtifacts() returns direct dependencies", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384953936", "createdAt": "2020-02-27T07:35:02Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NjM3Nw==", "bodyText": "I am using two objects which are set using getArtifacts() and getDependencyArtifacts(): \n  \n    \n      jkube/jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java\n    \n    \n         Line 188\n      in\n      75cc07b\n    \n    \n    \n    \n\n        \n          \n           public static List<String> getDependenciesAsString(MavenProject project, boolean transitive) {", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384956377", "createdAt": "2020-02-27T07:41:44Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk5Njg2OQ==", "bodyText": "I'm asking about the first case (transitive == true), and just to make sure.\nThe question is:  does getDependenciesWithTransitive return all dependencies too?\nI don't understand your answer, you mean that this call gets delegated to > getArtifacts()?", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384996869", "createdAt": "2020-02-27T09:14:44Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwMDg5Mg==", "bodyText": "getDepenenciesWithTransitive() delegates to getArtifacts() (returns all dependencies)\ngetDependencies() delegates to getDependencyArtifacts() (returns direct dependencies)", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r385000892", "createdAt": "2020-02-27T09:22:29Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTAwNjY1NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r385006654", "createdAt": "2020-02-27T09:32:38Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/maven/enricher/api/JkubeEnricherContext.java", "diffHunk": "@@ -100,41 +93,26 @@ public GroupArtifactVersion getGav() {\n \n     @Override\n     public File getProjectDirectory() {\n-        return getProject().getBasedir();\n+        return getProject().getBaseDirectory();\n     }\n \n     @Override\n-    public List<Dependency> getDependencies(boolean transitive) {\n-        final Set<Artifact> artifacts = transitive ?\n-            getProject().getArtifacts() : getProject().getDependencyArtifacts();\n-\n-        final List<Dependency> dependencies = new ArrayList<>();\n-\n-        for (Artifact artifact : artifacts) {\n-            dependencies.add(\n-                new Dependency(new GroupArtifactVersion(artifact.getGroupId(),\n-                                                        artifact.getArtifactId(),\n-                                                        artifact.getVersion()),\n-                               artifact.getType(),\n-                               artifact.getScope(),\n-                               artifact.getFile()));\n-        }\n-\n-        return dependencies;\n+    public List<JkubeProjectDependency> getDependencies(boolean transitive) {\n+        return transitive ? getProject().getDependenciesWithTransitive() : getProject().getDependencies();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODAyMQ=="}, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTc5NzEyOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyMzoxNFrOFufdtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyMzoxNFrOFufdtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NDMyNQ==", "bodyText": "Inconsistent with the code-style in the rest of the code base, check IDE settings.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384294325", "createdAt": "2020-02-26T06:23:14Z", "author": {"login": "manusa"}, "path": "jkube-kit/common-maven/src/main/java/org/eclipse/jkube/kit/common/util/MavenUtil.java", "diffHunk": "@@ -17,33 +17,39 @@\n import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n+import java.lang.reflect.Method;\n import java.net.URLClassLoader;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.Properties;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTgwNTI2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyNzo1NFrOFufieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjoyNzo1NFrOFufieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NTU0NA==", "bodyText": "No need to add throws IllegalStateException  it's a RuntimeException > remove from method signature.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384295544", "createdAt": "2020-02-26T06:27:54Z", "author": {"login": "manusa"}, "path": "jkube-kit/generator/java-exec/src/main/java/org/eclipse/jkube/generator/javaexec/FatJarDetector.java", "diffHunk": "@@ -36,7 +34,7 @@\n         this.directory = new File(dir);\n     }\n \n-    Result scan() throws MojoExecutionException {\n+    Result scan() throws IllegalStateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTgwOTk2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjozMDo1N1rOFuflYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjozMDo1N1rOFuflYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI5NjI5MQ==", "bodyText": "Try to always use Collections.emptyList() (typed) instead of Collections.EMPTY_LIST (raw type)", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384296291", "createdAt": "2020-02-26T06:30:57Z", "author": {"login": "manusa"}, "path": "jkube-kit/generator/java-exec/src/test/java/org/eclipse/jkube/generator/javaexec/JavaExecGeneratorMainClassDeterminationTest.java", "diffHunk": "@@ -63,25 +60,23 @@\n     @Before\n     public void setUp() throws Exception{\n         new Expectations() {{\n-            mavenProject.getBuild();\n-            result = build;\n-            mavenProject.getPlugin(anyString);\n-            result = null;\n-            mavenProject.getVersion();\n+            jkubeProject.getPlugins();\n+            result = Collections.EMPTY_LIST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDA3NDQxOnYy", "diffSide": "RIGHT", "path": "jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozMjoyM1rOFuiFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozMjoyM1rOFuiFTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzNzIzMQ==", "bodyText": "Constant, please use correct letter-case: JKUBE_PLUGINS", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384337231", "createdAt": "2020-02-26T08:32:23Z", "author": {"login": "manusa"}, "path": "jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/enricher/VertxHealthCheckEnricher.java", "diffHunk": "@@ -63,11 +63,11 @@ public String apply(@Nullable String input) {\n             return input == null ? null : input.trim();\n         }\n     };\n-    protected static final String[] jkubePlugins = {\"org.eclipse.jkube:k8s-maven-plugin\", \"org.eclipse.jkube:oc-maven-plugin\"};\n+    protected static final String[] jkubePlugins = {\"k8s-maven-plugin\", \"oc-maven-plugin\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDA4MzQ4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozNTozMFrOFuiK9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODozNTozMFrOFuiK9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMzODY3OQ==", "bodyText": "Please, see other comments regarding specific POJOS for configuration entities and their deserialization.\nDeserializing something into a Map and then accessing keys through String will eventually end up in a very difficult to detect BUG.", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384338679", "createdAt": "2020-02-26T08:35:30Z", "author": {"login": "manusa"}, "path": "jkube-kit/jkube-kit-vertx/src/main/java/org/eclipse/jkube/vertx/generator/VertxPortsExtractor.java", "diffHunk": "@@ -32,17 +34,21 @@ public String getConfigPathPropertyName() {\n     }\n \n     @Override\n-    public String getConfigPathFromProject(MavenProject project) {\n-        Plugin plugin = project.getPlugin(Constants.VERTX_MAVEN_PLUGIN_GROUP + \":\" + Constants.VERTX_MAVEN_PLUGIN_ARTIFACT);\n-        if (plugin == null) {\n-            return null;\n-        }\n+    public String getConfigPathFromProject(JkubeProject project) {\n+        JkubeProjectPlugin plugin = JkubeProjectUtil.getPlugin(project, Constants.VERTX_MAVEN_PLUGIN_GROUP, Constants.VERTX_MAVEN_PLUGIN_ARTIFACT);\n \n-        Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();\n-        if (configuration == null) {\n-            return null;\n+        if (plugin != null) {\n+            Map<String, Object> pluginConfiguration = plugin.getConfiguration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDEwMzExOnYy", "diffSide": "RIGHT", "path": "jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MjowNlrOFuiXBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MjowNlrOFuiXBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTc2Nw==", "bodyText": "Rename this variable", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384341767", "createdAt": "2020-02-26T08:42:06Z", "author": {"login": "manusa"}, "path": "jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java", "diffHunk": "@@ -48,9 +47,7 @@\n \n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n-    private RepositorySystem repositorySystem;\n-\n-    private MavenProject mavenProject;\n+    private JkubeProject mavenProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDEwMzgwOnYy", "diffSide": "RIGHT", "path": "jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MjoyMFrOFuiXbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0MjoyMFrOFuiXbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MTg3MA==", "bodyText": "Rename this variable too", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384341870", "createdAt": "2020-02-26T08:42:20Z", "author": {"login": "manusa"}, "path": "jkube-kit/resource/service/src/main/java/org/eclipse/jkube/kit/config/service/JkubeServiceHub.java", "diffHunk": "@@ -154,12 +150,7 @@ public Builder buildServiceConfig(BuildService.BuildServiceConfig buildServiceCo\n             return this;\n         }\n \n-        public Builder repositorySystem(RepositorySystem repositorySystem) {\n-            hub.repositorySystem = repositorySystem;\n-            return this;\n-        }\n-\n-        public Builder mavenProject(MavenProject mavenProject) {\n+        public Builder jkubeProject(JkubeProject mavenProject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDExMzMzOnYy", "diffSide": "RIGHT", "path": "jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0NToxMlrOFuidJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0NToxMlrOFuidJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0MzMzNQ==", "bodyText": "Rename variable", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384343335", "createdAt": "2020-02-26T08:45:12Z", "author": {"login": "manusa"}, "path": "jkube-kit/resource/service/src/test/java/org/eclipse/jkube/kit/config/service/JkubeServiceHubTest.java", "diffHunk": "@@ -48,10 +47,7 @@\n     private BuildService.BuildServiceConfig buildServiceConfig;\n \n     @Mocked\n-    private MavenProject mavenProject;\n-\n-    @Mocked\n-    private RepositorySystem repositorySystem;\n+    private JkubeProject mavenProject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDEyMDE2OnYy", "diffSide": "RIGHT", "path": "kubernetes-maven-plugin/doc/index.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0NzoyOVrOFuihmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo0NzoyOVrOFuihmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0NDQ3Mg==", "bodyText": "Is this file actually supposed to be in this branch?", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384344472", "createdAt": "2020-02-26T08:47:29Z", "author": {"login": "manusa"}, "path": "kubernetes-maven-plugin/doc/index.html", "diffHunk": "@@ -1,3 +1,18 @@\n+<!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDE2NDI2OnYy", "diffSide": "RIGHT", "path": "openshift-maven-plugin/doc/index.html", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo1OTo1NFrOFui8kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo1OTo1NFrOFui8kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM1MTM3OQ==", "bodyText": "Is this file supposed to be in this branch?", "url": "https://github.com/eclipse/jkube/pull/47#discussion_r384351379", "createdAt": "2020-02-26T08:59:54Z", "author": {"login": "manusa"}, "path": "openshift-maven-plugin/doc/index.html", "diffHunk": "@@ -1,3 +1,18 @@\n+<!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea7a738d493e96953c2f6ec07727a198ac3aa707"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2029, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}