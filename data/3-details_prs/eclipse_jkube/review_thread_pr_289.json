{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDQ1OTEz", "number": 289, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0MToyOVrOEN0sdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozODoyOFrOEPbhOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTMwMjk0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0MToyOVrOGwpEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0MToyOVrOGwpEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NzcwNw==", "bodyText": "If I'm not mistaken all the tests seem to be having this block where you set up ProjectClassLoader maybe you can move this to some function or maybe move it to @Before, you can make ProjectClassLoaders as a member variable and then initialize it in @Before block, it would be called automatically before each test execution", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453657707", "createdAt": "2020-07-13T13:41:29Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProjectClassLoadersTest {\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void testIsClassInCompileClasspathWhenTrue() throws  Exception{\n+        //Given\n+        boolean all = true;\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader compileclassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+        ProjectClassLoaders object = new ProjectClassLoaders(compileclassLoader);\n+\n+        //When\n+        boolean result  =  object.isClassInCompileClasspath(all);\n+\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void testIsClassInCompileClasspathWhenFalse() throws  Exception{\n+        //Given\n+        boolean all = false;\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader compileclassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+        ProjectClassLoaders object = new ProjectClassLoaders(compileclassLoader);\n+\n+        //When\n+        boolean result  =  object.isClassInCompileClasspath(all,\"ProjectClassLoadersTest\",\"UserConfigurationCompare\");\n+\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void testIsClassInCompileClasspathWhenHasAllClassesTrue() throws  Exception{\n+        //Given\n+        boolean all = true;\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader compileclassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+        ProjectClassLoaders object = new ProjectClassLoaders(compileclassLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTMzMzc3OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0ODowOFrOGwpXAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0ODowOFrOGwpXAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MjQ2NA==", "bodyText": "EMPTY_LIST is not type safe. Use Collections.emptyList()", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453662464", "createdAt": "2020-07-13T13:48:08Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTMzNzI2OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0OTowMlrOGwpZRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0OTowMlrOGwpZRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object entity2 = Collections.EMPTY_SET;\n          \n          \n            \n                    Object entity2 = Collections.emptySet()", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453663045", "createdAt": "2020-07-13T13:49:02Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTMzOTA4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0OToyN1rOGwpadw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0OToyN1rOGwpadw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object entity1 = Collections.EMPTY_LIST;\n          \n          \n            \n                    Object entity1 = Collections.emptyList();", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453663351", "createdAt": "2020-07-13T13:49:27Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTM0MzAwOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1MDoxNlrOGwpc4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNToxMzo0MlrOGxukCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2Mzk3MQ==", "bodyText": "nit, here test name is TestConfigEqual but you're comparing two non-equal entities. Is this okay?", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453663971", "createdAt": "2020-07-13T13:50:16Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5NjI5Ng==", "bodyText": "Also remember this is not Go, methods never start with capital/uppercase letters since it will confuse readers of your code who will understand you are referencing a class wherever you call that method (this is not so bad for a test case method, but we should try to adhere to conventions).", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r454796296", "createdAt": "2020-07-15T05:13:42Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2Mzk3MQ=="}, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTM2MzMyOnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NDo0NVrOGwppQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NDo0NVrOGwppQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NzEzNw==", "bodyText": "In my opinion it's not a good idea do create an object of UserConfigurationCompare . You should use some actual Kubernetes Objects using builders like this:\n    Deployment deployment1 = new DeploymentBuilder().withNewMetadata()\n      .withName(\"deployment1\")\n      .addToLabels(\"key1\", \"value1\")\n      .withResourceVersion(\"1\")\n      .withGeneration(1L)\n      .endMetadata()\n      .withNewSpec()\n      .withNewSelector()\n      .addToMatchLabels(\"key1\", \"value1\")\n      .endSelector()\n      .withReplicas(0)\n      .endSpec()\n      .withNewStatus()\n      .withReplicas(1)\n      .withObservedGeneration(1L)\n      .endStatus()\n      .build();\n    Deployment deployment1 = new DeploymentBuilder().withNewMetadata()\n      .withName(\"deployment1\")\n      .addToLabels(Collections.singletonMap(\"key1\", \"value1\"))\n      .withResourceVersion(\"1\")\n      .withGeneration(1L)\n      .endMetadata()\n      .withNewSpec()\n      .withNewSelector()\n      .addToMatchLabels(\"key1\", \"value1\")\n      .endSelector()\n      .withReplicas(0)\n      .endSpec()\n      .withNewStatus()\n      .withReplicas(1)\n      .withObservedGeneration(1L)\n      .endStatus()\n      .build();\n     // When\n     boolean result = UserConfigurationCompare.configEqual(deployment1, deployment2);\n     // Then\n     assertFalse(result);", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453667137", "createdAt": "2020-07-13T13:54:45Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {\n+        //Given\n+        Object entity1 = \"asda\";\n+        Object entity2 = \"asdasda\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenKDTO() {\n+        //Given\n+        Object entity1 = new UserConfigurationCompare();\n+        Object entity2 = new UserConfigurationCompare();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenNotKDTO() {\n+        //Given\n+        Object entity1 = new KubernetesListBuilder().addToItems(new DeploymentBuilder().build()); //\n+        Object entity2 = new KubernetesListBuilder().addToItems(new DeploymentBuilder().build()); //\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenKDTOWithObj() {\n+        //Given\n+        Object entity1 = new UserConfigurationCompare();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTM3MDM4OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NjoxN1rOGwptpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1NjoxN1rOGwptpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2ODI2Mg==", "bodyText": "Use some Kubernetes object rather than using UserConfigurationCompare. Bdw, this class doesn't even have any member field. I'm not sure how your logic would be getting tested.", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453668262", "createdAt": "2020-07-13T13:56:17Z", "author": {"login": "rohanKanojia"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {\n+        //Given\n+        Object entity1 = \"asda\";\n+        Object entity2 = \"asdasda\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenKDTO() {\n+        //Given\n+        Object entity1 = new UserConfigurationCompare();\n+        Object entity2 = new UserConfigurationCompare();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjE0OTY5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozODoyOFrOGzIqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNzozODoyOFrOGzIqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MjQ3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                private ProjectClassLoaders before() throws  Exception {\n          \n          \n            \n                private URLClassLoader compileClassLoader;\n          \n          \n            \n            \n          \n          \n            \n                @Before\n          \n          \n            \n                private void setUp() throws Exception {\n          \n          \n            \n                  /* ... */\n          \n          \n            \n                  compileClassLoader = /* ... */;", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r456272479", "createdAt": "2020-07-17T07:38:28Z", "author": {"login": "manusa"}, "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.*;\n+\n+public class ProjectClassLoadersTest {\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+\n+    private ProjectClassLoaders before() throws  Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd81009efccbc4815284a9ff8f321cd2436b47ab"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2001, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}