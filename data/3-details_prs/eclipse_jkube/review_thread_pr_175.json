{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTE2NTg4", "number": 175, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo1OTo1OVrOD6ljZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNToxM1rOEzqBMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzU5MjY5OnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/helper/DockerFileUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDowMDowMFrOGSgUew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDowMjo1M1rOGSgZWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NzA4Mw==", "bodyText": "this if condition feels redundant.", "url": "https://github.com/eclipse/jkube/pull/175#discussion_r422057083", "createdAt": "2020-05-08T10:00:00Z", "author": {"login": "dev-gaur"}, "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/helper/DockerFileUtil.java", "diffHunk": "@@ -56,23 +56,40 @@ private DockerFileUtil() {}\n      */\n     public static List<String> extractBaseImages(File dockerFile, Properties properties) throws IOException {\n         List<String[]> fromLines = extractLines(dockerFile, \"FROM\", properties);\n+        Map<String, String> args = extractArgs(extractLines(dockerFile, \"ARG\", properties));\n         Set<String> result = new LinkedHashSet<>();\n         Set<String> fromAlias = new HashSet<>();\n         for (String[] fromLine :  fromLines) {\n             if (fromLine.length > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfaaeb402c45c9855f2b2f0d35f344519dffa3f6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1ODMyOA==", "bodyText": "Line 63", "url": "https://github.com/eclipse/jkube/pull/175#discussion_r422058328", "createdAt": "2020-05-08T10:02:53Z", "author": {"login": "dev-gaur"}, "path": "jkube-kit/build/service/docker/src/main/java/org/eclipse/jkube/kit/build/service/docker/helper/DockerFileUtil.java", "diffHunk": "@@ -56,23 +56,40 @@ private DockerFileUtil() {}\n      */\n     public static List<String> extractBaseImages(File dockerFile, Properties properties) throws IOException {\n         List<String[]> fromLines = extractLines(dockerFile, \"FROM\", properties);\n+        Map<String, String> args = extractArgs(extractLines(dockerFile, \"ARG\", properties));\n         Set<String> result = new LinkedHashSet<>();\n         Set<String> fromAlias = new HashSet<>();\n         for (String[] fromLine :  fromLines) {\n             if (fromLine.length > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NzA4Mw=="}, "originalCommit": {"oid": "cfaaeb402c45c9855f2b2f0d35f344519dffa3f6"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjAxMDgzOnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/helper/DockerFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNDoxOVrOHrB0mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNDoxOVrOHrB0mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4MDY2NQ==", "bodyText": "This Regex is dangerous, and reported as a bug https://sonarcloud.io/project/issues?id=jkubeio_jkube&open=AXVraCJxz5kaBwk-uluS&pullRequest=175&resolved=false&types=BUG", "url": "https://github.com/eclipse/jkube/pull/175#discussion_r514880665", "createdAt": "2020-10-30T05:34:19Z", "author": {"login": "manusa"}, "path": "jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/helper/DockerFileUtil.java", "diffHunk": "@@ -209,4 +273,36 @@ private static File getHomeDir() {\n         return new File(homeDir);\n     }\n \n+    private static void updateMapWithArgValue(Map<String, String> result, Map<String, String> args, String argString) {\n+        if (argString.contains(\"=\") || argString.contains(\":\")) {\n+            String[] argStringParts = argString.split(\"[=:]\");\n+            String argStringValue = argString.substring(argStringParts[0].length() + 1);\n+            if (argStringValue.startsWith(\"\\\"\") || argStringValue.startsWith(\"'\")) {\n+                // Replaces surrounding quotes\n+                argStringValue = argStringValue.replaceAll(\"^\\\"|\\\"|'|'$\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c945891e034f995cc11345179cd4643e6eab1ac"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjAxMjY0OnYy", "diffSide": "RIGHT", "path": "jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/helper/DockerFileUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNToxNFrOHrB1jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTozNToxNFrOHrB1jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4MDkxMA==", "bodyText": "Declare the pattern as a constant, it's thread-safe. This way you're compiling the pattern  for every method call.", "url": "https://github.com/eclipse/jkube/pull/175#discussion_r514880910", "createdAt": "2020-10-30T05:35:14Z", "author": {"login": "manusa"}, "path": "jkube-kit/build/api/src/main/java/org/eclipse/jkube/kit/build/api/helper/DockerFileUtil.java", "diffHunk": "@@ -130,6 +146,54 @@ private static Reader getFileReaderFromDir(File file) {\n         }\n     }\n \n+    /**\n+     * Helper method for extractArgs(exposed for test)\n+     *\n+     * @param argLines list of string arrays containing lines with words\n+     * @param argsFromBuildConfig Docker build args from Build Configuration\n+     * @return map of parsed arguments\n+     */\n+    protected static Map<String, String> extractArgsFromLines(List<String[]> argLines, Map<String, String> argsFromBuildConfig) {\n+        Map<String, String> result = new HashMap<>();\n+        for (String[] argLine : argLines) {\n+            if (argLine.length > 1) {\n+                updateMapWithArgValue(result, argsFromBuildConfig, argLine[1]);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private static String resolveImageTagFromArgs(String imageTagString, Map<String, String> args) {\n+        if (imageTagString.startsWith(\"$\")) { // FROM $IMAGE\n+            String resolvedVal = resolveArgValueFromStrContainingArgKey(imageTagString, args);\n+            if (resolvedVal != null) {\n+                return resolvedVal;\n+            }\n+        } else { // FROM image:$TAG_ARG\n+            String[] imageTagArr = imageTagString.split(\":\");\n+            if (imageTagArr.length > 1) {\n+                String tag = resolveArgValueFromStrContainingArgKey(imageTagArr[1], args);\n+                if (tag != null) {\n+                    return imageTagArr[0] + \":\" + tag;\n+                }\n+            }\n+        }\n+        return imageTagString;\n+    }\n+\n+    static String resolveArgValueFromStrContainingArgKey(String argString, Map<String, String> args) {\n+        Pattern argPattern = Pattern.compile(ARG_PATTERN_REGEX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c945891e034f995cc11345179cd4643e6eab1ac"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1935, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}