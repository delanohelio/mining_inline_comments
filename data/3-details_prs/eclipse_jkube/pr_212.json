{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjMyODc4", "number": 212, "title": "Fix #173: Use OpenShift compliant git/vcs annotations", "bodyText": "Fix #173", "createdAt": "2020-05-26T14:14:01Z", "url": "https://github.com/eclipse/jkube/pull/212", "merged": true, "mergeCommit": {"oid": "aa28b53938bc6de56229416db71d251f60ef33cf"}, "closed": true, "closedAt": "2020-06-01T08:55:11Z", "author": {"login": "rohanKanojia"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmApTTgFqTQyMDg2NDQ0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcm8XVqAFqTQyMTY5MDYwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODY0NDQ3", "url": "https://github.com/eclipse/jkube/pull/212#pullrequestreview-420864447", "createdAt": "2020-05-29T11:20:19Z", "commit": {"oid": "e85a88be2c79b06a4fc59f9dbdf19d3ef3baa407"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyMDoxOVrOGcYxFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyMDoxOVrOGcYxFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxOTA5NA==", "bodyText": "It would be better if the function was pure and instead of creating side effects in the input annotations variable you returned a new Map with the annotations. This map can then be appended (if applicable) to the existing variable using putAll.", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r432419094", "createdAt": "2020-05-29T11:20:19Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "diffHunk": "@@ -101,58 +81,80 @@ public void create(PlatformMode platformMode, KubernetesListBuilder builder) {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n+\n+    protected void addAnnotations(PlatformMode platformMode, Map<String, String> annotations, String gitRemoteUrl, String branch, String commitId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e85a88be2c79b06a4fc59f9dbdf19d3ef3baa407"}, "originalPosition": 125}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e85a88be2c79b06a4fc59f9dbdf19d3ef3baa407", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/eclipse/jkube/commit/e85a88be2c79b06a4fc59f9dbdf19d3ef3baa407", "committedDate": "2020-05-26T14:06:04Z", "message": "Fix #173: Use OpenShift compliant git/vcs annotations"}, "afterCommit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/eclipse/jkube/commit/dad32d51ff10093445dc316f48861aa4e1dc1028", "committedDate": "2020-06-01T06:38:17Z", "message": "Fix #173: Use OpenShift compliant git/vcs annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjI3Mjgz", "url": "https://github.com/eclipse/jkube/pull/212#pullrequestreview-421627283", "createdAt": "2020-06-01T06:49:50Z", "commit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo0OTo1MFrOGdAcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo0OTo1MFrOGdAcQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2OTEyMg==", "bodyText": "nit: this method is not adding any annotations but generating/inferring them. Method should be named something like getAnnotations generateAnnotations inferAnnotations or sth like that.", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r433069122", "createdAt": "2020-06-01T06:49:50Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "diffHunk": "@@ -101,58 +81,84 @@ public void create(PlatformMode platformMode, KubernetesListBuilder builder) {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n+\n+    protected static Map<String, String> addAnnotations(PlatformMode platformMode, String gitRemoteUrl, String branch, String commitId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjI4MTcx", "url": "https://github.com/eclipse/jkube/pull/212#pullrequestreview-421628171", "createdAt": "2020-06-01T06:52:01Z", "commit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo1MjowMVrOGdAeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNjo1MjowMVrOGdAeyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2OTc2OQ==", "bodyText": "Some corner or edge cases should be tested: null method parameter values, etc.", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r433069769", "createdAt": "2020-06-01T06:52:01Z", "author": {"login": "manusa"}, "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.enricher.generic;\n+\n+import org.eclipse.jkube.kit.config.resource.JKubeAnnotations;\n+import org.eclipse.jkube.kit.config.resource.OpenShiftAnnotations;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class GitEnricherTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b45ce1772898dd0193ef0d2a0c8e893aeb909325", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/eclipse/jkube/commit/b45ce1772898dd0193ef0d2a0c8e893aeb909325", "committedDate": "2020-06-01T07:45:00Z", "message": "Fix #173: Use OpenShift compliant git/vcs annotations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/eclipse/jkube/commit/dad32d51ff10093445dc316f48861aa4e1dc1028", "committedDate": "2020-06-01T06:38:17Z", "message": "Fix #173: Use OpenShift compliant git/vcs annotations"}, "afterCommit": {"oid": "b45ce1772898dd0193ef0d2a0c8e893aeb909325", "author": {"user": {"login": "rohanKanojia", "name": "Rohan Kumar "}}, "url": "https://github.com/eclipse/jkube/commit/b45ce1772898dd0193ef0d2a0c8e893aeb909325", "committedDate": "2020-06-01T07:45:00Z", "message": "Fix #173: Use OpenShift compliant git/vcs annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjkwNjA3", "url": "https://github.com/eclipse/jkube/pull/212#pullrequestreview-421690607", "createdAt": "2020-06-01T08:55:00Z", "commit": {"oid": "b45ce1772898dd0193ef0d2a0c8e893aeb909325"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 266, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}