{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDM2MzE1", "number": 7367, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo1MjozNVrODdcWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTowMTozM1rODfInIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk5ODQwOnYy", "diffSide": "RIGHT", "path": "RELEASE_NOTES.txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODo1MjozNVrOFmDM9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToxMToyMVrOFmDx7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MjY3Nw==", "bodyText": "I've reviewed Ignite .NET changelist, there are a few missing, and some are duplicate. I propose to list the following:\n* Added Thin Client Partition Awareness\n* Added Thin Client Expiry Policy\n* Added Thin Client Cluster API\n* Added .NET Core 3.x support\n* Added Ignite.NET Dockerfile\n* Added Runnable .NET Core assembly\n* Added ICache.GetLongSize\n* Added IClusterNode.Version\n* Added ICompute.WithExecutor\n* Added IIgnite.GetVersion\n* Added IBinaryObjectBuilder.SetField(name, val, type) overload\n* Added Partition Preload API (PreloadPartition, PreloadPartitionAsync)\n* Fixed JVM thread leak\n* Fixed serialization performance for ISerializable", "url": "https://github.com/apache/ignite/pull/7367#discussion_r375442677", "createdAt": "2020-02-05T18:52:35Z", "author": {"login": "ptupitsyn"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,372 @@\n Apache Ignite Release Notes\n ===========================\n \n+\n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+\n+Ignite:\n+* Added @IgniteExperimental API annotation to notify users about unstable API\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added cache mode which allows reads with consistency check and fix\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support of best effort affinity for thin clients (partition awareness)\n+* Added support of node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Ass support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Service Grid now uses discovery messages for service deployment\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab523257e5d651202d8d1dc4dd6a043f60450e6d"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MjE0MA==", "bodyText": "Thank you, Pavel.\nI've fixed notes according your suggestions.", "url": "https://github.com/apache/ignite/pull/7367#discussion_r375452140", "createdAt": "2020-02-05T19:11:21Z", "author": {"login": "Mmuzaf"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,372 @@\n Apache Ignite Release Notes\n ===========================\n \n+\n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+\n+Ignite:\n+* Added @IgniteExperimental API annotation to notify users about unstable API\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added cache mode which allows reads with consistency check and fix\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support of best effort affinity for thin clients (partition awareness)\n+* Added support of node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Ass support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Service Grid now uses discovery messages for service deployment\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0MjY3Nw=="}, "originalCommit": {"oid": "ab523257e5d651202d8d1dc4dd6a043f60450e6d"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTcwODQxOnYy", "diffSide": "RIGHT", "path": "RELEASE_NOTES.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1MzozMVrOFoqEaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1MzozMVrOFoqEaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NjYxNw==", "bodyText": "remove row \"Switch to per-node TensorFlow worker strategy\"", "url": "https://github.com/apache/ignite/pull/7367#discussion_r378176617", "createdAt": "2020-02-12T10:53:31Z", "author": {"login": "zaleslaw"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,404 @@\n Apache Ignite Release Notes\n ===========================\n \n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+Ignite Experimental API:\n+* Added monitoring API - an exporter of Ignite metrics to external recipients\n+* Extended IgniteCache API with withReadRepair to perform backup nodes consistency check on each cache get attempt\n+* Marked MVCC feature (added by 2.7.0 RELEASE)\n+\n+\n+Ignite Monitoring:\n+* Added support of exposing objects as system views (SQL, JMX exporters supported \"out of the box\")\n+* Added support of storing and updating metrics (JMX, SQL, Log, OpenCensus exporters supported \"out of the box\")\n+* Added SQL query system view\n+* Added client connections (JDBC, ODBC, Thin) system view\n+* Added cluster nodes system view\n+* Added columns system view\n+* Added continuous query system view\n+* Added free-lists system view\n+* Added indexes system view\n+* Added metrics for PME timings\n+* Added metrics for transaction duration\n+* Added metrics to measure cache API performance\n+* Added metrics to show index building in progress\n+* Added scan query system view\n+* Added schemas system view\n+* Added striped thread pool queue system view\n+* Added support of metrics configuration via JMX\n+* Added tables system view\n+* Added total time threads parked if checkpoint throttling occurred\n+* Added transactions system view\n+* Moved CacheGroupMetrics to the new framework\n+* Moved ClusterMetricsMxBean to the new framework\n+* Moved Communication metrics to the new framework\n+* Moved GridJobMetricsProcessor to the new framework\n+* Moved GridLocalMetrics to the new framework\n+* Moved IgniteMXBean to the new framework\n+* Moved QueryMetrics to the new framework\n+* Moved TransactionMetricsMxBean to the new framework\n+\n+\n+Ignite Core:\n+* Added @IgniteExperimental annotation to notify users about early access API available\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added a withReadRepair for IgniteCache to perform backup nodes consistency check on each cache get attempt\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support best effort affinity for thin clients (partition awareness)\n+* Added support node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Added support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:\n+* Added Thin Client Partition Awareness\n+* Added Thin Client Expiry Policy\n+* Added Thin Client Cluster API\n+* Added .NET Core 3.x support\n+* Added Ignite.NET Dockerfile\n+* Added Runnable .NET Core assembly\n+* Added ICache.GetLongSize\n+* Added IClusterNode.Version\n+* Added ICompute.WithExecutor\n+* Added IIgnite.GetVersion\n+* Added IBinaryObjectBuilder.SetField(name, val, type) overload\n+* Added Partition Preload API (PreloadPartition, PreloadPartitionAsync)\n+* Fixed JVM thread leak\n+* Fixed serialization performance for ISerializable\n+\n+\n+Ignite C++:\n+* Added BinaryType methods implementations (GetTypeId, GetFieldId)\n+* Fixed compilation ODBC and thin client with OpenSSL 1.1\n+* Fixed compilation on ubuntu 18.04\n+* Implement atomic part of Cache API for C++ thin client (ReplaceIfEquals, RemoveIfEquals etc.)\n+* Improve Best Effort Affinity for C++ thin client\n+* Remove strong dependency on Boost 1.58.0\n+\n+\n+REST:\n+* Added \"caches\" param for \"top\" command\n+* Added baseline topology commands to REST API\n+* Added memory policy metrics via REST\n+* Fixed IGNITE_REST_SECURITY_TOKEN_TIMEOUT parameter is set in deciseconds instead of seconds\n+\n+\n+Visor:\n+* Added ability to set nodeId for VisorIdleVerifyDumpTask executed from ./control.sh --host HOST --cache idle_verify\n+* Added dynamic turn on/off cache statistics for Visor\n+* Added guard for cache restarting in progress for Visor tasks.\n+* Fixed rebalance status in Visor stays on 99.99%.\n+\n+\n+Control utility:\n+* Added ability to check CRC sums of stored pages\n+* Added ability to exclude cache from an output file\n+* Added ability to show more information about cache configuration\n+* Added ability to use simultaneous cache filtering options with control.sh --cache idle_verify\n+* Added command to deal with garbage in partitions which left after cache destroy in shared cache groups\n+* Added information about coordinator in control.sh output\n+* Added showing information about lost on idle_verify\n+* Added support SSL to work with baseline configuration (CommandHandler)\n+* Added support of changing baseline auto-adjust parameters via console.sh\n+* Added support request an SSL Keystore password and SSL truststore password\n+* Display time to baseline auto-adjust event in console.sh\n+* Fixed connection to cluster error in control.sh while using --cache\n+* Fixed control.sh --baseline remove outputs wrong error message when trying to remove a node from baseline\n+* Fixed control.sh not working on a multinode cluster setup\n+* Fixed idle_verify utility doesn't show both update counter and hash conflicts\n+* Fixed incorrect error message after three tries on an unsuccessful authorization\n+* Log all action performed thought control.sh\n+\n+\n+ML:\n+* Added ML logger and env variables in Spark ML Parser\n+* Added NamedVectors to replace HashMap in Model\n+* Added OneVsRest Trainer to handling cases with multiple class labels in a dataset\n+* Added Pipeline support to Cross-Validation process\n+* Added example for OneVsRest trainer/model usage\n+* Added integration between Ignite SQL and Ignite ML\n+* Added new Hyper-parameter tuning via Genetic Algorithm\n+* Added parser for parquet file with the instance of DecisionTreeClassificationModel from Spark ML\n+* Added parser for parquet file with the instance of DecisionTreeRegressor from Spark ML\n+* Added parser for parquet file with the instance of GBTRegressionModel from Spark ML\n+* Added parser for parquet file with the instance of GradientBoostedTreesModel from Spark ML\n+* Added parser for parquet file with the instance of KMeansModel from Spark ML\n+* Added parser for parquet file with the instance of LinearRegressionModel from Spark ML\n+* Added parser for parquet file with the instance of LinearSVCModel from Spark ML\n+* Added parser for parquet file with the instance of RandomForestClassificationModel from Spark ML\n+* Added parser for parquet file with the instance of RandomForestRegressionModel from Spark ML\n+* Added readme file to SparkModelParser module\n+* Added support for using H2O MOJO models for inference and prediction on Ignite data\n+* Added support new feature-label extraction API (Vectorizers) to Preprocessor trainers\n+* Added vector projection\n+* Advanced support of categorical features (LabelEncoding, Strings in vectorizers)\n+* Fixed the problem with ML Labmdas which are not working in binary builds\n+* Implementation of a distributed estimator\n+* Import models from MLeap\n+* Import models from XGBoost\n+* Improve model loading from the directory instead a full path to file with model\n+* Improve the PeerClassloading for ml related lambdas\n+* Improvements of IgniteModelStorage for IgniteModel and SQL functionality\n+* Initial phase of integration with Spark ML (parsing of Spark ML models from ml package)\n+* Merge InfModel and Model\n+* Merge XGBoost and Ignite ML trees together\n+* Provide metrics to evaluate the quality of the model\n+* Provide the recommendation engine to build the recommendation system over the Ignite cache and via SQL operators\n+* Replace all label/feature extractors on new vectorizers\n+* Stacking for training and inference\n+* Switch to per-node TensorFlow worker strategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f732810f53b44ba356c385a4a6d597684d2d36"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTcxMDM1OnYy", "diffSide": "RIGHT", "path": "RELEASE_NOTES.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NDowNVrOFoqFoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NDowNVrOFoqFoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NjkyOQ==", "bodyText": "Remove row \"Import models from MLeap\"", "url": "https://github.com/apache/ignite/pull/7367#discussion_r378176929", "createdAt": "2020-02-12T10:54:05Z", "author": {"login": "zaleslaw"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,404 @@\n Apache Ignite Release Notes\n ===========================\n \n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+Ignite Experimental API:\n+* Added monitoring API - an exporter of Ignite metrics to external recipients\n+* Extended IgniteCache API with withReadRepair to perform backup nodes consistency check on each cache get attempt\n+* Marked MVCC feature (added by 2.7.0 RELEASE)\n+\n+\n+Ignite Monitoring:\n+* Added support of exposing objects as system views (SQL, JMX exporters supported \"out of the box\")\n+* Added support of storing and updating metrics (JMX, SQL, Log, OpenCensus exporters supported \"out of the box\")\n+* Added SQL query system view\n+* Added client connections (JDBC, ODBC, Thin) system view\n+* Added cluster nodes system view\n+* Added columns system view\n+* Added continuous query system view\n+* Added free-lists system view\n+* Added indexes system view\n+* Added metrics for PME timings\n+* Added metrics for transaction duration\n+* Added metrics to measure cache API performance\n+* Added metrics to show index building in progress\n+* Added scan query system view\n+* Added schemas system view\n+* Added striped thread pool queue system view\n+* Added support of metrics configuration via JMX\n+* Added tables system view\n+* Added total time threads parked if checkpoint throttling occurred\n+* Added transactions system view\n+* Moved CacheGroupMetrics to the new framework\n+* Moved ClusterMetricsMxBean to the new framework\n+* Moved Communication metrics to the new framework\n+* Moved GridJobMetricsProcessor to the new framework\n+* Moved GridLocalMetrics to the new framework\n+* Moved IgniteMXBean to the new framework\n+* Moved QueryMetrics to the new framework\n+* Moved TransactionMetricsMxBean to the new framework\n+\n+\n+Ignite Core:\n+* Added @IgniteExperimental annotation to notify users about early access API available\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added a withReadRepair for IgniteCache to perform backup nodes consistency check on each cache get attempt\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support best effort affinity for thin clients (partition awareness)\n+* Added support node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Added support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:\n+* Added Thin Client Partition Awareness\n+* Added Thin Client Expiry Policy\n+* Added Thin Client Cluster API\n+* Added .NET Core 3.x support\n+* Added Ignite.NET Dockerfile\n+* Added Runnable .NET Core assembly\n+* Added ICache.GetLongSize\n+* Added IClusterNode.Version\n+* Added ICompute.WithExecutor\n+* Added IIgnite.GetVersion\n+* Added IBinaryObjectBuilder.SetField(name, val, type) overload\n+* Added Partition Preload API (PreloadPartition, PreloadPartitionAsync)\n+* Fixed JVM thread leak\n+* Fixed serialization performance for ISerializable\n+\n+\n+Ignite C++:\n+* Added BinaryType methods implementations (GetTypeId, GetFieldId)\n+* Fixed compilation ODBC and thin client with OpenSSL 1.1\n+* Fixed compilation on ubuntu 18.04\n+* Implement atomic part of Cache API for C++ thin client (ReplaceIfEquals, RemoveIfEquals etc.)\n+* Improve Best Effort Affinity for C++ thin client\n+* Remove strong dependency on Boost 1.58.0\n+\n+\n+REST:\n+* Added \"caches\" param for \"top\" command\n+* Added baseline topology commands to REST API\n+* Added memory policy metrics via REST\n+* Fixed IGNITE_REST_SECURITY_TOKEN_TIMEOUT parameter is set in deciseconds instead of seconds\n+\n+\n+Visor:\n+* Added ability to set nodeId for VisorIdleVerifyDumpTask executed from ./control.sh --host HOST --cache idle_verify\n+* Added dynamic turn on/off cache statistics for Visor\n+* Added guard for cache restarting in progress for Visor tasks.\n+* Fixed rebalance status in Visor stays on 99.99%.\n+\n+\n+Control utility:\n+* Added ability to check CRC sums of stored pages\n+* Added ability to exclude cache from an output file\n+* Added ability to show more information about cache configuration\n+* Added ability to use simultaneous cache filtering options with control.sh --cache idle_verify\n+* Added command to deal with garbage in partitions which left after cache destroy in shared cache groups\n+* Added information about coordinator in control.sh output\n+* Added showing information about lost on idle_verify\n+* Added support SSL to work with baseline configuration (CommandHandler)\n+* Added support of changing baseline auto-adjust parameters via console.sh\n+* Added support request an SSL Keystore password and SSL truststore password\n+* Display time to baseline auto-adjust event in console.sh\n+* Fixed connection to cluster error in control.sh while using --cache\n+* Fixed control.sh --baseline remove outputs wrong error message when trying to remove a node from baseline\n+* Fixed control.sh not working on a multinode cluster setup\n+* Fixed idle_verify utility doesn't show both update counter and hash conflicts\n+* Fixed incorrect error message after three tries on an unsuccessful authorization\n+* Log all action performed thought control.sh\n+\n+\n+ML:\n+* Added ML logger and env variables in Spark ML Parser\n+* Added NamedVectors to replace HashMap in Model\n+* Added OneVsRest Trainer to handling cases with multiple class labels in a dataset\n+* Added Pipeline support to Cross-Validation process\n+* Added example for OneVsRest trainer/model usage\n+* Added integration between Ignite SQL and Ignite ML\n+* Added new Hyper-parameter tuning via Genetic Algorithm\n+* Added parser for parquet file with the instance of DecisionTreeClassificationModel from Spark ML\n+* Added parser for parquet file with the instance of DecisionTreeRegressor from Spark ML\n+* Added parser for parquet file with the instance of GBTRegressionModel from Spark ML\n+* Added parser for parquet file with the instance of GradientBoostedTreesModel from Spark ML\n+* Added parser for parquet file with the instance of KMeansModel from Spark ML\n+* Added parser for parquet file with the instance of LinearRegressionModel from Spark ML\n+* Added parser for parquet file with the instance of LinearSVCModel from Spark ML\n+* Added parser for parquet file with the instance of RandomForestClassificationModel from Spark ML\n+* Added parser for parquet file with the instance of RandomForestRegressionModel from Spark ML\n+* Added readme file to SparkModelParser module\n+* Added support for using H2O MOJO models for inference and prediction on Ignite data\n+* Added support new feature-label extraction API (Vectorizers) to Preprocessor trainers\n+* Added vector projection\n+* Advanced support of categorical features (LabelEncoding, Strings in vectorizers)\n+* Fixed the problem with ML Labmdas which are not working in binary builds\n+* Implementation of a distributed estimator\n+* Import models from MLeap", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f732810f53b44ba356c385a4a6d597684d2d36"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTcxMTQ2OnYy", "diffSide": "RIGHT", "path": "RELEASE_NOTES.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NDoyN1rOFoqGXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NDoyN1rOFoqGXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NzExOQ==", "bodyText": "Remove \"Added readme file to SparkModelParser module\"", "url": "https://github.com/apache/ignite/pull/7367#discussion_r378177119", "createdAt": "2020-02-12T10:54:27Z", "author": {"login": "zaleslaw"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,404 @@\n Apache Ignite Release Notes\n ===========================\n \n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+Ignite Experimental API:\n+* Added monitoring API - an exporter of Ignite metrics to external recipients\n+* Extended IgniteCache API with withReadRepair to perform backup nodes consistency check on each cache get attempt\n+* Marked MVCC feature (added by 2.7.0 RELEASE)\n+\n+\n+Ignite Monitoring:\n+* Added support of exposing objects as system views (SQL, JMX exporters supported \"out of the box\")\n+* Added support of storing and updating metrics (JMX, SQL, Log, OpenCensus exporters supported \"out of the box\")\n+* Added SQL query system view\n+* Added client connections (JDBC, ODBC, Thin) system view\n+* Added cluster nodes system view\n+* Added columns system view\n+* Added continuous query system view\n+* Added free-lists system view\n+* Added indexes system view\n+* Added metrics for PME timings\n+* Added metrics for transaction duration\n+* Added metrics to measure cache API performance\n+* Added metrics to show index building in progress\n+* Added scan query system view\n+* Added schemas system view\n+* Added striped thread pool queue system view\n+* Added support of metrics configuration via JMX\n+* Added tables system view\n+* Added total time threads parked if checkpoint throttling occurred\n+* Added transactions system view\n+* Moved CacheGroupMetrics to the new framework\n+* Moved ClusterMetricsMxBean to the new framework\n+* Moved Communication metrics to the new framework\n+* Moved GridJobMetricsProcessor to the new framework\n+* Moved GridLocalMetrics to the new framework\n+* Moved IgniteMXBean to the new framework\n+* Moved QueryMetrics to the new framework\n+* Moved TransactionMetricsMxBean to the new framework\n+\n+\n+Ignite Core:\n+* Added @IgniteExperimental annotation to notify users about early access API available\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added a withReadRepair for IgniteCache to perform backup nodes consistency check on each cache get attempt\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support best effort affinity for thin clients (partition awareness)\n+* Added support node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Added support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:\n+* Added Thin Client Partition Awareness\n+* Added Thin Client Expiry Policy\n+* Added Thin Client Cluster API\n+* Added .NET Core 3.x support\n+* Added Ignite.NET Dockerfile\n+* Added Runnable .NET Core assembly\n+* Added ICache.GetLongSize\n+* Added IClusterNode.Version\n+* Added ICompute.WithExecutor\n+* Added IIgnite.GetVersion\n+* Added IBinaryObjectBuilder.SetField(name, val, type) overload\n+* Added Partition Preload API (PreloadPartition, PreloadPartitionAsync)\n+* Fixed JVM thread leak\n+* Fixed serialization performance for ISerializable\n+\n+\n+Ignite C++:\n+* Added BinaryType methods implementations (GetTypeId, GetFieldId)\n+* Fixed compilation ODBC and thin client with OpenSSL 1.1\n+* Fixed compilation on ubuntu 18.04\n+* Implement atomic part of Cache API for C++ thin client (ReplaceIfEquals, RemoveIfEquals etc.)\n+* Improve Best Effort Affinity for C++ thin client\n+* Remove strong dependency on Boost 1.58.0\n+\n+\n+REST:\n+* Added \"caches\" param for \"top\" command\n+* Added baseline topology commands to REST API\n+* Added memory policy metrics via REST\n+* Fixed IGNITE_REST_SECURITY_TOKEN_TIMEOUT parameter is set in deciseconds instead of seconds\n+\n+\n+Visor:\n+* Added ability to set nodeId for VisorIdleVerifyDumpTask executed from ./control.sh --host HOST --cache idle_verify\n+* Added dynamic turn on/off cache statistics for Visor\n+* Added guard for cache restarting in progress for Visor tasks.\n+* Fixed rebalance status in Visor stays on 99.99%.\n+\n+\n+Control utility:\n+* Added ability to check CRC sums of stored pages\n+* Added ability to exclude cache from an output file\n+* Added ability to show more information about cache configuration\n+* Added ability to use simultaneous cache filtering options with control.sh --cache idle_verify\n+* Added command to deal with garbage in partitions which left after cache destroy in shared cache groups\n+* Added information about coordinator in control.sh output\n+* Added showing information about lost on idle_verify\n+* Added support SSL to work with baseline configuration (CommandHandler)\n+* Added support of changing baseline auto-adjust parameters via console.sh\n+* Added support request an SSL Keystore password and SSL truststore password\n+* Display time to baseline auto-adjust event in console.sh\n+* Fixed connection to cluster error in control.sh while using --cache\n+* Fixed control.sh --baseline remove outputs wrong error message when trying to remove a node from baseline\n+* Fixed control.sh not working on a multinode cluster setup\n+* Fixed idle_verify utility doesn't show both update counter and hash conflicts\n+* Fixed incorrect error message after three tries on an unsuccessful authorization\n+* Log all action performed thought control.sh\n+\n+\n+ML:\n+* Added ML logger and env variables in Spark ML Parser\n+* Added NamedVectors to replace HashMap in Model\n+* Added OneVsRest Trainer to handling cases with multiple class labels in a dataset\n+* Added Pipeline support to Cross-Validation process\n+* Added example for OneVsRest trainer/model usage\n+* Added integration between Ignite SQL and Ignite ML\n+* Added new Hyper-parameter tuning via Genetic Algorithm\n+* Added parser for parquet file with the instance of DecisionTreeClassificationModel from Spark ML\n+* Added parser for parquet file with the instance of DecisionTreeRegressor from Spark ML\n+* Added parser for parquet file with the instance of GBTRegressionModel from Spark ML\n+* Added parser for parquet file with the instance of GradientBoostedTreesModel from Spark ML\n+* Added parser for parquet file with the instance of KMeansModel from Spark ML\n+* Added parser for parquet file with the instance of LinearRegressionModel from Spark ML\n+* Added parser for parquet file with the instance of LinearSVCModel from Spark ML\n+* Added parser for parquet file with the instance of RandomForestClassificationModel from Spark ML\n+* Added parser for parquet file with the instance of RandomForestRegressionModel from Spark ML\n+* Added readme file to SparkModelParser module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f732810f53b44ba356c385a4a6d597684d2d36"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTcxMzQ4OnYy", "diffSide": "RIGHT", "path": "RELEASE_NOTES.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NTowMVrOFoqHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMDo1NTowMVrOFoqHjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3NzQyMA==", "bodyText": "Remove \"Added example for OneVsRest trainer/model usage\"", "url": "https://github.com/apache/ignite/pull/7367#discussion_r378177420", "createdAt": "2020-02-12T10:55:01Z", "author": {"login": "zaleslaw"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,404 @@\n Apache Ignite Release Notes\n ===========================\n \n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+Ignite Experimental API:\n+* Added monitoring API - an exporter of Ignite metrics to external recipients\n+* Extended IgniteCache API with withReadRepair to perform backup nodes consistency check on each cache get attempt\n+* Marked MVCC feature (added by 2.7.0 RELEASE)\n+\n+\n+Ignite Monitoring:\n+* Added support of exposing objects as system views (SQL, JMX exporters supported \"out of the box\")\n+* Added support of storing and updating metrics (JMX, SQL, Log, OpenCensus exporters supported \"out of the box\")\n+* Added SQL query system view\n+* Added client connections (JDBC, ODBC, Thin) system view\n+* Added cluster nodes system view\n+* Added columns system view\n+* Added continuous query system view\n+* Added free-lists system view\n+* Added indexes system view\n+* Added metrics for PME timings\n+* Added metrics for transaction duration\n+* Added metrics to measure cache API performance\n+* Added metrics to show index building in progress\n+* Added scan query system view\n+* Added schemas system view\n+* Added striped thread pool queue system view\n+* Added support of metrics configuration via JMX\n+* Added tables system view\n+* Added total time threads parked if checkpoint throttling occurred\n+* Added transactions system view\n+* Moved CacheGroupMetrics to the new framework\n+* Moved ClusterMetricsMxBean to the new framework\n+* Moved Communication metrics to the new framework\n+* Moved GridJobMetricsProcessor to the new framework\n+* Moved GridLocalMetrics to the new framework\n+* Moved IgniteMXBean to the new framework\n+* Moved QueryMetrics to the new framework\n+* Moved TransactionMetricsMxBean to the new framework\n+\n+\n+Ignite Core:\n+* Added @IgniteExperimental annotation to notify users about early access API available\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added a withReadRepair for IgniteCache to perform backup nodes consistency check on each cache get attempt\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support best effort affinity for thin clients (partition awareness)\n+* Added support node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Added support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:\n+* Added Thin Client Partition Awareness\n+* Added Thin Client Expiry Policy\n+* Added Thin Client Cluster API\n+* Added .NET Core 3.x support\n+* Added Ignite.NET Dockerfile\n+* Added Runnable .NET Core assembly\n+* Added ICache.GetLongSize\n+* Added IClusterNode.Version\n+* Added ICompute.WithExecutor\n+* Added IIgnite.GetVersion\n+* Added IBinaryObjectBuilder.SetField(name, val, type) overload\n+* Added Partition Preload API (PreloadPartition, PreloadPartitionAsync)\n+* Fixed JVM thread leak\n+* Fixed serialization performance for ISerializable\n+\n+\n+Ignite C++:\n+* Added BinaryType methods implementations (GetTypeId, GetFieldId)\n+* Fixed compilation ODBC and thin client with OpenSSL 1.1\n+* Fixed compilation on ubuntu 18.04\n+* Implement atomic part of Cache API for C++ thin client (ReplaceIfEquals, RemoveIfEquals etc.)\n+* Improve Best Effort Affinity for C++ thin client\n+* Remove strong dependency on Boost 1.58.0\n+\n+\n+REST:\n+* Added \"caches\" param for \"top\" command\n+* Added baseline topology commands to REST API\n+* Added memory policy metrics via REST\n+* Fixed IGNITE_REST_SECURITY_TOKEN_TIMEOUT parameter is set in deciseconds instead of seconds\n+\n+\n+Visor:\n+* Added ability to set nodeId for VisorIdleVerifyDumpTask executed from ./control.sh --host HOST --cache idle_verify\n+* Added dynamic turn on/off cache statistics for Visor\n+* Added guard for cache restarting in progress for Visor tasks.\n+* Fixed rebalance status in Visor stays on 99.99%.\n+\n+\n+Control utility:\n+* Added ability to check CRC sums of stored pages\n+* Added ability to exclude cache from an output file\n+* Added ability to show more information about cache configuration\n+* Added ability to use simultaneous cache filtering options with control.sh --cache idle_verify\n+* Added command to deal with garbage in partitions which left after cache destroy in shared cache groups\n+* Added information about coordinator in control.sh output\n+* Added showing information about lost on idle_verify\n+* Added support SSL to work with baseline configuration (CommandHandler)\n+* Added support of changing baseline auto-adjust parameters via console.sh\n+* Added support request an SSL Keystore password and SSL truststore password\n+* Display time to baseline auto-adjust event in console.sh\n+* Fixed connection to cluster error in control.sh while using --cache\n+* Fixed control.sh --baseline remove outputs wrong error message when trying to remove a node from baseline\n+* Fixed control.sh not working on a multinode cluster setup\n+* Fixed idle_verify utility doesn't show both update counter and hash conflicts\n+* Fixed incorrect error message after three tries on an unsuccessful authorization\n+* Log all action performed thought control.sh\n+\n+\n+ML:\n+* Added ML logger and env variables in Spark ML Parser\n+* Added NamedVectors to replace HashMap in Model\n+* Added OneVsRest Trainer to handling cases with multiple class labels in a dataset\n+* Added Pipeline support to Cross-Validation process\n+* Added example for OneVsRest trainer/model usage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f732810f53b44ba356c385a4a6d597684d2d36"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTczNTM3OnYy", "diffSide": "RIGHT", "path": "RELEASE_NOTES.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTowMTozM1rOFoqU3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTowMTozM1rOFoqU3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4MDgzMA==", "bodyText": "add row \"Added various Naive Bayes classifiers\" and row \"Added Gaussian Mixture Model (GMM) trainer with fixed components\"", "url": "https://github.com/apache/ignite/pull/7367#discussion_r378180830", "createdAt": "2020-02-12T11:01:33Z", "author": {"login": "zaleslaw"}, "path": "RELEASE_NOTES.txt", "diffHunk": "@@ -1,6 +1,404 @@\n Apache Ignite Release Notes\n ===========================\n \n+Apache Ignite In-Memory Database and Caching Platform 2.8\n+---------------------------------------------------------\n+\n+Ignite Experimental API:\n+* Added monitoring API - an exporter of Ignite metrics to external recipients\n+* Extended IgniteCache API with withReadRepair to perform backup nodes consistency check on each cache get attempt\n+* Marked MVCC feature (added by 2.7.0 RELEASE)\n+\n+\n+Ignite Monitoring:\n+* Added support of exposing objects as system views (SQL, JMX exporters supported \"out of the box\")\n+* Added support of storing and updating metrics (JMX, SQL, Log, OpenCensus exporters supported \"out of the box\")\n+* Added SQL query system view\n+* Added client connections (JDBC, ODBC, Thin) system view\n+* Added cluster nodes system view\n+* Added columns system view\n+* Added continuous query system view\n+* Added free-lists system view\n+* Added indexes system view\n+* Added metrics for PME timings\n+* Added metrics for transaction duration\n+* Added metrics to measure cache API performance\n+* Added metrics to show index building in progress\n+* Added scan query system view\n+* Added schemas system view\n+* Added striped thread pool queue system view\n+* Added support of metrics configuration via JMX\n+* Added tables system view\n+* Added total time threads parked if checkpoint throttling occurred\n+* Added transactions system view\n+* Moved CacheGroupMetrics to the new framework\n+* Moved ClusterMetricsMxBean to the new framework\n+* Moved Communication metrics to the new framework\n+* Moved GridJobMetricsProcessor to the new framework\n+* Moved GridLocalMetrics to the new framework\n+* Moved IgniteMXBean to the new framework\n+* Moved QueryMetrics to the new framework\n+* Moved TransactionMetricsMxBean to the new framework\n+\n+\n+Ignite Core:\n+* Added @IgniteExperimental annotation to notify users about early access API available\n+* Added IGNITE_CONSISTENT_ID system property\n+* Added IGNITE_DISCOVERY_DISABLE_CACHE_METRICS_UPDATE system property\n+* Added IGNITE_YARN_QUEUE property to override YARN queue name\n+* Added JMX ability to exclude node from topology\n+* Added JMX metrics for partition map exchange timings\n+* Added SSL support for ZookeeperSpi\n+* Added Spark SQL Table Schema Specification\n+* Added WAL page snapshot records compression\n+* Added ability to override all caches 'rebalanceThrottle' option via JVM node option\n+* Added ability to set default parallelism of rebuild indexes in configuration\n+* Added ability to track system/user time held in the transaction\n+* Added binary mode (withKeepBinary) to Data Structures Queue\n+* Added a withReadRepair for IgniteCache to perform backup nodes consistency check on each cache get attempt\n+* Added cache validation logic on primary node instead of near node\n+* Added cluster activation/deactivation events\n+* Added configuration for explicit plugins providing (via spring configuration)\n+* Added disk page compression support\n+* Added extra logging for client-server connections in TcpDiscoverySpi implementations\n+* Added information about possible long GC pause to checkpoint started message\n+* Added initial support of Spark 2.4 (new internal changes since Spark 2.3)\n+* Added parallel write&evict same key in CacheWriteBehindStore\n+* Added possibility to have different rebalance thread pool size for nodes in the cluster\n+* Added support TcpCommunicationSpi of TLSv1.3\n+* Added support TcpDiscoveryS3IpFinder client-side encryption\n+* Added support UriDeploymentSpi for JAR files\n+* Added support array as key for the cache\n+* Added support discovery messages for service deployment\n+* Added support for baseline auto-adjustment\n+* Added support for Kubernetes discovery for non-ready pods\n+* Added support for spring data update/delete operations\n+* Added support logical recovery phase outside of PME\n+* Added support best effort affinity for thin clients (partition awareness)\n+* Added support node discovery through AWS ELB\n+* Added transaction label to transaction cache events (e.g. EVT_TX_STARTED, EVT_TX_COMMITTED)\n+* Added transactions support to thin clients\n+* Added 'limit' as a parameter for TextQuery constructor and builder\n+* Added ignite-spring-data_2.2 module to be used with Spring Framework 5.2.x and Spring Data 2.2.x\n+* Added integration with hibernate 5.3\n+* Added support for non-blocking PME on node left\n+* Added support for IgniteSpark skipStore option for internal dataStreamer (IgniteRdd and Ignite DataFrame)\n+* Avoid synchronous initialization of storage managers during PME\n+* Fixed B+Tree corruption caused by byte array values\n+* Fixed ComputeJob cancel method executes with the wrong SecurityContext\n+* Fixed IGNITE_ENABLE_FORCIBLE_NODE_KILL system property behaviour\n+* Fixed IO race during read\\write cache configurations\n+* Fixed Ignite Queue hanging after several read/write operations\n+* Fixed IgniteCache replace method does not work in a binary mode without classes\n+* Fixed P2P for remote filter and filter factory\n+* Fixed RobinHoodBackwardShiftHashMap on big-endian architectures\n+* Fixed ScanQuery doesn't take lost partitions into account\n+* Fixed Spark DataFrame will get the wrong schema if a user executes add/drop column DDL\n+* Fixed TTL manager may not clear entries from the underlying CacheDataStore\n+* Fixed TcpDiscovery lock on SSLSocket close\n+* Fixed WebSessionFilter does not work with jetty 9.4 anymore\n+* Fixed a new exchange coordinator skips client fast reply for a previous exchange\n+* Fixed activate\\deactivate hanging\n+* Fixed affinity calculation and fetching on client nodes\n+* Fixed binary metadata is not registered during the start of the cache\n+* Fixed blinking baseline node sometimes unable to connect to a cluster\n+* Fixed cache start while the cache is restarting with the same name\n+* Fixed checkpoint temp files don't removed on a node start\n+* Fixed client does not survive after several cluster restarts for ZookeeperDiscoverySpi\n+* Fixed cluster hanging on cache invoke with binary objects creation\n+* Fixed compatibility issue with JDBC drivers of older versions\n+* Fixed continuous query handlers are not called on backups when a one-phase commit is used\n+* Fixed data corruption when an exception occurred during tx commit without node stopping\n+* Fixed data loss during starting of the nodes with empty persistence data storage\n+* Fixed deadlock between restore partition states and checkpoint begin phase\n+* Fixed deadlock on client node in case of network problems or long GC pauses\n+* Fixed detection of corrupted index storage on a file system\n+* Fixed dynamic columns and indexes can be lost after the cluster restart\n+* Fixed exchange hanging while new node restoring state from disk and starting caches\n+* Fixed exchange on node left hanging when a cluster is in the transition state\n+* Fixed index usage is not applicable for mixed IN and EQUALS queries\n+* Fixed node hanging on join to topology\n+* Fixed node hanging with TcpDiscoveryS3IpFinder while stopping\n+* Fixed p2p incorrectly loaded classes of remote query filter\n+* Fixed partition hanging in MOVING state after node joined and rebalanced\n+* Fixed partition may restore wrong MOVING state during crash recovery\n+* Fixed possible exceptions during simultaneous cache group stop and partition eviction\n+* Fixed race between rollback exception and timeout exception on changing transaction state\n+* Fixed segmenting node can cause ring topology broke\n+* Fixed stopping caches concurrently with node join may lead to a crash of the node\n+* Fixed transaction commit exception about missing binary schema on large clusters\n+* Fixed transaction prepare-commit ordering in one-phase commit scenario\n+* Fixed transactions that potentially may cause hanging in COMMITING state and partitions desync\n+* Fixed validation of joining nodes for Zookeeper\n+* Fixed when collocated IgniteSet close is not working on non-affinity node\n+* Forbidding joining persistence node to an in-memory cluster\n+* IGNITE_DISABLE_WAL_DURING_REBALANCING turned on by default\n+* Improved CRC32 calculation algorithms for internal usages\n+* Improved LRT diagnostic messages\n+* Improved PME speed during full partition map generation (parallel execution)\n+* Improved PME speed during full partition map updating (parallel execution)\n+* Improved PME speed for starting multiple caches on joining node\n+* Improved large clusters discovery meta exchange (by add compression on Discovery data bag)\n+* Improved logging for the index rebuild procedure\n+* Improved read of hot variables in WAL\n+* Improved speed of WAL segment archiving\n+* Improved speed of checkpoint finalization on binary memory recovery\n+* Optimize GC pressure on rebalance procedure\n+* Optimize HistoryAffinityAssignment heap usage\n+* Performance improvements for affinity initialization for started cache groups\n+* Removed IGNITE_SERVICES_COMPATIBILITY_MODE system property\n+* Removed Java 7 and AI 1.x leftovers from IgniteSystemProperties & IgniteProductVersion\n+* Replaced IGNITE_BINARY_META_UPDATE_TIMEOUT with IGNITE_WAIT_SCHEMA_UPDATE\n+* Massive performance and stability improvements\n+\n+\n+SQL:\n+* Added Decimal precision and scale constraint\n+* Added KILL QUERY command\n+* Added a table row count statistics for the local queries\n+* Added a view with the list of existing SCHEMAS\n+* Added a view with the list of existing tables\n+* Added ability to specify query parallelism in CREATE TABLE's WITH \"\" clause\n+* Added automatic pages history dump on CorruptedTreeException\n+* Added cluster-wide unique identifier for running queries\n+* Added counter left partition for index rebuild to cache group metrics\n+* Added default query timeout\n+* Added drop _VER field support\n+* Added extract partition info from BETWEEN and range conditions for integer types\n+* Added extract partition info from JOINs\n+* Added lazy execution for the local queries\n+* Added query history statistics API\n+* Added support for data page scan on ScanQuery, SqlQuery and SqlFieldsQuery\n+* Added support of allocating memory for a data region when the first cache assigned to this region is created\n+* Added support of autoclose iterator for query cursor when all data has been read\n+* Added support of trivial IN-operation for partition extraction\n+* Added tracking all running queries on initial query node\n+* Added validation for PK index does not use wrapped object\n+* Added warning about long query execution printed by timeout (instead of on query finished)\n+* Disabled implicit distributed joins when queryParallelizm > 1\n+* Do not store default precision and scale in the QueryEntity for CHAR/VARCHAR and DECIMAL types\n+* Fixed DDL operations don't work on not started caches on non-affinity nodes\n+* Fixed IF NOT EXISTS in CREATE TABLE doesn't work\n+* Fixed SQL event is not fired when a query is reduced to local form\n+* Fixed SQL query when the value has SQL field which name equals to affinity key name\n+* Fixed cache destroy operation which has created via SQL\n+* Fixed creating table with DateTime for PK on a server node\n+* Fixed error parsing INLINE_SIZE if CREATE INDEX is one of the multiple statements\n+* Fixed exception after change column type (drop, add)\n+* Fixed partition pruning is integrated with DML\n+* Fixed security checks are skipped on some SELECT paths\n+* Fixed subjectId is lost for SqlFieldsQuery event on the local node\n+* Fixed when same SQL requests with multiple statements produce a different result\n+* Fixed when unable to find row by an index created on partial baseline topology\n+* Forbid mixing _key and key columns in the DML queries\n+* Move rebalance configuration properties to the IgniteConfiguration level\n+* Optimize query execution if it targets only one or none partitions\n+* Reduce excessive int boxing when accessing cache by ID\n+* Remove scan index for merge table\n+* Renamed IGNITE schema to SYS\n+\n+\n+MVCC:\n+* Added continuous query failover for mvcc-caches\n+* Added deadlock detector\n+* Added late affinity assignment support\n+* Added mvcc-compatible cache peek operation for key-value API\n+* Fixed JVM crash when node stopped with errors\n+* Fixed SQL API methods should throw proper TransactionExceptions in case of tx failure\n+* Fixed client operation hangs if all data nodes left the cluster\n+* Fixed client reconnect became unstable after mvcc coordinator reassign\n+* Fixed concurrent cache stop can cause vacuum failure\n+* Fixed failure to perform non-MVCC SQL from transactions\n+* Fixed implicit mvcc transaction could use completed one instead of starting new\n+* Fixed incorrect data region metrics\n+* Fixed incorrect exception is thrown if no data nodes found for a partition\n+* Fixed missing EntryProcessor resource injection\n+* Fixed mvcc history can be missed during remove operation\n+* Fixed mvcc-cache rebalance procedure leads to data loss\n+* Fixed query trackers are not released\n+* Fixed query with specified explicit partitions\n+* Fixed race on invokeAll operations\n+* Fixed read transactions remap when coordinator fails\n+* Fixed removeAll on unstable topology\n+* Fixed transaction asynchronous rollback\n+* Fixed update operation hanging on backup on unstable topology\n+* Fixed vacuums do not clean up all outdated versions\n+\n+\n+JDBC:\n+* Added cache expiry policies\n+* Added support JDBC thin driver: connection timeout\n+* Added support data page scan for JDBC\n+* Added support of handling multiple async requests in parallel\n+* Added support query cancel\n+* Added support query timeout\n+* Fixed JDBC getPrimaryKeys returns wrong value for COLUMN_NAME\n+* Fixed JDBC thin driver metadata misses caches with queryEntities and names containing underscores\n+* Fixed STREAMING mode fails on streamer reopen on not ordered mode\n+* Fixed memory leak caused by executing a JDBC prepared statement\n+* Fixed sqline command !tables works incorrectly for a client node\n+* Fixed suspended optimistic transaction automatically resumes to last thread after a timeout\n+* Now driver starts with a random server to connect\n+* Updated handshake protocol so that the node returns its UUID\n+\n+\n+ODBC:\n+* Fixed SQLColumns does not work for tables with escape sequences in name\n+* Fixed backward compatibility between 2.5 and 2.7\n+\n+\n+Web Agent:\n+* Added support for the cluster-ID\n+* Added support of two way SSL authentication in Web Console agent\n+* Fixed flag --disable-demo doesn't work\n+* Fixed hostname verifier must be disabled if \"-Dtrust.all=true\".\n+* Improve information message in case REST command failed on cluster\n+* Improve logging when cluster topology changed\n+\n+\n+Web Console:\n+* Added TypeScript support\n+* Added ability to cancel queries\n+* Added ability to configure disk page compression properties\n+* Added check for supported MongoDb version before WC start\n+* Added email confirmation\n+* Added management events (EVT_MANAGEMENT_TASK_STARTED)\n+* Added missed configurations for some of the properties from IgniteConfiguration\n+* Added option to disable self-registration on Web Console\n+* Added possibility to configure distributed MVCC\n+* Added support for \"date\", \"time\" and \"date-and-time\" on InputDialog\n+* Added support for \"type=number\" on InputDialog\n+* Added support for new countries Taiwan, Hong Kong, Singapore\n+* Fixed can't select cluster memory eviction mode\n+* Fixed long-running SQL queries could be randomly cancelled from WC\n+* Fixed memory leak in chart component\n+* Fixed priority for field validations\n+* Fixed validation in Firefox\n+* Update styles of top menu items\n+* Update to RxJS 6\n+\n+\n+Node.js:\n+* Fixed Node.js thin client UUID marshalling\n+\n+\n+Ignite .NET:\n+* Added Thin Client Partition Awareness\n+* Added Thin Client Expiry Policy\n+* Added Thin Client Cluster API\n+* Added .NET Core 3.x support\n+* Added Ignite.NET Dockerfile\n+* Added Runnable .NET Core assembly\n+* Added ICache.GetLongSize\n+* Added IClusterNode.Version\n+* Added ICompute.WithExecutor\n+* Added IIgnite.GetVersion\n+* Added IBinaryObjectBuilder.SetField(name, val, type) overload\n+* Added Partition Preload API (PreloadPartition, PreloadPartitionAsync)\n+* Fixed JVM thread leak\n+* Fixed serialization performance for ISerializable\n+\n+\n+Ignite C++:\n+* Added BinaryType methods implementations (GetTypeId, GetFieldId)\n+* Fixed compilation ODBC and thin client with OpenSSL 1.1\n+* Fixed compilation on ubuntu 18.04\n+* Implement atomic part of Cache API for C++ thin client (ReplaceIfEquals, RemoveIfEquals etc.)\n+* Improve Best Effort Affinity for C++ thin client\n+* Remove strong dependency on Boost 1.58.0\n+\n+\n+REST:\n+* Added \"caches\" param for \"top\" command\n+* Added baseline topology commands to REST API\n+* Added memory policy metrics via REST\n+* Fixed IGNITE_REST_SECURITY_TOKEN_TIMEOUT parameter is set in deciseconds instead of seconds\n+\n+\n+Visor:\n+* Added ability to set nodeId for VisorIdleVerifyDumpTask executed from ./control.sh --host HOST --cache idle_verify\n+* Added dynamic turn on/off cache statistics for Visor\n+* Added guard for cache restarting in progress for Visor tasks.\n+* Fixed rebalance status in Visor stays on 99.99%.\n+\n+\n+Control utility:\n+* Added ability to check CRC sums of stored pages\n+* Added ability to exclude cache from an output file\n+* Added ability to show more information about cache configuration\n+* Added ability to use simultaneous cache filtering options with control.sh --cache idle_verify\n+* Added command to deal with garbage in partitions which left after cache destroy in shared cache groups\n+* Added information about coordinator in control.sh output\n+* Added showing information about lost on idle_verify\n+* Added support SSL to work with baseline configuration (CommandHandler)\n+* Added support of changing baseline auto-adjust parameters via console.sh\n+* Added support request an SSL Keystore password and SSL truststore password\n+* Display time to baseline auto-adjust event in console.sh\n+* Fixed connection to cluster error in control.sh while using --cache\n+* Fixed control.sh --baseline remove outputs wrong error message when trying to remove a node from baseline\n+* Fixed control.sh not working on a multinode cluster setup\n+* Fixed idle_verify utility doesn't show both update counter and hash conflicts\n+* Fixed incorrect error message after three tries on an unsuccessful authorization\n+* Log all action performed thought control.sh\n+\n+\n+ML:\n+* Added ML logger and env variables in Spark ML Parser", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f732810f53b44ba356c385a4a6d597684d2d36"}, "originalPosition": 346}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2593, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}