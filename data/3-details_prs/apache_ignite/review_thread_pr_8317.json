{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3ODY5ODIw", "number": 8317, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjozMToxN1rOErl0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo0Mjo1MVrOExHHSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTQzOTE4OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/ClusterCachesInfo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjozMToxN1rOHecPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMjozMToxN1rOHecPlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY4MjA2OA==", "bodyText": "I think we should to write that cache will be started dynamically", "url": "https://github.com/apache/ignite/pull/8317#discussion_r501682068", "createdAt": "2020-10-08T12:31:17Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/ClusterCachesInfo.java", "diffHunk": "@@ -2003,6 +2003,12 @@ private String processJoiningNode(CacheJoinNodeDiscoveryData joinData, UUID node\n             if (!registeredCaches.containsKey(cfg.getName())) {\n                 String conflictErr = checkCacheConflict(cfg);\n \n+                if (conflictErr == null && cfg.isEncryptionEnabled() && !locJoin &&\n+                    ctx.encryption().groupKey(CU.cacheGroupId(cfg.getName(), cfg.getGroupName())) == null) {\n+                    conflictErr = \"Encryption key has not been generated. \" +\n+                        \"The client node must dynamically start this cache [cacheName=\" + cfg.getName() + \"]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8eafef5ef9fe0c2bcd8610ef196e56751cd9df71"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5OTMyMjMzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/encryption/EncryptedCacheNodeJoinTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo0Mjo1MVrOHnEbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwODo1MDo0NFrOHnEvOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyOTE2Mg==", "bodyText": "Unnecessary line break", "url": "https://github.com/apache/ignite/pull/8317#discussion_r510729162", "createdAt": "2020-10-23T08:42:51Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/encryption/EncryptedCacheNodeJoinTest.java", "diffHunk": "@@ -204,6 +221,106 @@ public void testClientNodeJoin() throws Exception {\n         createEncryptedCache(client, grid0, cacheName(), null);\n     }\n \n+    /** */\n+    @Test\n+    public void testClientNodeJoinActiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, true, true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeJoinActiveClusterWithExistingStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, true, false);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeJoinInactiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, false, true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeJoinInactiveClusterWithExistingStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, false, false);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testServerNodeJoinActiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(false, true, true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testServerNodeJoinInactiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(false, false, true);\n+    }\n+\n+    /**\n+     * @param client {@code True} to test client node join, {@code False} to test server node join.\n+     * @param activateBeforeJoin {@code True} to activate the server before joining the client node.\n+     * @param newCfg {@code True} to configure cache on the last joined node. {@code False} to configure on all nodes.\n+     */\n+    public void checkNodeJoinWithStaticCacheConfig(\n+        boolean client,\n+        boolean activateBeforeJoin,\n+        boolean newCfg\n+    ) throws Exception {\n+        if (!newCfg)\n+            configureCache = true;\n+\n+        startGrid(GRID_0);\n+        startGrid(GRID_6);\n+\n+        IgniteEx client1 = startClientGrid(\"client1\");\n+\n+        if (newCfg)\n+            configureCache = true;\n+\n+        if (activateBeforeJoin)\n+            grid(GRID_0).cluster().state(ClusterState.ACTIVE);\n+\n+        if (client && newCfg) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454a9c235501ef18713d92d691c7fe935884e0d3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDczNDEzNw==", "bodyText": "Done, thanks", "url": "https://github.com/apache/ignite/pull/8317#discussion_r510734137", "createdAt": "2020-10-23T08:50:44Z", "author": {"login": "xtern"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/encryption/EncryptedCacheNodeJoinTest.java", "diffHunk": "@@ -204,6 +221,106 @@ public void testClientNodeJoin() throws Exception {\n         createEncryptedCache(client, grid0, cacheName(), null);\n     }\n \n+    /** */\n+    @Test\n+    public void testClientNodeJoinActiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, true, true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeJoinActiveClusterWithExistingStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, true, false);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeJoinInactiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, false, true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeJoinInactiveClusterWithExistingStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(true, false, false);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testServerNodeJoinActiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(false, true, true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testServerNodeJoinInactiveClusterWithNewStaticCacheConfig() throws Exception {\n+        checkNodeJoinWithStaticCacheConfig(false, false, true);\n+    }\n+\n+    /**\n+     * @param client {@code True} to test client node join, {@code False} to test server node join.\n+     * @param activateBeforeJoin {@code True} to activate the server before joining the client node.\n+     * @param newCfg {@code True} to configure cache on the last joined node. {@code False} to configure on all nodes.\n+     */\n+    public void checkNodeJoinWithStaticCacheConfig(\n+        boolean client,\n+        boolean activateBeforeJoin,\n+        boolean newCfg\n+    ) throws Exception {\n+        if (!newCfg)\n+            configureCache = true;\n+\n+        startGrid(GRID_0);\n+        startGrid(GRID_6);\n+\n+        IgniteEx client1 = startClientGrid(\"client1\");\n+\n+        if (newCfg)\n+            configureCache = true;\n+\n+        if (activateBeforeJoin)\n+            grid(GRID_0).cluster().state(ClusterState.ACTIVE);\n+\n+        if (client && newCfg) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcyOTE2Mg=="}, "originalCommit": {"oid": "454a9c235501ef18713d92d691c7fe935884e0d3"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2703, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}