{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDg0OTE3", "number": 7909, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NzoxOFrOEDzTGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NzoxOFrOEDzTGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDIxNjU4OnYy", "diffSide": "RIGHT", "path": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NzoxOFrOGhCAxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTo1NzoxOFrOGhCAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4OTE1OA==", "bodyText": "How RexUtil.andNot handles NULL value? In the ticket's example\nSELECT * FROM emps WHERE name='A' \nUNION ALL\nSELECT * FROM emps WHERE surname='B'  AND LNNVL(name='A')\n\nwe need to make sure that row name=NULL, surname=B will be returned by the rewritten plan. Can we verify it by writing a test?", "url": "https://github.com/apache/ignite/pull/7909#discussion_r437289158", "createdAt": "2020-06-09T09:57:18Z", "author": {"login": "rkondakov"}, "path": "modules/calcite/src/main/java/org/apache/ignite/internal/processors/query/calcite/rule/logical/LogicalOrToUnionRule.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.calcite.rule.logical;\n+\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import org.apache.calcite.plan.RelOptCluster;\n+import org.apache.calcite.plan.RelOptRule;\n+import org.apache.calcite.plan.RelOptRuleCall;\n+import org.apache.calcite.plan.RelOptUtil;\n+import org.apache.calcite.rel.RelNode;\n+import org.apache.calcite.rel.core.RelFactories;\n+import org.apache.calcite.rel.logical.LogicalFilter;\n+import org.apache.calcite.rex.RexNode;\n+import org.apache.calcite.rex.RexUtil;\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.tools.RelBuilder;\n+\n+/**\n+ * Converts OR to UNION ALL.\n+ */\n+public class LogicalOrToUnionRule extends RelOptRule {\n+    /** Instance. */\n+    public static final RelOptRule INSTANCE = new LogicalOrToUnionRule(LogicalFilter.class, \"LogicalOrToUnionRule\");\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param clazz Class of relational expression to match.\n+     * @param desc  Description, or null to guess description\n+     */\n+    private LogicalOrToUnionRule(Class<LogicalFilter> clazz, String desc) {\n+        super(\n+            operand(clazz, any()),\n+            RelFactories.LOGICAL_BUILDER, desc);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void onMatch(RelOptRuleCall call) {\n+        final LogicalFilter rel = call.rel(0);\n+        final RelOptCluster cluster = rel.getCluster();\n+\n+        RexNode dnf = RexUtil.toDnf(cluster.getRexBuilder(), rel.getCondition());\n+\n+        if (!dnf.isA(SqlKind.OR))\n+            return;\n+\n+        List<RexNode> operands = RelOptUtil.disjunctions(dnf);\n+\n+        if (operands.size() != 2)\n+            return;\n+\n+        RelNode input = rel.getInput(0);\n+\n+        call.transformTo(rel, ImmutableMap.of(\n+            createUnionAll(cluster, input, operands.get(0), operands.get(1)), rel,\n+            createUnionAll(cluster, input, operands.get(1), operands.get(0)), rel\n+        ));\n+    }\n+\n+    /**\n+     * Creates 'UnionAll' for conditions.\n+     *\n+     * @param cluster The cluster UnionAll expression will belongs to.\n+     * @param input Input.\n+     * @param op1 First filter condition.\n+     * @param op2 Second filter condition.\n+     * @return UnionAll expression.\n+     */\n+    private RelNode createUnionAll(RelOptCluster cluster, RelNode input, RexNode op1, RexNode op2) {\n+        RelBuilder builder = relBuilderFactory.create(cluster, null);\n+\n+        builder.push(input).filter(op1);\n+        builder.push(input).filter(RexUtil.andNot(cluster.getRexBuilder(), op2, op1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de97f6fdec2f4dc712042e0deda7185f8afa815f"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2409, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}