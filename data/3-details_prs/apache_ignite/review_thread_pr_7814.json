{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDA4Mzgx", "number": 7814, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozNjo0NlrOD_-FGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozNjo0NlrOD_-FGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDAzOTkzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/marshaller/optimized/OptimizedObjectSharedStreamRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozNjo0NlrOGa8_Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozNjo0NlrOGa8_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNTMzNQ==", "bodyText": "extra line", "url": "https://github.com/apache/ignite/pull/7814#discussion_r430915335", "createdAt": "2020-05-27T07:36:46Z", "author": {"login": "korlov42"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/marshaller/optimized/OptimizedObjectSharedStreamRegistry.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.marshaller.optimized;\n+\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ *\n+ */\n+public class OptimizedObjectSharedStreamRegistry extends OptimizedObjectStreamRegistry {\n+    /** */\n+    private static final ThreadLocal<StreamHolder> holders = new ThreadLocal<>();\n+\n+    /** {@inheritDoc} */\n+    @Override OptimizedObjectOutputStream out() {\n+        return holder().acquireOut();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override OptimizedObjectInputStream in() {\n+        return holder().acquireIn();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override void closeOut(OptimizedObjectOutputStream out) {\n+        U.close(out, null);\n+\n+        StreamHolder holder = holders.get();\n+\n+        if (holder != null)\n+            holder.releaseOut();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override void closeIn(OptimizedObjectInputStream in) {\n+        U.close(in, null);\n+\n+        StreamHolder holder = holders.get();\n+\n+        if (holder != null)\n+            holder.releaseIn();\n+    }\n+\n+    /**\n+     * Gets holder from pool or thread local.\n+     *\n+     * @return Stream holder.\n+     */\n+    private static StreamHolder holder() {\n+        StreamHolder holder = holders.get();\n+\n+        if (holder == null)\n+            holders.set(holder = new StreamHolder());\n+\n+        return holder;\n+    }\n+\n+    /**\n+     * Streams holder.\n+     */\n+    private static class StreamHolder {\n+        /** Output stream. */\n+        private final OptimizedObjectOutputStream out = createOut();\n+\n+        /** Input stream. */\n+        private final OptimizedObjectInputStream in = createIn();\n+\n+        /** Output streams counter. */\n+        private int outAcquireCnt;\n+\n+        /** Input streams counter. */\n+        private int inAcquireCnt;\n+\n+        /**\n+         * Gets output stream.\n+         *\n+         * @return Object output stream.\n+         */\n+        OptimizedObjectOutputStream acquireOut() {\n+            return outAcquireCnt++ > 0 ? createOut() : out;\n+        }\n+\n+        /**\n+         * Gets input stream.\n+         *\n+         * @return Object input stream.\n+         */\n+        OptimizedObjectInputStream acquireIn() {\n+            return inAcquireCnt++ > 0 ? createIn() : in;\n+        }\n+\n+        /**\n+         * Releases output stream.\n+         */\n+        void releaseOut() {\n+            outAcquireCnt--;\n+        }\n+\n+        /**\n+         * Releases input stream.\n+         */\n+        void releaseIn() {\n+            inAcquireCnt--;\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab96b60f55dd50bccc6d2eb1c787b99cb909b04"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2440, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}