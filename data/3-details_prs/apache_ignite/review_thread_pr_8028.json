{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTUwMTk3", "number": 8028, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxMzozMlrOEihNcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo0ODozMlrOEikyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjMxMTUyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxMzozMlrOHQcW-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1ODo0NFrOHRMibg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMzg5OA==", "bodyText": "Add line break, please", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487003898", "createdAt": "2020-09-11T12:13:32Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -76,80 +78,58 @@\n     private final GridAtomicLong ackedUpdCntr = new GridAtomicLong(0);\n \n     /**\n-     * @param part Partition number.\n+     * @param currPartCntr Current partition counter.\n      * @param log Continuous query category logger.\n      */\n-    CacheContinuousQueryEventBuffer(int part, IgniteLogger log) {\n-        this.part = part;\n+    CacheContinuousQueryEventBuffer(LongUnaryOperator currPartCntr, IgniteLogger log) {\n+        this.currPartCntr = currPartCntr;\n         this.log = log;\n     }\n \n     /**\n-     * @param part Partition number.\n+     * @param log Continuous query category logger.\n      */\n-    CacheContinuousQueryEventBuffer(int part) {\n-        this(part, null);\n+    CacheContinuousQueryEventBuffer(IgniteLogger log) {\n+        this((backup) -> 0, log);\n     }\n \n     /**\n      * @param updateCntr Acknowledged counter.\n      */\n-    void cleanupBackupQueue(Long updateCntr) {\n-        Iterator<CacheContinuousQueryEntry> it = backupQ.iterator();\n-\n-        while (it.hasNext()) {\n-            CacheContinuousQueryEntry backupEntry = it.next();\n-\n-            if (backupEntry.updateCounter() <= updateCntr)\n-                it.remove();\n-        }\n-\n+    void cleanupOnAck(long updateCntr) {\n+        backupQ.removeIf(backupEntry -> backupEntry.updateCounter() <= updateCntr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MzI2Mg==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487793262", "createdAt": "2020-09-14T09:58:44Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -76,80 +78,58 @@\n     private final GridAtomicLong ackedUpdCntr = new GridAtomicLong(0);\n \n     /**\n-     * @param part Partition number.\n+     * @param currPartCntr Current partition counter.\n      * @param log Continuous query category logger.\n      */\n-    CacheContinuousQueryEventBuffer(int part, IgniteLogger log) {\n-        this.part = part;\n+    CacheContinuousQueryEventBuffer(LongUnaryOperator currPartCntr, IgniteLogger log) {\n+        this.currPartCntr = currPartCntr;\n         this.log = log;\n     }\n \n     /**\n-     * @param part Partition number.\n+     * @param log Continuous query category logger.\n      */\n-    CacheContinuousQueryEventBuffer(int part) {\n-        this(part, null);\n+    CacheContinuousQueryEventBuffer(IgniteLogger log) {\n+        this((backup) -> 0, log);\n     }\n \n     /**\n      * @param updateCntr Acknowledged counter.\n      */\n-    void cleanupBackupQueue(Long updateCntr) {\n-        Iterator<CacheContinuousQueryEntry> it = backupQ.iterator();\n-\n-        while (it.hasNext()) {\n-            CacheContinuousQueryEntry backupEntry = it.next();\n-\n-            if (backupEntry.updateCounter() <= updateCntr)\n-                it.remove();\n-        }\n-\n+    void cleanupOnAck(long updateCntr) {\n+        backupQ.removeIf(backupEntry -> backupEntry.updateCounter() <= updateCntr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMzg5OA=="}, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjMyOTQ1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryPartitionRecovery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoxOToxNVrOHQchog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1ODo1MVrOHRMiwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNjYyNg==", "bodyText": "I suggest to revert this change. It's not related to the issue.", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487006626", "createdAt": "2020-09-11T12:19:15Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryPartitionRecovery.java", "diffHunk": "@@ -155,8 +155,8 @@ void resetTopologyCache() {\n                     if (!entry.isFiltered())\n                         entries.add(new CacheContinuousQueryEvent<K, V>(cache, cctx, entry));\n \n-                    if (log.isDebugEnabled())\n-                        log.debug(\"Partition was lost [lastFiredEvt=\" + lastFiredEvt +\n+                    if (log.isInfoEnabled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MzM0NA==", "bodyText": "Reverted.", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487793344", "createdAt": "2020-09-14T09:58:51Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryPartitionRecovery.java", "diffHunk": "@@ -155,8 +155,8 @@ void resetTopologyCache() {\n                     if (!entry.isFiltered())\n                         entries.add(new CacheContinuousQueryEvent<K, V>(cache, cctx, entry));\n \n-                    if (log.isDebugEnabled())\n-                        log.debug(\"Partition was lost [lastFiredEvt=\" + lastFiredEvt +\n+                    if (log.isInfoEnabled())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNjYyNg=="}, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Njg5ODAyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDo0ODozMlrOHQiCNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1OTowMVrOHRMjEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5Njg4Nw==", "bodyText": "Empty map can be returned if entries == null || filteredFactory == null", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487096887", "createdAt": "2020-09-11T14:48:32Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -376,34 +338,32 @@ private Batch initBatch(AffinityTopologyVersion topVer, boolean backup) {\n         /** */\n         private CacheContinuousQueryEntry[] entries;\n \n-        /** */\n-        private final AffinityTopologyVersion topVer;\n-\n         /**\n          * @param filtered Number of filtered events before this batch.\n          * @param entries Entries array.\n-         * @param topVer Current event topology version.\n          * @param startCntr Start counter.\n          */\n-        Batch(long startCntr, long filtered, CacheContinuousQueryEntry[] entries, AffinityTopologyVersion topVer) {\n+        Batch(long startCntr, long filtered, CacheContinuousQueryEntry[] entries) {\n             assert startCntr >= 0;\n             assert filtered >= 0;\n \n             this.startCntr = startCntr;\n             this.filtered = filtered;\n             this.entries = entries;\n-            this.topVer = topVer;\n \n             endCntr = startCntr + BUF_SIZE - 1;\n         }\n \n         /**\n-         * @param res Current entries.\n-         * @return Entries to send as part of backup queue.\n+         * @param filteredFactory Factory which produces filtered entries.\n+         * @return Map of collected entries.\n          */\n-        @Nullable synchronized TreeMap<Long, CacheContinuousQueryEntry> flushCurrentEntries(\n-            @Nullable TreeMap<Long, CacheContinuousQueryEntry> res) {\n-            if (entries == null)\n+        synchronized Map<Long, CacheContinuousQueryEntry> flushCurrentEntries(\n+            BiFunction<Long, Long, CacheContinuousQueryEntry> filteredFactory\n+        ) {\n+            Map<Long, CacheContinuousQueryEntry> res = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5ODk1OQ==", "bodyText": "Can we estimate map size?", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487098959", "createdAt": "2020-09-11T14:51:40Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -376,34 +338,32 @@ private Batch initBatch(AffinityTopologyVersion topVer, boolean backup) {\n         /** */\n         private CacheContinuousQueryEntry[] entries;\n \n-        /** */\n-        private final AffinityTopologyVersion topVer;\n-\n         /**\n          * @param filtered Number of filtered events before this batch.\n          * @param entries Entries array.\n-         * @param topVer Current event topology version.\n          * @param startCntr Start counter.\n          */\n-        Batch(long startCntr, long filtered, CacheContinuousQueryEntry[] entries, AffinityTopologyVersion topVer) {\n+        Batch(long startCntr, long filtered, CacheContinuousQueryEntry[] entries) {\n             assert startCntr >= 0;\n             assert filtered >= 0;\n \n             this.startCntr = startCntr;\n             this.filtered = filtered;\n             this.entries = entries;\n-            this.topVer = topVer;\n \n             endCntr = startCntr + BUF_SIZE - 1;\n         }\n \n         /**\n-         * @param res Current entries.\n-         * @return Entries to send as part of backup queue.\n+         * @param filteredFactory Factory which produces filtered entries.\n+         * @return Map of collected entries.\n          */\n-        @Nullable synchronized TreeMap<Long, CacheContinuousQueryEntry> flushCurrentEntries(\n-            @Nullable TreeMap<Long, CacheContinuousQueryEntry> res) {\n-            if (entries == null)\n+        synchronized Map<Long, CacheContinuousQueryEntry> flushCurrentEntries(\n+            BiFunction<Long, Long, CacheContinuousQueryEntry> filteredFactory\n+        ) {\n+            Map<Long, CacheContinuousQueryEntry> res = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5Njg4Nw=="}, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MzQyNw==", "bodyText": "Agree, Fixed.", "url": "https://github.com/apache/ignite/pull/8028#discussion_r487793427", "createdAt": "2020-09-14T09:59:01Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryEventBuffer.java", "diffHunk": "@@ -376,34 +338,32 @@ private Batch initBatch(AffinityTopologyVersion topVer, boolean backup) {\n         /** */\n         private CacheContinuousQueryEntry[] entries;\n \n-        /** */\n-        private final AffinityTopologyVersion topVer;\n-\n         /**\n          * @param filtered Number of filtered events before this batch.\n          * @param entries Entries array.\n-         * @param topVer Current event topology version.\n          * @param startCntr Start counter.\n          */\n-        Batch(long startCntr, long filtered, CacheContinuousQueryEntry[] entries, AffinityTopologyVersion topVer) {\n+        Batch(long startCntr, long filtered, CacheContinuousQueryEntry[] entries) {\n             assert startCntr >= 0;\n             assert filtered >= 0;\n \n             this.startCntr = startCntr;\n             this.filtered = filtered;\n             this.entries = entries;\n-            this.topVer = topVer;\n \n             endCntr = startCntr + BUF_SIZE - 1;\n         }\n \n         /**\n-         * @param res Current entries.\n-         * @return Entries to send as part of backup queue.\n+         * @param filteredFactory Factory which produces filtered entries.\n+         * @return Map of collected entries.\n          */\n-        @Nullable synchronized TreeMap<Long, CacheContinuousQueryEntry> flushCurrentEntries(\n-            @Nullable TreeMap<Long, CacheContinuousQueryEntry> res) {\n-            if (entries == null)\n+        synchronized Map<Long, CacheContinuousQueryEntry> flushCurrentEntries(\n+            BiFunction<Long, Long, CacheContinuousQueryEntry> filteredFactory\n+        ) {\n+            Map<Long, CacheContinuousQueryEntry> res = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA5Njg4Nw=="}, "originalCommit": {"oid": "9e7eeae6869c5ad2eb69ed88eb4f4f0b516290ba"}, "originalPosition": 272}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2815, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}