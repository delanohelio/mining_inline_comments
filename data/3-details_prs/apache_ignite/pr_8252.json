{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MDc1MTQw", "number": 8252, "title": "IGNITE-13450 Add event fired before query execution", "bodyText": "Thank you for submitting the pull request to the Apache Ignite.\nIn order to streamline the review of the contribution\nwe ask you to ensure the following steps have been taken:\nThe Contribution Checklist\n\n There is a single JIRA ticket related to the pull request.\n The web-link to the pull request is attached to the JIRA ticket.\n The JIRA ticket has the Patch Available state.\n The pull request body describes changes that have been made.\nThe description explains WHAT and WHY was made instead of HOW.\n The pull request title is treated as the final commit message.\nThe following pattern must be used: IGNITE-XXXX Change summary where XXXX - number of JIRA issue.\n A reviewer has been mentioned through the JIRA comments\n(see the Maintainers list)\n The pull request has been checked by the Teamcity Bot and\nthe green visa attached to the JIRA ticket (see TC.Bot: Check PR)\n\nNotes\n\nHow to Contribute\nCoding abbreviation rules\nCoding Guidelines\nApache Ignite Teamcity Bot\n\nIf you need any help, please email dev@ignite.apache.org or ask an\u0443 advice on http://asf.slack.com #ignite channel.", "createdAt": "2020-09-16T15:35:47Z", "url": "https://github.com/apache/ignite/pull/8252", "merged": true, "mergeCommit": {"oid": "21e5ba57db948c0d522f2066e66650c46185e7f3"}, "closed": true, "closedAt": "2020-11-24T07:00:40Z", "author": {"login": "SomeFire"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJeI69gH2gAyNDg4MDc1MTQwOjJmMjZkN2U2ZDNhZWFkZTBlNDgwOTc4ZmVkOTI5YmVhNDNiMTgzZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfzxF2AFqTUzODA4MTE3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2f26d7e6d3aeade0e480978fed929bea43b183f9", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/2f26d7e6d3aeade0e480978fed929bea43b183f9", "committedDate": "2020-09-16T15:29:27Z", "message": "IGNITE-13450 Add event fired before query execution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4a83afffa9741eb48ca8925243876525ca8efa2", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/d4a83afffa9741eb48ca8925243876525ca8efa2", "committedDate": "2020-09-16T15:43:01Z", "message": "IGNITE-13450 fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/694951d38b53821e7099fa41177f8a7ff9d6c1a3", "committedDate": "2020-09-17T07:51:35Z", "message": "IGNITE-13450 fix code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMjk4NTcz", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-491298573", "createdAt": "2020-09-18T09:26:29Z", "commit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyNjozMFrOHUFQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo0MDoyOFrOHUHq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxOTgxMA==", "bodyText": "Why not 149?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490819810", "createdAt": "2020-09-18T09:26:30Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -879,6 +879,16 @@\n      */\n     public static final int EVT_BASELINE_AUTO_ADJUST_AWAITING_TIME_CHANGED = 148;\n \n+    /**\n+     * Built-in event type: query execution.\n+     * <p>\n+     * NOTE: all types in range <b>from 1 to 1000 are reserved</b> for\n+     * internal Ignite events and should not be used by user-defined events.\n+     *\n+     * @see QueryExecutionEvent\n+     */\n+    public static final int EVT_QUERY_EXECUTION = 150;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMTIxMg==", "bodyText": "Use 0L instead.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490821212", "createdAt": "2020-09-18T09:29:07Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzMTkwOQ==", "bodyText": "Please reword it , a query is not executed yet in this moment.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490831909", "createdAt": "2020-09-18T09:45:49Z", "author": {"login": "timoninmaxim"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -1085,6 +1088,17 @@ private void checkClusterState(QueryParserResult parseRes) {\n                 // Check if cluster state is valid.\n                 checkClusterState(parseRes);\n \n+                if (ctx.event().isRecordable(EVT_QUERY_EXECUTION)) {\n+                    ctx.event().record(new QueryExecutionEvent<>(\n+                        ctx.discovery().localNode(),\n+                        CacheQueryType.SQL_FIELDS.name() + \" query executed.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1OTIxOA==", "bodyText": "I see trigger only for SQL_FIELDS event. What about others?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r490859218", "createdAt": "2020-09-18T10:40:28Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 3738753361235304496L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable UUID subjId\n+    ) {\n+        super(node, msg, type);\n+\n+        assert qryType != null;\n+\n+        this.qryType = qryType;\n+        this.clause = clause;\n+        this.args = args;\n+        this.subjId = subjId;\n+    }\n+\n+    /**\n+     * Gets query type.\n+     *\n+     * @return Query type. Can be {@code \"SQL\"}, {@code \"SQL_FIELDS\"}, {@code \"FULL_TEXT\"}, {@code \"SCAN\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "694951d38b53821e7099fa41177f8a7ff9d6c1a3"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d79c89b413eb6d9f6b6f44e6598b39db5406a53a", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/d79c89b413eb6d9f6b6f44e6598b39db5406a53a", "committedDate": "2020-09-18T12:11:45Z", "message": "IGNITE-13450 review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7b2b9f958276cb0c7a709bf4c7033508db715ec", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/f7b2b9f958276cb0c7a709bf4c7033508db715ec", "committedDate": "2020-09-18T14:38:29Z", "message": "IGNITE-13450 add SCAN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca306b7b24367d75816eb26297eea634146e5190", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/ca306b7b24367d75816eb26297eea634146e5190", "committedDate": "2020-09-18T15:07:19Z", "message": "IGNITE-13450 add TEXT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "772c795675457ca440157833f2a51d8f4e9c7f7c", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/772c795675457ca440157833f2a51d8f4e9c7f7c", "committedDate": "2020-09-21T10:19:42Z", "message": "IGNITE-13450 add SPI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a927d3a1fd21911913f2c9b29019fa2951443536", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/a927d3a1fd21911913f2c9b29019fa2951443536", "committedDate": "2020-09-21T10:46:20Z", "message": "IGNITE-13450 more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94fbf69bba69b2f6435cd72cedbbcd7a4521fe3", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/b94fbf69bba69b2f6435cd72cedbbcd7a4521fe3", "committedDate": "2020-09-21T15:19:24Z", "message": "IGNITE-13450 remove redundant changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5be398fc90f1cd92fbb6391533e6516b7418710", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/c5be398fc90f1cd92fbb6391533e6516b7418710", "committedDate": "2020-09-22T07:56:33Z", "message": "Merge branch 'master' into IGNITE-13450\n\n# Conflicts:\n#\tmodules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/eb40bb2d82b52b9963ee23143aff0ff97c2d49e8", "committedDate": "2020-09-22T08:15:44Z", "message": "IGNITE-13450 refactor test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjAxMTE1", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-495601115", "createdAt": "2020-09-24T13:57:22Z", "commit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1NzoyM1rOHXcMfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo1NzoyM1rOHXcMfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0MTI0Nw==", "bodyText": "Skipped in docs. Also, do we need info about it? It's serializable, but actually does user matter about serialization when implement it? I mean is there a real case how one can use this filter later?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494341247", "createdAt": "2020-09-24T13:57:23Z", "author": {"login": "timoninmaxim"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.lang.IgniteBiPredicate;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;\n+\n+    /** Scan query filter. */\n+    @GridToStringInclude\n+    private final IgniteBiPredicate<K, V> scanQryFilter;\n+\n+    /** Security subject ID. */\n+    private final UUID subjId;\n+\n+    /**\n+     * @param node Node where event was fired.\n+     * @param msg Event message.\n+     * @param type Event type.\n+     * @param qryType Query type.\n+     * @param clause Clause.\n+     * @param args Query arguments.\n+     * @param subjId Security subject ID.\n+     */\n+    public QueryExecutionEvent(\n+        ClusterNode node,\n+        String msg,\n+        int type,\n+        String qryType,\n+        @Nullable String clause,\n+        @Nullable Object[] args,\n+        @Nullable IgniteBiPredicate<K, V> scanQryFilter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NjMyNTc5", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-495632579", "createdAt": "2020-09-24T14:27:19Z", "commit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNzoxOVrOHXdoDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyNzoxOVrOHXdoDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NDY4Nw==", "bodyText": "Remove commented code.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r494364687", "createdAt": "2020-09-24T14:27:19Z", "author": {"login": "timoninmaxim"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "diffHunk": "@@ -1545,6 +1555,98 @@ private void checkSqlQueryEvents() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testQueryExecutionEvents() throws Exception {\n+        CountDownLatch execLatch = new CountDownLatch(13);\n+\n+        IgnitePredicate<Event> lsnr = evt -> {\n+            assert evt instanceof QueryExecutionEvent;\n+\n+            System.out.println(\">>> EVENT: \" + evt);\n+\n+            QueryExecutionEvent qe = (QueryExecutionEvent)evt;\n+\n+            if (SQL_FIELDS.name().equals(qe.queryType()) ||\n+                TEXT.name().equals(qe.queryType())\n+            )\n+                assertNotNull(qe.queryType() + \" query clause is empty!\", qe.clause());\n+            else\n+                assertNull(qe.queryType() + \" query clause is not empty!\", qe.clause());\n+\n+            execLatch.countDown();\n+\n+            return true;\n+        };\n+\n+        ignite().events().localListen(lsnr, EVT_QUERY_EXECUTION);\n+\n+        String cacheName = \"CACHE_NAME\";\n+\n+        CacheConfiguration<String, String> ccfg = new CacheConfiguration<>();\n+\n+        ccfg.setName(cacheName);\n+        ccfg.setIndexedTypes(String.class, String.class);\n+\n+        ClientConfiguration cc = new ClientConfiguration().setAddresses(Config.SERVER);\n+\n+        try (IgniteClient client = Ignition.startClient(cc)) {\n+            ignite().createCache(ccfg).query(new TextQuery<>(String.class, \"text\"))\n+                .getAll();\n+\n+            ignite().getOrCreateCache(ccfg).query(new SpiQuery<Integer, Integer>())\n+                .getAll();\n+\n+            ignite().getOrCreateCache(ccfg).query(new ScanQuery<>())\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"create table TEST_TABLE(key int primary key, val int)\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"insert into TEST_TABLE values (?, ?)\").setArgs(1, 1))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"update TEST_TABLE set val = ?2 where key = ?1\").setArgs(1, 2))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"select * from TEST_TABLE\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"create index idx_1 on TEST_TABLE(key)\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"drop index idx_1\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"alter table TEST_TABLE add column val2 int\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"alter table TEST_TABLE drop val2\"))\n+                .getAll();\n+\n+            client.query(new SqlFieldsQuery(\"drop table TEST_TABLE\"))\n+                .getAll();\n+\n+            // Currently, not supported.\n+//            client.getOrCreateCache(cacheName).query(new TextQuery<>(String.class, \"text\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb40bb2d82b52b9963ee23143aff0ff97c2d49e8"}, "originalPosition": 178}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23875767b60c59fd04c8eba6443de5b498c039d2", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/23875767b60c59fd04c8eba6443de5b498c039d2", "committedDate": "2020-09-24T14:40:16Z", "message": "IGNITE-13450 review - missed javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a8afbd26d74c633186d349c775a29e71b1b9201", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/4a8afbd26d74c633186d349c775a29e71b1b9201", "committedDate": "2020-09-24T14:41:38Z", "message": "IGNITE-13450 review - remove comment with not supported calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa57b56cc2397d1a31f622d4328793bba13959a8", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/fa57b56cc2397d1a31f622d4328793bba13959a8", "committedDate": "2020-10-21T15:58:11Z", "message": "Merge branch 'master' into IGNITE-13450\n\n# Conflicts:\n#\tmodules/core/src/main/java/org/apache/ignite/events/EventType.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74690a88b5e0c9f06d70d67bd5567cfbc93058ca", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/74690a88b5e0c9f06d70d67bd5567cfbc93058ca", "committedDate": "2020-11-16T18:32:40Z", "message": "Merge branch 'master' into IGNITE-13450"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b415b63b26189fcec032991e5c8d274782462b3", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/5b415b63b26189fcec032991e5c8d274782462b3", "committedDate": "2020-11-17T14:52:36Z", "message": "Revert \"IGNITE-13450 add SPI\"\n\nThis reverts commit 772c7956"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0175bb84f094bafedb7cd929d823687ec6e8a092", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/0175bb84f094bafedb7cd929d823687ec6e8a092", "committedDate": "2020-11-17T15:09:41Z", "message": "Revert \"IGNITE-13450 add TEXT\"\n\nThis reverts commit ca306b7b"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f3f89488dfb8e9e10707bfdd09189a497314f1", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/57f3f89488dfb8e9e10707bfdd09189a497314f1", "committedDate": "2020-11-17T16:09:55Z", "message": "Revert \"IGNITE-13450 add SCAN\"\n\nThis reverts commit f7b2b9f9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ced4401532c59f767700c8da1cbb10be3dc47a72", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/ced4401532c59f767700c8da1cbb10be3dc47a72", "committedDate": "2020-11-17T16:12:34Z", "message": "IGNITE-13450 fix intend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/52f8f55dcfbd0f1e79d3310845f371000660ce0a", "committedDate": "2020-11-19T14:35:11Z", "message": "IGNITE-13450 fix javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjE5NDYy", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-535219462", "createdAt": "2020-11-20T08:42:30Z", "commit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0MjozMFrOH3FxcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0MjozMFrOH3FxcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyODMwNA==", "bodyText": "Event type and event class name look like they reflect all types of the queries (SCAN, SQL, SQL_FIELDS, CONTINUOUS, TEXT), but, in fact, only SQL queries handled.\nWe should, either rename event id and class name or throw events for all types of queries.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527528304", "createdAt": "2020-11-20T08:42:30Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjIwNDI4", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-535220428", "createdAt": "2020-11-20T08:43:48Z", "commit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Mzo0OFrOH3F0TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Mzo0OFrOH3F0TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTAzNg==", "bodyText": "AFAIK this is not correct secSubjId.\nWhat if SQL query executed from thin client?", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527529036", "createdAt": "2020-11-20T08:43:48Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -1114,6 +1117,17 @@ private void checkClusterState(QueryParserResult parseRes) {\n                     // Check if cluster state is valid.\n                     checkClusterState(parseRes);\n \n+                    if (ctx.event().isRecordable(EVT_QUERY_EXECUTION)) {\n+                        ctx.event().record(new QueryExecutionEvent<>(\n+                            ctx.discovery().localNode(),\n+                            CacheQueryType.SQL_FIELDS.name() + \" query execution.\",\n+                            EVT_QUERY_EXECUTION,\n+                            CacheQueryType.SQL_FIELDS.name(),\n+                            newQryDesc.sql(),\n+                            newQryParams.arguments(),\n+                            ctx.localNodeId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjIwODc2", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-535220876", "createdAt": "2020-11-20T08:44:27Z", "commit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0NDoyN1rOH3F1jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0NDoyN1rOH3F1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTM1Ng==", "bodyText": "Please, remove System.out.println from test code.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527529356", "createdAt": "2020-11-20T08:44:27Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/cache/IgniteCacheAbstractQuerySelfTest.java", "diffHunk": "@@ -1545,6 +1544,66 @@ private void checkSqlQueryEvents() throws Exception {\n         }\n     }\n \n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testClientQueryExecutedEvents() throws Exception {\n+        CountDownLatch execLatch = new CountDownLatch(9);\n+\n+        IgnitePredicate<Event> lsnr = evt -> {\n+            assert evt instanceof QueryExecutionEvent;\n+\n+            System.out.println(\">>> EVENT: \" + evt);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjIyNjQ4", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-535222648", "createdAt": "2020-11-20T08:46:55Z", "commit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Njo1NVrOH3F6_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Njo1NVrOH3F6_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDc0OA==", "bodyText": "Let's rename clause to the text.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r527530748", "createdAt": "2020-11-20T08:46:55Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/events/QueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_QUERY_EXECUTION\n+ */\n+public class QueryExecutionEvent<K, V> extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query type. */\n+    private final String qryType;\n+\n+    /** Clause. */\n+    private final String clause;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f8f55dcfbd0f1e79d3310845f371000660ce0a"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1da73d1cdcc3e0a4d8c3807be29e3453b3b78f74", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/1da73d1cdcc3e0a4d8c3807be29e3453b3b78f74", "committedDate": "2020-11-21T20:59:28Z", "message": "IGNITE-13450 review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a82343d6dada240ccb7e4363f2a385414c08f3b", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/1a82343d6dada240ccb7e4363f2a385414c08f3b", "committedDate": "2020-11-21T21:25:32Z", "message": "IGNITE-13450 review - move event record closer to runningQryMgr.register"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c83f5535a195ed7e40185bdc3b66bbfd20bd7f09", "author": {"user": {"login": "SomeFire", "name": "\u0414\u043c\u0438\u0442\u0440\u0438\u0439 \u0420\u044f\u0431\u043e\u0432"}}, "url": "https://github.com/apache/ignite/commit/c83f5535a195ed7e40185bdc3b66bbfd20bd7f09", "committedDate": "2020-11-21T21:26:07Z", "message": "IGNITE-13450 review - expand tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d763b9cc712f127f3a719f67708ebe48c7b14c", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/c6d763b9cc712f127f3a719f67708ebe48c7b14c", "committedDate": "2020-11-24T06:17:41Z", "message": "Update IgniteH2Indexing.java\n\nCorrect subjId initialization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1aeb2babbda48765254026421f40c55ba4878d71", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/1aeb2babbda48765254026421f40c55ba4878d71", "committedDate": "2020-11-24T06:22:12Z", "message": "Update SqlQueryExecutionEvent.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ac7efe20b7f952165646bf9e2ff22e91fed0128", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/3ac7efe20b7f952165646bf9e2ff22e91fed0128", "committedDate": "2020-11-24T06:22:56Z", "message": "Update IgniteH2Indexing.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7a64c3a7770a65471eb5a0197196fa81f6029a9", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/f7a64c3a7770a65471eb5a0197196fa81f6029a9", "committedDate": "2020-11-24T06:25:31Z", "message": "Update UserQueriesTestBase.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0793e92f5ef8d087a8eaad44fd95ca669f5d7694", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/0793e92f5ef8d087a8eaad44fd95ca669f5d7694", "committedDate": "2020-11-24T06:26:42Z", "message": "Update UserQueriesTestBase.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31b113130eac9944b59673349555ebbdeb35408b", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/31b113130eac9944b59673349555ebbdeb35408b", "committedDate": "2020-11-24T06:29:11Z", "message": "Update SqlQueryExecutionEvent.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3fc08f50785c7f75ae0905e9a6c97217691e6eb", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/e3fc08f50785c7f75ae0905e9a6c97217691e6eb", "committedDate": "2020-11-24T06:30:59Z", "message": "Update SqlQueryExecutionEvent.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57662c98661d19d3440668632eafd4aba44519e3", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/57662c98661d19d3440668632eafd4aba44519e3", "committedDate": "2020-11-24T06:35:47Z", "message": "Update UserQueriesTestBase.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243adebb4449a96d5401ec586c26bc7f99e26525", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/243adebb4449a96d5401ec586c26bc7f99e26525", "committedDate": "2020-11-24T06:36:33Z", "message": "Update UserQueriesTestBase.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf3ca679c35196603418922a3872f37372890a6d", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/bf3ca679c35196603418922a3872f37372890a6d", "committedDate": "2020-11-24T06:38:00Z", "message": "Update IgniteCacheAbstractQuerySelfTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34c4c3c55bc5bc94ce30ca2c5ec33a94e906c526", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/34c4c3c55bc5bc94ce30ca2c5ec33a94e906c526", "committedDate": "2020-11-24T06:41:25Z", "message": "Update IgniteH2Indexing.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4026f817f3755a132c2558eb99a6c3204b606c8", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/e4026f817f3755a132c2558eb99a6c3204b606c8", "committedDate": "2020-11-24T06:50:57Z", "message": "Update UserQueriesTestBase.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9faaa5ff96f06a57281aebfec716fafe869dddc7", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/9faaa5ff96f06a57281aebfec716fafe869dddc7", "committedDate": "2020-11-24T06:52:31Z", "message": "Update SqlStatisticsUserQueriesFastTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/24bbe80dd391cde21b8aad3d8f25b0febc3591f9", "committedDate": "2020-11-24T06:53:11Z", "message": "Update SqlStatisticsUserQueriesLongTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MTIxNjU3", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-537121657", "createdAt": "2020-11-24T06:55:17Z", "commit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MDgxMTcz", "url": "https://github.com/apache/ignite/pull/8252#pullrequestreview-538081173", "createdAt": "2020-11-25T00:59:59Z", "commit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMDo1OTo1OVrOH5fHoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwMTowMjo1MlrOH5fLCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDczNw==", "bodyText": "It seems to me, this Javadoc is just a copy&paste and it looks useless.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530040737", "createdAt": "2020-11-25T00:59:59Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MDg2NQ==", "bodyText": "Could you please provide a comprehensive description of this event?\nThe current Javadoc gives no clue on this event. Moreover, SqlQueryExecutionEvent itself does not provide any specific information too.\nAt least, it would be useful to clearly state the phase of query execution that triggers this event and etc.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530040865", "createdAt": "2020-11-25T01:00:23Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/EventType.java", "diffHunk": "@@ -922,6 +922,16 @@\n      */\n     public static final int EVT_CLUSTER_SNAPSHOT_FAILED = 151;\n \n+    /**\n+     * Built-in event type: query execution.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDA0MTYxMQ==", "bodyText": "args may contain sensitive information and should be masked by *** when  IgniteSystemProperties#IGNITE_TO_STRING_INCLUDE_SENSITIVE is false.", "url": "https://github.com/apache/ignite/pull/8252#discussion_r530041611", "createdAt": "2020-11-25T01:02:52Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/events/SqlQueryExecutionEvent.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.events;\n+\n+import java.util.UUID;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.util.tostring.GridToStringInclude;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.jetbrains.annotations.Nullable;\n+\n+import static org.apache.ignite.events.EventType.EVT_SQL_QUERY_EXECUTION;\n+\n+/**\n+ * Query execution event.\n+ * <p>\n+ * Grid events are used for notification about what happens within the grid. Note that by\n+ * design Ignite keeps all events generated on the local node locally and it provides\n+ * APIs for performing a distributed queries across multiple nodes:\n+ * <ul>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#remoteQuery(org.apache.ignite.lang.IgnitePredicate, long, int...)} -\n+ *          asynchronously querying events occurred on the nodes specified, including remote nodes.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localQuery(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          querying only local events stored on this local node.\n+ *      </li>\n+ *      <li>\n+ *          {@link org.apache.ignite.IgniteEvents#localListen(org.apache.ignite.lang.IgnitePredicate, int...)} -\n+ *          listening to local grid events (events from remote nodes not included).\n+ *      </li>\n+ * </ul>\n+ * User can also wait for events using method {@link org.apache.ignite.IgniteEvents#waitForLocal(org.apache.ignite.lang.IgnitePredicate, int...)}.\n+ * <h1 class=\"header\">Events and Performance</h1>\n+ * Note that by default all events in Ignite are enabled and therefore generated and stored\n+ * by whatever event storage SPI is configured. Ignite can and often does generate thousands events per seconds\n+ * under the load and therefore it creates a significant additional load on the system. If these events are\n+ * not needed by the application this load is unnecessary and leads to significant performance degradation.\n+ * <p>\n+ * It is <b>highly recommended</b> to enable only those events that your application logic requires\n+ * by using {@link org.apache.ignite.configuration.IgniteConfiguration#getIncludeEventTypes()} method in Ignite configuration. Note that certain\n+ * events are required for Ignite's internal operations and such events will still be generated but not stored by\n+ * event storage SPI if they are disabled in Ignite configuration.\n+ *\n+ * @see EventType#EVT_SQL_QUERY_EXECUTION\n+ */\n+public class SqlQueryExecutionEvent extends EventAdapter {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Query text. */\n+    private final String text;\n+\n+    /** Query arguments. */\n+    @GridToStringInclude\n+    private final Object[] args;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24bbe80dd391cde21b8aad3d8f25b0febc3591f9"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3129, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}