{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjMxMTA4", "number": 8362, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozOToxOVrOEuZklg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0MDozM1rOEwKZkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDg4OTE4OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozOToxOVrOHixlrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxNjozOFrOHi2myg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyNjA5Mg==", "bodyText": "pydoc is missed", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506226092", "createdAt": "2020-10-16T09:39:19Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -53,30 +53,37 @@ def start(self):\n \n         self.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.timeout_sec)\n \n+    # pylint: disable=W0221\n+    def stop(self, clean_shutdown=True, timeout_sec=60):\n+        self.stop_async(clean_shutdown)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwODI5OA==", "bodyText": "Okay, I'll return it", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506308298", "createdAt": "2020-10-16T11:16:38Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -53,30 +53,37 @@ def start(self):\n \n         self.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.timeout_sec)\n \n+    # pylint: disable=W0221\n+    def stop(self, clean_shutdown=True, timeout_sec=60):\n+        self.stop_async(clean_shutdown)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyNjA5Mg=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDkzMDU5OnYy", "diffSide": "LEFT", "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo0ODowNlrOHiyBCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjowMjoxMlrOHi4yHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMzA5Ng==", "bodyText": "As I see you just move this method higher. Let's revert it.\nWhy do you change timeout_sec?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506233096", "createdAt": "2020-10-16T09:48:06Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -53,30 +53,37 @@ def start(self):\n \n         self.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.timeout_sec)\n \n+    # pylint: disable=W0221\n+    def stop(self, clean_shutdown=True, timeout_sec=60):\n+        self.stop_async(clean_shutdown)\n+        self.await_stopped(timeout_sec)\n+\n     def stop_async(self, clean_shutdown=True):\n         \"\"\"\n-        Stops node in async way.\n+        Stop in async way.\n+        \"\"\"\n+        for node in self.nodes:\n+            self.stop_node(node=node, clean_shutdown=clean_shutdown)\n+\n+    def stop_node(self, node, clean_shutdown=True):\n+        \"\"\"\n+        Stop node in async way.\n         \"\"\"\n-        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(self.nodes[0].account)))\n-        self.nodes[0].account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown,\n-                                                  allow_fail=True)\n+        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(node.account)))\n+        node.account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown,\n+                                         allow_fail=True)\n \n     def await_stopped(self, timeout_sec=10):\n         \"\"\"\n         Awaits node stop finish.\n         \"\"\"\n-        stopped = self.wait_node(self.nodes[0], timeout_sec=timeout_sec)\n-        assert stopped, \"Node %s: did not stop within the specified timeout of %s seconds\" % \\\n-                        (str(self.nodes[0].account), str(timeout_sec))\n+        for node in self.nodes:\n+            stopped = self.wait_node(node, timeout_sec=timeout_sec)\n+            assert stopped, \"Node %s: did not stop within the specified timeout of %s seconds\" % \\\n+                            (str(node.account), str(timeout_sec))\n \n         self.__check_status(\"IGNITE_APPLICATION_FINISHED\", timeout=timeout_sec)\n \n-    # pylint: disable=W0221\n-    def stop_node(self, node, clean_shutdown=True, timeout_sec=10):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0Mzk2NQ==", "bodyText": "revert changes", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506343965", "createdAt": "2020-10-16T12:02:12Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -53,30 +53,37 @@ def start(self):\n \n         self.__check_status(\"IGNITE_APPLICATION_INITIALIZED\", timeout=self.timeout_sec)\n \n+    # pylint: disable=W0221\n+    def stop(self, clean_shutdown=True, timeout_sec=60):\n+        self.stop_async(clean_shutdown)\n+        self.await_stopped(timeout_sec)\n+\n     def stop_async(self, clean_shutdown=True):\n         \"\"\"\n-        Stops node in async way.\n+        Stop in async way.\n+        \"\"\"\n+        for node in self.nodes:\n+            self.stop_node(node=node, clean_shutdown=clean_shutdown)\n+\n+    def stop_node(self, node, clean_shutdown=True):\n+        \"\"\"\n+        Stop node in async way.\n         \"\"\"\n-        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(self.nodes[0].account)))\n-        self.nodes[0].account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown,\n-                                                  allow_fail=True)\n+        self.logger.info(\"%s Stopping node %s\" % (self.__class__.__name__, str(node.account)))\n+        node.account.kill_java_processes(self.servicejava_class_name, clean_shutdown=clean_shutdown,\n+                                         allow_fail=True)\n \n     def await_stopped(self, timeout_sec=10):\n         \"\"\"\n         Awaits node stop finish.\n         \"\"\"\n-        stopped = self.wait_node(self.nodes[0], timeout_sec=timeout_sec)\n-        assert stopped, \"Node %s: did not stop within the specified timeout of %s seconds\" % \\\n-                        (str(self.nodes[0].account), str(timeout_sec))\n+        for node in self.nodes:\n+            stopped = self.wait_node(node, timeout_sec=timeout_sec)\n+            assert stopped, \"Node %s: did not stop within the specified timeout of %s seconds\" % \\\n+                            (str(node.account), str(timeout_sec))\n \n         self.__check_status(\"IGNITE_APPLICATION_FINISHED\", timeout=timeout_sec)\n \n-    # pylint: disable=W0221\n-    def stop_node(self, node, clean_shutdown=True, timeout_sec=10):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIzMzA5Ng=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDk5NjE0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1ODo1M1rOHiyslQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMTowOTozOVrOHi2QiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NDI0NQ==", "bodyText": "Imagine you have multiple application nodes, all of them are failed. res than contains multiple lines. In method above extract_result it checks size of the error and raises exception.", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506244245", "createdAt": "2020-10-16T09:58:53Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -121,10 +128,10 @@ def extract_results(self, name):\n         \"\"\"\n         res = []\n \n-        output = self.nodes[0].account.ssh_capture(\n-            \"grep '%s' %s\" % (name + \"->\", self.STDOUT_STDERR_CAPTURE), allow_fail=False)\n-\n-        for line in output:\n-            res.append(re.search(\"%s(.*)%s\" % (name + \"->\", \"<-\"), line).group(1))\n+        for node in self.nodes:\n+            output = node.account.ssh_capture(\n+                \"grep '%s' %s\" % (name + \"->\", self.STDOUT_STDERR_CAPTURE), allow_fail=False)\n+            for line in output:\n+                res.append(re.search(\"%s(.*)%s\" % (name + \"->\", \"<-\"), line).group(1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwMjYwMQ==", "bodyText": "Yes, I see. Then it is better to build a check based on a dynamic parameter. I mean, instead of the expected 1 line, expect len(self.nodes). Am I getting this right?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506302601", "createdAt": "2020-10-16T11:09:39Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -121,10 +128,10 @@ def extract_results(self, name):\n         \"\"\"\n         res = []\n \n-        output = self.nodes[0].account.ssh_capture(\n-            \"grep '%s' %s\" % (name + \"->\", self.STDOUT_STDERR_CAPTURE), allow_fail=False)\n-\n-        for line in output:\n-            res.append(re.search(\"%s(.*)%s\" % (name + \"->\", \"<-\"), line).group(1))\n+        for node in self.nodes:\n+            output = node.account.ssh_capture(\n+                \"grep '%s' %s\" % (name + \"->\", self.STDOUT_STDERR_CAPTURE), allow_fail=False)\n+            for line in output:\n+                res.append(re.search(\"%s(.*)%s\" % (name + \"->\", \"<-\"), line).group(1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NDI0NQ=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTAwMTk2OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/start_stop_client/SimpleClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTo1OTozOVrOHiywPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToxNjowMFrOHi2lBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NTE4Mg==", "bodyText": "Let's rename simple client to smth more meaningful.", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506245182", "createdAt": "2020-10-16T09:59:39Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/start_stop_client/SimpleClient.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.start_stop_client;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Java client. Tx put operation\n+ */\n+public class SimpleClient extends IgniteAwareApplication {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMwNzg0NQ==", "bodyText": "OK, what about IgniteCachePutClient?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506307845", "createdAt": "2020-10-16T11:16:00Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/start_stop_client/SimpleClient.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.start_stop_client;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+\n+/**\n+ * Java client. Tx put operation\n+ */\n+public class SimpleClient extends IgniteAwareApplication {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI0NTE4Mg=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA1MDkzOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNzo1OVrOHizQpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozMToxMFrOHi0Wrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzQ3OQ==", "bodyText": "Why 10?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506253479", "createdAt": "2020-10-16T10:07:59Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,133 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark.resource import cluster\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    CACHE_NAME - name of the cache to create for the test.\n+    REPORT_NAME - the name of the tests.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    CLIENTS_WORK_TIME_S - clients working time (s).\n+    ITERATION_COUNT - the number of iterations of starting and stopping client nodes (s).\n+    CLUSTER_NODES - cluster size.\n+    STATIC_CLIENTS_NUM - the number of permanently employed clients.\n+    TEMP_CLIENTS_NUM - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3MTQwNw==", "bodyText": "Pacing is an internal delay, the interval between discrete operations. This is a customized parameter, 10 ms is selected so that we know for sure that the average number of operations generated by the client does not exceed 100 operations per second", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506271407", "createdAt": "2020-10-16T10:31:10Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,133 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark.resource import cluster\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    CACHE_NAME - name of the cache to create for the test.\n+    REPORT_NAME - the name of the tests.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    CLIENTS_WORK_TIME_S - clients working time (s).\n+    ITERATION_COUNT - the number of iterations of starting and stopping client nodes (s).\n+    CLUSTER_NODES - cluster size.\n+    STATIC_CLIENTS_NUM - the number of permanently employed clients.\n+    TEMP_CLIENTS_NUM - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzQ3OQ=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA1MTI2OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowODowNlrOHizQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDozODoyOFrOHi0u1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzUzOA==", "bodyText": "Why 30?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506253538", "createdAt": "2020-10-16T10:08:06Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,133 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark.resource import cluster\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    CACHE_NAME - name of the cache to create for the test.\n+    REPORT_NAME - the name of the tests.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    CLIENTS_WORK_TIME_S - clients working time (s).\n+    ITERATION_COUNT - the number of iterations of starting and stopping client nodes (s).\n+    CLUSTER_NODES - cluster size.\n+    STATIC_CLIENTS_NUM - the number of permanently employed clients.\n+    TEMP_CLIENTS_NUM - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.SimpleClient\"\n+\n+    CLIENTS_WORK_TIME_S = 30", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI3NzU4OQ==", "bodyText": "CLIENTS_WORK_TIME_S - the working time of the client group. It is selected in such a way as to allow time for the load level to stabilize. A certain number of clients are included in the topology and work in this number of CLIENTS_WORK_TIME_S of time. From my point of view, this operating time is not too high, but it is sufficient for the load level on the cluster to settle after new fat clients enter the cluster. But I admit that I'm wrong.", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506277589", "createdAt": "2020-10-16T10:38:28Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,133 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark.resource import cluster\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    CACHE_NAME - name of the cache to create for the test.\n+    REPORT_NAME - the name of the tests.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    CLIENTS_WORK_TIME_S - clients working time (s).\n+    ITERATION_COUNT - the number of iterations of starting and stopping client nodes (s).\n+    CLUSTER_NODES - cluster size.\n+    STATIC_CLIENTS_NUM - the number of permanently employed clients.\n+    TEMP_CLIENTS_NUM - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.SimpleClient\"\n+\n+    CLIENTS_WORK_TIME_S = 30", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzUzOA=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA1MjM0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowODoyN1rOHizRog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDo0Mjo0M1rOHi07Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzczMA==", "bodyText": "Why do you sleep on first iteration?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506253730", "createdAt": "2020-10-16T10:08:27Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,133 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark.resource import cluster\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    CACHE_NAME - name of the cache to create for the test.\n+    REPORT_NAME - the name of the tests.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    CLIENTS_WORK_TIME_S - clients working time (s).\n+    ITERATION_COUNT - the number of iterations of starting and stopping client nodes (s).\n+    CLUSTER_NODES - cluster size.\n+    STATIC_CLIENTS_NUM - the number of permanently employed clients.\n+    TEMP_CLIENTS_NUM - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.SimpleClient\"\n+\n+    CLIENTS_WORK_TIME_S = 30\n+    ITERATION_COUNT = 3\n+    CLUSTER_NODES = 7\n+    STATIC_CLIENTS_NUM = 2\n+    TEMP_CLIENTS_NUM = 3\n+\n+    @cluster(num_nodes=CLUSTER_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_8_1))\n+    def test_ignite_start_stop(self, ignite_version):\n+        \"\"\"\n+        Test for starting and stopping fat clients.\n+        \"\"\"\n+\n+        servers_count = self.CLUSTER_NODES - self.STATIC_CLIENTS_NUM - self.TEMP_CLIENTS_NUM\n+\n+        # Topology version after test.\n+        current_top_v = servers_count\n+        fin_top_ver = servers_count + (2 * self.STATIC_CLIENTS_NUM) + (2 * self.ITERATION_COUNT * self.TEMP_CLIENTS_NUM)\n+\n+        server_cfg = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, backups=1, atomicity_mode='TRANSACTIONAL')]\n+        )\n+        ignite = IgniteService(self.test_context, server_cfg, num_nodes=servers_count)\n+        control_utility = ControlUtility(ignite, self.test_context)\n+\n+        client_cfg = server_cfg._replace(client_mode=True)\n+\n+        static_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=self.STATIC_CLIENTS_NUM,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        temp_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=self.TEMP_CLIENTS_NUM,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        ignite.start()\n+\n+        static_clients.start()\n+\n+        current_top_v += self.STATIC_CLIENTS_NUM\n+        check_topology(control_utility, current_top_v)\n+\n+        # Start / stop temp_clients node. Check cluster.\n+        for i in range(self.ITERATION_COUNT):\n+            self.logger.debug(f'Starting iteration: {i}.')\n+\n+            time.sleep(self.CLIENTS_WORK_TIME_S)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MDc3MA==", "bodyText": "We give the STATIC_CLIENTS_NUM client group time to WORK during the CLIENTS_WORK_TIME_S time for each iteration of the TEMP_CLIENTS_NUM client group entry and exit. This is done in order to get a stable state of the cluster under a stable load after each client login and exit procedure", "url": "https://github.com/apache/ignite/pull/8362#discussion_r506280770", "createdAt": "2020-10-16T10:42:43Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,133 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark.resource import cluster\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    CACHE_NAME - name of the cache to create for the test.\n+    REPORT_NAME - the name of the tests.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    CLIENTS_WORK_TIME_S - clients working time (s).\n+    ITERATION_COUNT - the number of iterations of starting and stopping client nodes (s).\n+    CLUSTER_NODES - cluster size.\n+    STATIC_CLIENTS_NUM - the number of permanently employed clients.\n+    TEMP_CLIENTS_NUM - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.SimpleClient\"\n+\n+    CLIENTS_WORK_TIME_S = 30\n+    ITERATION_COUNT = 3\n+    CLUSTER_NODES = 7\n+    STATIC_CLIENTS_NUM = 2\n+    TEMP_CLIENTS_NUM = 3\n+\n+    @cluster(num_nodes=CLUSTER_NODES)\n+    @ignite_versions(str(DEV_BRANCH), str(V_2_8_1))\n+    def test_ignite_start_stop(self, ignite_version):\n+        \"\"\"\n+        Test for starting and stopping fat clients.\n+        \"\"\"\n+\n+        servers_count = self.CLUSTER_NODES - self.STATIC_CLIENTS_NUM - self.TEMP_CLIENTS_NUM\n+\n+        # Topology version after test.\n+        current_top_v = servers_count\n+        fin_top_ver = servers_count + (2 * self.STATIC_CLIENTS_NUM) + (2 * self.ITERATION_COUNT * self.TEMP_CLIENTS_NUM)\n+\n+        server_cfg = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, backups=1, atomicity_mode='TRANSACTIONAL')]\n+        )\n+        ignite = IgniteService(self.test_context, server_cfg, num_nodes=servers_count)\n+        control_utility = ControlUtility(ignite, self.test_context)\n+\n+        client_cfg = server_cfg._replace(client_mode=True)\n+\n+        static_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=self.STATIC_CLIENTS_NUM,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        temp_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=self.TEMP_CLIENTS_NUM,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        ignite.start()\n+\n+        static_clients.start()\n+\n+        current_top_v += self.STATIC_CLIENTS_NUM\n+        check_topology(control_utility, current_top_v)\n+\n+        # Start / stop temp_clients node. Check cluster.\n+        for i in range(self.ITERATION_COUNT):\n+            self.logger.debug(f'Starting iteration: {i}.')\n+\n+            time.sleep(self.CLIENTS_WORK_TIME_S)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzczMA=="}, "originalCommit": {"oid": "4a7580bc507ca73a746a57b5d1219b5182d4b41b"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTE4NTM4OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODo1NjozMlrOHlhczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOToxNzoyMFrOHliUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNzQwNg==", "bodyText": "Why do not replace this if-else block with service.stop(clean_shutdown=kill_nodes)?", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509107406", "createdAt": "2020-10-21T08:56:32Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,173 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark import parametrize\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    cluster - cluster size\n+    CACHE_NAME - name of the cache to create for the test.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    client_work_time - clients working time (s).\n+    iteration_count - the number of iterations of starting and stopping client nodes (s).\n+    static_clients - the number of permanently employed clients.\n+    temp_client - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.IgniteCachePutClient\"\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_start_stop_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and stop clients node test without kill java process.\n+        Check topology.\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, False, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_kill_start_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and kill client nodes, Check topology\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, True, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    # pylint: disable=R0914\n+    # pylint: disable=R0913\n+    def ignite_start_stop(self, ignite_version, kill_temp_nodes,\n+                          cluster, static_clients_num, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Test for starting and stopping fat clients.\n+        \"\"\"\n+\n+        servers_count = cluster - static_clients_num - temp_client\n+\n+        current_top_v = servers_count\n+        # Topology version after test.\n+        fin_top_ver = servers_count + (2 * static_clients_num) + (2 * iteration_count * temp_client)\n+\n+        server_cfg = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, backups=1, atomicity_mode='TRANSACTIONAL')]\n+        )\n+\n+        ignite = IgniteService(self.test_context, server_cfg, num_nodes=servers_count)\n+        control_utility = ControlUtility(ignite, self.test_context)\n+\n+        client_cfg = server_cfg._replace(client_mode=True)\n+\n+        static_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=static_clients_num,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        temp_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=temp_client,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        ignite.start()\n+\n+        static_clients.start()\n+\n+        current_top_v += static_clients_num\n+        check_topology(control_utility, current_top_v)\n+\n+        # Start / stop temp_clients node. Check cluster.\n+        for i in range(iteration_count):\n+            self.logger.debug(f'Starting iteration: {i}.')\n+\n+            temp_clients.start()\n+            current_top_v += temp_client\n+\n+            static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                       from_the_beginning=True, backoff_sec=1)\n+            check_topology(control_utility, current_top_v)\n+\n+            temp_clients.await_event(f'clients={static_clients_num + temp_client}',\n+                                     timeout_sec=80,\n+                                     from_the_beginning=True,\n+                                     backoff_sec=1)\n+\n+            time.sleep(client_work_time)\n+            stop_service_nodes(temp_clients, kill_temp_nodes)\n+\n+            current_top_v += temp_client\n+\n+        static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                   from_the_beginning=True, backoff_sec=0.1)\n+        static_clients.stop()\n+\n+        check_topology(control_utility, fin_top_ver)\n+\n+\n+def stop_service_nodes(service: IgniteApplicationService, kill_nodes):\n+    \"\"\"\n+    Base service stop command.\n+    If kill_nodes=True kill node.\n+    If kill_nodes=False then the node is shutting down correctly\n+    \"\"\"\n+    if kill_nodes:\n+        for node in service.nodes:\n+            service.stop_node(node=node, clean_shutdown=False)\n+    else:\n+        service.stop(clean_shutdown=True)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExMjE5Nw==", "bodyText": "the base timeout of 10 seconds was not enough to register completion in the base method. However, when they are completed sequentially, I fit into the timeout", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509112197", "createdAt": "2020-10-21T09:03:07Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,173 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark import parametrize\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    cluster - cluster size\n+    CACHE_NAME - name of the cache to create for the test.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    client_work_time - clients working time (s).\n+    iteration_count - the number of iterations of starting and stopping client nodes (s).\n+    static_clients - the number of permanently employed clients.\n+    temp_client - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.IgniteCachePutClient\"\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_start_stop_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and stop clients node test without kill java process.\n+        Check topology.\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, False, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_kill_start_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and kill client nodes, Check topology\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, True, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    # pylint: disable=R0914\n+    # pylint: disable=R0913\n+    def ignite_start_stop(self, ignite_version, kill_temp_nodes,\n+                          cluster, static_clients_num, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Test for starting and stopping fat clients.\n+        \"\"\"\n+\n+        servers_count = cluster - static_clients_num - temp_client\n+\n+        current_top_v = servers_count\n+        # Topology version after test.\n+        fin_top_ver = servers_count + (2 * static_clients_num) + (2 * iteration_count * temp_client)\n+\n+        server_cfg = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, backups=1, atomicity_mode='TRANSACTIONAL')]\n+        )\n+\n+        ignite = IgniteService(self.test_context, server_cfg, num_nodes=servers_count)\n+        control_utility = ControlUtility(ignite, self.test_context)\n+\n+        client_cfg = server_cfg._replace(client_mode=True)\n+\n+        static_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=static_clients_num,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        temp_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=temp_client,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        ignite.start()\n+\n+        static_clients.start()\n+\n+        current_top_v += static_clients_num\n+        check_topology(control_utility, current_top_v)\n+\n+        # Start / stop temp_clients node. Check cluster.\n+        for i in range(iteration_count):\n+            self.logger.debug(f'Starting iteration: {i}.')\n+\n+            temp_clients.start()\n+            current_top_v += temp_client\n+\n+            static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                       from_the_beginning=True, backoff_sec=1)\n+            check_topology(control_utility, current_top_v)\n+\n+            temp_clients.await_event(f'clients={static_clients_num + temp_client}',\n+                                     timeout_sec=80,\n+                                     from_the_beginning=True,\n+                                     backoff_sec=1)\n+\n+            time.sleep(client_work_time)\n+            stop_service_nodes(temp_clients, kill_temp_nodes)\n+\n+            current_top_v += temp_client\n+\n+        static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                   from_the_beginning=True, backoff_sec=0.1)\n+        static_clients.stop()\n+\n+        check_topology(control_utility, fin_top_ver)\n+\n+\n+def stop_service_nodes(service: IgniteApplicationService, kill_nodes):\n+    \"\"\"\n+    Base service stop command.\n+    If kill_nodes=True kill node.\n+    If kill_nodes=False then the node is shutting down correctly\n+    \"\"\"\n+    if kill_nodes:\n+        for node in service.nodes:\n+            service.stop_node(node=node, clean_shutdown=False)\n+    else:\n+        service.stop(clean_shutdown=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNzQwNg=="}, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTExOTkzMA==", "bodyText": "It's because service.stop waits for completion message \"IGNITE_APPLICATION_FINISHED\" in any case. So if clean_shutdown is False there is no reason to wait the message. So. It's a bug of stop method. Let's fix it instead", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509119930", "createdAt": "2020-10-21T09:14:47Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,173 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark import parametrize\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    cluster - cluster size\n+    CACHE_NAME - name of the cache to create for the test.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    client_work_time - clients working time (s).\n+    iteration_count - the number of iterations of starting and stopping client nodes (s).\n+    static_clients - the number of permanently employed clients.\n+    temp_client - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.IgniteCachePutClient\"\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_start_stop_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and stop clients node test without kill java process.\n+        Check topology.\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, False, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_kill_start_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and kill client nodes, Check topology\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, True, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    # pylint: disable=R0914\n+    # pylint: disable=R0913\n+    def ignite_start_stop(self, ignite_version, kill_temp_nodes,\n+                          cluster, static_clients_num, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Test for starting and stopping fat clients.\n+        \"\"\"\n+\n+        servers_count = cluster - static_clients_num - temp_client\n+\n+        current_top_v = servers_count\n+        # Topology version after test.\n+        fin_top_ver = servers_count + (2 * static_clients_num) + (2 * iteration_count * temp_client)\n+\n+        server_cfg = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, backups=1, atomicity_mode='TRANSACTIONAL')]\n+        )\n+\n+        ignite = IgniteService(self.test_context, server_cfg, num_nodes=servers_count)\n+        control_utility = ControlUtility(ignite, self.test_context)\n+\n+        client_cfg = server_cfg._replace(client_mode=True)\n+\n+        static_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=static_clients_num,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        temp_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=temp_client,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        ignite.start()\n+\n+        static_clients.start()\n+\n+        current_top_v += static_clients_num\n+        check_topology(control_utility, current_top_v)\n+\n+        # Start / stop temp_clients node. Check cluster.\n+        for i in range(iteration_count):\n+            self.logger.debug(f'Starting iteration: {i}.')\n+\n+            temp_clients.start()\n+            current_top_v += temp_client\n+\n+            static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                       from_the_beginning=True, backoff_sec=1)\n+            check_topology(control_utility, current_top_v)\n+\n+            temp_clients.await_event(f'clients={static_clients_num + temp_client}',\n+                                     timeout_sec=80,\n+                                     from_the_beginning=True,\n+                                     backoff_sec=1)\n+\n+            time.sleep(client_work_time)\n+            stop_service_nodes(temp_clients, kill_temp_nodes)\n+\n+            current_top_v += temp_client\n+\n+        static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                   from_the_beginning=True, backoff_sec=0.1)\n+        static_clients.stop()\n+\n+        check_topology(control_utility, fin_top_ver)\n+\n+\n+def stop_service_nodes(service: IgniteApplicationService, kill_nodes):\n+    \"\"\"\n+    Base service stop command.\n+    If kill_nodes=True kill node.\n+    If kill_nodes=False then the node is shutting down correctly\n+    \"\"\"\n+    if kill_nodes:\n+        for node in service.nodes:\n+            service.stop_node(node=node, clean_shutdown=False)\n+    else:\n+        service.stop(clean_shutdown=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNzQwNg=="}, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyMTY3MA==", "bodyText": "I guessed, but I was even more afraid to rule. Okay, I'll fix it.", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509121670", "createdAt": "2020-10-21T09:17:20Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,173 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark import parametrize\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    cluster - cluster size\n+    CACHE_NAME - name of the cache to create for the test.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    client_work_time - clients working time (s).\n+    iteration_count - the number of iterations of starting and stopping client nodes (s).\n+    static_clients - the number of permanently employed clients.\n+    temp_client - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.IgniteCachePutClient\"\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_start_stop_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and stop clients node test without kill java process.\n+        Check topology.\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, False, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_kill_start_nodes(self, ignite_version,\n+                                     cluster, static_clients, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Start and kill client nodes, Check topology\n+        \"\"\"\n+        self.ignite_start_stop(ignite_version, True, cluster, static_clients,\n+                               temp_client, iteration_count, client_work_time)\n+\n+    # pylint: disable=R0914\n+    # pylint: disable=R0913\n+    def ignite_start_stop(self, ignite_version, kill_temp_nodes,\n+                          cluster, static_clients_num, temp_client, iteration_count, client_work_time):\n+        \"\"\"\n+        Test for starting and stopping fat clients.\n+        \"\"\"\n+\n+        servers_count = cluster - static_clients_num - temp_client\n+\n+        current_top_v = servers_count\n+        # Topology version after test.\n+        fin_top_ver = servers_count + (2 * static_clients_num) + (2 * iteration_count * temp_client)\n+\n+        server_cfg = IgniteConfiguration(\n+            version=IgniteVersion(ignite_version),\n+            caches=[CacheConfiguration(name=self.CACHE_NAME, backups=1, atomicity_mode='TRANSACTIONAL')]\n+        )\n+\n+        ignite = IgniteService(self.test_context, server_cfg, num_nodes=servers_count)\n+        control_utility = ControlUtility(ignite, self.test_context)\n+\n+        client_cfg = server_cfg._replace(client_mode=True)\n+\n+        static_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=static_clients_num,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        temp_clients = IgniteApplicationService(\n+            self.test_context,\n+            client_cfg,\n+            java_class_name=self.JAVA_CLIENT_CLASS_NAME,\n+            num_nodes=temp_client,\n+            params={\"cacheName\": self.CACHE_NAME,\n+                    \"pacing\": self.PACING})\n+\n+        ignite.start()\n+\n+        static_clients.start()\n+\n+        current_top_v += static_clients_num\n+        check_topology(control_utility, current_top_v)\n+\n+        # Start / stop temp_clients node. Check cluster.\n+        for i in range(iteration_count):\n+            self.logger.debug(f'Starting iteration: {i}.')\n+\n+            temp_clients.start()\n+            current_top_v += temp_client\n+\n+            static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                       from_the_beginning=True, backoff_sec=1)\n+            check_topology(control_utility, current_top_v)\n+\n+            temp_clients.await_event(f'clients={static_clients_num + temp_client}',\n+                                     timeout_sec=80,\n+                                     from_the_beginning=True,\n+                                     backoff_sec=1)\n+\n+            time.sleep(client_work_time)\n+            stop_service_nodes(temp_clients, kill_temp_nodes)\n+\n+            current_top_v += temp_client\n+\n+        static_clients.await_event(f'ver={current_top_v}, locNode=', timeout_sec=80,\n+                                   from_the_beginning=True, backoff_sec=0.1)\n+        static_clients.stop()\n+\n+        check_topology(control_utility, fin_top_ver)\n+\n+\n+def stop_service_nodes(service: IgniteApplicationService, kill_nodes):\n+    \"\"\"\n+    Base service stop command.\n+    If kill_nodes=True kill node.\n+    If kill_nodes=False then the node is shutting down correctly\n+    \"\"\"\n+    if kill_nodes:\n+        for node in service.nodes:\n+            service.stop_node(node=node, clean_shutdown=False)\n+    else:\n+        service.stop(clean_shutdown=True)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEwNzQwNg=="}, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMyNjUwOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOToyODo0NVrOHlizwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMzoyNTowMFrOHlr1Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyOTY2NA==", "bodyText": "let's replace <= with !=.", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509129664", "createdAt": "2020-10-21T09:28:45Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -110,7 +121,8 @@ def extract_result(self, name):\n         \"\"\"\n         results = self.extract_results(name)\n \n-        assert len(results) <= 1, f\"Expected exactly one result occurence, {len(results)} found.\"\n+        assert len(results) <= len(self.nodes), f\"Expected exactly {len(self.nodes)} occurence,\" \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4Nzk1OQ==", "bodyText": "ok", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509187959", "createdAt": "2020-10-21T11:05:41Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -110,7 +121,8 @@ def extract_result(self, name):\n         \"\"\"\n         results = self.extract_results(name)\n \n-        assert len(results) <= 1, f\"Expected exactly one result occurence, {len(results)} found.\"\n+        assert len(results) <= len(self.nodes), f\"Expected exactly {len(self.nodes)} occurence,\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyOTY2NA=="}, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI3NzQ1NA==", "bodyText": "only here it is necessary ==", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509277454", "createdAt": "2020-10-21T13:25:00Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/services/ignite_app.py", "diffHunk": "@@ -110,7 +121,8 @@ def extract_result(self, name):\n         \"\"\"\n         results = self.extract_results(name)\n \n-        assert len(results) <= 1, f\"Expected exactly one result occurence, {len(results)} found.\"\n+        assert len(results) <= len(self.nodes), f\"Expected exactly {len(self.nodes)} occurence,\" \\", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEyOTY2NA=="}, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTM3NDkxOnYy", "diffSide": "RIGHT", "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0MDozM1rOHljSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToyNTo0OVrOHlnCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNzQxMQ==", "bodyText": "To enable run the test in parallel with others please use @cluster decorator. If user wants to run experiments with different number of nodes, the one must comment the decorator in feature branch.\nActually we need a flag for ducktape to ignore this decorator if needed. I will make a ticket for that.", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509137411", "createdAt": "2020-10-21T09:40:33Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,173 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark import parametrize\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    cluster - cluster size\n+    CACHE_NAME - name of the cache to create for the test.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    client_work_time - clients working time (s).\n+    iteration_count - the number of iterations of starting and stopping client nodes (s).\n+    static_clients - the number of permanently employed clients.\n+    temp_client - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.IgniteCachePutClient\"\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_start_stop_nodes(self, ignite_version,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5ODk0Mg==", "bodyText": "ok. I found your ticket thank you!", "url": "https://github.com/apache/ignite/pull/8362#discussion_r509198942", "createdAt": "2020-10-21T11:25:49Z", "author": {"login": "SwirMix"}, "path": "modules/ducktests/tests/ignitetest/tests/client_in_out_test.py", "diffHunk": "@@ -0,0 +1,173 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+\"\"\"\n+This module contains client tests\n+\"\"\"\n+import time\n+from ducktape.mark import parametrize\n+from ignitetest.services.ignite import IgniteService\n+from ignitetest.services.ignite_app import IgniteApplicationService\n+from ignitetest.services.utils.control_utility import ControlUtility\n+from ignitetest.services.utils.ignite_configuration.cache import CacheConfiguration\n+from ignitetest.services.utils.ignite_configuration import IgniteConfiguration\n+from ignitetest.utils import ignite_versions\n+from ignitetest.utils.ignite_test import IgniteTest\n+from ignitetest.utils.version import DEV_BRANCH, V_2_8_1, IgniteVersion\n+\n+\n+# pylint: disable=W0223\n+class ClientTest(IgniteTest):\n+    \"\"\"\n+    cluster - cluster size\n+    CACHE_NAME - name of the cache to create for the test.\n+    PACING - the frequency of the operation on clients (ms).\n+    JAVA_CLIENT_CLASS_NAME - running classname.\n+    client_work_time - clients working time (s).\n+    iteration_count - the number of iterations of starting and stopping client nodes (s).\n+    static_clients - the number of permanently employed clients.\n+    temp_client - number of clients who come log in and out.\n+    \"\"\"\n+\n+    CACHE_NAME = \"simple-tx-cache\"\n+    PACING = 10\n+    JAVA_CLIENT_CLASS_NAME = \"org.apache.ignite.internal.ducktest.tests.start_stop_client.IgniteCachePutClient\"\n+\n+    @ignite_versions(str(V_2_8_1), str(DEV_BRANCH))\n+    @parametrize(cluster=7,\n+                 static_clients=2,\n+                 temp_client=3,\n+                 iteration_count=3,\n+                 client_work_time=30)\n+    # pylint: disable=R0913\n+    def test_ignite_start_stop_nodes(self, ignite_version,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzNzQxMQ=="}, "originalCommit": {"oid": "12b3a211ee8d056249c4f810d8ebeaff2b5bdccc"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2643, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}