{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjQwMzI2", "number": 8430, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxMjo0M1rOE23gFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyMzo0NVrOE23ySQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY3ODkzOnYy", "diffSide": "RIGHT", "path": "docs/_docs/clustering/network-configuration.adoc", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxMjo0M1rOHv5Bag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozMTo0NlrOHxNQPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTM3MA==", "bodyText": "I guess the SSL issue is not the only reason of why developers might want to tweak this flag. How about this description? It's enough to mention the SSL issue on the SSL page only and leave the description in this place generic.\nSpecifies a linger-on-close timeout. This option disables/enables immediate return from a close() of a TCP Socket. Setting the timeout to 0 closes the socket immediately. See the Javadoc for more details.", "url": "https://github.com/apache/ignite/pull/8430#discussion_r519979370", "createdAt": "2020-11-09T17:12:43Z", "author": {"login": "dmagda"}, "path": "docs/_docs/clustering/network-configuration.adoc", "diffHunk": "@@ -56,6 +56,7 @@ You can find the complete list of properties in the javadoc:org.apache.ignite.sp\n | `localPort`  | The port that the node binds to. If set to a non-default value, other cluster nodes must know this port to be able to discover the node. | `47500`\n | `localPortRange`| If the `localPort` is busy, the node attempts to bind to the next port (incremented by 1) and continues this process until it finds a free port. The `localPortRange` property defines the number of ports the node will try (starting from `localPort`).\n    | `100`\n+| `soLinger`| Setting linger-on-close can help with socket deadlocks of SSL issues like JDK-8219658. But costs longer detection of node failure. | `0`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ3MzgxMg==", "bodyText": "I don't think so because socket is an internal implementation of the SPI. User shouldn't know about it. As example, there is no linger option for the communication SPI. Its internals are NIO. Linger was introduced only to have a workaround for SSL deadlock issues. It seems there was no need and are no need to configure it.", "url": "https://github.com/apache/ignite/pull/8430#discussion_r520473812", "createdAt": "2020-11-10T10:59:15Z", "author": {"login": "Vladsz83"}, "path": "docs/_docs/clustering/network-configuration.adoc", "diffHunk": "@@ -56,6 +56,7 @@ You can find the complete list of properties in the javadoc:org.apache.ignite.sp\n | `localPort`  | The port that the node binds to. If set to a non-default value, other cluster nodes must know this port to be able to discover the node. | `47500`\n | `localPortRange`| If the `localPort` is busy, the node attempts to bind to the next port (incremented by 1) and continues this process until it finds a free port. The `localPortRange` property defines the number of ports the node will try (starting from `localPort`).\n    | `100`\n+| `soLinger`| Setting linger-on-close can help with socket deadlocks of SSL issues like JDK-8219658. But costs longer detection of node failure. | `0`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTM3MA=="}, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NzAxOQ==", "bodyText": "The linger setting is a TCP parameter that changes how the protocol behaves. Even if the initial motivation for adding it to the discovery SPI was to address the SSL issue, the setting still needs to be explained generically because it helps you to control the TCP behavior for all sorts of needs.\nThe workarounds are usually handled via system properties in Ignite. As long as you've already added a new API method to the public interface it needs to be explained generically. Otherwise, you can remove the linger setting from the API and create a system property for the workaround instead.", "url": "https://github.com/apache/ignite/pull/8430#discussion_r520867019", "createdAt": "2020-11-10T20:53:27Z", "author": {"login": "dmagda"}, "path": "docs/_docs/clustering/network-configuration.adoc", "diffHunk": "@@ -56,6 +56,7 @@ You can find the complete list of properties in the javadoc:org.apache.ignite.sp\n | `localPort`  | The port that the node binds to. If set to a non-default value, other cluster nodes must know this port to be able to discover the node. | `47500`\n | `localPortRange`| If the `localPort` is busy, the node attempts to bind to the next port (incremented by 1) and continues this process until it finds a free port. The `localPortRange` property defines the number of ports the node will try (starting from `localPort`).\n    | `100`\n+| `soLinger`| Setting linger-on-close can help with socket deadlocks of SSL issues like JDK-8219658. But costs longer detection of node failure. | `0`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTM3MA=="}, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA0ODUxMA==", "bodyText": "Moreover, you already have this workaround mentioned on the SSL page below that is a proper place. To recap, we need a generic description of this soLinger parameter on this page and have the workaround added as a warning callout on the SSL page.", "url": "https://github.com/apache/ignite/pull/8430#discussion_r521048510", "createdAt": "2020-11-11T02:47:49Z", "author": {"login": "dmagda"}, "path": "docs/_docs/clustering/network-configuration.adoc", "diffHunk": "@@ -56,6 +56,7 @@ You can find the complete list of properties in the javadoc:org.apache.ignite.sp\n | `localPort`  | The port that the node binds to. If set to a non-default value, other cluster nodes must know this port to be able to discover the node. | `47500`\n | `localPortRange`| If the `localPort` is busy, the node attempts to bind to the next port (incremented by 1) and continues this process until it finds a free port. The `localPortRange` property defines the number of ports the node will try (starting from `localPort`).\n    | `100`\n+| `soLinger`| Setting linger-on-close can help with socket deadlocks of SSL issues like JDK-8219658. But costs longer detection of node failure. | `0`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTM3MA=="}, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwNzE4Nw==", "bodyText": "The linger setting is a TCP parameter that changes how the protocol behaves.\n\nlinger only sets socket behavior on socket closing with rest of the data in TCP buffers. But this doesn\u2019t affect behavior of Discovery because it has own message acknowledgement. The exception is the delay of Discovery. That is why I think duplicating of Java API documentation is useless for Ignite user. This parameter doesn\u2019t change general logic and gives no benefits to user.\n\nThe workarounds are usually handled via system properties in Ignite. As long as you've already added a new API method to the public interface .\n\nI haven't. This API had been added in 2.8 as hotfix of raised SSL issue. But hadn't been documented. We just changed its default value to disabled like before 2.8.", "url": "https://github.com/apache/ignite/pull/8430#discussion_r521307187", "createdAt": "2020-11-11T11:56:08Z", "author": {"login": "Vladsz83"}, "path": "docs/_docs/clustering/network-configuration.adoc", "diffHunk": "@@ -56,6 +56,7 @@ You can find the complete list of properties in the javadoc:org.apache.ignite.sp\n | `localPort`  | The port that the node binds to. If set to a non-default value, other cluster nodes must know this port to be able to discover the node. | `47500`\n | `localPortRange`| If the `localPort` is busy, the node attempts to bind to the next port (incremented by 1) and continues this process until it finds a free port. The `localPortRange` property defines the number of ports the node will try (starting from `localPort`).\n    | `100`\n+| `soLinger`| Setting linger-on-close can help with socket deadlocks of SSL issues like JDK-8219658. But costs longer detection of node failure. | `0`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTM3MA=="}, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1OTQyMA==", "bodyText": "The value of the parameter is passed into the Socket via its Java API, thus the description on this page needs to sound generic like in Java. Our JavaDoc follows this guideline and doesn't mention any workarounds for specific use cases.\nWe can put everything together this way mentioning the SSL issue as a reason why this parameter set to 0 for Ignite discovery sockets:\nSpecifies a linger-on-close timeout. This option disables/enables immediate return from a close() of a TCP Socket. The option defaults to 0 for Ignite TcpDiscovery sockets to avoid potential deadlocks with SSL connections.\nPlease take this all into consideration and send another pull-request. We've already beat this to death. The initial pull-request was merged skipping a review of technical documentation committers and maintainers.", "url": "https://github.com/apache/ignite/pull/8430#discussion_r521359420", "createdAt": "2020-11-11T13:31:46Z", "author": {"login": "dmagda"}, "path": "docs/_docs/clustering/network-configuration.adoc", "diffHunk": "@@ -56,6 +56,7 @@ You can find the complete list of properties in the javadoc:org.apache.ignite.sp\n | `localPort`  | The port that the node binds to. If set to a non-default value, other cluster nodes must know this port to be able to discover the node. | `47500`\n | `localPortRange`| If the `localPort` is busy, the node attempts to bind to the next port (incremented by 1) and continues this process until it finds a free port. The `localPortRange` property defines the number of ports the node will try (starting from `localPort`).\n    | `100`\n+| `soLinger`| Setting linger-on-close can help with socket deadlocks of SSL issues like JDK-8219658. But costs longer detection of node failure. | `0`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3OTM3MA=="}, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTcyNTUzOnYy", "diffSide": "RIGHT", "path": "docs/_docs/security/ssl-tls.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyMzo0NVrOHv5eAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoyMzo0NVrOHv5eAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4NjY5MQ==", "bodyText": "I would put it this way:\nConsider setting the TcpDiscovery.soLinger parameter to X to avoid SSL-related deadlocks on certain versions of JRE. Alternatively, update your JRE version to the latest one.\nAnd do the following with this text:\n\nTurn the \"SSL-related deadlock\" phrase into an external link to the JDK ticket: https://github.com/apache/ignite/tree/master/docs#links-to-external-resources\nThe callout needs to be of the \"caution\" type: https://github.com/apache/ignite/tree/master/docs#callouts", "url": "https://github.com/apache/ignite/pull/8430#discussion_r519986691", "createdAt": "2020-11-09T17:23:45Z", "author": {"login": "dmagda"}, "path": "docs/_docs/security/ssl-tls.adoc", "diffHunk": "@@ -32,6 +32,12 @@ To enable SSL/TLS for cluster nodes, configure an `SSLContext` factory in the no\n You can use the `org.apache.ignite.ssl.SslContextFactory`, which is the default factory that uses a configurable keystore to initialize the SSL context.\n //You can also implement your own `SSLContext` factory.\n \n+[NOTE]\n+====", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085950338b4a91d6731d1142059635ae3b79f1c6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2651, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}