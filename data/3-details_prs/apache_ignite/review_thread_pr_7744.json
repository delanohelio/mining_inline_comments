{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzgzNzIy", "number": 7744, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMTowN1rOD6dmUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMTowN1rOD6dmUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjI4OTQ3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cluster/ClientClusterGroupGetNodesEndpointsResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDowMTowN1rOGSUWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTozNDo1MVrOGT-Ydg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MTA2Ng==", "bodyText": "make these methods static?", "url": "https://github.com/apache/ignite/pull/7744#discussion_r421861066", "createdAt": "2020-05-08T00:01:07Z", "author": {"login": "ashapkin"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cluster/ClientClusterGroupGetNodesEndpointsResponse.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cluster;\n+\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.binary.BinaryRawWriterEx;\n+import org.apache.ignite.internal.cluster.IgniteClusterEx;\n+import org.apache.ignite.internal.processors.odbc.ClientListenerProcessor;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+\n+import java.util.*;\n+\n+/**\n+ * Cluster group get nodes endpoints response.\n+ */\n+public class ClientClusterGroupGetNodesEndpointsResponse extends ClientResponse {\n+    /** Indicates unknown topology version. */\n+    private static final long UNKNOWN_TOP_VER = -1;\n+\n+    /** Start topology version. -1 for earliest. */\n+    private final long startTopVer;\n+\n+    /** End topology version. -1 for latest. */\n+    private final long endTopVer;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param reqId Request identifier.\n+     * @param startTopVer Start topology version.\n+     * @param endTopVer End topology version.\n+     */\n+    public ClientClusterGroupGetNodesEndpointsResponse(long reqId,\n+                                                       long startTopVer,\n+                                                       long endTopVer) {\n+        super(reqId);\n+\n+        this.startTopVer = startTopVer;\n+        this.endTopVer = endTopVer;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void encode(ClientConnectionContext ctx, BinaryRawWriterEx writer) {\n+        super.encode(ctx, writer);\n+\n+        IgniteClusterEx cluster = ctx.kernalContext().grid().cluster();\n+\n+        long endTopVer0 = endTopVer == UNKNOWN_TOP_VER ? cluster.topologyVersion() : endTopVer;\n+\n+        Collection<ClusterNode> topology = cluster.topology(endTopVer0);\n+\n+        writer.writeLong(endTopVer0);\n+\n+        if (startTopVer == UNKNOWN_TOP_VER) {\n+            int pos = writer.reserveInt();\n+            int size = 0;\n+\n+            for (ClusterNode node : topology) {\n+                if (writeNode(writer, node))\n+                    size++;\n+            }\n+\n+            writer.writeInt(pos, size);\n+            writer.writeInt(0);\n+\n+            return;\n+        }\n+\n+        Map<UUID, ClusterNode> startNodes = toMap(cluster.topology(startTopVer));\n+        Map<UUID, ClusterNode> endNodes = toMap(topology);\n+\n+        int pos = writer.reserveInt();\n+        int cnt = 0;\n+\n+        for (Map.Entry<UUID, ClusterNode> endNode : endNodes.entrySet()) {\n+            if (!startNodes.containsKey(endNode.getKey())) {\n+                if (writeNode(writer, endNode.getValue()))\n+                    cnt++;\n+            }\n+        }\n+\n+        writer.writeInt(pos, cnt);\n+\n+        pos = writer.reserveInt();\n+        cnt = 0;\n+\n+        for (Map.Entry<UUID, ClusterNode> startNode : startNodes.entrySet()) {\n+            if (!endNodes.containsKey(startNode.getKey()) && !startNode.getValue().isClient()) {\n+                writeUuid(writer, startNode.getKey());\n+                cnt++;\n+            }\n+        }\n+\n+        writer.writeInt(pos, cnt);\n+    }\n+\n+    /**\n+     * Writes node info.\n+     *\n+     * @param writer Writer.\n+     * @param node Node.\n+     */\n+    private boolean writeNode(BinaryRawWriterEx writer, ClusterNode node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3475c15ffe554ab6a56cb1964aa73ef9cec0c630"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5ODE5OA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/7744#discussion_r423598198", "createdAt": "2020-05-12T09:34:51Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/cluster/ClientClusterGroupGetNodesEndpointsResponse.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.platform.client.cluster;\n+\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.binary.BinaryRawWriterEx;\n+import org.apache.ignite.internal.cluster.IgniteClusterEx;\n+import org.apache.ignite.internal.processors.odbc.ClientListenerProcessor;\n+import org.apache.ignite.internal.processors.platform.client.ClientConnectionContext;\n+import org.apache.ignite.internal.processors.platform.client.ClientResponse;\n+\n+import java.util.*;\n+\n+/**\n+ * Cluster group get nodes endpoints response.\n+ */\n+public class ClientClusterGroupGetNodesEndpointsResponse extends ClientResponse {\n+    /** Indicates unknown topology version. */\n+    private static final long UNKNOWN_TOP_VER = -1;\n+\n+    /** Start topology version. -1 for earliest. */\n+    private final long startTopVer;\n+\n+    /** End topology version. -1 for latest. */\n+    private final long endTopVer;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param reqId Request identifier.\n+     * @param startTopVer Start topology version.\n+     * @param endTopVer End topology version.\n+     */\n+    public ClientClusterGroupGetNodesEndpointsResponse(long reqId,\n+                                                       long startTopVer,\n+                                                       long endTopVer) {\n+        super(reqId);\n+\n+        this.startTopVer = startTopVer;\n+        this.endTopVer = endTopVer;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void encode(ClientConnectionContext ctx, BinaryRawWriterEx writer) {\n+        super.encode(ctx, writer);\n+\n+        IgniteClusterEx cluster = ctx.kernalContext().grid().cluster();\n+\n+        long endTopVer0 = endTopVer == UNKNOWN_TOP_VER ? cluster.topologyVersion() : endTopVer;\n+\n+        Collection<ClusterNode> topology = cluster.topology(endTopVer0);\n+\n+        writer.writeLong(endTopVer0);\n+\n+        if (startTopVer == UNKNOWN_TOP_VER) {\n+            int pos = writer.reserveInt();\n+            int size = 0;\n+\n+            for (ClusterNode node : topology) {\n+                if (writeNode(writer, node))\n+                    size++;\n+            }\n+\n+            writer.writeInt(pos, size);\n+            writer.writeInt(0);\n+\n+            return;\n+        }\n+\n+        Map<UUID, ClusterNode> startNodes = toMap(cluster.topology(startTopVer));\n+        Map<UUID, ClusterNode> endNodes = toMap(topology);\n+\n+        int pos = writer.reserveInt();\n+        int cnt = 0;\n+\n+        for (Map.Entry<UUID, ClusterNode> endNode : endNodes.entrySet()) {\n+            if (!startNodes.containsKey(endNode.getKey())) {\n+                if (writeNode(writer, endNode.getValue()))\n+                    cnt++;\n+            }\n+        }\n+\n+        writer.writeInt(pos, cnt);\n+\n+        pos = writer.reserveInt();\n+        cnt = 0;\n+\n+        for (Map.Entry<UUID, ClusterNode> startNode : startNodes.entrySet()) {\n+            if (!endNodes.containsKey(startNode.getKey()) && !startNode.getValue().isClient()) {\n+                writeUuid(writer, startNode.getKey());\n+                cnt++;\n+            }\n+        }\n+\n+        writer.writeInt(pos, cnt);\n+    }\n+\n+    /**\n+     * Writes node info.\n+     *\n+     * @param writer Writer.\n+     * @param node Node.\n+     */\n+    private boolean writeNode(BinaryRawWriterEx writer, ClusterNode node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MTA2Ng=="}, "originalCommit": {"oid": "3475c15ffe554ab6a56cb1964aa73ef9cec0c630"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2467, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}