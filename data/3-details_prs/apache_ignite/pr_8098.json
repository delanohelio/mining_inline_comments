{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NTAwMzI3", "number": 8098, "title": "Ducktape codestyle", "bodyText": "Thank you for submitting the pull request to the Apache Ignite.\nIn order to streamline the review of the contribution\nwe ask you to ensure the following steps have been taken:\nThe Contribution Checklist\n\n There is a single JIRA ticket related to the pull request.\n The web-link to the pull request is attached to the JIRA ticket.\n The JIRA ticket has the Patch Available state.\n The pull request body describes changes that have been made.\nThe description explains WHAT and WHY was made instead of HOW.\n The pull request title is treated as the final commit message.\nThe following pattern must be used: IGNITE-XXXX Change summary where XXXX - number of JIRA issue.\n A reviewer has been mentioned through the JIRA comments\n(see the Maintainers list)\n The pull request has been checked by the Teamcity Bot and\nthe green visa attached to the JIRA ticket (see TC.Bot: Check PR)\n\nNotes\n\nHow to Contribute\nCoding abbreviation rules\nCoding Guidelines\nApache Ignite Teamcity Bot\n\nIf you need any help, please email dev@ignite.apache.org or ask an\u0443 advice on http://asf.slack.com #ignite channel.", "createdAt": "2020-07-29T15:05:30Z", "url": "https://github.com/apache/ignite/pull/8098", "merged": true, "mergeCommit": {"oid": "330c17b084aaf91d19591178885dd2637dc8fa21"}, "closed": true, "closedAt": "2020-07-30T09:12:00Z", "author": {"login": "ivandasch"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5qBDsAH2gAyNDU4NTAwMzI3OjQ1YjQwZGFmNDY4NDhiNTZhMjYyOTE3ZGJlNGU2ZmMyMThmN2RjZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc577SFgH2gAyNDU4NTAwMzI3OmQzMzA5YWY1ZDAyNTBjZjhiNWJmNDU1YzQ0ZTQyNWY4MzVhYWYzNjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45b40daf46848b56a262917dbe4e6fc218f7dcdd", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/45b40daf46848b56a262917dbe4e6fc218f7dcdd", "committedDate": "2020-07-29T12:16:56Z", "message": "Add pylint and fix errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e68b6f2cb8c8026dcc99166d99728c28a43fcd", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/21e68b6f2cb8c8026dcc99166d99728c28a43fcd", "committedDate": "2020-07-29T13:23:58Z", "message": "minor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feb57dc9f2bddcbf9952038547d47242ae6bf3b2", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/feb57dc9f2bddcbf9952038547d47242ae6bf3b2", "committedDate": "2020-07-29T13:38:34Z", "message": "Merge remote-tracking branch 'remotes/origin/ignite-ducktape' into ducktape-codestyle\n\n# Conflicts:\n#\tmodules/ducktests/tests/ignitetest/services/ignite_app.py\n#\tmodules/ducktests/tests/ignitetest/services/ignite_spark_app.py\n#\tmodules/ducktests/tests/ignitetest/services/utils/ignite_aware.py\n#\tmodules/ducktests/tests/ignitetest/services/utils/ignite_aware_app.py\n#\tmodules/ducktests/tests/ignitetest/services/utils/ignite_config.py\n#\tmodules/ducktests/tests/ignitetest/tests/add_node_rebalance_test.py\n#\tmodules/ducktests/tests/ignitetest/tests/discovery_test.py\n#\tmodules/ducktests/tests/ignitetest/tests/pme_free_switch_test.py\n#\tmodules/ducktests/tests/ignitetest/tests/spark_integration_test.py\n#\tmodules/ducktests/tests/ignitetest/tests/utils/version.py"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bc04abcf5f9362f0aa95165e2a3c1367b33d058", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/2bc04abcf5f9362f0aa95165e2a3c1367b33d058", "committedDate": "2020-07-29T15:05:48Z", "message": "minor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbbb89f4ca8b0cb5c6835a5dc9a6255f3246bb9c", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/dbbb89f4ca8b0cb5c6835a5dc9a6255f3246bb9c", "committedDate": "2020-07-29T15:07:21Z", "message": "minor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36", "committedDate": "2020-07-29T15:13:23Z", "message": "minor."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NjQ5Mzg4", "url": "https://github.com/apache/ignite/pull/8098#pullrequestreview-457649388", "createdAt": "2020-07-29T15:41:04Z", "commit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo0MTowNFrOG4-gKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNjowMTowM1rOG4_YEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5NzQ4MQ==", "bodyText": "Methods with double underscore on both sides have special meaning. Such methods are mixins and doesn't suppose to be just private methods. Private methods have another naming: __version, without trailing underscores.", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462397481", "createdAt": "2020-07-29T15:41:04Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -13,44 +13,55 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+\"\"\"\n+This module contains ignite path resolve utilities.\n+\"\"\"\n+\n import os\n \n from ignitetest.tests.utils.version import get_version, IgniteVersion\n \n-\"\"\"\n-This module provides Ignite path methods\n-\"\"\"\n-\n \n class IgnitePath:\n-    SCRATCH_ROOT = \"/mnt\"\n-    IGNITE_INSTALL_ROOT = \"/opt\"\n-\n     \"\"\"Path resolver for Ignite system tests which assumes the following layout:\n \n-        /opt/ignite-dev          # Current version of Ignite under test\n-        /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n-        /opt/ignite-<version>    # Other previous versions of Ignite\n-        ...\n-    \"\"\"\n+       /opt/ignite-dev          # Current version of Ignite under test\n+       /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n+       /opt/ignite-<version>    # Other previous versions of Ignite\n+       ...\n+   \"\"\"\n+    SCRATCH_ROOT = \"/mnt\"\n+    IGNITE_INSTALL_ROOT = \"/opt\"\n \n     def __init__(self, context):\n         self.project = context.globals.get(\"project\", \"ignite\")\n \n     def home(self, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Home directory.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         home_dir = project or self.project\n         if version is not None:\n             home_dir += \"-%s\" % str(version)\n \n         return os.path.join(IgnitePath.IGNITE_INSTALL_ROOT, home_dir)\n \n     def script(self, script_name, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param script_name: Script name.\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Full path to script.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         return os.path.join(self.home(version, project=project), \"bin\", script_name)\n \n-    def _version(self, node_or_version):\n+    @staticmethod\n+    def __version__(node_or_version):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwMjI2Mg==", "bodyText": "there is no need for staticmethod decorator as the method is never used beyond this class", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462402262", "createdAt": "2020-07-29T15:47:49Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/utils/ignite_path.py", "diffHunk": "@@ -13,44 +13,55 @@\n # See the License for the specific language governing permissions and\n # limitations under the License.\n \n+\"\"\"\n+This module contains ignite path resolve utilities.\n+\"\"\"\n+\n import os\n \n from ignitetest.tests.utils.version import get_version, IgniteVersion\n \n-\"\"\"\n-This module provides Ignite path methods\n-\"\"\"\n-\n \n class IgnitePath:\n-    SCRATCH_ROOT = \"/mnt\"\n-    IGNITE_INSTALL_ROOT = \"/opt\"\n-\n     \"\"\"Path resolver for Ignite system tests which assumes the following layout:\n \n-        /opt/ignite-dev          # Current version of Ignite under test\n-        /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n-        /opt/ignite-<version>    # Other previous versions of Ignite\n-        ...\n-    \"\"\"\n+       /opt/ignite-dev          # Current version of Ignite under test\n+       /opt/ignite-2.7.6        # Example of an older version of Ignite installed from tarball\n+       /opt/ignite-<version>    # Other previous versions of Ignite\n+       ...\n+   \"\"\"\n+    SCRATCH_ROOT = \"/mnt\"\n+    IGNITE_INSTALL_ROOT = \"/opt\"\n \n     def __init__(self, context):\n         self.project = context.globals.get(\"project\", \"ignite\")\n \n     def home(self, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Home directory.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         home_dir = project or self.project\n         if version is not None:\n             home_dir += \"-%s\" % str(version)\n \n         return os.path.join(IgnitePath.IGNITE_INSTALL_ROOT, home_dir)\n \n     def script(self, script_name, node_or_version, project=None):\n-        version = self._version(node_or_version)\n+        \"\"\"\n+        :param script_name: Script name.\n+        :param node_or_version: Ignite service node or IgniteVersion instance.\n+        :param project: Project name.\n+        :return: Full path to script.\n+        \"\"\"\n+        version = self.__version__(node_or_version)\n         return os.path.join(self.home(version, project=project), \"bin\", script_name)\n \n-    def _version(self, node_or_version):\n+    @staticmethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxMTc5NQ==", "bodyText": "Do we really need static methods in our code? I don't see any case in our code where usage of them is required. It just adds more sugar without need. Also some code styles consider them evil, e.g. Google Guide.", "url": "https://github.com/apache/ignite/pull/8098#discussion_r462411795", "createdAt": "2020-07-29T16:01:03Z", "author": {"login": "timoninmaxim"}, "path": "modules/ducktests/tests/ignitetest/services/spark.py", "diffHunk": "@@ -103,28 +109,40 @@ def clean_node(self, node):\n         node.account.ssh(\"sudo rm -rf -- %s\" % SparkService.SPARK_PERSISTENT_ROOT, allow_fail=False)\n \n     def pids(self, node):\n-        \"\"\"Return process ids associated with running processes on the given node.\"\"\"\n         try:\n             cmd = \"jcmd | grep -e %s | awk '{print $1}'\" % self.java_class_name(node)\n-            pid_arr = [pid for pid in node.account.ssh_capture(cmd, allow_fail=True, callback=int)]\n-            return pid_arr\n-        except (RemoteCommandError, ValueError) as e:\n+            return list(node.account.ssh_capture(cmd, allow_fail=True, callback=int))\n+        except (RemoteCommandError, ValueError):\n             return []\n \n     def java_class_name(self, node):\n+        \"\"\"\n+        :param node: Spark node.\n+        :return: Class name depending on node type (master or slave).\n+        \"\"\"\n         if node == self.nodes[0]:\n             return \"org.apache.spark.deploy.master.Master\"\n-        else:\n-            return \"org.apache.spark.deploy.worker.Worker\"\n \n-    def master_log_path(self, node):\n+        return \"org.apache.spark.deploy.worker.Worker\"\n+\n+    @staticmethod", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2f9fe21093d4d8e72c3fcbc0c7402bb55115b36"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aff6f9fcfc796a04f0ffaa29b06f0dfcaf1214f", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/5aff6f9fcfc796a04f0ffaa29b06f0dfcaf1214f", "committedDate": "2020-07-30T06:15:35Z", "message": "Fix private methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3977212ebc81d8163f3ebac07d0952bfa473a096", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/3977212ebc81d8163f3ebac07d0952bfa473a096", "committedDate": "2020-07-30T09:06:24Z", "message": "Add checkstyle script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5d27151c73365d0eac8f83c66c610600297c86c", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/e5d27151c73365d0eac8f83c66c610600297c86c", "committedDate": "2020-07-30T09:07:35Z", "message": "Add checkstyle script"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3309af5d0250cf8b5bf455c44e425f835aaf369", "author": {"user": {"login": "ivandasch", "name": "Ivan Daschinskiy"}}, "url": "https://github.com/apache/ignite/commit/d3309af5d0250cf8b5bf455c44e425f835aaf369", "committedDate": "2020-07-30T09:08:55Z", "message": "Add checkstyle script"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3194, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}