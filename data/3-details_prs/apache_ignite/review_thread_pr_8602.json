{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0OTIyMjI3", "number": 8602, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTowNjowOFrOFJKaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNToyOTowMVrOFJKhVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUyMDE5OnYy", "diffSide": "RIGHT", "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Services/ServiceProxyTest.cs", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTowNjowOFrOILdJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTowNjowOFrOILdJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4Mjc2OA==", "bodyText": "Unused import", "url": "https://github.com/apache/ignite/pull/8602#discussion_r548882768", "createdAt": "2020-12-25T15:06:08Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Services/ServiceProxyTest.cs", "diffHunk": "@@ -18,6 +18,7 @@\n namespace Apache.Ignite.Core.Tests.Services\n {\n     using System;\n+    using System.CodeDom;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00b8adf462c4d803c5a36dc7288cc4dc42e72a9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUzMjUxOnYy", "diffSide": "RIGHT", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Binary/BinaryProcessor.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNToyMjozOFrOILdPFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTo0Njo0NlrOILdYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDI0Nw==", "bodyText": "Let's extract a method string GetTypeName(int id, bool java).", "url": "https://github.com/apache/ignite/pull/8602#discussion_r548884247", "createdAt": "2020-12-25T15:22:38Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Binary/BinaryProcessor.cs", "diffHunk": "@@ -162,7 +168,34 @@ public BinaryType RegisterEnum(string typeName, IEnumerable<KeyValuePair<string,\n         /// <returns>Type or null.</returns>\n         public string GetTypeName(int id)\n         {\n-            return DoOutInOp((int) Op.GetType, w => w.WriteInt(id), r => Marshaller.StartUnmarshal(r).ReadString());\n+            try\n+            {\n+                return DoOutInOp((int) Op.GetType, w =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00b8adf462c4d803c5a36dc7288cc4dc42e72a9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NjY4Mw==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/8602#discussion_r548886683", "createdAt": "2020-12-25T15:46:46Z", "author": {"login": "nizhikov"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Binary/BinaryProcessor.cs", "diffHunk": "@@ -162,7 +168,34 @@ public BinaryType RegisterEnum(string typeName, IEnumerable<KeyValuePair<string,\n         /// <returns>Type or null.</returns>\n         public string GetTypeName(int id)\n         {\n-            return DoOutInOp((int) Op.GetType, w => w.WriteInt(id), r => Marshaller.StartUnmarshal(r).ReadString());\n+            try\n+            {\n+                return DoOutInOp((int) Op.GetType, w =>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDI0Nw=="}, "originalCommit": {"oid": "d00b8adf462c4d803c5a36dc7288cc4dc42e72a9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MTUzODc2OnYy", "diffSide": "RIGHT", "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Binary/BinaryProcessor.cs", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNToyOTowMVrOILdR5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxNTo0Njo1M1rOILdYqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDk2Ng==", "bodyText": "I think we can return the name of the registered type from above, no need to call into Java again.", "url": "https://github.com/apache/ignite/pull/8602#discussion_r548884966", "createdAt": "2020-12-25T15:29:01Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Binary/BinaryProcessor.cs", "diffHunk": "@@ -162,7 +168,34 @@ public BinaryType RegisterEnum(string typeName, IEnumerable<KeyValuePair<string,\n         /// <returns>Type or null.</returns>\n         public string GetTypeName(int id)\n         {\n-            return DoOutInOp((int) Op.GetType, w => w.WriteInt(id), r => Marshaller.StartUnmarshal(r).ReadString());\n+            try\n+            {\n+                return DoOutInOp((int) Op.GetType, w =>\n+                {\n+                    w.WriteInt(id);\n+                    w.WriteByte(DotNetPlatformId);\n+                }, r => Marshaller.StartUnmarshal(r).ReadString());\n+            }\n+            catch (BinaryObjectException)\n+            {\n+                if (!Marshaller.RegisterSameJavaType.Value)\n+                    throw;\n+            }\n+\n+            // Try to get java type name and register corresponding DotNet type.\n+            var javaTypeName = DoOutInOp((int) Op.GetType, w =>\n+            {\n+                w.WriteInt(id);\n+                w.WriteByte(JavaPlatformId);\n+            }, r => Marshaller.StartUnmarshal(r).ReadString());\n+\n+            RegisterType(id, Marshaller.GetTypeName(javaTypeName), false);\n+\n+            return DoOutInOp((int) Op.GetType, w =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d00b8adf462c4d803c5a36dc7288cc4dc42e72a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NjY5OQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/8602#discussion_r548886699", "createdAt": "2020-12-25T15:46:53Z", "author": {"login": "nizhikov"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Binary/BinaryProcessor.cs", "diffHunk": "@@ -162,7 +168,34 @@ public BinaryType RegisterEnum(string typeName, IEnumerable<KeyValuePair<string,\n         /// <returns>Type or null.</returns>\n         public string GetTypeName(int id)\n         {\n-            return DoOutInOp((int) Op.GetType, w => w.WriteInt(id), r => Marshaller.StartUnmarshal(r).ReadString());\n+            try\n+            {\n+                return DoOutInOp((int) Op.GetType, w =>\n+                {\n+                    w.WriteInt(id);\n+                    w.WriteByte(DotNetPlatformId);\n+                }, r => Marshaller.StartUnmarshal(r).ReadString());\n+            }\n+            catch (BinaryObjectException)\n+            {\n+                if (!Marshaller.RegisterSameJavaType.Value)\n+                    throw;\n+            }\n+\n+            // Try to get java type name and register corresponding DotNet type.\n+            var javaTypeName = DoOutInOp((int) Op.GetType, w =>\n+            {\n+                w.WriteInt(id);\n+                w.WriteByte(JavaPlatformId);\n+            }, r => Marshaller.StartUnmarshal(r).ReadString());\n+\n+            RegisterType(id, Marshaller.GetTypeName(javaTypeName), false);\n+\n+            return DoOutInOp((int) Op.GetType, w =>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4NDk2Ng=="}, "originalCommit": {"oid": "d00b8adf462c4d803c5a36dc7288cc4dc42e72a9"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2385, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}