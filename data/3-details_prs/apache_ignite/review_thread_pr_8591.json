{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMzQyNDY0", "number": 8591, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1MTowMlrOFHN0HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTozMjo0OVrOFIwT3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTEwNjg1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDo1MTowMlrOIIl9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0NjozM1rOIKY8-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw==", "bodyText": "Javadoc is required for all classes.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545881507", "createdAt": "2020-12-18T14:51:02Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MjEwMA==", "bodyText": "Looks like this test is not added to any suite, and thus won't run on CI.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545882100", "createdAt": "2020-12-18T14:51:34Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw=="}, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NTQ5Ng==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547765496", "createdAt": "2020-12-23T07:46:33Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg4MTUwNw=="}, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTE2OTI2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTowMDoyOFrOIImihQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0NjoxN1rOIKY8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDk0OQ==", "bodyText": "[ and ] are only needed when there is a port, otherwise IPv6 address does not have those.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545890949", "createdAt": "2020-12-18T15:00:28Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2NTMxNw==", "bodyText": "Added the case where there is IPv6 without [ and ] and port(s)", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547765317", "createdAt": "2020-12-23T07:46:17Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDk0OQ=="}, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTE3NjU2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTowMToyNlrOIImmyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0NDowNVrOIKY1Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MjA0Mg==", "bodyText": "substring(1 assumes that [ is at index 0, however, the line above addrStr.contains(\"[\") allows [ at any index.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545892042", "createdAt": "2020-12-18T15:01:26Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 host is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2MzUzMA==", "bodyText": "Now it checks for addrStr.charAt(0) == '['", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547763530", "createdAt": "2020-12-23T07:44:05Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +53,89 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n+        if (addrStr.contains(\"[\")) { // IPv6\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 host is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MjA0Mg=="}, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTE4NTU5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNTowMzoxN1rOIImsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzo0MzowNVrOIKYyFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MzUxMg==", "bodyText": "Please add a check for the exception message too, not only the class.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r545893512", "createdAt": "2020-12-18T15:03:17Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv4 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * ests correct input address with IPv4 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4NoPort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"[::1]:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"[3ffe:2a00:100:7031::]:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"3ffe:2a00:100:7031::\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6NoPort() throws IgniteCheckedException {\n+        String addrStr = \"[::FFFF:129.144.52.38]\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::FFFF:129.144.52.38\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests incorrect input address with IPv6 host (no brackets) and port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test(expected = IgniteCheckedException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc2MjcwOQ==", "bodyText": "Done", "url": "https://github.com/apache/ignite/pull/8591#discussion_r547762709", "createdAt": "2020-12-23T07:43:05Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class HostAndPortRangeTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv4 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * ests correct input address with IPv4 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv4NoPort() throws IgniteCheckedException {\n+        String addrStr = \"127.0.0.1\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"127.0.0.1\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and port range.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithPortRange() throws IgniteCheckedException {\n+        String addrStr = \"[::1]:8080..8090\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::1\", 8080, 8090);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and single port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6WithSinglePort() throws IgniteCheckedException {\n+        String addrStr = \"[3ffe:2a00:100:7031::]:8080\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"3ffe:2a00:100:7031::\", 8080, 8080);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests correct input address with IPv6 host and no port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test\n+    public void testParseIPv6NoPort() throws IgniteCheckedException {\n+        String addrStr = \"[::FFFF:129.144.52.38]\";\n+        String errMsgPrefix = \"\";\n+        int dfltPortFrom = 18360;\n+        int dfltPortTo = 18362;\n+        HostAndPortRange actual = HostAndPortRange.parse(addrStr, dfltPortFrom, dfltPortTo, errMsgPrefix);\n+        HostAndPortRange expected = new HostAndPortRange(\"::FFFF:129.144.52.38\", 18360, 18362);\n+        assertEquals(expected, actual);\n+    }\n+\n+    /**\n+     * tests incorrect input address with IPv6 host (no brackets) and port.\n+     * @throws IgniteCheckedException on incorrect host/port\n+     */\n+    @Test(expected = IgniteCheckedException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MzUxMg=="}, "originalCommit": {"oid": "58054e3f7ea8a2b2259ef4cb2eb04e416aa81c17"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzEzMDQwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTowNzowOVrOIK1zZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMDozMlrOILCJ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIzODE4Mg==", "bodyText": "Redundant blank line", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548238182", "createdAt": "2020-12-23T21:07:09Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDU1OQ==", "bodyText": "Removed", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440559", "createdAt": "2020-12-24T08:10:32Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODIzODE4Mg=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzE1MDg2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToxMTo0OFrOIK2BMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMDo0NFrOILCKGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MTcxMg==", "bodyText": "Code style: else should start on a new line", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548241712", "createdAt": "2020-12-23T21:11:48Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDYwMg==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440602", "createdAt": "2020-12-24T08:10:44Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MTcxMg=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzE1OTM2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToxMzozOVrOIK2GsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMDo1NVrOILCKXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MzEyMA==", "bodyText": "Let's make the error message more helpful, something along the lines of Failed to parse IPv6 address, missing ']'", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548243120", "createdAt": "2020-12-23T21:13:39Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDY3MA==", "bodyText": "Corrected.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440670", "createdAt": "2020-12-24T08:10:55Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0MzEyMA=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzE3MDY2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToxNjoxMVrOIK2Nzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMTowN1rOILCKjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0NDk0Mw==", "bodyText": "Code style: remove curly braces for single-line statement\nhttps://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548244943", "createdAt": "2020-12-23T21:16:11Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDcxNg==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440716", "createdAt": "2020-12-24T08:11:07Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0NDk0Mw=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzE4OTA4OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToxOTo1NlrOIK2ZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMToyM1rOILCK5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0Nzg3Ng==", "bodyText": "Code style: add blank line after closing curly brace", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548247876", "createdAt": "2020-12-23T21:19:56Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDgwNw==", "bodyText": "Done.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440807", "createdAt": "2020-12-24T08:11:23Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0Nzg3Ng=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzE5MDI5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToyMDoxNFrOIK2aJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxNDoyNFrOILCOPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0ODEwMQ==", "bodyText": "Code style: add blank line between semantic units", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548248101", "createdAt": "2020-12-23T21:20:14Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MTY2Mg==", "bodyText": "Added.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548441662", "createdAt": "2020-12-24T08:14:24Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0ODEwMQ=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzIwMDM2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToyMjozMFrOIK2g7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToyMjozMFrOIK2g7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI0OTgzNw==", "bodyText": "Code style: add space after //", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548249837", "createdAt": "2020-12-23T21:22:30Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzIwMzAxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToyMzoxNlrOIK2iiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMTozNVrOILCLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDI0OQ==", "bodyText": "Missing javadoc", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250249", "createdAt": "2020-12-23T21:23:16Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDg2Ng==", "bodyText": "Added javadoc.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440866", "createdAt": "2020-12-24T08:11:35Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDI0OQ=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzIwNDA5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToyMzozMFrOIK2jPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMTo0MlrOILCLPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDQyOA==", "bodyText": "Code style: add space after []", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250428", "createdAt": "2020-12-23T21:23:30Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *\n+     * @param addrStr Address String.\n+     * @param errMsgPrefix Error message prefix.\n+     * @param portStr Port or port range string.\n+     * @return Array of int[portFrom, portTo].\n+     * @throws IgniteCheckedException If failed.\n+     */\n \n-            int portRangeIdx = portStr.indexOf(\"..\");\n+    private static int[] verifyPortStr(String addrStr, String errMsgPrefix, String portStr) throws IgniteCheckedException {\n+        String portFromStr;\n+        String portToStr;\n \n-            if (portRangeIdx >= 0) {\n-                // Port range is specified.\n-                portFromStr = portStr.substring(0, portRangeIdx);\n-                portToStr = portStr.substring(portRangeIdx + 2, portStr.length());\n-            }\n-            else {\n-                // Single port is specified.\n-                portFromStr = portStr;\n-                portToStr = portStr;\n-            }\n+        if (F.isEmpty(portStr))\n+            throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n \n-            portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n-            portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n+        int portRangeIdx = portStr.indexOf(\"..\");\n \n-            if (portFrom > portTo)\n-                throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+        if (portRangeIdx >= 0) {\n+            // Port range is specified.\n+            portFromStr = portStr.substring(0, portRangeIdx);\n+            portToStr = portStr.substring(portRangeIdx + 2);\n         }\n         else {\n-            // Host name not specified.\n-            if (colIdx == 0)\n-                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n-\n-            // Port is not specified, use defaults.\n-            host = addrStr;\n-\n-            portFrom = dfltPortFrom;\n-            portTo = dfltPortTo;\n+            // Single port is specified.\n+            portFromStr = portStr;\n+            portToStr = portStr;\n         }\n \n-        if (F.isEmpty(host))\n-            throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+        int portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n+        int portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n \n-        return new HostAndPortRange(host, portFrom, portTo);\n+        if (portFrom > portTo)\n+            throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+\n+        return new int[]{portFrom, portTo};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDg5NA==", "bodyText": "Added.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440894", "createdAt": "2020-12-24T08:11:42Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+                    }\n+                }\n+                else {\n+                    host = addrStr.substring(0, colIdx);\n+                    portStr = addrStr.substring(colIdx + 1);\n+                    int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                    portFrom = ports[0];\n+                    portTo = ports[1];\n+                }\n+            } else if (colIdx == 0) {\n+                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+            } else { // Port is not specified, use defaults.\n+                host = addrStr;\n \n-            host = addrStr.substring(0, colIdx);\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            }\n+        }\n \n-            String portStr = addrStr.substring(colIdx + 1, addrStr.length());\n+        return new HostAndPortRange(host, portFrom, portTo);\n+    }\n \n-            if (F.isEmpty(portStr))\n-                throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n+    /**\n+     *\n+     * @param addrStr Address String.\n+     * @param errMsgPrefix Error message prefix.\n+     * @param portStr Port or port range string.\n+     * @return Array of int[portFrom, portTo].\n+     * @throws IgniteCheckedException If failed.\n+     */\n \n-            int portRangeIdx = portStr.indexOf(\"..\");\n+    private static int[] verifyPortStr(String addrStr, String errMsgPrefix, String portStr) throws IgniteCheckedException {\n+        String portFromStr;\n+        String portToStr;\n \n-            if (portRangeIdx >= 0) {\n-                // Port range is specified.\n-                portFromStr = portStr.substring(0, portRangeIdx);\n-                portToStr = portStr.substring(portRangeIdx + 2, portStr.length());\n-            }\n-            else {\n-                // Single port is specified.\n-                portFromStr = portStr;\n-                portToStr = portStr;\n-            }\n+        if (F.isEmpty(portStr))\n+            throw createParseError(addrStr, errMsgPrefix, \"port range is not specified\");\n \n-            portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n-            portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n+        int portRangeIdx = portStr.indexOf(\"..\");\n \n-            if (portFrom > portTo)\n-                throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+        if (portRangeIdx >= 0) {\n+            // Port range is specified.\n+            portFromStr = portStr.substring(0, portRangeIdx);\n+            portToStr = portStr.substring(portRangeIdx + 2);\n         }\n         else {\n-            // Host name not specified.\n-            if (colIdx == 0)\n-                throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n-\n-            // Port is not specified, use defaults.\n-            host = addrStr;\n-\n-            portFrom = dfltPortFrom;\n-            portTo = dfltPortTo;\n+            // Single port is specified.\n+            portFromStr = portStr;\n+            portToStr = portStr;\n         }\n \n-        if (F.isEmpty(host))\n-            throw createParseError(addrStr, errMsgPrefix, \"Host name is empty\");\n+        int portFrom = parsePort(portFromStr, addrStr, errMsgPrefix);\n+        int portTo = parsePort(portToStr, addrStr, errMsgPrefix);\n \n-        return new HostAndPortRange(host, portFrom, portTo);\n+        if (portFrom > portTo)\n+            throw createParseError(addrStr, errMsgPrefix, \"start port cannot be less than end port\");\n+\n+        return new int[]{portFrom, portTo};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDQyOA=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzIwNzE1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMToyNDoxOVrOIK2lEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMTo1MlrOILCLaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDg5OQ==", "bodyText": "Comments should start with a capital letter", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548250899", "createdAt": "2020-12-23T21:24:19Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MDkzNg==", "bodyText": "Corrected.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548440936", "createdAt": "2020-12-24T08:11:52Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/HostAndPortRangeTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.apache.ignite.testframework.junits.common.GridCommonTest;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+/**\n+ * Tests HostAndPortRange parse method.\n+ */\n+@GridCommonTest(group = \"Utils\")\n+public class HostAndPortRangeTest extends GridCommonAbstractTest {\n+\n+    /**\n+     * tests correct input address with IPv4 host and port range.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1MDg5OQ=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzIzMzgwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTozMDowMFrOIK22OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMjo1NFrOILCMjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NTI4OQ==", "bodyText": "Can be shorter and avoid extra allocation: addrStr.lastIndexOf(\":\", colIdx)", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548255289", "createdAt": "2020-12-23T21:30:00Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MTIzMQ==", "bodyText": "Now it checks for previous colon as addrStr.lastIndexOf(':', colIdx-1) != -1", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548441231", "createdAt": "2020-12-24T08:12:54Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NTI4OQ=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NzI0NDQ0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QyMTozMjo0OVrOIK29lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwODoxMzoyN1rOILCNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NzE3NA==", "bodyText": "Pass e as cause.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548257174", "createdAt": "2020-12-23T21:32:49Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ0MTM4NQ==", "bodyText": "Overloaded createParseError method to pass cause.", "url": "https://github.com/apache/ignite/pull/8591#discussion_r548441385", "createdAt": "2020-12-24T08:13:27Z", "author": {"login": "vkozhukhova"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/HostAndPortRange.java", "diffHunk": "@@ -53,60 +55,99 @@ public static HostAndPortRange parse(String addrStr, int dfltPortFrom, int dfltP\n \n         String host;\n \n+        String portStr;\n         int portFrom;\n         int portTo;\n \n         if (F.isEmpty(addrStr))\n             throw createParseError(addrStr, errMsgPrefix, \"Address is empty\");\n \n-        final int colIdx = addrStr.indexOf(':');\n-\n-        if (colIdx > 0) {\n-            String portFromStr;\n-            String portToStr;\n+        if (addrStr.charAt(0) == '[') { // IPv6 with port(s)\n+            int hostEndIdx = addrStr.indexOf(']');\n+            if (hostEndIdx == -1) {\n+                throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");\n+            }\n+            host = addrStr.substring(1, hostEndIdx);\n+            if (hostEndIdx == addrStr.length() - 1) { // no port specified, using default\n+                portFrom = dfltPortFrom;\n+                portTo = dfltPortTo;\n+            } else { // port specified\n+                portStr = addrStr.substring(hostEndIdx + 2);\n+\n+                int[] ports = verifyPortStr(addrStr, errMsgPrefix, portStr);\n+                portFrom = ports[0];\n+                portTo = ports[1];\n+            }\n+        } else { //IPv4 || IPv6 without port || empty host\n+            final int colIdx = addrStr.lastIndexOf(':');\n+            if (colIdx > 0) {\n+                if (addrStr.substring(0, colIdx).contains(\":\")) { // IPv6 without [] and port\n+                    try {\n+                        Inet6Address.getByName(addrStr);\n+                        host = addrStr;\n+                        portFrom = dfltPortFrom;\n+                        portTo = dfltPortTo;\n+                    }\n+                    catch (UnknownHostException e) {\n+                        throw createParseError(addrStr, errMsgPrefix, \"IPv6 is incorrect\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODI1NzE3NA=="}, "originalCommit": {"oid": "4c5ae6273b4293ab5eb0718b479005f61379dae6"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2375, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}