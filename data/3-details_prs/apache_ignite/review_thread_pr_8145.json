{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjIzOTE5", "number": 8145, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTo1ODozN1rOEY-oJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0NjowN1rOEZDW1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjI3MzY3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOTo1ODozN1rOHBiOog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoxMTo1MlrOHBmLKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3MTQyNg==", "bodyText": "Do we want to make a set of constants for (\"io\", \"discovery\")?", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471371426", "createdAt": "2020-08-17T09:58:37Z", "author": {"login": "ingvard"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -2115,6 +2115,20 @@ protected void onExchange(DiscoveryDataPacket dataPacket, ClassLoader clsLdr) {\n     @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n         initializeImpl();\n \n+        MetricRegistry discoReg =\n+            ((IgniteEx)ignite()).context().metric().registry(metricName(\"io\", \"discovery\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b332e99b77bf39dbb923964e1ca90e5db7e12c0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjA3NA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471436074", "createdAt": "2020-08-17T12:11:52Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -2115,6 +2115,20 @@ protected void onExchange(DiscoveryDataPacket dataPacket, ClassLoader clsLdr) {\n     @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n         initializeImpl();\n \n+        MetricRegistry discoReg =\n+            ((IgniteEx)ignite()).context().metric().registry(metricName(\"io\", \"discovery\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3MTQyNg=="}, "originalCommit": {"oid": "9b332e99b77bf39dbb923964e1ca90e5db7e12c0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjI4MTAzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryStatistics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDowMDozN1rOHBiS4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoxMjowNVrOHBmLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3MjUxNQ==", "bodyText": "Is it mistake?  long duration = U.currentTimeMillis() - startTs;  startTs is always null.", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471372515", "createdAt": "2020-08-17T10:00:37Z", "author": {"login": "ingvard"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryStatistics.java", "diffHunk": "@@ -287,23 +158,18 @@ public synchronized void onMessageProcessingStarted(TcpDiscoveryAbstractMessage\n     public synchronized void onMessageProcessingFinished(TcpDiscoveryAbstractMessage msg) {\n         assert msg != null;\n \n-        Long startTs = msgsProcStartTs.get(msg.id());\n+        Long startTs = msgsProcStartTs.remove(msg.id());\n \n-        if (startTs != null) {\n+        if (startTs == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b332e99b77bf39dbb923964e1ca90e5db7e12c0"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzNjE4NA==", "bodyText": "Yes, my fault.\nThanks for noticing.", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471436184", "createdAt": "2020-08-17T12:12:05Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/internal/TcpDiscoveryStatistics.java", "diffHunk": "@@ -287,23 +158,18 @@ public synchronized void onMessageProcessingStarted(TcpDiscoveryAbstractMessage\n     public synchronized void onMessageProcessingFinished(TcpDiscoveryAbstractMessage msg) {\n         assert msg != null;\n \n-        Long startTs = msgsProcStartTs.get(msg.id());\n+        Long startTs = msgsProcStartTs.remove(msg.id());\n \n-        if (startTs != null) {\n+        if (startTs == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3MjUxNQ=="}, "originalCommit": {"oid": "9b332e99b77bf39dbb923964e1ca90e5db7e12c0"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njk0MDQyOnYy", "diffSide": "LEFT", "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoxOTo0M1rOHBoaMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDoxNzowN1rOHBqrbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MjY5MA==", "bodyText": "Why the public API was changed?", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471472690", "createdAt": "2020-08-17T13:19:43Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -1358,15 +1363,6 @@ public long getPendingMessagesRegistered() {\n         return stats.pendingMessagesRegistered();\n     }\n \n-    /**\n-     * Gets pending messages discarded count.\n-     *\n-     * @return Pending messages registered count.\n-     */\n-    public long getPendingMessagesDiscarded() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3232c4678bec14cbfabe258182633a24b8e6971"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTUwOTg3MQ==", "bodyText": "fixed.", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471509871", "createdAt": "2020-08-17T14:17:07Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -1358,15 +1363,6 @@ public long getPendingMessagesRegistered() {\n         return stats.pendingMessagesRegistered();\n     }\n \n-    /**\n-     * Gets pending messages discarded count.\n-     *\n-     * @return Pending messages registered count.\n-     */\n-    public long getPendingMessagesDiscarded() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3MjY5MA=="}, "originalCommit": {"oid": "a3232c4678bec14cbfabe258182633a24b8e6971"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njk2MjMyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoyNTowMVrOHBonJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoyNTowMVrOHBonJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3NjAwNA==", "bodyText": "Now we can get NPE from public methods until SPI was started.", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471476004", "createdAt": "2020-08-17T13:25:01Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -359,7 +364,7 @@\n     private Marshaller marsh;\n \n     /** Statistics. */\n-    protected final TcpDiscoveryStatistics stats = new TcpDiscoveryStatistics();\n+    protected TcpDiscoveryStatistics stats;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3232c4678bec14cbfabe258182633a24b8e6971"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njk3NjcyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoyODoyNVrOHBov4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzoyODoyNVrOHBov4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ3ODI0Mw==", "bodyText": "Can be one-line", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471478243", "createdAt": "2020-08-17T13:28:25Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java", "diffHunk": "@@ -2115,6 +2109,23 @@ protected void onExchange(DiscoveryDataPacket dataPacket, ClassLoader clsLdr) {\n     @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n         initializeImpl();\n \n+        MetricRegistry discoReg =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3232c4678bec14cbfabe258182633a24b8e6971"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzA0ODU0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBeanTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0NjowN1rOHBpbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0NjowN1rOHBpbfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4OTQwNw==", "bodyText": "Why this changed?", "url": "https://github.com/apache/ignite/pull/8145#discussion_r471489407", "createdAt": "2020-08-17T13:46:07Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpiMBeanTest.java", "diffHunk": "@@ -64,21 +70,121 @@\n      */\n     @Test\n     public void testMBean() throws Exception {\n-        startGrids(3);\n+        int cnt = 3;\n+        int cliIdx = cnt - 1;\n+\n+        startGrids(cnt - 1);\n+        startClientGrid(cliIdx);\n+\n+        ClusterNode crd = U.oldest(grid(0).context().discovery().aliveServerNodes(), null);\n+\n+        assertNotNull(crd);\n \n         try {\n-            for (int i = 0; i < 3; i++) {\n+            for (int i = 0; i < cnt; i++) {\n                 IgniteEx grid = grid(i);\n \n+                MetricRegistry discoReg = grid.context().metric().registry(DISCO_METRICS);\n+\n                 TcpDiscoverySpiMBean bean = getMxBean(grid.context().igniteInstanceName(), \"SPIs\",\n                     TcpDiscoverySpi.class, TcpDiscoverySpiMBean.class);\n \n                 assertNotNull(bean);\n+\n                 assertEquals(grid.cluster().topologyVersion(), bean.getCurrentTopologyVersion());\n+                assertEquals(grid.cluster().topologyVersion(),\n+                    discoReg.<LongMetric>findMetric(\"CurrentTopologyVersion\").value());\n+\n+                if (i != cliIdx) {\n+                    assertEquals(crd.id(), bean.getCoordinator());\n+                    assertEquals(crd.id(), discoReg.<ObjectMetric<UUID>>findMetric(\"Coordinator\").value());\n+                }\n+                else {\n+                    assertNull(bean.getCoordinator());\n+                    assertNull(discoReg.findMetric(\"Coordinator\"));\n+                }\n+\n+                if (grid.localNode().id().equals(bean.getCoordinator())) {\n+                    assertTrue(bean.getCoordinatorSinceTimestamp() > 0);\n+                    assertTrue(discoReg.<LongMetric>findMetric(\"CoordinatorSince\").value() > 0);\n+                }\n+                else {\n+                    assertEquals(0, bean.getCoordinatorSinceTimestamp());\n+\n+                    if (i == cliIdx)\n+                        assertNull(discoReg.findMetric(\"CoordinatorSince\"));\n+                    else\n+                        assertEquals(0L, discoReg.<LongMetric>findMetric(\"CoordinatorSince\").value());\n+                }\n+\n+                // `getNodesJoined` returns count of joined nodes since local node startup.\n+                assertEquals((cnt - 1) - i, bean.getNodesJoined());\n+                assertEquals((cnt - 1) - i, discoReg.<IntMetric>findMetric(\"JoinedNodes\").value());\n+\n+                assertEquals(0L, bean.getNodesFailed());\n+                assertEquals(0, discoReg.<IntMetric>findMetric(\"FailedNodes\").value());\n+\n+                assertEquals(0L, bean.getNodesLeft());\n+                assertEquals(0, discoReg.<IntMetric>findMetric(\"LeftNodes\").value());\n+\n+                assertTrue(bean.getTotalReceivedMessages() > 0);\n+                assertTrue(discoReg.<IntMetric>findMetric(\"TotalReceivedMessages\").value() > 0);\n+\n+                assertTrue(bean.getTotalProcessedMessages() > 0);\n+                assertTrue(discoReg.<IntMetric>findMetric(\"TotalProcessedMessages\").value() > 0);\n+\n+                if (i != cliIdx) {\n+                    assertTrue(bean.getPendingMessagesRegistered() > 0);\n+                    assertTrue(discoReg.<IntMetric>findMetric(\"PendingMessagesRegistered\").value() > 0);\n+                }\n+                else {\n+                    assertEquals(0, bean.getPendingMessagesRegistered());\n+                    assertEquals(0, discoReg.<IntMetric>findMetric(\"PendingMessagesRegistered\").value());\n+                }\n+\n+                assertEquals(0, bean.getPendingMessagesDiscarded());\n \n                 bean.dumpRingStructure();\n                 assertTrue(strLog.toString().contains(\"TcpDiscoveryNodesRing\"));\n+\n+                assertFalse(bean.getProcessedMessages().isEmpty());\n+                assertFalse(bean.getReceivedMessages().isEmpty());\n+                assertTrue(bean.getMaxMessageProcessingTime() > 0);\n+                assertEquals(i == cliIdx, bean.isClientMode());\n+            }\n+\n+            stopGrid(0);\n+\n+            crd = U.oldest(grid(1).context().discovery().aliveServerNodes(), null);\n+\n+            for (int i = 1; i < cnt; i++) {\n+                IgniteEx grid = grid(i);\n+\n+                MetricRegistry discoReg = grid.context().metric().registry(DISCO_METRICS);\n+\n+                TcpDiscoverySpiMBean bean = getMxBean(grid.context().igniteInstanceName(), \"SPIs\",\n+                    TcpDiscoverySpi.class, TcpDiscoverySpiMBean.class);\n+\n+                assertNotNull(bean);\n+\n+                assertEquals(grid.cluster().topologyVersion(), bean.getCurrentTopologyVersion());\n+                assertEquals(grid.cluster().topologyVersion(),\n+                    discoReg.<LongMetric>findMetric(\"CurrentTopologyVersion\").value());\n+\n+                if (i != cliIdx) {\n+                    assertEquals(crd.id(), bean.getCoordinator());\n+                    assertEquals(crd.id(), discoReg.<ObjectMetric<UUID>>findMetric(\"Coordinator\").value());\n+                }\n+\n+                if (grid.localNode().id().equals(crd.id())) {\n+                    assertTrue(bean.getCoordinatorSinceTimestamp() > 0);\n+                    assertTrue(discoReg.<LongMetric>findMetric(\"CoordinatorSince\").value() > 0);\n+                }\n+\n+                assertEquals(1L, bean.getNodesLeft());\n+                assertEquals(1, discoReg.<IntMetric>findMetric(\"LeftNodes\").value());\n             }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3232c4678bec14cbfabe258182633a24b8e6971"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2712, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}