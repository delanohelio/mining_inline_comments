{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzgxMjkx", "number": 7578, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0OToxNVrODr9L7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1NTozNVrODr9Snw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3ODM5OnYy", "diffSide": "RIGHT", "path": "modules/tools/src/main/java/org/apache/ignite/tools/checkstyle/OverrideAnnotationOnTheSameLineCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0OToxNVrOF8mPWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozNjozM1rOF8nhyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTQwMQ==", "bodyText": "Here and below: Please, remove curly brackets for one-line statement after if", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399085401", "createdAt": "2020-03-27T07:49:15Z", "author": {"login": "ivandasch"}, "path": "modules/tools/src/main/java/org/apache/ignite/tools/checkstyle/OverrideAnnotationOnTheSameLineCheck.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.tools.checkstyle;\n+\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks that {@code @Override} annotations are located on the same line with target method declarartions.\n+ * </p>\n+ */\n+public class OverrideAnnotationOnTheSameLineCheck extends AbstractCheck {\n+    /** Different line error message. */\n+    public static final String DIFF_LINE_ERR_MSG =\n+        \"@Override annotation on a different line than the target method declaration!\";\n+\n+    /** No method declaration error message. */\n+    public static final String NO_METHOD_ERR_MSG =\n+        \"No method declaration atfer @Override annotation!\";\n+\n+    /** */\n+    public static final String OVERRIDE = \"Override\";\n+\n+    /** {@inheritDoc} */\n+    @Override public int[] getDefaultTokens() {\n+        return new int[]{\n+            TokenTypes.CLASS_DEF,\n+            TokenTypes.INTERFACE_DEF,\n+            TokenTypes.ENUM_DEF,\n+            TokenTypes.METHOD_DEF,\n+            TokenTypes.CTOR_DEF,\n+        };\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public int[] getAcceptableTokens() {\n+        return new int[]{\n+            TokenTypes.CLASS_DEF,\n+            TokenTypes.INTERFACE_DEF,\n+            TokenTypes.ENUM_DEF,\n+            TokenTypes.METHOD_DEF,\n+            TokenTypes.ANNOTATION_DEF,\n+        };\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public int[] getRequiredTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void visitToken(DetailAST ast) {\n+        DetailAST nodeWithAnnotations = ast;\n+\n+        if (ast.getType() == TokenTypes.TYPECAST) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNjUwNQ==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399106505", "createdAt": "2020-03-27T08:36:33Z", "author": {"login": "oleg-ostanin"}, "path": "modules/tools/src/main/java/org/apache/ignite/tools/checkstyle/OverrideAnnotationOnTheSameLineCheck.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.tools.checkstyle;\n+\n+import com.puppycrawl.tools.checkstyle.api.AbstractCheck;\n+import com.puppycrawl.tools.checkstyle.api.DetailAST;\n+import com.puppycrawl.tools.checkstyle.api.TokenTypes;\n+import com.puppycrawl.tools.checkstyle.utils.CommonUtil;\n+\n+/**\n+ * <p>\n+ * Checks that {@code @Override} annotations are located on the same line with target method declarartions.\n+ * </p>\n+ */\n+public class OverrideAnnotationOnTheSameLineCheck extends AbstractCheck {\n+    /** Different line error message. */\n+    public static final String DIFF_LINE_ERR_MSG =\n+        \"@Override annotation on a different line than the target method declaration!\";\n+\n+    /** No method declaration error message. */\n+    public static final String NO_METHOD_ERR_MSG =\n+        \"No method declaration atfer @Override annotation!\";\n+\n+    /** */\n+    public static final String OVERRIDE = \"Override\";\n+\n+    /** {@inheritDoc} */\n+    @Override public int[] getDefaultTokens() {\n+        return new int[]{\n+            TokenTypes.CLASS_DEF,\n+            TokenTypes.INTERFACE_DEF,\n+            TokenTypes.ENUM_DEF,\n+            TokenTypes.METHOD_DEF,\n+            TokenTypes.CTOR_DEF,\n+        };\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public int[] getAcceptableTokens() {\n+        return new int[]{\n+            TokenTypes.CLASS_DEF,\n+            TokenTypes.INTERFACE_DEF,\n+            TokenTypes.ENUM_DEF,\n+            TokenTypes.METHOD_DEF,\n+            TokenTypes.ANNOTATION_DEF,\n+        };\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public int[] getRequiredTokens() {\n+        return CommonUtil.EMPTY_INT_ARRAY;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void visitToken(DetailAST ast) {\n+        DetailAST nodeWithAnnotations = ast;\n+\n+        if (ast.getType() == TokenTypes.TYPECAST) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NTQwMQ=="}, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE4NDA1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/configuration/distributed/DistributedConfigurationProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1MToyM1rOF8mSww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozNzowMFrOF8niuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NjI3NQ==", "bodyText": "According to codestyle, each arguments must be on a new line.", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399086275", "createdAt": "2020-03-27T07:51:23Z", "author": {"login": "ivandasch"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/configuration/distributed/DistributedConfigurationProcessor.java", "diffHunk": "@@ -236,9 +236,8 @@ private void doClusterWideUpdate(DistributedChangeableProperty prop) {\n                 return distributedMetastorage.writeAsync(toMetaStorageKey(key), newValue);\n             }\n \n-            @Override\n-            public GridFutureAdapter<?> casUpdate(String key, Serializable expectedValue, Serializable newValue)\n-                throws IgniteCheckedException {\n+            @Override public GridFutureAdapter<?> casUpdate(String key, Serializable expectedValue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNjc0Nw==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399106747", "createdAt": "2020-03-27T08:37:00Z", "author": {"login": "oleg-ostanin"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/configuration/distributed/DistributedConfigurationProcessor.java", "diffHunk": "@@ -236,9 +236,8 @@ private void doClusterWideUpdate(DistributedChangeableProperty prop) {\n                 return distributedMetastorage.writeAsync(toMetaStorageKey(key), newValue);\n             }\n \n-            @Override\n-            public GridFutureAdapter<?> casUpdate(String key, Serializable expectedValue, Serializable newValue)\n-                throws IgniteCheckedException {\n+            @Override public GridFutureAdapter<?> casUpdate(String key, Serializable expectedValue,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NjI3NQ=="}, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE4ODk0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractMetricsSelfTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1MzoyMFrOF8mV1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODozODozNlrOF8nl5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NzA2MA==", "bodyText": "Here and below -- each argument must be on a new line.", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399087060", "createdAt": "2020-03-27T07:53:20Z", "author": {"login": "ivandasch"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractMetricsSelfTest.java", "diffHunk": "@@ -209,8 +206,7 @@ public void testGetMetricsDisable() throws Exception {\n         // Invoke update on cache.\n         for (int i = 0; i < KEY_CNT; i++)\n             jcache.invoke(i, new CacheEntryProcessor<Object, Object, Object>() {\n-                @Override\n-                public Object process(MutableEntry<Object, Object> entry,\n+                @Override public Object process(MutableEntry<Object, Object> entry,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwNzU1OA==", "bodyText": "fixed", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399107558", "createdAt": "2020-03-27T08:38:36Z", "author": {"login": "oleg-ostanin"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/GridCacheAbstractMetricsSelfTest.java", "diffHunk": "@@ -209,8 +206,7 @@ public void testGetMetricsDisable() throws Exception {\n         // Invoke update on cache.\n         for (int i = 0; i < KEY_CNT; i++)\n             jcache.invoke(i, new CacheEntryProcessor<Object, Object, Object>() {\n-                @Override\n-                public Object process(MutableEntry<Object, Object> entry,\n+                @Override public Object process(MutableEntry<Object, Object> entry,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NzA2MA=="}, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE5MDcwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/topology/PartitionsEvictManagerAbstractTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1Mzo1MlrOF8mWwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo0MjowMlrOF8ns5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NzI5OA==", "bodyText": "Each argument must be on a new line.", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399087298", "createdAt": "2020-03-27T07:53:52Z", "author": {"login": "ivandasch"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/topology/PartitionsEvictManagerAbstractTest.java", "diffHunk": "@@ -189,8 +189,8 @@ public WaitingQueue(CountDownLatch latch, boolean completeWithError) {\n                     modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n \n                     field.set(obj, new GridFutureAdapter<Object>() {\n-                        @Override\n-                        protected boolean onDone(@Nullable Object res, @Nullable Throwable err, boolean cancel) {\n+                        @Override protected boolean onDone(@Nullable Object res, @Nullable Throwable err,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwOTM0OA==", "bodyText": "done", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399109348", "createdAt": "2020-03-27T08:42:02Z", "author": {"login": "oleg-ostanin"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/distributed/dht/topology/PartitionsEvictManagerAbstractTest.java", "diffHunk": "@@ -189,8 +189,8 @@ public WaitingQueue(CountDownLatch latch, boolean completeWithError) {\n                     modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);\n \n                     field.set(obj, new GridFutureAdapter<Object>() {\n-                        @Override\n-                        protected boolean onDone(@Nullable Object res, @Nullable Throwable err, boolean cancel) {\n+                        @Override protected boolean onDone(@Nullable Object res, @Nullable Throwable err,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NzI5OA=="}, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE5NTUxOnYy", "diffSide": "RIGHT", "path": "modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo1NTozNVrOF8mZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwODo0MDoxOVrOF8npcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4ODA0OA==", "bodyText": "\") {\" group must be on next line", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399088048", "createdAt": "2020-03-27T07:55:35Z", "author": {"login": "ivandasch"}, "path": "modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java", "diffHunk": "@@ -180,8 +180,8 @@ else if (log.isDebugEnabled())\n             }\n             else {\n                 proc.initFut.listen(new CI1<IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>>>() {\n-                    @Override\n-                    public void apply(IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {\n+                    @Override public void apply(\n+                        IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEwODQ2NA==", "bodyText": "done", "url": "https://github.com/apache/ignite/pull/7578#discussion_r399108464", "createdAt": "2020-03-27T08:40:19Z", "author": {"login": "oleg-ostanin"}, "path": "modules/hadoop/src/main/java/org/apache/ignite/internal/processors/hadoop/taskexecutor/external/HadoopExternalTaskExecutor.java", "diffHunk": "@@ -180,8 +180,8 @@ else if (log.isDebugEnabled())\n             }\n             else {\n                 proc.initFut.listen(new CI1<IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>>>() {\n-                    @Override\n-                    public void apply(IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {\n+                    @Override public void apply(\n+                        IgniteInternalFuture<IgniteBiTuple<Process, HadoopProcessDescriptor>> f) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4ODA0OA=="}, "originalCommit": {"oid": "1ae99695e302b2bbae1d08c7f0647ed9c61c3ff2"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2544, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}