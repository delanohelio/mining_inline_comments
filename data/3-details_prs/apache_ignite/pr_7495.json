{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDg3MzU0", "number": 7495, "title": "IGNITE-12745: Compute job view implemented.", "bodyText": "", "createdAt": "2020-03-03T17:43:18Z", "url": "https://github.com/apache/ignite/pull/7495", "merged": true, "mergeCommit": {"oid": "13637a2dfeb92f46fbdb73f7532427714eb37ad3"}, "closed": true, "closedAt": "2020-03-12T08:48:18Z", "author": {"login": "nizhikov"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKF-NcAH2gAyMzgzMDg3MzU0OmI4N2VjMDA0MzYzOGYwZjk2YzljYmNhZmVmNDg5MzhhNDE3YzU5NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLvdwEgH2gAyMzgzMDg3MzU0OjY2ZGQwMWVmNWZkNjk5NzJhNDBlOWFhYTc0YmY0MTA2NTdlZTk1YzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/b87ec0043638f0f96c9cbcafef48938a417c5973", "committedDate": "2020-03-03T17:42:48Z", "message": "IGNITE-12745: Compute job view implemented."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjUzMTMz", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-368653133", "createdAt": "2020-03-04T10:15:11Z", "commit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDoxNToxMVrOFxnU1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMDo1MToyN1rOFxojmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2ODg1NA==", "bodyText": "I think it should be described what -1 is means.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387568854", "createdAt": "2020-03-04T10:15:11Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysStopping() {\n+        return job.isSysStopping();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {\n+        return job.executorName();\n+    }\n+\n+    /** @return Job class name. */\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Task name. */\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Affinity cache ids. */\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n+    }\n+\n+    /** @return Affinity partition id. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2OTk5OA==", "bodyText": "I suggest to mark nullable and update javadoc.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387569998", "createdAt": "2020-03-04T10:17:13Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysStopping() {\n+        return job.isSysStopping();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {\n+        return job.executorName();\n+    }\n+\n+    /** @return Job class name. */\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Task name. */\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Affinity cache ids. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MDg3NA==", "bodyText": "Job or Task class name is correct?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387570874", "createdAt": "2020-03-04T10:18:47Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysStopping() {\n+        return job.isSysStopping();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {\n+        return job.executorName();\n+    }\n+\n+    /** @return Job class name. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTU2OA==", "bodyText": "Please, add meaningful description instead ???.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387571568", "createdAt": "2020-03-04T10:20:04Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3MTYxOA==", "bodyText": "Please, add meaningful description instead ???.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387571618", "createdAt": "2020-03-04T10:20:09Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return Origin node id. */\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if ???. */\n+    public boolean isSysCancelled() {\n+        return job.isSystemCanceled();\n+    }\n+\n+    /** @return {@code True} if ???. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTMzNA==", "bodyText": "Job id", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387575334", "createdAt": "2020-03-04T10:26:26Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MDgxMQ==", "bodyText": "in milliseconds?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387580811", "createdAt": "2020-03-04T10:36:25Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MTQwMg==", "bodyText": "typo finishTime", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387581402", "createdAt": "2020-03-04T10:37:29Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    private final GridJobWorker job;\n+\n+    /**\n+     * @param job Job.\n+     */\n+    public ComputeJobView(GridJobWorker job) {\n+        this.job = job;\n+    }\n+\n+    /** @return Task id. */\n+    public IgniteUuid id() {\n+        return job.getJobId();\n+    }\n+\n+    /** @return Create time. */\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time. */\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time. */\n+    public long fininshTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4ODU5OQ==", "bodyText": "Caches' identifiers ?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387588599", "createdAt": "2020-03-04T10:50:45Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobProcessor.java", "diffHunk": "@@ -1702,6 +1726,16 @@ public PartitionsReservation(int[] cacheIds, int partId,\n             partititons = new GridDhtLocalPartition[cacheIds.length];\n         }\n \n+        /** @return Caches. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4OTAxOQ==", "bodyText": "What sys is means?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387589019", "createdAt": "2020-03-04T10:51:27Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/job/GridJobWorker.java", "diffHunk": "@@ -271,17 +271,42 @@ public GridDeployment getDeployment() {\n      *\n      * @return {@code True} if job was cancelled by the system.\n      */\n-    boolean isSystemCanceled() {\n+    public boolean isSystemCanceled() {\n         return sysCancelled;\n     }\n \n     /**\n      * @return Create time.\n      */\n-    long getCreateTime() {\n+    public long getCreateTime() {\n         return createTime;\n     }\n \n+    /** @return Start time. */\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    /** @return Finish time. */\n+    public long getFinishTime() {\n+        return finishTime;\n+    }\n+\n+    /** @return Sys stopping. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87ec0043638f0f96c9cbcafef48938a417c5973"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade52ee82754aca4aa5a8eb084f13d6e27633f80", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/ade52ee82754aca4aa5a8eb084f13d6e27633f80", "committedDate": "2020-03-04T14:38:22Z", "message": "IGNITE-12745: Compute job view implemented."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c67e9eeab949931e11705cdff2a8817caeefac6d", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/c67e9eeab949931e11705cdff2a8817caeefac6d", "committedDate": "2020-03-04T14:42:07Z", "message": "IGNITE-12745: PR cleanup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3894842669af735d907c6805f3d52a96e9dcb9be", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/3894842669af735d907c6805f3d52a96e9dcb9be", "committedDate": "2020-03-04T14:46:58Z", "message": "IGNITE-12745: PR cleanup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0d72ac00baa20bd2ee5846015d5d7299bf13bea", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/b0d72ac00baa20bd2ee5846015d5d7299bf13bea", "committedDate": "2020-03-04T14:52:30Z", "message": "IGNITE-12745: Remove wrong fields."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a", "committedDate": "2020-03-04T14:53:51Z", "message": "IGNITE-12745: Remove wrong fields."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODU3ODk4", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-368857898", "createdAt": "2020-03-04T15:09:26Z", "commit": {"oid": "4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowOToyNlrOFxxBzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTowOToyNlrOFxxBzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyNzgyMQ==", "bodyText": "Comma separated list of affinity cache identifiers?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387727821", "createdAt": "2020-03-04T15:09:26Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n+\n+    /**\n+     * @param id Job id.\n+     * @param job Job.\n+     */\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n+        this.job = job;\n+    }\n+\n+    /** @return Job id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeTaskView#sessionId()\n+     * @return Session id.\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Affinity cache name or {@code null} for non affinity call. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f53757e0f894a0961bfb0ca7a85ff93cea0ba0a"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450762c485a63b3efa081328c73c36aebc816d4e", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/450762c485a63b3efa081328c73c36aebc816d4e", "committedDate": "2020-03-04T15:11:52Z", "message": "IGNITE-12745: Code review fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODYyMDQz", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-368862043", "createdAt": "2020-03-04T15:14:03Z", "commit": {"oid": "450762c485a63b3efa081328c73c36aebc816d4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxNDowNFrOFxxOfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxNDowNFrOFxxOfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMTA3MA==", "bodyText": "@see should be placed after @return", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387731070", "createdAt": "2020-03-04T15:14:04Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Job. */\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n+\n+    /**\n+     * @param id Job id.\n+     * @param job Job.\n+     */\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job) {\n+        this.id = id;\n+        this.job = job;\n+    }\n+\n+    /** @return Job id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeTaskView#sessionId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450762c485a63b3efa081328c73c36aebc816d4e"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODYyNDYw", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-368862460", "createdAt": "2020-03-04T15:14:30Z", "commit": {"oid": "450762c485a63b3efa081328c73c36aebc816d4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxNDozMVrOFxxPtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxNDozMVrOFxxPtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMTM4Mg==", "bodyText": "@see should be placed after @return", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387731382", "createdAt": "2020-03-04T15:14:31Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeTaskView.java", "diffHunk": "@@ -18,73 +18,100 @@\n package org.apache.ignite.spi.systemview.view;\n \n import java.util.UUID;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n import org.apache.ignite.internal.processors.task.GridTaskWorker;\n import org.apache.ignite.lang.IgniteUuid;\n+import org.jetbrains.annotations.Nullable;\n \n /**\n  * Compute task representation for a {@link SystemView}.\n  */\n public class ComputeTaskView {\n     /** Worker for task. */\n-    private final GridTaskWorker worker;\n+    public final GridTaskWorker worker;\n+\n+    /** Task id. */\n+    public final IgniteUuid id;\n \n     /**\n+     * @param id Task id.\n      * @param worker Worker for task.\n      */\n-    public ComputeTaskView(GridTaskWorker worker) {\n+    public ComputeTaskView(IgniteUuid id, GridTaskWorker worker) {\n+        this.id = id;\n         this.worker = worker;\n     }\n \n+    /** @return Task id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeTaskView#sessionId()} value equal to the value of {@link ComputeJobView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @see ComputeJobView#sessionId()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450762c485a63b3efa081328c73c36aebc816d4e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/ab1c13a0e7dbd26f130d4b640a2e961c7924a5d3", "committedDate": "2020-03-04T16:07:59Z", "message": "IGNITE-12745: Code review fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c064e54652867e18fe1e3ad5c35eabdf25900f9b", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/c064e54652867e18fe1e3ad5c35eabdf25900f9b", "committedDate": "2020-03-04T16:11:27Z", "message": "IGNITE-12745: Code review fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "358f243012567ff2ef0fbcb9942bbe56040e1b38", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/358f243012567ff2ef0fbcb9942bbe56040e1b38", "committedDate": "2020-03-04T16:19:08Z", "message": "IGNITE-12745: reverting changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26bf901fa0391453279a5031d58559892ea22008", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/26bf901fa0391453279a5031d58559892ea22008", "committedDate": "2020-03-04T16:24:52Z", "message": "IGNITE-12745: minor fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dee277238c402924b3f788ec047b9ca3138ba9e", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/0dee277238c402924b3f788ec047b9ca3138ba9e", "committedDate": "2020-03-04T16:43:20Z", "message": "IGNITE-12745: minor fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/8b433c138b72c0092a326252a13e9f935f926aa1", "committedDate": "2020-03-04T16:44:45Z", "message": "IGNITE-12745: minor fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTkzODYz", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-368993863", "createdAt": "2020-03-04T17:53:01Z", "commit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo1MzowMlrOFx3dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyNDoyOVrOFx4fvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMzI5MA==", "bodyText": "check job?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387833290", "createdAt": "2020-03-04T17:53:02Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+        assertNotSame(task.id(), job.id());\n+        assertEquals(task.sessionId(), job.sessionId());\n+        assertEquals(task.taskNodeId(), job.originNodeId());\n+        assertEquals(task.taskName(), job.taskName());\n+        assertEquals(task.taskClassName(), job.taskClassName());\n+\n+        if (task.affinityCacheName() != null)\n+            assertEquals((Integer)CU.cacheId(task.affinityCacheName()), Integer.valueOf(job.affinityCacheIds()));\n+        else\n+            assertNull(job.affinityCacheIds());\n+\n+        assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n+    }\n+\n+    /** Check tasks fields. */\n+    private void checkTask(ComputeJobView t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDE0OA==", "bodyText": "Lets check each job view:\nfor (ComputeJobView job : jobs)\n     checkJob(job);", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387834148", "createdAt": "2020-03-04T17:54:33Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzczNA==", "bodyText": "I suggest adding a check that jobs.size will be 0 after all jobs finish.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387837734", "createdAt": "2020-03-04T18:01:08Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MjQ3MQ==", "bodyText": "Getter state() can be used here.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387842471", "createdAt": "2020-03-04T18:10:07Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+        assertNotSame(task.id(), job.id());\n+        assertEquals(task.sessionId(), job.sessionId());\n+        assertEquals(task.taskNodeId(), job.originNodeId());\n+        assertEquals(task.taskName(), job.taskName());\n+        assertEquals(task.taskClassName(), job.taskClassName());\n+\n+        if (task.affinityCacheName() != null)\n+            assertEquals((Integer)CU.cacheId(task.affinityCacheName()), Integer.valueOf(job.affinityCacheIds()));\n+        else\n+            assertNull(job.affinityCacheIds());\n+\n+        assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n+    }\n+\n+    /** Check tasks fields. */\n+    private void checkTask(ComputeJobView t) {\n+        assertFalse(t.isInternal());\n+        assertNull(t.affinityCacheIds());\n+        assertEquals(-1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+        assertEquals(ACTIVE, t.state);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NDU5Mw==", "bodyText": "Can you cover job states(PASSIVE, CANCELED), please?", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387844593", "createdAt": "2020-03-04T18:14:00Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NjUzMA==", "bodyText": "Let's name it checkTaskAndJob like parameters ordered  :)", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387846530", "createdAt": "2020-03-04T18:17:45Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTM2NA==", "bodyText": "It can be null. Let's mark as nullable and update javadoc.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387849364", "createdAt": "2020-03-04T18:23:00Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/spi/systemview/view/ComputeJobView.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.systemview.view;\n+\n+import java.util.StringJoiner;\n+import java.util.UUID;\n+import org.apache.ignite.internal.managers.collision.GridCollisionManager;\n+import org.apache.ignite.internal.managers.systemview.walker.Order;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.GridReservable;\n+import org.apache.ignite.internal.processors.job.GridJobProcessor;\n+import org.apache.ignite.internal.processors.job.GridJobWorker;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.spi.collision.CollisionSpi;\n+\n+/**\n+ * Compute job representation for a {@link SystemView}.\n+ */\n+public class ComputeJobView {\n+    /** Compute job state. */\n+    public enum ComputeJobState {\n+        /**\n+         * Job scheduled for the execution.\n+         * If collision not configured all jobs in this state by default.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        ACTIVE,\n+\n+        /**\n+         * If collision configured jobs may be passivated before execution.\n+         *\n+         * @see GridCollisionManager\n+         * @see CollisionSpi\n+         */\n+        PASSIVE,\n+\n+        /**\n+         * Job execution canceled.\n+         *\n+         * @see GridJobProcessor#cancelJob(IgniteUuid, IgniteUuid, boolean)\n+         */\n+        CANCELED\n+    }\n+\n+    /** Job. */\n+    public final GridJobWorker job;\n+\n+    /** Job id. */\n+    public final IgniteUuid id;\n+\n+    /** Job state. */\n+    public final ComputeJobState state;\n+\n+    /**\n+     * @param id Job id.\n+     * @param job Job.\n+     * @param state Job state.\n+     */\n+    public ComputeJobView(IgniteUuid id, GridJobWorker job, ComputeJobState state) {\n+        this.id = id;\n+        this.job = job;\n+        this.state = state;\n+    }\n+\n+    /** @return Job id. */\n+    @Order\n+    public IgniteUuid id() {\n+        return id;\n+    }\n+\n+    /**\n+     * {@link ComputeJobView#sessionId()} value equal to the value of {@link ComputeTaskView#sessionId()}\n+     * if both records represents parts of the same computation.\n+     *\n+     * @return Session id.\n+     * @see ComputeTaskView#sessionId()\n+     */\n+    @Order(1)\n+    public IgniteUuid sessionId() {\n+        return job.getSession().getId();\n+    }\n+\n+    /** @return Origin node id. */\n+    @Order(2)\n+    public UUID originNodeId() {\n+        return job.getTaskNode().id();\n+    }\n+\n+    /** @return Task name. */\n+    @Order(3)\n+    public String taskName() {\n+        return job.getSession().getTaskName();\n+    }\n+\n+    /** @return Task class name. */\n+    @Order(4)\n+    public String taskClassName() {\n+        return job.getSession().getTaskClassName();\n+    }\n+\n+    /** @return Comma separated list of cache identifiers or {@code null} for non affinity call. */\n+    @Order(5)\n+    public String affinityCacheIds() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return null;\n+\n+        int[] ids = ((GridJobProcessor.PartitionsReservation)res).getCacheIds();\n+\n+        if (ids == null || ids.length == 0)\n+            return null;\n+\n+        StringJoiner joiner = new StringJoiner(\",\");\n+\n+        for (int id : ids)\n+            joiner.add(Integer.toString(id));\n+\n+        return joiner.toString();\n+    }\n+\n+    /** @return Affinity partition id or {@code -1} for non affinity call. */\n+    @Order(6)\n+    public int affinityPartitionId() {\n+        GridReservable res = job.getPartsReservation();\n+\n+        if (!(res instanceof GridJobProcessor.PartitionsReservation))\n+            return -1;\n+\n+        return ((GridJobProcessor.PartitionsReservation)res).getPartId();\n+    }\n+\n+    /** @return Create time in milliseconds. */\n+    @Order(7)\n+    public long createTime() {\n+        return job.getCreateTime();\n+    }\n+\n+    /** @return Start time in milliseconds. */\n+    @Order(8)\n+    public long startTime() {\n+        return job.getStartTime();\n+    }\n+\n+    /** @return Finish time in milliseconds. */\n+    @Order(9)\n+    public long finishTime() {\n+        return job.getFinishTime();\n+    }\n+\n+    /** @return {@code True} if job is internal. */\n+    public boolean isInternal() {\n+        return job.isInternal();\n+    }\n+\n+    /** @return {@code True} if job is finishing. */\n+    public boolean isFinishing() {\n+        return job.isFinishing();\n+    }\n+\n+    /** @return {@code True} if job is timed out. */\n+    public boolean isTimedOut() {\n+        return job.isTimedOut();\n+    }\n+\n+    /** @return {@code True} if job started. */\n+    public boolean isStarted() {\n+        return job.isStarted();\n+    }\n+\n+    /** @return Executor name. */\n+    public String executorName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1MDE3Mw==", "bodyText": "Let's add additional checks:\n        assertEquals(0, j.finishTime());\n        assertTrue(j.startTime() > 0);", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387850173", "createdAt": "2020-03-04T18:24:29Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;\n+\n+    /** */\n+    private static CyclicBarrier barrier;\n+\n+    /** */\n+    private static IgniteEx server;\n+\n+    /** */\n+    private static IgniteEx client;\n+\n+    /** */\n+    private static IgniteCache<Integer, Integer> cache;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        server = startGrid(0);\n+        client = startClientGrid(1);\n+\n+        cache = server.createCache(\"test-cache\");\n+\n+        cache.put(1, 1);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#broadcastAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeBroadcast() throws Exception {\n+        barrier = new CyclicBarrier(6);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        for (int i = 0; i < 5; i++) {\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(5, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnable() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().runAsync(() -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#apply(IgniteClosure, Object)} call. */\n+    @Test\n+    public void testComputeApply() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        GridTestUtils.runAsync(() -> {\n+            client.compute().apply(x -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                return 0;\n+            }, 1);\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Tests work of {@link SystemView} for compute grid\n+     * {@link IgniteCompute#affinityCallAsync(String, Object, IgniteCallable)} call.\n+     */\n+    @Test\n+    public void testComputeAffinityCall() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        assertFalse(t.isInternal());\n+        assertEquals(String.valueOf(CU.cacheId(\"test-cache\")), t.affinityCacheIds());\n+        assertEquals(1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testComputeTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+\n+        client.compute().executeAsync(new ComputeTask<Object, Object>() {\n+            @Override public @NotNull Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid,\n+                @Nullable Object arg) throws IgniteException {\n+                return Collections.singletonMap(new ComputeJob() {\n+                    @Override public void cancel() {\n+                        // No-op.\n+                    }\n+\n+                    @Override public Object execute() throws IgniteException {\n+                        try {\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                            barrier.await(TIMEOUT, MILLISECONDS);\n+                        }\n+                        catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+\n+                        return 1;\n+                    }\n+                }, subgrid.get(0));\n+            }\n+\n+            @Override public ComputeJobResultPolicy result(ComputeJobResult res,\n+                List<ComputeJobResult> rcvd) throws IgniteException {\n+\n+                return null;\n+            }\n+\n+            @Nullable @Override public Object reduce(List<ComputeJobResult> results) throws IgniteException {\n+                return 1;\n+            }\n+        }, 1);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, jobs.size());\n+\n+        ComputeJobView t = jobs.iterator().next();\n+\n+        checkTask(t);\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeRunnableJobAndTask() throws Exception {\n+        try (IgniteEx server2 = startGrid(2)) {\n+            barrier = new CyclicBarrier(3);\n+\n+            SystemView<ComputeJobView> jobs1 = server.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeJobView> jobs2 = server2.context().systemView().view(JOBS_VIEW);\n+            SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+            client.compute().broadcastAsync(() -> {\n+                try {\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                    barrier.await(TIMEOUT, MILLISECONDS);\n+                }\n+                catch (InterruptedException | BrokenBarrierException | TimeoutException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+\n+            assertEquals(1, tasks.size());\n+            assertEquals(1, jobs1.size());\n+            assertEquals(1, jobs2.size());\n+\n+            ComputeTaskView task = tasks.iterator().next();\n+\n+            checkJobAndTask(task, jobs1.iterator().next());\n+            checkJobAndTask(task, jobs2.iterator().next());\n+\n+            barrier.await(TIMEOUT, MILLISECONDS);\n+        }\n+    }\n+\n+    /** Tests work of {@link SystemView} for compute grid {@link IgniteCompute#runAsync(IgniteRunnable)} call. */\n+    @Test\n+    public void testComputeAffinityCallJobAndTask() throws Exception {\n+        barrier = new CyclicBarrier(2);\n+\n+        SystemView<ComputeJobView> jobs = server.context().systemView().view(JOBS_VIEW);\n+        SystemView<ComputeTaskView> tasks = client.context().systemView().view(TASKS_VIEW);\n+\n+        client.compute().affinityCallAsync(\"test-cache\", 1, () -> {\n+            try {\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+                barrier.await(TIMEOUT, MILLISECONDS);\n+            }\n+            catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            return 0;\n+        });\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+\n+        assertEquals(1, tasks.size());\n+        assertEquals(1, jobs.size());\n+\n+        checkJobAndTask(tasks.iterator().next(), jobs.iterator().next());\n+\n+        barrier.await(TIMEOUT, MILLISECONDS);\n+    }\n+\n+    /**\n+     * Check fields for local {@link ComputeTaskView} and remote {@link ComputeJobView} info of the same computation.\n+     */\n+    private void checkJobAndTask(ComputeTaskView task, ComputeJobView job) {\n+        assertNotSame(task.id(), job.id());\n+        assertEquals(task.sessionId(), job.sessionId());\n+        assertEquals(task.taskNodeId(), job.originNodeId());\n+        assertEquals(task.taskName(), job.taskName());\n+        assertEquals(task.taskClassName(), job.taskClassName());\n+\n+        if (task.affinityCacheName() != null)\n+            assertEquals((Integer)CU.cacheId(task.affinityCacheName()), Integer.valueOf(job.affinityCacheIds()));\n+        else\n+            assertNull(job.affinityCacheIds());\n+\n+        assertEquals(task.affinityPartitionId(), job.affinityPartitionId());\n+    }\n+\n+    /** Check tasks fields. */\n+    private void checkTask(ComputeJobView t) {\n+        assertFalse(t.isInternal());\n+        assertNull(t.affinityCacheIds());\n+        assertEquals(-1, t.affinityPartitionId());\n+        assertTrue(t.taskClassName().startsWith(getClass().getName()));\n+        assertTrue(t.taskName().startsWith(getClass().getName()));\n+        assertEquals(client.localNode().id(), t.originNodeId());\n+        assertEquals(ACTIVE, t.state);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 351}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDQ3NDUy", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-369047452", "createdAt": "2020-03-04T19:11:20Z", "commit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMToyMFrOFx6CaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToxMToyMFrOFx6CaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3NTQzMg==", "bodyText": "Let's increase timeout to avoid infrastructures affect.", "url": "https://github.com/apache/ignite/pull/7495#discussion_r387875432", "createdAt": "2020-03-04T19:11:20Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/metric/SystemViewComputeJobTest.java", "diffHunk": "@@ -0,0 +1,352 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.metric;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.TimeoutException;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCompute;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeJobResultPolicy;\n+import org.apache.ignite.compute.ComputeTask;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.lang.IgniteCallable;\n+import org.apache.ignite.lang.IgniteClosure;\n+import org.apache.ignite.lang.IgniteRunnable;\n+import org.apache.ignite.spi.systemview.view.ComputeJobView;\n+import org.apache.ignite.spi.systemview.view.ComputeTaskView;\n+import org.apache.ignite.spi.systemview.view.SystemView;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.internal.processors.job.GridJobProcessor.JOBS_VIEW;\n+import static org.apache.ignite.internal.processors.task.GridTaskProcessor.TASKS_VIEW;\n+import static org.apache.ignite.spi.systemview.view.ComputeJobView.ComputeJobState.ACTIVE;\n+\n+/** Tests for compute task {@link SystemView}. */\n+public class SystemViewComputeJobTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 5_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b433c138b72c0092a326252a13e9f935f926aa1"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e", "committedDate": "2020-03-04T21:33:42Z", "message": "IGNITE-12745: tests updated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTUzNTQ3", "url": "https://github.com/apache/ignite/pull/7495#pullrequestreview-369153547", "createdAt": "2020-03-04T21:57:13Z", "commit": {"oid": "a58d5e12d52d5a6d24f3c8ea46aa5ec3f0b7704e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66dd01ef5fd69972a40e9aaa74bf410657ee95c4", "author": {"user": {"login": "nizhikov", "name": "Nikolay"}}, "url": "https://github.com/apache/ignite/commit/66dd01ef5fd69972a40e9aaa74bf410657ee95c4", "committedDate": "2020-03-08T20:37:17Z", "message": "IGNITE-12745: tests updated."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}