{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzI3NTYx", "number": 7615, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1OTowOVrODvCD_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1OToxNVrODvEzeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjQzNDUyOnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/JdbcSqlStreamingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1OTowOVrOGBOHdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODo0MToyOVrOGCk-CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzA0NQ==", "bodyText": "Can you, please, rewrite this test using Ignite code style?\nhttps://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines", "url": "https://github.com/apache/ignite/pull/7615#discussion_r403933045", "createdAt": "2020-04-06T08:59:09Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/JdbcSqlStreamingTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query;\n+\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.util.Properties;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteJdbcThinDriver;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cache.index.AbstractIndexingCommonTest;\n+import org.junit.Test;\n+\n+/**\n+ *\n+ */\n+public class JdbcSqlStreamingTest extends AbstractIndexingCommonTest {\n+    /** */\n+    private static final int ROW_NUM = 1600;\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testStreamingWithFunctionValues() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NjA0MA==", "bodyText": "Done.", "url": "https://github.com/apache/ignite/pull/7615#discussion_r405356040", "createdAt": "2020-04-08T08:41:29Z", "author": {"login": "x-kreator"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/JdbcSqlStreamingTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query;\n+\n+import java.sql.Connection;\n+import java.sql.Driver;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.util.Properties;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteJdbcThinDriver;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cache.index.AbstractIndexingCommonTest;\n+import org.junit.Test;\n+\n+/**\n+ *\n+ */\n+public class JdbcSqlStreamingTest extends AbstractIndexingCommonTest {\n+    /** */\n+    private static final int ROW_NUM = 1600;\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testStreamingWithFunctionValues() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzMzA0NQ=="}, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjU1OTIzOnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTozMDoyN1rOGBPTcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoyMzo1MlrOGCvDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MjQ5Nw==", "bodyText": "Why this query is always local?", "url": "https://github.com/apache/ignite/pull/7615#discussion_r403952497", "createdAt": "2020-04-06T09:30:27Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -691,36 +691,58 @@ private long streamQuery0(String qry, String schemaName, IgniteDataStreamer stre\n         try {\n             UpdatePlan plan = dml.plan();\n \n-            List<List<?>> planRows = plan.createRows(args != null ? args : X.EMPTY_OBJECT_ARRAY);\n+            Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;\n+\n+            Iterator<List<?>> iter0;\n+\n+            if (!F.isEmpty(plan.selectQuery())) {\n+                SqlFieldsQuery selectQry = new SqlFieldsQuery(plan.selectQuery())\n+                    .setArgs(params)\n+                    .setLocal(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3OTAzMw==", "bodyText": "That behavior was implemented before was dropped at commit 6c9a17b (pr #6096 by vozerov), so I decided to return it with minimal differences.", "url": "https://github.com/apache/ignite/pull/7615#discussion_r405379033", "createdAt": "2020-04-08T09:16:53Z", "author": {"login": "x-kreator"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -691,36 +691,58 @@ private long streamQuery0(String qry, String schemaName, IgniteDataStreamer stre\n         try {\n             UpdatePlan plan = dml.plan();\n \n-            List<List<?>> planRows = plan.createRows(args != null ? args : X.EMPTY_OBJECT_ARRAY);\n+            Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;\n+\n+            Iterator<List<?>> iter0;\n+\n+            if (!F.isEmpty(plan.selectQuery())) {\n+                SqlFieldsQuery selectQry = new SqlFieldsQuery(plan.selectQuery())\n+                    .setArgs(params)\n+                    .setLocal(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MjQ5Nw=="}, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMzQ4Nw==", "bodyText": "Why do you think that changes in 6c9a17b is wrong?", "url": "https://github.com/apache/ignite/pull/7615#discussion_r405503487", "createdAt": "2020-04-08T12:57:55Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -691,36 +691,58 @@ private long streamQuery0(String qry, String schemaName, IgniteDataStreamer stre\n         try {\n             UpdatePlan plan = dml.plan();\n \n-            List<List<?>> planRows = plan.createRows(args != null ? args : X.EMPTY_OBJECT_ARRAY);\n+            Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;\n+\n+            Iterator<List<?>> iter0;\n+\n+            if (!F.isEmpty(plan.selectQuery())) {\n+                SqlFieldsQuery selectQry = new SqlFieldsQuery(plan.selectQuery())\n+                    .setArgs(params)\n+                    .setLocal(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MjQ5Nw=="}, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMTI0MA==", "bodyText": "Not all but condition removed from line 816 and assertion added to line 814.\nThat assertion was also removed at 1619dd5 (pr #6112).\nAssume that adding of assertion is right, then it's logical to expect that we should meet the changes which fix that assertion failures happening when we use expressions at streaming inserts. But all further changes keep the bug described above till 1619dd5. After 1619dd5 we became to meet the bug described in our issue instead of assertion error.", "url": "https://github.com/apache/ignite/pull/7615#discussion_r405521240", "createdAt": "2020-04-08T13:23:52Z", "author": {"login": "x-kreator"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -691,36 +691,58 @@ private long streamQuery0(String qry, String schemaName, IgniteDataStreamer stre\n         try {\n             UpdatePlan plan = dml.plan();\n \n-            List<List<?>> planRows = plan.createRows(args != null ? args : X.EMPTY_OBJECT_ARRAY);\n+            Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;\n+\n+            Iterator<List<?>> iter0;\n+\n+            if (!F.isEmpty(plan.selectQuery())) {\n+                SqlFieldsQuery selectQry = new SqlFieldsQuery(plan.selectQuery())\n+                    .setArgs(params)\n+                    .setLocal(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk1MjQ5Nw=="}, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjg4Mzc4OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMDo1OToxNVrOGBScYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwOTowNTowNFrOGCl5pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMzkzOA==", "bodyText": "It seems this piece of code should be rewritten as follows to minimize changes in the code and improve readability:\n    private long streamQuery0(String qry, String schemaName, IgniteDataStreamer streamer, QueryParserResultDml dml,\n        final Object[] args) throws IgniteCheckedException {\n        Long qryId = runningQryMgr.register(qry, GridCacheQueryType.SQL_FIELDS, schemaName, true, null);\n\n        Exception failReason = null;\n\n        try {\n            UpdatePlan plan = dml.plan();\n\n            Iterator<List<?>> iter = updateQueryRows(schemaName, plan, args);\n\n            if (!iter.hasNext())\n                return 0;\n\n            IgniteBiTuple t = plan.processRow(iter.next());\n\n            if (!iter.hasNext()) {\n                streamer.addData(t.getKey(), t.getValue());\n\n                return 1;\n            }\n            else {\n                Map<Object, Object> rows = new LinkedHashMap<>(plan.rowCount());\n\n                rows.put(t.getKey(), t.getValue());\n\n                while (iter.hasNext()) {\n                    List<?> row = iter.next();\n\n                    t = plan.processRow(row);\n\n                    rows.put(t.getKey(), t.getValue());\n                }\n\n                streamer.addData(rows);\n\n                return rows.size();\n            }\n        }\n        catch (IgniteException | IgniteCheckedException e) {\n            failReason = e;\n\n            throw e;\n        }\n        finally {\n            runningQryMgr.unregister(qryId, failReason);\n        }\n    }\n\n    /**\n     * Calculates rows for update query.\n     *\n     * @param schemaName Schema name.\n     * @param plan Update plan.\n     * @param args Statement arguments.\n     * @return Rows for update.\n     * @throws IgniteCheckedException If failed.\n     */\n    Iterator<List<?>> updateQueryRows(String schemaName, UpdatePlan plan, Object[] args) throws IgniteCheckedException {\n        Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;\n\n        if (!F.isEmpty(plan.selectQuery())) {\n            SqlFieldsQuery selectQry = new SqlFieldsQuery(plan.selectQuery())\n                .setArgs(params)\n                .setLocal(true);\n\n            QueryParserResult selectParseRes = parser.parse(schemaName, selectQry, false);\n\n            GridQueryFieldsResult res = executeSelectLocal(\n                selectParseRes.queryDescriptor(),\n                selectParseRes.queryParameters(),\n                selectParseRes.select(),\n                null,\n                null,\n                null,\n                false,\n                0\n            );\n\n            return res.iterator();\n        } else\n            return plan.createRows(params).iterator();\n    }", "url": "https://github.com/apache/ignite/pull/7615#discussion_r404003938", "createdAt": "2020-04-06T10:59:15Z", "author": {"login": "nizhikov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -691,36 +691,58 @@ private long streamQuery0(String qry, String schemaName, IgniteDataStreamer stre\n         try {\n             UpdatePlan plan = dml.plan();\n \n-            List<List<?>> planRows = plan.createRows(args != null ? args : X.EMPTY_OBJECT_ARRAY);\n+            Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM3MTMwMg==", "bodyText": "Done. I had same idea about updateQueryRows method, but I refrained from implementing it earlier due to the fact that some reviewers don't like methods used only once.", "url": "https://github.com/apache/ignite/pull/7615#discussion_r405371302", "createdAt": "2020-04-08T09:05:04Z", "author": {"login": "x-kreator"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -691,36 +691,58 @@ private long streamQuery0(String qry, String schemaName, IgniteDataStreamer stre\n         try {\n             UpdatePlan plan = dml.plan();\n \n-            List<List<?>> planRows = plan.createRows(args != null ? args : X.EMPTY_OBJECT_ARRAY);\n+            Object[] params = args != null ? args : X.EMPTY_OBJECT_ARRAY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwMzkzOA=="}, "originalCommit": {"oid": "59b00a4de6599ef1bc2fcdfbb2dadb4ee7053cea"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2499, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}