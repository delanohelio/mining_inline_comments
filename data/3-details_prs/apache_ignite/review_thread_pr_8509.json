{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTM3NTc4", "number": 8509, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0MjozMlrOE-z7qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0NzozN1rOE-0Diw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Mjk4MDI0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/binary/PlatformBinaryProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0MjozMlrOH8KyXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMToyNToyMFrOH8oPEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MzM0MQ==", "bodyText": "Let's not use exceptions for control flow - may be introduce an overload for MarshallerContext.getClassName that does not throw exceptions?", "url": "https://github.com/apache/ignite/pull/8509#discussion_r532853341", "createdAt": "2020-11-30T19:42:32Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/binary/PlatformBinaryProcessor.java", "diffHunk": "@@ -126,16 +128,28 @@ public PlatformBinaryProcessor(PlatformContext platformCtx) {\n             case OP_GET_TYPE: {\n                 int typeId = reader.readInt();\n \n-                try {\n-                    String typeName = platformContext().kernalContext().marshallerContext()\n-                        .getClassName(MarshallerPlatformIds.DOTNET_ID, typeId);\n+                ClassNotFoundException err = null;\n \n-                    writer.writeString(typeName);\n-                }\n-                catch (ClassNotFoundException e) {\n-                    throw new BinaryObjectException(e);\n+                for (byte platformId : new byte[] {DOTNET_ID, JAVA_ID}) {\n+                    try {\n+                        String typeName = platformContext().kernalContext().marshallerContext()\n+                            .getClassName(platformId, typeId);\n+\n+                        writer.writeString(typeName);\n+\n+                        err = null;\n+\n+                        break;\n+                    }\n+                    catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6af0b8c3cb2c98f87d5fbffeafed2f063866f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI0ODI3OA==", "bodyText": "I see your point, but if we introduce a method that not throws then we should return a tuple from it - T2(className, errorMsg).\nMoreover, the second value of the tuple required in rare cases when we can't resolve the class name from type id.\nAFAIU getClassName executed several times on every interaction between DotNet and Java so the creation of an extra object on each invocation will hurt the performance.\nSo I propose to keep changes as is. What do you think?", "url": "https://github.com/apache/ignite/pull/8509#discussion_r533248278", "createdAt": "2020-12-01T09:52:21Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/binary/PlatformBinaryProcessor.java", "diffHunk": "@@ -126,16 +128,28 @@ public PlatformBinaryProcessor(PlatformContext platformCtx) {\n             case OP_GET_TYPE: {\n                 int typeId = reader.readInt();\n \n-                try {\n-                    String typeName = platformContext().kernalContext().marshallerContext()\n-                        .getClassName(MarshallerPlatformIds.DOTNET_ID, typeId);\n+                ClassNotFoundException err = null;\n \n-                    writer.writeString(typeName);\n-                }\n-                catch (ClassNotFoundException e) {\n-                    throw new BinaryObjectException(e);\n+                for (byte platformId : new byte[] {DOTNET_ID, JAVA_ID}) {\n+                    try {\n+                        String typeName = platformContext().kernalContext().marshallerContext()\n+                            .getClassName(platformId, typeId);\n+\n+                        writer.writeString(typeName);\n+\n+                        err = null;\n+\n+                        break;\n+                    }\n+                    catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MzM0MQ=="}, "originalCommit": {"oid": "6ba6af0b8c3cb2c98f87d5fbffeafed2f063866f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzI2MTM0Ng==", "bodyText": "The cost of throwing an exception is a lot higher than a tuple allocation.\ngetClassName is called from .NET once per type, then cached\n\nI'm not concerned about performance too much here because of (2). Exception-based control flow is just dirty.", "url": "https://github.com/apache/ignite/pull/8509#discussion_r533261346", "createdAt": "2020-12-01T10:02:45Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/binary/PlatformBinaryProcessor.java", "diffHunk": "@@ -126,16 +128,28 @@ public PlatformBinaryProcessor(PlatformContext platformCtx) {\n             case OP_GET_TYPE: {\n                 int typeId = reader.readInt();\n \n-                try {\n-                    String typeName = platformContext().kernalContext().marshallerContext()\n-                        .getClassName(MarshallerPlatformIds.DOTNET_ID, typeId);\n+                ClassNotFoundException err = null;\n \n-                    writer.writeString(typeName);\n-                }\n-                catch (ClassNotFoundException e) {\n-                    throw new BinaryObjectException(e);\n+                for (byte platformId : new byte[] {DOTNET_ID, JAVA_ID}) {\n+                    try {\n+                        String typeName = platformContext().kernalContext().marshallerContext()\n+                            .getClassName(platformId, typeId);\n+\n+                        writer.writeString(typeName);\n+\n+                        err = null;\n+\n+                        break;\n+                    }\n+                    catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MzM0MQ=="}, "originalCommit": {"oid": "6ba6af0b8c3cb2c98f87d5fbffeafed2f063866f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzMzNTgyNg==", "bodyText": "Fixed according to your proposal.", "url": "https://github.com/apache/ignite/pull/8509#discussion_r533335826", "createdAt": "2020-12-01T11:25:20Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/binary/PlatformBinaryProcessor.java", "diffHunk": "@@ -126,16 +128,28 @@ public PlatformBinaryProcessor(PlatformContext platformCtx) {\n             case OP_GET_TYPE: {\n                 int typeId = reader.readInt();\n \n-                try {\n-                    String typeName = platformContext().kernalContext().marshallerContext()\n-                        .getClassName(MarshallerPlatformIds.DOTNET_ID, typeId);\n+                ClassNotFoundException err = null;\n \n-                    writer.writeString(typeName);\n-                }\n-                catch (ClassNotFoundException e) {\n-                    throw new BinaryObjectException(e);\n+                for (byte platformId : new byte[] {DOTNET_ID, JAVA_ID}) {\n+                    try {\n+                        String typeName = platformContext().kernalContext().marshallerContext()\n+                            .getClassName(platformId, typeId);\n+\n+                        writer.writeString(typeName);\n+\n+                        err = null;\n+\n+                        break;\n+                    }\n+                    catch (ClassNotFoundException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1MzM0MQ=="}, "originalCommit": {"oid": "6ba6af0b8c3cb2c98f87d5fbffeafed2f063866f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MzAwMDQzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxOTo0NzozN1rOH8K-zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozNDo0MlrOH8hiSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NjUyNg==", "bodyText": "JAVA_ID should come last - in most cases, platform type will be resolved, not a Java type.", "url": "https://github.com/apache/ignite/pull/8509#discussion_r532856526", "createdAt": "2020-11-30T19:47:37Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java", "diffHunk": "@@ -368,12 +369,27 @@ public void onMappingAccepted(final MarshallerMappingItem item) {\n \n     /** {@inheritDoc} */\n     @Override public Class getClass(int typeId, ClassLoader ldr) throws ClassNotFoundException, IgniteCheckedException {\n-        String clsName = getClassName(JAVA_ID, typeId);\n+        String clsName;\n+\n+        ClassNotFoundException err = null;\n+\n+        for (byte platformId : new byte[] {JAVA_ID, DOTNET_ID}) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ba6af0b8c3cb2c98f87d5fbffeafed2f063866f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIyNjA1OQ==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8509#discussion_r533226059", "createdAt": "2020-12-01T09:34:42Z", "author": {"login": "nizhikov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/MarshallerContextImpl.java", "diffHunk": "@@ -368,12 +369,27 @@ public void onMappingAccepted(final MarshallerMappingItem item) {\n \n     /** {@inheritDoc} */\n     @Override public Class getClass(int typeId, ClassLoader ldr) throws ClassNotFoundException, IgniteCheckedException {\n-        String clsName = getClassName(JAVA_ID, typeId);\n+        String clsName;\n+\n+        ClassNotFoundException err = null;\n+\n+        for (byte platformId : new byte[] {JAVA_ID, DOTNET_ID}) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg1NjUyNg=="}, "originalCommit": {"oid": "6ba6af0b8c3cb2c98f87d5fbffeafed2f063866f"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2624, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}