{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjg3MjU4", "number": 7561, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxODozNVrODqvx_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxODozNVrODqvx_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTQ5NjMwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/ClusterRebalancedMetricTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToxODozNlrOF6rnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo1NjoyMVrOF6s3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NjQyMw==", "bodyText": "allMatch result ignored.", "url": "https://github.com/apache/ignite/pull/7561#discussion_r397076423", "createdAt": "2020-03-24T11:18:36Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/ClusterRebalancedMetricTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.discovery;\n+\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionDemandMessage;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n+import static org.apache.ignite.cache.CacheMode.PARTITIONED;\n+import static org.apache.ignite.cluster.ClusterState.ACTIVE;\n+import static org.apache.ignite.cluster.ClusterState.INACTIVE;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.CLUSTER_REBALANCED;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.REBALANCE_METRICS;\n+\n+/**\n+ * Tests {@link GridMetricManager#CLUSTER_REBALANCED} metric.\n+ */\n+public class ClusterRebalancedMetricTest extends GridCommonAbstractTest {\n+    /** Test cache name. */\n+    private static final String TEST_CACHE = \"TEST_CACHE\";\n+\n+    /**\n+     * @param idx Index of the node to be started.\n+     * @param persistenceEnabled Whether node native persistence is enabled.\n+     */\n+    protected IgniteConfiguration getConfiguration(int idx, boolean persistenceEnabled) throws Exception {\n+        DataRegionConfiguration drCfg = new DataRegionConfiguration()\n+            .setPersistenceEnabled(persistenceEnabled);\n+\n+        DataStorageConfiguration dsCfg = new DataStorageConfiguration()\n+            .setDefaultDataRegionConfiguration(drCfg);\n+\n+        return getConfiguration(getTestIgniteInstanceName(idx))\n+            .setDataStorageConfiguration(dsCfg);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        TestRecordingCommunicationSpi commSpi = new TestRecordingCommunicationSpi();\n+\n+        CacheConfiguration cCfg = new CacheConfiguration(TEST_CACHE)\n+            .setBackups(2)\n+            .setCacheMode(PARTITIONED)\n+            .setAtomicityMode(TRANSACTIONAL);\n+\n+        return super.getConfiguration(igniteInstanceName)\n+            .setCacheConfiguration(cCfg)\n+            .setCommunicationSpi(commSpi)\n+            .setClusterStateOnStart(INACTIVE);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids(true);\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /**\n+     * Tests {@link GridMetricManager#CLUSTER_REBALANCED} metric in case of in-memory cluster.\n+     */\n+    @Test\n+    public void testInMemoryClusterRebalancedMetric() throws Exception {\n+        checkClusterRebalancedMetric(false);\n+    }\n+\n+    /**\n+     * Tests {@link GridMetricManager#CLUSTER_REBALANCED} metric in case of cluster with native persistence enabled.\n+     */\n+    @Test\n+    public void testPersistenceClusterRebalancedMetric() throws Exception {\n+        checkClusterRebalancedMetric(true);\n+    }\n+\n+    /**\n+     * @param persistenceEnabled Whether native persistence is enabled.\n+     */\n+    public void checkClusterRebalancedMetric(boolean persistenceEnabled) throws Exception {\n+        IgniteEx ignite = startGrid(0, persistenceEnabled);\n+\n+        startClientGrid(1, persistenceEnabled);\n+\n+        assertClusterRebalancedMetricOnAllNodes(false);\n+\n+        ignite.cluster().state(ACTIVE);\n+\n+        awaitPmeAndAssertRebalancedMetricOnAllNodes(true);\n+\n+        ignite.cache(TEST_CACHE).put(\"key\", \"val\");\n+\n+        startClientGrid(2, persistenceEnabled);\n+\n+        awaitPmeAndAssertRebalancedMetricOnAllNodes(true);\n+\n+        TestRecordingCommunicationSpi spi = startGridWithRebalanceBlocked(3, persistenceEnabled);\n+\n+        if (persistenceEnabled) {\n+            awaitPartitionMapExchange(true, true, null, false);\n+\n+            assertClusterRebalancedMetricOnAllNodes(true);\n+\n+            ignite.cluster().setBaselineTopology(ignite.cluster().forServers().nodes());\n+        }\n+\n+        spi.waitForBlocked();\n+\n+        assertClusterRebalancedMetricOnAllNodes(false);\n+\n+        spi.stopBlock();\n+\n+        awaitPmeAndAssertRebalancedMetricOnAllNodes(true);\n+    }\n+\n+    /**\n+     * @param exp Expected value of {@link GridMetricManager#CLUSTER_REBALANCED} metric.\n+     */\n+    private void awaitPmeAndAssertRebalancedMetricOnAllNodes(boolean exp) throws Exception {\n+        awaitPartitionMapExchange(true, true, null, true);\n+\n+        assertClusterRebalancedMetricOnAllNodes(exp);\n+    }\n+\n+    /**\n+     * Checks that {@link GridMetricManager#CLUSTER_REBALANCED} metric is set to {@code exp} on all cluster nodes.\n+     */\n+    private void assertClusterRebalancedMetricOnAllNodes(boolean exp) {\n+        G.allGrids().stream().allMatch(ignite -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a70bf947d411d31d4698fd58cd8b83dec12e6aca"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5Njc1NA==", "bodyText": "Thanks. Done.", "url": "https://github.com/apache/ignite/pull/7561#discussion_r397096754", "createdAt": "2020-03-24T11:56:21Z", "author": {"login": "ololo3000"}, "path": "modules/core/src/test/java/org/apache/ignite/spi/discovery/ClusterRebalancedMetricTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.discovery;\n+\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.TestRecordingCommunicationSpi;\n+import org.apache.ignite.internal.processors.cache.distributed.dht.preloader.GridDhtPartitionDemandMessage;\n+import org.apache.ignite.internal.processors.metric.GridMetricManager;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.internal.util.typedef.internal.CU;\n+import org.apache.ignite.spi.metric.BooleanMetric;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.cache.CacheAtomicityMode.TRANSACTIONAL;\n+import static org.apache.ignite.cache.CacheMode.PARTITIONED;\n+import static org.apache.ignite.cluster.ClusterState.ACTIVE;\n+import static org.apache.ignite.cluster.ClusterState.INACTIVE;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.CLUSTER_REBALANCED;\n+import static org.apache.ignite.internal.processors.metric.GridMetricManager.REBALANCE_METRICS;\n+\n+/**\n+ * Tests {@link GridMetricManager#CLUSTER_REBALANCED} metric.\n+ */\n+public class ClusterRebalancedMetricTest extends GridCommonAbstractTest {\n+    /** Test cache name. */\n+    private static final String TEST_CACHE = \"TEST_CACHE\";\n+\n+    /**\n+     * @param idx Index of the node to be started.\n+     * @param persistenceEnabled Whether node native persistence is enabled.\n+     */\n+    protected IgniteConfiguration getConfiguration(int idx, boolean persistenceEnabled) throws Exception {\n+        DataRegionConfiguration drCfg = new DataRegionConfiguration()\n+            .setPersistenceEnabled(persistenceEnabled);\n+\n+        DataStorageConfiguration dsCfg = new DataStorageConfiguration()\n+            .setDefaultDataRegionConfiguration(drCfg);\n+\n+        return getConfiguration(getTestIgniteInstanceName(idx))\n+            .setDataStorageConfiguration(dsCfg);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        TestRecordingCommunicationSpi commSpi = new TestRecordingCommunicationSpi();\n+\n+        CacheConfiguration cCfg = new CacheConfiguration(TEST_CACHE)\n+            .setBackups(2)\n+            .setCacheMode(PARTITIONED)\n+            .setAtomicityMode(TRANSACTIONAL);\n+\n+        return super.getConfiguration(igniteInstanceName)\n+            .setCacheConfiguration(cCfg)\n+            .setCommunicationSpi(commSpi)\n+            .setClusterStateOnStart(INACTIVE);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids(true);\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /**\n+     * Tests {@link GridMetricManager#CLUSTER_REBALANCED} metric in case of in-memory cluster.\n+     */\n+    @Test\n+    public void testInMemoryClusterRebalancedMetric() throws Exception {\n+        checkClusterRebalancedMetric(false);\n+    }\n+\n+    /**\n+     * Tests {@link GridMetricManager#CLUSTER_REBALANCED} metric in case of cluster with native persistence enabled.\n+     */\n+    @Test\n+    public void testPersistenceClusterRebalancedMetric() throws Exception {\n+        checkClusterRebalancedMetric(true);\n+    }\n+\n+    /**\n+     * @param persistenceEnabled Whether native persistence is enabled.\n+     */\n+    public void checkClusterRebalancedMetric(boolean persistenceEnabled) throws Exception {\n+        IgniteEx ignite = startGrid(0, persistenceEnabled);\n+\n+        startClientGrid(1, persistenceEnabled);\n+\n+        assertClusterRebalancedMetricOnAllNodes(false);\n+\n+        ignite.cluster().state(ACTIVE);\n+\n+        awaitPmeAndAssertRebalancedMetricOnAllNodes(true);\n+\n+        ignite.cache(TEST_CACHE).put(\"key\", \"val\");\n+\n+        startClientGrid(2, persistenceEnabled);\n+\n+        awaitPmeAndAssertRebalancedMetricOnAllNodes(true);\n+\n+        TestRecordingCommunicationSpi spi = startGridWithRebalanceBlocked(3, persistenceEnabled);\n+\n+        if (persistenceEnabled) {\n+            awaitPartitionMapExchange(true, true, null, false);\n+\n+            assertClusterRebalancedMetricOnAllNodes(true);\n+\n+            ignite.cluster().setBaselineTopology(ignite.cluster().forServers().nodes());\n+        }\n+\n+        spi.waitForBlocked();\n+\n+        assertClusterRebalancedMetricOnAllNodes(false);\n+\n+        spi.stopBlock();\n+\n+        awaitPmeAndAssertRebalancedMetricOnAllNodes(true);\n+    }\n+\n+    /**\n+     * @param exp Expected value of {@link GridMetricManager#CLUSTER_REBALANCED} metric.\n+     */\n+    private void awaitPmeAndAssertRebalancedMetricOnAllNodes(boolean exp) throws Exception {\n+        awaitPartitionMapExchange(true, true, null, true);\n+\n+        assertClusterRebalancedMetricOnAllNodes(exp);\n+    }\n+\n+    /**\n+     * Checks that {@link GridMetricManager#CLUSTER_REBALANCED} metric is set to {@code exp} on all cluster nodes.\n+     */\n+    private void assertClusterRebalancedMetricOnAllNodes(boolean exp) {\n+        G.allGrids().stream().allMatch(ignite -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3NjQyMw=="}, "originalCommit": {"oid": "a70bf947d411d31d4698fd58cd8b83dec12e6aca"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2537, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}