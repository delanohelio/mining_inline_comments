{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjMwMDU5", "number": 7827, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMTo1OTo1N1rOD_KHHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMjozOTowN1rOD_KNXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUyNTQzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMTo1OTo1N1rOGZrkpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOTo0MDo0OFrOGZtzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTQ3Nw==", "bodyText": "else should be on a new line.", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429581477", "createdAt": "2020-05-23T21:59:57Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -540,10 +542,14 @@ private void processLocalSnapshotStartStageResult(UUID id, Map<UUID, SnapshotOpe\n             missed.removeAll(res.keySet());\n             missed.removeAll(err.keySet());\n \n-            snpReq.hasErr = !F.isEmpty(err) || !missed.isEmpty();\n+            boolean cancelled = err.values().stream()\n+                .anyMatch(e -> e instanceof IgniteFutureCancelledCheckedException);\n \n-            if (snpReq.hasErr) {\n-                U.warn(log, \"Execution of local snapshot tasks fails or them haven't been executed \" +\n+            if (cancelled) {\n+                snpReq.err = new IgniteFutureCancelledCheckedException(\"Execution of snapshot tasks \" +\n+                    \"has been cancelled by external process [err=\" + err + \", missed=\" + missed + ']');\n+            } else if (!F.isEmpty(err) || !missed.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNzk3Nw==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429617977", "createdAt": "2020-05-24T09:40:48Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -540,10 +542,14 @@ private void processLocalSnapshotStartStageResult(UUID id, Map<UUID, SnapshotOpe\n             missed.removeAll(res.keySet());\n             missed.removeAll(err.keySet());\n \n-            snpReq.hasErr = !F.isEmpty(err) || !missed.isEmpty();\n+            boolean cancelled = err.values().stream()\n+                .anyMatch(e -> e instanceof IgniteFutureCancelledCheckedException);\n \n-            if (snpReq.hasErr) {\n-                U.warn(log, \"Execution of local snapshot tasks fails or them haven't been executed \" +\n+            if (cancelled) {\n+                snpReq.err = new IgniteFutureCancelledCheckedException(\"Execution of snapshot tasks \" +\n+                    \"has been cancelled by external process [err=\" + err + \", missed=\" + missed + ']');\n+            } else if (!F.isEmpty(err) || !missed.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MTQ3Nw=="}, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUzNDM3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMjoyMToyN1rOGZrpNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQyMDoxMzo0NFrOGZxCMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MjY0NA==", "bodyText": "Suppose that next processes in the cluster will happen simultaneously:\n\nThe END_SNAPSHOT DP will be at the finish stage and only part of nodes processed their 'this::processLocalSnapshotEndStageResult'\nPart of nodes executes broadcasted closure cancelLocalSnapshotTask\n\nThey are processed by different threads. Can we get a situation when part of nodes finish clusterSnpFut successfully and other ones with error? It's ok?", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429582644", "createdAt": "2020-05-23T22:21:27Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -634,6 +642,66 @@ public boolean isSnapshotCreating() {\n         }\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public IgniteFuture<Void> cancelSnapshot(String name) {\n+        A.notNullOrEmpty(name, \"Snapshot name must be not empty or null\");\n+\n+        IgniteInternalFuture<Void> fut0 = cctx.kernalContext().closure()\n+            .broadcast(new CancelSnapshotClosure(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYyNjcxNg==", "bodyText": "Nikita,\n\nIt's true that some operations may execute concurrently on snapshot cancellation operation.\nSnapshot operation consists of four stages:\n\n\nstart-stage\nstart-stage result\nend-stage\nend-stage result\n\nIf cancel operation occurred when on start-stage than snapshot operation will be canceled. On other stages, it will have no effect since all the cache data already collected.\n\nclusterSnpFut is set on coordinator only, so it has no effect in case described by you. If some of the local snapshot tasks finish with an error an the other with CancelledException than all results will be finished with CancelledException (all intermediate results will be deleted).", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429626716", "createdAt": "2020-05-24T11:30:11Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -634,6 +642,66 @@ public boolean isSnapshotCreating() {\n         }\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public IgniteFuture<Void> cancelSnapshot(String name) {\n+        A.notNullOrEmpty(name, \"Snapshot name must be not empty or null\");\n+\n+        IgniteInternalFuture<Void> fut0 = cctx.kernalContext().closure()\n+            .broadcast(new CancelSnapshotClosure(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MjY0NA=="}, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MDk2Mg==", "bodyText": "Ok, got it.", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429670962", "createdAt": "2020-05-24T20:13:44Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -634,6 +642,66 @@ public boolean isSnapshotCreating() {\n         }\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public IgniteFuture<Void> cancelSnapshot(String name) {\n+        A.notNullOrEmpty(name, \"Snapshot name must be not empty or null\");\n+\n+        IgniteInternalFuture<Void> fut0 = cctx.kernalContext().closure()\n+            .broadcast(new CancelSnapshotClosure(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MjY0NA=="}, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUzNDgxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMjoyMjo0MVrOGZrpcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOTo0MDo0M1rOGZtzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MjcwNQ==", "bodyText": "Can be in one line", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429582705", "createdAt": "2020-05-23T22:22:41Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -540,10 +542,14 @@ private void processLocalSnapshotStartStageResult(UUID id, Map<UUID, SnapshotOpe\n             missed.removeAll(res.keySet());\n             missed.removeAll(err.keySet());\n \n-            snpReq.hasErr = !F.isEmpty(err) || !missed.isEmpty();\n+            boolean cancelled = err.values().stream()\n+                .anyMatch(e -> e instanceof IgniteFutureCancelledCheckedException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNzk3MA==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429617970", "createdAt": "2020-05-24T09:40:43Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/IgniteSnapshotManager.java", "diffHunk": "@@ -540,10 +542,14 @@ private void processLocalSnapshotStartStageResult(UUID id, Map<UUID, SnapshotOpe\n             missed.removeAll(res.keySet());\n             missed.removeAll(err.keySet());\n \n-            snpReq.hasErr = !F.isEmpty(err) || !missed.isEmpty();\n+            boolean cancelled = err.values().stream()\n+                .anyMatch(e -> e instanceof IgniteFutureCancelledCheckedException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MjcwNQ=="}, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTU0MTQxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/SnapshotFutureTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMjozOTowN1rOGZrs5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwOTo0MDozOVrOGZtzKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MzU4OQ==", "bodyText": "Too long line", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429583589", "createdAt": "2020-05-23T22:39:07Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/SnapshotFutureTask.java", "diffHunk": "@@ -627,7 +629,7 @@ private Runnable wrapExceptionIfStarted(IgniteThrowableRunner exec) {\n \n     /** {@inheritDoc} */\n     @Override public boolean cancel() {\n-        acceptException(new IgniteCheckedException(\"Snapshot operation has been cancelled by external process \" +\n+        acceptException(new IgniteFutureCancelledCheckedException(\"Snapshot operation has been cancelled by external process \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTYxNzk2MQ==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/7827#discussion_r429617961", "createdAt": "2020-05-24T09:40:39Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/snapshot/SnapshotFutureTask.java", "diffHunk": "@@ -627,7 +629,7 @@ private Runnable wrapExceptionIfStarted(IgniteThrowableRunner exec) {\n \n     /** {@inheritDoc} */\n     @Override public boolean cancel() {\n-        acceptException(new IgniteCheckedException(\"Snapshot operation has been cancelled by external process \" +\n+        acceptException(new IgniteFutureCancelledCheckedException(\"Snapshot operation has been cancelled by external process \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU4MzU4OQ=="}, "originalCommit": {"oid": "7bc7a7884e8ef43895ef882f2a06acede727e8c9"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2445, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}