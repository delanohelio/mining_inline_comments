{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTQzODAx", "number": 8174, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0ODo1MVrOEmBs3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0MzoyNFrOEmtcDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA5MjEyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0ODo1MVrOHV0Wcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozMTozNVrOHWFCQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzOTg1OA==", "bodyText": "Add @return javadoc?", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492639858", "createdAt": "2020-09-22T10:48:51Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -88,6 +128,17 @@\n      */\n     public int size(CachePeekMode... peekModes) throws ClientException;\n \n+    /**\n+     * Gets the number of all entries cached across all nodes. By default, if {@code peekModes} value isn't provided,\n+     * only size of primary copies across all nodes will be returned. This behavior is identical to calling\n+     * this method with {@link CachePeekMode#PRIMARY} peek mode.\n+     * <p>\n+     * NOTE: this operation is distributed and will query all participating nodes for their cache sizes.\n+     *\n+     * @param peekModes Optional peek modes. If not provided, then total cache size is returned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMzIxNg==", "bodyText": "Fixed.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492913216", "createdAt": "2020-09-22T17:31:35Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -88,6 +128,17 @@\n      */\n     public int size(CachePeekMode... peekModes) throws ClientException;\n \n+    /**\n+     * Gets the number of all entries cached across all nodes. By default, if {@code peekModes} value isn't provided,\n+     * only size of primary copies across all nodes will be returned. This behavior is identical to calling\n+     * this method with {@link CachePeekMode#PRIMARY} peek mode.\n+     * <p>\n+     * NOTE: this operation is distributed and will query all participating nodes for their cache sizes.\n+     *\n+     * @param peekModes Optional peek modes. If not provided, then total cache size is returned.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYzOTg1OA=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzA5NTY0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo0OTo0OVrOHV0YaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozMjoyN1rOHWFEQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MDM2MA==", "bodyText": "Maybe,\n\nThe cache configuration future\n\nAlso, in other docs.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492640360", "createdAt": "2020-09-22T10:49:49Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -77,6 +111,12 @@\n      */\n     public ClientCacheConfiguration getConfiguration() throws ClientException;\n \n+    /**\n+     * Gets the cache configuration asynchronously.\n+     * @return The cache configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMzcyOQ==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492913729", "createdAt": "2020-09-22T17:32:27Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -77,6 +111,12 @@\n      */\n     public ClientCacheConfiguration getConfiguration() throws ClientException;\n \n+    /**\n+     * Gets the cache configuration asynchronously.\n+     * @return The cache configuration.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MDM2MA=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEwMTA3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1MTozOVrOHV0b2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozMjozNVrOHWFEig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MTI0MQ==", "bodyText": "@return tag?", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492641241", "createdAt": "2020-09-22T10:51:39Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -117,6 +178,25 @@\n      */\n     public void putAll(Map<? extends K, ? extends V> map) throws ClientException;\n \n+    /**\n+     * Copies all of the entries from the specified map to the {@link ClientCache}.\n+     * <p>\n+     * The effect of this call is equivalent to that of calling\n+     * {@link #put(Object, Object) put(k, v)} on this cache once for each mapping\n+     * from key <tt>k</tt> to value <tt>v</tt> in the specified map.\n+     * <p>\n+     * The order in which the individual puts occur is undefined.\n+     * <p>\n+     * The behavior of this operation is undefined if entries in the cache\n+     * corresponding to entries in the map are modified or removed while this\n+     * operation is in progress. or if map is modified while the operation is in\n+     * progress.\n+     * <p>\n+     *\n+     * @param map Mappings to be stored in this cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxMzgwMg==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492913802", "createdAt": "2020-09-22T17:32:35Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -117,6 +178,25 @@\n      */\n     public void putAll(Map<? extends K, ? extends V> map) throws ClientException;\n \n+    /**\n+     * Copies all of the entries from the specified map to the {@link ClientCache}.\n+     * <p>\n+     * The effect of this call is equivalent to that of calling\n+     * {@link #put(Object, Object) put(k, v)} on this cache once for each mapping\n+     * from key <tt>k</tt> to value <tt>v</tt> in the specified map.\n+     * <p>\n+     * The order in which the individual puts occur is undefined.\n+     * <p>\n+     * The behavior of this operation is undefined if entries in the cache\n+     * corresponding to entries in the map are modified or removed while this\n+     * operation is in progress. or if map is modified while the operation is in\n+     * progress.\n+     * <p>\n+     *\n+     * @param map Mappings to be stored in this cache.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MTI0MQ=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEwOTg3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1MzoxNFrOHV0g6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozMzoxN1rOHWFGCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MjUzOA==", "bodyText": "...progress. or if...\n\nRemove dot or replace or with Or", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492642538", "createdAt": "2020-09-22T10:53:14Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -117,6 +178,25 @@\n      */\n     public void putAll(Map<? extends K, ? extends V> map) throws ClientException;\n \n+    /**\n+     * Copies all of the entries from the specified map to the {@link ClientCache}.\n+     * <p>\n+     * The effect of this call is equivalent to that of calling\n+     * {@link #put(Object, Object) put(k, v)} on this cache once for each mapping\n+     * from key <tt>k</tt> to value <tt>v</tt> in the specified map.\n+     * <p>\n+     * The order in which the individual puts occur is undefined.\n+     * <p>\n+     * The behavior of this operation is undefined if entries in the cache\n+     * corresponding to entries in the map are modified or removed while this\n+     * operation is in progress. or if map is modified while the operation is in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxNDE4Nw==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492914187", "createdAt": "2020-09-22T17:33:17Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -117,6 +178,25 @@\n      */\n     public void putAll(Map<? extends K, ? extends V> map) throws ClientException;\n \n+    /**\n+     * Copies all of the entries from the specified map to the {@link ClientCache}.\n+     * <p>\n+     * The effect of this call is equivalent to that of calling\n+     * {@link #put(Object, Object) put(k, v)} on this cache once for each mapping\n+     * from key <tt>k</tt> to value <tt>v</tt> in the specified map.\n+     * <p>\n+     * The order in which the individual puts occur is undefined.\n+     * <p>\n+     * The behavior of this operation is undefined if entries in the cache\n+     * corresponding to entries in the map are modified or removed while this\n+     * operation is in progress. or if map is modified while the operation is in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0MjUzOA=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzEyNDIyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMDo1NzowOVrOHV0pdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODowMjo1OFrOHWGMAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NDcyNg==", "bodyText": "Here in below.\nThe passage about atomicity (which is an important note) is placed at the end of the passage and the one can easily miss it IMO. May be it makes sense to reformat the first sentence to something like:\n\nThis is equivalent to performing the following operations as a single atomic action:\n\nNot a mandatory change request though, just a comment", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492644726", "createdAt": "2020-09-22T10:57:09Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -138,6 +218,27 @@\n      */\n     public boolean replace(K key, V oldVal, V newVal) throws ClientException;\n \n+    /**\n+     * Atomically replaces the entry for a key only if currently mapped to a given value.\n+     * <p>\n+     * This is equivalent to:\n+     * <pre><code>\n+     * if (cache.containsKey(key) &amp;&amp; equals(cache.get(key), oldValue)) {\n+     *  cache.put(key, newValue);\n+     * return true;\n+     * } else {\n+     *  return false;\n+     * }\n+     * </code></pre>\n+     * except that the action is performed atomically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMjA5OA==", "bodyText": "Good point, fixed here and in other places", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492932098", "createdAt": "2020-09-22T18:02:58Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -138,6 +218,27 @@\n      */\n     public boolean replace(K key, V oldVal, V newVal) throws ClientException;\n \n+    /**\n+     * Atomically replaces the entry for a key only if currently mapped to a given value.\n+     * <p>\n+     * This is equivalent to:\n+     * <pre><code>\n+     * if (cache.containsKey(key) &amp;&amp; equals(cache.get(key), oldValue)) {\n+     *  cache.put(key, newValue);\n+     * return true;\n+     * } else {\n+     *  return false;\n+     * }\n+     * </code></pre>\n+     * except that the action is performed atomically.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NDcyNg=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE0MjQ0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowMjozMFrOHV00Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzozNDo1MFrOHWFJzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NzQ1MQ==", "bodyText": "Minor: Looks like the line break is at the different position every time :)", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492647451", "createdAt": "2020-09-22T11:02:30Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -176,6 +297,24 @@\n      */\n     public boolean remove(K key) throws ClientException;\n \n+    /**\n+     * Removes the mapping for a key from this cache if it is present.\n+     * <p>\n+     * More formally, if this cache contains a mapping from key <tt>k</tt> to value <tt>v</tt> such that\n+     * <code>(key==null ?  k==null : key.equals(k))</code>, that mapping is removed.\n+     * (The cache can contain at most one such mapping.)\n+     *\n+     * <p>Returns <tt>true</tt> if this cache previously associated the key, or <tt>false</tt> if the cache\n+     * contained no mapping for the key.\n+     * <p>\n+     * The cache will not contain a mapping for the specified key once the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkxNTE0OQ==", "bodyText": "I just copied the javadoc from synchronous operations :)", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492915149", "createdAt": "2020-09-22T17:34:50Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -176,6 +297,24 @@\n      */\n     public boolean remove(K key) throws ClientException;\n \n+    /**\n+     * Removes the mapping for a key from this cache if it is present.\n+     * <p>\n+     * More formally, if this cache contains a mapping from key <tt>k</tt> to value <tt>v</tt> such that\n+     * <code>(key==null ?  k==null : key.equals(k))</code>, that mapping is removed.\n+     * (The cache can contain at most one such mapping.)\n+     *\n+     * <p>Returns <tt>true</tt> if this cache previously associated the key, or <tt>false</tt> if the cache\n+     * contained no mapping for the key.\n+     * <p>\n+     * The cache will not contain a mapping for the specified key once the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0NzQ1MQ=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE0Njg1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowNDowMFrOHV021Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo0OTozMVrOHWFsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0ODE0OQ==", "bodyText": "Maybe it needs to mention if the operation is atomic", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492648149", "createdAt": "2020-09-22T11:04:00Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -205,13 +364,29 @@\n      */\n     public void removeAll(Set<? extends K> keys) throws ClientException;\n \n+    /**\n+     * Removes entries for the specified keys.\n+     * <p>\n+     * The order in which the individual entries are removed is undefined.\n+     *\n+     * @param keys The keys to remove.\n+     */\n+    public IgniteClientFuture<Void> removeAllAsync(Set<? extends K> keys) throws ClientException;\n+\n     /**\n      * Removes all of the mappings from this cache.\n      * <p>\n      * The order that the individual entries are removed is undefined.\n      */\n     public void removeAll() throws ClientException;\n \n+    /**\n+     * Removes all of the mappings from this cache.\n+     * <p>\n+     * The order that the individual entries are removed is undefined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyMzk4OQ==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492923989", "createdAt": "2020-09-22T17:49:31Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -205,13 +364,29 @@\n      */\n     public void removeAll(Set<? extends K> keys) throws ClientException;\n \n+    /**\n+     * Removes entries for the specified keys.\n+     * <p>\n+     * The order in which the individual entries are removed is undefined.\n+     *\n+     * @param keys The keys to remove.\n+     */\n+    public IgniteClientFuture<Void> removeAllAsync(Set<? extends K> keys) throws ClientException;\n+\n     /**\n      * Removes all of the mappings from this cache.\n      * <p>\n      * The order that the individual entries are removed is undefined.\n      */\n     public void removeAll() throws ClientException;\n \n+    /**\n+     * Removes all of the mappings from this cache.\n+     * <p>\n+     * The order that the individual entries are removed is undefined.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY0ODE0OQ=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE2MjQxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMTowODozOFrOHV1AFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1MDoyMlrOHWFudQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MDUxOQ==", "bodyText": "Probably, needs a @return tag and the information about how this is different from removeAllAsync", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492650519", "createdAt": "2020-09-22T11:08:38Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -293,11 +529,36 @@\n      */\n     public boolean putIfAbsent(K key, V val) throws ClientException;\n \n+    /**\n+     * Atomically associates the specified key with the given value if it is not already associated with a value.\n+     * <p>\n+     * This is equivalent to:\n+     * <pre><code>\n+     * if (!cache.containsKey(key)) {}\n+     *   cache.put(key, value);\n+     *   return true;\n+     * } else {\n+     *   return false;\n+     * }\n+     * </code></pre>\n+     * except that the action is performed atomically.\n+     *\n+     * @param key Key with which the specified value is to be associated.\n+     * @param val Value to be associated with the specified key.\n+     * @return <tt>true</tt> if a value was set.\n+     */\n+    public IgniteClientFuture<Boolean> putIfAbsentAsync(K key, V val) throws ClientException;\n+\n     /**\n      * Clears the contents of the cache.\n      */\n     public void clear() throws ClientException;\n \n+    /**\n+     * Clears the contents of the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNDUzMw==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492924533", "createdAt": "2020-09-22T17:50:22Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCache.java", "diffHunk": "@@ -293,11 +529,36 @@\n      */\n     public boolean putIfAbsent(K key, V val) throws ClientException;\n \n+    /**\n+     * Atomically associates the specified key with the given value if it is not already associated with a value.\n+     * <p>\n+     * This is equivalent to:\n+     * <pre><code>\n+     * if (!cache.containsKey(key)) {}\n+     *   cache.put(key, value);\n+     *   return true;\n+     * } else {\n+     *   return false;\n+     * }\n+     * </code></pre>\n+     * except that the action is performed atomically.\n+     *\n+     * @param key Key with which the specified value is to be associated.\n+     * @param val Value to be associated with the specified key.\n+     * @return <tt>true</tt> if a value was set.\n+     */\n+    public IgniteClientFuture<Boolean> putIfAbsentAsync(K key, V val) throws ClientException;\n+\n     /**\n      * Clears the contents of the cache.\n      */\n     public void clear() throws ClientException;\n \n+    /**\n+     * Clears the contents of the cache.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MDUxOQ=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE3MDI0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCompute.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxMToxOFrOHV1E5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzo1MDowOFrOHWFt1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MTc0OQ==", "bodyText": "Maybe needs an explanation why is it deprecated.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492651749", "createdAt": "2020-09-22T11:11:18Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCompute.java", "diffHunk": "@@ -55,9 +55,23 @@\n      * @return A Future representing pending completion of the task.\n      * @throws ClientException If task failed.\n      * @see ComputeTask for information about task execution.\n+     * @deprecated Use {@link ClientCompute#executeAsync2(String, Object)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkyNDM3NQ==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492924375", "createdAt": "2020-09-22T17:50:08Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCompute.java", "diffHunk": "@@ -55,9 +55,23 @@\n      * @return A Future representing pending completion of the task.\n      * @throws ClientException If task failed.\n      * @see ComputeTask for information about task execution.\n+     * @deprecated Use {@link ClientCompute#executeAsync2(String, Object)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MTc0OQ=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE4MzcxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/IgniteClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxNTo0OFrOHV1M_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODowMTozNlrOHWGJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MzgyMQ==", "bodyText": "Probably, it worth to mention that the default configuration is going to be used.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492653821", "createdAt": "2020-09-22T11:15:48Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/IgniteClient.java", "diffHunk": "@@ -57,25 +72,50 @@\n      */\n     public Collection<String> cacheNames() throws ClientException;\n \n+    /**\n+     * @return Collection of names of currently available caches or an empty collection if no caches are available.\n+     */\n+    public IgniteClientFuture<Collection<String>> cacheNamesAsync() throws ClientException;\n+\n     /**\n      * Destroy cache.\n      */\n     public void destroyCache(String name) throws ClientException;\n \n+    /**\n+     * Destroy cache.\n+     */\n+    public IgniteClientFuture<Void> destroyCacheAsync(String name) throws ClientException;\n+\n     /**\n      * Create cache.\n      *\n      * @param name Cache name.\n      */\n     public <K, V> ClientCache<K, V> createCache(String name) throws ClientException;\n \n+    /**\n+     * Create cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzMTM1Ng==", "bodyText": "Fixed", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492931356", "createdAt": "2020-09-22T18:01:36Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/IgniteClient.java", "diffHunk": "@@ -57,25 +72,50 @@\n      */\n     public Collection<String> cacheNames() throws ClientException;\n \n+    /**\n+     * @return Collection of names of currently available caches or an empty collection if no caches are available.\n+     */\n+    public IgniteClientFuture<Collection<String>> cacheNamesAsync() throws ClientException;\n+\n     /**\n      * Destroy cache.\n      */\n     public void destroyCache(String name) throws ClientException;\n \n+    /**\n+     * Destroy cache.\n+     */\n+    public IgniteClientFuture<Void> destroyCacheAsync(String name) throws ClientException;\n+\n     /**\n      * Create cache.\n      *\n      * @param name Cache name.\n      */\n     public <K, V> ClientCache<K, V> createCache(String name) throws ClientException;\n \n+    /**\n+     * Create cache.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1MzgyMQ=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzE5MjYxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/configuration/ClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToxODo1NlrOHV1Shg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo1OToxN1rOHW3_VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NTIzOA==", "bodyText": "Is it null by default? Does it mean, user will get an exception in runtime if it uses continuation with no executor set?\nMaybe, we should set some implementation here as a default value? I'm pretty much sure, it is going to be fine for the most users, at least at the beginning of the development.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492655238", "createdAt": "2020-09-22T11:18:56Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/configuration/ClientConfiguration.java", "diffHunk": "@@ -115,6 +118,9 @@\n     /** Reconnect throttling retries. See {@code reconnectThrottlingPeriod}. */\n     private int reconnectThrottlingRetries = 3;\n \n+    /** Executor for async operations continuations. */\n+    private Executor asyncContinuationExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg5OTYxNA==", "bodyText": "This is a private property, please see public setter and getter, there is a detailed javadoc.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r492899614", "createdAt": "2020-09-22T17:09:10Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/configuration/ClientConfiguration.java", "diffHunk": "@@ -115,6 +118,9 @@\n     /** Reconnect throttling retries. See {@code reconnectThrottlingPeriod}. */\n     private int reconnectThrottlingRetries = 3;\n \n+    /** Executor for async operations continuations. */\n+    private Executor asyncContinuationExecutor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NTIzOA=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0ODA1Mw==", "bodyText": "My bad", "url": "https://github.com/apache/ignite/pull/8174#discussion_r493748053", "createdAt": "2020-09-23T16:59:17Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/configuration/ClientConfiguration.java", "diffHunk": "@@ -115,6 +118,9 @@\n     /** Reconnect throttling retries. See {@code reconnectThrottlingPeriod}. */\n     private int reconnectThrottlingRetries = 3;\n \n+    /** Executor for async operations continuations. */\n+    private Executor asyncContinuationExecutor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1NTIzOA=="}, "originalCommit": {"oid": "b6dad6464e979b5f3b8d59b196027c725f9b5126"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDA3ODk3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCompute.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo1NTo0NlrOHW326g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyOToxNFrOHXPf-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NTg5OA==", "bodyText": "By the way, do we ever need to leave an old method? I mean, IgniteClientFuture implementsFuture. Are the any cases that we can break by just changing return type to a child type?", "url": "https://github.com/apache/ignite/pull/8174#discussion_r493745898", "createdAt": "2020-09-23T16:55:46Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCompute.java", "diffHunk": "@@ -55,9 +55,25 @@\n      * @return A Future representing pending completion of the task.\n      * @throws ClientException If task failed.\n      * @see ComputeTask for information about task execution.\n+     * @deprecated Use {@link #executeAsync2(String, Object)} instead.\n+     * This method calls {@link #executeAsync2(String, Object)} internally, but returns a more limited\n+     * Future interface.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMzI0Mw==", "bodyText": "As I understand, this still breaks binary compatibility, so we have to create a new method.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r494133243", "createdAt": "2020-09-24T08:29:14Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/client/ClientCompute.java", "diffHunk": "@@ -55,9 +55,25 @@\n      * @return A Future representing pending completion of the task.\n      * @throws ClientException If task failed.\n      * @see ComputeTask for information about task execution.\n+     * @deprecated Use {@link #executeAsync2(String, Object)} instead.\n+     * This method calls {@link #executeAsync2(String, Object)} internally, but returns a more limited\n+     * Future interface.\n      */\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0NTg5OA=="}, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDEyNTAxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ClientComputeImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzowODowMlrOHW4UVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyOTozNVrOHXPhAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MzQzMQ==", "bodyText": "Do we need executeAsync at all?", "url": "https://github.com/apache/ignite/pull/8174#discussion_r493753431", "createdAt": "2020-09-23T17:08:02Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ClientComputeImpl.java", "diffHunk": "@@ -115,6 +119,11 @@\n         return executeAsync0(taskName, arg, dfltGrp, (byte)0, 0L);\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public <T, R> IgniteClientFuture<R> executeAsync2(String taskName, @Nullable T arg) throws ClientException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzMzUwNw==", "bodyText": "See above, I think we do, because of binary compatibility.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r494133507", "createdAt": "2020-09-24T08:29:35Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ClientComputeImpl.java", "diffHunk": "@@ -115,6 +119,11 @@\n         return executeAsync0(taskName, arg, dfltGrp, (byte)0, 0L);\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public <T, R> IgniteClientFuture<R> executeAsync2(String taskName, @Nullable T arg) throws ClientException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MzQzMQ=="}, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI1ODA0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ReliableChannel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0MzoyNFrOHW5nZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODozMzo0OFrOHXPrew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NDY5Mw==", "bodyText": "I think, only those operations that do not modify cache state should be retried or we can get unexpected results, if the operation was successfully performed, but we were unable to receive response.\nAlso, it is OK to retry if failure happens on send.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r493774693", "createdAt": "2020-09-23T17:43:24Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ReliableChannel.java", "diffHunk": "@@ -210,14 +213,95 @@\n         throw failure;\n     }\n \n+    /**\n+     * Send request and handle response asynchronously.\n+     */\n+    public <T> IgniteClientFuture<T> serviceAsync(\n+            ClientOperation op,\n+            Consumer<PayloadOutputChannel> payloadWriter,\n+            Function<PayloadInputChannel, T> payloadReader\n+    ) throws ClientException, ClientError {\n+        CompletableFuture<T> fut = new CompletableFuture<>();\n+\n+        ClientChannel ch = channel();\n+\n+        ch.serviceAsync(op, payloadWriter, payloadReader).handle((res, err) ->\n+                handleServiceAsync(op, payloadWriter, payloadReader, fut, null, null, ch, res, err));\n+\n+        return new IgniteClientFutureImpl<>(fut);\n+    }\n+\n+    /**\n+     * Handles serviceAsync results and retries as needed.\n+     */\n+    private <T> Object handleServiceAsync(ClientOperation op,\n+                                          Consumer<PayloadOutputChannel> payloadWriter,\n+                                          Function<PayloadInputChannel, T> payloadReader,\n+                                          CompletableFuture<T> fut,\n+                                          ClientConnectionException failure,\n+                                          AtomicInteger chIdx,\n+                                          ClientChannel ch,\n+                                          T res,\n+                                          Throwable err) {\n+        if (err == null) {\n+            fut.complete(res);\n+            return null;\n+        }\n+\n+        if (err instanceof ClientConnectionException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzNDE4OA==", "bodyText": "I agree, but this behavior is consistent with sync API, I don't think we should have different behavior for sync and async API.", "url": "https://github.com/apache/ignite/pull/8174#discussion_r494134188", "createdAt": "2020-09-24T08:30:33Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ReliableChannel.java", "diffHunk": "@@ -210,14 +213,95 @@\n         throw failure;\n     }\n \n+    /**\n+     * Send request and handle response asynchronously.\n+     */\n+    public <T> IgniteClientFuture<T> serviceAsync(\n+            ClientOperation op,\n+            Consumer<PayloadOutputChannel> payloadWriter,\n+            Function<PayloadInputChannel, T> payloadReader\n+    ) throws ClientException, ClientError {\n+        CompletableFuture<T> fut = new CompletableFuture<>();\n+\n+        ClientChannel ch = channel();\n+\n+        ch.serviceAsync(op, payloadWriter, payloadReader).handle((res, err) ->\n+                handleServiceAsync(op, payloadWriter, payloadReader, fut, null, null, ch, res, err));\n+\n+        return new IgniteClientFutureImpl<>(fut);\n+    }\n+\n+    /**\n+     * Handles serviceAsync results and retries as needed.\n+     */\n+    private <T> Object handleServiceAsync(ClientOperation op,\n+                                          Consumer<PayloadOutputChannel> payloadWriter,\n+                                          Function<PayloadInputChannel, T> payloadReader,\n+                                          CompletableFuture<T> fut,\n+                                          ClientConnectionException failure,\n+                                          AtomicInteger chIdx,\n+                                          ClientChannel ch,\n+                                          T res,\n+                                          Throwable err) {\n+        if (err == null) {\n+            fut.complete(res);\n+            return null;\n+        }\n+\n+        if (err instanceof ClientConnectionException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NDY5Mw=="}, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEzNjE4Nw==", "bodyText": "Well, OK then", "url": "https://github.com/apache/ignite/pull/8174#discussion_r494136187", "createdAt": "2020-09-24T08:33:48Z", "author": {"login": "isapego"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/client/thin/ReliableChannel.java", "diffHunk": "@@ -210,14 +213,95 @@\n         throw failure;\n     }\n \n+    /**\n+     * Send request and handle response asynchronously.\n+     */\n+    public <T> IgniteClientFuture<T> serviceAsync(\n+            ClientOperation op,\n+            Consumer<PayloadOutputChannel> payloadWriter,\n+            Function<PayloadInputChannel, T> payloadReader\n+    ) throws ClientException, ClientError {\n+        CompletableFuture<T> fut = new CompletableFuture<>();\n+\n+        ClientChannel ch = channel();\n+\n+        ch.serviceAsync(op, payloadWriter, payloadReader).handle((res, err) ->\n+                handleServiceAsync(op, payloadWriter, payloadReader, fut, null, null, ch, res, err));\n+\n+        return new IgniteClientFutureImpl<>(fut);\n+    }\n+\n+    /**\n+     * Handles serviceAsync results and retries as needed.\n+     */\n+    private <T> Object handleServiceAsync(ClientOperation op,\n+                                          Consumer<PayloadOutputChannel> payloadWriter,\n+                                          Function<PayloadInputChannel, T> payloadReader,\n+                                          CompletableFuture<T> fut,\n+                                          ClientConnectionException failure,\n+                                          AtomicInteger chIdx,\n+                                          ClientChannel ch,\n+                                          T res,\n+                                          Throwable err) {\n+        if (err == null) {\n+            fut.complete(res);\n+            return null;\n+        }\n+\n+        if (err instanceof ClientConnectionException) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NDY5Mw=="}, "originalCommit": {"oid": "44f6fd96ca199c27b40dc10e301c6f30391c5e44"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2726, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}