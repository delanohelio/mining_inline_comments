{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzOTQxMTky", "number": 8239, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDozNTo0OFrOEjh3YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo0MjozMlrOEjiAeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjkwNDY0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDozNTo0OFrOHR7gWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDozNTo0OFrOHR7gWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2Mjc3Ng==", "bodyText": "markAsBroken(e)?", "url": "https://github.com/apache/ignite/pull/8239#discussion_r488562776", "createdAt": "2020-09-15T10:35:48Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.control_utility;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.cache.CacheException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteTransactions;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.util.lang.IgnitePair;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionRollbackException;\n+\n+/**\n+ * Run long running transactions on node with specified param.\n+ */\n+public class LongRunningTransaction extends IgniteAwareApplication {\n+    /** */\n+    private static final Duration TOPOLOGY_WAIT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    /** */\n+    private static final String KEY_LOCKED_MESSAGE = \"APPLICATION_KEY_LOCKED\";\n+\n+    /** */\n+    private static final String LOCKED_KEY_PREFIX = \"KEY_\";\n+\n+    /** */\n+    private volatile Executor pool;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        IgniteCache<String, String> cache = ignite.cache(jsonNode.get(\"cache_name\").asText());\n+\n+        int txCount = jsonNode.get(\"tx_count\") != null ? jsonNode.get(\"tx_count\").asInt() : 1;\n+\n+        int txSize = jsonNode.get(\"tx_size\") != null ? jsonNode.get(\"tx_size\").asInt() : 1;\n+\n+        String keyPrefix = jsonNode.get(\"key_prefix\") != null ? jsonNode.get(\"key_prefix\").asText() : LOCKED_KEY_PREFIX;\n+\n+        String label = jsonNode.get(\"label\") != null ? jsonNode.get(\"label\").asText() : null;\n+\n+        long expectedTopologyVersion = jsonNode.get(\"wait_for_topology_version\") != null ?\n+            jsonNode.get(\"wait_for_topology_version\").asLong() : -1L;\n+\n+        CountDownLatch lockLatch = new CountDownLatch(txCount);\n+\n+        pool = Executors.newFixedThreadPool(2 * txCount);\n+\n+        markInitialized();\n+\n+        if (expectedTopologyVersion > 0) {\n+            log.info(\"Start waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+\n+            long start = System.nanoTime();\n+\n+            while (ignite.cluster().topologyVersion() < expectedTopologyVersion\n+                && Duration.ofNanos(start - System.nanoTime()).compareTo(TOPOLOGY_WAIT_TIMEOUT) < 0)\n+                Thread.sleep(100L);\n+\n+            log.info(\"Finished waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+        }\n+\n+        for (int i = 0; i < txCount; i++) {\n+            String key = keyPrefix + i;\n+            String value = \"VALUE_\" + i;\n+\n+            pool.execute(new Runnable() {\n+                @Override public void run() {\n+                    cache.put(key, value);\n+\n+                    Lock lock = cache.lock(key);\n+\n+                    lock.lock();\n+                    try {\n+                        lockLatch.countDown();\n+\n+                        while (!terminated())\n+                            Thread.sleep(100L);\n+                    }\n+                    catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjkyNzk0OnYy", "diffSide": "RIGHT", "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo0MjozMlrOHR7uzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMDo0MjozMlrOHR7uzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU2NjQ3OA==", "bodyText": "newline missed", "url": "https://github.com/apache/ignite/pull/8239#discussion_r488566478", "createdAt": "2020-09-15T10:42:32Z", "author": {"login": "anton-vinogradov"}, "path": "modules/ducktests/src/main/java/org/apache/ignite/internal/ducktest/tests/control_utility/LongRunningTransaction.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.ducktest.tests.control_utility;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.locks.Lock;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.cache.CacheException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteTransactions;\n+import org.apache.ignite.internal.ducktest.utils.IgniteAwareApplication;\n+import org.apache.ignite.internal.util.lang.IgnitePair;\n+import org.apache.ignite.lang.IgniteUuid;\n+import org.apache.ignite.transactions.Transaction;\n+import org.apache.ignite.transactions.TransactionRollbackException;\n+\n+/**\n+ * Run long running transactions on node with specified param.\n+ */\n+public class LongRunningTransaction extends IgniteAwareApplication {\n+    /** */\n+    private static final Duration TOPOLOGY_WAIT_TIMEOUT = Duration.ofSeconds(60);\n+\n+    /** */\n+    private static final String KEY_LOCKED_MESSAGE = \"APPLICATION_KEY_LOCKED\";\n+\n+    /** */\n+    private static final String LOCKED_KEY_PREFIX = \"KEY_\";\n+\n+    /** */\n+    private volatile Executor pool;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void run(JsonNode jsonNode) throws Exception {\n+        IgniteCache<String, String> cache = ignite.cache(jsonNode.get(\"cache_name\").asText());\n+\n+        int txCount = jsonNode.get(\"tx_count\") != null ? jsonNode.get(\"tx_count\").asInt() : 1;\n+\n+        int txSize = jsonNode.get(\"tx_size\") != null ? jsonNode.get(\"tx_size\").asInt() : 1;\n+\n+        String keyPrefix = jsonNode.get(\"key_prefix\") != null ? jsonNode.get(\"key_prefix\").asText() : LOCKED_KEY_PREFIX;\n+\n+        String label = jsonNode.get(\"label\") != null ? jsonNode.get(\"label\").asText() : null;\n+\n+        long expectedTopologyVersion = jsonNode.get(\"wait_for_topology_version\") != null ?\n+            jsonNode.get(\"wait_for_topology_version\").asLong() : -1L;\n+\n+        CountDownLatch lockLatch = new CountDownLatch(txCount);\n+\n+        pool = Executors.newFixedThreadPool(2 * txCount);\n+\n+        markInitialized();\n+\n+        if (expectedTopologyVersion > 0) {\n+            log.info(\"Start waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+\n+            long start = System.nanoTime();\n+\n+            while (ignite.cluster().topologyVersion() < expectedTopologyVersion\n+                && Duration.ofNanos(start - System.nanoTime()).compareTo(TOPOLOGY_WAIT_TIMEOUT) < 0)\n+                Thread.sleep(100L);\n+\n+            log.info(\"Finished waiting for topology version: \" + expectedTopologyVersion + \", \" +\n+                \"current version is: \" + ignite.cluster().topologyVersion());\n+        }\n+\n+        for (int i = 0; i < txCount; i++) {\n+            String key = keyPrefix + i;\n+            String value = \"VALUE_\" + i;\n+\n+            pool.execute(new Runnable() {\n+                @Override public void run() {\n+                    cache.put(key, value);\n+\n+                    Lock lock = cache.lock(key);\n+\n+                    lock.lock();\n+                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba506c216486b39b5ffe56a2936030534ae9b007"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2655, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}