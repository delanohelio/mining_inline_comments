{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjI2MTI0", "number": 7714, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoyNjo1OFrOD1Nkwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozNTozNFrOD1NyQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTIzNTIyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoyNjo1OFrOGKiNLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozNDoxMFrOGKkqMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5OTM3NQ==", "bodyText": "initilized -> initialized", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413699375", "createdAt": "2020-04-23T10:26:58Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -257,11 +258,20 @@ private void sendSingleMessage(Process p) {\n         SingleNodeMessage<R> singleMsg = new SingleNodeMessage<>(p.id, type, p.resFut.result(),\n             (Exception)p.resFut.error());\n \n-        if (F.eq(ctx.localNodeId(), p.crdId))\n-            onSingleNodeMessageReceived(singleMsg, p.crdId);\n+        UUID crdId = p.crdId;\n+\n+        if (F.eq(ctx.localNodeId(), crdId))\n+            onSingleNodeMessageReceived(singleMsg, crdId);\n         else {\n             try {\n-                ctx.io().sendToGridTopic(p.crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+                ctx.io().sendToGridTopic(crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+            }\n+            catch (ClusterTopologyCheckedException e) {\n+                // The coordinator was failed. The single message will be sent when a new coordinator initilized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczOTU3MA==", "bodyText": "Fixed. Thank you.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413739570", "createdAt": "2020-04-23T11:34:10Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -257,11 +258,20 @@ private void sendSingleMessage(Process p) {\n         SingleNodeMessage<R> singleMsg = new SingleNodeMessage<>(p.id, type, p.resFut.result(),\n             (Exception)p.resFut.error());\n \n-        if (F.eq(ctx.localNodeId(), p.crdId))\n-            onSingleNodeMessageReceived(singleMsg, p.crdId);\n+        UUID crdId = p.crdId;\n+\n+        if (F.eq(ctx.localNodeId(), crdId))\n+            onSingleNodeMessageReceived(singleMsg, crdId);\n         else {\n             try {\n-                ctx.io().sendToGridTopic(p.crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+                ctx.io().sendToGridTopic(crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+            }\n+            catch (ClusterTopologyCheckedException e) {\n+                // The coordinator was failed. The single message will be sent when a new coordinator initilized.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY5OTM3NQ=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTI0MDEwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDoyODoxOFrOGKiQUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMToyNjoyM1rOGKkY1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMDE3OA==", "bodyText": "Can you please check, do we need logging here? It seems FailureHandler will log exactly the same message.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413700178", "createdAt": "2020-04-23T10:28:18Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -257,11 +258,20 @@ private void sendSingleMessage(Process p) {\n         SingleNodeMessage<R> singleMsg = new SingleNodeMessage<>(p.id, type, p.resFut.result(),\n             (Exception)p.resFut.error());\n \n-        if (F.eq(ctx.localNodeId(), p.crdId))\n-            onSingleNodeMessageReceived(singleMsg, p.crdId);\n+        UUID crdId = p.crdId;\n+\n+        if (F.eq(ctx.localNodeId(), crdId))\n+            onSingleNodeMessageReceived(singleMsg, crdId);\n         else {\n             try {\n-                ctx.io().sendToGridTopic(p.crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+                ctx.io().sendToGridTopic(crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+            }\n+            catch (ClusterTopologyCheckedException e) {\n+                // The coordinator was failed. The single message will be sent when a new coordinator initilized.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Failed to send a single message to coordinator: [crdId=\" + crdId +\n+                        \", processId=\" + p.id +\", error=\" + e.getMessage() + ']');\n+                }\n             }\n             catch (IgniteCheckedException e) {\n                 log.error(\"Unable to send message to coordinator.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczNTEyNg==", "bodyText": "This is debug logging. Also, I reuse it in the test to make sure that was an attempt to sent a single message. (Another way is override distributed process and watching for calling sendSingleMessage (should be not private))", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413735126", "createdAt": "2020-04-23T11:26:23Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -257,11 +258,20 @@ private void sendSingleMessage(Process p) {\n         SingleNodeMessage<R> singleMsg = new SingleNodeMessage<>(p.id, type, p.resFut.result(),\n             (Exception)p.resFut.error());\n \n-        if (F.eq(ctx.localNodeId(), p.crdId))\n-            onSingleNodeMessageReceived(singleMsg, p.crdId);\n+        UUID crdId = p.crdId;\n+\n+        if (F.eq(ctx.localNodeId(), crdId))\n+            onSingleNodeMessageReceived(singleMsg, crdId);\n         else {\n             try {\n-                ctx.io().sendToGridTopic(p.crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+                ctx.io().sendToGridTopic(crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+            }\n+            catch (ClusterTopologyCheckedException e) {\n+                // The coordinator was failed. The single message will be sent when a new coordinator initilized.\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Failed to send a single message to coordinator: [crdId=\" + crdId +\n+                        \", processId=\" + p.id +\", error=\" + e.getMessage() + ']');\n+                }\n             }\n             catch (IgniteCheckedException e) {\n                 log.error(\"Unable to send message to coordinator.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMDE3OA=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTI1MDAwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozMDo1MVrOGKiWVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozMzoxNVrOGKkoUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMTcxOA==", "bodyText": "Personally, I don't support such cases.\n\nwe can use the DEFAULT type of the distributed process which can be used on all nodes. It's also nice to mention that a newly created distributed process must be registered on all nodes (e.g. via compute?).\nalready existing types can be also reused in tests.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413701718", "createdAt": "2020-04-23T10:30:51Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -367,6 +377,9 @@ private Process(UUID id) {\n \n     /** Defines distributed processes. */\n     public enum DistributedProcessType {\n+        /** For test purpose only. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczNzc1Mg==", "bodyText": "I'm against using existing types. It'll require unnecessary configuration and logic for such processes and will make tests more difficult.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413737752", "createdAt": "2020-04-23T11:30:58Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -367,6 +377,9 @@ private Process(UUID id) {\n \n     /** Defines distributed processes. */\n     public enum DistributedProcessType {\n+        /** For test purpose only. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMTcxOA=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczOTA4OQ==", "bodyText": "What means the DEFAULT process? What if we want to add test logic to the action and the finish callbacks? When it will be registered?", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413739089", "createdAt": "2020-04-23T11:33:15Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -367,6 +377,9 @@ private Process(UUID id) {\n \n     /** Defines distributed processes. */\n     public enum DistributedProcessType {\n+        /** For test purpose only. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMTcxOA=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTI2MTY1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/util/DistributedProcessCoordinatorLeftTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozMzozMlrOGKidHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozOTowMVrOGKk0_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMzQ1NQ==", "bodyText": "Should we release latch only after the single-message future completed? It's still possible that a new coordinator will be assigned prior to the single message sent.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413703455", "createdAt": "2020-04-23T10:33:32Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/DistributedProcessCoordinatorLeftTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.FailureContext;\n+import org.apache.ignite.failure.FailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.distributed.DistributedProcess;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.ListeningTestLogger;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.events.EventType.EVT_NODE_FAILED;\n+import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n+import static org.apache.ignite.internal.util.distributed.DistributedProcess.DistributedProcessType.TEST_PROCESS;\n+\n+/**\n+ * Tests {@link DistributedProcess} in case of coordinator node left.\n+ */\n+public class DistributedProcessCoordinatorLeftTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 20_000L;\n+\n+    /** */\n+    public static final int NODES_CNT = 3;\n+\n+    /** Latch to send single message on node left. */\n+    private final CountDownLatch nodeLeftLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Latch to await sending single messages to a failed coordinator. */\n+    private final CountDownLatch msgSendLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Failure handler invocation flag. */\n+    private final AtomicBoolean failure = new AtomicBoolean();\n+\n+    /** */\n+    private final ListeningTestLogger listeningLog = new ListeningTestLogger(true, log);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setGridLogger(listeningLog);\n+\n+        cfg.setLocalEventListeners(Collections.singletonMap(event -> {\n+            nodeLeftLatch.countDown();\n+\n+            try {\n+                msgSendLatch.await();\n+            }\n+            catch (InterruptedException e) {\n+                fail(\"Unexpected interrupt.\");\n+            }\n+\n+            return false;\n+        }, new int[] {EVT_NODE_LEFT, EVT_NODE_FAILED}));\n+\n+        cfg.setFailureHandler(new FailureHandler() {\n+            @Override public boolean onFailure(Ignite ignite, FailureContext failureCtx) {\n+                failure.set(true);\n+\n+                return false;\n+            }\n+        });\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests that coordinator failing during sending single result not cause node failure and the process finishes.\n+     *\n+     * <ol>\n+     *  <li>Start new process of {@link DistributedProcess}.</li>\n+     *  <li>The coordinator fails.</li>\n+     *  <li>Nodes try to send a single message to the not-alive coordinator.</li>\n+     *  <li>{@link DistributedProcess} process a node left event and reinitialize a new coordinator.</li>\n+     *  <li>Process finishes.</li>\n+     * </ol>\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testCoordinatorFailed() throws Exception {\n+        startGrids(NODES_CNT);\n+\n+        CountDownLatch startLatch = new CountDownLatch(NODES_CNT);\n+        CountDownLatch finishLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+        HashMap<String, DistributedProcess<Integer, Integer>> processes = new HashMap<>();\n+\n+        int processRes = 1;\n+\n+        for (Ignite grid : G.allGrids()) {\n+            DistributedProcess<Integer, Integer> dp = new DistributedProcess<>(((IgniteEx)grid).context(), TEST_PROCESS,\n+                req -> GridTestUtils.runAsync(() -> {\n+                    startLatch.countDown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczMjA0OQ==", "bodyText": "The mentioned startLatch is to make sure that process started and we can drop coordinator.\nA new coordinator can't be reassigned because the event queue is blocked by msgSendLatch until single messages sent.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413732049", "createdAt": "2020-04-23T11:21:12Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/DistributedProcessCoordinatorLeftTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.FailureContext;\n+import org.apache.ignite.failure.FailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.distributed.DistributedProcess;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.ListeningTestLogger;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.events.EventType.EVT_NODE_FAILED;\n+import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n+import static org.apache.ignite.internal.util.distributed.DistributedProcess.DistributedProcessType.TEST_PROCESS;\n+\n+/**\n+ * Tests {@link DistributedProcess} in case of coordinator node left.\n+ */\n+public class DistributedProcessCoordinatorLeftTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 20_000L;\n+\n+    /** */\n+    public static final int NODES_CNT = 3;\n+\n+    /** Latch to send single message on node left. */\n+    private final CountDownLatch nodeLeftLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Latch to await sending single messages to a failed coordinator. */\n+    private final CountDownLatch msgSendLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Failure handler invocation flag. */\n+    private final AtomicBoolean failure = new AtomicBoolean();\n+\n+    /** */\n+    private final ListeningTestLogger listeningLog = new ListeningTestLogger(true, log);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setGridLogger(listeningLog);\n+\n+        cfg.setLocalEventListeners(Collections.singletonMap(event -> {\n+            nodeLeftLatch.countDown();\n+\n+            try {\n+                msgSendLatch.await();\n+            }\n+            catch (InterruptedException e) {\n+                fail(\"Unexpected interrupt.\");\n+            }\n+\n+            return false;\n+        }, new int[] {EVT_NODE_LEFT, EVT_NODE_FAILED}));\n+\n+        cfg.setFailureHandler(new FailureHandler() {\n+            @Override public boolean onFailure(Ignite ignite, FailureContext failureCtx) {\n+                failure.set(true);\n+\n+                return false;\n+            }\n+        });\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests that coordinator failing during sending single result not cause node failure and the process finishes.\n+     *\n+     * <ol>\n+     *  <li>Start new process of {@link DistributedProcess}.</li>\n+     *  <li>The coordinator fails.</li>\n+     *  <li>Nodes try to send a single message to the not-alive coordinator.</li>\n+     *  <li>{@link DistributedProcess} process a node left event and reinitialize a new coordinator.</li>\n+     *  <li>Process finishes.</li>\n+     * </ol>\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testCoordinatorFailed() throws Exception {\n+        startGrids(NODES_CNT);\n+\n+        CountDownLatch startLatch = new CountDownLatch(NODES_CNT);\n+        CountDownLatch finishLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+        HashMap<String, DistributedProcess<Integer, Integer>> processes = new HashMap<>();\n+\n+        int processRes = 1;\n+\n+        for (Ignite grid : G.allGrids()) {\n+            DistributedProcess<Integer, Integer> dp = new DistributedProcess<>(((IgniteEx)grid).context(), TEST_PROCESS,\n+                req -> GridTestUtils.runAsync(() -> {\n+                    startLatch.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMzQ1NQ=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczODMyMQ==", "bodyText": "The single message future must be completed prior to the event queue processing released. Is it true for now? Currently, this will happen at the same time and we will have a race with a new coordinator assigned to the Process.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413738321", "createdAt": "2020-04-23T11:31:53Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/DistributedProcessCoordinatorLeftTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.FailureContext;\n+import org.apache.ignite.failure.FailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.distributed.DistributedProcess;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.ListeningTestLogger;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.events.EventType.EVT_NODE_FAILED;\n+import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n+import static org.apache.ignite.internal.util.distributed.DistributedProcess.DistributedProcessType.TEST_PROCESS;\n+\n+/**\n+ * Tests {@link DistributedProcess} in case of coordinator node left.\n+ */\n+public class DistributedProcessCoordinatorLeftTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 20_000L;\n+\n+    /** */\n+    public static final int NODES_CNT = 3;\n+\n+    /** Latch to send single message on node left. */\n+    private final CountDownLatch nodeLeftLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Latch to await sending single messages to a failed coordinator. */\n+    private final CountDownLatch msgSendLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Failure handler invocation flag. */\n+    private final AtomicBoolean failure = new AtomicBoolean();\n+\n+    /** */\n+    private final ListeningTestLogger listeningLog = new ListeningTestLogger(true, log);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setGridLogger(listeningLog);\n+\n+        cfg.setLocalEventListeners(Collections.singletonMap(event -> {\n+            nodeLeftLatch.countDown();\n+\n+            try {\n+                msgSendLatch.await();\n+            }\n+            catch (InterruptedException e) {\n+                fail(\"Unexpected interrupt.\");\n+            }\n+\n+            return false;\n+        }, new int[] {EVT_NODE_LEFT, EVT_NODE_FAILED}));\n+\n+        cfg.setFailureHandler(new FailureHandler() {\n+            @Override public boolean onFailure(Ignite ignite, FailureContext failureCtx) {\n+                failure.set(true);\n+\n+                return false;\n+            }\n+        });\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests that coordinator failing during sending single result not cause node failure and the process finishes.\n+     *\n+     * <ol>\n+     *  <li>Start new process of {@link DistributedProcess}.</li>\n+     *  <li>The coordinator fails.</li>\n+     *  <li>Nodes try to send a single message to the not-alive coordinator.</li>\n+     *  <li>{@link DistributedProcess} process a node left event and reinitialize a new coordinator.</li>\n+     *  <li>Process finishes.</li>\n+     * </ol>\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testCoordinatorFailed() throws Exception {\n+        startGrids(NODES_CNT);\n+\n+        CountDownLatch startLatch = new CountDownLatch(NODES_CNT);\n+        CountDownLatch finishLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+        HashMap<String, DistributedProcess<Integer, Integer>> processes = new HashMap<>();\n+\n+        int processRes = 1;\n+\n+        for (Ignite grid : G.allGrids()) {\n+            DistributedProcess<Integer, Integer> dp = new DistributedProcess<>(((IgniteEx)grid).context(), TEST_PROCESS,\n+                req -> GridTestUtils.runAsync(() -> {\n+                    startLatch.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMzQ1NQ=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc0MjMzNA==", "bodyText": "Yes, it's true. 'msgSendLatch' guarantees this. The coordinator will be changed at the event thread after releasing the latch.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413742334", "createdAt": "2020-04-23T11:39:01Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/util/DistributedProcessCoordinatorLeftTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.util;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.FailureContext;\n+import org.apache.ignite.failure.FailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.util.distributed.DistributedProcess;\n+import org.apache.ignite.internal.util.typedef.G;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.ListeningTestLogger;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.apache.ignite.events.EventType.EVT_NODE_FAILED;\n+import static org.apache.ignite.events.EventType.EVT_NODE_LEFT;\n+import static org.apache.ignite.internal.util.distributed.DistributedProcess.DistributedProcessType.TEST_PROCESS;\n+\n+/**\n+ * Tests {@link DistributedProcess} in case of coordinator node left.\n+ */\n+public class DistributedProcessCoordinatorLeftTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final long TIMEOUT = 20_000L;\n+\n+    /** */\n+    public static final int NODES_CNT = 3;\n+\n+    /** Latch to send single message on node left. */\n+    private final CountDownLatch nodeLeftLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Latch to await sending single messages to a failed coordinator. */\n+    private final CountDownLatch msgSendLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+    /** Failure handler invocation flag. */\n+    private final AtomicBoolean failure = new AtomicBoolean();\n+\n+    /** */\n+    private final ListeningTestLogger listeningLog = new ListeningTestLogger(true, log);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setGridLogger(listeningLog);\n+\n+        cfg.setLocalEventListeners(Collections.singletonMap(event -> {\n+            nodeLeftLatch.countDown();\n+\n+            try {\n+                msgSendLatch.await();\n+            }\n+            catch (InterruptedException e) {\n+                fail(\"Unexpected interrupt.\");\n+            }\n+\n+            return false;\n+        }, new int[] {EVT_NODE_LEFT, EVT_NODE_FAILED}));\n+\n+        cfg.setFailureHandler(new FailureHandler() {\n+            @Override public boolean onFailure(Ignite ignite, FailureContext failureCtx) {\n+                failure.set(true);\n+\n+                return false;\n+            }\n+        });\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Tests that coordinator failing during sending single result not cause node failure and the process finishes.\n+     *\n+     * <ol>\n+     *  <li>Start new process of {@link DistributedProcess}.</li>\n+     *  <li>The coordinator fails.</li>\n+     *  <li>Nodes try to send a single message to the not-alive coordinator.</li>\n+     *  <li>{@link DistributedProcess} process a node left event and reinitialize a new coordinator.</li>\n+     *  <li>Process finishes.</li>\n+     * </ol>\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testCoordinatorFailed() throws Exception {\n+        startGrids(NODES_CNT);\n+\n+        CountDownLatch startLatch = new CountDownLatch(NODES_CNT);\n+        CountDownLatch finishLatch = new CountDownLatch(NODES_CNT - 1);\n+\n+        HashMap<String, DistributedProcess<Integer, Integer>> processes = new HashMap<>();\n+\n+        int processRes = 1;\n+\n+        for (Ignite grid : G.allGrids()) {\n+            DistributedProcess<Integer, Integer> dp = new DistributedProcess<>(((IgniteEx)grid).context(), TEST_PROCESS,\n+                req -> GridTestUtils.runAsync(() -> {\n+                    startLatch.countDown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwMzQ1NQ=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTI2NTc2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozNDoyOVrOGKifiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozNDoxN1rOGKkqbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNDA3Mw==", "bodyText": "was failed -> has failed?", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413704073", "createdAt": "2020-04-23T10:34:29Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -257,11 +258,20 @@ private void sendSingleMessage(Process p) {\n         SingleNodeMessage<R> singleMsg = new SingleNodeMessage<>(p.id, type, p.resFut.result(),\n             (Exception)p.resFut.error());\n \n-        if (F.eq(ctx.localNodeId(), p.crdId))\n-            onSingleNodeMessageReceived(singleMsg, p.crdId);\n+        UUID crdId = p.crdId;\n+\n+        if (F.eq(ctx.localNodeId(), crdId))\n+            onSingleNodeMessageReceived(singleMsg, crdId);\n         else {\n             try {\n-                ctx.io().sendToGridTopic(p.crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+                ctx.io().sendToGridTopic(crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+            }\n+            catch (ClusterTopologyCheckedException e) {\n+                // The coordinator was failed. The single message will be sent when a new coordinator initilized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczOTYzMQ==", "bodyText": "Fixed. Thank you.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413739631", "createdAt": "2020-04-23T11:34:17Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/util/distributed/DistributedProcess.java", "diffHunk": "@@ -257,11 +258,20 @@ private void sendSingleMessage(Process p) {\n         SingleNodeMessage<R> singleMsg = new SingleNodeMessage<>(p.id, type, p.resFut.result(),\n             (Exception)p.resFut.error());\n \n-        if (F.eq(ctx.localNodeId(), p.crdId))\n-            onSingleNodeMessageReceived(singleMsg, p.crdId);\n+        UUID crdId = p.crdId;\n+\n+        if (F.eq(ctx.localNodeId(), crdId))\n+            onSingleNodeMessageReceived(singleMsg, crdId);\n         else {\n             try {\n-                ctx.io().sendToGridTopic(p.crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+                ctx.io().sendToGridTopic(crdId, GridTopic.TOPIC_DISTRIBUTED_PROCESS, singleMsg, SYSTEM_POOL);\n+            }\n+            catch (ClusterTopologyCheckedException e) {\n+                // The coordinator was failed. The single message will be sent when a new coordinator initilized.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNDA3Mw=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTI2OTc5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteUtilSelfTestSuite.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDozNTozNFrOGKih-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMTozNDoyM1rOGKkqrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNDY5OA==", "bodyText": "I don't think we need such comments :-)", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413704698", "createdAt": "2020-04-23T10:35:34Z", "author": {"login": "Mmuzaf"}, "path": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteUtilSelfTestSuite.java", "diffHunk": "@@ -136,7 +137,10 @@\n     // control.sh\n     CommandHandlerParsingTest.class,\n \n-    GridCountDownCallbackTest.class\n+    GridCountDownCallbackTest.class,\n+\n+    // Distributed process.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzczOTY5Mg==", "bodyText": "Fixed. Thank you.", "url": "https://github.com/apache/ignite/pull/7714#discussion_r413739692", "createdAt": "2020-04-23T11:34:23Z", "author": {"login": "NSAmelchev"}, "path": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteUtilSelfTestSuite.java", "diffHunk": "@@ -136,7 +137,10 @@\n     // control.sh\n     CommandHandlerParsingTest.class,\n \n-    GridCountDownCallbackTest.class\n+    GridCountDownCallbackTest.class,\n+\n+    // Distributed process.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzcwNDY5OA=="}, "originalCommit": {"oid": "841a347221b363f82f7fd3060f682890b93efd1a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2464, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}